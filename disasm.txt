
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 be c2 00 00       	call   c000c2de <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 f7 01 00       	call   c001f758 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 02 02 c0       	mov    ebx,0xc00202e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 02 02 c0    	cmp    ebx,0xc00202ec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 41 02 c0       	mov    eax,0xc00241ac
c0000049:	3d ac 41 02 c0       	cmp    eax,0xc00241ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 41 02 c0       	push   0xc00241ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 41 02 c0       	mov    eax,0xc00241ac
c0000075:	2d ac 41 02 c0       	sub    eax,0xc00241ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 41 02 c0       	push   0xc00241ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002434c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 02 02 c0       	mov    ebx,0xc00202f4
c00000bb:	81 eb f0 02 02 c0    	sub    ebx,0xc00202f0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 02 02 c0       	mov    esi,0xc00202f0
c00000ca:	a1 50 43 02 c0       	mov    eax,ds:0xc0024350
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 43 02 c0       	mov    ds:0xc0024350,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 43 02 c0       	mov    eax,ds:0xc0024350
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 41 02 c0       	push   0xc00241ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 43 02 c0 01 	mov    BYTE PTR ds:0xc002434c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 43 02 c0       	push   0xc0024354
c000012c:	68 ac 41 02 c0       	push   0xc00241ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 f4 01 00 c0    	mov    DWORD PTR ds:0xc00001f4,esi
c0000169:	89 25 f0 01 00 c0    	mov    DWORD PTR ds:0xc00001f0,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf c7 01 00 c0       	mov    edi,0xc00001c7
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf c7 01 00 c0       	mov    edi,0xc00001c7
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf d7 01 00 c0       	mov    edi,0xc00001d7
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	c6 83 c7 01 00 c0 2e 	mov    BYTE PTR [ebx-0x3ffffe39],0x2e
c000019c:	80 ab c8 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe38],0x3a
c00001a3:	c6 83 d7 01 00 c0 2e 	mov    BYTE PTR [ebx-0x3ffffe29],0x2e
c00001aa:	80 ab d8 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe28],0xbe
c00001b1:	89 c4                	mov    esp,eax
c00001b3:	81 c4 10 00 00 00    	add    esp,0x10
c00001b9:	5f                   	pop    edi
c00001ba:	5e                   	pop    esi
c00001bb:	5d                   	pop    ebp
c00001bc:	5b                   	pop    ebx
c00001bd:	5b                   	pop    ebx
c00001be:	5a                   	pop    edx
c00001bf:	59                   	pop    ecx
c00001c0:	58                   	pop    eax
c00001c1:	8b 25 f4 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001f4

c00001c7 <voodooXADD.helper>:
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	8b 25 f0 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001f0
c00001ed:	61                   	popa   
c00001ee:	c9                   	leave  
c00001ef:	c3                   	ret    

c00001f0 <voodooXADD.oldStack>:
c00001f0:	00 00                	add    BYTE PTR [eax],al
	...

c00001f4 <voodooXADD.newStack>:
c00001f4:	00 00                	add    BYTE PTR [eax],al
	...

c00001f8 <doTPAUSE>:
c00001f8:	fb                   	sti    
c00001f9:	31 c0                	xor    eax,eax
c00001fb:	31 d2                	xor    edx,edx
c00001fd:	66 0f ae f0          	tpause eax
c0000201:	c3                   	ret    

c0000202 <hasLegacyFPU>:
c0000202:	0f 20 c2             	mov    edx,cr0
c0000205:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c000020b:	0f 22 c2             	mov    cr0,edx
c000020e:	db e3                	fninit 
c0000210:	dd 3d 25 02 00 c0    	fnstsw WORD PTR ds:0xc0000225
c0000216:	31 c0                	xor    eax,eax
c0000218:	66 81 3d 25 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000225,0x0
c0000221:	75 01                	jne    c0000224 <hasLegacyFPU.nofpu>

c0000223 <hasLegacyFPU.hasfpu>:
c0000223:	40                   	inc    eax

c0000224 <hasLegacyFPU.nofpu>:
c0000224:	c3                   	ret    

c0000225 <testword>:
c0000225:	aa                   	stos   BYTE PTR es:[edi],al
c0000226:	55                   	push   ebp

c0000227 <is486>:
c0000227:	0f 09                	wbinvd 
c0000229:	31 c0                	xor    eax,eax
c000022b:	40                   	inc    eax
c000022c:	c3                   	ret    
c000022d:	90                   	nop
c000022e:	90                   	nop
c000022f:	90                   	nop
c0000230:	90                   	nop
c0000231:	90                   	nop
c0000232:	90                   	nop
c0000233:	90                   	nop
c0000234:	90                   	nop
c0000235:	90                   	nop
c0000236:	90                   	nop
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	31 c0                	xor    eax,eax
c000025c:	c3                   	ret    

c000025d <goToVM86>:
c000025d:	fa                   	cli    
c000025e:	55                   	push   ebp
c000025f:	89 e5                	mov    ebp,esp
c0000261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000264:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000267:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000026a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000026d:	25 ff ff 00 00       	and    eax,0xffff
c0000272:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000278:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000027e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000284:	52                   	push   edx
c0000285:	51                   	push   ecx
c0000286:	68 02 02 02 00       	push   0x20202
c000028b:	53                   	push   ebx
c000028c:	50                   	push   eax
c000028d:	cf                   	iret   

c000028e <goToUsermode>:
c000028e:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c0000293:	fa                   	cli    
c0000294:	55                   	push   ebp
c0000295:	89 e5                	mov    ebp,esp
c0000297:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029a:	66 b8 23 00          	mov    ax,0x23
c000029e:	66 8e d8             	mov    ds,ax
c00002a1:	66 8e c0             	mov    es,ax
c00002a4:	66 8e e0             	mov    fs,ax
c00002a7:	66 8e e8             	mov    gs,ax
c00002aa:	89 e0                	mov    eax,esp
c00002ac:	68 23 00 00 00       	push   0x23
c00002b1:	50                   	push   eax
c00002b2:	68 02 02 00 00       	push   0x202
c00002b7:	68 1b 00 00 00       	push   0x1b
c00002bc:	53                   	push   ebx
c00002bd:	cf                   	iret   

c00002be <switchToThreadASMFirstTime>:
c00002be:	9c                   	pushf  
c00002bf:	fa                   	cli    
c00002c0:	50                   	push   eax
c00002c1:	53                   	push   ebx
c00002c2:	51                   	push   ecx
c00002c3:	52                   	push   edx
c00002c4:	56                   	push   esi
c00002c5:	57                   	push   edi
c00002c6:	55                   	push   ebp
c00002c7:	e9 11 00 00 00       	jmp    c00002dd <commonThreadSwitch>

c00002cc <switchToThreadASM>:
c00002cc:	9c                   	pushf  
c00002cd:	50                   	push   eax
c00002ce:	53                   	push   ebx
c00002cf:	51                   	push   ecx
c00002d0:	52                   	push   edx
c00002d1:	56                   	push   esi
c00002d2:	57                   	push   edi
c00002d3:	55                   	push   ebp
c00002d4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002da:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002dd <commonThreadSwitch>:
c00002dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00002e9:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002ec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ef:	0f 20 d9             	mov    ecx,cr3
c00002f2:	39 c8                	cmp    eax,ecx
c00002f4:	74 03                	je     c00002f9 <commonThreadSwitch.doneVAS>
c00002f6:	0f 22 d8             	mov    cr3,eax

c00002f9 <commonThreadSwitch.doneVAS>:
c00002f9:	85 d2                	test   edx,edx
c00002fb:	74 4e                	je     c000034b <commonThreadSwitch.notFirstTime>
c00002fd:	fa                   	cli    
c00002fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000301:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000306:	60                   	pusha  
c0000307:	e8 88 ec 00 00       	call   c000ef94 <mapVASFirstTime>
c000030c:	61                   	popa   
c000030d:	89 c4                	mov    esp,eax
c000030f:	56                   	push   esi
c0000310:	52                   	push   edx
c0000311:	e8 32 83 01 00       	call   c0018648 <changeTSS>
c0000316:	5a                   	pop    edx
c0000317:	5e                   	pop    esi
c0000318:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000031f:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000325:	74 39                	je     c0000360 <commonThreadSwitch.cameOffAFork>
c0000327:	5d                   	pop    ebp
c0000328:	5f                   	pop    edi
c0000329:	5e                   	pop    esi
c000032a:	59                   	pop    ecx
c000032b:	59                   	pop    ecx
c000032c:	5b                   	pop    ebx
c000032d:	58                   	pop    eax
c000032e:	81 c4 04 00 00 00    	add    esp,0x4
c0000334:	6a 02                	push   0x2
c0000336:	9d                   	popf   
c0000337:	52                   	push   edx
c0000338:	e8 38 87 01 00       	call   c0018a75 <taskStartupFunction>
c000033d:	5a                   	pop    edx
c000033e:	50                   	push   eax
c000033f:	ff d2                	call   edx
c0000341:	e8 ed 8c 01 00       	call   c0019033 <taskReturned>
c0000346:	e9 fb ff ff ff       	jmp    c0000346 <commonThreadSwitch.doneVAS+0x4d>

c000034b <commonThreadSwitch.notFirstTime>:
c000034b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034e:	56                   	push   esi
c000034f:	52                   	push   edx
c0000350:	e8 f3 82 01 00       	call   c0018648 <changeTSS>
c0000355:	5a                   	pop    edx
c0000356:	5e                   	pop    esi
c0000357:	5d                   	pop    ebp
c0000358:	5f                   	pop    edi
c0000359:	5e                   	pop    esi
c000035a:	5a                   	pop    edx
c000035b:	59                   	pop    ecx
c000035c:	5b                   	pop    ebx
c000035d:	58                   	pop    eax
c000035e:	9d                   	popf   
c000035f:	c3                   	ret    

c0000360 <commonThreadSwitch.cameOffAFork>:
c0000360:	31 c0                	xor    eax,eax
c0000362:	31 d2                	xor    edx,edx
c0000364:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000367:	e9 a2 02 00 00       	jmp    c000060e <offAForkJumpThingy>

c000036c <detectCPUID>:
c000036c:	9c                   	pushf  
c000036d:	9c                   	pushf  
c000036e:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000375:	9d                   	popf   
c0000376:	9c                   	pushf  
c0000377:	58                   	pop    eax
c0000378:	33 04 24             	xor    eax,DWORD PTR [esp]
c000037b:	9d                   	popf   
c000037c:	25 00 00 20 00       	and    eax,0x200000
c0000381:	c3                   	ret    

c0000382 <asmQuickAcquireLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000388 <asmQuickAcquireLock.retry>:
c0000388:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000038d:	72 02                	jb     c0000391 <asmQuickAcquireLock.spin_with_pause>
c000038f:	fa                   	cli    
c0000390:	c3                   	ret    

c0000391 <asmQuickAcquireLock.spin_with_pause>:
c0000391:	f3 90                	pause  
c0000393:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000399:	75 f6                	jne    c0000391 <asmQuickAcquireLock.spin_with_pause>
c000039b:	e9 e8 ff ff ff       	jmp    c0000388 <asmQuickAcquireLock.retry>

c00003a0 <asmQuickReleaseLock>:
c00003a0:	55                   	push   ebp
c00003a1:	89 e5                	mov    ebp,esp
c00003a3:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003aa:	5d                   	pop    ebp
c00003ab:	c3                   	ret    

c00003ac <asmAcquireLock>:
c00003ac:	55                   	push   ebp
c00003ad:	89 e5                	mov    ebp,esp
c00003af:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b2 <asmAcquireLock.retry>:
c00003b2:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003b7:	72 05                	jb     c00003be <asmAcquireLock.spin_with_pause>
c00003b9:	9c                   	pushf  
c00003ba:	58                   	pop    eax
c00003bb:	fa                   	cli    
c00003bc:	5d                   	pop    ebp
c00003bd:	c3                   	ret    

c00003be <asmAcquireLock.spin_with_pause>:
c00003be:	f3 90                	pause  
c00003c0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003c6:	75 f6                	jne    c00003be <asmAcquireLock.spin_with_pause>
c00003c8:	e9 e5 ff ff ff       	jmp    c00003b2 <asmAcquireLock.retry>

c00003cd <asmReleaseLock>:
c00003cd:	55                   	push   ebp
c00003ce:	89 e5                	mov    ebp,esp
c00003d0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003d6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003dc:	52                   	push   edx
c00003dd:	9d                   	popf   
c00003de:	5d                   	pop    ebp
c00003df:	c3                   	ret    

c00003e0 <loadGDT>:
c00003e0:	0f 01 15 90 47 02 c0 	lgdtd  ds:0xc0024790
c00003e7:	66 b8 10 00          	mov    ax,0x10
c00003eb:	66 8e d8             	mov    ds,ax
c00003ee:	66 8e c0             	mov    es,ax
c00003f1:	66 8e e0             	mov    fs,ax
c00003f4:	66 8e e8             	mov    gs,ax
c00003f7:	66 8e d0             	mov    ss,ax
c00003fa:	e9 00 00 00 00       	jmp    c00003ff <flush2>

c00003ff <flush2>:
c00003ff:	c3                   	ret    

c0000400 <isr0>:
c0000400:	fa                   	cli    
c0000401:	68 00 00 00 00       	push   0x0
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	e9 a2 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000410 <isr1>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 01                	push   0x1
c0000415:	e9 98 01 00 00       	jmp    c00005b2 <int_common_stub>

c000041a <isr2>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 02                	push   0x2
c000041f:	e9 8e 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000424 <isr3>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 03                	push   0x3
c0000429:	e9 84 01 00 00       	jmp    c00005b2 <int_common_stub>

c000042e <isr4>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 04                	push   0x4
c0000433:	e9 7a 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000438 <isr5>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 05                	push   0x5
c000043d:	e9 70 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000442 <isr6>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 06                	push   0x6
c0000447:	e9 66 01 00 00       	jmp    c00005b2 <int_common_stub>

c000044c <isr7>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 07                	push   0x7
c0000451:	e9 5c 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000456 <isr8>:
c0000456:	fa                   	cli    
c0000457:	6a 08                	push   0x8
c0000459:	e9 54 01 00 00       	jmp    c00005b2 <int_common_stub>

c000045e <isr9>:
c000045e:	fa                   	cli    
c000045f:	6a 00                	push   0x0
c0000461:	6a 09                	push   0x9
c0000463:	e9 4a 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000468 <isr10>:
c0000468:	fa                   	cli    
c0000469:	6a 0a                	push   0xa
c000046b:	e9 42 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000470 <isr11>:
c0000470:	fa                   	cli    
c0000471:	6a 0b                	push   0xb
c0000473:	e9 3a 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000478 <isr12>:
c0000478:	fa                   	cli    
c0000479:	6a 0c                	push   0xc
c000047b:	e9 32 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000480 <isr13>:
c0000480:	fa                   	cli    
c0000481:	6a 0d                	push   0xd
c0000483:	e9 2a 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000488 <isr14>:
c0000488:	fa                   	cli    
c0000489:	6a 0e                	push   0xe
c000048b:	e9 22 01 00 00       	jmp    c00005b2 <int_common_stub>

c0000490 <isr15>:
c0000490:	fa                   	cli    
c0000491:	6a 00                	push   0x0
c0000493:	6a 0f                	push   0xf
c0000495:	e9 18 01 00 00       	jmp    c00005b2 <int_common_stub>

c000049a <isr16>:
c000049a:	fa                   	cli    
c000049b:	6a 00                	push   0x0
c000049d:	6a 10                	push   0x10
c000049f:	e9 0e 01 00 00       	jmp    c00005b2 <int_common_stub>

c00004a4 <isr17>:
c00004a4:	fa                   	cli    
c00004a5:	6a 00                	push   0x0
c00004a7:	6a 11                	push   0x11
c00004a9:	e9 04 01 00 00       	jmp    c00005b2 <int_common_stub>

c00004ae <isr18>:
c00004ae:	fa                   	cli    
c00004af:	6a 00                	push   0x0
c00004b1:	6a 12                	push   0x12
c00004b3:	e9 fa 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004b8 <isr96>:
c00004b8:	fa                   	cli    
c00004b9:	6a 00                	push   0x0
c00004bb:	6a 60                	push   0x60
c00004bd:	e9 20 01 00 00       	jmp    c00005e2 <syscall_common_stub>

c00004c2 <irq0>:
c00004c2:	fa                   	cli    
c00004c3:	6a 00                	push   0x0
c00004c5:	6a 20                	push   0x20
c00004c7:	e9 e6 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004cc <irq1>:
c00004cc:	fa                   	cli    
c00004cd:	6a 00                	push   0x0
c00004cf:	6a 21                	push   0x21
c00004d1:	e9 dc 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004d6 <irq2>:
c00004d6:	fa                   	cli    
c00004d7:	6a 00                	push   0x0
c00004d9:	6a 22                	push   0x22
c00004db:	e9 d2 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004e0 <irq3>:
c00004e0:	fa                   	cli    
c00004e1:	6a 00                	push   0x0
c00004e3:	6a 23                	push   0x23
c00004e5:	e9 c8 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004ea <irq4>:
c00004ea:	fa                   	cli    
c00004eb:	6a 00                	push   0x0
c00004ed:	6a 24                	push   0x24
c00004ef:	e9 be 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004f4 <irq5>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 25                	push   0x25
c00004f9:	e9 b4 00 00 00       	jmp    c00005b2 <int_common_stub>

c00004fe <irq6>:
c00004fe:	fa                   	cli    
c00004ff:	6a 00                	push   0x0
c0000501:	6a 26                	push   0x26
c0000503:	e9 aa 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000508 <irq7>:
c0000508:	fa                   	cli    
c0000509:	6a 00                	push   0x0
c000050b:	6a 27                	push   0x27
c000050d:	e9 a0 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000512 <irq8>:
c0000512:	fa                   	cli    
c0000513:	6a 00                	push   0x0
c0000515:	6a 28                	push   0x28
c0000517:	e9 96 00 00 00       	jmp    c00005b2 <int_common_stub>

c000051c <irq9>:
c000051c:	fa                   	cli    
c000051d:	6a 00                	push   0x0
c000051f:	6a 29                	push   0x29
c0000521:	e9 8c 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000526 <irq10>:
c0000526:	fa                   	cli    
c0000527:	6a 00                	push   0x0
c0000529:	6a 2a                	push   0x2a
c000052b:	e9 82 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000530 <irq11>:
c0000530:	fa                   	cli    
c0000531:	6a 00                	push   0x0
c0000533:	6a 2b                	push   0x2b
c0000535:	e9 78 00 00 00       	jmp    c00005b2 <int_common_stub>

c000053a <irq12>:
c000053a:	fa                   	cli    
c000053b:	6a 00                	push   0x0
c000053d:	6a 2c                	push   0x2c
c000053f:	e9 6e 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000544 <irq13>:
c0000544:	fa                   	cli    
c0000545:	6a 00                	push   0x0
c0000547:	6a 2d                	push   0x2d
c0000549:	e9 64 00 00 00       	jmp    c00005b2 <int_common_stub>

c000054e <irq14>:
c000054e:	fa                   	cli    
c000054f:	6a 00                	push   0x0
c0000551:	6a 2e                	push   0x2e
c0000553:	e9 5a 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000558 <irq15>:
c0000558:	fa                   	cli    
c0000559:	6a 00                	push   0x0
c000055b:	6a 2f                	push   0x2f
c000055d:	e9 50 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000562 <irq16>:
c0000562:	fa                   	cli    
c0000563:	6a 00                	push   0x0
c0000565:	6a 30                	push   0x30
c0000567:	e9 46 00 00 00       	jmp    c00005b2 <int_common_stub>

c000056c <irq17>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 31                	push   0x31
c0000571:	e9 3c 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000576 <irq18>:
c0000576:	fa                   	cli    
c0000577:	6a 00                	push   0x0
c0000579:	6a 32                	push   0x32
c000057b:	e9 32 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000580 <irq19>:
c0000580:	fa                   	cli    
c0000581:	6a 00                	push   0x0
c0000583:	6a 33                	push   0x33
c0000585:	e9 28 00 00 00       	jmp    c00005b2 <int_common_stub>

c000058a <irq20>:
c000058a:	fa                   	cli    
c000058b:	6a 00                	push   0x0
c000058d:	6a 34                	push   0x34
c000058f:	e9 1e 00 00 00       	jmp    c00005b2 <int_common_stub>

c0000594 <irq21>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 35                	push   0x35
c0000599:	e9 14 00 00 00       	jmp    c00005b2 <int_common_stub>

c000059e <irq22>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 36                	push   0x36
c00005a3:	e9 0a 00 00 00       	jmp    c00005b2 <int_common_stub>

c00005a8 <irq23>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 37                	push   0x37
c00005ad:	e9 00 00 00 00       	jmp    c00005b2 <int_common_stub>

c00005b2 <int_common_stub>:
c00005b2:	60                   	pusha  
c00005b3:	1e                   	push   ds
c00005b4:	06                   	push   es
c00005b5:	0f a0                	push   fs
c00005b7:	0f a8                	push   gs
c00005b9:	66 b8 10 00          	mov    ax,0x10
c00005bd:	66 8e d8             	mov    ds,ax
c00005c0:	66 8e c0             	mov    es,ax
c00005c3:	66 8e e0             	mov    fs,ax
c00005c6:	66 8e e8             	mov    gs,ax
c00005c9:	89 e1                	mov    ecx,esp
c00005cb:	51                   	push   ecx
c00005cc:	b9 bd 0e 01 c0       	mov    ecx,0xc0010ebd
c00005d1:	ff d1                	call   ecx
c00005d3:	59                   	pop    ecx
c00005d4:	0f a9                	pop    gs
c00005d6:	0f a1                	pop    fs
c00005d8:	07                   	pop    es
c00005d9:	1f                   	pop    ds
c00005da:	61                   	popa   
c00005db:	81 c4 08 00 00 00    	add    esp,0x8
c00005e1:	cf                   	iret   

c00005e2 <syscall_common_stub>:
c00005e2:	60                   	pusha  
c00005e3:	1e                   	push   ds
c00005e4:	06                   	push   es
c00005e5:	0f a0                	push   fs
c00005e7:	0f a8                	push   gs
c00005e9:	66 b8 10 00          	mov    ax,0x10
c00005ed:	66 8e d8             	mov    ds,ax
c00005f0:	66 8e c0             	mov    es,ax
c00005f3:	66 8e e0             	mov    fs,ax
c00005f6:	66 8e e8             	mov    gs,ax
c00005f9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00005ff:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000602:	89 e1                	mov    ecx,esp
c0000604:	51                   	push   ecx
c0000605:	fb                   	sti    
c0000606:	b9 bd 0e 01 c0       	mov    ecx,0xc0010ebd
c000060b:	ff d1                	call   ecx
c000060d:	59                   	pop    ecx

c000060e <offAForkJumpThingy>:
c000060e:	0f a9                	pop    gs
c0000610:	0f a1                	pop    fs
c0000612:	07                   	pop    es
c0000613:	1f                   	pop    ds
c0000614:	61                   	popa   
c0000615:	81 c4 08 00 00 00    	add    esp,0x8
c000061b:	cf                   	iret   

c000061c <memcmp>:
c000061c:	56                   	push   esi
c000061d:	53                   	push   ebx
c000061e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000622:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000626:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062a:	01 d6                	add    esi,edx
c000062c:	39 f2                	cmp    edx,esi
c000062e:	74 0e                	je     c000063e <memcmp+0x22>
c0000630:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000633:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000636:	38 c8                	cmp    al,cl
c0000638:	75 08                	jne    c0000642 <memcmp+0x26>
c000063a:	42                   	inc    edx
c000063b:	43                   	inc    ebx
c000063c:	eb ee                	jmp    c000062c <memcmp+0x10>
c000063e:	31 c0                	xor    eax,eax
c0000640:	eb 02                	jmp    c0000644 <memcmp+0x28>
c0000642:	29 c8                	sub    eax,ecx
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memmove>:
c0000647:	56                   	push   esi
c0000648:	53                   	push   ebx
c0000649:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000651:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000655:	39 c8                	cmp    eax,ecx
c0000657:	73 12                	jae    c000066b <memmove+0x24>
c0000659:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000065c:	89 c3                	mov    ebx,eax
c000065e:	39 f1                	cmp    ecx,esi
c0000660:	74 1a                	je     c000067c <memmove+0x35>
c0000662:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000664:	43                   	inc    ebx
c0000665:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000668:	41                   	inc    ecx
c0000669:	eb f3                	jmp    c000065e <memmove+0x17>
c000066b:	76 0f                	jbe    c000067c <memmove+0x35>
c000066d:	85 d2                	test   edx,edx
c000066f:	74 0b                	je     c000067c <memmove+0x35>
c0000671:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000675:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000679:	4a                   	dec    edx
c000067a:	eb f1                	jmp    c000066d <memmove+0x26>
c000067c:	5b                   	pop    ebx
c000067d:	5e                   	pop    esi
c000067e:	c3                   	ret    

c000067f <memcpy>:
c000067f:	57                   	push   edi
c0000680:	56                   	push   esi
c0000681:	53                   	push   ebx
c0000682:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068a:	89 da                	mov    edx,ebx
c000068c:	89 d9                	mov    ecx,ebx
c000068e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000692:	83 e2 fc             	and    edx,0xfffffffc
c0000695:	c1 e9 02             	shr    ecx,0x2
c0000698:	89 c7                	mov    edi,eax
c000069a:	fc                   	cld    
c000069b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069d:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a0:	01 c2                	add    edx,eax
c00006a2:	01 de                	add    esi,ebx
c00006a4:	39 f1                	cmp    ecx,esi
c00006a6:	74 09                	je     c00006b1 <memcpy+0x32>
c00006a8:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006aa:	42                   	inc    edx
c00006ab:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ae:	41                   	inc    ecx
c00006af:	eb f3                	jmp    c00006a4 <memcpy+0x25>
c00006b1:	5b                   	pop    ebx
c00006b2:	5e                   	pop    esi
c00006b3:	5f                   	pop    edi
c00006b4:	c3                   	ret    

c00006b5 <memset>:
c00006b5:	53                   	push   ebx
c00006b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006be:	01 c1                	add    ecx,eax
c00006c0:	89 c2                	mov    edx,eax
c00006c2:	39 ca                	cmp    edx,ecx
c00006c4:	74 0a                	je     c00006d0 <memset+0x1b>
c00006c6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006ca:	42                   	inc    edx
c00006cb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ce:	eb f2                	jmp    c00006c2 <memset+0xd>
c00006d0:	5b                   	pop    ebx
c00006d1:	c3                   	ret    

c00006d2 <strlen>:
c00006d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006d6:	31 c0                	xor    eax,eax
c00006d8:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006dc:	74 03                	je     c00006e1 <strlen+0xf>
c00006de:	40                   	inc    eax
c00006df:	eb f7                	jmp    c00006d8 <strlen+0x6>
c00006e1:	c3                   	ret    

c00006e2 <strpbrk>:
c00006e2:	53                   	push   ebx
c00006e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006e7:	8a 08                	mov    cl,BYTE PTR [eax]
c00006e9:	84 c9                	test   cl,cl
c00006eb:	74 14                	je     c0000701 <strpbrk+0x1f>
c00006ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f1:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f3:	84 db                	test   bl,bl
c00006f5:	74 07                	je     c00006fe <strpbrk+0x1c>
c00006f7:	38 cb                	cmp    bl,cl
c00006f9:	74 08                	je     c0000703 <strpbrk+0x21>
c00006fb:	42                   	inc    edx
c00006fc:	eb f3                	jmp    c00006f1 <strpbrk+0xf>
c00006fe:	40                   	inc    eax
c00006ff:	eb e6                	jmp    c00006e7 <strpbrk+0x5>
c0000701:	31 c0                	xor    eax,eax
c0000703:	5b                   	pop    ebx
c0000704:	c3                   	ret    

c0000705 <strtok>:
c0000705:	56                   	push   esi
c0000706:	53                   	push   ebx
c0000707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070f:	85 db                	test   ebx,ebx
c0000711:	75 0e                	jne    c0000721 <strtok+0x1c>
c0000713:	8b 1d 6c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002436c
c0000719:	85 db                	test   ebx,ebx
c000071b:	75 04                	jne    c0000721 <strtok+0x1c>
c000071d:	31 db                	xor    ebx,ebx
c000071f:	eb 2e                	jmp    c000074f <strtok+0x4a>
c0000721:	56                   	push   esi
c0000722:	53                   	push   ebx
c0000723:	e8 ba ff ff ff       	call   c00006e2 <strpbrk>
c0000728:	a3 6c 43 02 c0       	mov    ds:0xc002436c,eax
c000072d:	5a                   	pop    edx
c000072e:	a1 6c 43 02 c0       	mov    eax,ds:0xc002436c
c0000733:	59                   	pop    ecx
c0000734:	39 d8                	cmp    eax,ebx
c0000736:	75 07                	jne    c000073f <strtok+0x3a>
c0000738:	43                   	inc    ebx
c0000739:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000073d:	eb e2                	jmp    c0000721 <strtok+0x1c>
c000073f:	85 c0                	test   eax,eax
c0000741:	74 da                	je     c000071d <strtok+0x18>
c0000743:	8d 50 01             	lea    edx,[eax+0x1]
c0000746:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000749:	89 15 6c 43 02 c0    	mov    DWORD PTR ds:0xc002436c,edx
c000074f:	89 d8                	mov    eax,ebx
c0000751:	5b                   	pop    ebx
c0000752:	5e                   	pop    esi
c0000753:	c3                   	ret    

c0000754 <strcpy>:
c0000754:	53                   	push   ebx
c0000755:	31 d2                	xor    edx,edx
c0000757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000075b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000075f:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000762:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000765:	84 c9                	test   cl,cl
c0000767:	74 06                	je     c000076f <strcpy+0x1b>
c0000769:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000076c:	42                   	inc    edx
c000076d:	eb ec                	jmp    c000075b <strcpy+0x7>
c000076f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000772:	5b                   	pop    ebx
c0000773:	c3                   	ret    

c0000774 <strncpy>:
c0000774:	56                   	push   esi
c0000775:	53                   	push   ebx
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000077e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000782:	89 c3                	mov    ebx,eax
c0000784:	85 c9                	test   ecx,ecx
c0000786:	74 1a                	je     c00007a2 <strncpy+0x2e>
c0000788:	46                   	inc    esi
c0000789:	43                   	inc    ebx
c000078a:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000078d:	49                   	dec    ecx
c000078e:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000791:	84 d2                	test   dl,dl
c0000793:	75 ef                	jne    c0000784 <strncpy+0x10>
c0000795:	31 d2                	xor    edx,edx
c0000797:	39 d1                	cmp    ecx,edx
c0000799:	74 07                	je     c00007a2 <strncpy+0x2e>
c000079b:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c000079f:	42                   	inc    edx
c00007a0:	eb f5                	jmp    c0000797 <strncpy+0x23>
c00007a2:	5b                   	pop    ebx
c00007a3:	5e                   	pop    esi
c00007a4:	c3                   	ret    

c00007a5 <strcmp>:
c00007a5:	31 c9                	xor    ecx,ecx
c00007a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007af:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b3:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007b7:	38 d0                	cmp    al,dl
c00007b9:	75 08                	jne    c00007c3 <strcmp+0x1e>
c00007bb:	41                   	inc    ecx
c00007bc:	84 c0                	test   al,al
c00007be:	75 e7                	jne    c00007a7 <strcmp+0x2>
c00007c0:	31 c0                	xor    eax,eax
c00007c2:	c3                   	ret    
c00007c3:	29 d0                	sub    eax,edx
c00007c5:	c3                   	ret    

c00007c6 <strchr>:
c00007c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ca:	8a 10                	mov    dl,BYTE PTR [eax]
c00007cc:	84 d2                	test   dl,dl
c00007ce:	74 09                	je     c00007d9 <strchr+0x13>
c00007d0:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d4:	74 05                	je     c00007db <strchr+0x15>
c00007d6:	40                   	inc    eax
c00007d7:	eb f1                	jmp    c00007ca <strchr+0x4>
c00007d9:	31 c0                	xor    eax,eax
c00007db:	c3                   	ret    

c00007dc <strncmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ea:	01 d6                	add    esi,edx
c00007ec:	39 f2                	cmp    edx,esi
c00007ee:	74 12                	je     c0000802 <strncmp+0x26>
c00007f0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f3:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007f6:	38 c8                	cmp    al,cl
c00007f8:	75 0c                	jne    c0000806 <strncmp+0x2a>
c00007fa:	42                   	inc    edx
c00007fb:	84 c0                	test   al,al
c00007fd:	74 03                	je     c0000802 <strncmp+0x26>
c00007ff:	43                   	inc    ebx
c0000800:	eb ea                	jmp    c00007ec <strncmp+0x10>
c0000802:	31 c0                	xor    eax,eax
c0000804:	eb 02                	jmp    c0000808 <strncmp+0x2c>
c0000806:	29 c8                	sub    eax,ecx
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    

c000080b <strcat>:
c000080b:	53                   	push   ebx
c000080c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000810:	89 c1                	mov    ecx,eax
c0000812:	8d 51 01             	lea    edx,[ecx+0x1]
c0000815:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000819:	74 04                	je     c000081f <strcat+0x14>
c000081b:	89 d1                	mov    ecx,edx
c000081d:	eb f3                	jmp    c0000812 <strcat+0x7>
c000081f:	31 d2                	xor    edx,edx
c0000821:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000825:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000828:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000082b:	42                   	inc    edx
c000082c:	84 db                	test   bl,bl
c000082e:	75 f1                	jne    c0000821 <strcat+0x16>
c0000830:	5b                   	pop    ebx
c0000831:	c3                   	ret    

c0000832 <strncat>:
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000838:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000840:	89 c2                	mov    edx,eax
c0000842:	85 db                	test   ebx,ebx
c0000844:	74 23                	je     c0000869 <strncat+0x37>
c0000846:	8d 72 01             	lea    esi,[edx+0x1]
c0000849:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000084d:	74 04                	je     c0000853 <strncat+0x21>
c000084f:	89 f2                	mov    edx,esi
c0000851:	eb f3                	jmp    c0000846 <strncat+0x14>
c0000853:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000856:	41                   	inc    ecx
c0000857:	42                   	inc    edx
c0000858:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000085b:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000085e:	84 db                	test   bl,bl
c0000860:	74 07                	je     c0000869 <strncat+0x37>
c0000862:	39 f1                	cmp    ecx,esi
c0000864:	75 f0                	jne    c0000856 <strncat+0x24>
c0000866:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000869:	5b                   	pop    ebx
c000086a:	5e                   	pop    esi
c000086b:	c3                   	ret    

c000086c <strstr>:
c000086c:	57                   	push   edi
c000086d:	56                   	push   esi
c000086e:	53                   	push   ebx
c000086f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	57                   	push   edi
c0000878:	e8 55 fe ff ff       	call   c00006d2 <strlen>
c000087d:	59                   	pop    ecx
c000087e:	89 c6                	mov    esi,eax
c0000880:	85 c0                	test   eax,eax
c0000882:	74 1f                	je     c00008a3 <strstr+0x37>
c0000884:	53                   	push   ebx
c0000885:	e8 48 fe ff ff       	call   c00006d2 <strlen>
c000088a:	5a                   	pop    edx
c000088b:	39 f0                	cmp    eax,esi
c000088d:	72 12                	jb     c00008a1 <strstr+0x35>
c000088f:	56                   	push   esi
c0000890:	57                   	push   edi
c0000891:	53                   	push   ebx
c0000892:	e8 85 fd ff ff       	call   c000061c <memcmp>
c0000897:	83 c4 0c             	add    esp,0xc
c000089a:	85 c0                	test   eax,eax
c000089c:	74 05                	je     c00008a3 <strstr+0x37>
c000089e:	43                   	inc    ebx
c000089f:	eb e3                	jmp    c0000884 <strstr+0x18>
c00008a1:	31 db                	xor    ebx,ebx
c00008a3:	89 d8                	mov    eax,ebx
c00008a5:	5b                   	pop    ebx
c00008a6:	5e                   	pop    esi
c00008a7:	5f                   	pop    edi
c00008a8:	c3                   	ret    

c00008a9 <toupper>:
c00008a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008ad:	0f b6 d0             	movzx  edx,al
c00008b0:	f6 82 00 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfd00],0x2
c00008b7:	74 03                	je     c00008bc <toupper+0x13>
c00008b9:	83 e8 20             	sub    eax,0x20
c00008bc:	c3                   	ret    

c00008bd <tolower>:
c00008bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c1:	0f b6 d0             	movzx  edx,al
c00008c4:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00008cb:	74 03                	je     c00008d0 <tolower+0x13>
c00008cd:	83 c0 20             	add    eax,0x20
c00008d0:	c3                   	ret    

c00008d1 <simple_strtoul>:
c00008d1:	55                   	push   ebp
c00008d2:	57                   	push   edi
c00008d3:	56                   	push   esi
c00008d4:	53                   	push   ebx
c00008d5:	83 ec 08             	sub    esp,0x8
c00008d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e0:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e3:	f6 82 00 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfd00],0x8
c00008ea:	74 03                	je     c00008ef <simple_strtoul+0x1e>
c00008ec:	41                   	inc    ecx
c00008ed:	eb f1                	jmp    c00008e0 <simple_strtoul+0xf>
c00008ef:	80 fa 09             	cmp    dl,0x9
c00008f2:	74 f8                	je     c00008ec <simple_strtoul+0x1b>
c00008f4:	80 fa 2d             	cmp    dl,0x2d
c00008f7:	75 0b                	jne    c0000904 <simple_strtoul+0x33>
c00008f9:	41                   	inc    ecx
c00008fa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000902:	eb 0e                	jmp    c0000912 <simple_strtoul+0x41>
c0000904:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000090c:	80 fa 2b             	cmp    dl,0x2b
c000090f:	75 01                	jne    c0000912 <simple_strtoul+0x41>
c0000911:	41                   	inc    ecx
c0000912:	85 f6                	test   esi,esi
c0000914:	75 22                	jne    c0000938 <simple_strtoul+0x67>
c0000916:	be 0a 00 00 00       	mov    esi,0xa
c000091b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000091e:	75 5a                	jne    c000097a <simple_strtoul+0xa9>
c0000920:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000924:	50                   	push   eax
c0000925:	e8 93 ff ff ff       	call   c00008bd <tolower>
c000092a:	5a                   	pop    edx
c000092b:	83 f8 78             	cmp    eax,0x78
c000092e:	74 03                	je     c0000933 <simple_strtoul+0x62>
c0000930:	41                   	inc    ecx
c0000931:	eb 16                	jmp    c0000949 <simple_strtoul+0x78>
c0000933:	83 c1 02             	add    ecx,0x2
c0000936:	eb 22                	jmp    c000095a <simple_strtoul+0x89>
c0000938:	8d 46 fe             	lea    eax,[esi-0x2]
c000093b:	83 f8 22             	cmp    eax,0x22
c000093e:	0f 87 ab 00 00 00    	ja     c00009ef <simple_strtoul+0x11e>
c0000944:	83 fe 08             	cmp    esi,0x8
c0000947:	75 0c                	jne    c0000955 <simple_strtoul+0x84>
c0000949:	be 08 00 00 00       	mov    esi,0x8
c000094e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000951:	75 27                	jne    c000097a <simple_strtoul+0xa9>
c0000953:	eb 1f                	jmp    c0000974 <simple_strtoul+0xa3>
c0000955:	83 fe 10             	cmp    esi,0x10
c0000958:	75 20                	jne    c000097a <simple_strtoul+0xa9>
c000095a:	be 10 00 00 00       	mov    esi,0x10
c000095f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000962:	75 16                	jne    c000097a <simple_strtoul+0xa9>
c0000964:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000968:	50                   	push   eax
c0000969:	e8 4f ff ff ff       	call   c00008bd <tolower>
c000096e:	5d                   	pop    ebp
c000096f:	83 f8 78             	cmp    eax,0x78
c0000972:	74 03                	je     c0000977 <simple_strtoul+0xa6>
c0000974:	41                   	inc    ecx
c0000975:	eb 03                	jmp    c000097a <simple_strtoul+0xa9>
c0000977:	83 c1 02             	add    ecx,0x2
c000097a:	31 ed                	xor    ebp,ebp
c000097c:	31 db                	xor    ebx,ebx
c000097e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000985:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 27                	je     c00009b2 <simple_strtoul+0xe1>
c000098b:	0f b6 fa             	movzx  edi,dl
c000098e:	f6 87 00 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfd00],0x4
c0000995:	74 05                	je     c000099c <simple_strtoul+0xcb>
c0000997:	83 ef 30             	sub    edi,0x30
c000099a:	eb 22                	jmp    c00009be <simple_strtoul+0xed>
c000099c:	0f be d2             	movsx  edx,dl
c000099f:	52                   	push   edx
c00009a0:	e8 04 ff ff ff       	call   c00008a9 <toupper>
c00009a5:	0f b6 d0             	movzx  edx,al
c00009a8:	5f                   	pop    edi
c00009a9:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00009b0:	75 09                	jne    c00009bb <simple_strtoul+0xea>
c00009b2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009b7:	75 2d                	jne    c00009e6 <simple_strtoul+0x115>
c00009b9:	eb 59                	jmp    c0000a14 <simple_strtoul+0x143>
c00009bb:	8d 78 c9             	lea    edi,[eax-0x37]
c00009be:	39 f7                	cmp    edi,esi
c00009c0:	73 f0                	jae    c00009b2 <simple_strtoul+0xe1>
c00009c2:	89 f8                	mov    eax,edi
c00009c4:	31 d2                	xor    edx,edx
c00009c6:	f7 d0                	not    eax
c00009c8:	f7 f6                	div    esi
c00009ca:	39 d8                	cmp    eax,ebx
c00009cc:	72 0e                	jb     c00009dc <simple_strtoul+0x10b>
c00009ce:	0f af de             	imul   ebx,esi
c00009d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009d8:	01 fb                	add    ebx,edi
c00009da:	eb 07                	jmp    c00009e3 <simple_strtoul+0x112>
c00009dc:	bd 01 00 00 00       	mov    ebp,0x1
c00009e1:	31 db                	xor    ebx,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	eb 9f                	jmp    c0000985 <simple_strtoul+0xb4>
c00009e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009e9:	09 d8                	or     eax,ebx
c00009eb:	75 21                	jne    c0000a0e <simple_strtoul+0x13d>
c00009ed:	eb 11                	jmp    c0000a00 <simple_strtoul+0x12f>
c00009ef:	31 db                	xor    ebx,ebx
c00009f1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009f6:	74 22                	je     c0000a1a <simple_strtoul+0x149>
c00009f8:	31 ed                	xor    ebp,ebp
c00009fa:	31 db                	xor    ebx,ebx
c00009fc:	85 c9                	test   ecx,ecx
c00009fe:	74 0e                	je     c0000a0e <simple_strtoul+0x13d>
c0000a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a04:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a08:	31 db                	xor    ebx,ebx
c0000a0a:	89 38                	mov    DWORD PTR [eax],edi
c0000a0c:	eb 06                	jmp    c0000a14 <simple_strtoul+0x143>
c0000a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a12:	89 08                	mov    DWORD PTR [eax],ecx
c0000a14:	4d                   	dec    ebp
c0000a15:	75 03                	jne    c0000a1a <simple_strtoul+0x149>
c0000a17:	83 cb ff             	or     ebx,0xffffffff
c0000a1a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1f:	75 02                	jne    c0000a23 <simple_strtoul+0x152>
c0000a21:	f7 db                	neg    ebx
c0000a23:	83 c4 08             	add    esp,0x8
c0000a26:	89 d8                	mov    eax,ebx
c0000a28:	5b                   	pop    ebx
c0000a29:	5e                   	pop    esi
c0000a2a:	5f                   	pop    edi
c0000a2b:	5d                   	pop    ebp
c0000a2c:	c3                   	ret    

c0000a2d <largebin_index>:
c0000a2d:	89 c2                	mov    edx,eax
c0000a2f:	c1 ea 08             	shr    edx,0x8
c0000a32:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a38:	77 10                	ja     c0000a4a <largebin_index+0x1d>
c0000a3a:	0f bd d2             	bsr    edx,edx
c0000a3d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a40:	d3 e8                	shr    eax,cl
c0000a42:	83 e0 03             	and    eax,0x3
c0000a45:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a49:	c3                   	ret    
c0000a4a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a4f:	c3                   	ret    

c0000a50 <malloc_init_state>:
c0000a50:	8d 50 34             	lea    edx,[eax+0x34]
c0000a53:	53                   	push   ebx
c0000a54:	89 d1                	mov    ecx,edx
c0000a56:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a5c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a5f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a62:	83 c2 08             	add    edx,0x8
c0000a65:	39 da                	cmp    edx,ebx
c0000a67:	75 f3                	jne    c0000a5c <malloc_init_state+0xc>
c0000a69:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a6b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a75:	83 e2 03             	and    edx,0x3
c0000a78:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a82:	83 ca 48             	or     edx,0x48
c0000a85:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a8f:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a99:	89 10                	mov    DWORD PTR [eax],edx
c0000a9b:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aa5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000aaf:	5b                   	pop    ebx
c0000ab0:	c3                   	ret    

c0000ab1 <malloc_consolidate>:
c0000ab1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab3:	85 d2                	test   edx,edx
c0000ab5:	0f 84 d8 00 00 00    	je     c0000b93 <malloc_consolidate+0xe2>
c0000abb:	55                   	push   ebp
c0000abc:	83 e2 fd             	and    edx,0xfffffffd
c0000abf:	57                   	push   edi
c0000ac0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac3:	56                   	push   esi
c0000ac4:	89 c5                	mov    ebp,eax
c0000ac6:	53                   	push   ebx
c0000ac7:	83 ec 10             	sub    esp,0x10
c0000aca:	89 10                	mov    DWORD PTR [eax],edx
c0000acc:	c1 ea 03             	shr    edx,0x3
c0000acf:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad3:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ad7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000adb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ade:	85 d2                	test   edx,edx
c0000ae0:	0f 84 98 00 00 00    	je     c0000b7e <malloc_consolidate+0xcd>
c0000ae6:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000aed:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af0:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000af7:	89 f9                	mov    ecx,edi
c0000af9:	83 e1 fe             	and    ecx,0xfffffffe
c0000afc:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000aff:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b02:	83 e3 fc             	and    ebx,0xfffffffc
c0000b05:	83 e7 01             	and    edi,0x1
c0000b08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b0b:	75 14                	jne    c0000b21 <malloc_consolidate+0x70>
c0000b0d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b0f:	29 fa                	sub    edx,edi
c0000b11:	01 f9                	add    ecx,edi
c0000b13:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b16:	89 fb                	mov    ebx,edi
c0000b18:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b1b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b1e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b21:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b24:	74 40                	je     c0000b66 <malloc_consolidate+0xb5>
c0000b26:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b29:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b2c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b30:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b33:	83 e7 01             	and    edi,0x1
c0000b36:	75 0e                	jne    c0000b46 <malloc_consolidate+0x95>
c0000b38:	01 d9                	add    ecx,ebx
c0000b3a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b40:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b43:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b46:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b49:	89 ce                	mov    esi,ecx
c0000b4b:	83 ce 01             	or     esi,0x1
c0000b4e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b51:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b54:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b57:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b5b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b5e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b61:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b64:	eb 0c                	jmp    c0000b72 <malloc_consolidate+0xc1>
c0000b66:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b69:	83 c9 01             	or     ecx,0x1
c0000b6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b6f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b76:	85 d2                	test   edx,edx
c0000b78:	0f 85 6f ff ff ff    	jne    c0000aed <malloc_consolidate+0x3c>
c0000b7e:	83 c5 04             	add    ebp,0x4
c0000b81:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b85:	0f 85 50 ff ff ff    	jne    c0000adb <malloc_consolidate+0x2a>
c0000b8b:	83 c4 10             	add    esp,0x10
c0000b8e:	5b                   	pop    ebx
c0000b8f:	5e                   	pop    esi
c0000b90:	5f                   	pop    edi
c0000b91:	5d                   	pop    ebp
c0000b92:	c3                   	ret    
c0000b93:	e9 b8 fe ff ff       	jmp    c0000a50 <malloc_init_state>

c0000b98 <dlfree>:
c0000b98:	57                   	push   edi
c0000b99:	56                   	push   esi
c0000b9a:	53                   	push   ebx
c0000b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b9f:	85 db                	test   ebx,ebx
c0000ba1:	0f 84 e2 00 00 00    	je     c0000c89 <dlfree+0xf1>
c0000ba7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baa:	8b 0d 80 43 02 c0    	mov    ecx,DWORD PTR ds:0xc0024380
c0000bb0:	89 f0                	mov    eax,esi
c0000bb2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bb5:	83 e0 fc             	and    eax,0xfffffffc
c0000bb8:	39 c1                	cmp    ecx,eax
c0000bba:	72 24                	jb     c0000be0 <dlfree+0x48>
c0000bbc:	c1 e8 03             	shr    eax,0x3
c0000bbf:	83 c9 03             	or     ecx,0x3
c0000bc2:	83 e8 02             	sub    eax,0x2
c0000bc5:	89 0d 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,ecx
c0000bcb:	8b 0c 85 84 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc7c]
c0000bd2:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd4:	89 14 85 84 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc7c],edx
c0000bdb:	e9 a9 00 00 00       	jmp    c0000c89 <dlfree+0xf1>
c0000be0:	83 e6 02             	and    esi,0x2
c0000be3:	0f 85 a0 00 00 00    	jne    c0000c89 <dlfree+0xf1>
c0000be9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bec:	83 c9 01             	or     ecx,0x1
c0000bef:	89 0d 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,ecx
c0000bf5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bf8:	83 e1 fc             	and    ecx,0xfffffffc
c0000bfb:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bff:	75 13                	jne    c0000c14 <dlfree+0x7c>
c0000c01:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c04:	29 da                	sub    edx,ebx
c0000c06:	01 d8                	add    eax,ebx
c0000c08:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c0b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c0e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c11:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c14:	39 35 ac 43 02 c0    	cmp    DWORD PTR ds:0xc00243ac,esi
c0000c1a:	74 40                	je     c0000c5c <dlfree+0xc4>
c0000c1c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c20:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c23:	80 e3 01             	and    bl,0x1
c0000c26:	75 0e                	jne    c0000c36 <dlfree+0x9e>
c0000c28:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c2b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c2e:	01 c8                	add    eax,ecx
c0000c30:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c33:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c36:	8b 0d bc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243bc
c0000c3c:	c7 42 0c b4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243b4
c0000c43:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c46:	89 15 bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,edx
c0000c4c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c4f:	89 c1                	mov    ecx,eax
c0000c51:	83 c9 01             	or     ecx,0x1
c0000c54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c57:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5a:	eb 10                	jmp    c0000c6c <dlfree+0xd4>
c0000c5c:	01 c8                	add    eax,ecx
c0000c5e:	89 c1                	mov    ecx,eax
c0000c60:	83 c9 01             	or     ecx,0x1
c0000c63:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c66:	89 15 ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,edx
c0000c6c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c71:	76 16                	jbe    c0000c89 <dlfree+0xf1>
c0000c73:	f6 05 80 43 02 c0 02 	test   BYTE PTR ds:0xc0024380,0x2
c0000c7a:	74 0d                	je     c0000c89 <dlfree+0xf1>
c0000c7c:	5b                   	pop    ebx
c0000c7d:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000c82:	5e                   	pop    esi
c0000c83:	5f                   	pop    edi
c0000c84:	e9 28 fe ff ff       	jmp    c0000ab1 <malloc_consolidate>
c0000c89:	5b                   	pop    ebx
c0000c8a:	5e                   	pop    esi
c0000c8b:	5f                   	pop    edi
c0000c8c:	c3                   	ret    

c0000c8d <sYSMALLOc>:
c0000c8d:	55                   	push   ebp
c0000c8e:	57                   	push   edi
c0000c8f:	56                   	push   esi
c0000c90:	53                   	push   ebx
c0000c91:	89 d3                	mov    ebx,edx
c0000c93:	83 ec 2c             	sub    esp,0x2c
c0000c96:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000c9c:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000c9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca3:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000ca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caa:	74 1f                	je     c0000ccb <sYSMALLOc+0x3e>
c0000cac:	89 d0                	mov    eax,edx
c0000cae:	e8 fe fd ff ff       	call   c0000ab1 <malloc_consolidate>
c0000cb3:	83 ec 0c             	sub    esp,0xc
c0000cb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cba:	83 e8 07             	sub    eax,0x7
c0000cbd:	50                   	push   eax
c0000cbe:	e8 33 02 00 00       	call   c0000ef6 <dlmalloc>
c0000cc3:	83 c4 10             	add    esp,0x10
c0000cc6:	e9 23 02 00 00       	jmp    c0000eee <sYSMALLOc+0x261>
c0000ccb:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd2:	83 c0 10             	add    eax,0x10
c0000cd5:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000cdb:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000cde:	01 c2                	add    edx,eax
c0000ce0:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ce7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cee:	74 02                	je     c0000cf2 <sYSMALLOc+0x65>
c0000cf0:	29 ea                	sub    edx,ebp
c0000cf2:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cf6:	f7 d9                	neg    ecx
c0000cf8:	21 ca                	and    edx,ecx
c0000cfa:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000cfe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d02:	7f 07                	jg     c0000d0b <sYSMALLOc+0x7e>
c0000d04:	31 c0                	xor    eax,eax
c0000d06:	e9 e3 01 00 00       	jmp    c0000eee <sYSMALLOc+0x261>
c0000d0b:	83 ec 0c             	sub    esp,0xc
c0000d0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d12:	e8 0a b1 00 00       	call   c000be21 <sbrk>
c0000d17:	83 c4 10             	add    esp,0x10
c0000d1a:	89 c6                	mov    esi,eax
c0000d1c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d1f:	74 e3                	je     c0000d04 <sYSMALLOc+0x77>
c0000d21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d25:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d28:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d2e:	39 c2                	cmp    edx,eax
c0000d30:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d36:	75 11                	jne    c0000d49 <sYSMALLOc+0xbc>
c0000d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d3c:	01 e8                	add    eax,ebp
c0000d3e:	83 c8 01             	or     eax,0x1
c0000d41:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d44:	e9 93 00 00 00       	jmp    c0000ddc <sYSMALLOc+0x14f>
c0000d49:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d4f:	a8 01                	test   al,0x1
c0000d51:	0f 84 73 01 00 00    	je     c0000eca <sYSMALLOc+0x23d>
c0000d57:	85 ed                	test   ebp,ebp
c0000d59:	74 12                	je     c0000d6d <sYSMALLOc+0xe0>
c0000d5b:	39 f2                	cmp    edx,esi
c0000d5d:	76 0e                	jbe    c0000d6d <sYSMALLOc+0xe0>
c0000d5f:	83 e0 fe             	and    eax,0xfffffffe
c0000d62:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d68:	e9 5d 01 00 00       	jmp    c0000eca <sYSMALLOc+0x23d>
c0000d6d:	85 ed                	test   ebp,ebp
c0000d6f:	74 0c                	je     c0000d7d <sYSMALLOc+0xf0>
c0000d71:	89 f0                	mov    eax,esi
c0000d73:	29 d0                	sub    eax,edx
c0000d75:	01 c1                	add    ecx,eax
c0000d77:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d7d:	89 f2                	mov    edx,esi
c0000d7f:	83 e2 07             	and    edx,0x7
c0000d82:	0f 84 b1 00 00 00    	je     c0000e39 <sYSMALLOc+0x1ac>
c0000d88:	b8 08 00 00 00       	mov    eax,0x8
c0000d8d:	29 d0                	sub    eax,edx
c0000d8f:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9a:	01 e8                	add    eax,ebp
c0000d9c:	83 ec 0c             	sub    esp,0xc
c0000d9f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000da6:	01 f2                	add    edx,esi
c0000da8:	01 d1                	add    ecx,edx
c0000daa:	29 d0                	sub    eax,edx
c0000dac:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db0:	01 c1                	add    ecx,eax
c0000db2:	51                   	push   ecx
c0000db3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000db7:	e8 65 b0 00 00       	call   c000be21 <sbrk>
c0000dbc:	83 c4 10             	add    esp,0x10
c0000dbf:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dc6:	75 7c                	jne    c0000e44 <sYSMALLOc+0x1b7>
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	6a 00                	push   0x0
c0000dcd:	e8 4f b0 00 00       	call   c000be21 <sbrk>
c0000dd2:	83 c4 10             	add    esp,0x10
c0000dd5:	31 c9                	xor    ecx,ecx
c0000dd7:	83 f8 ff             	cmp    eax,0xffffffff
c0000dda:	75 7e                	jne    c0000e5a <sYSMALLOc+0x1cd>
c0000ddc:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de2:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000de8:	73 06                	jae    c0000df0 <sYSMALLOc+0x163>
c0000dea:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df0:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000df6:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000dfc:	73 06                	jae    c0000e04 <sYSMALLOc+0x177>
c0000dfe:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0a:	83 e2 fc             	and    edx,0xfffffffc
c0000e0d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e11:	0f 87 ed fe ff ff    	ja     c0000d04 <sYSMALLOc+0x77>
c0000e17:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e1b:	29 fa                	sub    edx,edi
c0000e1d:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e20:	83 ca 01             	or     edx,0x1
c0000e23:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e26:	89 fb                	mov    ebx,edi
c0000e28:	83 cb 01             	or     ebx,0x1
c0000e2b:	83 c0 08             	add    eax,0x8
c0000e2e:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e31:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e34:	e9 b5 00 00 00       	jmp    c0000eee <sYSMALLOc+0x261>
c0000e39:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e3d:	31 c0                	xor    eax,eax
c0000e3f:	e9 52 ff ff ff       	jmp    c0000d96 <sYSMALLOc+0x109>
c0000e44:	39 c6                	cmp    esi,eax
c0000e46:	76 12                	jbe    c0000e5a <sYSMALLOc+0x1cd>
c0000e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e4c:	01 f0                	add    eax,esi
c0000e4e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e55:	e9 7b ff ff ff       	jmp    c0000dd5 <sYSMALLOc+0x148>
c0000e5a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e5e:	29 f0                	sub    eax,esi
c0000e60:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e63:	01 c8                	add    eax,ecx
c0000e65:	83 c8 01             	or     eax,0x1
c0000e68:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e6b:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e71:	85 ed                	test   ebp,ebp
c0000e73:	0f 84 63 ff ff ff    	je     c0000ddc <sYSMALLOc+0x14f>
c0000e79:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e7c:	83 e0 f8             	and    eax,0xfffffff8
c0000e7f:	89 c2                	mov    edx,eax
c0000e81:	83 ca 01             	or     edx,0x1
c0000e84:	83 f8 0f             	cmp    eax,0xf
c0000e87:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e92:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9a:	0f 86 3c ff ff ff    	jbe    c0000ddc <sYSMALLOc+0x14f>
c0000ea0:	83 ec 0c             	sub    esp,0xc
c0000ea3:	83 c7 08             	add    edi,0x8
c0000ea6:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eac:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb6:	57                   	push   edi
c0000eb7:	e8 dc fc ff ff       	call   c0000b98 <dlfree>
c0000ebc:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec2:	83 c4 10             	add    esp,0x10
c0000ec5:	e9 12 ff ff ff       	jmp    c0000ddc <sYSMALLOc+0x14f>
c0000eca:	83 ec 0c             	sub    esp,0xc
c0000ecd:	6a 00                	push   0x0
c0000ecf:	e8 4d af 00 00       	call   c000be21 <sbrk>
c0000ed4:	89 c2                	mov    edx,eax
c0000ed6:	29 f2                	sub    edx,esi
c0000ed8:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ee5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ee9:	e9 e7 fe ff ff       	jmp    c0000dd5 <sYSMALLOc+0x148>
c0000eee:	83 c4 2c             	add    esp,0x2c
c0000ef1:	5b                   	pop    ebx
c0000ef2:	5e                   	pop    esi
c0000ef3:	5f                   	pop    edi
c0000ef4:	5d                   	pop    ebp
c0000ef5:	c3                   	ret    

c0000ef6 <dlmalloc>:
c0000ef6:	55                   	push   ebp
c0000ef7:	57                   	push   edi
c0000ef8:	56                   	push   esi
c0000ef9:	53                   	push   ebx
c0000efa:	83 ec 1c             	sub    esp,0x1c
c0000efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f01:	83 f8 df             	cmp    eax,0xffffffdf
c0000f04:	0f 87 70 03 00 00    	ja     c000127a <dlmalloc+0x384>
c0000f0a:	83 c0 0b             	add    eax,0xb
c0000f0d:	be 10 00 00 00       	mov    esi,0x10
c0000f12:	83 f8 0f             	cmp    eax,0xf
c0000f15:	76 05                	jbe    c0000f1c <dlmalloc+0x26>
c0000f17:	83 e0 f8             	and    eax,0xfffffff8
c0000f1a:	89 c6                	mov    esi,eax
c0000f1c:	8b 3d 80 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024380
c0000f22:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f28:	75 17                	jne    c0000f41 <dlmalloc+0x4b>
c0000f2a:	85 ff                	test   edi,edi
c0000f2c:	0f 85 05 03 00 00    	jne    c0001237 <dlmalloc+0x341>
c0000f32:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000f37:	e8 75 fb ff ff       	call   c0000ab1 <malloc_consolidate>
c0000f3c:	e9 f6 02 00 00       	jmp    c0001237 <dlmalloc+0x341>
c0000f41:	39 f7                	cmp    edi,esi
c0000f43:	72 1f                	jb     c0000f64 <dlmalloc+0x6e>
c0000f45:	89 f2                	mov    edx,esi
c0000f47:	c1 ea 03             	shr    edx,0x3
c0000f4a:	83 ea 02             	sub    edx,0x2
c0000f4d:	8b 04 95 84 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc7c]
c0000f54:	85 c0                	test   eax,eax
c0000f56:	74 0c                	je     c0000f64 <dlmalloc+0x6e>
c0000f58:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f5b:	89 0c 95 84 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc7c],ecx
c0000f62:	eb 30                	jmp    c0000f94 <dlmalloc+0x9e>
c0000f64:	89 f0                	mov    eax,esi
c0000f66:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f6c:	77 2e                	ja     c0000f9c <dlmalloc+0xa6>
c0000f6e:	c1 e8 03             	shr    eax,0x3
c0000f71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f75:	8d 14 c5 b4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc4c]
c0000f7c:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f7f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f82:	39 c3                	cmp    ebx,eax
c0000f84:	74 2e                	je     c0000fb4 <dlmalloc+0xbe>
c0000f86:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f89:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f8e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f91:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f94:	83 c0 08             	add    eax,0x8
c0000f97:	e9 e0 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0000f9c:	e8 8c fa ff ff       	call   c0000a2d <largebin_index>
c0000fa1:	83 e7 02             	and    edi,0x2
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	74 0a                	je     c0000fb4 <dlmalloc+0xbe>
c0000faa:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000faf:	e8 fd fa ff ff       	call   c0000ab1 <malloc_consolidate>
c0000fb4:	8d 46 10             	lea    eax,[esi+0x10]
c0000fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fbb:	8b 1d c0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c0
c0000fc1:	81 fb b4 43 02 c0    	cmp    ebx,0xc00243b4
c0000fc7:	0f 84 13 01 00 00    	je     c00010e0 <dlmalloc+0x1ea>
c0000fcd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd3:	83 e7 fc             	and    edi,0xfffffffc
c0000fd6:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fdc:	77 4c                	ja     c000102a <dlmalloc+0x134>
c0000fde:	3d b4 43 02 c0       	cmp    eax,0xc00243b4
c0000fe3:	75 45                	jne    c000102a <dlmalloc+0x134>
c0000fe5:	39 1d b0 43 02 c0    	cmp    DWORD PTR ds:0xc00243b0,ebx
c0000feb:	75 3d                	jne    c000102a <dlmalloc+0x134>
c0000fed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff1:	73 37                	jae    c000102a <dlmalloc+0x134>
c0000ff3:	89 fa                	mov    edx,edi
c0000ff5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ff8:	29 f2                	sub    edx,esi
c0000ffa:	83 ce 01             	or     esi,0x1
c0000ffd:	89 d1                	mov    ecx,edx
c0000fff:	a3 bc 43 02 c0       	mov    ds:0xc00243bc,eax
c0001004:	83 c9 01             	or     ecx,0x1
c0001007:	a3 c0 43 02 c0       	mov    ds:0xc00243c0,eax
c000100c:	a3 b0 43 02 c0       	mov    ds:0xc00243b0,eax
c0001011:	c7 40 08 b4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243b4
c0001018:	c7 40 0c b4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243b4
c000101f:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001022:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001025:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001028:	eb 15                	jmp    c000103f <dlmalloc+0x149>
c000102a:	a3 c0 43 02 c0       	mov    ds:0xc00243c0,eax
c000102f:	39 fe                	cmp    esi,edi
c0001031:	c7 40 08 b4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243b4
c0001038:	75 0d                	jne    c0001047 <dlmalloc+0x151>
c000103a:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000103f:	8d 43 08             	lea    eax,[ebx+0x8]
c0001042:	e9 35 02 00 00       	jmp    c000127c <dlmalloc+0x386>
c0001047:	89 f8                	mov    eax,edi
c0001049:	81 ff ff 00 00 00    	cmp    edi,0xff
c000104f:	77 19                	ja     c000106a <dlmalloc+0x174>
c0001051:	c1 e8 03             	shr    eax,0x3
c0001054:	8d 14 00             	lea    edx,[eax+eax*1]
c0001057:	83 c2 0d             	add    edx,0xd
c000105a:	8d 2c 95 78 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc88]
c0001061:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c0001068:	eb 46                	jmp    c00010b0 <dlmalloc+0x1ba>
c000106a:	e8 be f9 ff ff       	call   c0000a2d <largebin_index>
c000106f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001072:	83 c2 0d             	add    edx,0xd
c0001075:	8d 0c 95 80 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc80]
c000107c:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c0001083:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001086:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108a:	89 d5                	mov    ebp,edx
c000108c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001090:	74 1e                	je     c00010b0 <dlmalloc+0x1ba>
c0001092:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001095:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001098:	77 12                	ja     c00010ac <dlmalloc+0x1b6>
c000109a:	83 cf 01             	or     edi,0x1
c000109d:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a0:	76 05                	jbe    c00010a7 <dlmalloc+0x1b1>
c00010a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010a5:	eb f6                	jmp    c000109d <dlmalloc+0x1a7>
c00010a7:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010aa:	eb 04                	jmp    c00010b0 <dlmalloc+0x1ba>
c00010ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b0:	89 c7                	mov    edi,eax
c00010b2:	88 c1                	mov    cl,al
c00010b4:	c1 ff 05             	sar    edi,0x5
c00010b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010bb:	bf 01 00 00 00       	mov    edi,0x1
c00010c0:	d3 e7                	shl    edi,cl
c00010c2:	89 f8                	mov    eax,edi
c00010c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010c8:	09 04 bd b4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb94c],eax
c00010cf:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010d5:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010d8:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010db:	e9 db fe ff ff       	jmp    c0000fbb <dlmalloc+0xc5>
c00010e0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e6:	76 78                	jbe    c0001160 <dlmalloc+0x26a>
c00010e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ec:	8d 04 c5 b4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc4c]
c00010f3:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010f9:	39 ca                	cmp    edx,ecx
c00010fb:	74 63                	je     c0001160 <dlmalloc+0x26a>
c00010fd:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001100:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001103:	83 e3 fc             	and    ebx,0xfffffffc
c0001106:	39 de                	cmp    esi,ebx
c0001108:	77 52                	ja     c000115c <dlmalloc+0x266>
c000110a:	89 df                	mov    edi,ebx
c000110c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000110f:	29 f7                	sub    edi,esi
c0001111:	01 d3                	add    ebx,edx
c0001113:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001116:	83 ff 0f             	cmp    edi,0xf
c0001119:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000111c:	8d 42 08             	lea    eax,[edx+0x8]
c000111f:	77 09                	ja     c000112a <dlmalloc+0x234>
c0001121:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001125:	e9 52 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000112a:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000112d:	83 ce 01             	or     esi,0x1
c0001130:	89 0d bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,ecx
c0001136:	89 0d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,ecx
c000113c:	c7 41 08 b4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243b4
c0001143:	c7 41 0c b4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243b4
c000114a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000114d:	89 fa                	mov    edx,edi
c000114f:	83 ca 01             	or     edx,0x1
c0001152:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001155:	89 3b                	mov    DWORD PTR [ebx],edi
c0001157:	e9 20 01 00 00       	jmp    c000127c <dlmalloc+0x386>
c000115c:	89 c2                	mov    edx,eax
c000115e:	eb 99                	jmp    c00010f9 <dlmalloc+0x203>
c0001160:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001164:	b8 01 00 00 00       	mov    eax,0x1
c0001169:	41                   	inc    ecx
c000116a:	89 cb                	mov    ebx,ecx
c000116c:	c1 eb 05             	shr    ebx,0x5
c000116f:	8d 14 cd ac 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc54]
c0001176:	d3 e0                	shl    eax,cl
c0001178:	8b 3c 9d b4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb94c]
c000117f:	39 f8                	cmp    eax,edi
c0001181:	77 04                	ja     c0001187 <dlmalloc+0x291>
c0001183:	85 c0                	test   eax,eax
c0001185:	75 26                	jne    c00011ad <dlmalloc+0x2b7>
c0001187:	43                   	inc    ebx
c0001188:	83 fb 02             	cmp    ebx,0x2
c000118b:	0f 87 a6 00 00 00    	ja     c0001237 <dlmalloc+0x341>
c0001191:	8b 3c 9d b4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb94c]
c0001198:	85 ff                	test   edi,edi
c000119a:	74 eb                	je     c0001187 <dlmalloc+0x291>
c000119c:	89 d8                	mov    eax,ebx
c000119e:	c1 e0 06             	shl    eax,0x6
c00011a1:	8d 14 85 ac 43 02 c0 	lea    edx,[eax*4-0x3ffdbc54]
c00011a8:	b8 01 00 00 00       	mov    eax,0x1
c00011ad:	85 f8                	test   eax,edi
c00011af:	75 07                	jne    c00011b8 <dlmalloc+0x2c2>
c00011b1:	83 c2 08             	add    edx,0x8
c00011b4:	01 c0                	add    eax,eax
c00011b6:	eb f5                	jmp    c00011ad <dlmalloc+0x2b7>
c00011b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011bb:	39 ca                	cmp    edx,ecx
c00011bd:	75 14                	jne    c00011d3 <dlmalloc+0x2dd>
c00011bf:	89 c1                	mov    ecx,eax
c00011c1:	83 c2 08             	add    edx,0x8
c00011c4:	f7 d1                	not    ecx
c00011c6:	21 cf                	and    edi,ecx
c00011c8:	01 c0                	add    eax,eax
c00011ca:	89 3c 9d b4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb94c],edi
c00011d1:	eb ac                	jmp    c000117f <dlmalloc+0x289>
c00011d3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011d6:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011d9:	83 e0 fc             	and    eax,0xfffffffc
c00011dc:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011df:	89 c3                	mov    ebx,eax
c00011e1:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e4:	29 f3                	sub    ebx,esi
c00011e6:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011e9:	83 fb 0f             	cmp    ebx,0xf
c00011ec:	8d 41 08             	lea    eax,[ecx+0x8]
c00011ef:	77 09                	ja     c00011fa <dlmalloc+0x304>
c00011f1:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011f5:	e9 82 00 00 00       	jmp    c000127c <dlmalloc+0x386>
c00011fa:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011fd:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001203:	89 3d bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,edi
c0001209:	89 3d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,edi
c000120f:	c7 47 08 b4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243b4
c0001216:	c7 47 0c b4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243b4
c000121d:	77 06                	ja     c0001225 <dlmalloc+0x32f>
c000121f:	89 3d b0 43 02 c0    	mov    DWORD PTR ds:0xc00243b0,edi
c0001225:	83 ce 01             	or     esi,0x1
c0001228:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000122b:	89 d9                	mov    ecx,ebx
c000122d:	83 c9 01             	or     ecx,0x1
c0001230:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001233:	89 1a                	mov    DWORD PTR [edx],ebx
c0001235:	eb 45                	jmp    c000127c <dlmalloc+0x386>
c0001237:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c000123c:	8d 4e 10             	lea    ecx,[esi+0x10]
c000123f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001242:	83 e2 fc             	and    edx,0xfffffffc
c0001245:	39 d1                	cmp    ecx,edx
c0001247:	77 1e                	ja     c0001267 <dlmalloc+0x371>
c0001249:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000124c:	89 f3                	mov    ebx,esi
c000124e:	29 f2                	sub    edx,esi
c0001250:	83 cb 01             	or     ebx,0x1
c0001253:	83 ca 01             	or     edx,0x1
c0001256:	89 0d ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,ecx
c000125c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000125f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001262:	e9 2d fd ff ff       	jmp    c0000f94 <dlmalloc+0x9e>
c0001267:	83 c4 1c             	add    esp,0x1c
c000126a:	89 f0                	mov    eax,esi
c000126c:	ba 80 43 02 c0       	mov    edx,0xc0024380
c0001271:	5b                   	pop    ebx
c0001272:	5e                   	pop    esi
c0001273:	5f                   	pop    edi
c0001274:	5d                   	pop    ebp
c0001275:	e9 13 fa ff ff       	jmp    c0000c8d <sYSMALLOc>
c000127a:	31 c0                	xor    eax,eax
c000127c:	83 c4 1c             	add    esp,0x1c
c000127f:	5b                   	pop    ebx
c0001280:	5e                   	pop    esi
c0001281:	5f                   	pop    edi
c0001282:	5d                   	pop    ebp
c0001283:	c3                   	ret    

c0001284 <iALLOc>:
c0001284:	55                   	push   ebp
c0001285:	89 c5                	mov    ebp,eax
c0001287:	57                   	push   edi
c0001288:	56                   	push   esi
c0001289:	53                   	push   ebx
c000128a:	83 ec 2c             	sub    esp,0x2c
c000128d:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c0001294:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001298:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a0:	75 12                	jne    c00012b4 <iALLOc+0x30>
c00012a2:	b8 80 43 02 c0       	mov    eax,0xc0024380
c00012a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012ab:	e8 01 f8 ff ff       	call   c0000ab1 <malloc_consolidate>
c00012b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012b9:	74 12                	je     c00012cd <iALLOc+0x49>
c00012bb:	85 ed                	test   ebp,ebp
c00012bd:	0f 84 64 01 00 00    	je     c0001427 <iALLOc+0x1a3>
c00012c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012cb:	eb 33                	jmp    c0001300 <iALLOc+0x7c>
c00012cd:	85 ed                	test   ebp,ebp
c00012cf:	75 14                	jne    c00012e5 <iALLOc+0x61>
c00012d1:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012d9:	83 c4 2c             	add    esp,0x2c
c00012dc:	5b                   	pop    ebx
c00012dd:	5e                   	pop    esi
c00012de:	5f                   	pop    edi
c00012df:	5d                   	pop    ebp
c00012e0:	e9 11 fc ff ff       	jmp    c0000ef6 <dlmalloc>
c00012e5:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ec:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f4:	83 f8 0f             	cmp    eax,0xf
c00012f7:	76 07                	jbe    c0001300 <iALLOc+0x7c>
c00012f9:	83 e0 f8             	and    eax,0xfffffff8
c00012fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001300:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001305:	75 09                	jne    c0001310 <iALLOc+0x8c>
c0001307:	89 d0                	mov    eax,edx
c0001309:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000130c:	31 f6                	xor    esi,esi
c000130e:	eb 3b                	jmp    c000134b <iALLOc+0xc7>
c0001310:	8b 02                	mov    eax,DWORD PTR [edx]
c0001312:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131a:	83 c0 0b             	add    eax,0xb
c000131d:	83 f8 0f             	cmp    eax,0xf
c0001320:	76 07                	jbe    c0001329 <iALLOc+0xa5>
c0001322:	83 e0 f8             	and    eax,0xfffffff8
c0001325:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000132d:	0f af f5             	imul   esi,ebp
c0001330:	eb 25                	jmp    c0001357 <iALLOc+0xd3>
c0001332:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001334:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001337:	bb 10 00 00 00       	mov    ebx,0x10
c000133c:	83 f9 0f             	cmp    ecx,0xf
c000133f:	76 05                	jbe    c0001346 <iALLOc+0xc2>
c0001341:	83 e1 f8             	and    ecx,0xfffffff8
c0001344:	89 cb                	mov    ebx,ecx
c0001346:	01 de                	add    esi,ebx
c0001348:	83 c0 04             	add    eax,0x4
c000134b:	39 c7                	cmp    edi,eax
c000134d:	75 e3                	jne    c0001332 <iALLOc+0xae>
c000134f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000135b:	83 ec 0c             	sub    esp,0xc
c000135e:	8b 1d d4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246d4
c0001364:	c7 05 d4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246d4,0x0
c000136e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001372:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001376:	50                   	push   eax
c0001377:	e8 7a fb ff ff       	call   c0000ef6 <dlmalloc>
c000137c:	83 c4 10             	add    esp,0x10
c000137f:	89 1d d4 46 02 c0    	mov    DWORD PTR ds:0xc00246d4,ebx
c0001385:	85 c0                	test   eax,eax
c0001387:	0f 84 92 00 00 00    	je     c000141f <iALLOc+0x19b>
c000138d:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001390:	8d 78 f8             	lea    edi,[eax-0x8]
c0001393:	83 e3 fc             	and    ebx,0xfffffffc
c0001396:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139a:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000139f:	74 1e                	je     c00013bf <iALLOc+0x13b>
c00013a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013a5:	89 d9                	mov    ecx,ebx
c00013a7:	52                   	push   edx
c00013a8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013ac:	83 e9 04             	sub    ecx,0x4
c00013af:	51                   	push   ecx
c00013b0:	6a 00                	push   0x0
c00013b2:	50                   	push   eax
c00013b3:	e8 fd f2 ff ff       	call   c00006b5 <memset>
c00013b8:	83 c4 10             	add    esp,0x10
c00013bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c4:	75 14                	jne    c00013da <iALLOc+0x156>
c00013c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00013c9:	29 f3                	sub    ebx,esi
c00013cb:	83 cb 01             	or     ebx,0x1
c00013ce:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013d8:	89 f3                	mov    ebx,esi
c00013da:	31 c0                	xor    eax,eax
c00013dc:	4d                   	dec    ebp
c00013dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e1:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e4:	39 c5                	cmp    ebp,eax
c00013e6:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013e9:	74 2c                	je     c0001417 <iALLOc+0x193>
c00013eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013ef:	85 c9                	test   ecx,ecx
c00013f1:	75 15                	jne    c0001408 <iALLOc+0x184>
c00013f3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013f6:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013f9:	b9 10 00 00 00       	mov    ecx,0x10
c00013fe:	83 fe 0f             	cmp    esi,0xf
c0001401:	76 05                	jbe    c0001408 <iALLOc+0x184>
c0001403:	83 e6 f8             	and    esi,0xfffffff8
c0001406:	89 f1                	mov    ecx,esi
c0001408:	89 ce                	mov    esi,ecx
c000140a:	29 cb                	sub    ebx,ecx
c000140c:	83 ce 01             	or     esi,0x1
c000140f:	40                   	inc    eax
c0001410:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001413:	01 cf                	add    edi,ecx
c0001415:	eb c6                	jmp    c00013dd <iALLOc+0x159>
c0001417:	83 cb 01             	or     ebx,0x1
c000141a:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000141d:	eb 08                	jmp    c0001427 <iALLOc+0x1a3>
c000141f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000142b:	83 c4 2c             	add    esp,0x2c
c000142e:	5b                   	pop    ebx
c000142f:	5e                   	pop    esi
c0001430:	5f                   	pop    edi
c0001431:	5d                   	pop    ebp
c0001432:	c3                   	ret    

c0001433 <dlrealloc>:
c0001433:	55                   	push   ebp
c0001434:	57                   	push   edi
c0001435:	56                   	push   esi
c0001436:	53                   	push   ebx
c0001437:	83 ec 1c             	sub    esp,0x1c
c000143a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000143e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001442:	85 db                	test   ebx,ebx
c0001444:	75 10                	jne    c0001456 <dlrealloc+0x23>
c0001446:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144a:	83 c4 1c             	add    esp,0x1c
c000144d:	5b                   	pop    ebx
c000144e:	5e                   	pop    esi
c000144f:	5f                   	pop    edi
c0001450:	5d                   	pop    ebp
c0001451:	e9 a0 fa ff ff       	jmp    c0000ef6 <dlmalloc>
c0001456:	83 f8 df             	cmp    eax,0xffffffdf
c0001459:	76 07                	jbe    c0001462 <dlrealloc+0x2f>
c000145b:	31 db                	xor    ebx,ebx
c000145d:	e9 7c 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c0001462:	83 c0 0b             	add    eax,0xb
c0001465:	bf 10 00 00 00       	mov    edi,0x10
c000146a:	83 f8 0f             	cmp    eax,0xf
c000146d:	76 05                	jbe    c0001474 <dlrealloc+0x41>
c000146f:	83 e0 f8             	and    eax,0xfffffff8
c0001472:	89 c7                	mov    edi,eax
c0001474:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001477:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147a:	89 c6                	mov    esi,eax
c000147c:	83 e6 fc             	and    esi,0xfffffffc
c000147f:	a8 02                	test   al,0x2
c0001481:	75 d8                	jne    c000145b <dlrealloc+0x28>
c0001483:	39 f7                	cmp    edi,esi
c0001485:	0f 86 15 01 00 00    	jbe    c00015a0 <dlrealloc+0x16d>
c000148b:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000148f:	39 15 ac 43 02 c0    	cmp    DWORD PTR ds:0xc00243ac,edx
c0001495:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001498:	75 33                	jne    c00014cd <dlrealloc+0x9a>
c000149a:	83 e1 fc             	and    ecx,0xfffffffc
c000149d:	01 f1                	add    ecx,esi
c000149f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a3:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014a6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014aa:	77 49                	ja     c00014f5 <dlrealloc+0xc2>
c00014ac:	83 e0 01             	and    eax,0x1
c00014af:	01 fd                	add    ebp,edi
c00014b1:	09 f8                	or     eax,edi
c00014b3:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ba:	29 f8                	sub    eax,edi
c00014bc:	89 2d ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,ebp
c00014c2:	83 c8 01             	or     eax,0x1
c00014c5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014c8:	e9 11 01 00 00       	jmp    c00015de <dlrealloc+0x1ab>
c00014cd:	89 c8                	mov    eax,ecx
c00014cf:	83 e0 fe             	and    eax,0xfffffffe
c00014d2:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014d7:	75 1c                	jne    c00014f5 <dlrealloc+0xc2>
c00014d9:	83 e1 fc             	and    ecx,0xfffffffc
c00014dc:	01 f1                	add    ecx,esi
c00014de:	39 cf                	cmp    edi,ecx
c00014e0:	77 13                	ja     c00014f5 <dlrealloc+0xc2>
c00014e2:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014e5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014e8:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014eb:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014ee:	89 ce                	mov    esi,ecx
c00014f0:	e9 ab 00 00 00       	jmp    c00015a0 <dlrealloc+0x16d>
c00014f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014f9:	83 ec 0c             	sub    esp,0xc
c00014fc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014ff:	50                   	push   eax
c0001500:	e8 f1 f9 ff ff       	call   c0000ef6 <dlmalloc>
c0001505:	83 c4 10             	add    esp,0x10
c0001508:	89 c1                	mov    ecx,eax
c000150a:	85 c0                	test   eax,eax
c000150c:	0f 84 49 ff ff ff    	je     c000145b <dlrealloc+0x28>
c0001512:	8d 40 f8             	lea    eax,[eax-0x8]
c0001515:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001519:	39 c2                	cmp    edx,eax
c000151b:	75 0a                	jne    c0001527 <dlrealloc+0xf4>
c000151d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001520:	83 e0 fc             	and    eax,0xfffffffc
c0001523:	01 c6                	add    esi,eax
c0001525:	eb 79                	jmp    c00015a0 <dlrealloc+0x16d>
c0001527:	83 ee 04             	sub    esi,0x4
c000152a:	83 fe 27             	cmp    esi,0x27
c000152d:	76 16                	jbe    c0001545 <dlrealloc+0x112>
c000152f:	50                   	push   eax
c0001530:	56                   	push   esi
c0001531:	53                   	push   ebx
c0001532:	51                   	push   ecx
c0001533:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001537:	e8 43 f1 ff ff       	call   c000067f <memcpy>
c000153c:	83 c4 10             	add    esp,0x10
c000153f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001543:	eb 43                	jmp    c0001588 <dlrealloc+0x155>
c0001545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001547:	83 fe 13             	cmp    esi,0x13
c000154a:	89 01                	mov    DWORD PTR [ecx],eax
c000154c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000154f:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001552:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001555:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001558:	76 2e                	jbe    c0001588 <dlrealloc+0x155>
c000155a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000155d:	83 fe 1b             	cmp    esi,0x1b
c0001560:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001563:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001566:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001569:	76 1d                	jbe    c0001588 <dlrealloc+0x155>
c000156b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000156e:	83 fe 23             	cmp    esi,0x23
c0001571:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001574:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001577:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157a:	76 0c                	jbe    c0001588 <dlrealloc+0x155>
c000157c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000157f:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001582:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001585:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001588:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158c:	83 ec 0c             	sub    esp,0xc
c000158f:	53                   	push   ebx
c0001590:	e8 03 f6 ff ff       	call   c0000b98 <dlfree>
c0001595:	83 c4 10             	add    esp,0x10
c0001598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000159c:	89 cb                	mov    ebx,ecx
c000159e:	eb 3e                	jmp    c00015de <dlrealloc+0x1ab>
c00015a0:	89 f2                	mov    edx,esi
c00015a2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015a5:	29 fa                	sub    edx,edi
c00015a7:	83 e1 01             	and    ecx,0x1
c00015aa:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ae:	83 fa 0f             	cmp    edx,0xf
c00015b1:	77 0b                	ja     c00015be <dlrealloc+0x18b>
c00015b3:	09 ce                	or     esi,ecx
c00015b5:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015bc:	eb 20                	jmp    c00015de <dlrealloc+0x1ab>
c00015be:	01 fd                	add    ebp,edi
c00015c0:	83 ca 01             	or     edx,0x1
c00015c3:	09 cf                	or     edi,ecx
c00015c5:	83 ec 0c             	sub    esp,0xc
c00015c8:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015cb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015ce:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d2:	83 c5 08             	add    ebp,0x8
c00015d5:	55                   	push   ebp
c00015d6:	e8 bd f5 ff ff       	call   c0000b98 <dlfree>
c00015db:	83 c4 10             	add    esp,0x10
c00015de:	83 c4 1c             	add    esp,0x1c
c00015e1:	89 d8                	mov    eax,ebx
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlmemalign>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015f7:	83 fa 08             	cmp    edx,0x8
c00015fa:	77 10                	ja     c000160c <dlmemalign+0x24>
c00015fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001600:	83 c4 0c             	add    esp,0xc
c0001603:	5b                   	pop    ebx
c0001604:	5e                   	pop    esi
c0001605:	5f                   	pop    edi
c0001606:	5d                   	pop    ebp
c0001607:	e9 ea f8 ff ff       	jmp    c0000ef6 <dlmalloc>
c000160c:	bf 10 00 00 00       	mov    edi,0x10
c0001611:	83 fa 0f             	cmp    edx,0xf
c0001614:	76 13                	jbe    c0001629 <dlmemalign+0x41>
c0001616:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001619:	85 d1                	test   ecx,edx
c000161b:	75 04                	jne    c0001621 <dlmemalign+0x39>
c000161d:	89 d7                	mov    edi,edx
c000161f:	eb 08                	jmp    c0001629 <dlmemalign+0x41>
c0001621:	39 d7                	cmp    edi,edx
c0001623:	73 04                	jae    c0001629 <dlmemalign+0x41>
c0001625:	01 ff                	add    edi,edi
c0001627:	eb f8                	jmp    c0001621 <dlmemalign+0x39>
c0001629:	83 f8 df             	cmp    eax,0xffffffdf
c000162c:	76 07                	jbe    c0001635 <dlmemalign+0x4d>
c000162e:	31 c0                	xor    eax,eax
c0001630:	e9 ce 00 00 00       	jmp    c0001703 <dlmemalign+0x11b>
c0001635:	83 c0 0b             	add    eax,0xb
c0001638:	bd 10 00 00 00       	mov    ebp,0x10
c000163d:	83 f8 0f             	cmp    eax,0xf
c0001640:	76 05                	jbe    c0001647 <dlmemalign+0x5f>
c0001642:	83 e0 f8             	and    eax,0xfffffff8
c0001645:	89 c5                	mov    ebp,eax
c0001647:	83 ec 0c             	sub    esp,0xc
c000164a:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000164e:	50                   	push   eax
c000164f:	e8 a2 f8 ff ff       	call   c0000ef6 <dlmalloc>
c0001654:	83 c4 10             	add    esp,0x10
c0001657:	89 c1                	mov    ecx,eax
c0001659:	85 c0                	test   eax,eax
c000165b:	74 d1                	je     c000162e <dlmemalign+0x46>
c000165d:	31 d2                	xor    edx,edx
c000165f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001662:	f7 f7                	div    edi
c0001664:	85 d2                	test   edx,edx
c0001666:	74 62                	je     c00016ca <dlmemalign+0xe2>
c0001668:	89 f8                	mov    eax,edi
c000166a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000166e:	f7 d8                	neg    eax
c0001670:	21 c3                	and    ebx,eax
c0001672:	83 eb 08             	sub    ebx,0x8
c0001675:	89 d8                	mov    eax,ebx
c0001677:	29 f0                	sub    eax,esi
c0001679:	83 f8 0f             	cmp    eax,0xf
c000167c:	77 02                	ja     c0001680 <dlmemalign+0x98>
c000167e:	01 fb                	add    ebx,edi
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	89 c6                	mov    esi,eax
c0001686:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001689:	89 c2                	mov    edx,eax
c000168b:	83 e2 fc             	and    edx,0xfffffffc
c000168e:	29 f2                	sub    edx,esi
c0001690:	a8 02                	test   al,0x2
c0001692:	74 10                	je     c00016a4 <dlmemalign+0xbc>
c0001694:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001697:	83 ca 02             	or     edx,0x2
c000169a:	8d 43 08             	lea    eax,[ebx+0x8]
c000169d:	89 33                	mov    DWORD PTR [ebx],esi
c000169f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a2:	eb 5f                	jmp    c0001703 <dlmemalign+0x11b>
c00016a4:	89 d0                	mov    eax,edx
c00016a6:	83 ec 0c             	sub    esp,0xc
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016af:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b7:	83 e0 01             	and    eax,0x1
c00016ba:	09 f0                	or     eax,esi
c00016bc:	89 de                	mov    esi,ebx
c00016be:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c1:	51                   	push   ecx
c00016c2:	e8 d1 f4 ff ff       	call   c0000b98 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016cd:	a8 02                	test   al,0x2
c00016cf:	75 2f                	jne    c0001700 <dlmemalign+0x118>
c00016d1:	83 e0 fc             	and    eax,0xfffffffc
c00016d4:	8d 55 10             	lea    edx,[ebp+0x10]
c00016d7:	39 c2                	cmp    edx,eax
c00016d9:	73 25                	jae    c0001700 <dlmemalign+0x118>
c00016db:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016de:	29 e8                	sub    eax,ebp
c00016e0:	83 c8 01             	or     eax,0x1
c00016e3:	83 ec 0c             	sub    esp,0xc
c00016e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016e9:	83 c2 08             	add    edx,0x8
c00016ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ef:	83 e0 01             	and    eax,0x1
c00016f2:	09 c5                	or     ebp,eax
c00016f4:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016f7:	52                   	push   edx
c00016f8:	e8 9b f4 ff ff       	call   c0000b98 <dlfree>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	8d 46 08             	lea    eax,[esi+0x8]
c0001703:	83 c4 0c             	add    esp,0xc
c0001706:	5b                   	pop    ebx
c0001707:	5e                   	pop    esi
c0001708:	5f                   	pop    edi
c0001709:	5d                   	pop    ebp
c000170a:	c3                   	ret    

c000170b <dlcalloc>:
c000170b:	53                   	push   ebx
c000170c:	83 ec 14             	sub    esp,0x14
c000170f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001713:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001718:	50                   	push   eax
c0001719:	e8 d8 f7 ff ff       	call   c0000ef6 <dlmalloc>
c000171e:	83 c4 10             	add    esp,0x10
c0001721:	89 c3                	mov    ebx,eax
c0001723:	85 c0                	test   eax,eax
c0001725:	74 77                	je     c000179e <dlcalloc+0x93>
c0001727:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172a:	89 d0                	mov    eax,edx
c000172c:	83 e0 fc             	and    eax,0xfffffffc
c000172f:	80 e2 02             	and    dl,0x2
c0001732:	75 5a                	jne    c000178e <dlcalloc+0x83>
c0001734:	83 e8 04             	sub    eax,0x4
c0001737:	83 f8 27             	cmp    eax,0x27
c000173a:	76 03                	jbe    c000173f <dlcalloc+0x34>
c000173c:	51                   	push   ecx
c000173d:	eb 53                	jmp    c0001792 <dlcalloc+0x87>
c000173f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001745:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000174c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001753:	83 f8 13             	cmp    eax,0x13
c0001756:	76 46                	jbe    c000179e <dlcalloc+0x93>
c0001758:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000175f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001766:	83 f8 1b             	cmp    eax,0x1b
c0001769:	76 33                	jbe    c000179e <dlcalloc+0x93>
c000176b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001772:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001779:	83 f8 23             	cmp    eax,0x23
c000177c:	76 20                	jbe    c000179e <dlcalloc+0x93>
c000177e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001785:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000178c:	eb 10                	jmp    c000179e <dlcalloc+0x93>
c000178e:	83 e8 08             	sub    eax,0x8
c0001791:	52                   	push   edx
c0001792:	50                   	push   eax
c0001793:	6a 00                	push   0x0
c0001795:	53                   	push   ebx
c0001796:	e8 1a ef ff ff       	call   c00006b5 <memset>
c000179b:	83 c4 10             	add    esp,0x10
c000179e:	83 c4 08             	add    esp,0x8
c00017a1:	89 d8                	mov    eax,ebx
c00017a3:	5b                   	pop    ebx
c00017a4:	c3                   	ret    

c00017a5 <dlcfree>:
c00017a5:	e9 ee f3 ff ff       	jmp    c0000b98 <dlfree>

c00017aa <dlindependent_calloc>:
c00017aa:	83 ec 28             	sub    esp,0x28
c00017ad:	b9 03 00 00 00       	mov    ecx,0x3
c00017b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017c6:	e8 b9 fa ff ff       	call   c0001284 <iALLOc>
c00017cb:	83 c4 2c             	add    esp,0x2c
c00017ce:	c3                   	ret    

c00017cf <dlindependent_comalloc>:
c00017cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017d7:	31 c9                	xor    ecx,ecx
c00017d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e1:	e9 9e fa ff ff       	jmp    c0001284 <iALLOc>

c00017e6 <dlvalloc>:
c00017e6:	83 ec 0c             	sub    esp,0xc
c00017e9:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c00017f0:	75 0a                	jne    c00017fc <dlvalloc+0x16>
c00017f2:	b8 80 43 02 c0       	mov    eax,0xc0024380
c00017f7:	e8 b5 f2 ff ff       	call   c0000ab1 <malloc_consolidate>
c00017fc:	50                   	push   eax
c00017fd:	50                   	push   eax
c00017fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001802:	ff 35 dc 46 02 c0    	push   DWORD PTR ds:0xc00246dc
c0001808:	e8 db fd ff ff       	call   c00015e8 <dlmemalign>
c000180d:	83 c4 1c             	add    esp,0x1c
c0001810:	c3                   	ret    

c0001811 <dlpvalloc>:
c0001811:	83 ec 0c             	sub    esp,0xc
c0001814:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c000181b:	75 0a                	jne    c0001827 <dlpvalloc+0x16>
c000181d:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0001822:	e8 8a f2 ff ff       	call   c0000ab1 <malloc_consolidate>
c0001827:	52                   	push   edx
c0001828:	a1 dc 46 02 c0       	mov    eax,ds:0xc00246dc
c000182d:	52                   	push   edx
c000182e:	89 c1                	mov    ecx,eax
c0001830:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001834:	f7 d9                	neg    ecx
c0001836:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183a:	21 ca                	and    edx,ecx
c000183c:	52                   	push   edx
c000183d:	50                   	push   eax
c000183e:	e8 a5 fd ff ff       	call   c00015e8 <dlmemalign>
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	c3                   	ret    

c0001847 <dlmalloc_trim>:
c0001847:	b8 80 43 02 c0       	mov    eax,0xc0024380
c000184c:	e8 60 f2 ff ff       	call   c0000ab1 <malloc_consolidate>
c0001851:	31 c0                	xor    eax,eax
c0001853:	c3                   	ret    

c0001854 <dlmalloc_usable_size>:
c0001854:	53                   	push   ebx
c0001855:	31 c0                	xor    eax,eax
c0001857:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000185b:	85 c9                	test   ecx,ecx
c000185d:	74 24                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000185f:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001862:	f6 c2 02             	test   dl,0x2
c0001865:	74 08                	je     c000186f <dlmalloc_usable_size+0x1b>
c0001867:	83 e2 fc             	and    edx,0xfffffffc
c000186a:	8d 42 f8             	lea    eax,[edx-0x8]
c000186d:	eb 14                	jmp    c0001883 <dlmalloc_usable_size+0x2f>
c000186f:	89 d3                	mov    ebx,edx
c0001871:	31 c0                	xor    eax,eax
c0001873:	83 e3 fe             	and    ebx,0xfffffffe
c0001876:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000187b:	74 06                	je     c0001883 <dlmalloc_usable_size+0x2f>
c000187d:	83 e2 fc             	and    edx,0xfffffffc
c0001880:	8d 42 fc             	lea    eax,[edx-0x4]
c0001883:	5b                   	pop    ebx
c0001884:	c3                   	ret    

c0001885 <dlmallinfo>:
c0001885:	55                   	push   ebp
c0001886:	57                   	push   edi
c0001887:	56                   	push   esi
c0001888:	53                   	push   ebx
c0001889:	83 ec 08             	sub    esp,0x8
c000188c:	83 3d ac 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243ac,0x0
c0001893:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001897:	75 0a                	jne    c00018a3 <dlmallinfo+0x1e>
c0001899:	b8 80 43 02 c0       	mov    eax,0xc0024380
c000189e:	e8 0e f2 ff ff       	call   c0000ab1 <malloc_consolidate>
c00018a3:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c00018a8:	31 ed                	xor    ebp,ebp
c00018aa:	31 c9                	xor    ecx,ecx
c00018ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018af:	83 e0 fc             	and    eax,0xfffffffc
c00018b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018b6:	31 c0                	xor    eax,eax
c00018b8:	8b 14 85 84 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc7c]
c00018bf:	85 d2                	test   edx,edx
c00018c1:	74 0e                	je     c00018d1 <dlmallinfo+0x4c>
c00018c3:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018c6:	45                   	inc    ebp
c00018c7:	83 e6 fc             	and    esi,0xfffffffc
c00018ca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018cd:	01 f1                	add    ecx,esi
c00018cf:	eb ee                	jmp    c00018bf <dlmallinfo+0x3a>
c00018d1:	40                   	inc    eax
c00018d2:	83 f8 0a             	cmp    eax,0xa
c00018d5:	75 e1                	jne    c00018b8 <dlmallinfo+0x33>
c00018d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018e5:	b8 b4 43 02 c0       	mov    eax,0xc00243b4
c00018ea:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ed:	39 f0                	cmp    eax,esi
c00018ef:	74 10                	je     c0001901 <dlmallinfo+0x7c>
c00018f1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f4:	ff 04 24             	inc    DWORD PTR [esp]
c00018f7:	83 e7 fc             	and    edi,0xfffffffc
c00018fa:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018fd:	01 fa                	add    edx,edi
c00018ff:	eb ec                	jmp    c00018ed <dlmallinfo+0x68>
c0001901:	83 c0 08             	add    eax,0x8
c0001904:	3d ac 46 02 c0       	cmp    eax,0xc00246ac
c0001909:	75 df                	jne    c00018ea <dlmallinfo+0x65>
c000190b:	a1 e8 46 02 c0       	mov    eax,ds:0xc00246e8
c0001910:	8b 35 d0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246d0
c0001916:	89 03                	mov    DWORD PTR [ebx],eax
c0001918:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000191b:	29 d0                	sub    eax,edx
c000191d:	8b 35 e4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246e4
c0001923:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001926:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001929:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000192c:	8b 35 f4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f4
c0001932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001936:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001939:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000193c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000193f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001942:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001945:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001948:	83 c4 08             	add    esp,0x8
c000194b:	89 d8                	mov    eax,ebx
c000194d:	5b                   	pop    ebx
c000194e:	5e                   	pop    esi
c000194f:	5f                   	pop    edi
c0001950:	5d                   	pop    ebp
c0001951:	c2 04 00             	ret    0x4

c0001954 <dlmalloc_stats>:
c0001954:	83 ec 30             	sub    esp,0x30
c0001957:	8d 44 24 08          	lea    eax,[esp+0x8]
c000195b:	50                   	push   eax
c000195c:	e8 24 ff ff ff       	call   c0001885 <dlmallinfo>
c0001961:	83 c4 30             	add    esp,0x30
c0001964:	c3                   	ret    

c0001965 <dlmallopt>:
c0001965:	56                   	push   esi
c0001966:	b8 80 43 02 c0       	mov    eax,0xc0024380
c000196b:	53                   	push   ebx
c000196c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001974:	e8 38 f1 ff ff       	call   c0000ab1 <malloc_consolidate>
c0001979:	8d 46 04             	lea    eax,[esi+0x4]
c000197c:	83 f8 05             	cmp    eax,0x5
c000197f:	77 67                	ja     c00019e8 <dlmallopt+0x83>
c0001981:	ff 24 85 04 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbfc]
c0001988:	83 fb 50             	cmp    ebx,0x50
c000198b:	77 5b                	ja     c00019e8 <dlmallopt+0x83>
c000198d:	ba 08 00 00 00       	mov    edx,0x8
c0001992:	85 db                	test   ebx,ebx
c0001994:	74 12                	je     c00019a8 <dlmallopt+0x43>
c0001996:	83 c3 0b             	add    ebx,0xb
c0001999:	ba 10 00 00 00       	mov    edx,0x10
c000199e:	83 fb 0f             	cmp    ebx,0xf
c00019a1:	76 05                	jbe    c00019a8 <dlmallopt+0x43>
c00019a3:	89 da                	mov    edx,ebx
c00019a5:	83 e2 f8             	and    edx,0xfffffff8
c00019a8:	a1 80 43 02 c0       	mov    eax,ds:0xc0024380
c00019ad:	83 e0 03             	and    eax,0x3
c00019b0:	09 d0                	or     eax,edx
c00019b2:	a3 80 43 02 c0       	mov    ds:0xc0024380,eax
c00019b7:	eb 31                	jmp    c00019ea <dlmallopt+0x85>
c00019b9:	89 1d c4 46 02 c0    	mov    DWORD PTR ds:0xc00246c4,ebx
c00019bf:	eb 06                	jmp    c00019c7 <dlmallopt+0x62>
c00019c1:	89 1d c8 46 02 c0    	mov    DWORD PTR ds:0xc00246c8,ebx
c00019c7:	be 01 00 00 00       	mov    esi,0x1
c00019cc:	eb 1c                	jmp    c00019ea <dlmallopt+0x85>
c00019ce:	89 1d cc 46 02 c0    	mov    DWORD PTR ds:0xc00246cc,ebx
c00019d4:	eb f1                	jmp    c00019c7 <dlmallopt+0x62>
c00019d6:	31 f6                	xor    esi,esi
c00019d8:	85 db                	test   ebx,ebx
c00019da:	75 0e                	jne    c00019ea <dlmallopt+0x85>
c00019dc:	c7 05 d4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246d4,0x0
c00019e6:	eb df                	jmp    c00019c7 <dlmallopt+0x62>
c00019e8:	31 f6                	xor    esi,esi
c00019ea:	5b                   	pop    ebx
c00019eb:	89 f0                	mov    eax,esi
c00019ed:	5e                   	pop    esi
c00019ee:	c3                   	ret    

c00019ef <disk_status>:
c00019ef:	31 c0                	xor    eax,eax
c00019f1:	c3                   	ret    

c00019f2 <disk_initialize>:
c00019f2:	31 c0                	xor    eax,eax
c00019f4:	c3                   	ret    

c00019f5 <disk_read>:
c00019f5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019fa:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a06:	e9 a3 8d 01 00       	jmp    c001a7ae <fatWrapperReadDisk>

c0001a0b <disk_write>:
c0001a0b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a10:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1c:	e9 d8 8d 01 00       	jmp    c001a7f9 <fatWrapperWriteDisk>

c0001a21 <disk_ioctl>:
c0001a21:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2f:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a3b:	e9 04 8e 01 00       	jmp    c001a844 <fatWrapperIoctl>

c0001a40 <ld_word>:
c0001a40:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a47:	c1 e2 08             	shl    edx,0x8
c0001a4a:	09 d0                	or     eax,edx
c0001a4c:	c3                   	ret    

c0001a4d <ld_dword>:
c0001a4d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a51:	89 d1                	mov    ecx,edx
c0001a53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a57:	c1 e1 08             	shl    ecx,0x8
c0001a5a:	09 ca                	or     edx,ecx
c0001a5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5f:	c1 e2 08             	shl    edx,0x8
c0001a62:	09 d0                	or     eax,edx
c0001a64:	c3                   	ret    

c0001a65 <ld_qword>:
c0001a65:	57                   	push   edi
c0001a66:	56                   	push   esi
c0001a67:	53                   	push   ebx
c0001a68:	31 db                	xor    ebx,ebx
c0001a6a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a6d:	89 df                	mov    edi,ebx
c0001a6f:	89 ce                	mov    esi,ecx
c0001a71:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a75:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a79:	c1 e6 08             	shl    esi,0x8
c0001a7c:	09 f2                	or     edx,esi
c0001a7e:	89 d6                	mov    esi,edx
c0001a80:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a84:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a88:	c1 e6 08             	shl    esi,0x8
c0001a8b:	09 f2                	or     edx,esi
c0001a8d:	89 d6                	mov    esi,edx
c0001a8f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a93:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a97:	c1 e6 08             	shl    esi,0x8
c0001a9a:	89 fb                	mov    ebx,edi
c0001a9c:	09 f2                	or     edx,esi
c0001a9e:	89 d1                	mov    ecx,edx
c0001aa0:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa4:	89 da                	mov    edx,ebx
c0001aa6:	5b                   	pop    ebx
c0001aa7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaa:	c1 e1 08             	shl    ecx,0x8
c0001aad:	5e                   	pop    esi
c0001aae:	09 c8                	or     eax,ecx
c0001ab0:	5f                   	pop    edi
c0001ab1:	c3                   	ret    

c0001ab2 <st_word>:
c0001ab2:	66 89 10             	mov    WORD PTR [eax],dx
c0001ab5:	c3                   	ret    

c0001ab6 <st_dword>:
c0001ab6:	89 10                	mov    DWORD PTR [eax],edx
c0001ab8:	c3                   	ret    

c0001ab9 <st_qword>:
c0001ab9:	89 10                	mov    DWORD PTR [eax],edx
c0001abb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001abe:	c3                   	ret    

c0001abf <mem_cpy>:
c0001abf:	85 c9                	test   ecx,ecx
c0001ac1:	74 10                	je     c0001ad3 <mem_cpy+0x14>
c0001ac3:	57                   	push   edi
c0001ac4:	01 c1                	add    ecx,eax
c0001ac6:	56                   	push   esi
c0001ac7:	89 c7                	mov    edi,eax
c0001ac9:	89 d6                	mov    esi,edx
c0001acb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001acc:	39 f9                	cmp    ecx,edi
c0001ace:	75 fb                	jne    c0001acb <mem_cpy+0xc>
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    
c0001ad3:	c3                   	ret    

c0001ad4 <mem_set>:
c0001ad4:	01 c1                	add    ecx,eax
c0001ad6:	40                   	inc    eax
c0001ad7:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ada:	39 c8                	cmp    eax,ecx
c0001adc:	75 f8                	jne    c0001ad6 <mem_set+0x2>
c0001ade:	c3                   	ret    

c0001adf <mem_cmp>:
c0001adf:	57                   	push   edi
c0001ae0:	56                   	push   esi
c0001ae1:	89 c6                	mov    esi,eax
c0001ae3:	53                   	push   ebx
c0001ae4:	46                   	inc    esi
c0001ae5:	42                   	inc    edx
c0001ae6:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aea:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aee:	29 fb                	sub    ebx,edi
c0001af0:	89 cf                	mov    edi,ecx
c0001af2:	29 f7                	sub    edi,esi
c0001af4:	01 c7                	add    edi,eax
c0001af6:	74 04                	je     c0001afc <mem_cmp+0x1d>
c0001af8:	85 db                	test   ebx,ebx
c0001afa:	74 e8                	je     c0001ae4 <mem_cmp+0x5>
c0001afc:	89 d8                	mov    eax,ebx
c0001afe:	5b                   	pop    ebx
c0001aff:	5e                   	pop    esi
c0001b00:	5f                   	pop    edi
c0001b01:	c3                   	ret    

c0001b02 <chk_chr>:
c0001b02:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b05:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b08:	74 07                	je     c0001b11 <chk_chr+0xf>
c0001b0a:	39 d1                	cmp    ecx,edx
c0001b0c:	74 03                	je     c0001b11 <chk_chr+0xf>
c0001b0e:	40                   	inc    eax
c0001b0f:	eb f1                	jmp    c0001b02 <chk_chr>
c0001b11:	89 c8                	mov    eax,ecx
c0001b13:	c3                   	ret    

c0001b14 <dbc_1st>:
c0001b14:	31 c0                	xor    eax,eax
c0001b16:	c3                   	ret    

c0001b17 <dbc_2nd>:
c0001b17:	31 c0                	xor    eax,eax
c0001b19:	c3                   	ret    

c0001b1a <tchar2uni>:
c0001b1a:	57                   	push   edi
c0001b1b:	89 c7                	mov    edi,eax
c0001b1d:	56                   	push   esi
c0001b1e:	53                   	push   ebx
c0001b1f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b21:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b23:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b26:	84 c9                	test   cl,cl
c0001b28:	78 0a                	js     c0001b34 <tchar2uni+0x1a>
c0001b2a:	0f b6 d1             	movzx  edx,cl
c0001b2d:	89 f3                	mov    ebx,esi
c0001b2f:	e9 9f 00 00 00       	jmp    c0001bd3 <tchar2uni+0xb9>
c0001b34:	88 ca                	mov    dl,cl
c0001b36:	83 e2 e0             	and    edx,0xffffffe0
c0001b39:	80 fa c0             	cmp    dl,0xc0
c0001b3c:	75 0c                	jne    c0001b4a <tchar2uni+0x30>
c0001b3e:	89 ca                	mov    edx,ecx
c0001b40:	b9 01 00 00 00       	mov    ecx,0x1
c0001b45:	83 e2 1f             	and    edx,0x1f
c0001b48:	eb 2e                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b4a:	88 ca                	mov    dl,cl
c0001b4c:	83 e2 f0             	and    edx,0xfffffff0
c0001b4f:	80 fa e0             	cmp    dl,0xe0
c0001b52:	75 0c                	jne    c0001b60 <tchar2uni+0x46>
c0001b54:	89 ca                	mov    edx,ecx
c0001b56:	b9 02 00 00 00       	mov    ecx,0x2
c0001b5b:	83 e2 0f             	and    edx,0xf
c0001b5e:	eb 18                	jmp    c0001b78 <tchar2uni+0x5e>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 f8             	and    edx,0xfffffff8
c0001b65:	88 d0                	mov    al,dl
c0001b67:	83 ca ff             	or     edx,0xffffffff
c0001b6a:	3c f0                	cmp    al,0xf0
c0001b6c:	75 6c                	jne    c0001bda <tchar2uni+0xc0>
c0001b6e:	89 ca                	mov    edx,ecx
c0001b70:	b9 03 00 00 00       	mov    ecx,0x3
c0001b75:	83 e2 07             	and    edx,0x7
c0001b78:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b7c:	46                   	inc    esi
c0001b7d:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b80:	88 c8                	mov    al,cl
c0001b82:	83 e0 c0             	and    eax,0xffffffc0
c0001b85:	3c 80                	cmp    al,0x80
c0001b87:	75 4e                	jne    c0001bd7 <tchar2uni+0xbd>
c0001b89:	c1 e2 06             	shl    edx,0x6
c0001b8c:	83 e1 3f             	and    ecx,0x3f
c0001b8f:	09 ca                	or     edx,ecx
c0001b91:	39 de                	cmp    esi,ebx
c0001b93:	75 e7                	jne    c0001b7c <tchar2uni+0x62>
c0001b95:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b9b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba1:	76 34                	jbe    c0001bd7 <tchar2uni+0xbd>
c0001ba3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bac:	77 29                	ja     c0001bd7 <tchar2uni+0xbd>
c0001bae:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb4:	76 1d                	jbe    c0001bd3 <tchar2uni+0xb9>
c0001bb6:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bbc:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc2:	c1 e1 06             	shl    ecx,0x6
c0001bc5:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bcb:	09 ca                	or     edx,ecx
c0001bcd:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd3:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bd5:	eb 03                	jmp    c0001bda <tchar2uni+0xc0>
c0001bd7:	83 ca ff             	or     edx,0xffffffff
c0001bda:	5b                   	pop    ebx
c0001bdb:	89 d0                	mov    eax,edx
c0001bdd:	5e                   	pop    esi
c0001bde:	5f                   	pop    edi
c0001bdf:	c3                   	ret    

c0001be0 <put_utf>:
c0001be0:	53                   	push   ebx
c0001be1:	83 f8 7f             	cmp    eax,0x7f
c0001be4:	89 c3                	mov    ebx,eax
c0001be6:	b0 00                	mov    al,0x0
c0001be8:	77 11                	ja     c0001bfb <put_utf+0x1b>
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	0f 84 e5 00 00 00    	je     c0001cd7 <put_utf+0xf7>
c0001bf2:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf4:	b0 01                	mov    al,0x1
c0001bf6:	e9 dc 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001bfb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c01:	77 23                	ja     c0001c26 <put_utf+0x46>
c0001c03:	83 f9 01             	cmp    ecx,0x1
c0001c06:	0f 86 cb 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	83 e3 3f             	and    ebx,0x3f
c0001c11:	c1 e8 06             	shr    eax,0x6
c0001c14:	83 cb 80             	or     ebx,0xffffff80
c0001c17:	83 c8 c0             	or     eax,0xffffffc0
c0001c1a:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c1d:	88 02                	mov    BYTE PTR [edx],al
c0001c1f:	b0 02                	mov    al,0x2
c0001c21:	e9 b1 00 00 00       	jmp    c0001cd7 <put_utf+0xf7>
c0001c26:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c2c:	77 40                	ja     c0001c6e <put_utf+0x8e>
c0001c2e:	83 f9 02             	cmp    ecx,0x2
c0001c31:	0f 86 a0 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c37:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c3d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c43:	0f 86 8e 00 00 00    	jbe    c0001cd7 <put_utf+0xf7>
c0001c49:	89 d8                	mov    eax,ebx
c0001c4b:	c1 e8 0c             	shr    eax,0xc
c0001c4e:	83 c8 e0             	or     eax,0xffffffe0
c0001c51:	88 02                	mov    BYTE PTR [edx],al
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 06             	shr    eax,0x6
c0001c58:	83 e3 3f             	and    ebx,0x3f
c0001c5b:	83 e0 3f             	and    eax,0x3f
c0001c5e:	83 cb 80             	or     ebx,0xffffff80
c0001c61:	83 c8 80             	or     eax,0xffffff80
c0001c64:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c67:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6a:	b0 03                	mov    al,0x3
c0001c6c:	eb 69                	jmp    c0001cd7 <put_utf+0xf7>
c0001c6e:	83 f9 03             	cmp    ecx,0x3
c0001c71:	76 64                	jbe    c0001cd7 <put_utf+0xf7>
c0001c73:	89 d9                	mov    ecx,ebx
c0001c75:	66 31 c9             	xor    cx,cx
c0001c78:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c7e:	0f b7 c3             	movzx  eax,bx
c0001c81:	c1 e9 06             	shr    ecx,0x6
c0001c84:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8a:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c90:	77 43                	ja     c0001cd5 <put_utf+0xf5>
c0001c92:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c98:	77 3b                	ja     c0001cd5 <put_utf+0xf5>
c0001c9a:	09 cb                	or     ebx,ecx
c0001c9c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca2:	89 d8                	mov    eax,ebx
c0001ca4:	c1 e8 12             	shr    eax,0x12
c0001ca7:	83 c8 f0             	or     eax,0xfffffff0
c0001caa:	88 02                	mov    BYTE PTR [edx],al
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 0c             	shr    eax,0xc
c0001cb1:	83 e0 3f             	and    eax,0x3f
c0001cb4:	83 c8 80             	or     eax,0xffffff80
c0001cb7:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cba:	89 d8                	mov    eax,ebx
c0001cbc:	c1 e8 06             	shr    eax,0x6
c0001cbf:	83 e3 3f             	and    ebx,0x3f
c0001cc2:	83 e0 3f             	and    eax,0x3f
c0001cc5:	83 cb 80             	or     ebx,0xffffff80
c0001cc8:	83 c8 80             	or     eax,0xffffff80
c0001ccb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cce:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd1:	b0 04                	mov    al,0x4
c0001cd3:	eb 02                	jmp    c0001cd7 <put_utf+0xf7>
c0001cd5:	31 c0                	xor    eax,eax
c0001cd7:	5b                   	pop    ebx
c0001cd8:	c3                   	ret    

c0001cd9 <clst2sect>:
c0001cd9:	89 c1                	mov    ecx,eax
c0001cdb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cde:	83 ea 02             	sub    edx,0x2
c0001ce1:	83 e8 02             	sub    eax,0x2
c0001ce4:	39 d0                	cmp    eax,edx
c0001ce6:	76 0d                	jbe    c0001cf5 <clst2sect+0x1c>
c0001ce8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cec:	f7 e2                	mul    edx
c0001cee:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf1:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf4:	c3                   	ret    
c0001cf5:	31 c0                	xor    eax,eax
c0001cf7:	31 d2                	xor    edx,edx
c0001cf9:	c3                   	ret    

c0001cfa <clmt_clust>:
c0001cfa:	57                   	push   edi
c0001cfb:	89 cf                	mov    edi,ecx
c0001cfd:	56                   	push   esi
c0001cfe:	89 d6                	mov    esi,edx
c0001d00:	53                   	push   ebx
c0001d01:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d06:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0a:	c1 ef 09             	shr    edi,0x9
c0001d0d:	89 f2                	mov    edx,esi
c0001d0f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d12:	89 f9                	mov    ecx,edi
c0001d14:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d18:	31 ff                	xor    edi,edi
c0001d1a:	57                   	push   edi
c0001d1b:	56                   	push   esi
c0001d1c:	51                   	push   ecx
c0001d1d:	52                   	push   edx
c0001d1e:	e8 d9 d7 01 00       	call   c001f4fc <__udivdi3>
c0001d23:	83 c4 10             	add    esp,0x10
c0001d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d28:	85 d2                	test   edx,edx
c0001d2a:	74 10                	je     c0001d3c <clmt_clust+0x42>
c0001d2c:	39 d0                	cmp    eax,edx
c0001d2e:	72 07                	jb     c0001d37 <clmt_clust+0x3d>
c0001d30:	29 d0                	sub    eax,edx
c0001d32:	83 c3 08             	add    ebx,0x8
c0001d35:	eb ef                	jmp    c0001d26 <clmt_clust+0x2c>
c0001d37:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3a:	89 c2                	mov    edx,eax
c0001d3c:	5b                   	pop    ebx
c0001d3d:	89 d0                	mov    eax,edx
c0001d3f:	5e                   	pop    esi
c0001d40:	5f                   	pop    edi
c0001d41:	c3                   	ret    

c0001d42 <pick_lfn>:
c0001d42:	55                   	push   ebp
c0001d43:	57                   	push   edi
c0001d44:	56                   	push   esi
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	53                   	push   ebx
c0001d48:	89 c3                	mov    ebx,eax
c0001d4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d4d:	e8 ee fc ff ff       	call   c0001a40 <ld_word>
c0001d52:	66 85 c0             	test   ax,ax
c0001d55:	74 04                	je     c0001d5b <pick_lfn+0x19>
c0001d57:	31 c0                	xor    eax,eax
c0001d59:	eb 5c                	jmp    c0001db7 <pick_lfn+0x75>
c0001d5b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d5e:	83 e1 bf             	and    ecx,0xffffffbf
c0001d61:	bd 01 00 00 00       	mov    ebp,0x1
c0001d66:	49                   	dec    ecx
c0001d67:	31 ff                	xor    edi,edi
c0001d69:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d6c:	0f b6 87 20 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfae0]
c0001d73:	01 f0                	add    eax,esi
c0001d75:	e8 c6 fc ff ff       	call   c0001a40 <ld_word>
c0001d7a:	66 85 ed             	test   bp,bp
c0001d7d:	74 11                	je     c0001d90 <pick_lfn+0x4e>
c0001d7f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d85:	77 d0                	ja     c0001d57 <pick_lfn+0x15>
c0001d87:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d8b:	89 c5                	mov    ebp,eax
c0001d8d:	41                   	inc    ecx
c0001d8e:	eb 04                	jmp    c0001d94 <pick_lfn+0x52>
c0001d90:	66 40                	inc    ax
c0001d92:	75 c3                	jne    c0001d57 <pick_lfn+0x15>
c0001d94:	47                   	inc    edi
c0001d95:	83 ff 0d             	cmp    edi,0xd
c0001d98:	75 d2                	jne    c0001d6c <pick_lfn+0x2a>
c0001d9a:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d9d:	74 13                	je     c0001db2 <pick_lfn+0x70>
c0001d9f:	66 85 ed             	test   bp,bp
c0001da2:	74 0e                	je     c0001db2 <pick_lfn+0x70>
c0001da4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daa:	77 ab                	ja     c0001d57 <pick_lfn+0x15>
c0001dac:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	5b                   	pop    ebx
c0001db8:	5e                   	pop    esi
c0001db9:	5f                   	pop    edi
c0001dba:	5d                   	pop    ebp
c0001dbb:	c3                   	ret    

c0001dbc <put_lfn>:
c0001dbc:	55                   	push   ebp
c0001dbd:	31 ed                	xor    ebp,ebp
c0001dbf:	57                   	push   edi
c0001dc0:	89 d7                	mov    edi,edx
c0001dc2:	56                   	push   esi
c0001dc3:	31 f6                	xor    esi,esi
c0001dc5:	53                   	push   ebx
c0001dc6:	83 ec 08             	sub    esp,0x8
c0001dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd3:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dd9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ddc:	31 d2                	xor    edx,edx
c0001dde:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de2:	e8 cb fc ff ff       	call   c0001ab2 <st_word>
c0001de7:	0f b6 d9             	movzx  ebx,cl
c0001dea:	4b                   	dec    ebx
c0001deb:	6b db 0d             	imul   ebx,ebx,0xd
c0001dee:	66 83 fe ff          	cmp    si,0xffff
c0001df2:	74 08                	je     c0001dfc <put_lfn+0x40>
c0001df4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df7:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dfb:	43                   	inc    ebx
c0001dfc:	0f b6 85 20 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfae0]
c0001e03:	0f b7 d6             	movzx  edx,si
c0001e06:	01 f8                	add    eax,edi
c0001e08:	e8 a5 fc ff ff       	call   c0001ab2 <st_word>
c0001e0d:	66 85 f6             	test   si,si
c0001e10:	75 03                	jne    c0001e15 <put_lfn+0x59>
c0001e12:	83 ce ff             	or     esi,0xffffffff
c0001e15:	45                   	inc    ebp
c0001e16:	83 fd 0d             	cmp    ebp,0xd
c0001e19:	75 d3                	jne    c0001dee <put_lfn+0x32>
c0001e1b:	66 46                	inc    si
c0001e1d:	74 0a                	je     c0001e29 <put_lfn+0x6d>
c0001e1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e22:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e27:	75 09                	jne    c0001e32 <put_lfn+0x76>
c0001e29:	88 c8                	mov    al,cl
c0001e2b:	83 c8 40             	or     eax,0x40
c0001e2e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e32:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e36:	88 07                	mov    BYTE PTR [edi],al
c0001e38:	83 c4 08             	add    esp,0x8
c0001e3b:	5b                   	pop    ebx
c0001e3c:	5e                   	pop    esi
c0001e3d:	5f                   	pop    edi
c0001e3e:	5d                   	pop    ebp
c0001e3f:	c3                   	ret    

c0001e40 <gen_numname>:
c0001e40:	57                   	push   edi
c0001e41:	89 cf                	mov    edi,ecx
c0001e43:	56                   	push   esi
c0001e44:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e49:	53                   	push   ebx
c0001e4a:	89 c6                	mov    esi,eax
c0001e4c:	83 ec 10             	sub    esp,0x10
c0001e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e53:	e8 67 fc ff ff       	call   c0001abf <mem_cpy>
c0001e58:	83 fb 05             	cmp    ebx,0x5
c0001e5b:	76 2d                	jbe    c0001e8a <gen_numname+0x4a>
c0001e5d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e60:	66 85 c0             	test   ax,ax
c0001e63:	74 25                	je     c0001e8a <gen_numname+0x4a>
c0001e65:	83 c7 02             	add    edi,0x2
c0001e68:	ba 10 00 00 00       	mov    edx,0x10
c0001e6d:	89 c1                	mov    ecx,eax
c0001e6f:	01 db                	add    ebx,ebx
c0001e71:	66 d1 e8             	shr    ax,1
c0001e74:	83 e1 01             	and    ecx,0x1
c0001e77:	01 cb                	add    ebx,ecx
c0001e79:	0f ba e3 10          	bt     ebx,0x10
c0001e7d:	73 06                	jae    c0001e85 <gen_numname+0x45>
c0001e7f:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e85:	4a                   	dec    edx
c0001e86:	75 e5                	jne    c0001e6d <gen_numname+0x2d>
c0001e88:	eb d3                	jmp    c0001e5d <gen_numname+0x1d>
c0001e8a:	b8 07 00 00 00       	mov    eax,0x7
c0001e8f:	88 d9                	mov    cl,bl
c0001e91:	83 e1 0f             	and    ecx,0xf
c0001e94:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e97:	80 fa 39             	cmp    dl,0x39
c0001e9a:	76 03                	jbe    c0001e9f <gen_numname+0x5f>
c0001e9c:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e9f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ea6:	89 da                	mov    edx,ebx
c0001ea8:	c1 ea 04             	shr    edx,0x4
c0001eab:	83 fb 0f             	cmp    ebx,0xf
c0001eae:	76 06                	jbe    c0001eb6 <gen_numname+0x76>
c0001eb0:	89 c8                	mov    eax,ecx
c0001eb2:	89 d3                	mov    ebx,edx
c0001eb4:	eb d9                	jmp    c0001e8f <gen_numname+0x4f>
c0001eb6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ebb:	31 d2                	xor    edx,edx
c0001ebd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec0:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec3:	39 ca                	cmp    edx,ecx
c0001ec5:	73 18                	jae    c0001edf <gen_numname+0x9f>
c0001ec7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eca:	3c 20                	cmp    al,0x20
c0001ecc:	74 11                	je     c0001edf <gen_numname+0x9f>
c0001ece:	e8 41 fc ff ff       	call   c0001b14 <dbc_1st>
c0001ed3:	85 c0                	test   eax,eax
c0001ed5:	74 05                	je     c0001edc <gen_numname+0x9c>
c0001ed7:	39 d3                	cmp    ebx,edx
c0001ed9:	74 04                	je     c0001edf <gen_numname+0x9f>
c0001edb:	42                   	inc    edx
c0001edc:	42                   	inc    edx
c0001edd:	eb e1                	jmp    c0001ec0 <gen_numname+0x80>
c0001edf:	b0 20                	mov    al,0x20
c0001ee1:	83 f9 07             	cmp    ecx,0x7
c0001ee4:	77 05                	ja     c0001eeb <gen_numname+0xab>
c0001ee6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eea:	41                   	inc    ecx
c0001eeb:	42                   	inc    edx
c0001eec:	83 fa 07             	cmp    edx,0x7
c0001eef:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef3:	76 ea                	jbe    c0001edf <gen_numname+0x9f>
c0001ef5:	83 c4 10             	add    esp,0x10
c0001ef8:	5b                   	pop    ebx
c0001ef9:	5e                   	pop    esi
c0001efa:	5f                   	pop    edi
c0001efb:	c3                   	ret    

c0001efc <sum_sfn>:
c0001efc:	31 c9                	xor    ecx,ecx
c0001efe:	31 d2                	xor    edx,edx
c0001f00:	d0 ca                	ror    dl,1
c0001f02:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f05:	41                   	inc    ecx
c0001f06:	83 f9 0b             	cmp    ecx,0xb
c0001f09:	75 f5                	jne    c0001f00 <sum_sfn+0x4>
c0001f0b:	88 d0                	mov    al,dl
c0001f0d:	c3                   	ret    

c0001f0e <xdir_sum>:
c0001f0e:	56                   	push   esi
c0001f0f:	31 c9                	xor    ecx,ecx
c0001f11:	53                   	push   ebx
c0001f12:	31 d2                	xor    edx,edx
c0001f14:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f18:	43                   	inc    ebx
c0001f19:	c1 e3 05             	shl    ebx,0x5
c0001f1c:	83 fa 02             	cmp    edx,0x2
c0001f1f:	74 0b                	je     c0001f2c <xdir_sum+0x1e>
c0001f21:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f25:	66 d1 c9             	ror    cx,1
c0001f28:	01 f1                	add    ecx,esi
c0001f2a:	eb 05                	jmp    c0001f31 <xdir_sum+0x23>
c0001f2c:	ba 03 00 00 00       	mov    edx,0x3
c0001f31:	42                   	inc    edx
c0001f32:	39 d3                	cmp    ebx,edx
c0001f34:	77 e6                	ja     c0001f1c <xdir_sum+0xe>
c0001f36:	5b                   	pop    ebx
c0001f37:	89 c8                	mov    eax,ecx
c0001f39:	5e                   	pop    esi
c0001f3a:	c3                   	ret    

c0001f3b <xsum32>:
c0001f3b:	d1 ca                	ror    edx,1
c0001f3d:	0f b6 c0             	movzx  eax,al
c0001f40:	01 d0                	add    eax,edx
c0001f42:	c3                   	ret    

c0001f43 <get_xfileinfo>:
c0001f43:	55                   	push   ebp
c0001f44:	31 c9                	xor    ecx,ecx
c0001f46:	57                   	push   edi
c0001f47:	bd 40 00 00 00       	mov    ebp,0x40
c0001f4c:	56                   	push   esi
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	53                   	push   ebx
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	83 ec 0c             	sub    esp,0xc
c0001f55:	89 d3                	mov    ebx,edx
c0001f57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f5e:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f62:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f65:	76 6d                	jbe    c0001fd4 <get_xfileinfo+0x91>
c0001f67:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f6d:	76 0b                	jbe    c0001f7a <get_xfileinfo+0x37>
c0001f6f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f73:	bf 01 00 00 00       	mov    edi,0x1
c0001f78:	eb 63                	jmp    c0001fdd <get_xfileinfo+0x9a>
c0001f7a:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f80:	75 03                	jne    c0001f85 <get_xfileinfo+0x42>
c0001f82:	83 c5 02             	add    ebp,0x2
c0001f85:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f88:	83 c5 02             	add    ebp,0x2
c0001f8b:	e8 b0 fa ff ff       	call   c0001a40 <ld_word>
c0001f90:	ff 04 24             	inc    DWORD PTR [esp]
c0001f93:	66 85 c9             	test   cx,cx
c0001f96:	75 0d                	jne    c0001fa5 <get_xfileinfo+0x62>
c0001f98:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f9e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa3:	76 2b                	jbe    c0001fd0 <get_xfileinfo+0x8d>
c0001fa5:	c1 e1 10             	shl    ecx,0x10
c0001fa8:	ba ff 00 00 00       	mov    edx,0xff
c0001fad:	29 fa                	sub    edx,edi
c0001faf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	09 c8                	or     eax,ecx
c0001fbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc0:	e8 1b fc ff ff       	call   c0001be0 <put_utf>
c0001fc5:	84 c0                	test   al,al
c0001fc7:	74 a6                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fc9:	0f b6 c0             	movzx  eax,al
c0001fcc:	01 c7                	add    edi,eax
c0001fce:	31 c0                	xor    eax,eax
c0001fd0:	89 c1                	mov    ecx,eax
c0001fd2:	eb 8a                	jmp    c0001f5e <get_xfileinfo+0x1b>
c0001fd4:	85 ff                	test   edi,edi
c0001fd6:	74 97                	je     c0001f6f <get_xfileinfo+0x2c>
c0001fd8:	66 85 c9             	test   cx,cx
c0001fdb:	75 92                	jne    c0001f6f <get_xfileinfo+0x2c>
c0001fdd:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fe6:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fe9:	31 c0                	xor    eax,eax
c0001feb:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fee:	31 d2                	xor    edx,edx
c0001ff0:	80 e1 10             	and    cl,0x10
c0001ff3:	75 08                	jne    c0001ffd <get_xfileinfo+0xba>
c0001ff5:	8d 46 38             	lea    eax,[esi+0x38]
c0001ff8:	e8 68 fa ff ff       	call   c0001a65 <ld_qword>
c0001ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0001fff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002002:	8d 46 0c             	lea    eax,[esi+0xc]
c0002005:	e8 36 fa ff ff       	call   c0001a40 <ld_word>
c000200a:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000200e:	8d 46 0e             	lea    eax,[esi+0xe]
c0002011:	e8 2a fa ff ff       	call   c0001a40 <ld_word>
c0002016:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201a:	83 c4 0c             	add    esp,0xc
c000201d:	5b                   	pop    ebx
c000201e:	5e                   	pop    esi
c000201f:	5f                   	pop    edi
c0002020:	5d                   	pop    ebp
c0002021:	c3                   	ret    

c0002022 <get_ldnumber>:
c0002022:	57                   	push   edi
c0002023:	56                   	push   esi
c0002024:	53                   	push   ebx
c0002025:	83 cb ff             	or     ebx,0xffffffff
c0002028:	8b 10                	mov    edx,DWORD PTR [eax]
c000202a:	85 d2                	test   edx,edx
c000202c:	74 34                	je     c0002062 <get_ldnumber+0x40>
c000202e:	89 c7                	mov    edi,eax
c0002030:	89 d1                	mov    ecx,edx
c0002032:	41                   	inc    ecx
c0002033:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002036:	3c 1f                	cmp    al,0x1f
c0002038:	76 04                	jbe    c000203e <get_ldnumber+0x1c>
c000203a:	3c 3a                	cmp    al,0x3a
c000203c:	75 f4                	jne    c0002032 <get_ldnumber+0x10>
c000203e:	31 db                	xor    ebx,ebx
c0002040:	3c 3a                	cmp    al,0x3a
c0002042:	75 1e                	jne    c0002062 <get_ldnumber+0x40>
c0002044:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002047:	83 cb ff             	or     ebx,0xffffffff
c000204a:	8d 46 d0             	lea    eax,[esi-0x30]
c000204d:	3c 09                	cmp    al,0x9
c000204f:	77 11                	ja     c0002062 <get_ldnumber+0x40>
c0002051:	83 c2 02             	add    edx,0x2
c0002054:	39 d1                	cmp    ecx,edx
c0002056:	75 0a                	jne    c0002062 <get_ldnumber+0x40>
c0002058:	89 f0                	mov    eax,esi
c000205a:	89 0f                	mov    DWORD PTR [edi],ecx
c000205c:	0f be d8             	movsx  ebx,al
c000205f:	83 eb 30             	sub    ebx,0x30
c0002062:	89 d8                	mov    eax,ebx
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	c3                   	ret    

c0002068 <crc32>:
c0002068:	56                   	push   esi
c0002069:	89 d6                	mov    esi,edx
c000206b:	53                   	push   ebx
c000206c:	b2 01                	mov    dl,0x1
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 f1                	mov    ecx,esi
c0002075:	84 d1                	test   cl,dl
c0002077:	0f 95 c1             	setne  cl
c000207a:	0f b6 c9             	movzx  ecx,cl
c000207d:	31 c1                	xor    ecx,eax
c000207f:	89 c8                	mov    eax,ecx
c0002081:	d1 e8                	shr    eax,1
c0002083:	80 e1 01             	and    cl,0x1
c0002086:	74 05                	je     c000208d <crc32+0x25>
c0002088:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000208d:	01 d2                	add    edx,edx
c000208f:	4b                   	dec    ebx
c0002090:	75 e1                	jne    c0002073 <crc32+0xb>
c0002092:	5b                   	pop    ebx
c0002093:	5e                   	pop    esi
c0002094:	c3                   	ret    

c0002095 <test_gpt_header>:
c0002095:	55                   	push   ebp
c0002096:	b9 10 00 00 00       	mov    ecx,0x10
c000209b:	57                   	push   edi
c000209c:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00020a1:	56                   	push   esi
c00020a2:	31 ff                	xor    edi,edi
c00020a4:	53                   	push   ebx
c00020a5:	89 c3                	mov    ebx,eax
c00020a7:	e8 33 fa ff ff       	call   c0001adf <mem_cmp>
c00020ac:	85 c0                	test   eax,eax
c00020ae:	75 55                	jne    c0002105 <test_gpt_header+0x70>
c00020b0:	89 c7                	mov    edi,eax
c00020b2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020b7:	83 ce ff             	or     esi,0xffffffff
c00020ba:	31 d2                	xor    edx,edx
c00020bc:	83 fd 03             	cmp    ebp,0x3
c00020bf:	76 05                	jbe    c00020c6 <test_gpt_header+0x31>
c00020c1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020c6:	89 f0                	mov    eax,esi
c00020c8:	45                   	inc    ebp
c00020c9:	e8 9a ff ff ff       	call   c0002068 <crc32>
c00020ce:	83 fd 4c             	cmp    ebp,0x4c
c00020d1:	89 c6                	mov    esi,eax
c00020d3:	75 e5                	jne    c00020ba <test_gpt_header+0x25>
c00020d5:	8d 43 10             	lea    eax,[ebx+0x10]
c00020d8:	e8 70 f9 ff ff       	call   c0001a4d <ld_dword>
c00020dd:	f7 d6                	not    esi
c00020df:	39 c6                	cmp    esi,eax
c00020e1:	75 22                	jne    c0002105 <test_gpt_header+0x70>
c00020e3:	8d 43 54             	lea    eax,[ebx+0x54]
c00020e6:	e8 62 f9 ff ff       	call   c0001a4d <ld_dword>
c00020eb:	83 c0 80             	add    eax,0xffffff80
c00020ee:	75 15                	jne    c0002105 <test_gpt_header+0x70>
c00020f0:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f3:	e8 55 f9 ff ff       	call   c0001a4d <ld_dword>
c00020f8:	3d 80 00 00 00       	cmp    eax,0x80
c00020fd:	0f 96 c0             	setbe  al
c0002100:	0f b6 c0             	movzx  eax,al
c0002103:	89 c7                	mov    edi,eax
c0002105:	5b                   	pop    ebx
c0002106:	89 f8                	mov    eax,edi
c0002108:	5e                   	pop    esi
c0002109:	5f                   	pop    edi
c000210a:	5d                   	pop    ebp
c000210b:	c3                   	ret    

c000210c <make_rand>:
c000210c:	56                   	push   esi
c000210d:	85 c0                	test   eax,eax
c000210f:	53                   	push   ebx
c0002110:	75 05                	jne    c0002117 <make_rand+0xb>
c0002112:	b8 01 00 00 00       	mov    eax,0x1
c0002117:	01 d1                	add    ecx,edx
c0002119:	bb 08 00 00 00       	mov    ebx,0x8
c000211e:	89 c6                	mov    esi,eax
c0002120:	d1 e8                	shr    eax,1
c0002122:	83 e6 01             	and    esi,0x1
c0002125:	85 f6                	test   esi,esi
c0002127:	74 05                	je     c000212e <make_rand+0x22>
c0002129:	35 00 00 00 a3       	xor    eax,0xa3000000
c000212e:	4b                   	dec    ebx
c000212f:	75 ed                	jne    c000211e <make_rand+0x12>
c0002131:	42                   	inc    edx
c0002132:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002135:	39 ca                	cmp    edx,ecx
c0002137:	75 e0                	jne    c0002119 <make_rand+0xd>
c0002139:	5b                   	pop    ebx
c000213a:	5e                   	pop    esi
c000213b:	c3                   	ret    

c000213c <validate>:
c000213c:	56                   	push   esi
c000213d:	89 d6                	mov    esi,edx
c000213f:	53                   	push   ebx
c0002140:	85 c0                	test   eax,eax
c0002142:	51                   	push   ecx
c0002143:	75 09                	jne    c000214e <validate+0x12>
c0002145:	b8 09 00 00 00       	mov    eax,0x9
c000214a:	31 c9                	xor    ecx,ecx
c000214c:	eb 2f                	jmp    c000217d <validate+0x41>
c000214e:	89 c3                	mov    ebx,eax
c0002150:	8b 00                	mov    eax,DWORD PTR [eax]
c0002152:	85 c0                	test   eax,eax
c0002154:	74 ef                	je     c0002145 <validate+0x9>
c0002156:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002159:	74 ea                	je     c0002145 <validate+0x9>
c000215b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000215f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002163:	75 e0                	jne    c0002145 <validate+0x9>
c0002165:	83 ec 0c             	sub    esp,0xc
c0002168:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000216c:	50                   	push   eax
c000216d:	e8 7d f8 ff ff       	call   c00019ef <disk_status>
c0002172:	83 c4 10             	add    esp,0x10
c0002175:	a8 01                	test   al,0x1
c0002177:	75 cc                	jne    c0002145 <validate+0x9>
c0002179:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000217b:	31 c0                	xor    eax,eax
c000217d:	89 0e                	mov    DWORD PTR [esi],ecx
c000217f:	5a                   	pop    edx
c0002180:	5b                   	pop    ebx
c0002181:	5e                   	pop    esi
c0002182:	c3                   	ret    

c0002183 <sync_window>:
c0002183:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002187:	0f 84 85 00 00 00    	je     c0002212 <sync_window+0x8f>
c000218d:	55                   	push   ebp
c000218e:	8d 68 54             	lea    ebp,[eax+0x54]
c0002191:	57                   	push   edi
c0002192:	56                   	push   esi
c0002193:	53                   	push   ebx
c0002194:	89 c3                	mov    ebx,eax
c0002196:	83 ec 28             	sub    esp,0x28
c0002199:	6a 01                	push   0x1
c000219b:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000219e:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a1:	55                   	push   ebp
c00021a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021a6:	50                   	push   eax
c00021a7:	e8 5f f8 ff ff       	call   c0001a0b <disk_write>
c00021ac:	83 c4 20             	add    esp,0x20
c00021af:	ba 01 00 00 00       	mov    edx,0x1
c00021b4:	85 c0                	test   eax,eax
c00021b6:	75 50                	jne    c0002208 <sync_window+0x85>
c00021b8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021bb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021be:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c2:	89 c6                	mov    esi,eax
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021c9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021cc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d0:	89 d7                	mov    edi,edx
c00021d2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021d6:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021d9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021dd:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e1:	73 23                	jae    c0002206 <sync_window+0x83>
c00021e3:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021e7:	75 1d                	jne    c0002206 <sync_window+0x83>
c00021e9:	83 ec 0c             	sub    esp,0xc
c00021ec:	6a 01                	push   0x1
c00021ee:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021f6:	52                   	push   edx
c00021f7:	50                   	push   eax
c00021f8:	55                   	push   ebp
c00021f9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021fd:	50                   	push   eax
c00021fe:	e8 08 f8 ff ff       	call   c0001a0b <disk_write>
c0002203:	83 c4 20             	add    esp,0x20
c0002206:	31 d2                	xor    edx,edx
c0002208:	83 c4 1c             	add    esp,0x1c
c000220b:	89 d0                	mov    eax,edx
c000220d:	5b                   	pop    ebx
c000220e:	5e                   	pop    esi
c000220f:	5f                   	pop    edi
c0002210:	5d                   	pop    ebp
c0002211:	c3                   	ret    
c0002212:	31 d2                	xor    edx,edx
c0002214:	89 d0                	mov    eax,edx
c0002216:	c3                   	ret    

c0002217 <move_window>:
c0002217:	56                   	push   esi
c0002218:	53                   	push   ebx
c0002219:	89 c3                	mov    ebx,eax
c000221b:	83 ec 14             	sub    esp,0x14
c000221e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002221:	75 07                	jne    c000222a <move_window+0x13>
c0002223:	31 f6                	xor    esi,esi
c0002225:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002228:	74 59                	je     c0002283 <move_window+0x6c>
c000222a:	89 d8                	mov    eax,ebx
c000222c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002230:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002234:	e8 4a ff ff ff       	call   c0002183 <sync_window>
c0002239:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000223d:	89 c6                	mov    esi,eax
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002245:	75 3c                	jne    c0002283 <move_window+0x6c>
c0002247:	83 ec 0c             	sub    esp,0xc
c000224a:	8d 43 54             	lea    eax,[ebx+0x54]
c000224d:	6a 01                	push   0x1
c000224f:	51                   	push   ecx
c0002250:	52                   	push   edx
c0002251:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002255:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002259:	50                   	push   eax
c000225a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000225e:	50                   	push   eax
c000225f:	e8 91 f7 ff ff       	call   c00019f5 <disk_read>
c0002264:	83 c4 20             	add    esp,0x20
c0002267:	85 c0                	test   eax,eax
c0002269:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000226d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002271:	74 0a                	je     c000227d <move_window+0x66>
c0002273:	83 ca ff             	or     edx,0xffffffff
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	89 d1                	mov    ecx,edx
c000227d:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002280:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002283:	83 c4 14             	add    esp,0x14
c0002286:	89 f0                	mov    eax,esi
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	c3                   	ret    

c000228b <check_fs>:
c000228b:	53                   	push   ebx
c000228c:	89 c3                	mov    ebx,eax
c000228e:	83 ec 08             	sub    esp,0x8
c0002291:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002295:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000229c:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a3:	e8 6f ff ff ff       	call   c0002217 <move_window>
c00022a8:	ba 04 00 00 00       	mov    edx,0x4
c00022ad:	85 c0                	test   eax,eax
c00022af:	0f 85 89 00 00 00    	jne    c000233e <check_fs+0xb3>
c00022b5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022bb:	e8 80 f7 ff ff       	call   c0001a40 <ld_word>
c00022c0:	ba 03 00 00 00       	mov    edx,0x3
c00022c5:	66 3d 55 aa          	cmp    ax,0xaa55
c00022c9:	75 73                	jne    c000233e <check_fs+0xb3>
c00022cb:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00022d0:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00022d8:	e8 02 f8 ff ff       	call   c0001adf <mem_cmp>
c00022dd:	ba 01 00 00 00       	mov    edx,0x1
c00022e2:	85 c0                	test   eax,eax
c00022e4:	74 58                	je     c000233e <check_fs+0xb3>
c00022e6:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022e9:	8d 50 18             	lea    edx,[eax+0x18]
c00022ec:	80 fa 01             	cmp    dl,0x1
c00022ef:	76 09                	jbe    c00022fa <check_fs+0x6f>
c00022f1:	ba 02 00 00 00       	mov    edx,0x2
c00022f6:	3c eb                	cmp    al,0xeb
c00022f8:	75 44                	jne    c000233e <check_fs+0xb3>
c00022fa:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c00022ff:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002305:	b9 03 00 00 00       	mov    ecx,0x3
c000230a:	e8 d0 f7 ff ff       	call   c0001adf <mem_cmp>
c000230f:	31 d2                	xor    edx,edx
c0002311:	85 c0                	test   eax,eax
c0002313:	74 29                	je     c000233e <check_fs+0xb3>
c0002315:	ba 4c 05 02 c0       	mov    edx,0xc002054c
c000231a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002320:	b9 05 00 00 00       	mov    ecx,0x5
c0002325:	e8 b5 f7 ff ff       	call   c0001adf <mem_cmp>
c000232a:	31 d2                	xor    edx,edx
c000232c:	85 c0                	test   eax,eax
c000232e:	74 0e                	je     c000233e <check_fs+0xb3>
c0002330:	31 d2                	xor    edx,edx
c0002332:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002339:	0f 95 c2             	setne  dl
c000233c:	01 d2                	add    edx,edx
c000233e:	83 c4 08             	add    esp,0x8
c0002341:	89 d0                	mov    eax,edx
c0002343:	5b                   	pop    ebx
c0002344:	c3                   	ret    

c0002345 <find_volume>:
c0002345:	55                   	push   ebp
c0002346:	31 c9                	xor    ecx,ecx
c0002348:	57                   	push   edi
c0002349:	56                   	push   esi
c000234a:	89 d6                	mov    esi,edx
c000234c:	53                   	push   ebx
c000234d:	31 d2                	xor    edx,edx
c000234f:	83 ec 3c             	sub    esp,0x3c
c0002352:	89 c3                	mov    ebx,eax
c0002354:	e8 32 ff ff ff       	call   c000228b <check_fs>
c0002359:	83 f8 02             	cmp    eax,0x2
c000235c:	74 0e                	je     c000236c <find_volume+0x27>
c000235e:	0f 87 56 01 00 00    	ja     c00024ba <find_volume+0x175>
c0002364:	85 f6                	test   esi,esi
c0002366:	0f 84 4e 01 00 00    	je     c00024ba <find_volume+0x175>
c000236c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002373:	0f 85 df 00 00 00    	jne    c0002458 <find_volume+0x113>
c0002379:	31 c9                	xor    ecx,ecx
c000237b:	ba 01 00 00 00       	mov    edx,0x1
c0002380:	89 d8                	mov    eax,ebx
c0002382:	e8 90 fe ff ff       	call   c0002217 <move_window>
c0002387:	85 c0                	test   eax,eax
c0002389:	74 0a                	je     c0002395 <find_volume+0x50>
c000238b:	b8 04 00 00 00       	mov    eax,0x4
c0002390:	e9 25 01 00 00       	jmp    c00024ba <find_volume+0x175>
c0002395:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002398:	89 e8                	mov    eax,ebp
c000239a:	e8 f6 fc ff ff       	call   c0002095 <test_gpt_header>
c000239f:	85 c0                	test   eax,eax
c00023a1:	75 0a                	jne    c00023ad <find_volume+0x68>
c00023a3:	b8 03 00 00 00       	mov    eax,0x3
c00023a8:	e9 0d 01 00 00       	jmp    c00024ba <find_volume+0x175>
c00023ad:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b3:	e8 95 f6 ff ff       	call   c0001a4d <ld_dword>
c00023b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023bc:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c2:	e8 9e f6 ff ff       	call   c0001a65 <ld_qword>
c00023c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e3:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023e7:	74 ba                	je     c00023a3 <find_volume+0x5e>
c00023e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023ed:	31 c9                	xor    ecx,ecx
c00023ef:	c1 e7 07             	shl    edi,0x7
c00023f2:	89 d8                	mov    eax,ebx
c00023f4:	89 fa                	mov    edx,edi
c00023f6:	c1 ea 09             	shr    edx,0x9
c00023f9:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023fd:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002401:	e8 11 fe ff ff       	call   c0002217 <move_window>
c0002406:	85 c0                	test   eax,eax
c0002408:	75 81                	jne    c000238b <find_volume+0x46>
c000240a:	81 e7 80 01 00 00    	and    edi,0x180
c0002410:	b9 10 00 00 00       	mov    ecx,0x10
c0002415:	ba 30 05 02 c0       	mov    edx,0xc0020530
c000241a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000241e:	e8 bc f6 ff ff       	call   c0001adf <mem_cmp>
c0002423:	85 c0                	test   eax,eax
c0002425:	75 2b                	jne    c0002452 <find_volume+0x10d>
c0002427:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000242b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000242f:	e8 31 f6 ff ff       	call   c0001a65 <ld_qword>
c0002434:	89 d1                	mov    ecx,edx
c0002436:	89 c2                	mov    edx,eax
c0002438:	89 d8                	mov    eax,ebx
c000243a:	e8 4c fe ff ff       	call   c000228b <check_fs>
c000243f:	85 f6                	test   esi,esi
c0002441:	75 05                	jne    c0002448 <find_volume+0x103>
c0002443:	83 f8 01             	cmp    eax,0x1
c0002446:	76 72                	jbe    c00024ba <find_volume+0x175>
c0002448:	85 f6                	test   esi,esi
c000244a:	74 06                	je     c0002452 <find_volume+0x10d>
c000244c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002450:	74 68                	je     c00024ba <find_volume+0x175>
c0002452:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002456:	eb 87                	jmp    c00023df <find_volume+0x9a>
c0002458:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000245c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002462:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000246c:	89 cd                	mov    ebp,ecx
c000246e:	89 f8                	mov    eax,edi
c0002470:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002474:	e8 d4 f5 ff ff       	call   c0001a4d <ld_dword>
c0002479:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000247d:	83 c7 10             	add    edi,0x10
c0002480:	83 c1 04             	add    ecx,0x4
c0002483:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002486:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248a:	75 e2                	jne    c000246e <find_volume+0x129>
c000248c:	31 ff                	xor    edi,edi
c000248e:	85 f6                	test   esi,esi
c0002490:	74 03                	je     c0002495 <find_volume+0x150>
c0002492:	8d 7e ff             	lea    edi,[esi-0x1]
c0002495:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002499:	b8 03 00 00 00       	mov    eax,0x3
c000249e:	85 d2                	test   edx,edx
c00024a0:	74 09                	je     c00024ab <find_volume+0x166>
c00024a2:	31 c9                	xor    ecx,ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 e0 fd ff ff       	call   c000228b <check_fs>
c00024ab:	85 f6                	test   esi,esi
c00024ad:	75 0b                	jne    c00024ba <find_volume+0x175>
c00024af:	83 f8 01             	cmp    eax,0x1
c00024b2:	76 06                	jbe    c00024ba <find_volume+0x175>
c00024b4:	47                   	inc    edi
c00024b5:	83 ff 03             	cmp    edi,0x3
c00024b8:	76 db                	jbe    c0002495 <find_volume+0x150>
c00024ba:	83 c4 3c             	add    esp,0x3c
c00024bd:	5b                   	pop    ebx
c00024be:	5e                   	pop    esi
c00024bf:	5f                   	pop    edi
c00024c0:	5d                   	pop    ebp
c00024c1:	c3                   	ret    

c00024c2 <mount_volume>:
c00024c2:	55                   	push   ebp
c00024c3:	57                   	push   edi
c00024c4:	89 cf                	mov    edi,ecx
c00024c6:	56                   	push   esi
c00024c7:	53                   	push   ebx
c00024c8:	bb 0b 00 00 00       	mov    ebx,0xb
c00024cd:	83 ec 3c             	sub    esp,0x3c
c00024d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024da:	e8 43 fb ff ff       	call   c0002022 <get_ldnumber>
c00024df:	85 c0                	test   eax,eax
c00024e1:	0f 88 3b 05 00 00    	js     c0002a22 <mount_volume+0x560>
c00024e7:	8b 2c 85 20 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8e0]
c00024ee:	89 c6                	mov    esi,eax
c00024f0:	bb 0c 00 00 00       	mov    ebx,0xc
c00024f5:	85 ed                	test   ebp,ebp
c00024f7:	0f 84 25 05 00 00    	je     c0002a22 <mount_volume+0x560>
c00024fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002501:	83 e7 fe             	and    edi,0xfffffffe
c0002504:	89 2a                	mov    DWORD PTR [edx],ebp
c0002506:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250a:	74 32                	je     c000253e <mount_volume+0x7c>
c000250c:	83 ec 0c             	sub    esp,0xc
c000250f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002513:	50                   	push   eax
c0002514:	e8 d6 f4 ff ff       	call   c00019ef <disk_status>
c0002519:	83 c4 10             	add    esp,0x10
c000251c:	a8 01                	test   al,0x1
c000251e:	75 1e                	jne    c000253e <mount_volume+0x7c>
c0002520:	89 f9                	mov    ecx,edi
c0002522:	31 db                	xor    ebx,ebx
c0002524:	84 c9                	test   cl,cl
c0002526:	0f 84 f6 04 00 00    	je     c0002a22 <mount_volume+0x560>
c000252c:	a8 04                	test   al,0x4
c000252e:	0f 84 ee 04 00 00    	je     c0002a22 <mount_volume+0x560>
c0002534:	bb 0a 00 00 00       	mov    ebx,0xa
c0002539:	e9 e4 04 00 00       	jmp    c0002a22 <mount_volume+0x560>
c000253e:	83 ec 0c             	sub    esp,0xc
c0002541:	89 f0                	mov    eax,esi
c0002543:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002547:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254a:	0f b6 f0             	movzx  esi,al
c000254d:	56                   	push   esi
c000254e:	e8 9f f4 ff ff       	call   c00019f2 <disk_initialize>
c0002553:	bb 03 00 00 00       	mov    ebx,0x3
c0002558:	83 c4 10             	add    esp,0x10
c000255b:	a8 01                	test   al,0x1
c000255d:	0f 85 bf 04 00 00    	jne    c0002a22 <mount_volume+0x560>
c0002563:	89 f9                	mov    ecx,edi
c0002565:	84 c9                	test   cl,cl
c0002567:	74 04                	je     c000256d <mount_volume+0xab>
c0002569:	a8 04                	test   al,0x4
c000256b:	75 c7                	jne    c0002534 <mount_volume+0x72>
c000256d:	31 d2                	xor    edx,edx
c000256f:	89 e8                	mov    eax,ebp
c0002571:	e8 cf fd ff ff       	call   c0002345 <find_volume>
c0002576:	83 f8 04             	cmp    eax,0x4
c0002579:	75 0a                	jne    c0002585 <mount_volume+0xc3>
c000257b:	bb 01 00 00 00       	mov    ebx,0x1
c0002580:	e9 9d 04 00 00       	jmp    c0002a22 <mount_volume+0x560>
c0002585:	83 f8 01             	cmp    eax,0x1
c0002588:	76 0a                	jbe    c0002594 <mount_volume+0xd2>
c000258a:	bb 0d 00 00 00       	mov    ebx,0xd
c000258f:	e9 8e 04 00 00       	jmp    c0002a22 <mount_volume+0x560>
c0002594:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002597:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000259e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a2:	75 17                	jne    c00025bb <mount_volume+0xf9>
c00025a4:	b8 0b 00 00 00       	mov    eax,0xb
c00025a9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ae:	75 da                	jne    c000258a <mount_volume+0xc8>
c00025b0:	40                   	inc    eax
c00025b1:	83 f8 40             	cmp    eax,0x40
c00025b4:	75 f3                	jne    c00025a9 <mount_volume+0xe7>
c00025b6:	e9 5a 02 00 00       	jmp    c0002815 <mount_volume+0x353>
c00025bb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025be:	e8 7d f4 ff ff       	call   c0001a40 <ld_word>
c00025c3:	66 3d 00 02          	cmp    ax,0x200
c00025c7:	75 c1                	jne    c000258a <mount_volume+0xc8>
c00025c9:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025cc:	e8 6f f4 ff ff       	call   c0001a40 <ld_word>
c00025d1:	0f b7 c0             	movzx  eax,ax
c00025d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025d8:	85 c0                	test   eax,eax
c00025da:	75 0c                	jne    c00025e8 <mount_volume+0x126>
c00025dc:	8d 45 78             	lea    eax,[ebp+0x78]
c00025df:	e8 69 f4 ff ff       	call   c0001a4d <ld_dword>
c00025e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025ec:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ef:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025f6:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025f9:	48                   	dec    eax
c00025fa:	3c 01                	cmp    al,0x1
c00025fc:	77 8c                	ja     c000258a <mount_volume+0xc8>
c00025fe:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002602:	89 c3                	mov    ebx,eax
c0002604:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002608:	66 85 c0             	test   ax,ax
c000260b:	0f 84 79 ff ff ff    	je     c000258a <mount_volume+0xc8>
c0002611:	8d 40 ff             	lea    eax,[eax-0x1]
c0002614:	85 d8                	test   eax,ebx
c0002616:	0f 85 6e ff ff ff    	jne    c000258a <mount_volume+0xc8>
c000261c:	8d 45 65             	lea    eax,[ebp+0x65]
c000261f:	e8 1c f4 ff ff       	call   c0001a40 <ld_word>
c0002624:	89 c7                	mov    edi,eax
c0002626:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262a:	a8 0f                	test   al,0xf
c000262c:	0f 85 58 ff ff ff    	jne    c000258a <mount_volume+0xc8>
c0002632:	8d 45 67             	lea    eax,[ebp+0x67]
c0002635:	e8 06 f4 ff ff       	call   c0001a40 <ld_word>
c000263a:	0f b7 f0             	movzx  esi,ax
c000263d:	85 f6                	test   esi,esi
c000263f:	75 0a                	jne    c000264b <mount_volume+0x189>
c0002641:	8d 45 74             	lea    eax,[ebp+0x74]
c0002644:	e8 04 f4 ff ff       	call   c0001a4d <ld_dword>
c0002649:	89 c6                	mov    esi,eax
c000264b:	8d 45 62             	lea    eax,[ebp+0x62]
c000264e:	e8 ed f3 ff ff       	call   c0001a40 <ld_word>
c0002653:	66 85 c0             	test   ax,ax
c0002656:	0f 84 2e ff ff ff    	je     c000258a <mount_volume+0xc8>
c000265c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002661:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002666:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266a:	89 fa                	mov    edx,edi
c000266c:	66 c1 ea 04          	shr    dx,0x4
c0002670:	0f b7 d2             	movzx  edx,dx
c0002673:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002677:	0f b7 c8             	movzx  ecx,ax
c000267a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000267d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002681:	39 c6                	cmp    esi,eax
c0002683:	0f 82 01 ff ff ff    	jb     c000258a <mount_volume+0xc8>
c0002689:	29 c6                	sub    esi,eax
c000268b:	31 d2                	xor    edx,edx
c000268d:	89 f0                	mov    eax,esi
c000268f:	f7 f3                	div    ebx
c0002691:	39 de                	cmp    esi,ebx
c0002693:	0f 82 f1 fe ff ff    	jb     c000258a <mount_volume+0xc8>
c0002699:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000269e:	0f 87 e6 fe ff ff    	ja     c000258a <mount_volume+0xc8>
c00026a4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026a9:	0f 86 63 03 00 00    	jbe    c0002a12 <mount_volume+0x550>
c00026af:	bb 03 00 00 00       	mov    ebx,0x3
c00026b4:	8d 70 02             	lea    esi,[eax+0x2]
c00026b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026bf:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c2:	89 c8                	mov    eax,ecx
c00026c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026c7:	31 d2                	xor    edx,edx
c00026c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026d5:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e3:	31 d2                	xor    edx,edx
c00026e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ed:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f0:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f3:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026f6:	83 fb 03             	cmp    ebx,0x3
c00026f9:	75 2b                	jne    c0002726 <mount_volume+0x264>
c00026fb:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026fe:	e8 3d f3 ff ff       	call   c0001a40 <ld_word>
c0002703:	66 09 c7             	or     di,ax
c0002706:	0f 85 7e fe ff ff    	jne    c000258a <mount_volume+0xc8>
c000270c:	c1 e6 02             	shl    esi,0x2
c000270f:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002715:	e8 33 f3 ff ff       	call   c0001a4d <ld_dword>
c000271a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002721:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002724:	eb 30                	jmp    c0002756 <mount_volume+0x294>
c0002726:	66 85 ff             	test   di,di
c0002729:	0f 84 5b fe ff ff    	je     c000258a <mount_volume+0xc8>
c000272f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002733:	31 d2                	xor    edx,edx
c0002735:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002739:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000273d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002740:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002743:	83 fb 02             	cmp    ebx,0x2
c0002746:	75 04                	jne    c000274c <mount_volume+0x28a>
c0002748:	01 f6                	add    esi,esi
c000274a:	eb 0a                	jmp    c0002756 <mount_volume+0x294>
c000274c:	8d 04 76             	lea    eax,[esi+esi*2]
c000274f:	83 e6 01             	and    esi,0x1
c0002752:	d1 e8                	shr    eax,1
c0002754:	01 c6                	add    esi,eax
c0002756:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000275c:	c1 ee 09             	shr    esi,0x9
c000275f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002763:	0f 87 21 fe ff ff    	ja     c000258a <mount_volume+0xc8>
c0002769:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002770:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002777:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000277b:	83 fb 03             	cmp    ebx,0x3
c000277e:	75 7a                	jne    c00027fa <mount_volume+0x338>
c0002780:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002786:	e8 b5 f2 ff ff       	call   c0001a40 <ld_word>
c000278b:	66 48                	dec    ax
c000278d:	75 6b                	jne    c00027fa <mount_volume+0x338>
c000278f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002793:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002797:	83 c2 01             	add    edx,0x1
c000279a:	89 e8                	mov    eax,ebp
c000279c:	83 d1 00             	adc    ecx,0x0
c000279f:	e8 73 fa ff ff       	call   c0002217 <move_window>
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 52                	jne    c00027fa <mount_volume+0x338>
c00027a8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ac:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b2:	e8 89 f2 ff ff       	call   c0001a40 <ld_word>
c00027b7:	66 3d 55 aa          	cmp    ax,0xaa55
c00027bb:	75 3d                	jne    c00027fa <mount_volume+0x338>
c00027bd:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c0:	e8 88 f2 ff ff       	call   c0001a4d <ld_dword>
c00027c5:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027ca:	75 2e                	jne    c00027fa <mount_volume+0x338>
c00027cc:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d2:	e8 76 f2 ff ff       	call   c0001a4d <ld_dword>
c00027d7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027dc:	75 1c                	jne    c00027fa <mount_volume+0x338>
c00027de:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e4:	e8 64 f2 ff ff       	call   c0001a4d <ld_dword>
c00027e9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027ec:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f2:	e8 56 f2 ff ff       	call   c0001a4d <ld_dword>
c00027f7:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027fa:	66 a1 00 47 02 c0    	mov    ax,ds:0xc0024700
c0002800:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002803:	40                   	inc    eax
c0002804:	31 db                	xor    ebx,ebx
c0002806:	66 a3 00 47 02 c0    	mov    ds:0xc0024700,ax
c000280c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002810:	e9 0d 02 00 00       	jmp    c0002a22 <mount_volume+0x560>
c0002815:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000281b:	e8 20 f2 ff ff       	call   c0001a40 <ld_word>
c0002820:	66 3d 00 01          	cmp    ax,0x100
c0002824:	0f 85 60 fd ff ff    	jne    c000258a <mount_volume+0xc8>
c000282a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002831:	0f 85 53 fd ff ff    	jne    c000258a <mount_volume+0xc8>
c0002837:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000283d:	e8 23 f2 ff ff       	call   c0001a65 <ld_qword>
c0002842:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002846:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000284c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002850:	e8 f8 f1 ff ff       	call   c0001a4d <ld_dword>
c0002855:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002858:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000285e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002861:	fe c8                	dec    al
c0002863:	0f 85 21 fd ff ff    	jne    c000258a <mount_volume+0xc8>
c0002869:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002870:	bb 01 00 00 00       	mov    ebx,0x1
c0002875:	d3 e3                	shl    ebx,cl
c0002877:	66 85 db             	test   bx,bx
c000287a:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000287e:	0f 84 06 fd ff ff    	je     c000258a <mount_volume+0xc8>
c0002884:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288a:	e8 be f1 ff ff       	call   c0001a4d <ld_dword>
c000288f:	89 c6                	mov    esi,eax
c0002891:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002896:	0f 87 ee fc ff ff    	ja     c000258a <mount_volume+0xc8>
c000289c:	8d 40 02             	lea    eax,[eax+0x2]
c000289f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028aa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ad:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028b6:	e8 92 f1 ff ff       	call   c0001a4d <ld_dword>
c00028bb:	31 d2                	xor    edx,edx
c00028bd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028c9:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028cc:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028cf:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028d9:	e8 6f f1 ff ff       	call   c0001a4d <ld_dword>
c00028de:	31 d2                	xor    edx,edx
c00028e0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ec:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ef:	0f b7 c3             	movzx  eax,bx
c00028f2:	0f af f0             	imul   esi,eax
c00028f5:	89 f0                	mov    eax,esi
c00028f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028fa:	31 d2                	xor    edx,edx
c00028fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002900:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002904:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000290c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002910:	39 c1                	cmp    ecx,eax
c0002912:	89 df                	mov    edi,ebx
c0002914:	19 d7                	sbb    edi,edx
c0002916:	0f 82 6e fc ff ff    	jb     c000258a <mount_volume+0xc8>
c000291c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002922:	31 db                	xor    ebx,ebx
c0002924:	e8 24 f1 ff ff       	call   c0001a4d <ld_dword>
c0002929:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002930:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002933:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000293b:	85 db                	test   ebx,ebx
c000293d:	75 39                	jne    c0002978 <mount_volume+0x4b6>
c000293f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002943:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002947:	0f 86 3d fc ff ff    	jbe    c000258a <mount_volume+0xc8>
c000294d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002950:	89 e8                	mov    eax,ebp
c0002952:	e8 82 f3 ff ff       	call   c0001cd9 <clst2sect>
c0002957:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000295b:	31 ff                	xor    edi,edi
c000295d:	01 c6                	add    esi,eax
c000295f:	11 d7                	adc    edi,edx
c0002961:	89 e8                	mov    eax,ebp
c0002963:	89 f2                	mov    edx,esi
c0002965:	89 f9                	mov    ecx,edi
c0002967:	e8 ab f8 ff ff       	call   c0002217 <move_window>
c000296c:	85 c0                	test   eax,eax
c000296e:	0f 85 07 fc ff ff    	jne    c000257b <mount_volume+0xb9>
c0002974:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002978:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000297d:	74 0b                	je     c000298a <mount_volume+0x4c8>
c000297f:	83 c3 20             	add    ebx,0x20
c0002982:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002988:	eb b1                	jmp    c000293b <mount_volume+0x479>
c000298a:	8d 75 54             	lea    esi,[ebp+0x54]
c000298d:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002991:	e8 b7 f0 ff ff       	call   c0001a4d <ld_dword>
c0002996:	89 c3                	mov    ebx,eax
c0002998:	83 f8 01             	cmp    eax,0x1
c000299b:	0f 86 e9 fb ff ff    	jbe    c000258a <mount_volume+0xc8>
c00029a1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a4:	0f 86 e0 fb ff ff    	jbe    c000258a <mount_volume+0xc8>
c00029aa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029ae:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b1:	0f af c2             	imul   eax,edx
c00029b4:	31 d2                	xor    edx,edx
c00029b6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029b9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029bc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029bf:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c2:	89 da                	mov    edx,ebx
c00029c4:	31 c9                	xor    ecx,ecx
c00029c6:	c1 ea 07             	shr    edx,0x7
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ce:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d1:	e8 41 f8 ff ff       	call   c0002217 <move_window>
c00029d6:	85 c0                	test   eax,eax
c00029d8:	0f 85 9d fb ff ff    	jne    c000257b <mount_volume+0xb9>
c00029de:	89 d8                	mov    eax,ebx
c00029e0:	83 e0 7f             	and    eax,0x7f
c00029e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00029e6:	e8 62 f0 ff ff       	call   c0001a4d <ld_dword>
c00029eb:	83 f8 ff             	cmp    eax,0xffffffff
c00029ee:	74 0a                	je     c00029fa <mount_volume+0x538>
c00029f0:	43                   	inc    ebx
c00029f1:	39 d8                	cmp    eax,ebx
c00029f3:	74 cd                	je     c00029c2 <mount_volume+0x500>
c00029f5:	e9 90 fb ff ff       	jmp    c000258a <mount_volume+0xc8>
c00029fa:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a01:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a08:	bb 04 00 00 00       	mov    ebx,0x4
c0002a0d:	e9 e8 fd ff ff       	jmp    c00027fa <mount_volume+0x338>
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a19:	0f 97 c3             	seta   bl
c0002a1c:	43                   	inc    ebx
c0002a1d:	e9 92 fc ff ff       	jmp    c00026b4 <mount_volume+0x1f2>
c0002a22:	83 c4 3c             	add    esp,0x3c
c0002a25:	89 d8                	mov    eax,ebx
c0002a27:	5b                   	pop    ebx
c0002a28:	5e                   	pop    esi
c0002a29:	5f                   	pop    edi
c0002a2a:	5d                   	pop    ebp
c0002a2b:	c3                   	ret    

c0002a2c <find_bitmap>:
c0002a2c:	55                   	push   ebp
c0002a2d:	57                   	push   edi
c0002a2e:	89 c7                	mov    edi,eax
c0002a30:	56                   	push   esi
c0002a31:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a34:	53                   	push   ebx
c0002a35:	83 ec 1c             	sub    esp,0x1c
c0002a38:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a3b:	83 e8 02             	sub    eax,0x2
c0002a3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a42:	39 f0                	cmp    eax,esi
c0002a44:	77 02                	ja     c0002a48 <find_bitmap+0x1c>
c0002a46:	31 f6                	xor    esi,esi
c0002a48:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a4c:	89 f3                	mov    ebx,esi
c0002a4e:	31 ed                	xor    ebp,ebp
c0002a50:	89 da                	mov    edx,ebx
c0002a52:	31 c9                	xor    ecx,ecx
c0002a54:	c1 ea 0c             	shr    edx,0xc
c0002a57:	89 f8                	mov    eax,edi
c0002a59:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a5c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a5f:	e8 b3 f7 ff ff       	call   c0002217 <move_window>
c0002a64:	85 c0                	test   eax,eax
c0002a66:	75 68                	jne    c0002ad0 <find_bitmap+0xa4>
c0002a68:	89 d9                	mov    ecx,ebx
c0002a6a:	b8 01 00 00 00       	mov    eax,0x1
c0002a6f:	83 e1 07             	and    ecx,0x7
c0002a72:	89 da                	mov    edx,ebx
c0002a74:	d3 e0                	shl    eax,cl
c0002a76:	c1 ea 03             	shr    edx,0x3
c0002a79:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a7c:	83 e9 02             	sub    ecx,0x2
c0002a7f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a89:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a8d:	43                   	inc    ebx
c0002a8e:	21 c1                	and    ecx,eax
c0002a90:	01 c0                	add    eax,eax
c0002a92:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a96:	77 09                	ja     c0002aa1 <find_bitmap+0x75>
c0002a98:	31 db                	xor    ebx,ebx
c0002a9a:	ba 00 02 00 00       	mov    edx,0x200
c0002a9f:	31 c0                	xor    eax,eax
c0002aa1:	84 c9                	test   cl,cl
c0002aa3:	75 10                	jne    c0002ab5 <find_bitmap+0x89>
c0002aa5:	45                   	inc    ebp
c0002aa6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaa:	75 0f                	jne    c0002abb <find_bitmap+0x8f>
c0002aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab0:	83 c0 02             	add    eax,0x2
c0002ab3:	eb 22                	jmp    c0002ad7 <find_bitmap+0xab>
c0002ab5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ab9:	31 ed                	xor    ebp,ebp
c0002abb:	39 de                	cmp    esi,ebx
c0002abd:	74 16                	je     c0002ad5 <find_bitmap+0xa9>
c0002abf:	84 c0                	test   al,al
c0002ac1:	75 c6                	jne    c0002a89 <find_bitmap+0x5d>
c0002ac3:	42                   	inc    edx
c0002ac4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aca:	77 84                	ja     c0002a50 <find_bitmap+0x24>
c0002acc:	b0 01                	mov    al,0x1
c0002ace:	eb b9                	jmp    c0002a89 <find_bitmap+0x5d>
c0002ad0:	83 c8 ff             	or     eax,0xffffffff
c0002ad3:	eb 02                	jmp    c0002ad7 <find_bitmap+0xab>
c0002ad5:	31 c0                	xor    eax,eax
c0002ad7:	83 c4 1c             	add    esp,0x1c
c0002ada:	5b                   	pop    ebx
c0002adb:	5e                   	pop    esi
c0002adc:	5f                   	pop    edi
c0002add:	5d                   	pop    ebp
c0002ade:	c3                   	ret    

c0002adf <change_bitmap>:
c0002adf:	55                   	push   ebp
c0002ae0:	89 cd                	mov    ebp,ecx
c0002ae2:	57                   	push   edi
c0002ae3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ae6:	56                   	push   esi
c0002ae7:	89 c7                	mov    edi,eax
c0002ae9:	53                   	push   ebx
c0002aea:	89 c8                	mov    eax,ecx
c0002aec:	83 ec 1c             	sub    esp,0x1c
c0002aef:	31 d2                	xor    edx,edx
c0002af1:	c1 e8 0c             	shr    eax,0xc
c0002af4:	89 ce                	mov    esi,ecx
c0002af6:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002af9:	bb 01 00 00 00       	mov    ebx,0x1
c0002afe:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b01:	83 e1 07             	and    ecx,0x7
c0002b04:	c1 ee 03             	shr    esi,0x3
c0002b07:	d3 e3                	shl    ebx,cl
c0002b09:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b0f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b13:	89 c1                	mov    ecx,eax
c0002b15:	89 d3                	mov    ebx,edx
c0002b17:	83 c1 01             	add    ecx,0x1
c0002b1a:	83 d3 00             	adc    ebx,0x0
c0002b1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b21:	89 d1                	mov    ecx,edx
c0002b23:	89 c2                	mov    edx,eax
c0002b25:	89 f8                	mov    eax,edi
c0002b27:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b2b:	e8 e7 f6 ff ff       	call   c0002217 <move_window>
c0002b30:	89 c1                	mov    ecx,eax
c0002b32:	85 c0                	test   eax,eax
c0002b34:	75 48                	jne    c0002b7e <change_bitmap+0x9f>
c0002b36:	31 d2                	xor    edx,edx
c0002b38:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b3c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b40:	0f 95 c2             	setne  dl
c0002b43:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b47:	74 3c                	je     c0002b85 <change_bitmap+0xa6>
c0002b49:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b4d:	4d                   	dec    ebp
c0002b4e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b52:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b56:	74 32                	je     c0002b8a <change_bitmap+0xab>
c0002b58:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b5c:	75 d8                	jne    c0002b36 <change_bitmap+0x57>
c0002b5e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b61:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b66:	89 c3                	mov    ebx,eax
c0002b68:	31 f6                	xor    esi,esi
c0002b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b72:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b78:	74 99                	je     c0002b13 <change_bitmap+0x34>
c0002b7a:	89 de                	mov    esi,ebx
c0002b7c:	eb b8                	jmp    c0002b36 <change_bitmap+0x57>
c0002b7e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b83:	eb 05                	jmp    c0002b8a <change_bitmap+0xab>
c0002b85:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8a:	83 c4 1c             	add    esp,0x1c
c0002b8d:	89 c8                	mov    eax,ecx
c0002b8f:	5b                   	pop    ebx
c0002b90:	5e                   	pop    esi
c0002b91:	5f                   	pop    edi
c0002b92:	5d                   	pop    ebp
c0002b93:	c3                   	ret    

c0002b94 <put_fat>:
c0002b94:	83 fa 01             	cmp    edx,0x1
c0002b97:	0f 86 7b 01 00 00    	jbe    c0002d18 <put_fat+0x184>
c0002b9d:	55                   	push   ebp
c0002b9e:	57                   	push   edi
c0002b9f:	89 cf                	mov    edi,ecx
c0002ba1:	56                   	push   esi
c0002ba2:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba7:	53                   	push   ebx
c0002ba8:	89 c6                	mov    esi,eax
c0002baa:	83 ec 1c             	sub    esp,0x1c
c0002bad:	89 d3                	mov    ebx,edx
c0002baf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb2:	0f 86 68 01 00 00    	jbe    c0002d20 <put_fat+0x18c>
c0002bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0002bba:	3c 02                	cmp    al,0x2
c0002bbc:	0f 84 c7 00 00 00    	je     c0002c89 <put_fat+0xf5>
c0002bc2:	77 09                	ja     c0002bcd <put_fat+0x39>
c0002bc4:	fe c8                	dec    al
c0002bc6:	74 17                	je     c0002bdf <put_fat+0x4b>
c0002bc8:	e9 53 01 00 00       	jmp    c0002d20 <put_fat+0x18c>
c0002bcd:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd2:	3c 04                	cmp    al,0x4
c0002bd4:	0f 86 e1 00 00 00    	jbe    c0002cbb <put_fat+0x127>
c0002bda:	e9 41 01 00 00       	jmp    c0002d20 <put_fat+0x18c>
c0002bdf:	89 d5                	mov    ebp,edx
c0002be1:	31 c9                	xor    ecx,ecx
c0002be3:	d1 ed                	shr    ebp,1
c0002be5:	89 f0                	mov    eax,esi
c0002be7:	01 d5                	add    ebp,edx
c0002be9:	89 ea                	mov    edx,ebp
c0002beb:	c1 ea 09             	shr    edx,0x9
c0002bee:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf4:	e8 1e f6 ff ff       	call   c0002217 <move_window>
c0002bf9:	89 c1                	mov    ecx,eax
c0002bfb:	85 c0                	test   eax,eax
c0002bfd:	0f 85 1d 01 00 00    	jne    c0002d20 <put_fat+0x18c>
c0002c03:	8d 46 54             	lea    eax,[esi+0x54]
c0002c06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c0d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c17:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c1b:	83 e3 01             	and    ebx,0x1
c0002c1e:	89 f8                	mov    eax,edi
c0002c20:	74 0d                	je     c0002c2f <put_fat+0x9b>
c0002c22:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c25:	89 fa                	mov    edx,edi
c0002c27:	c1 e2 04             	shl    edx,0x4
c0002c2a:	83 e0 0f             	and    eax,0xf
c0002c2d:	09 d0                	or     eax,edx
c0002c2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c33:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c36:	c1 ea 09             	shr    edx,0x9
c0002c39:	31 c9                	xor    ecx,ecx
c0002c3b:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c3e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c42:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c45:	89 f0                	mov    eax,esi
c0002c47:	e8 cb f5 ff ff       	call   c0002217 <move_window>
c0002c4c:	89 c1                	mov    ecx,eax
c0002c4e:	85 c0                	test   eax,eax
c0002c50:	0f 85 ca 00 00 00    	jne    c0002d20 <put_fat+0x18c>
c0002c56:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c60:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c64:	85 db                	test   ebx,ebx
c0002c66:	74 07                	je     c0002c6f <put_fat+0xdb>
c0002c68:	c1 ef 04             	shr    edi,0x4
c0002c6b:	89 fa                	mov    edx,edi
c0002c6d:	eb 0e                	jmp    c0002c7d <put_fat+0xe9>
c0002c6f:	c1 ef 08             	shr    edi,0x8
c0002c72:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c75:	83 e2 f0             	and    edx,0xfffffff0
c0002c78:	83 e7 0f             	and    edi,0xf
c0002c7b:	09 fa                	or     edx,edi
c0002c7d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c84:	e9 97 00 00 00       	jmp    c0002d20 <put_fat+0x18c>
c0002c89:	c1 ea 08             	shr    edx,0x8
c0002c8c:	31 c9                	xor    ecx,ecx
c0002c8e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c91:	89 f0                	mov    eax,esi
c0002c93:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c96:	e8 7c f5 ff ff       	call   c0002217 <move_window>
c0002c9b:	89 c1                	mov    ecx,eax
c0002c9d:	85 c0                	test   eax,eax
c0002c9f:	75 7f                	jne    c0002d20 <put_fat+0x18c>
c0002ca1:	01 db                	add    ebx,ebx
c0002ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ca7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cad:	0f b7 d7             	movzx  edx,di
c0002cb0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb4:	e8 f9 ed ff ff       	call   c0001ab2 <st_word>
c0002cb9:	eb 53                	jmp    c0002d0e <put_fat+0x17a>
c0002cbb:	c1 ea 07             	shr    edx,0x7
c0002cbe:	31 c9                	xor    ecx,ecx
c0002cc0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc3:	89 f0                	mov    eax,esi
c0002cc5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cc8:	e8 4a f5 ff ff       	call   c0002217 <move_window>
c0002ccd:	89 c1                	mov    ecx,eax
c0002ccf:	85 c0                	test   eax,eax
c0002cd1:	75 4d                	jne    c0002d20 <put_fat+0x18c>
c0002cd3:	c1 e3 02             	shl    ebx,0x2
c0002cd6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cdc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cdf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce3:	74 1c                	je     c0002d01 <put_fat+0x16d>
c0002ce5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ce9:	89 d8                	mov    eax,ebx
c0002ceb:	e8 5d ed ff ff       	call   c0001a4d <ld_dword>
c0002cf0:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cf6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cfb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cff:	09 c7                	or     edi,eax
c0002d01:	89 fa                	mov    edx,edi
c0002d03:	89 d8                	mov    eax,ebx
c0002d05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d09:	e8 a8 ed ff ff       	call   c0001ab6 <st_dword>
c0002d0e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d16:	eb 08                	jmp    c0002d20 <put_fat+0x18c>
c0002d18:	b9 02 00 00 00       	mov    ecx,0x2
c0002d1d:	89 c8                	mov    eax,ecx
c0002d1f:	c3                   	ret    
c0002d20:	83 c4 1c             	add    esp,0x1c
c0002d23:	89 c8                	mov    eax,ecx
c0002d25:	5b                   	pop    ebx
c0002d26:	5e                   	pop    esi
c0002d27:	5f                   	pop    edi
c0002d28:	5d                   	pop    ebp
c0002d29:	c3                   	ret    

c0002d2a <fill_last_frag>:
c0002d2a:	57                   	push   edi
c0002d2b:	89 cf                	mov    edi,ecx
c0002d2d:	56                   	push   esi
c0002d2e:	89 d6                	mov    esi,edx
c0002d30:	53                   	push   ebx
c0002d31:	89 c3                	mov    ebx,eax
c0002d33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d36:	85 c0                	test   eax,eax
c0002d38:	74 21                	je     c0002d5b <fill_last_frag+0x31>
c0002d3a:	89 f9                	mov    ecx,edi
c0002d3c:	83 f8 01             	cmp    eax,0x1
c0002d3f:	76 05                	jbe    c0002d46 <fill_last_frag+0x1c>
c0002d41:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d44:	29 c1                	sub    ecx,eax
c0002d46:	8d 56 01             	lea    edx,[esi+0x1]
c0002d49:	29 c2                	sub    edx,eax
c0002d4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4d:	e8 42 fe ff ff       	call   c0002b94 <put_fat>
c0002d52:	85 c0                	test   eax,eax
c0002d54:	75 05                	jne    c0002d5b <fill_last_frag+0x31>
c0002d56:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d59:	eb d8                	jmp    c0002d33 <fill_last_frag+0x9>
c0002d5b:	5b                   	pop    ebx
c0002d5c:	5e                   	pop    esi
c0002d5d:	5f                   	pop    edi
c0002d5e:	c3                   	ret    

c0002d5f <fill_first_frag>:
c0002d5f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d63:	75 2d                	jne    c0002d92 <fill_first_frag+0x33>
c0002d65:	57                   	push   edi
c0002d66:	56                   	push   esi
c0002d67:	53                   	push   ebx
c0002d68:	89 c3                	mov    ebx,eax
c0002d6a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d6d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d70:	01 d7                	add    edi,edx
c0002d72:	39 fa                	cmp    edx,edi
c0002d74:	74 14                	je     c0002d8a <fill_first_frag+0x2b>
c0002d76:	8d 72 01             	lea    esi,[edx+0x1]
c0002d79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d7b:	89 f1                	mov    ecx,esi
c0002d7d:	e8 12 fe ff ff       	call   c0002b94 <put_fat>
c0002d82:	89 f2                	mov    edx,esi
c0002d84:	85 c0                	test   eax,eax
c0002d86:	74 ea                	je     c0002d72 <fill_first_frag+0x13>
c0002d88:	eb 0b                	jmp    c0002d95 <fill_first_frag+0x36>
c0002d8a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d8e:	31 c0                	xor    eax,eax
c0002d90:	eb 03                	jmp    c0002d95 <fill_first_frag+0x36>
c0002d92:	31 c0                	xor    eax,eax
c0002d94:	c3                   	ret    
c0002d95:	5b                   	pop    ebx
c0002d96:	5e                   	pop    esi
c0002d97:	5f                   	pop    edi
c0002d98:	c3                   	ret    

c0002d99 <get_fat>:
c0002d99:	83 fa 01             	cmp    edx,0x1
c0002d9c:	0f 86 db 01 00 00    	jbe    c0002f7d <get_fat+0x1e4>
c0002da2:	55                   	push   ebp
c0002da3:	b9 01 00 00 00       	mov    ecx,0x1
c0002da8:	57                   	push   edi
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	83 ec 1c             	sub    esp,0x1c
c0002dae:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db3:	0f 86 cc 01 00 00    	jbe    c0002f85 <get_fat+0x1ec>
c0002db9:	89 c3                	mov    ebx,eax
c0002dbb:	8a 07                	mov    al,BYTE PTR [edi]
c0002dbd:	89 d6                	mov    esi,edx
c0002dbf:	3c 02                	cmp    al,0x2
c0002dc1:	0f 84 99 00 00 00    	je     c0002e60 <get_fat+0xc7>
c0002dc7:	77 09                	ja     c0002dd2 <get_fat+0x39>
c0002dc9:	fe c8                	dec    al
c0002dcb:	74 1a                	je     c0002de7 <get_fat+0x4e>
c0002dcd:	e9 b3 01 00 00       	jmp    c0002f85 <get_fat+0x1ec>
c0002dd2:	3c 03                	cmp    al,0x3
c0002dd4:	0f 84 b5 00 00 00    	je     c0002e8f <get_fat+0xf6>
c0002dda:	3c 04                	cmp    al,0x4
c0002ddc:	0f 84 e3 00 00 00    	je     c0002ec5 <get_fat+0x12c>
c0002de2:	e9 9e 01 00 00       	jmp    c0002f85 <get_fat+0x1ec>
c0002de7:	89 d3                	mov    ebx,edx
c0002de9:	31 c9                	xor    ecx,ecx
c0002deb:	d1 eb                	shr    ebx,1
c0002ded:	89 f8                	mov    eax,edi
c0002def:	01 d3                	add    ebx,edx
c0002df1:	89 da                	mov    edx,ebx
c0002df3:	c1 ea 09             	shr    edx,0x9
c0002df6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dfc:	e8 16 f4 ff ff       	call   c0002217 <move_window>
c0002e01:	85 c0                	test   eax,eax
c0002e03:	74 08                	je     c0002e0d <get_fat+0x74>
c0002e05:	83 c9 ff             	or     ecx,0xffffffff
c0002e08:	e9 78 01 00 00       	jmp    c0002f85 <get_fat+0x1ec>
c0002e0d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e10:	31 c9                	xor    ecx,ecx
c0002e12:	89 ea                	mov    edx,ebp
c0002e14:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1a:	c1 ea 09             	shr    edx,0x9
c0002e1d:	89 f8                	mov    eax,edi
c0002e1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e22:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e26:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e29:	e8 e9 f3 ff ff       	call   c0002217 <move_window>
c0002e2e:	85 c0                	test   eax,eax
c0002e30:	75 d3                	jne    c0002e05 <get_fat+0x6c>
c0002e32:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e38:	0f b6 c3             	movzx  eax,bl
c0002e3b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e40:	c1 e3 08             	shl    ebx,0x8
c0002e43:	09 c3                	or     ebx,eax
c0002e45:	89 d9                	mov    ecx,ebx
c0002e47:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e4d:	83 e6 01             	and    esi,0x1
c0002e50:	0f 84 2f 01 00 00    	je     c0002f85 <get_fat+0x1ec>
c0002e56:	89 d9                	mov    ecx,ebx
c0002e58:	c1 e9 04             	shr    ecx,0x4
c0002e5b:	e9 25 01 00 00       	jmp    c0002f85 <get_fat+0x1ec>
c0002e60:	c1 ea 08             	shr    edx,0x8
c0002e63:	31 c9                	xor    ecx,ecx
c0002e65:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e68:	89 f8                	mov    eax,edi
c0002e6a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6d:	e8 a5 f3 ff ff       	call   c0002217 <move_window>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 8f                	jne    c0002e05 <get_fat+0x6c>
c0002e76:	01 f6                	add    esi,esi
c0002e78:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e7e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e82:	e8 b9 eb ff ff       	call   c0001a40 <ld_word>
c0002e87:	0f b7 c8             	movzx  ecx,ax
c0002e8a:	e9 f6 00 00 00       	jmp    c0002f85 <get_fat+0x1ec>
c0002e8f:	c1 ea 07             	shr    edx,0x7
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e97:	89 f8                	mov    eax,edi
c0002e99:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e9c:	e8 76 f3 ff ff       	call   c0002217 <move_window>
c0002ea1:	85 c0                	test   eax,eax
c0002ea3:	0f 85 5c ff ff ff    	jne    c0002e05 <get_fat+0x6c>
c0002ea9:	c1 e6 02             	shl    esi,0x2
c0002eac:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eb6:	e8 92 eb ff ff       	call   c0001a4d <ld_dword>
c0002ebb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec0:	e9 b4 00 00 00       	jmp    c0002f79 <get_fat+0x1e0>
c0002ec5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ec8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ecb:	89 d1                	mov    ecx,edx
c0002ecd:	09 c1                	or     ecx,eax
c0002ecf:	74 06                	je     c0002ed7 <get_fat+0x13e>
c0002ed1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ed5:	75 0f                	jne    c0002ee6 <get_fat+0x14d>
c0002ed7:	b9 01 00 00 00       	mov    ecx,0x1
c0002edc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee0:	0f 85 9f 00 00 00    	jne    c0002f85 <get_fat+0x1ec>
c0002ee6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eea:	89 f5                	mov    ebp,esi
c0002eec:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef1:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef4:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ef7:	80 f9 02             	cmp    cl,0x2
c0002efa:	75 35                	jne    c0002f31 <get_fat+0x198>
c0002efc:	83 c0 ff             	add    eax,0xffffffff
c0002eff:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f04:	83 d2 ff             	adc    edx,0xffffffff
c0002f07:	31 db                	xor    ebx,ebx
c0002f09:	53                   	push   ebx
c0002f0a:	51                   	push   ecx
c0002f0b:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f0f:	c1 ea 09             	shr    edx,0x9
c0002f12:	52                   	push   edx
c0002f13:	50                   	push   eax
c0002f14:	e8 e3 c5 01 00       	call   c001f4fc <__udivdi3>
c0002f19:	83 c4 10             	add    esp,0x10
c0002f1c:	b9 01 00 00 00       	mov    ecx,0x1
c0002f21:	39 c5                	cmp    ebp,eax
c0002f23:	77 60                	ja     c0002f85 <get_fat+0x1ec>
c0002f25:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2a:	74 59                	je     c0002f85 <get_fat+0x1ec>
c0002f2c:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f2f:	eb 54                	jmp    c0002f85 <get_fat+0x1ec>
c0002f31:	80 f9 03             	cmp    cl,0x3
c0002f34:	75 05                	jne    c0002f3b <get_fat+0x1a2>
c0002f36:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f39:	77 f1                	ja     c0002f2c <get_fat+0x193>
c0002f3b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f40:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f44:	75 3f                	jne    c0002f85 <get_fat+0x1ec>
c0002f46:	89 f2                	mov    edx,esi
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	c1 ea 07             	shr    edx,0x7
c0002f4d:	89 f8                	mov    eax,edi
c0002f4f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f52:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f55:	e8 bd f2 ff ff       	call   c0002217 <move_window>
c0002f5a:	85 c0                	test   eax,eax
c0002f5c:	0f 85 a3 fe ff ff    	jne    c0002e05 <get_fat+0x6c>
c0002f62:	c1 e6 02             	shl    esi,0x2
c0002f65:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f6b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f6f:	e8 d9 ea ff ff       	call   c0001a4d <ld_dword>
c0002f74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f79:	89 c1                	mov    ecx,eax
c0002f7b:	eb 08                	jmp    c0002f85 <get_fat+0x1ec>
c0002f7d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f82:	89 c8                	mov    eax,ecx
c0002f84:	c3                   	ret    
c0002f85:	83 c4 1c             	add    esp,0x1c
c0002f88:	89 c8                	mov    eax,ecx
c0002f8a:	5b                   	pop    ebx
c0002f8b:	5e                   	pop    esi
c0002f8c:	5f                   	pop    edi
c0002f8d:	5d                   	pop    ebp
c0002f8e:	c3                   	ret    

c0002f8f <dir_sdi>:
c0002f8f:	55                   	push   ebp
c0002f90:	57                   	push   edi
c0002f91:	56                   	push   esi
c0002f92:	53                   	push   ebx
c0002f93:	89 c3                	mov    ebx,eax
c0002f95:	83 ec 1c             	sub    esp,0x1c
c0002f98:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9a:	31 c0                	xor    eax,eax
c0002f9c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f9f:	0f 94 c0             	sete   al
c0002fa2:	48                   	dec    eax
c0002fa3:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fa8:	05 00 00 00 10       	add    eax,0x10000000
c0002fad:	39 d0                	cmp    eax,edx
c0002faf:	77 0a                	ja     c0002fbb <dir_sdi+0x2c>
c0002fb1:	b8 02 00 00 00       	mov    eax,0x2
c0002fb6:	e9 c4 00 00 00       	jmp    c000307f <dir_sdi+0xf0>
c0002fbb:	89 d6                	mov    esi,edx
c0002fbd:	f6 c2 1f             	test   dl,0x1f
c0002fc0:	75 ef                	jne    c0002fb1 <dir_sdi+0x22>
c0002fc2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fc5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fc8:	85 c9                	test   ecx,ecx
c0002fca:	75 2d                	jne    c0002ff9 <dir_sdi+0x6a>
c0002fcc:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fcf:	77 1b                	ja     c0002fec <dir_sdi+0x5d>
c0002fd1:	89 f2                	mov    edx,esi
c0002fd3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fd7:	c1 ea 05             	shr    edx,0x5
c0002fda:	39 c2                	cmp    edx,eax
c0002fdc:	73 d3                	jae    c0002fb1 <dir_sdi+0x22>
c0002fde:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fe7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fea:	eb 4b                	jmp    c0003037 <dir_sdi+0xa8>
c0002fec:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fef:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff3:	85 c0                	test   eax,eax
c0002ff5:	74 da                	je     c0002fd1 <dir_sdi+0x42>
c0002ff7:	89 c1                	mov    ecx,eax
c0002ff9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002ffd:	c1 e5 09             	shl    ebp,0x9
c0003000:	89 ca                	mov    edx,ecx
c0003002:	39 ee                	cmp    esi,ebp
c0003004:	72 1c                	jb     c0003022 <dir_sdi+0x93>
c0003006:	89 d8                	mov    eax,ebx
c0003008:	e8 8c fd ff ff       	call   c0002d99 <get_fat>
c000300d:	89 c1                	mov    ecx,eax
c000300f:	83 f8 ff             	cmp    eax,0xffffffff
c0003012:	74 66                	je     c000307a <dir_sdi+0xeb>
c0003014:	83 f8 01             	cmp    eax,0x1
c0003017:	76 98                	jbe    c0002fb1 <dir_sdi+0x22>
c0003019:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000301c:	76 93                	jbe    c0002fb1 <dir_sdi+0x22>
c000301e:	29 ee                	sub    esi,ebp
c0003020:	eb de                	jmp    c0003000 <dir_sdi+0x71>
c0003022:	89 f8                	mov    eax,edi
c0003024:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003028:	e8 ac ec ff ff       	call   c0001cd9 <clst2sect>
c000302d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003031:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003034:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003037:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303a:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000303d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003040:	89 d1                	mov    ecx,edx
c0003042:	09 c1                	or     ecx,eax
c0003044:	0f 84 67 ff ff ff    	je     c0002fb1 <dir_sdi+0x22>
c000304a:	89 f1                	mov    ecx,esi
c000304c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003054:	c1 e9 09             	shr    ecx,0x9
c0003057:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000305b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000305f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003063:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003069:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000306c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003070:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003073:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003076:	31 c0                	xor    eax,eax
c0003078:	eb 05                	jmp    c000307f <dir_sdi+0xf0>
c000307a:	b8 01 00 00 00       	mov    eax,0x1
c000307f:	83 c4 1c             	add    esp,0x1c
c0003082:	5b                   	pop    ebx
c0003083:	5e                   	pop    esi
c0003084:	5f                   	pop    edi
c0003085:	5d                   	pop    ebp
c0003086:	c3                   	ret    

c0003087 <create_chain>:
c0003087:	55                   	push   ebp
c0003088:	89 c5                	mov    ebp,eax
c000308a:	57                   	push   edi
c000308b:	56                   	push   esi
c000308c:	53                   	push   ebx
c000308d:	83 ec 1c             	sub    esp,0x1c
c0003090:	85 d2                	test   edx,edx
c0003092:	8b 30                	mov    esi,DWORD PTR [eax]
c0003094:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003098:	75 0e                	jne    c00030a8 <create_chain+0x21>
c000309a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000309d:	85 ff                	test   edi,edi
c000309f:	74 39                	je     c00030da <create_chain+0x53>
c00030a1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a4:	77 39                	ja     c00030df <create_chain+0x58>
c00030a6:	eb 32                	jmp    c00030da <create_chain+0x53>
c00030a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030ac:	e8 e8 fc ff ff       	call   c0002d99 <get_fat>
c00030b1:	89 c3                	mov    ebx,eax
c00030b3:	83 f8 01             	cmp    eax,0x1
c00030b6:	77 0a                	ja     c00030c2 <create_chain+0x3b>
c00030b8:	bb 01 00 00 00       	mov    ebx,0x1
c00030bd:	e9 bc 01 00 00       	jmp    c000327e <create_chain+0x1f7>
c00030c2:	83 f8 ff             	cmp    eax,0xffffffff
c00030c5:	0f 84 60 01 00 00    	je     c000322b <create_chain+0x1a4>
c00030cb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ce:	0f 87 aa 01 00 00    	ja     c000327e <create_chain+0x1f7>
c00030d4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030d8:	eb 05                	jmp    c00030df <create_chain+0x58>
c00030da:	bf 01 00 00 00       	mov    edi,0x1
c00030df:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e3:	75 07                	jne    c00030ec <create_chain+0x65>
c00030e5:	31 db                	xor    ebx,ebx
c00030e7:	e9 92 01 00 00       	jmp    c000327e <create_chain+0x1f7>
c00030ec:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030ef:	75 74                	jne    c0003165 <create_chain+0xde>
c00030f1:	b9 01 00 00 00       	mov    ecx,0x1
c00030f6:	89 fa                	mov    edx,edi
c00030f8:	89 f0                	mov    eax,esi
c00030fa:	e8 2d f9 ff ff       	call   c0002a2c <find_bitmap>
c00030ff:	89 c3                	mov    ebx,eax
c0003101:	8d 40 ff             	lea    eax,[eax-0x1]
c0003104:	83 f8 fd             	cmp    eax,0xfffffffd
c0003107:	0f 87 71 01 00 00    	ja     c000327e <create_chain+0x1f7>
c000310d:	83 ec 0c             	sub    esp,0xc
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	89 da                	mov    edx,ebx
c0003117:	89 f0                	mov    eax,esi
c0003119:	6a 01                	push   0x1
c000311b:	e8 bf f9 ff ff       	call   c0002adf <change_bitmap>
c0003120:	83 c4 10             	add    esp,0x10
c0003123:	83 f8 02             	cmp    eax,0x2
c0003126:	74 90                	je     c00030b8 <create_chain+0x31>
c0003128:	83 f8 01             	cmp    eax,0x1
c000312b:	0f 84 fa 00 00 00    	je     c000322b <create_chain+0x1a4>
c0003131:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003136:	75 09                	jne    c0003141 <create_chain+0xba>
c0003138:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000313c:	e9 0e 01 00 00       	jmp    c000324f <create_chain+0x1c8>
c0003141:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003145:	0f 85 e9 00 00 00    	jne    c0003234 <create_chain+0x1ad>
c000314b:	8d 57 01             	lea    edx,[edi+0x1]
c000314e:	39 da                	cmp    edx,ebx
c0003150:	0f 84 f9 00 00 00    	je     c000324f <create_chain+0x1c8>
c0003156:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003159:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000315d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003160:	e9 cf 00 00 00       	jmp    c0003234 <create_chain+0x1ad>
c0003165:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003169:	75 41                	jne    c00031ac <create_chain+0x125>
c000316b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000316e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003171:	77 05                	ja     c0003178 <create_chain+0xf1>
c0003173:	bb 02 00 00 00       	mov    ebx,0x2
c0003178:	89 da                	mov    edx,ebx
c000317a:	89 e8                	mov    eax,ebp
c000317c:	e8 18 fc ff ff       	call   c0002d99 <get_fat>
c0003181:	83 f8 01             	cmp    eax,0x1
c0003184:	0f 84 a6 00 00 00    	je     c0003230 <create_chain+0x1a9>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 9d 00 00 00    	je     c0003230 <create_chain+0x1a9>
c0003193:	85 c0                	test   eax,eax
c0003195:	74 11                	je     c00031a8 <create_chain+0x121>
c0003197:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319a:	83 f8 01             	cmp    eax,0x1
c000319d:	76 0d                	jbe    c00031ac <create_chain+0x125>
c000319f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a2:	76 08                	jbe    c00031ac <create_chain+0x125>
c00031a4:	89 c7                	mov    edi,eax
c00031a6:	eb 04                	jmp    c00031ac <create_chain+0x125>
c00031a8:	85 db                	test   ebx,ebx
c00031aa:	75 36                	jne    c00031e2 <create_chain+0x15b>
c00031ac:	89 fb                	mov    ebx,edi
c00031ae:	43                   	inc    ebx
c00031af:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b2:	77 0e                	ja     c00031c2 <create_chain+0x13b>
c00031b4:	83 ff 01             	cmp    edi,0x1
c00031b7:	0f 86 28 ff ff ff    	jbe    c00030e5 <create_chain+0x5e>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 da                	mov    edx,ebx
c00031c4:	89 e8                	mov    eax,ebp
c00031c6:	e8 ce fb ff ff       	call   c0002d99 <get_fat>
c00031cb:	85 c0                	test   eax,eax
c00031cd:	74 13                	je     c00031e2 <create_chain+0x15b>
c00031cf:	83 f8 01             	cmp    eax,0x1
c00031d2:	74 5c                	je     c0003230 <create_chain+0x1a9>
c00031d4:	83 f8 ff             	cmp    eax,0xffffffff
c00031d7:	74 57                	je     c0003230 <create_chain+0x1a9>
c00031d9:	39 fb                	cmp    ebx,edi
c00031db:	75 d1                	jne    c00031ae <create_chain+0x127>
c00031dd:	e9 03 ff ff ff       	jmp    c00030e5 <create_chain+0x5e>
c00031e2:	83 c9 ff             	or     ecx,0xffffffff
c00031e5:	89 da                	mov    edx,ebx
c00031e7:	89 f0                	mov    eax,esi
c00031e9:	e8 a6 f9 ff ff       	call   c0002b94 <put_fat>
c00031ee:	85 c0                	test   eax,eax
c00031f0:	75 14                	jne    c0003206 <create_chain+0x17f>
c00031f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031f7:	74 0d                	je     c0003206 <create_chain+0x17f>
c00031f9:	89 d9                	mov    ecx,ebx
c00031fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031ff:	89 f0                	mov    eax,esi
c0003201:	e8 8e f9 ff ff       	call   c0002b94 <put_fat>
c0003206:	85 c0                	test   eax,eax
c0003208:	75 1a                	jne    c0003224 <create_chain+0x19d>
c000320a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000320d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003210:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003213:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003216:	39 d0                	cmp    eax,edx
c0003218:	77 04                	ja     c000321e <create_chain+0x197>
c000321a:	48                   	dec    eax
c000321b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000321e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003222:	eb 5a                	jmp    c000327e <create_chain+0x1f7>
c0003224:	48                   	dec    eax
c0003225:	0f 85 8d fe ff ff    	jne    c00030b8 <create_chain+0x31>
c000322b:	83 cb ff             	or     ebx,0xffffffff
c000322e:	eb 4e                	jmp    c000327e <create_chain+0x1f7>
c0003230:	89 c3                	mov    ebx,eax
c0003232:	eb 4a                	jmp    c000327e <create_chain+0x1f7>
c0003234:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003238:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000323b:	41                   	inc    ecx
c000323c:	39 d9                	cmp    ecx,ebx
c000323e:	75 19                	jne    c0003259 <create_chain+0x1d2>
c0003240:	b9 02 00 00 00       	mov    ecx,0x2
c0003245:	85 d2                	test   edx,edx
c0003247:	74 03                	je     c000324c <create_chain+0x1c5>
c0003249:	8d 4a 01             	lea    ecx,[edx+0x1]
c000324c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000324f:	85 c0                	test   eax,eax
c0003251:	0f 85 61 fe ff ff    	jne    c00030b8 <create_chain+0x31>
c0003257:	eb b1                	jmp    c000320a <create_chain+0x183>
c0003259:	85 d2                	test   edx,edx
c000325b:	75 07                	jne    c0003264 <create_chain+0x1dd>
c000325d:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003264:	89 d9                	mov    ecx,ebx
c0003266:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326a:	89 e8                	mov    eax,ebp
c000326c:	e8 b9 fa ff ff       	call   c0002d2a <fill_last_frag>
c0003271:	85 c0                	test   eax,eax
c0003273:	75 af                	jne    c0003224 <create_chain+0x19d>
c0003275:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000327c:	eb 8c                	jmp    c000320a <create_chain+0x183>
c000327e:	83 c4 1c             	add    esp,0x1c
c0003281:	89 d8                	mov    eax,ebx
c0003283:	5b                   	pop    ebx
c0003284:	5e                   	pop    esi
c0003285:	5f                   	pop    edi
c0003286:	5d                   	pop    ebp
c0003287:	c3                   	ret    

c0003288 <remove_chain>:
c0003288:	55                   	push   ebp
c0003289:	57                   	push   edi
c000328a:	56                   	push   esi
c000328b:	53                   	push   ebx
c000328c:	83 ec 1c             	sub    esp,0x1c
c000328f:	83 fa 01             	cmp    edx,0x1
c0003292:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003294:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003298:	77 0a                	ja     c00032a4 <remove_chain+0x1c>
c000329a:	b8 02 00 00 00       	mov    eax,0x2
c000329f:	e9 24 01 00 00       	jmp    c00033c8 <remove_chain+0x140>
c00032a4:	89 d6                	mov    esi,edx
c00032a6:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032a9:	76 ef                	jbe    c000329a <remove_chain+0x12>
c00032ab:	89 c7                	mov    edi,eax
c00032ad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b2:	75 06                	jne    c00032ba <remove_chain+0x32>
c00032b4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032b8:	eb 54                	jmp    c000330e <remove_chain+0x86>
c00032ba:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032bd:	75 06                	jne    c00032c5 <remove_chain+0x3d>
c00032bf:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c3:	74 ef                	je     c00032b4 <remove_chain+0x2c>
c00032c5:	83 c9 ff             	or     ecx,0xffffffff
c00032c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032cc:	89 d8                	mov    eax,ebx
c00032ce:	e8 c1 f8 ff ff       	call   c0002b94 <put_fat>
c00032d3:	85 c0                	test   eax,eax
c00032d5:	74 dd                	je     c00032b4 <remove_chain+0x2c>
c00032d7:	e9 ec 00 00 00       	jmp    c00033c8 <remove_chain+0x140>
c00032dc:	83 f8 01             	cmp    eax,0x1
c00032df:	74 b9                	je     c000329a <remove_chain+0x12>
c00032e1:	83 f8 ff             	cmp    eax,0xffffffff
c00032e4:	74 6d                	je     c0003353 <remove_chain+0xcb>
c00032e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032e9:	75 6f                	jne    c000335a <remove_chain+0xd2>
c00032eb:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f1:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f4:	39 d0                	cmp    eax,edx
c00032f6:	73 08                	jae    c0003300 <remove_chain+0x78>
c00032f8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032fc:	40                   	inc    eax
c00032fd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003300:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003303:	39 e9                	cmp    ecx,ebp
c0003305:	75 64                	jne    c000336b <remove_chain+0xe3>
c0003307:	89 ee                	mov    esi,ebp
c0003309:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000330c:	76 0f                	jbe    c000331d <remove_chain+0x95>
c000330e:	89 f2                	mov    edx,esi
c0003310:	89 f8                	mov    eax,edi
c0003312:	e8 82 fa ff ff       	call   c0002d99 <get_fat>
c0003317:	89 c5                	mov    ebp,eax
c0003319:	85 c0                	test   eax,eax
c000331b:	75 bf                	jne    c00032dc <remove_chain+0x54>
c000331d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003320:	0f 85 a0 00 00 00    	jne    c00033c6 <remove_chain+0x13e>
c0003326:	eb 6c                	jmp    c0003394 <remove_chain+0x10c>
c0003328:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000332b:	84 c0                	test   al,al
c000332d:	75 7d                	jne    c00033ac <remove_chain+0x124>
c000332f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003332:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003336:	0f 84 86 00 00 00    	je     c00033c2 <remove_chain+0x13a>
c000333c:	89 da                	mov    edx,ebx
c000333e:	89 f8                	mov    eax,edi
c0003340:	e8 54 fa ff ff       	call   c0002d99 <get_fat>
c0003345:	83 f8 01             	cmp    eax,0x1
c0003348:	0f 86 4c ff ff ff    	jbe    c000329a <remove_chain+0x12>
c000334e:	83 f8 ff             	cmp    eax,0xffffffff
c0003351:	75 4e                	jne    c00033a1 <remove_chain+0x119>
c0003353:	b8 01 00 00 00       	mov    eax,0x1
c0003358:	eb 6e                	jmp    c00033c8 <remove_chain+0x140>
c000335a:	31 c9                	xor    ecx,ecx
c000335c:	89 f2                	mov    edx,esi
c000335e:	89 d8                	mov    eax,ebx
c0003360:	e8 2f f8 ff ff       	call   c0002b94 <put_fat>
c0003365:	85 c0                	test   eax,eax
c0003367:	74 82                	je     c00032eb <remove_chain+0x63>
c0003369:	eb 5d                	jmp    c00033c8 <remove_chain+0x140>
c000336b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000336e:	75 1b                	jne    c000338b <remove_chain+0x103>
c0003370:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	6a 00                	push   0x0
c0003379:	89 d8                	mov    eax,ebx
c000337b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000337f:	e8 5b f7 ff ff       	call   c0002adf <change_bitmap>
c0003384:	83 c4 10             	add    esp,0x10
c0003387:	85 c0                	test   eax,eax
c0003389:	75 3d                	jne    c00033c8 <remove_chain+0x140>
c000338b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000338f:	e9 73 ff ff ff       	jmp    c0003307 <remove_chain+0x7f>
c0003394:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003399:	75 8d                	jne    c0003328 <remove_chain+0xa0>
c000339b:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000339f:	eb 25                	jmp    c00033c6 <remove_chain+0x13e>
c00033a1:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a4:	89 c3                	mov    ebx,eax
c00033a6:	39 c2                	cmp    edx,eax
c00033a8:	74 88                	je     c0003332 <remove_chain+0xaa>
c00033aa:	eb 1a                	jmp    c00033c6 <remove_chain+0x13e>
c00033ac:	3c 03                	cmp    al,0x3
c00033ae:	75 16                	jne    c00033c6 <remove_chain+0x13e>
c00033b0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033b7:	77 0d                	ja     c00033c6 <remove_chain+0x13e>
c00033b9:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033bc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c0:	72 04                	jb     c00033c6 <remove_chain+0x13e>
c00033c2:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033c6:	31 c0                	xor    eax,eax
c00033c8:	83 c4 1c             	add    esp,0x1c
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_clear>:
c00033d0:	55                   	push   ebp
c00033d1:	57                   	push   edi
c00033d2:	56                   	push   esi
c00033d3:	89 c6                	mov    esi,eax
c00033d5:	53                   	push   ebx
c00033d6:	83 ec 1c             	sub    esp,0x1c
c00033d9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033dd:	e8 a1 ed ff ff       	call   c0002183 <sync_window>
c00033e2:	85 c0                	test   eax,eax
c00033e4:	0f 85 de 00 00 00    	jne    c00034c8 <dir_clear+0xf8>
c00033ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 e4 e8 ff ff       	call   c0001cd9 <clst2sect>
c00033f5:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003400:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003403:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003406:	b9 00 02 00 00       	mov    ecx,0x200
c000340b:	31 d2                	xor    edx,edx
c000340d:	89 e8                	mov    eax,ebp
c000340f:	e8 c0 e6 ff ff       	call   c0001ad4 <mem_set>
c0003414:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003418:	c1 e3 09             	shl    ebx,0x9
c000341b:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003421:	76 1f                	jbe    c0003442 <dir_clear+0x72>
c0003423:	bb 00 80 00 00       	mov    ebx,0x8000
c0003428:	eb 18                	jmp    c0003442 <dir_clear+0x72>
c000342a:	83 ec 0c             	sub    esp,0xc
c000342d:	53                   	push   ebx
c000342e:	e8 f3 4d 00 00       	call   c0008226 <ff_memalloc>
c0003433:	83 c4 10             	add    esp,0x10
c0003436:	89 c7                	mov    edi,eax
c0003438:	85 c0                	test   eax,eax
c000343a:	0f 85 8f 00 00 00    	jne    c00034cf <dir_clear+0xff>
c0003440:	d1 eb                	shr    ebx,1
c0003442:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003448:	77 e0                	ja     c000342a <dir_clear+0x5a>
c000344a:	31 db                	xor    ebx,ebx
c000344c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003450:	39 d8                	cmp    eax,ebx
c0003452:	76 66                	jbe    c00034ba <dir_clear+0xea>
c0003454:	83 ec 0c             	sub    esp,0xc
c0003457:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000345b:	6a 01                	push   0x1
c000345d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003465:	55                   	push   ebp
c0003466:	50                   	push   eax
c0003467:	e8 9f e5 ff ff       	call   c0001a0b <disk_write>
c000346c:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003471:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003476:	83 c4 20             	add    esp,0x20
c0003479:	85 c0                	test   eax,eax
c000347b:	75 3d                	jne    c00034ba <dir_clear+0xea>
c000347d:	43                   	inc    ebx
c000347e:	eb cc                	jmp    c000344c <dir_clear+0x7c>
c0003480:	83 ec 0c             	sub    esp,0xc
c0003483:	89 d8                	mov    eax,ebx
c0003485:	31 d2                	xor    edx,edx
c0003487:	55                   	push   ebp
c0003488:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000348c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003490:	52                   	push   edx
c0003491:	50                   	push   eax
c0003492:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003496:	57                   	push   edi
c0003497:	50                   	push   eax
c0003498:	e8 6e e5 ff ff       	call   c0001a0b <disk_write>
c000349d:	83 c4 20             	add    esp,0x20
c00034a0:	85 c0                	test   eax,eax
c00034a2:	75 0a                	jne    c00034ae <dir_clear+0xde>
c00034a4:	01 eb                	add    ebx,ebp
c00034a6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034aa:	39 d8                	cmp    eax,ebx
c00034ac:	77 d2                	ja     c0003480 <dir_clear+0xb0>
c00034ae:	83 ec 0c             	sub    esp,0xc
c00034b1:	57                   	push   edi
c00034b2:	e8 85 4d 00 00       	call   c000823c <ff_memfree>
c00034b7:	83 c4 10             	add    esp,0x10
c00034ba:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034be:	39 d8                	cmp    eax,ebx
c00034c0:	0f 95 c0             	setne  al
c00034c3:	0f b6 c0             	movzx  eax,al
c00034c6:	eb 19                	jmp    c00034e1 <dir_clear+0x111>
c00034c8:	b8 01 00 00 00       	mov    eax,0x1
c00034cd:	eb 12                	jmp    c00034e1 <dir_clear+0x111>
c00034cf:	89 d9                	mov    ecx,ebx
c00034d1:	31 d2                	xor    edx,edx
c00034d3:	c1 eb 09             	shr    ebx,0x9
c00034d6:	e8 f9 e5 ff ff       	call   c0001ad4 <mem_set>
c00034db:	89 dd                	mov    ebp,ebx
c00034dd:	31 db                	xor    ebx,ebx
c00034df:	eb c5                	jmp    c00034a6 <dir_clear+0xd6>
c00034e1:	83 c4 1c             	add    esp,0x1c
c00034e4:	5b                   	pop    ebx
c00034e5:	5e                   	pop    esi
c00034e6:	5f                   	pop    edi
c00034e7:	5d                   	pop    ebp
c00034e8:	c3                   	ret    

c00034e9 <dir_next>:
c00034e9:	55                   	push   ebp
c00034ea:	57                   	push   edi
c00034eb:	56                   	push   esi
c00034ec:	53                   	push   ebx
c00034ed:	89 c3                	mov    ebx,eax
c00034ef:	83 ec 1c             	sub    esp,0x1c
c00034f2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034fb:	8d 78 20             	lea    edi,[eax+0x20]
c00034fe:	31 c0                	xor    eax,eax
c0003500:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003504:	0f 94 c0             	sete   al
c0003507:	48                   	dec    eax
c0003508:	25 00 00 20 f0       	and    eax,0xf0200000
c000350d:	05 00 00 00 10       	add    eax,0x10000000
c0003512:	39 f8                	cmp    eax,edi
c0003514:	77 0e                	ja     c0003524 <dir_next+0x3b>
c0003516:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000351d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003527:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352a:	89 ce                	mov    esi,ecx
c000352c:	b8 04 00 00 00       	mov    eax,0x4
c0003531:	09 d6                	or     esi,edx
c0003533:	0f 84 da 00 00 00    	je     c0003613 <dir_next+0x12a>
c0003539:	89 f8                	mov    eax,edi
c000353b:	25 ff 01 00 00       	and    eax,0x1ff
c0003540:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003544:	0f 85 b9 00 00 00    	jne    c0003603 <dir_next+0x11a>
c000354a:	83 c2 01             	add    edx,0x1
c000354d:	83 d1 00             	adc    ecx,0x0
c0003550:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003553:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003556:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003559:	85 d2                	test   edx,edx
c000355b:	75 29                	jne    c0003586 <dir_next+0x9d>
c000355d:	89 fa                	mov    edx,edi
c000355f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003563:	c1 ea 05             	shr    edx,0x5
c0003566:	39 c2                	cmp    edx,eax
c0003568:	0f 82 95 00 00 00    	jb     c0003603 <dir_next+0x11a>
c000356e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003575:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000357c:	b8 04 00 00 00       	mov    eax,0x4
c0003581:	e9 8d 00 00 00       	jmp    c0003613 <dir_next+0x12a>
c0003586:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358a:	89 f9                	mov    ecx,edi
c000358c:	48                   	dec    eax
c000358d:	c1 e9 09             	shr    ecx,0x9
c0003590:	85 c8                	test   eax,ecx
c0003592:	75 6f                	jne    c0003603 <dir_next+0x11a>
c0003594:	89 d8                	mov    eax,ebx
c0003596:	e8 fe f7 ff ff       	call   c0002d99 <get_fat>
c000359b:	89 c6                	mov    esi,eax
c000359d:	83 f8 01             	cmp    eax,0x1
c00035a0:	77 07                	ja     c00035a9 <dir_next+0xc0>
c00035a2:	b8 02 00 00 00       	mov    eax,0x2
c00035a7:	eb 6a                	jmp    c0003613 <dir_next+0x12a>
c00035a9:	83 f8 ff             	cmp    eax,0xffffffff
c00035ac:	75 07                	jne    c00035b5 <dir_next+0xcc>
c00035ae:	b8 01 00 00 00       	mov    eax,0x1
c00035b3:	eb 5e                	jmp    c0003613 <dir_next+0x12a>
c00035b5:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035b8:	77 37                	ja     c00035f1 <dir_next+0x108>
c00035ba:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035bf:	74 ad                	je     c000356e <dir_next+0x85>
c00035c1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c4:	89 d8                	mov    eax,ebx
c00035c6:	e8 bc fa ff ff       	call   c0003087 <create_chain>
c00035cb:	89 c6                	mov    esi,eax
c00035cd:	b8 07 00 00 00       	mov    eax,0x7
c00035d2:	85 f6                	test   esi,esi
c00035d4:	74 3d                	je     c0003613 <dir_next+0x12a>
c00035d6:	83 fe 01             	cmp    esi,0x1
c00035d9:	74 c7                	je     c00035a2 <dir_next+0xb9>
c00035db:	83 fe ff             	cmp    esi,0xffffffff
c00035de:	74 ce                	je     c00035ae <dir_next+0xc5>
c00035e0:	89 f2                	mov    edx,esi
c00035e2:	89 e8                	mov    eax,ebp
c00035e4:	e8 e7 fd ff ff       	call   c00033d0 <dir_clear>
c00035e9:	85 c0                	test   eax,eax
c00035eb:	75 c1                	jne    c00035ae <dir_next+0xc5>
c00035ed:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f4:	89 f2                	mov    edx,esi
c00035f6:	89 e8                	mov    eax,ebp
c00035f8:	e8 dc e6 ff ff       	call   c0001cd9 <clst2sect>
c00035fd:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003600:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003607:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360a:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000360e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003611:	31 c0                	xor    eax,eax
c0003613:	83 c4 1c             	add    esp,0x1c
c0003616:	5b                   	pop    ebx
c0003617:	5e                   	pop    esi
c0003618:	5f                   	pop    edi
c0003619:	5d                   	pop    ebp
c000361a:	c3                   	ret    

c000361b <load_xdir>:
c000361b:	55                   	push   ebp
c000361c:	57                   	push   edi
c000361d:	56                   	push   esi
c000361e:	89 c6                	mov    esi,eax
c0003620:	53                   	push   ebx
c0003621:	83 ec 1c             	sub    esp,0x1c
c0003624:	8b 00                	mov    eax,DWORD PTR [eax]
c0003626:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003629:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000362c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000362f:	e8 e3 eb ff ff       	call   c0002217 <move_window>
c0003634:	89 c3                	mov    ebx,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 0c 01 00 00    	jne    c000374a <load_xdir+0x12f>
c000363e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003641:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003644:	0f 85 fb 00 00 00    	jne    c0003745 <load_xdir+0x12a>
c000364a:	89 f8                	mov    eax,edi
c000364c:	b9 20 00 00 00       	mov    ecx,0x20
c0003651:	e8 69 e4 ff ff       	call   c0001abf <mem_cpy>
c0003656:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365a:	40                   	inc    eax
c000365b:	c1 e0 05             	shl    eax,0x5
c000365e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003662:	83 e8 60             	sub    eax,0x60
c0003665:	3d 00 02 00 00       	cmp    eax,0x200
c000366a:	0f 87 d5 00 00 00    	ja     c0003745 <load_xdir+0x12a>
c0003670:	31 d2                	xor    edx,edx
c0003672:	89 f0                	mov    eax,esi
c0003674:	e8 70 fe ff ff       	call   c00034e9 <dir_next>
c0003679:	89 c3                	mov    ebx,eax
c000367b:	83 f8 04             	cmp    eax,0x4
c000367e:	0f 84 c1 00 00 00    	je     c0003745 <load_xdir+0x12a>
c0003684:	85 c0                	test   eax,eax
c0003686:	0f 85 be 00 00 00    	jne    c000374a <load_xdir+0x12f>
c000368c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000368f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003692:	8b 06                	mov    eax,DWORD PTR [esi]
c0003694:	e8 7e eb ff ff       	call   c0002217 <move_window>
c0003699:	89 c3                	mov    ebx,eax
c000369b:	85 c0                	test   eax,eax
c000369d:	0f 85 a7 00 00 00    	jne    c000374a <load_xdir+0x12f>
c00036a3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036a6:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036a9:	0f 85 96 00 00 00    	jne    c0003745 <load_xdir+0x12a>
c00036af:	8d 47 20             	lea    eax,[edi+0x20]
c00036b2:	b9 20 00 00 00       	mov    ecx,0x20
c00036b7:	e8 03 e4 ff ff       	call   c0001abf <mem_cpy>
c00036bc:	31 d2                	xor    edx,edx
c00036be:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c2:	b9 0f 00 00 00       	mov    ecx,0xf
c00036c7:	83 c0 2c             	add    eax,0x2c
c00036ca:	f7 f1                	div    ecx
c00036cc:	c1 e0 05             	shl    eax,0x5
c00036cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d3:	77 70                	ja     c0003745 <load_xdir+0x12a>
c00036d5:	bd 40 00 00 00       	mov    ebp,0x40
c00036da:	31 d2                	xor    edx,edx
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 06 fe ff ff       	call   c00034e9 <dir_next>
c00036e3:	89 c3                	mov    ebx,eax
c00036e5:	83 f8 04             	cmp    eax,0x4
c00036e8:	74 5b                	je     c0003745 <load_xdir+0x12a>
c00036ea:	85 c0                	test   eax,eax
c00036ec:	75 5c                	jne    c000374a <load_xdir+0x12f>
c00036ee:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f1:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00036f6:	e8 1c eb ff ff       	call   c0002217 <move_window>
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	85 c0                	test   eax,eax
c00036ff:	75 49                	jne    c000374a <load_xdir+0x12f>
c0003701:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003704:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003707:	75 3c                	jne    c0003745 <load_xdir+0x12a>
c0003709:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000370f:	77 0d                	ja     c000371e <load_xdir+0x103>
c0003711:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003714:	b9 20 00 00 00       	mov    ecx,0x20
c0003719:	e8 a1 e3 ff ff       	call   c0001abf <mem_cpy>
c000371e:	83 c5 20             	add    ebp,0x20
c0003721:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003725:	77 b3                	ja     c00036da <load_xdir+0xbf>
c0003727:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000372d:	77 1b                	ja     c000374a <load_xdir+0x12f>
c000372f:	89 f8                	mov    eax,edi
c0003731:	e8 d8 e7 ff ff       	call   c0001f0e <xdir_sum>
c0003736:	89 c1                	mov    ecx,eax
c0003738:	8d 47 02             	lea    eax,[edi+0x2]
c000373b:	e8 00 e3 ff ff       	call   c0001a40 <ld_word>
c0003740:	66 39 c1             	cmp    cx,ax
c0003743:	74 05                	je     c000374a <load_xdir+0x12f>
c0003745:	bb 02 00 00 00       	mov    ebx,0x2
c000374a:	83 c4 1c             	add    esp,0x1c
c000374d:	89 d8                	mov    eax,ebx
c000374f:	5b                   	pop    ebx
c0003750:	5e                   	pop    esi
c0003751:	5f                   	pop    edi
c0003752:	5d                   	pop    ebp
c0003753:	c3                   	ret    

c0003754 <load_obj_xdir>:
c0003754:	53                   	push   ebx
c0003755:	89 c3                	mov    ebx,eax
c0003757:	83 ec 08             	sub    esp,0x8
c000375a:	8b 02                	mov    eax,DWORD PTR [edx]
c000375c:	89 03                	mov    DWORD PTR [ebx],eax
c000375e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003761:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003764:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003767:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003774:	30 c0                	xor    al,al
c0003776:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000377d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003780:	89 d8                	mov    eax,ebx
c0003782:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003785:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003788:	e8 02 f8 ff ff       	call   c0002f8f <dir_sdi>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 0b                	jne    c000379c <load_obj_xdir+0x48>
c0003791:	83 c4 08             	add    esp,0x8
c0003794:	89 d8                	mov    eax,ebx
c0003796:	5b                   	pop    ebx
c0003797:	e9 7f fe ff ff       	jmp    c000361b <load_xdir>
c000379c:	83 c4 08             	add    esp,0x8
c000379f:	5b                   	pop    ebx
c00037a0:	c3                   	ret    

c00037a1 <dir_read>:
c00037a1:	55                   	push   ebp
c00037a2:	bd 04 00 00 00       	mov    ebp,0x4
c00037a7:	57                   	push   edi
c00037a8:	56                   	push   esi
c00037a9:	be ff ff ff ff       	mov    esi,0xffffffff
c00037ae:	53                   	push   ebx
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 ec 1c             	sub    esp,0x1c
c00037b4:	8b 38                	mov    edi,DWORD PTR [eax]
c00037b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ba:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037bf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037c5:	89 c8                	mov    eax,ecx
c00037c7:	09 d0                	or     eax,edx
c00037c9:	0f 84 25 01 00 00    	je     c00038f4 <dir_read+0x153>
c00037cf:	89 f8                	mov    eax,edi
c00037d1:	e8 41 ea ff ff       	call   c0002217 <move_window>
c00037d6:	89 c5                	mov    ebp,eax
c00037d8:	85 c0                	test   eax,eax
c00037da:	0f 85 23 01 00 00    	jne    c0003903 <dir_read+0x162>
c00037e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e3:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037e5:	84 c9                	test   cl,cl
c00037e7:	0f 84 11 01 00 00    	je     c00038fe <dir_read+0x15d>
c00037ed:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f0:	75 48                	jne    c000383a <dir_read+0x99>
c00037f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f7:	74 10                	je     c0003809 <dir_read+0x68>
c00037f9:	80 f9 83             	cmp    cl,0x83
c00037fc:	0f 85 dd 00 00 00    	jne    c00038df <dir_read+0x13e>
c0003802:	31 ed                	xor    ebp,ebp
c0003804:	e9 08 01 00 00       	jmp    c0003911 <dir_read+0x170>
c0003809:	80 f9 85             	cmp    cl,0x85
c000380c:	0f 85 cd 00 00 00    	jne    c00038df <dir_read+0x13e>
c0003812:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003815:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003818:	89 d8                	mov    eax,ebx
c000381a:	e8 fc fd ff ff       	call   c000361b <load_xdir>
c000381f:	89 c5                	mov    ebp,eax
c0003821:	85 c0                	test   eax,eax
c0003823:	0f 85 da 00 00 00    	jne    c0003903 <dir_read+0x162>
c0003829:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000382c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000382f:	83 e0 3f             	and    eax,0x3f
c0003832:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003835:	e9 d7 00 00 00       	jmp    c0003911 <dir_read+0x170>
c000383a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000383d:	83 e0 3f             	and    eax,0x3f
c0003840:	80 f9 e5             	cmp    cl,0xe5
c0003843:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	0f 84 8a 00 00 00    	je     c00038da <dir_read+0x139>
c0003850:	80 f9 2e             	cmp    cl,0x2e
c0003853:	0f 84 81 00 00 00    	je     c00038da <dir_read+0x139>
c0003859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000385d:	83 e0 1f             	and    eax,0x1f
c0003860:	83 f8 08             	cmp    eax,0x8
c0003863:	0f 94 c0             	sete   al
c0003866:	0f b6 c0             	movzx  eax,al
c0003869:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000386d:	75 6b                	jne    c00038da <dir_read+0x139>
c000386f:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003874:	75 44                	jne    c00038ba <dir_read+0x119>
c0003876:	f6 c1 40             	test   cl,0x40
c0003879:	74 12                	je     c000388d <dir_read+0xec>
c000387b:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000387e:	83 e1 bf             	and    ecx,0xffffffbf
c0003881:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003885:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003888:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000388b:	eb 06                	jmp    c0003893 <dir_read+0xf2>
c000388d:	89 f0                	mov    eax,esi
c000388f:	38 c8                	cmp    al,cl
c0003891:	75 47                	jne    c00038da <dir_read+0x139>
c0003893:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003897:	be ff ff ff ff       	mov    esi,0xffffffff
c000389c:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000389f:	75 3e                	jne    c00038df <dir_read+0x13e>
c00038a1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038a8:	e8 95 e4 ff ff       	call   c0001d42 <pick_lfn>
c00038ad:	85 c0                	test   eax,eax
c00038af:	74 2e                	je     c00038df <dir_read+0x13e>
c00038b1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038b5:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038b8:	eb 25                	jmp    c00038df <dir_read+0x13e>
c00038ba:	89 f0                	mov    eax,esi
c00038bc:	84 c0                	test   al,al
c00038be:	75 11                	jne    c00038d1 <dir_read+0x130>
c00038c0:	89 d0                	mov    eax,edx
c00038c2:	e8 35 e6 ff ff       	call   c0001efc <sum_sfn>
c00038c7:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038cb:	0f 84 31 ff ff ff    	je     c0003802 <dir_read+0x61>
c00038d1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038d8:	eb 37                	jmp    c0003911 <dir_read+0x170>
c00038da:	be ff ff ff ff       	mov    esi,0xffffffff
c00038df:	31 d2                	xor    edx,edx
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 01 fc ff ff       	call   c00034e9 <dir_next>
c00038e8:	89 c5                	mov    ebp,eax
c00038ea:	85 c0                	test   eax,eax
c00038ec:	0f 84 cd fe ff ff    	je     c00037bf <dir_read+0x1e>
c00038f2:	eb 0f                	jmp    c0003903 <dir_read+0x162>
c00038f4:	85 ed                	test   ebp,ebp
c00038f6:	0f 84 06 ff ff ff    	je     c0003802 <dir_read+0x61>
c00038fc:	eb 05                	jmp    c0003903 <dir_read+0x162>
c00038fe:	bd 04 00 00 00       	mov    ebp,0x4
c0003903:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003911:	83 c4 1c             	add    esp,0x1c
c0003914:	89 e8                	mov    eax,ebp
c0003916:	5b                   	pop    ebx
c0003917:	5e                   	pop    esi
c0003918:	5f                   	pop    edi
c0003919:	5d                   	pop    ebp
c000391a:	c3                   	ret    

c000391b <dir_alloc>:
c000391b:	55                   	push   ebp
c000391c:	89 d5                	mov    ebp,edx
c000391e:	57                   	push   edi
c000391f:	31 d2                	xor    edx,edx
c0003921:	56                   	push   esi
c0003922:	53                   	push   ebx
c0003923:	89 c3                	mov    ebx,eax
c0003925:	83 ec 0c             	sub    esp,0xc
c0003928:	8b 38                	mov    edi,DWORD PTR [eax]
c000392a:	e8 60 f6 ff ff       	call   c0002f8f <dir_sdi>
c000392f:	85 c0                	test   eax,eax
c0003931:	75 4e                	jne    c0003981 <dir_alloc+0x66>
c0003933:	31 f6                	xor    esi,esi
c0003935:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003938:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000393b:	89 f8                	mov    eax,edi
c000393d:	e8 d5 e8 ff ff       	call   c0002217 <move_window>
c0003942:	85 c0                	test   eax,eax
c0003944:	75 3b                	jne    c0003981 <dir_alloc+0x66>
c0003946:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003949:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000394c:	8a 12                	mov    dl,BYTE PTR [edx]
c000394e:	75 07                	jne    c0003957 <dir_alloc+0x3c>
c0003950:	f7 d2                	not    edx
c0003952:	c0 ea 07             	shr    dl,0x7
c0003955:	eb 0d                	jmp    c0003964 <dir_alloc+0x49>
c0003957:	80 fa e5             	cmp    dl,0xe5
c000395a:	0f 94 c1             	sete   cl
c000395d:	84 d2                	test   dl,dl
c000395f:	0f 94 c2             	sete   dl
c0003962:	09 ca                	or     edx,ecx
c0003964:	84 d2                	test   dl,dl
c0003966:	74 07                	je     c000396f <dir_alloc+0x54>
c0003968:	46                   	inc    esi
c0003969:	39 ee                	cmp    esi,ebp
c000396b:	75 04                	jne    c0003971 <dir_alloc+0x56>
c000396d:	eb 1c                	jmp    c000398b <dir_alloc+0x70>
c000396f:	31 f6                	xor    esi,esi
c0003971:	ba 01 00 00 00       	mov    edx,0x1
c0003976:	89 d8                	mov    eax,ebx
c0003978:	e8 6c fb ff ff       	call   c00034e9 <dir_next>
c000397d:	85 c0                	test   eax,eax
c000397f:	74 b4                	je     c0003935 <dir_alloc+0x1a>
c0003981:	83 f8 04             	cmp    eax,0x4
c0003984:	75 05                	jne    c000398b <dir_alloc+0x70>
c0003986:	b8 07 00 00 00       	mov    eax,0x7
c000398b:	83 c4 0c             	add    esp,0xc
c000398e:	5b                   	pop    ebx
c000398f:	5e                   	pop    esi
c0003990:	5f                   	pop    edi
c0003991:	5d                   	pop    ebp
c0003992:	c3                   	ret    

c0003993 <store_xdir>:
c0003993:	55                   	push   ebp
c0003994:	57                   	push   edi
c0003995:	89 c7                	mov    edi,eax
c0003997:	56                   	push   esi
c0003998:	53                   	push   ebx
c0003999:	83 ec 0c             	sub    esp,0xc
c000399c:	8b 00                	mov    eax,DWORD PTR [eax]
c000399e:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a1:	89 e8                	mov    eax,ebp
c00039a3:	e8 66 e5 ff ff       	call   c0001f0e <xdir_sum>
c00039a8:	0f b7 d0             	movzx  edx,ax
c00039ab:	8d 45 02             	lea    eax,[ebp+0x2]
c00039ae:	e8 ff e0 ff ff       	call   c0001ab2 <st_word>
c00039b3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039b6:	89 f8                	mov    eax,edi
c00039b8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039bc:	e8 ce f5 ff ff       	call   c0002f8f <dir_sdi>
c00039c1:	89 c6                	mov    esi,eax
c00039c3:	85 f6                	test   esi,esi
c00039c5:	75 3d                	jne    c0003a04 <store_xdir+0x71>
c00039c7:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039ca:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039cd:	8b 07                	mov    eax,DWORD PTR [edi]
c00039cf:	e8 43 e8 ff ff       	call   c0002217 <move_window>
c00039d4:	89 c6                	mov    esi,eax
c00039d6:	85 c0                	test   eax,eax
c00039d8:	75 2a                	jne    c0003a04 <store_xdir+0x71>
c00039da:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039dd:	b9 20 00 00 00       	mov    ecx,0x20
c00039e2:	89 ea                	mov    edx,ebp
c00039e4:	e8 d6 e0 ff ff       	call   c0001abf <mem_cpy>
c00039e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039eb:	85 db                	test   ebx,ebx
c00039ed:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f1:	74 11                	je     c0003a04 <store_xdir+0x71>
c00039f3:	31 d2                	xor    edx,edx
c00039f5:	89 f8                	mov    eax,edi
c00039f7:	e8 ed fa ff ff       	call   c00034e9 <dir_next>
c00039fc:	83 c5 20             	add    ebp,0x20
c00039ff:	89 c6                	mov    esi,eax
c0003a01:	4b                   	dec    ebx
c0003a02:	eb bf                	jmp    c00039c3 <store_xdir+0x30>
c0003a04:	89 f0                	mov    eax,esi
c0003a06:	83 fe 02             	cmp    esi,0x2
c0003a09:	76 05                	jbe    c0003a10 <store_xdir+0x7d>
c0003a0b:	b8 02 00 00 00       	mov    eax,0x2
c0003a10:	83 c4 0c             	add    esp,0xc
c0003a13:	5b                   	pop    ebx
c0003a14:	5e                   	pop    esi
c0003a15:	5f                   	pop    edi
c0003a16:	5d                   	pop    ebp
c0003a17:	c3                   	ret    

c0003a18 <dir_remove>:
c0003a18:	57                   	push   edi
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a20:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a22:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a25:	83 fa ff             	cmp    edx,0xffffffff
c0003a28:	74 09                	je     c0003a33 <dir_remove+0x1b>
c0003a2a:	e8 60 f5 ff ff       	call   c0002f8f <dir_sdi>
c0003a2f:	85 c0                	test   eax,eax
c0003a31:	75 41                	jne    c0003a74 <dir_remove+0x5c>
c0003a33:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a36:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a39:	89 f0                	mov    eax,esi
c0003a3b:	e8 d7 e7 ff ff       	call   c0002217 <move_window>
c0003a40:	85 c0                	test   eax,eax
c0003a42:	75 26                	jne    c0003a6a <dir_remove+0x52>
c0003a44:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a47:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4a:	75 05                	jne    c0003a51 <dir_remove+0x39>
c0003a4c:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a4f:	eb 03                	jmp    c0003a54 <dir_remove+0x3c>
c0003a51:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a54:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a58:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a5b:	73 17                	jae    c0003a74 <dir_remove+0x5c>
c0003a5d:	31 d2                	xor    edx,edx
c0003a5f:	89 d8                	mov    eax,ebx
c0003a61:	e8 83 fa ff ff       	call   c00034e9 <dir_next>
c0003a66:	85 c0                	test   eax,eax
c0003a68:	74 c9                	je     c0003a33 <dir_remove+0x1b>
c0003a6a:	83 f8 04             	cmp    eax,0x4
c0003a6d:	75 05                	jne    c0003a74 <dir_remove+0x5c>
c0003a6f:	b8 02 00 00 00       	mov    eax,0x2
c0003a74:	5b                   	pop    ebx
c0003a75:	5e                   	pop    esi
c0003a76:	5f                   	pop    edi
c0003a77:	c3                   	ret    

c0003a78 <create_name>:
c0003a78:	55                   	push   ebp
c0003a79:	89 d5                	mov    ebp,edx
c0003a7b:	57                   	push   edi
c0003a7c:	89 c7                	mov    edi,eax
c0003a7e:	56                   	push   esi
c0003a7f:	31 f6                	xor    esi,esi
c0003a81:	53                   	push   ebx
c0003a82:	83 ec 3c             	sub    esp,0x3c
c0003a85:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a8b:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a94:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a98:	e8 7d e0 ff ff       	call   c0001b1a <tchar2uni>
c0003a9d:	89 c3                	mov    ebx,eax
c0003a9f:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa2:	75 0a                	jne    c0003aae <create_name+0x36>
c0003aa4:	b8 06 00 00 00       	mov    eax,0x6
c0003aa9:	e9 83 02 00 00       	jmp    c0003d31 <create_name+0x2b9>
c0003aae:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab3:	76 0c                	jbe    c0003ac1 <create_name+0x49>
c0003ab5:	c1 e8 10             	shr    eax,0x10
c0003ab8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003abc:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac0:	46                   	inc    esi
c0003ac1:	66 83 fb 1f          	cmp    bx,0x1f
c0003ac5:	89 d8                	mov    eax,ebx
c0003ac7:	76 36                	jbe    c0003aff <create_name+0x87>
c0003ac9:	66 83 fb 2f          	cmp    bx,0x2f
c0003acd:	74 30                	je     c0003aff <create_name+0x87>
c0003acf:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad3:	74 39                	je     c0003b0e <create_name+0x96>
c0003ad5:	66 83 fb 7f          	cmp    bx,0x7f
c0003ad9:	77 11                	ja     c0003aec <create_name+0x74>
c0003adb:	0f b7 d3             	movzx  edx,bx
c0003ade:	b8 52 05 02 c0       	mov    eax,0xc0020552
c0003ae3:	e8 1a e0 ff ff       	call   c0001b02 <chk_chr>
c0003ae8:	85 c0                	test   eax,eax
c0003aea:	75 b8                	jne    c0003aa4 <create_name+0x2c>
c0003aec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af2:	77 b0                	ja     c0003aa4 <create_name+0x2c>
c0003af4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003af8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003afc:	46                   	inc    esi
c0003afd:	eb 95                	jmp    c0003a94 <create_name+0x1c>
c0003aff:	66 83 f8 1f          	cmp    ax,0x1f
c0003b03:	b3 04                	mov    bl,0x4
c0003b05:	76 19                	jbe    c0003b20 <create_name+0xa8>
c0003b07:	eb 05                	jmp    c0003b0e <create_name+0x96>
c0003b09:	40                   	inc    eax
c0003b0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b12:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b14:	80 fa 2f             	cmp    dl,0x2f
c0003b17:	74 f0                	je     c0003b09 <create_name+0x91>
c0003b19:	80 fa 5c             	cmp    dl,0x5c
c0003b1c:	74 eb                	je     c0003b09 <create_name+0x91>
c0003b1e:	31 db                	xor    ebx,ebx
c0003b20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b27:	85 f6                	test   esi,esi
c0003b29:	74 18                	je     c0003b43 <create_name+0xcb>
c0003b2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b2f:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b34:	66 83 f8 20          	cmp    ax,0x20
c0003b38:	74 06                	je     c0003b40 <create_name+0xc8>
c0003b3a:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3e:	75 03                	jne    c0003b43 <create_name+0xcb>
c0003b40:	4e                   	dec    esi
c0003b41:	eb e4                	jmp    c0003b27 <create_name+0xaf>
c0003b43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b47:	31 ed                	xor    ebp,ebp
c0003b49:	85 f6                	test   esi,esi
c0003b4b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b51:	0f 84 4d ff ff ff    	je     c0003aa4 <create_name+0x2c>
c0003b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b5b:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b5e:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b62:	66 83 f8 20          	cmp    ax,0x20
c0003b66:	75 04                	jne    c0003b6c <create_name+0xf4>
c0003b68:	89 d5                	mov    ebp,edx
c0003b6a:	eb eb                	jmp    c0003b57 <create_name+0xdf>
c0003b6c:	85 ed                	test   ebp,ebp
c0003b6e:	75 06                	jne    c0003b76 <create_name+0xfe>
c0003b70:	66 83 f8 2e          	cmp    ax,0x2e
c0003b74:	75 08                	jne    c0003b7e <create_name+0x106>
c0003b76:	83 cb 03             	or     ebx,0x3
c0003b79:	eb 03                	jmp    c0003b7e <create_name+0x106>
c0003b7b:	4e                   	dec    esi
c0003b7c:	74 0c                	je     c0003b8a <create_name+0x112>
c0003b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b82:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b88:	75 f1                	jne    c0003b7b <create_name+0x103>
c0003b8a:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b8f:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b92:	ba 20 00 00 00       	mov    edx,0x20
c0003b97:	e8 38 df ff ff       	call   c0001ad4 <mem_set>
c0003b9c:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba4:	31 c9                	xor    ecx,ecx
c0003ba6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bab:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bb6:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bba:	66 85 ed             	test   bp,bp
c0003bbd:	0f 84 1f 01 00 00    	je     c0003ce2 <create_name+0x26a>
c0003bc3:	66 83 fd 20          	cmp    bp,0x20
c0003bc7:	74 0c                	je     c0003bd5 <create_name+0x15d>
c0003bc9:	66 83 fd 2e          	cmp    bp,0x2e
c0003bcd:	75 0f                	jne    c0003bde <create_name+0x166>
c0003bcf:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd3:	74 09                	je     c0003bde <create_name+0x166>
c0003bd5:	83 cb 03             	or     ebx,0x3
c0003bd8:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003bdc:	eb cd                	jmp    c0003bab <create_name+0x133>
c0003bde:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be2:	73 06                	jae    c0003bea <create_name+0x172>
c0003be4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003be8:	75 3a                	jne    c0003c24 <create_name+0x1ac>
c0003bea:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bef:	75 08                	jne    c0003bf9 <create_name+0x181>
c0003bf1:	83 cb 03             	or     ebx,0x3
c0003bf4:	e9 e9 00 00 00       	jmp    c0003ce2 <create_name+0x26a>
c0003bf9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bfd:	74 0d                	je     c0003c0c <create_name+0x194>
c0003bff:	83 cb 03             	or     ebx,0x3
c0003c02:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c06:	0f 87 d6 00 00 00    	ja     c0003ce2 <create_name+0x26a>
c0003c0c:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c11:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c15:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c1d:	b9 08 00 00 00       	mov    ecx,0x8
c0003c22:	eb b4                	jmp    c0003bd8 <create_name+0x160>
c0003c24:	66 83 fd 7f          	cmp    bp,0x7f
c0003c28:	76 68                	jbe    c0003c92 <create_name+0x21a>
c0003c2a:	88 da                	mov    dl,bl
c0003c2c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c30:	83 ca 02             	or     edx,0x2
c0003c33:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c37:	50                   	push   eax
c0003c38:	50                   	push   eax
c0003c39:	68 b5 01 00 00       	push   0x1b5
c0003c3e:	55                   	push   ebp
c0003c3f:	e8 0f 46 00 00       	call   c0008253 <ff_uni2oem>
c0003c44:	83 c4 10             	add    esp,0x10
c0003c47:	89 c5                	mov    ebp,eax
c0003c49:	a8 80                	test   al,0x80
c0003c4b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c53:	74 0c                	je     c0003c61 <create_name+0x1e9>
c0003c55:	83 e5 7f             	and    ebp,0x7f
c0003c58:	0f b6 ad a0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb60]
c0003c5f:	eb 2a                	jmp    c0003c8b <create_name+0x213>
c0003c61:	66 3d ff 00          	cmp    ax,0xff
c0003c65:	76 24                	jbe    c0003c8b <create_name+0x213>
c0003c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c6b:	48                   	dec    eax
c0003c6c:	39 c8                	cmp    eax,ecx
c0003c6e:	77 0c                	ja     c0003c7c <create_name+0x204>
c0003c70:	83 cb 03             	or     ebx,0x3
c0003c73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c77:	e9 5c ff ff ff       	jmp    c0003bd8 <create_name+0x160>
c0003c7c:	89 e8                	mov    eax,ebp
c0003c7e:	88 d3                	mov    bl,dl
c0003c80:	66 c1 e8 08          	shr    ax,0x8
c0003c84:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c88:	41                   	inc    ecx
c0003c89:	eb 4b                	jmp    c0003cd6 <create_name+0x25e>
c0003c8b:	66 85 ed             	test   bp,bp
c0003c8e:	88 d3                	mov    bl,dl
c0003c90:	74 19                	je     c0003cab <create_name+0x233>
c0003c92:	0f b7 d5             	movzx  edx,bp
c0003c95:	b8 5b 05 02 c0       	mov    eax,0xc002055b
c0003c9a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c9e:	e8 5f de ff ff       	call   c0001b02 <chk_chr>
c0003ca3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ca7:	85 c0                	test   eax,eax
c0003ca9:	74 0a                	je     c0003cb5 <create_name+0x23d>
c0003cab:	83 cb 03             	or     ebx,0x3
c0003cae:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb3:	eb 21                	jmp    c0003cd6 <create_name+0x25e>
c0003cb5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cb8:	66 83 f8 19          	cmp    ax,0x19
c0003cbc:	77 07                	ja     c0003cc5 <create_name+0x24d>
c0003cbe:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc3:	eb 11                	jmp    c0003cd6 <create_name+0x25e>
c0003cc5:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cc8:	66 83 f8 19          	cmp    ax,0x19
c0003ccc:	77 08                	ja     c0003cd6 <create_name+0x25e>
c0003cce:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd3:	83 ed 20             	sub    ebp,0x20
c0003cd6:	89 e8                	mov    eax,ebp
c0003cd8:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cdc:	41                   	inc    ecx
c0003cdd:	e9 f6 fe ff ff       	jmp    c0003bd8 <create_name+0x160>
c0003ce2:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ce6:	75 04                	jne    c0003cec <create_name+0x274>
c0003ce8:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cec:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x280>
c0003cf3:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cf8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003cfc:	83 e0 0c             	and    eax,0xc
c0003cff:	3c 0c                	cmp    al,0xc
c0003d01:	74 0b                	je     c0003d0e <create_name+0x296>
c0003d03:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d07:	83 e0 03             	and    eax,0x3
c0003d0a:	3c 03                	cmp    al,0x3
c0003d0c:	75 05                	jne    c0003d13 <create_name+0x29b>
c0003d0e:	83 cb 02             	or     ebx,0x2
c0003d11:	eb 19                	jmp    c0003d2c <create_name+0x2b4>
c0003d13:	f6 c3 02             	test   bl,0x2
c0003d16:	75 14                	jne    c0003d2c <create_name+0x2b4>
c0003d18:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d1d:	74 03                	je     c0003d22 <create_name+0x2aa>
c0003d1f:	83 cb 10             	or     ebx,0x10
c0003d22:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d27:	74 03                	je     c0003d2c <create_name+0x2b4>
c0003d29:	83 cb 08             	or     ebx,0x8
c0003d2c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d2f:	31 c0                	xor    eax,eax
c0003d31:	83 c4 3c             	add    esp,0x3c
c0003d34:	5b                   	pop    ebx
c0003d35:	5e                   	pop    esi
c0003d36:	5f                   	pop    edi
c0003d37:	5d                   	pop    ebp
c0003d38:	c3                   	ret    

c0003d39 <xname_sum>:
c0003d39:	56                   	push   esi
c0003d3a:	89 c6                	mov    esi,eax
c0003d3c:	53                   	push   ebx
c0003d3d:	31 db                	xor    ebx,ebx
c0003d3f:	51                   	push   ecx
c0003d40:	83 c6 02             	add    esi,0x2
c0003d43:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d47:	66 85 c0             	test   ax,ax
c0003d4a:	74 1f                	je     c0003d6b <xname_sum+0x32>
c0003d4c:	66 d1 cb             	ror    bx,1
c0003d4f:	83 ec 0c             	sub    esp,0xc
c0003d52:	50                   	push   eax
c0003d53:	e8 00 46 00 00       	call   c0008358 <ff_wtoupper>
c0003d58:	0f b6 d0             	movzx  edx,al
c0003d5b:	01 d3                	add    ebx,edx
c0003d5d:	83 c4 10             	add    esp,0x10
c0003d60:	66 c1 e8 08          	shr    ax,0x8
c0003d64:	66 d1 cb             	ror    bx,1
c0003d67:	01 c3                	add    ebx,eax
c0003d69:	eb d5                	jmp    c0003d40 <xname_sum+0x7>
c0003d6b:	5a                   	pop    edx
c0003d6c:	89 d8                	mov    eax,ebx
c0003d6e:	5b                   	pop    ebx
c0003d6f:	5e                   	pop    esi
c0003d70:	c3                   	ret    

c0003d71 <create_xdir>:
c0003d71:	55                   	push   ebp
c0003d72:	b9 40 00 00 00       	mov    ecx,0x40
c0003d77:	57                   	push   edi
c0003d78:	bd 01 00 00 00       	mov    ebp,0x1
c0003d7d:	56                   	push   esi
c0003d7e:	31 ff                	xor    edi,edi
c0003d80:	53                   	push   ebx
c0003d81:	89 c3                	mov    ebx,eax
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	be 40 00 00 00       	mov    esi,0x40
c0003d8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d8f:	31 d2                	xor    edx,edx
c0003d91:	e8 3e dd ff ff       	call   c0001ad4 <mem_set>
c0003d96:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d99:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8d 46 01             	lea    eax,[esi+0x1]
c0003da2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003da6:	83 c6 02             	add    esi,0x2
c0003da9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dad:	66 85 ed             	test   bp,bp
c0003db0:	74 12                	je     c0003dc4 <create_xdir+0x53>
c0003db2:	0f b6 c1             	movzx  eax,cl
c0003db5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dbd:	66 83 fd 01          	cmp    bp,0x1
c0003dc1:	80 d9 ff             	sbb    cl,0xff
c0003dc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dc7:	83 c6 02             	add    esi,0x2
c0003dca:	0f b7 d5             	movzx  edx,bp
c0003dcd:	e8 e0 dc ff ff       	call   c0001ab2 <st_word>
c0003dd2:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dd8:	75 d3                	jne    c0003dad <create_xdir+0x3c>
c0003dda:	8d 47 01             	lea    eax,[edi+0x1]
c0003ddd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003de5:	0f b6 c1             	movzx  eax,cl
c0003de8:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ded:	74 07                	je     c0003df6 <create_xdir+0x85>
c0003def:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df4:	eb a9                	jmp    c0003d9f <create_xdir+0x2e>
c0003df6:	8d 47 02             	lea    eax,[edi+0x2]
c0003df9:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003dfc:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003dff:	89 d0                	mov    eax,edx
c0003e01:	e8 33 ff ff ff       	call   c0003d39 <xname_sum>
c0003e06:	83 c4 1c             	add    esp,0x1c
c0003e09:	0f b7 d0             	movzx  edx,ax
c0003e0c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	e9 9a dc ff ff       	jmp    c0001ab2 <st_word>

c0003e18 <cmp_lfn>:
c0003e18:	55                   	push   ebp
c0003e19:	57                   	push   edi
c0003e1a:	89 d7                	mov    edi,edx
c0003e1c:	56                   	push   esi
c0003e1d:	53                   	push   ebx
c0003e1e:	83 ec 1c             	sub    esp,0x1c
c0003e21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e25:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e28:	e8 13 dc ff ff       	call   c0001a40 <ld_word>
c0003e2d:	66 85 c0             	test   ax,ax
c0003e30:	74 07                	je     c0003e39 <cmp_lfn+0x21>
c0003e32:	31 c0                	xor    eax,eax
c0003e34:	e9 9a 00 00 00       	jmp    c0003ed3 <cmp_lfn+0xbb>
c0003e39:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e3b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e40:	83 e3 3f             	and    ebx,0x3f
c0003e43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e4b:	4b                   	dec    ebx
c0003e4c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e53:	0f b6 80 20 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfae0]
c0003e5a:	01 f8                	add    eax,edi
c0003e5c:	e8 df db ff ff       	call   c0001a40 <ld_word>
c0003e61:	66 85 ed             	test   bp,bp
c0003e64:	89 c6                	mov    esi,eax
c0003e66:	74 3c                	je     c0003ea4 <cmp_lfn+0x8c>
c0003e68:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e6e:	77 c2                	ja     c0003e32 <cmp_lfn+0x1a>
c0003e70:	83 ec 0c             	sub    esp,0xc
c0003e73:	0f b7 c0             	movzx  eax,ax
c0003e76:	50                   	push   eax
c0003e77:	e8 dc 44 00 00       	call   c0008358 <ff_wtoupper>
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e89:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e90:	e8 c3 44 00 00       	call   c0008358 <ff_wtoupper>
c0003e95:	83 c4 10             	add    esp,0x10
c0003e98:	39 c5                	cmp    ebp,eax
c0003e9a:	75 96                	jne    c0003e32 <cmp_lfn+0x1a>
c0003e9c:	89 f5                	mov    ebp,esi
c0003e9e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea2:	eb 04                	jmp    c0003ea8 <cmp_lfn+0x90>
c0003ea4:	66 46                	inc    si
c0003ea6:	75 8a                	jne    c0003e32 <cmp_lfn+0x1a>
c0003ea8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eac:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb1:	75 9c                	jne    c0003e4f <cmp_lfn+0x37>
c0003eb3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003eb6:	74 16                	je     c0003ece <cmp_lfn+0xb6>
c0003eb8:	66 85 ed             	test   bp,bp
c0003ebb:	74 11                	je     c0003ece <cmp_lfn+0xb6>
c0003ebd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ec6:	0f 94 c0             	sete   al
c0003ec9:	0f b6 c0             	movzx  eax,al
c0003ecc:	eb 05                	jmp    c0003ed3 <cmp_lfn+0xbb>
c0003ece:	b8 01 00 00 00       	mov    eax,0x1
c0003ed3:	83 c4 1c             	add    esp,0x1c
c0003ed6:	5b                   	pop    ebx
c0003ed7:	5e                   	pop    esi
c0003ed8:	5f                   	pop    edi
c0003ed9:	5d                   	pop    ebp
c0003eda:	c3                   	ret    

c0003edb <dir_find>:
c0003edb:	55                   	push   ebp
c0003edc:	31 d2                	xor    edx,edx
c0003ede:	57                   	push   edi
c0003edf:	56                   	push   esi
c0003ee0:	53                   	push   ebx
c0003ee1:	89 c3                	mov    ebx,eax
c0003ee3:	83 ec 1c             	sub    esp,0x1c
c0003ee6:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ee8:	e8 a2 f0 ff ff       	call   c0002f8f <dir_sdi>
c0003eed:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	0f 85 9f 01 00 00    	jne    c0004097 <dir_find+0x1bc>
c0003ef8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003efb:	0f 85 8e 00 00 00    	jne    c0003f8f <dir_find+0xb4>
c0003f01:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f04:	e8 30 fe ff ff       	call   c0003d39 <xname_sum>
c0003f09:	89 c5                	mov    ebp,eax
c0003f0b:	31 d2                	xor    edx,edx
c0003f0d:	89 d8                	mov    eax,ebx
c0003f0f:	e8 8d f8 ff ff       	call   c00037a1 <dir_read>
c0003f14:	85 c0                	test   eax,eax
c0003f16:	0f 85 5f 01 00 00    	jne    c000407b <dir_find+0x1a0>
c0003f1c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f1f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f22:	e8 19 db ff ff       	call   c0001a40 <ld_word>
c0003f27:	66 39 e8             	cmp    ax,bp
c0003f2a:	75 df                	jne    c0003f0b <dir_find+0x30>
c0003f2c:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f30:	31 ff                	xor    edi,edi
c0003f32:	ba 40 00 00 00       	mov    edx,0x40
c0003f37:	39 f9                	cmp    ecx,edi
c0003f39:	0f 84 4a 01 00 00    	je     c0004089 <dir_find+0x1ae>
c0003f3f:	f6 c2 1f             	test   dl,0x1f
c0003f42:	75 03                	jne    c0003f47 <dir_find+0x6c>
c0003f44:	83 c2 02             	add    edx,0x2
c0003f47:	89 d0                	mov    eax,edx
c0003f49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f4d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f50:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f54:	e8 e7 da ff ff       	call   c0001a40 <ld_word>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	0f b7 c0             	movzx  eax,ax
c0003f5f:	50                   	push   eax
c0003f60:	e8 f3 43 00 00       	call   c0008358 <ff_wtoupper>
c0003f65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f69:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f6c:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f70:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f73:	e8 e0 43 00 00       	call   c0008358 <ff_wtoupper>
c0003f78:	83 c4 10             	add    esp,0x10
c0003f7b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f7f:	75 8a                	jne    c0003f0b <dir_find+0x30>
c0003f81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f85:	47                   	inc    edi
c0003f86:	83 c2 02             	add    edx,0x2
c0003f89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f8d:	eb a8                	jmp    c0003f37 <dir_find+0x5c>
c0003f8f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f96:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fa6:	89 f0                	mov    eax,esi
c0003fa8:	e8 6a e2 ff ff       	call   c0002217 <move_window>
c0003fad:	85 c0                	test   eax,eax
c0003faf:	0f 85 c6 00 00 00    	jne    c000407b <dir_find+0x1a0>
c0003fb5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fb8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fbb:	84 c9                	test   cl,cl
c0003fbd:	0f 84 bd 00 00 00    	je     c0004080 <dir_find+0x1a5>
c0003fc3:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fc6:	88 d0                	mov    al,dl
c0003fc8:	83 e0 3f             	and    eax,0x3f
c0003fcb:	80 f9 e5             	cmp    cl,0xe5
c0003fce:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd1:	0f 84 87 00 00 00    	je     c000405e <dir_find+0x183>
c0003fd7:	80 e2 08             	and    dl,0x8
c0003fda:	74 06                	je     c0003fe2 <dir_find+0x107>
c0003fdc:	3c 0f                	cmp    al,0xf
c0003fde:	75 7e                	jne    c000405e <dir_find+0x183>
c0003fe0:	eb 04                	jmp    c0003fe6 <dir_find+0x10b>
c0003fe2:	3c 0f                	cmp    al,0xf
c0003fe4:	75 4c                	jne    c0004032 <dir_find+0x157>
c0003fe6:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fea:	75 7e                	jne    c000406a <dir_find+0x18f>
c0003fec:	f6 c1 40             	test   cl,0x40
c0003fef:	74 12                	je     c0004003 <dir_find+0x128>
c0003ff1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff4:	83 e1 bf             	and    ecx,0xffffffbf
c0003ff7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ffb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ffe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004001:	eb 06                	jmp    c0004009 <dir_find+0x12e>
c0004003:	89 f8                	mov    eax,edi
c0004005:	38 c8                	cmp    al,cl
c0004007:	75 5c                	jne    c0004065 <dir_find+0x18a>
c0004009:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000400d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004012:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004015:	75 53                	jne    c000406a <dir_find+0x18f>
c0004017:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401a:	89 ea                	mov    edx,ebp
c000401c:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004020:	e8 f3 fd ff ff       	call   c0003e18 <cmp_lfn>
c0004025:	85 c0                	test   eax,eax
c0004027:	74 41                	je     c000406a <dir_find+0x18f>
c0004029:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000402d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004030:	eb 38                	jmp    c000406a <dir_find+0x18f>
c0004032:	89 f8                	mov    eax,edi
c0004034:	84 c0                	test   al,al
c0004036:	75 0d                	jne    c0004045 <dir_find+0x16a>
c0004038:	89 e8                	mov    eax,ebp
c000403a:	e8 bd de ff ff       	call   c0001efc <sum_sfn>
c000403f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004043:	74 52                	je     c0004097 <dir_find+0x1bc>
c0004045:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004049:	75 13                	jne    c000405e <dir_find+0x183>
c000404b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000404e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004053:	89 e8                	mov    eax,ebp
c0004055:	e8 85 da ff ff       	call   c0001adf <mem_cmp>
c000405a:	85 c0                	test   eax,eax
c000405c:	74 39                	je     c0004097 <dir_find+0x1bc>
c000405e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004065:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406a:	31 d2                	xor    edx,edx
c000406c:	89 d8                	mov    eax,ebx
c000406e:	e8 76 f4 ff ff       	call   c00034e9 <dir_next>
c0004073:	85 c0                	test   eax,eax
c0004075:	0f 84 25 ff ff ff    	je     c0003fa0 <dir_find+0xc5>
c000407b:	89 04 24             	mov    DWORD PTR [esp],eax
c000407e:	eb 17                	jmp    c0004097 <dir_find+0x1bc>
c0004080:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004087:	eb 0e                	jmp    c0004097 <dir_find+0x1bc>
c0004089:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000408c:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004091:	0f 85 74 fe ff ff    	jne    c0003f0b <dir_find+0x30>
c0004097:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409a:	83 c4 1c             	add    esp,0x1c
c000409d:	5b                   	pop    ebx
c000409e:	5e                   	pop    esi
c000409f:	5f                   	pop    edi
c00040a0:	5d                   	pop    ebp
c00040a1:	c3                   	ret    

c00040a2 <dir_register>:
c00040a2:	55                   	push   ebp
c00040a3:	57                   	push   edi
c00040a4:	56                   	push   esi
c00040a5:	be 06 00 00 00       	mov    esi,0x6
c00040aa:	53                   	push   ebx
c00040ab:	83 ec 6c             	sub    esp,0x6c
c00040ae:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b2:	0f 85 63 02 00 00    	jne    c000431b <dir_register+0x279>
c00040b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040ba:	31 ff                	xor    edi,edi
c00040bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040bf:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c4:	74 03                	je     c00040c9 <dir_register+0x27>
c00040c6:	47                   	inc    edi
c00040c7:	eb f6                	jmp    c00040bf <dir_register+0x1d>
c00040c9:	89 c3                	mov    ebx,eax
c00040cb:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040cf:	0f 85 e1 00 00 00    	jne    c00041b6 <dir_register+0x114>
c00040d5:	83 c7 0e             	add    edi,0xe
c00040d8:	b9 0f 00 00 00       	mov    ecx,0xf
c00040dd:	89 f8                	mov    eax,edi
c00040df:	31 d2                	xor    edx,edx
c00040e1:	f7 f1                	div    ecx
c00040e3:	89 c7                	mov    edi,eax
c00040e5:	8d 50 02             	lea    edx,[eax+0x2]
c00040e8:	89 d8                	mov    eax,ebx
c00040ea:	e8 2c f8 ff ff       	call   c000391b <dir_alloc>
c00040ef:	89 c6                	mov    esi,eax
c00040f1:	85 c0                	test   eax,eax
c00040f3:	0f 85 22 02 00 00    	jne    c000431b <dir_register+0x279>
c00040f9:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040ff:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004102:	c1 e7 05             	shl    edi,0x5
c0004105:	29 f8                	sub    eax,edi
c0004107:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000410d:	a8 04                	test   al,0x4
c000410f:	0f 84 91 00 00 00    	je     c00041a6 <dir_register+0x104>
c0004115:	83 e0 fb             	and    eax,0xfffffffb
c0004118:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000411b:	89 d8                	mov    eax,ebx
c000411d:	e8 3d ec ff ff       	call   c0002d5f <fill_first_frag>
c0004122:	85 c0                	test   eax,eax
c0004124:	0f 85 ef 01 00 00    	jne    c0004319 <dir_register+0x277>
c000412a:	83 c9 ff             	or     ecx,0xffffffff
c000412d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004130:	89 d8                	mov    eax,ebx
c0004132:	e8 f3 eb ff ff       	call   c0002d2a <fill_last_frag>
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 da 01 00 00    	jne    c0004319 <dir_register+0x277>
c000413f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004143:	74 61                	je     c00041a6 <dir_register+0x104>
c0004145:	89 da                	mov    edx,ebx
c0004147:	8d 44 24 14          	lea    eax,[esp+0x14]
c000414b:	e8 04 f6 ff ff       	call   c0003754 <load_obj_xdir>
c0004150:	85 c0                	test   eax,eax
c0004152:	0f 85 c1 01 00 00    	jne    c0004319 <dir_register+0x277>
c0004158:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000415c:	c1 e2 09             	shl    edx,0x9
c000415f:	31 c9                	xor    ecx,ecx
c0004161:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004164:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004167:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000416d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004170:	83 c0 38             	add    eax,0x38
c0004173:	e8 41 d9 ff ff       	call   c0001ab9 <st_qword>
c0004178:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000417b:	83 c0 28             	add    eax,0x28
c000417e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004181:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004184:	e8 30 d9 ff ff       	call   c0001ab9 <st_qword>
c0004189:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000418c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000418f:	83 c8 01             	or     eax,0x1
c0004192:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004195:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004199:	e8 f5 f7 ff ff       	call   c0003993 <store_xdir>
c000419e:	85 c0                	test   eax,eax
c00041a0:	0f 85 73 01 00 00    	jne    c0004319 <dir_register+0x277>
c00041a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ac:	e8 c0 fb ff ff       	call   c0003d71 <create_xdir>
c00041b1:	e9 65 01 00 00       	jmp    c000431b <dir_register+0x279>
c00041b6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041b9:	b9 0c 00 00 00       	mov    ecx,0xc
c00041be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c2:	89 c2                	mov    edx,eax
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 f2 d8 ff ff       	call   c0001abf <mem_cpy>
c00041cd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d2:	74 58                	je     c000422c <dir_register+0x18a>
c00041d4:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041d8:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e0:	83 ec 0c             	sub    esp,0xc
c00041e3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f2:	e8 49 dc ff ff       	call   c0001e40 <gen_numname>
c00041f7:	89 d8                	mov    eax,ebx
c00041f9:	e8 dd fc ff ff       	call   c0003edb <dir_find>
c00041fe:	83 c4 10             	add    esp,0x10
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 15                	jne    c000421c <dir_register+0x17a>
c0004207:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000420b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004210:	75 ce                	jne    c00041e0 <dir_register+0x13e>
c0004212:	be 07 00 00 00       	mov    esi,0x7
c0004217:	e9 ff 00 00 00       	jmp    c000431b <dir_register+0x279>
c000421c:	83 f8 04             	cmp    eax,0x4
c000421f:	0f 85 f6 00 00 00    	jne    c000431b <dir_register+0x279>
c0004225:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004229:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000422c:	b9 01 00 00 00       	mov    ecx,0x1
c0004231:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004236:	74 0f                	je     c0004247 <dir_register+0x1a5>
c0004238:	b9 0d 00 00 00       	mov    ecx,0xd
c000423d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004240:	31 d2                	xor    edx,edx
c0004242:	f7 f1                	div    ecx
c0004244:	8d 48 01             	lea    ecx,[eax+0x1]
c0004247:	89 ca                	mov    edx,ecx
c0004249:	89 d8                	mov    eax,ebx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	e8 c7 f6 ff ff       	call   c000391b <dir_alloc>
c0004254:	89 c6                	mov    esi,eax
c0004256:	85 c0                	test   eax,eax
c0004258:	0f 85 bd 00 00 00    	jne    c000431b <dir_register+0x279>
c000425e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004262:	89 cf                	mov    edi,ecx
c0004264:	4f                   	dec    edi
c0004265:	74 6d                	je     c00042d4 <dir_register+0x232>
c0004267:	89 f8                	mov    eax,edi
c0004269:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000426c:	c1 e0 05             	shl    eax,0x5
c000426f:	29 c2                	sub    edx,eax
c0004271:	89 d8                	mov    eax,ebx
c0004273:	e8 17 ed ff ff       	call   c0002f8f <dir_sdi>
c0004278:	89 c6                	mov    esi,eax
c000427a:	85 c0                	test   eax,eax
c000427c:	0f 85 99 00 00 00    	jne    c000431b <dir_register+0x279>
c0004282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004286:	e8 71 dc ff ff       	call   c0001efc <sum_sfn>
c000428b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000428f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004292:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004295:	89 e8                	mov    eax,ebp
c0004297:	e8 7b df ff ff       	call   c0002217 <move_window>
c000429c:	89 c6                	mov    esi,eax
c000429e:	85 c0                	test   eax,eax
c00042a0:	75 79                	jne    c000431b <dir_register+0x279>
c00042a2:	83 ec 0c             	sub    esp,0xc
c00042a5:	89 f8                	mov    eax,edi
c00042a7:	0f b6 c8             	movzx  ecx,al
c00042aa:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b2:	52                   	push   edx
c00042b3:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042b6:	e8 01 db ff ff       	call   c0001dbc <put_lfn>
c00042bb:	31 d2                	xor    edx,edx
c00042bd:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c1:	89 d8                	mov    eax,ebx
c00042c3:	e8 21 f2 ff ff       	call   c00034e9 <dir_next>
c00042c8:	83 c4 10             	add    esp,0x10
c00042cb:	89 c6                	mov    esi,eax
c00042cd:	85 c0                	test   eax,eax
c00042cf:	75 4a                	jne    c000431b <dir_register+0x279>
c00042d1:	4f                   	dec    edi
c00042d2:	75 bb                	jne    c000428f <dir_register+0x1ed>
c00042d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042da:	89 e8                	mov    eax,ebp
c00042dc:	e8 36 df ff ff       	call   c0002217 <move_window>
c00042e1:	89 c6                	mov    esi,eax
c00042e3:	85 c0                	test   eax,eax
c00042e5:	75 34                	jne    c000431b <dir_register+0x279>
c00042e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ea:	b9 20 00 00 00       	mov    ecx,0x20
c00042ef:	31 d2                	xor    edx,edx
c00042f1:	e8 de d7 ff ff       	call   c0001ad4 <mem_set>
c00042f6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042fd:	b9 0b 00 00 00       	mov    ecx,0xb
c0004302:	e8 b8 d7 ff ff       	call   c0001abf <mem_cpy>
c0004307:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000430d:	83 e0 18             	and    eax,0x18
c0004310:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004313:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004317:	eb 02                	jmp    c000431b <dir_register+0x279>
c0004319:	89 c6                	mov    esi,eax
c000431b:	83 c4 6c             	add    esp,0x6c
c000431e:	89 f0                	mov    eax,esi
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <sync_fs>:
c0004325:	56                   	push   esi
c0004326:	53                   	push   ebx
c0004327:	53                   	push   ebx
c0004328:	89 c3                	mov    ebx,eax
c000432a:	e8 54 de ff ff       	call   c0002183 <sync_window>
c000432f:	85 c0                	test   eax,eax
c0004331:	0f 85 b1 00 00 00    	jne    c00043e8 <sync_fs+0xc3>
c0004337:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433a:	0f 85 8e 00 00 00    	jne    c00043ce <sync_fs+0xa9>
c0004340:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004344:	0f 85 84 00 00 00    	jne    c00043ce <sync_fs+0xa9>
c000434a:	8d 73 54             	lea    esi,[ebx+0x54]
c000434d:	b9 00 02 00 00       	mov    ecx,0x200
c0004352:	31 d2                	xor    edx,edx
c0004354:	89 f0                	mov    eax,esi
c0004356:	e8 79 d7 ff ff       	call   c0001ad4 <mem_set>
c000435b:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004361:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004366:	e8 47 d7 ff ff       	call   c0001ab2 <st_word>
c000436b:	ba 52 52 61 41       	mov    edx,0x41615252
c0004370:	89 f0                	mov    eax,esi
c0004372:	e8 3f d7 ff ff       	call   c0001ab6 <st_dword>
c0004377:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000437d:	ba 72 72 41 61       	mov    edx,0x61417272
c0004382:	e8 2f d7 ff ff       	call   c0001ab6 <st_dword>
c0004387:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438a:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004390:	e8 21 d7 ff ff       	call   c0001ab6 <st_dword>
c0004395:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004398:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000439e:	e8 13 d7 ff ff       	call   c0001ab6 <st_dword>
c00043a3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043a6:	83 c0 01             	add    eax,0x1
c00043a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ac:	83 d2 00             	adc    edx,0x0
c00043af:	83 ec 0c             	sub    esp,0xc
c00043b2:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043b5:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043b8:	6a 01                	push   0x1
c00043ba:	52                   	push   edx
c00043bb:	50                   	push   eax
c00043bc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c0:	56                   	push   esi
c00043c1:	50                   	push   eax
c00043c2:	e8 44 d6 ff ff       	call   c0001a0b <disk_write>
c00043c7:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043cb:	83 c4 20             	add    esp,0x20
c00043ce:	51                   	push   ecx
c00043cf:	6a 00                	push   0x0
c00043d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043d5:	6a 00                	push   0x0
c00043d7:	50                   	push   eax
c00043d8:	e8 44 d6 ff ff       	call   c0001a21 <disk_ioctl>
c00043dd:	83 c4 10             	add    esp,0x10
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 95 c0             	setne  al
c00043e5:	0f b6 c0             	movzx  eax,al
c00043e8:	5a                   	pop    edx
c00043e9:	5b                   	pop    ebx
c00043ea:	5e                   	pop    esi
c00043eb:	c3                   	ret    

c00043ec <create_partition>:
c00043ec:	55                   	push   ebp
c00043ed:	57                   	push   edi
c00043ee:	56                   	push   esi
c00043ef:	53                   	push   ebx
c00043f0:	83 ec 60             	sub    esp,0x60
c00043f3:	0f b6 c0             	movzx  eax,al
c00043f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043fa:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043fe:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004402:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004406:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440a:	50                   	push   eax
c000440b:	6a 01                	push   0x1
c000440d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004411:	e8 0b d6 ff ff       	call   c0001a21 <disk_ioctl>
c0004416:	83 c4 10             	add    esp,0x10
c0004419:	85 c0                	test   eax,eax
c000441b:	74 0a                	je     c0004427 <create_partition+0x3b>
c000441d:	b8 01 00 00 00       	mov    eax,0x1
c0004422:	e9 73 05 00 00       	jmp    c000499a <create_partition+0x5ae>
c0004427:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000442b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000442f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004433:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004437:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000443c:	0f 86 ed 03 00 00    	jbe    c000482f <create_partition+0x443>
c0004442:	83 c0 df             	add    eax,0xffffffdf
c0004445:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000444d:	83 d2 ff             	adc    edx,0xffffffff
c0004450:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004458:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000445c:	83 c0 bd             	add    eax,0xffffffbd
c000445f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004463:	83 d2 ff             	adc    edx,0xffffffff
c0004466:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004475:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000447d:	be 22 00 00 00       	mov    esi,0x22
c0004482:	31 ff                	xor    edi,edi
c0004484:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000448c:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004494:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000449c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044a6:	75 0e                	jne    c00044b6 <create_partition+0xca>
c00044a8:	b9 00 02 00 00       	mov    ecx,0x200
c00044ad:	31 d2                	xor    edx,edx
c00044af:	89 d8                	mov    eax,ebx
c00044b1:	e8 1e d6 ff ff       	call   c0001ad4 <mem_set>
c00044b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c2:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044c5:	0f 84 23 01 00 00    	je     c00045ee <create_partition+0x202>
c00044cb:	89 f0                	mov    eax,esi
c00044cd:	89 fa                	mov    edx,edi
c00044cf:	05 ff 07 00 00       	add    eax,0x7ff
c00044d4:	83 d2 00             	adc    edx,0x0
c00044d7:	89 c1                	mov    ecx,eax
c00044d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e3:	89 ce                	mov    esi,ecx
c00044e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e9:	89 d7                	mov    edi,edx
c00044eb:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044ef:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f3:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f9:	b8 64 00 00 00       	mov    eax,0x64
c00044fe:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004501:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004505:	b8 00 00 00 00       	mov    eax,0x0
c000450a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000450e:	72 41                	jb     c0004551 <create_partition+0x165>
c0004510:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004518:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000451d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004521:	01 c1                	add    ecx,eax
c0004523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004527:	f7 24 24             	mul    DWORD PTR [esp]
c000452a:	6a 00                	push   0x0
c000452c:	01 ca                	add    edx,ecx
c000452e:	6a 64                	push   0x64
c0004530:	52                   	push   edx
c0004531:	50                   	push   eax
c0004532:	e8 c5 af 01 00       	call   c001f4fc <__udivdi3>
c0004537:	83 c4 10             	add    esp,0x10
c000453a:	05 ff 07 00 00       	add    eax,0x7ff
c000453f:	83 d2 00             	adc    edx,0x0
c0004542:	89 c1                	mov    ecx,eax
c0004544:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000454e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004551:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004554:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004558:	01 f0                	add    eax,esi
c000455a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000455e:	11 fa                	adc    edx,edi
c0004560:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004564:	19 d1                	sbb    ecx,edx
c0004566:	73 2e                	jae    c0004596 <create_partition+0x1aa>
c0004568:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000456c:	89 f8                	mov    eax,edi
c000456e:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004572:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004579:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004581:	73 6b                	jae    c00045ee <create_partition+0x202>
c0004583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000458b:	29 f0                	sub    eax,esi
c000458d:	19 fa                	sbb    edx,edi
c000458f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459a:	0b 04 24             	or     eax,DWORD PTR [esp]
c000459d:	74 4f                	je     c00045ee <create_partition+0x202>
c000459f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a2:	b9 10 00 00 00       	mov    ecx,0x10
c00045a7:	ba 30 05 02 c0       	mov    edx,0xc0020530
c00045ac:	e8 0e d5 ff ff       	call   c0001abf <mem_cpy>
c00045b1:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045b5:	b9 10 00 00 00       	mov    ecx,0x10
c00045ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045be:	e8 49 db ff ff       	call   c000210c <make_rand>
c00045c3:	89 f2                	mov    edx,esi
c00045c5:	89 f9                	mov    ecx,edi
c00045c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045cb:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045cf:	e8 e5 d4 ff ff       	call   c0001ab9 <st_qword>
c00045d4:	03 34 24             	add    esi,DWORD PTR [esp]
c00045d7:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045db:	89 f2                	mov    edx,esi
c00045dd:	89 f9                	mov    ecx,edi
c00045df:	83 c2 ff             	add    edx,0xffffffff
c00045e2:	83 d1 ff             	adc    ecx,0xffffffff
c00045e5:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045e9:	e8 cb d4 ff ff       	call   c0001ab9 <st_qword>
c00045ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f2:	83 e8 80             	sub    eax,0xffffff80
c00045f5:	89 c5                	mov    ebp,eax
c00045f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045fb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004601:	75 6b                	jne    c000466e <create_partition+0x282>
c0004603:	45                   	inc    ebp
c0004604:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004608:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000460d:	e8 56 da ff ff       	call   c0002068 <crc32>
c0004612:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004618:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000461c:	75 e5                	jne    c0004603 <create_partition+0x217>
c000461e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004622:	83 ec 0c             	sub    esp,0xc
c0004625:	c1 ed 09             	shr    ebp,0x9
c0004628:	31 d2                	xor    edx,edx
c000462a:	6a 01                	push   0x1
c000462c:	52                   	push   edx
c000462d:	8d 45 02             	lea    eax,[ebp+0x2]
c0004630:	50                   	push   eax
c0004631:	53                   	push   ebx
c0004632:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004636:	e8 d0 d3 ff ff       	call   c0001a0b <disk_write>
c000463b:	83 c4 20             	add    esp,0x20
c000463e:	85 c0                	test   eax,eax
c0004640:	0f 85 d7 fd ff ff    	jne    c000441d <create_partition+0x31>
c0004646:	83 ec 0c             	sub    esp,0xc
c0004649:	89 e8                	mov    eax,ebp
c000464b:	31 d2                	xor    edx,edx
c000464d:	6a 01                	push   0x1
c000464f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004653:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004657:	52                   	push   edx
c0004658:	50                   	push   eax
c0004659:	53                   	push   ebx
c000465a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000465e:	e8 a8 d3 ff ff       	call   c0001a0b <disk_write>
c0004663:	83 c4 20             	add    esp,0x20
c0004666:	85 c0                	test   eax,eax
c0004668:	0f 85 af fd ff ff    	jne    c000441d <create_partition+0x31>
c000466e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004672:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004676:	3d 00 40 00 00       	cmp    eax,0x4000
c000467b:	74 0d                	je     c000468a <create_partition+0x29e>
c000467d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004681:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004685:	e9 12 fe ff ff       	jmp    c000449c <create_partition+0xb0>
c000468a:	31 d2                	xor    edx,edx
c000468c:	b9 00 02 00 00       	mov    ecx,0x200
c0004691:	89 d8                	mov    eax,ebx
c0004693:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004696:	e8 39 d4 ff ff       	call   c0001ad4 <mem_set>
c000469b:	b9 10 00 00 00       	mov    ecx,0x10
c00046a0:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00046a5:	89 d8                	mov    eax,ebx
c00046a7:	e8 13 d4 ff ff       	call   c0001abf <mem_cpy>
c00046ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b0:	f7 d2                	not    edx
c00046b2:	8d 43 58             	lea    eax,[ebx+0x58]
c00046b5:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046b8:	e8 f9 d3 ff ff       	call   c0001ab6 <st_dword>
c00046bd:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c0:	31 c9                	xor    ecx,ecx
c00046c2:	ba 01 00 00 00       	mov    edx,0x1
c00046c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ca:	e8 ea d3 ff ff       	call   c0001ab9 <st_qword>
c00046cf:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046d7:	83 c2 ff             	add    edx,0xffffffff
c00046da:	89 e8                	mov    eax,ebp
c00046dc:	83 d1 ff             	adc    ecx,0xffffffff
c00046df:	e8 d5 d3 ff ff       	call   c0001ab9 <st_qword>
c00046e4:	31 c9                	xor    ecx,ecx
c00046e6:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e9:	ba 22 00 00 00       	mov    edx,0x22
c00046ee:	e8 c6 d3 ff ff       	call   c0001ab9 <st_qword>
c00046f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046f7:	83 c2 de             	add    edx,0xffffffde
c00046fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046fe:	83 d1 ff             	adc    ecx,0xffffffff
c0004701:	8d 43 30             	lea    eax,[ebx+0x30]
c0004704:	e8 b0 d3 ff ff       	call   c0001ab9 <st_qword>
c0004709:	8d 43 54             	lea    eax,[ebx+0x54]
c000470c:	ba 80 00 00 00       	mov    edx,0x80
c0004711:	31 f6                	xor    esi,esi
c0004713:	e8 9e d3 ff ff       	call   c0001ab6 <st_dword>
c0004718:	8d 43 50             	lea    eax,[ebx+0x50]
c000471b:	ba 80 00 00 00       	mov    edx,0x80
c0004720:	e8 91 d3 ff ff       	call   c0001ab6 <st_dword>
c0004725:	ba 02 00 00 00       	mov    edx,0x2
c000472a:	89 f8                	mov    eax,edi
c000472c:	e8 85 d3 ff ff       	call   c0001ab6 <st_dword>
c0004731:	8d 53 38             	lea    edx,[ebx+0x38]
c0004734:	b9 10 00 00 00       	mov    ecx,0x10
c0004739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000473d:	e8 ca d9 ff ff       	call   c000210c <make_rand>
c0004742:	83 c8 ff             	or     eax,0xffffffff
c0004745:	46                   	inc    esi
c0004746:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000474b:	e8 18 d9 ff ff       	call   c0002068 <crc32>
c0004750:	83 fe 5c             	cmp    esi,0x5c
c0004753:	75 f0                	jne    c0004745 <create_partition+0x359>
c0004755:	f7 d0                	not    eax
c0004757:	8d 73 10             	lea    esi,[ebx+0x10]
c000475a:	89 c2                	mov    edx,eax
c000475c:	89 f0                	mov    eax,esi
c000475e:	e8 53 d3 ff ff       	call   c0001ab6 <st_dword>
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	6a 01                	push   0x1
c0004768:	6a 00                	push   0x0
c000476a:	6a 01                	push   0x1
c000476c:	53                   	push   ebx
c000476d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004771:	e8 95 d2 ff ff       	call   c0001a0b <disk_write>
c0004776:	83 c4 20             	add    esp,0x20
c0004779:	85 c0                	test   eax,eax
c000477b:	0f 85 9c fc ff ff    	jne    c000441d <create_partition+0x31>
c0004781:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004785:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004789:	83 c2 ff             	add    edx,0xffffffff
c000478c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000478f:	83 d1 ff             	adc    ecx,0xffffffff
c0004792:	e8 22 d3 ff ff       	call   c0001ab9 <st_qword>
c0004797:	ba 01 00 00 00       	mov    edx,0x1
c000479c:	31 c9                	xor    ecx,ecx
c000479e:	89 e8                	mov    eax,ebp
c00047a0:	e8 14 d3 ff ff       	call   c0001ab9 <st_qword>
c00047a5:	89 f8                	mov    eax,edi
c00047a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047af:	e8 05 d3 ff ff       	call   c0001ab9 <st_qword>
c00047b4:	89 f0                	mov    eax,esi
c00047b6:	31 d2                	xor    edx,edx
c00047b8:	31 ff                	xor    edi,edi
c00047ba:	e8 f7 d2 ff ff       	call   c0001ab6 <st_dword>
c00047bf:	83 c8 ff             	or     eax,0xffffffff
c00047c2:	47                   	inc    edi
c00047c3:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047c8:	e8 9b d8 ff ff       	call   c0002068 <crc32>
c00047cd:	83 ff 5c             	cmp    edi,0x5c
c00047d0:	75 f0                	jne    c00047c2 <create_partition+0x3d6>
c00047d2:	f7 d0                	not    eax
c00047d4:	89 c2                	mov    edx,eax
c00047d6:	89 f0                	mov    eax,esi
c00047d8:	e8 d9 d2 ff ff       	call   c0001ab6 <st_dword>
c00047dd:	83 ec 0c             	sub    esp,0xc
c00047e0:	6a 01                	push   0x1
c00047e2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047e6:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ea:	83 c0 ff             	add    eax,0xffffffff
c00047ed:	83 d2 ff             	adc    edx,0xffffffff
c00047f0:	52                   	push   edx
c00047f1:	50                   	push   eax
c00047f2:	53                   	push   ebx
c00047f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047f7:	e8 0f d2 ff ff       	call   c0001a0b <disk_write>
c00047fc:	83 c4 20             	add    esp,0x20
c00047ff:	85 c0                	test   eax,eax
c0004801:	0f 85 16 fc ff ff    	jne    c000441d <create_partition+0x31>
c0004807:	31 d2                	xor    edx,edx
c0004809:	89 d8                	mov    eax,ebx
c000480b:	b9 00 02 00 00       	mov    ecx,0x200
c0004810:	e8 bf d2 ff ff       	call   c0001ad4 <mem_set>
c0004815:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000481b:	b9 10 00 00 00       	mov    ecx,0x10
c0004820:	ba 30 04 02 c0       	mov    edx,0xc0020430
c0004825:	e8 95 d2 ff ff       	call   c0001abf <mem_cpy>
c000482a:	e9 3d 01 00 00       	jmp    c000496c <create_partition+0x580>
c000482f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004833:	b9 05 00 00 00       	mov    ecx,0x5
c0004838:	89 04 24             	mov    DWORD PTR [esp],eax
c000483b:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004840:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004845:	31 d2                	xor    edx,edx
c0004847:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484a:	f7 f6                	div    esi
c000484c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004851:	76 0c                	jbe    c000485f <create_partition+0x473>
c0004853:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004857:	49                   	dec    ecx
c0004858:	75 e6                	jne    c0004840 <create_partition+0x454>
c000485a:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c000485f:	b9 00 02 00 00       	mov    ecx,0x200
c0004864:	31 d2                	xor    edx,edx
c0004866:	89 d8                	mov    eax,ebx
c0004868:	bd 3f 00 00 00       	mov    ebp,0x3f
c000486d:	e8 62 d2 ff ff       	call   c0001ad4 <mem_set>
c0004872:	b9 64 00 00 00       	mov    ecx,0x64
c0004877:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487a:	31 d2                	xor    edx,edx
c000487c:	f7 f1                	div    ecx
c000487e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004882:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c0004888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004890:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c0004895:	0f 96 c2             	setbe  dl
c0004898:	85 ed                	test   ebp,ebp
c000489a:	0f 95 c0             	setne  al
c000489d:	84 c2                	test   dl,al
c000489f:	0f 84 c7 00 00 00    	je     c000496c <create_partition+0x580>
c00048a5:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048a8:	0f 83 be 00 00 00    	jae    c000496c <create_partition+0x580>
c00048ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048b6:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048b9:	83 fe 64             	cmp    esi,0x64
c00048bc:	77 0c                	ja     c00048ca <create_partition+0x4de>
c00048be:	74 07                	je     c00048c7 <create_partition+0x4db>
c00048c0:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048c5:	eb 03                	jmp    c00048ca <create_partition+0x4de>
c00048c7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048ca:	89 e8                	mov    eax,ebp
c00048cc:	01 f0                	add    eax,esi
c00048ce:	72 05                	jb     c00048d5 <create_partition+0x4e9>
c00048d0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d3:	76 07                	jbe    c00048dc <create_partition+0x4f0>
c00048d5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048d8:	29 ee                	sub    esi,ebp
c00048da:	eb 08                	jmp    c00048e4 <create_partition+0x4f8>
c00048dc:	85 f6                	test   esi,esi
c00048de:	0f 84 88 00 00 00    	je     c000496c <create_partition+0x580>
c00048e4:	89 c8                	mov    eax,ecx
c00048e6:	89 ea                	mov    edx,ebp
c00048e8:	e8 c9 d1 ff ff       	call   c0001ab6 <st_dword>
c00048ed:	89 f2                	mov    edx,esi
c00048ef:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f4:	8d 41 04             	lea    eax,[ecx+0x4]
c00048f7:	e8 ba d1 ff ff       	call   c0001ab6 <st_dword>
c00048fc:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004900:	31 d2                	xor    edx,edx
c0004902:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004906:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004909:	83 c1 10             	add    ecx,0x10
c000490c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004911:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004915:	89 e8                	mov    eax,ebp
c0004917:	f7 f7                	div    edi
c0004919:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000491d:	31 d2                	xor    edx,edx
c000491f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004923:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004926:	89 c2                	mov    edx,eax
c0004928:	c1 ea 02             	shr    edx,0x2
c000492b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000492f:	47                   	inc    edi
c0004930:	01 f5                	add    ebp,esi
c0004932:	83 e2 c0             	and    edx,0xffffffc0
c0004935:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004938:	09 fa                	or     edx,edi
c000493a:	8d 45 ff             	lea    eax,[ebp-0x1]
c000493d:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004940:	bf 3f 00 00 00       	mov    edi,0x3f
c0004945:	31 d2                	xor    edx,edx
c0004947:	f7 f7                	div    edi
c0004949:	89 d6                	mov    esi,edx
c000494b:	31 d2                	xor    edx,edx
c000494d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004951:	89 c7                	mov    edi,eax
c0004953:	46                   	inc    esi
c0004954:	c1 ef 02             	shr    edi,0x2
c0004957:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495a:	83 e7 c0             	and    edi,0xffffffc0
c000495d:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004960:	09 fe                	or     esi,edi
c0004962:	89 f2                	mov    edx,esi
c0004964:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004967:	e9 24 ff ff ff       	jmp    c0004890 <create_partition+0x4a4>
c000496c:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004972:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004977:	e8 36 d1 ff ff       	call   c0001ab2 <st_word>
c000497c:	83 ec 0c             	sub    esp,0xc
c000497f:	6a 01                	push   0x1
c0004981:	6a 00                	push   0x0
c0004983:	6a 00                	push   0x0
c0004985:	53                   	push   ebx
c0004986:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498a:	e8 7c d0 ff ff       	call   c0001a0b <disk_write>
c000498f:	83 c4 20             	add    esp,0x20
c0004992:	85 c0                	test   eax,eax
c0004994:	0f 95 c0             	setne  al
c0004997:	0f b6 c0             	movzx  eax,al
c000499a:	83 c4 5c             	add    esp,0x5c
c000499d:	5b                   	pop    ebx
c000499e:	5e                   	pop    esi
c000499f:	5f                   	pop    edi
c00049a0:	5d                   	pop    ebp
c00049a1:	c3                   	ret    

c00049a2 <get_fileinfo>:
c00049a2:	55                   	push   ebp
c00049a3:	57                   	push   edi
c00049a4:	56                   	push   esi
c00049a5:	53                   	push   ebx
c00049a6:	83 ec 1c             	sub    esp,0x1c
c00049a9:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ab:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049af:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049b6:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049b9:	0f 84 dc 01 00 00    	je     c0004b9b <get_fileinfo+0x1f9>
c00049bf:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c2:	75 0f                	jne    c00049d3 <get_fileinfo+0x31>
c00049c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049c7:	83 c4 1c             	add    esp,0x1c
c00049ca:	5b                   	pop    ebx
c00049cb:	5e                   	pop    esi
c00049cc:	5f                   	pop    edi
c00049cd:	5d                   	pop    ebp
c00049ce:	e9 70 d5 ff ff       	jmp    c0001f43 <get_xfileinfo>
c00049d3:	89 d3                	mov    ebx,edx
c00049d5:	89 c6                	mov    esi,eax
c00049d7:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049db:	74 6a                	je     c0004a47 <get_fileinfo+0xa5>
c00049dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049e5:	31 ed                	xor    ebp,ebp
c00049e7:	31 ff                	xor    edi,edi
c00049e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f4:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049f8:	66 85 d2             	test   dx,dx
c00049fb:	74 3e                	je     c0004a3b <get_fileinfo+0x99>
c00049fd:	66 85 ed             	test   bp,bp
c0004a00:	75 0c                	jne    c0004a0e <get_fileinfo+0x6c>
c0004a02:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a08:	66 3d ff 07          	cmp    ax,0x7ff
c0004a0c:	76 22                	jbe    c0004a30 <get_fileinfo+0x8e>
c0004a0e:	89 e8                	mov    eax,ebp
c0004a10:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a15:	c1 e0 10             	shl    eax,0x10
c0004a18:	29 f9                	sub    ecx,edi
c0004a1a:	09 d0                	or     eax,edx
c0004a1c:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a20:	e8 bb d1 ff ff       	call   c0001be0 <put_utf>
c0004a25:	84 c0                	test   al,al
c0004a27:	74 10                	je     c0004a39 <get_fileinfo+0x97>
c0004a29:	0f b6 c0             	movzx  eax,al
c0004a2c:	01 c7                	add    edi,eax
c0004a2e:	31 d2                	xor    edx,edx
c0004a30:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a35:	89 d5                	mov    ebp,edx
c0004a37:	eb b0                	jmp    c00049e9 <get_fileinfo+0x47>
c0004a39:	31 ff                	xor    edi,edi
c0004a3b:	66 85 ed             	test   bp,bp
c0004a3e:	74 02                	je     c0004a42 <get_fileinfo+0xa0>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a47:	31 ff                	xor    edi,edi
c0004a49:	31 c9                	xor    ecx,ecx
c0004a4b:	83 f9 0a             	cmp    ecx,0xa
c0004a4e:	0f 87 ad 00 00 00    	ja     c0004b01 <get_fileinfo+0x15f>
c0004a54:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a57:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5a:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a5e:	66 83 fa 20          	cmp    dx,0x20
c0004a62:	0f 84 92 00 00 00    	je     c0004afa <get_fileinfo+0x158>
c0004a68:	66 83 fa 05          	cmp    dx,0x5
c0004a6c:	75 05                	jne    c0004a73 <get_fileinfo+0xd1>
c0004a6e:	ba e5 00 00 00       	mov    edx,0xe5
c0004a73:	83 fd 09             	cmp    ebp,0x9
c0004a76:	75 0b                	jne    c0004a83 <get_fileinfo+0xe1>
c0004a78:	83 ff 0b             	cmp    edi,0xb
c0004a7b:	77 06                	ja     c0004a83 <get_fileinfo+0xe1>
c0004a7d:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a82:	47                   	inc    edi
c0004a83:	0f b7 c2             	movzx  eax,dx
c0004a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8a:	e8 85 d0 ff ff       	call   c0001b14 <dbc_1st>
c0004a8f:	85 c0                	test   eax,eax
c0004a91:	74 2f                	je     c0004ac2 <get_fileinfo+0x120>
c0004a93:	83 fd 08             	cmp    ebp,0x8
c0004a96:	74 2a                	je     c0004ac2 <get_fileinfo+0x120>
c0004a98:	83 fd 0b             	cmp    ebp,0xb
c0004a9b:	74 25                	je     c0004ac2 <get_fileinfo+0x120>
c0004a9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa0:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aa8:	e8 6a d0 ff ff       	call   c0001b17 <dbc_2nd>
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	74 11                	je     c0004ac2 <get_fileinfo+0x120>
c0004ab1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ab5:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ab8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004abd:	c1 e2 08             	shl    edx,0x8
c0004ac0:	09 c2                	or     edx,eax
c0004ac2:	50                   	push   eax
c0004ac3:	50                   	push   eax
c0004ac4:	68 b5 01 00 00       	push   0x1b5
c0004ac9:	0f b7 d2             	movzx  edx,dx
c0004acc:	52                   	push   edx
c0004acd:	e8 17 38 00 00       	call   c00082e9 <ff_oem2uni>
c0004ad2:	83 c4 10             	add    esp,0x10
c0004ad5:	66 85 c0             	test   ax,ax
c0004ad8:	75 04                	jne    c0004ade <get_fileinfo+0x13c>
c0004ada:	31 ff                	xor    edi,edi
c0004adc:	eb 23                	jmp    c0004b01 <get_fileinfo+0x15f>
c0004ade:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae3:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ae7:	29 f9                	sub    ecx,edi
c0004ae9:	0f b7 c0             	movzx  eax,ax
c0004aec:	e8 ef d0 ff ff       	call   c0001be0 <put_utf>
c0004af1:	84 c0                	test   al,al
c0004af3:	74 e5                	je     c0004ada <get_fileinfo+0x138>
c0004af5:	0f b6 c0             	movzx  eax,al
c0004af8:	01 c7                	add    edi,eax
c0004afa:	89 e9                	mov    ecx,ebp
c0004afc:	e9 4a ff ff ff       	jmp    c0004a4b <get_fileinfo+0xa9>
c0004b01:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b06:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0a:	75 54                	jne    c0004b60 <get_fileinfo+0x1be>
c0004b0c:	85 ff                	test   edi,edi
c0004b0e:	75 0b                	jne    c0004b1b <get_fileinfo+0x179>
c0004b10:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b14:	ba 01 00 00 00       	mov    edx,0x1
c0004b19:	eb 33                	jmp    c0004b4e <get_fileinfo+0x1ac>
c0004b1b:	b1 08                	mov    cl,0x8
c0004b1d:	31 d2                	xor    edx,edx
c0004b1f:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b25:	84 c0                	test   al,al
c0004b27:	74 25                	je     c0004b4e <get_fileinfo+0x1ac>
c0004b29:	66 83 f8 2e          	cmp    ax,0x2e
c0004b2d:	74 16                	je     c0004b45 <get_fileinfo+0x1a3>
c0004b2f:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b32:	66 83 ff 19          	cmp    di,0x19
c0004b36:	77 0f                	ja     c0004b47 <get_fileinfo+0x1a5>
c0004b38:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b3b:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b3e:	74 07                	je     c0004b47 <get_fileinfo+0x1a5>
c0004b40:	83 c0 20             	add    eax,0x20
c0004b43:	eb 02                	jmp    c0004b47 <get_fileinfo+0x1a5>
c0004b45:	b1 10                	mov    cl,0x10
c0004b47:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b4b:	42                   	inc    edx
c0004b4c:	eb d1                	jmp    c0004b1f <get_fileinfo+0x17d>
c0004b4e:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b56:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5a:	75 04                	jne    c0004b60 <get_fileinfo+0x1be>
c0004b5c:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b60:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b63:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b66:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b69:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6c:	83 c0 1c             	add    eax,0x1c
c0004b6f:	e8 d9 ce ff ff       	call   c0001a4d <ld_dword>
c0004b74:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0004b7d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b80:	83 c0 16             	add    eax,0x16
c0004b83:	e8 b8 ce ff ff       	call   c0001a40 <ld_word>
c0004b88:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 18             	add    eax,0x18
c0004b92:	e8 a9 ce ff ff       	call   c0001a40 <ld_word>
c0004b97:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b9b:	83 c4 1c             	add    esp,0x1c
c0004b9e:	5b                   	pop    ebx
c0004b9f:	5e                   	pop    esi
c0004ba0:	5f                   	pop    edi
c0004ba1:	5d                   	pop    ebp
c0004ba2:	c3                   	ret    

c0004ba3 <ld_clust.isra.0>:
c0004ba3:	56                   	push   esi
c0004ba4:	89 c6                	mov    esi,eax
c0004ba6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ba9:	53                   	push   ebx
c0004baa:	89 d3                	mov    ebx,edx
c0004bac:	e8 8f ce ff ff       	call   c0001a40 <ld_word>
c0004bb1:	0f b7 c8             	movzx  ecx,ax
c0004bb4:	89 f0                	mov    eax,esi
c0004bb6:	3c 03                	cmp    al,0x3
c0004bb8:	75 0d                	jne    c0004bc7 <ld_clust.isra.0+0x24>
c0004bba:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bbd:	e8 7e ce ff ff       	call   c0001a40 <ld_word>
c0004bc2:	c1 e0 10             	shl    eax,0x10
c0004bc5:	09 c1                	or     ecx,eax
c0004bc7:	5b                   	pop    ebx
c0004bc8:	89 c8                	mov    eax,ecx
c0004bca:	5e                   	pop    esi
c0004bcb:	c3                   	ret    

c0004bcc <st_clust.isra.1>:
c0004bcc:	56                   	push   esi
c0004bcd:	89 c6                	mov    esi,eax
c0004bcf:	53                   	push   ebx
c0004bd0:	89 d3                	mov    ebx,edx
c0004bd2:	0f b7 d1             	movzx  edx,cx
c0004bd5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bd8:	e8 d5 ce ff ff       	call   c0001ab2 <st_word>
c0004bdd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be0:	75 0f                	jne    c0004bf1 <st_clust.isra.1+0x25>
c0004be2:	c1 e9 10             	shr    ecx,0x10
c0004be5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be8:	89 ca                	mov    edx,ecx
c0004bea:	5b                   	pop    ebx
c0004beb:	5e                   	pop    esi
c0004bec:	e9 c1 ce ff ff       	jmp    c0001ab2 <st_word>
c0004bf1:	5b                   	pop    ebx
c0004bf2:	5e                   	pop    esi
c0004bf3:	c3                   	ret    

c0004bf4 <init_alloc_info.isra.2>:
c0004bf4:	56                   	push   esi
c0004bf5:	89 c6                	mov    esi,eax
c0004bf7:	53                   	push   ebx
c0004bf8:	89 d3                	mov    ebx,edx
c0004bfa:	51                   	push   ecx
c0004bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bfd:	83 c0 34             	add    eax,0x34
c0004c00:	e8 48 ce ff ff       	call   c0001a4d <ld_dword>
c0004c05:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c08:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0a:	83 c0 38             	add    eax,0x38
c0004c0d:	e8 53 ce ff ff       	call   c0001a65 <ld_qword>
c0004c12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c15:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c18:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1a:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c1d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c24:	83 e0 02             	and    eax,0x2
c0004c27:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2a:	5b                   	pop    ebx
c0004c2b:	5b                   	pop    ebx
c0004c2c:	5e                   	pop    esi
c0004c2d:	c3                   	ret    

c0004c2e <follow_path>:
c0004c2e:	56                   	push   esi
c0004c2f:	53                   	push   ebx
c0004c30:	89 c3                	mov    ebx,eax
c0004c32:	83 ec 14             	sub    esp,0x14
c0004c35:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3f:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c41:	80 fa 2f             	cmp    dl,0x2f
c0004c44:	75 07                	jne    c0004c4d <follow_path+0x1f>
c0004c46:	40                   	inc    eax
c0004c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c4b:	eb ee                	jmp    c0004c3b <follow_path+0xd>
c0004c4d:	80 fa 5c             	cmp    dl,0x5c
c0004c50:	74 f4                	je     c0004c46 <follow_path+0x18>
c0004c52:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c59:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c60:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c63:	77 52                	ja     c0004cb7 <follow_path+0x89>
c0004c65:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c69:	31 d2                	xor    edx,edx
c0004c6b:	89 d8                	mov    eax,ebx
c0004c6d:	e8 1d e3 ff ff       	call   c0002f8f <dir_sdi>
c0004c72:	eb 7c                	jmp    c0004cf0 <follow_path+0xc2>
c0004c74:	89 d8                	mov    eax,ebx
c0004c76:	e8 60 f2 ff ff       	call   c0003edb <dir_find>
c0004c7b:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c7e:	85 c0                	test   eax,eax
c0004c80:	75 46                	jne    c0004cc8 <follow_path+0x9a>
c0004c82:	80 e2 04             	and    dl,0x4
c0004c85:	75 69                	jne    c0004cf0 <follow_path+0xc2>
c0004c87:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c8b:	74 5e                	je     c0004ceb <follow_path+0xbd>
c0004c8d:	8a 06                	mov    al,BYTE PTR [esi]
c0004c8f:	3c 04                	cmp    al,0x4
c0004c91:	75 41                	jne    c0004cd4 <follow_path+0xa6>
c0004c93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c96:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c9d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca0:	30 c0                	xor    al,al
c0004ca2:	09 d0                	or     eax,edx
c0004ca4:	89 da                	mov    edx,ebx
c0004ca6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ca9:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cac:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004caf:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb2:	e8 3d ff ff ff       	call   c0004bf4 <init_alloc_info.isra.2>
c0004cb7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cbb:	89 d8                	mov    eax,ebx
c0004cbd:	e8 b6 ed ff ff       	call   c0003a78 <create_name>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	74 ae                	je     c0004c74 <follow_path+0x46>
c0004cc6:	eb 28                	jmp    c0004cf0 <follow_path+0xc2>
c0004cc8:	83 f8 04             	cmp    eax,0x4
c0004ccb:	75 23                	jne    c0004cf0 <follow_path+0xc2>
c0004ccd:	80 e2 04             	and    dl,0x4
c0004cd0:	74 19                	je     c0004ceb <follow_path+0xbd>
c0004cd2:	eb 1c                	jmp    c0004cf0 <follow_path+0xc2>
c0004cd4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cd7:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cdd:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce1:	e8 bd fe ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0004ce6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ce9:	eb cc                	jmp    c0004cb7 <follow_path+0x89>
c0004ceb:	b8 05 00 00 00       	mov    eax,0x5
c0004cf0:	83 c4 14             	add    esp,0x14
c0004cf3:	5b                   	pop    ebx
c0004cf4:	5e                   	pop    esi
c0004cf5:	c3                   	ret    

c0004cf6 <f_mount>:
c0004cf6:	53                   	push   ebx
c0004cf7:	83 ec 18             	sub    esp,0x18
c0004cfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cfe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0a:	e8 13 d3 ff ff       	call   c0002022 <get_ldnumber>
c0004d0f:	89 c2                	mov    edx,eax
c0004d11:	b8 0b 00 00 00       	mov    eax,0xb
c0004d16:	85 d2                	test   edx,edx
c0004d18:	78 39                	js     c0004d53 <f_mount+0x5d>
c0004d1a:	8b 04 95 20 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8e0]
c0004d21:	85 c0                	test   eax,eax
c0004d23:	74 03                	je     c0004d28 <f_mount+0x32>
c0004d25:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d2c:	85 c0                	test   eax,eax
c0004d2e:	74 03                	je     c0004d33 <f_mount+0x3d>
c0004d30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d37:	89 04 95 20 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8e0],eax
c0004d3e:	31 c0                	xor    eax,eax
c0004d40:	84 db                	test   bl,bl
c0004d42:	74 0f                	je     c0004d53 <f_mount+0x5d>
c0004d44:	31 c9                	xor    ecx,ecx
c0004d46:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4e:	e8 6f d7 ff ff       	call   c00024c2 <mount_volume>
c0004d53:	83 c4 18             	add    esp,0x18
c0004d56:	5b                   	pop    ebx
c0004d57:	c3                   	ret    

c0004d58 <f_open>:
c0004d58:	55                   	push   ebp
c0004d59:	bd 09 00 00 00       	mov    ebp,0x9
c0004d5e:	57                   	push   edi
c0004d5f:	56                   	push   esi
c0004d60:	53                   	push   ebx
c0004d61:	83 ec 7c             	sub    esp,0x7c
c0004d64:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d6b:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d72:	85 db                	test   ebx,ebx
c0004d74:	0f 84 10 04 00 00    	je     c000518a <f_open+0x432>
c0004d7a:	89 fe                	mov    esi,edi
c0004d7c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d80:	83 e6 3f             	and    esi,0x3f
c0004d83:	89 f0                	mov    eax,esi
c0004d85:	0f b6 c8             	movzx  ecx,al
c0004d88:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d8f:	e8 2e d7 ff ff       	call   c00024c2 <mount_volume>
c0004d94:	89 c5                	mov    ebp,eax
c0004d96:	85 c0                	test   eax,eax
c0004d98:	0f 85 e6 03 00 00    	jne    c0005184 <f_open+0x42c>
c0004d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da2:	83 ec 0c             	sub    esp,0xc
c0004da5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004da9:	bd 11 00 00 00       	mov    ebp,0x11
c0004dae:	68 60 04 00 00       	push   0x460
c0004db3:	e8 6e 34 00 00       	call   c0008226 <ff_memalloc>
c0004db8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dbc:	83 c4 10             	add    esp,0x10
c0004dbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc4:	0f 84 c0 03 00 00    	je     c000518a <f_open+0x432>
c0004dca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd2:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dd8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ddb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dde:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004de5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004de9:	e8 40 fe ff ff       	call   c0004c2e <follow_path>
c0004dee:	89 c5                	mov    ebp,eax
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 0c                	jne    c0004e00 <f_open+0xa8>
c0004df4:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004df9:	79 05                	jns    c0004e00 <f_open+0xa8>
c0004dfb:	bd 06 00 00 00       	mov    ebp,0x6
c0004e00:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e06:	0f 84 84 01 00 00    	je     c0004f90 <f_open+0x238>
c0004e0c:	85 ed                	test   ebp,ebp
c0004e0e:	74 20                	je     c0004e30 <f_open+0xd8>
c0004e10:	83 fd 04             	cmp    ebp,0x4
c0004e13:	0f 85 58 03 00 00    	jne    c0005171 <f_open+0x419>
c0004e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1d:	83 ce 08             	or     esi,0x8
c0004e20:	e8 7d f2 ff ff       	call   c00040a2 <dir_register>
c0004e25:	89 c5                	mov    ebp,eax
c0004e27:	85 c0                	test   eax,eax
c0004e29:	74 2f                	je     c0004e5a <f_open+0x102>
c0004e2b:	e9 41 03 00 00       	jmp    c0005171 <f_open+0x419>
c0004e30:	bd 07 00 00 00       	mov    ebp,0x7
c0004e35:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3a:	0f 85 31 03 00 00    	jne    c0005171 <f_open+0x419>
c0004e40:	bd 08 00 00 00       	mov    ebp,0x8
c0004e45:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e4b:	0f 85 20 03 00 00    	jne    c0005171 <f_open+0x419>
c0004e51:	83 e7 08             	and    edi,0x8
c0004e54:	0f 84 65 01 00 00    	je     c0004fbf <f_open+0x267>
c0004e5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e5e:	8a 02                	mov    al,BYTE PTR [edx]
c0004e60:	3c 04                	cmp    al,0x4
c0004e62:	0f 85 97 00 00 00    	jne    c0004eff <f_open+0x1a7>
c0004e68:	8d 42 10             	lea    eax,[edx+0x10]
c0004e6b:	89 13                	mov    DWORD PTR [ebx],edx
c0004e6d:	89 da                	mov    edx,ebx
c0004e6f:	e8 80 fd ff ff       	call   c0004bf4 <init_alloc_info.isra.2>
c0004e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e7b:	31 d2                	xor    edx,edx
c0004e7d:	83 c0 02             	add    eax,0x2
c0004e80:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e85:	e8 4a cc ff ff       	call   c0001ad4 <mem_set>
c0004e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e91:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e96:	83 c0 26             	add    eax,0x26
c0004e99:	31 d2                	xor    edx,edx
c0004e9b:	e8 34 cc ff ff       	call   c0001ad4 <mem_set>
c0004ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ea7:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eab:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb3:	83 c0 08             	add    eax,0x8
c0004eb6:	e8 fb cb ff ff       	call   c0001ab6 <st_dword>
c0004ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec2:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 c4 ea ff ff       	call   c0003993 <store_xdir>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 98 02 00 00    	jne    c0005171 <f_open+0x419>
c0004ed9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004edc:	85 d2                	test   edx,edx
c0004ede:	0f 84 db 00 00 00    	je     c0004fbf <f_open+0x267>
c0004ee4:	31 c9                	xor    ecx,ecx
c0004ee6:	89 d8                	mov    eax,ebx
c0004ee8:	e8 9b e3 ff ff       	call   c0003288 <remove_chain>
c0004eed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ef6:	48                   	dec    eax
c0004ef7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004efa:	e9 b8 00 00 00       	jmp    c0004fb7 <f_open+0x25f>
c0004eff:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f03:	89 ea                	mov    edx,ebp
c0004f05:	e8 99 fc ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0004f0a:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f0f:	89 c7                	mov    edi,eax
c0004f11:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f14:	e8 9d cb ff ff       	call   c0001ab6 <st_dword>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f21:	31 c9                	xor    ecx,ecx
c0004f23:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	e8 9c fc ff ff       	call   c0004bcc <st_clust.isra.1>
c0004f30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f34:	83 c0 1c             	add    eax,0x1c
c0004f37:	31 d2                	xor    edx,edx
c0004f39:	e8 78 cb ff ff       	call   c0001ab6 <st_dword>
c0004f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f42:	85 ff                	test   edi,edi
c0004f44:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f48:	74 75                	je     c0004fbf <f_open+0x267>
c0004f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4e:	31 c9                	xor    ecx,ecx
c0004f50:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f53:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f62:	89 fa                	mov    edx,edi
c0004f64:	e8 1f e3 ff ff       	call   c0003288 <remove_chain>
c0004f69:	89 c5                	mov    ebp,eax
c0004f6b:	85 c0                	test   eax,eax
c0004f6d:	0f 85 fe 01 00 00    	jne    c0005171 <f_open+0x419>
c0004f73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f7f:	4f                   	dec    edi
c0004f80:	e8 92 d2 ff ff       	call   c0002217 <move_window>
c0004f85:	89 c5                	mov    ebp,eax
c0004f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8b:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f8e:	eb 27                	jmp    c0004fb7 <f_open+0x25f>
c0004f90:	85 ed                	test   ebp,ebp
c0004f92:	0f 85 d9 01 00 00    	jne    c0005171 <f_open+0x419>
c0004f98:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f9c:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa1:	a8 10                	test   al,0x10
c0004fa3:	0f 85 c8 01 00 00    	jne    c0005171 <f_open+0x419>
c0004fa9:	83 e7 02             	and    edi,0x2
c0004fac:	74 11                	je     c0004fbf <f_open+0x267>
c0004fae:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb3:	a8 01                	test   al,0x1
c0004fb5:	eb 02                	jmp    c0004fb9 <f_open+0x261>
c0004fb7:	85 ed                	test   ebp,ebp
c0004fb9:	0f 85 b2 01 00 00    	jne    c0005171 <f_open+0x419>
c0004fbf:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fc5:	74 03                	je     c0004fca <f_open+0x272>
c0004fc7:	83 ce 40             	or     esi,0x40
c0004fca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fce:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd1:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd4:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fd7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fdb:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fde:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe3:	3c 04                	cmp    al,0x4
c0004fe5:	75 2a                	jne    c0005011 <f_open+0x2b9>
c0004fe7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004feb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff2:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ff7:	30 c0                	xor    al,al
c0004ff9:	09 c8                	or     eax,ecx
c0004ffb:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ffe:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005002:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005005:	8d 42 10             	lea    eax,[edx+0x10]
c0005008:	89 da                	mov    edx,ebx
c000500a:	e8 e5 fb ff ff       	call   c0004bf4 <init_alloc_info.isra.2>
c000500f:	eb 1c                	jmp    c000502d <f_open+0x2d5>
c0005011:	89 fa                	mov    edx,edi
c0005013:	e8 8b fb ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0005018:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000501b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000501e:	e8 2a ca ff ff       	call   c0001a4d <ld_dword>
c0005023:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000502d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005031:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005038:	89 03                	mov    DWORD PTR [ebx],eax
c000503a:	31 d2                	xor    edx,edx
c000503c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005040:	b9 00 02 00 00       	mov    ecx,0x200
c0005045:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005049:	89 f0                	mov    eax,esi
c000504b:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000504e:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005052:	8d 43 50             	lea    eax,[ebx+0x50]
c0005055:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000505c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005063:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005071:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005075:	e8 5a ca ff ff       	call   c0001ad4 <mem_set>
c000507a:	83 e6 20             	and    esi,0x20
c000507d:	75 07                	jne    c0005086 <f_open+0x32e>
c000507f:	31 ed                	xor    ebp,ebp
c0005081:	e9 eb 00 00 00       	jmp    c0005171 <f_open+0x419>
c0005086:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005089:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000508c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005090:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005098:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000509c:	74 e1                	je     c000507f <f_open+0x327>
c000509e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ad:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050b7:	c1 e5 09             	shl    ebp,0x9
c00050ba:	31 ff                	xor    edi,edi
c00050bc:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c0:	89 f8                	mov    eax,edi
c00050c2:	89 ee                	mov    esi,ebp
c00050c4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050c8:	73 22                	jae    c00050ec <f_open+0x394>
c00050ca:	89 d8                	mov    eax,ebx
c00050cc:	e8 c8 dc ff ff       	call   c0002d99 <get_fat>
c00050d1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050d5:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050d9:	89 c2                	mov    edx,eax
c00050db:	83 f8 01             	cmp    eax,0x1
c00050de:	76 10                	jbe    c00050f0 <f_open+0x398>
c00050e0:	83 f8 ff             	cmp    eax,0xffffffff
c00050e3:	75 d5                	jne    c00050ba <f_open+0x362>
c00050e5:	bd 01 00 00 00       	mov    ebp,0x1
c00050ea:	eb 09                	jmp    c00050f5 <f_open+0x39d>
c00050ec:	31 ed                	xor    ebp,ebp
c00050ee:	eb 05                	jmp    c00050f5 <f_open+0x39d>
c00050f0:	bd 02 00 00 00       	mov    ebp,0x2
c00050f5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050f8:	85 ed                	test   ebp,ebp
c00050fa:	75 75                	jne    c0005171 <f_open+0x419>
c00050fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005100:	25 ff 01 00 00       	and    eax,0x1ff
c0005105:	0f 84 74 ff ff ff    	je     c000507f <f_open+0x327>
c000510b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000510f:	bd 02 00 00 00       	mov    ebp,0x2
c0005114:	89 c8                	mov    eax,ecx
c0005116:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511a:	e8 ba cb ff ff       	call   c0001cd9 <clst2sect>
c000511f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005123:	89 d7                	mov    edi,edx
c0005125:	09 c7                	or     edi,eax
c0005127:	74 48                	je     c0005171 <f_open+0x419>
c0005129:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000512d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005131:	0f ac fe 09          	shrd   esi,edi,0x9
c0005135:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005139:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005141:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005145:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005149:	83 ec 0c             	sub    esp,0xc
c000514c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000514f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005152:	6a 01                	push   0x1
c0005154:	52                   	push   edx
c0005155:	50                   	push   eax
c0005156:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000515e:	50                   	push   eax
c000515f:	e8 91 c8 ff ff       	call   c00019f5 <disk_read>
c0005164:	83 c4 20             	add    esp,0x20
c0005167:	85 c0                	test   eax,eax
c0005169:	0f 95 c0             	setne  al
c000516c:	0f b6 c0             	movzx  eax,al
c000516f:	89 c5                	mov    ebp,eax
c0005171:	83 ec 0c             	sub    esp,0xc
c0005174:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005178:	e8 bf 30 00 00       	call   c000823c <ff_memfree>
c000517d:	83 c4 10             	add    esp,0x10
c0005180:	85 ed                	test   ebp,ebp
c0005182:	74 06                	je     c000518a <f_open+0x432>
c0005184:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518a:	83 c4 7c             	add    esp,0x7c
c000518d:	89 e8                	mov    eax,ebp
c000518f:	5b                   	pop    ebx
c0005190:	5e                   	pop    esi
c0005191:	5f                   	pop    edi
c0005192:	5d                   	pop    ebp
c0005193:	c3                   	ret    

c0005194 <f_read>:
c0005194:	55                   	push   ebp
c0005195:	57                   	push   edi
c0005196:	56                   	push   esi
c0005197:	53                   	push   ebx
c0005198:	83 ec 2c             	sub    esp,0x2c
c000519b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000519f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051ad:	89 d8                	mov    eax,ebx
c00051af:	e8 88 cf ff ff       	call   c000213c <validate>
c00051b4:	89 c5                	mov    ebp,eax
c00051b6:	85 c0                	test   eax,eax
c00051b8:	0f 85 4c 02 00 00    	jne    c000540a <f_read+0x276>
c00051be:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c2:	85 ed                	test   ebp,ebp
c00051c4:	0f 85 40 02 00 00    	jne    c000540a <f_read+0x276>
c00051ca:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051ce:	0f 84 31 02 00 00    	je     c0005405 <f_read+0x271>
c00051d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051d7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051da:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051dd:	bf 00 00 00 00       	mov    edi,0x0
c00051e2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051e5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051e9:	89 d1                	mov    ecx,edx
c00051eb:	19 f9                	sbb    ecx,edi
c00051ed:	0f 83 cf 00 00 00    	jae    c00052c2 <f_read+0x12e>
c00051f3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051f7:	e9 c6 00 00 00       	jmp    c00052c2 <f_read+0x12e>
c00051fc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051ff:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005202:	89 d0                	mov    eax,edx
c0005204:	25 ff 01 00 00       	and    eax,0x1ff
c0005209:	0f 85 c9 01 00 00    	jne    c00053d8 <f_read+0x244>
c000520f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005213:	89 d6                	mov    esi,edx
c0005215:	89 cf                	mov    edi,ecx
c0005217:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000521b:	0f ac fe 09          	shrd   esi,edi,0x9
c000521f:	48                   	dec    eax
c0005220:	21 f0                	and    eax,esi
c0005222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005226:	0f 84 a6 00 00 00    	je     c00052d2 <f_read+0x13e>
c000522c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005230:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005233:	89 c8                	mov    eax,ecx
c0005235:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005238:	e8 9c ca ff ff       	call   c0001cd9 <clst2sect>
c000523d:	89 d7                	mov    edi,edx
c000523f:	09 c7                	or     edi,eax
c0005241:	0f 84 b4 00 00 00    	je     c00052fb <f_read+0x167>
c0005247:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000524b:	31 ff                	xor    edi,edi
c000524d:	01 c6                	add    esi,eax
c000524f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005252:	11 d7                	adc    edi,edx
c0005254:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000525c:	0f 86 fd 00 00 00    	jbe    c000535f <f_read+0x1cb>
c0005262:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005266:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526a:	c1 e8 09             	shr    eax,0x9
c000526d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005270:	03 14 24             	add    edx,DWORD PTR [esp]
c0005273:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005277:	39 c2                	cmp    edx,eax
c0005279:	76 07                	jbe    c0005282 <f_read+0xee>
c000527b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000527f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005282:	83 ec 0c             	sub    esp,0xc
c0005285:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005289:	57                   	push   edi
c000528a:	56                   	push   esi
c000528b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000528f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005293:	50                   	push   eax
c0005294:	e8 5c c7 ff ff       	call   c00019f5 <disk_read>
c0005299:	83 c4 20             	add    esp,0x20
c000529c:	85 c0                	test   eax,eax
c000529e:	75 6e                	jne    c000530e <f_read+0x17a>
c00052a0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a4:	78 7e                	js     c0005324 <f_read+0x190>
c00052a6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052a9:	c1 e6 09             	shl    esi,0x9
c00052ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b0:	31 ff                	xor    edi,edi
c00052b2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052b6:	01 30                	add    DWORD PTR [eax],esi
c00052b8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052bc:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052bf:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052c7:	0f 85 2f ff ff ff    	jne    c00051fc <f_read+0x68>
c00052cd:	e9 38 01 00 00       	jmp    c000540a <f_read+0x276>
c00052d2:	89 c8                	mov    eax,ecx
c00052d4:	09 d0                	or     eax,edx
c00052d6:	75 05                	jne    c00052dd <f_read+0x149>
c00052d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052db:	eb 19                	jmp    c00052f6 <f_read+0x162>
c00052dd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e1:	74 09                	je     c00052ec <f_read+0x158>
c00052e3:	89 d8                	mov    eax,ebx
c00052e5:	e8 10 ca ff ff       	call   c0001cfa <clmt_clust>
c00052ea:	eb 0a                	jmp    c00052f6 <f_read+0x162>
c00052ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ef:	89 d8                	mov    eax,ebx
c00052f1:	e8 a3 da ff ff       	call   c0002d99 <get_fat>
c00052f6:	83 f8 01             	cmp    eax,0x1
c00052f9:	77 0e                	ja     c0005309 <f_read+0x175>
c00052fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052ff:	bd 02 00 00 00       	mov    ebp,0x2
c0005304:	e9 01 01 00 00       	jmp    c000540a <f_read+0x276>
c0005309:	83 f8 ff             	cmp    eax,0xffffffff
c000530c:	75 0e                	jne    c000531c <f_read+0x188>
c000530e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005312:	bd 01 00 00 00       	mov    ebp,0x1
c0005317:	e9 ee 00 00 00       	jmp    c000540a <f_read+0x276>
c000531c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000531f:	e9 08 ff ff ff       	jmp    c000522c <f_read+0x98>
c0005324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005327:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532a:	29 f0                	sub    eax,esi
c000532c:	19 fa                	sbb    edx,edi
c000532e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005331:	89 d7                	mov    edi,edx
c0005333:	ba 00 00 00 00       	mov    edx,0x0
c0005338:	89 f9                	mov    ecx,edi
c000533a:	19 d1                	sbb    ecx,edx
c000533c:	0f 83 64 ff ff ff    	jae    c00052a6 <f_read+0x112>
c0005342:	89 c7                	mov    edi,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	c1 e7 09             	shl    edi,0x9
c000534b:	8d 53 50             	lea    edx,[ebx+0x50]
c000534e:	01 f8                	add    eax,edi
c0005350:	b9 00 02 00 00       	mov    ecx,0x200
c0005355:	e8 65 c7 ff ff       	call   c0001abf <mem_cpy>
c000535a:	e9 47 ff ff ff       	jmp    c00052a6 <f_read+0x112>
c000535f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005362:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005365:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005369:	89 04 24             	mov    DWORD PTR [esp],eax
c000536c:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005370:	75 05                	jne    c0005377 <f_read+0x1e3>
c0005372:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005375:	74 5b                	je     c00053d2 <f_read+0x23e>
c0005377:	8d 43 50             	lea    eax,[ebx+0x50]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005382:	79 2a                	jns    c00053ae <f_read+0x21a>
c0005384:	83 ec 0c             	sub    esp,0xc
c0005387:	6a 01                	push   0x1
c0005389:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000538d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005395:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005399:	50                   	push   eax
c000539a:	e8 6c c6 ff ff       	call   c0001a0b <disk_write>
c000539f:	83 c4 20             	add    esp,0x20
c00053a2:	85 c0                	test   eax,eax
c00053a4:	0f 85 64 ff ff ff    	jne    c000530e <f_read+0x17a>
c00053aa:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053ae:	83 ec 0c             	sub    esp,0xc
c00053b1:	6a 01                	push   0x1
c00053b3:	57                   	push   edi
c00053b4:	56                   	push   esi
c00053b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c1:	50                   	push   eax
c00053c2:	e8 2e c6 ff ff       	call   c00019f5 <disk_read>
c00053c7:	83 c4 20             	add    esp,0x20
c00053ca:	85 c0                	test   eax,eax
c00053cc:	0f 85 3c ff ff ff    	jne    c000530e <f_read+0x17a>
c00053d2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053d5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053d8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053db:	ba 00 02 00 00       	mov    edx,0x200
c00053e0:	25 ff 01 00 00       	and    eax,0x1ff
c00053e5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053e9:	29 c2                	sub    edx,eax
c00053eb:	39 d6                	cmp    esi,edx
c00053ed:	76 02                	jbe    c00053f1 <f_read+0x25d>
c00053ef:	89 d6                	mov    esi,edx
c00053f1:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053f5:	89 f1                	mov    ecx,esi
c00053f7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053fb:	e8 bf c6 ff ff       	call   c0001abf <mem_cpy>
c0005400:	e9 a7 fe ff ff       	jmp    c00052ac <f_read+0x118>
c0005405:	bd 07 00 00 00       	mov    ebp,0x7
c000540a:	83 c4 2c             	add    esp,0x2c
c000540d:	89 e8                	mov    eax,ebp
c000540f:	5b                   	pop    ebx
c0005410:	5e                   	pop    esi
c0005411:	5f                   	pop    edi
c0005412:	5d                   	pop    ebp
c0005413:	c3                   	ret    

c0005414 <f_write>:
c0005414:	55                   	push   ebp
c0005415:	57                   	push   edi
c0005416:	56                   	push   esi
c0005417:	53                   	push   ebx
c0005418:	83 ec 2c             	sub    esp,0x2c
c000541b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000541f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005423:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005427:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542d:	89 d8                	mov    eax,ebx
c000542f:	e8 08 cd ff ff       	call   c000213c <validate>
c0005434:	89 c5                	mov    ebp,eax
c0005436:	85 c0                	test   eax,eax
c0005438:	0f 85 86 02 00 00    	jne    c00056c4 <f_write+0x2b0>
c000543e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005442:	85 ed                	test   ebp,ebp
c0005444:	0f 85 7a 02 00 00    	jne    c00056c4 <f_write+0x2b0>
c000544a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000544e:	0f 84 6b 02 00 00    	je     c00056bf <f_write+0x2ab>
c0005454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005458:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000545b:	0f 84 43 01 00 00    	je     c00055a4 <f_write+0x190>
c0005461:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005464:	89 c1                	mov    ecx,eax
c0005466:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546a:	0f 83 34 01 00 00    	jae    c00055a4 <f_write+0x190>
c0005470:	f7 d0                	not    eax
c0005472:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005476:	e9 29 01 00 00       	jmp    c00055a4 <f_write+0x190>
c000547b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000547e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005481:	89 d0                	mov    eax,edx
c0005483:	25 ff 01 00 00       	and    eax,0x1ff
c0005488:	0f 85 00 02 00 00    	jne    c000568e <f_write+0x27a>
c000548e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005492:	89 d6                	mov    esi,edx
c0005494:	89 cf                	mov    edi,ecx
c0005496:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549a:	0f ac fe 09          	shrd   esi,edi,0x9
c000549e:	48                   	dec    eax
c000549f:	21 f0                	and    eax,esi
c00054a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a5:	0f 84 06 01 00 00    	je     c00055b1 <f_write+0x19d>
c00054ab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054af:	0f 88 6e 01 00 00    	js     c0005623 <f_write+0x20f>
c00054b5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054bc:	89 c8                	mov    eax,ecx
c00054be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c2:	e8 12 c8 ff ff       	call   c0001cd9 <clst2sect>
c00054c7:	89 d1                	mov    ecx,edx
c00054c9:	09 c1                	or     ecx,eax
c00054cb:	0f 84 1c 01 00 00    	je     c00055ed <f_write+0x1d9>
c00054d1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d5:	31 ff                	xor    edi,edi
c00054d7:	01 c6                	add    esi,eax
c00054d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054dd:	11 d7                	adc    edi,edx
c00054df:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054e7:	0f 86 63 01 00 00    	jbe    c0005650 <f_write+0x23c>
c00054ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054f5:	c1 e8 09             	shr    eax,0x9
c00054f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054fc:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005500:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005504:	39 c2                	cmp    edx,eax
c0005506:	76 08                	jbe    c0005510 <f_write+0xfc>
c0005508:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000550c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005510:	83 ec 0c             	sub    esp,0xc
c0005513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005517:	57                   	push   edi
c0005518:	56                   	push   esi
c0005519:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000551d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005521:	50                   	push   eax
c0005522:	e8 e4 c4 ff ff       	call   c0001a0b <disk_write>
c0005527:	83 c4 20             	add    esp,0x20
c000552a:	85 c0                	test   eax,eax
c000552c:	0f 85 ce 00 00 00    	jne    c0005600 <f_write+0x1ec>
c0005532:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005535:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005538:	29 f0                	sub    eax,esi
c000553a:	19 fa                	sbb    edx,edi
c000553c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005540:	89 d7                	mov    edi,edx
c0005542:	ba 00 00 00 00       	mov    edx,0x0
c0005547:	89 f9                	mov    ecx,edi
c0005549:	19 d1                	sbb    ecx,edx
c000554b:	73 1c                	jae    c0005569 <f_write+0x155>
c000554d:	89 c7                	mov    edi,eax
c000554f:	b9 00 02 00 00       	mov    ecx,0x200
c0005554:	c1 e7 09             	shl    edi,0x9
c0005557:	8d 43 50             	lea    eax,[ebx+0x50]
c000555a:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000555e:	89 fa                	mov    edx,edi
c0005560:	e8 5a c5 ff ff       	call   c0001abf <mem_cpy>
c0005565:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005569:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000556d:	c1 e6 09             	shl    esi,0x9
c0005570:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005574:	31 ff                	xor    edi,edi
c0005576:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557a:	01 30                	add    DWORD PTR [eax],esi
c000557c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005580:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005583:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005586:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005589:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000558c:	89 c1                	mov    ecx,eax
c000558e:	39 f2                	cmp    edx,esi
c0005590:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005593:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005596:	19 f9                	sbb    ecx,edi
c0005598:	73 04                	jae    c000559e <f_write+0x18a>
c000559a:	89 f2                	mov    edx,esi
c000559c:	89 f8                	mov    eax,edi
c000559e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055a9:	0f 85 cc fe ff ff    	jne    c000547b <f_write+0x67>
c00055af:	eb 2e                	jmp    c00055df <f_write+0x1cb>
c00055b1:	89 c8                	mov    eax,ecx
c00055b3:	09 d0                	or     eax,edx
c00055b5:	75 0b                	jne    c00055c2 <f_write+0x1ae>
c00055b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055ba:	31 d2                	xor    edx,edx
c00055bc:	85 c0                	test   eax,eax
c00055be:	75 28                	jne    c00055e8 <f_write+0x1d4>
c00055c0:	eb 12                	jmp    c00055d4 <f_write+0x1c0>
c00055c2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055c6:	74 09                	je     c00055d1 <f_write+0x1bd>
c00055c8:	89 d8                	mov    eax,ebx
c00055ca:	e8 2b c7 ff ff       	call   c0001cfa <clmt_clust>
c00055cf:	eb 0a                	jmp    c00055db <f_write+0x1c7>
c00055d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d4:	89 d8                	mov    eax,ebx
c00055d6:	e8 ac da ff ff       	call   c0003087 <create_chain>
c00055db:	85 c0                	test   eax,eax
c00055dd:	75 09                	jne    c00055e8 <f_write+0x1d4>
c00055df:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e3:	e9 dc 00 00 00       	jmp    c00056c4 <f_write+0x2b0>
c00055e8:	83 f8 01             	cmp    eax,0x1
c00055eb:	75 0e                	jne    c00055fb <f_write+0x1e7>
c00055ed:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f1:	bd 02 00 00 00       	mov    ebp,0x2
c00055f6:	e9 c9 00 00 00       	jmp    c00056c4 <f_write+0x2b0>
c00055fb:	83 f8 ff             	cmp    eax,0xffffffff
c00055fe:	75 0e                	jne    c000560e <f_write+0x1fa>
c0005600:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005604:	bd 01 00 00 00       	mov    ebp,0x1
c0005609:	e9 b6 00 00 00       	jmp    c00056c4 <f_write+0x2b0>
c000560e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005611:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005615:	0f 85 90 fe ff ff    	jne    c00054ab <f_write+0x97>
c000561b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000561e:	e9 88 fe ff ff       	jmp    c00054ab <f_write+0x97>
c0005623:	83 ec 0c             	sub    esp,0xc
c0005626:	8d 43 50             	lea    eax,[ebx+0x50]
c0005629:	6a 01                	push   0x1
c000562b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000562e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005631:	50                   	push   eax
c0005632:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005636:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563a:	50                   	push   eax
c000563b:	e8 cb c3 ff ff       	call   c0001a0b <disk_write>
c0005640:	83 c4 20             	add    esp,0x20
c0005643:	85 c0                	test   eax,eax
c0005645:	75 b9                	jne    c0005600 <f_write+0x1ec>
c0005647:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000564b:	e9 65 fe ff ff       	jmp    c00054b5 <f_write+0xa1>
c0005650:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005653:	75 05                	jne    c000565a <f_write+0x246>
c0005655:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005658:	74 2e                	je     c0005688 <f_write+0x274>
c000565a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000565d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005660:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005663:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005666:	73 20                	jae    c0005688 <f_write+0x274>
c0005668:	83 ec 0c             	sub    esp,0xc
c000566b:	8d 43 50             	lea    eax,[ebx+0x50]
c000566e:	6a 01                	push   0x1
c0005670:	57                   	push   edi
c0005671:	56                   	push   esi
c0005672:	50                   	push   eax
c0005673:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 78 c3 ff ff       	call   c00019f5 <disk_read>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	85 c0                	test   eax,eax
c0005682:	0f 85 78 ff ff ff    	jne    c0005600 <f_write+0x1ec>
c0005688:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000568b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000568e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005691:	ba 00 02 00 00       	mov    edx,0x200
c0005696:	25 ff 01 00 00       	and    eax,0x1ff
c000569b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000569f:	29 c2                	sub    edx,eax
c00056a1:	39 d6                	cmp    esi,edx
c00056a3:	76 02                	jbe    c00056a7 <f_write+0x293>
c00056a5:	89 d6                	mov    esi,edx
c00056a7:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ab:	89 f1                	mov    ecx,esi
c00056ad:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b1:	e8 09 c4 ff ff       	call   c0001abf <mem_cpy>
c00056b6:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056ba:	e9 b1 fe ff ff       	jmp    c0005570 <f_write+0x15c>
c00056bf:	bd 07 00 00 00       	mov    ebp,0x7
c00056c4:	83 c4 2c             	add    esp,0x2c
c00056c7:	89 e8                	mov    eax,ebp
c00056c9:	5b                   	pop    ebx
c00056ca:	5e                   	pop    esi
c00056cb:	5f                   	pop    edi
c00056cc:	5d                   	pop    ebp
c00056cd:	c3                   	ret    

c00056ce <f_sync>:
c00056ce:	56                   	push   esi
c00056cf:	53                   	push   ebx
c00056d0:	83 ec 64             	sub    esp,0x64
c00056d3:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056db:	89 d8                	mov    eax,ebx
c00056dd:	e8 5a ca ff ff       	call   c000213c <validate>
c00056e2:	85 c0                	test   eax,eax
c00056e4:	0f 85 ba 01 00 00    	jne    c00058a4 <f_sync+0x1d6>
c00056ea:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056ed:	f6 c2 40             	test   dl,0x40
c00056f0:	0f 84 ae 01 00 00    	je     c00058a4 <f_sync+0x1d6>
c00056f6:	84 d2                	test   dl,dl
c00056f8:	79 33                	jns    c000572d <f_sync+0x5f>
c00056fa:	83 ec 0c             	sub    esp,0xc
c00056fd:	8d 43 50             	lea    eax,[ebx+0x50]
c0005700:	6a 01                	push   0x1
c0005702:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005705:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005708:	50                   	push   eax
c0005709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000570d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005711:	50                   	push   eax
c0005712:	e8 f4 c2 ff ff       	call   c0001a0b <disk_write>
c0005717:	89 c2                	mov    edx,eax
c0005719:	83 c4 20             	add    esp,0x20
c000571c:	b8 01 00 00 00       	mov    eax,0x1
c0005721:	85 d2                	test   edx,edx
c0005723:	0f 85 7b 01 00 00    	jne    c00058a4 <f_sync+0x1d6>
c0005729:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005731:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005734:	0f 85 11 01 00 00    	jne    c000584b <f_sync+0x17d>
c000573a:	89 d8                	mov    eax,ebx
c000573c:	e8 1e d6 ff ff       	call   c0002d5f <fill_first_frag>
c0005741:	85 c0                	test   eax,eax
c0005743:	0f 85 5b 01 00 00    	jne    c00058a4 <f_sync+0x1d6>
c0005749:	83 c9 ff             	or     ecx,0xffffffff
c000574c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000574f:	89 d8                	mov    eax,ebx
c0005751:	e8 d4 d5 ff ff       	call   c0002d2a <fill_last_frag>
c0005756:	85 c0                	test   eax,eax
c0005758:	0f 85 46 01 00 00    	jne    c00058a4 <f_sync+0x1d6>
c000575e:	83 ec 0c             	sub    esp,0xc
c0005761:	68 60 04 00 00       	push   0x460
c0005766:	e8 bb 2a 00 00       	call   c0008226 <ff_memalloc>
c000576b:	89 c6                	mov    esi,eax
c000576d:	83 c4 10             	add    esp,0x10
c0005770:	b8 11 00 00 00       	mov    eax,0x11
c0005775:	85 f6                	test   esi,esi
c0005777:	0f 84 27 01 00 00    	je     c00058a4 <f_sync+0x1d6>
c000577d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005781:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005787:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000578d:	89 da                	mov    edx,ebx
c000578f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005793:	e8 bc df ff ff       	call   c0003754 <load_obj_xdir>
c0005798:	85 c0                	test   eax,eax
c000579a:	0f 85 95 00 00 00    	jne    c0005835 <f_sync+0x167>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057a7:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ab:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057ae:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b1:	83 ca 01             	or     edx,0x1
c00057b4:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ba:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057bd:	83 c0 34             	add    eax,0x34
c00057c0:	e8 f1 c2 ff ff       	call   c0001ab6 <st_dword>
c00057c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cf:	83 c0 38             	add    eax,0x38
c00057d2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057d5:	e8 df c2 ff ff       	call   c0001ab9 <st_qword>
c00057da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e4:	83 c0 28             	add    eax,0x28
c00057e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ea:	e8 ca c2 ff ff       	call   c0001ab9 <st_qword>
c00057ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f6:	ba 00 00 21 50       	mov    edx,0x50210000
c00057fb:	83 c0 0c             	add    eax,0xc
c00057fe:	e8 b3 c2 ff ff       	call   c0001ab6 <st_dword>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580a:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000580e:	31 d2                	xor    edx,edx
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	83 c0 10             	add    eax,0x10
c0005816:	e8 9b c2 ff ff       	call   c0001ab6 <st_dword>
c000581b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000581f:	e8 6f e1 ff ff       	call   c0003993 <store_xdir>
c0005824:	85 c0                	test   eax,eax
c0005826:	75 0d                	jne    c0005835 <f_sync+0x167>
c0005828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582c:	e8 f4 ea ff ff       	call   c0004325 <sync_fs>
c0005831:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005839:	83 ec 0c             	sub    esp,0xc
c000583c:	56                   	push   esi
c000583d:	e8 fa 29 00 00       	call   c000823c <ff_memfree>
c0005842:	83 c4 10             	add    esp,0x10
c0005845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005849:	eb 59                	jmp    c00058a4 <f_sync+0x1d6>
c000584b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000584e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005851:	e8 c1 c9 ff ff       	call   c0002217 <move_window>
c0005856:	85 c0                	test   eax,eax
c0005858:	75 4a                	jne    c00058a4 <f_sync+0x1d6>
c000585a:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000585d:	89 f2                	mov    edx,esi
c000585f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005863:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005868:	e8 5f f3 ff ff       	call   c0004bcc <st_clust.isra.1>
c000586d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005870:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005873:	e8 3e c2 ff ff       	call   c0001ab6 <st_dword>
c0005878:	8d 46 16             	lea    eax,[esi+0x16]
c000587b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005880:	e8 31 c2 ff ff       	call   c0001ab6 <st_dword>
c0005885:	8d 46 12             	lea    eax,[esi+0x12]
c0005888:	31 d2                	xor    edx,edx
c000588a:	e8 23 c2 ff ff       	call   c0001ab2 <st_word>
c000588f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005893:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000589b:	e8 85 ea ff ff       	call   c0004325 <sync_fs>
c00058a0:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a4:	83 c4 64             	add    esp,0x64
c00058a7:	5b                   	pop    ebx
c00058a8:	5e                   	pop    esi
c00058a9:	c3                   	ret    

c00058aa <f_close>:
c00058aa:	53                   	push   ebx
c00058ab:	83 ec 24             	sub    esp,0x24
c00058ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b2:	53                   	push   ebx
c00058b3:	e8 16 fe ff ff       	call   c00056ce <f_sync>
c00058b8:	83 c4 10             	add    esp,0x10
c00058bb:	85 c0                	test   eax,eax
c00058bd:	75 15                	jne    c00058d4 <f_close+0x2a>
c00058bf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c3:	89 d8                	mov    eax,ebx
c00058c5:	e8 72 c8 ff ff       	call   c000213c <validate>
c00058ca:	85 c0                	test   eax,eax
c00058cc:	75 06                	jne    c00058d4 <f_close+0x2a>
c00058ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d4:	83 c4 18             	add    esp,0x18
c00058d7:	5b                   	pop    ebx
c00058d8:	c3                   	ret    

c00058d9 <f_lseek>:
c00058d9:	55                   	push   ebp
c00058da:	57                   	push   edi
c00058db:	56                   	push   esi
c00058dc:	53                   	push   ebx
c00058dd:	83 ec 3c             	sub    esp,0x3c
c00058e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e4:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058e8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f3:	89 d8                	mov    eax,ebx
c00058f5:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058f9:	e8 3e c8 ff ff       	call   c000213c <validate>
c00058fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005902:	85 c0                	test   eax,eax
c0005904:	0f 85 28 04 00 00    	jne    c0005d32 <f_lseek+0x459>
c000590a:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000590e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005912:	85 c0                	test   eax,eax
c0005914:	0f 85 18 04 00 00    	jne    c0005d32 <f_lseek+0x459>
c000591a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000591e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005921:	74 0c                	je     c000592f <f_lseek+0x56>
c0005923:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005926:	85 c0                	test   eax,eax
c0005928:	75 1f                	jne    c0005949 <f_lseek+0x70>
c000592a:	e9 8b 01 00 00       	jmp    c0005aba <f_lseek+0x1e1>
c000592f:	83 c9 ff             	or     ecx,0xffffffff
c0005932:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005935:	89 d8                	mov    eax,ebx
c0005937:	e8 ee d3 ff ff       	call   c0002d2a <fill_last_frag>
c000593c:	85 c0                	test   eax,eax
c000593e:	74 e3                	je     c0005923 <f_lseek+0x4a>
c0005940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005944:	e9 e9 03 00 00       	jmp    c0005d32 <f_lseek+0x459>
c0005949:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000594e:	0f 85 ac 00 00 00    	jne    c0005a00 <f_lseek+0x127>
c0005954:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005958:	0f 85 a2 00 00 00    	jne    c0005a00 <f_lseek+0x127>
c000595e:	8d 78 04             	lea    edi,[eax+0x4]
c0005961:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005964:	8b 00                	mov    eax,DWORD PTR [eax]
c0005966:	be 02 00 00 00       	mov    esi,0x2
c000596b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000596f:	85 ed                	test   ebp,ebp
c0005971:	74 73                	je     c00059e6 <f_lseek+0x10d>
c0005973:	89 e9                	mov    ecx,ebp
c0005975:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000597c:	89 ca                	mov    edx,ecx
c000597e:	89 d8                	mov    eax,ebx
c0005980:	ff 04 24             	inc    DWORD PTR [esp]
c0005983:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005987:	e8 0d d4 ff ff       	call   c0002d99 <get_fat>
c000598c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005990:	83 f8 01             	cmp    eax,0x1
c0005993:	77 11                	ja     c00059a6 <f_lseek+0xcd>
c0005995:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005999:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a1:	e9 8c 03 00 00       	jmp    c0005d32 <f_lseek+0x459>
c00059a6:	83 f8 ff             	cmp    eax,0xffffffff
c00059a9:	75 11                	jne    c00059bc <f_lseek+0xe3>
c00059ab:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059af:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059b7:	e9 76 03 00 00       	jmp    c0005d32 <f_lseek+0x459>
c00059bc:	8d 51 01             	lea    edx,[ecx+0x1]
c00059bf:	89 c1                	mov    ecx,eax
c00059c1:	39 c2                	cmp    edx,eax
c00059c3:	74 b7                	je     c000597c <f_lseek+0xa3>
c00059c5:	83 c6 02             	add    esi,0x2
c00059c8:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059cc:	72 0b                	jb     c00059d9 <f_lseek+0x100>
c00059ce:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d1:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d4:	89 0f                	mov    DWORD PTR [edi],ecx
c00059d6:	83 c7 08             	add    edi,0x8
c00059d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059dd:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e0:	76 04                	jbe    c00059e6 <f_lseek+0x10d>
c00059e2:	89 c5                	mov    ebp,eax
c00059e4:	eb 8d                	jmp    c0005973 <f_lseek+0x9a>
c00059e6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059e9:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059ed:	89 30                	mov    DWORD PTR [eax],esi
c00059ef:	0f 87 35 03 00 00    	ja     c0005d2a <f_lseek+0x451>
c00059f5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059fb:	e9 32 03 00 00       	jmp    c0005d32 <f_lseek+0x459>
c0005a00:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a03:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a06:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a0d:	19 f8                	sbb    eax,edi
c0005a0f:	73 07                	jae    c0005a18 <f_lseek+0x13f>
c0005a11:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a14:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a18:	89 f8                	mov    eax,edi
c0005a1a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a1d:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a20:	09 f0                	or     eax,esi
c0005a22:	0f 84 0a 03 00 00    	je     c0005d32 <f_lseek+0x459>
c0005a28:	89 f0                	mov    eax,esi
c0005a2a:	89 fa                	mov    edx,edi
c0005a2c:	83 c0 ff             	add    eax,0xffffffff
c0005a2f:	83 d2 ff             	adc    edx,0xffffffff
c0005a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a35:	89 d1                	mov    ecx,edx
c0005a37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a3b:	89 c2                	mov    edx,eax
c0005a3d:	89 d8                	mov    eax,ebx
c0005a3f:	e8 b6 c2 ff ff       	call   c0001cfa <clmt_clust>
c0005a44:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a48:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4b:	89 c2                	mov    edx,eax
c0005a4d:	89 c8                	mov    eax,ecx
c0005a4f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a53:	e8 81 c2 ff ff       	call   c0001cd9 <clst2sect>
c0005a58:	89 d1                	mov    ecx,edx
c0005a5a:	09 c1                	or     ecx,eax
c0005a5c:	0f 84 33 ff ff ff    	je     c0005995 <f_lseek+0xbc>
c0005a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a68:	0f 84 c4 02 00 00    	je     c0005d32 <f_lseek+0x459>
c0005a6e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a72:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a76:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a79:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a7d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a81:	4d                   	dec    ebp
c0005a82:	31 ff                	xor    edi,edi
c0005a84:	21 ee                	and    esi,ebp
c0005a86:	01 c6                	add    esi,eax
c0005a88:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a8b:	11 d7                	adc    edi,edx
c0005a8d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a90:	39 fa                	cmp    edx,edi
c0005a92:	75 08                	jne    c0005a9c <f_lseek+0x1c3>
c0005a94:	39 f0                	cmp    eax,esi
c0005a96:	0f 84 96 02 00 00    	je     c0005d32 <f_lseek+0x459>
c0005a9c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a9f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa3:	0f 89 58 02 00 00    	jns    c0005d01 <f_lseek+0x428>
c0005aa9:	83 ec 0c             	sub    esp,0xc
c0005aac:	6a 01                	push   0x1
c0005aae:	52                   	push   edx
c0005aaf:	50                   	push   eax
c0005ab0:	55                   	push   ebp
c0005ab1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ab5:	e9 32 02 00 00       	jmp    c0005cec <f_lseek+0x413>
c0005aba:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005abe:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac1:	74 16                	je     c0005ad9 <f_lseek+0x200>
c0005ac3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ac8:	76 0f                	jbe    c0005ad9 <f_lseek+0x200>
c0005aca:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ad9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005adc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005adf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae2:	89 c7                	mov    edi,eax
c0005ae4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005ae8:	73 0d                	jae    c0005af7 <f_lseek+0x21e>
c0005aea:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005aee:	75 07                	jne    c0005af7 <f_lseek+0x21e>
c0005af0:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005af7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005afb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005afe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b01:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b08:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b0f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b12:	75 09                	jne    c0005b1d <f_lseek+0x244>
c0005b14:	31 f6                	xor    esi,esi
c0005b16:	31 ff                	xor    edi,edi
c0005b18:	e9 87 01 00 00       	jmp    c0005ca4 <f_lseek+0x3cb>
c0005b1d:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b21:	c1 e1 09             	shl    ecx,0x9
c0005b24:	89 d7                	mov    edi,edx
c0005b26:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2a:	09 c7                	or     edi,eax
c0005b2c:	74 6b                	je     c0005b99 <f_lseek+0x2c0>
c0005b2e:	83 c0 ff             	add    eax,0xffffffff
c0005b31:	89 cf                	mov    edi,ecx
c0005b33:	83 d2 ff             	adc    edx,0xffffffff
c0005b36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b41:	83 c0 ff             	add    eax,0xffffffff
c0005b44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b48:	83 d2 ff             	adc    edx,0xffffffff
c0005b4b:	31 ed                	xor    ebp,ebp
c0005b4d:	55                   	push   ebp
c0005b4e:	51                   	push   ecx
c0005b4f:	52                   	push   edx
c0005b50:	50                   	push   eax
c0005b51:	e8 a6 99 01 00       	call   c001f4fc <__udivdi3>
c0005b56:	83 c4 10             	add    esp,0x10
c0005b59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b5d:	89 d6                	mov    esi,edx
c0005b5f:	55                   	push   ebp
c0005b60:	57                   	push   edi
c0005b61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b69:	e8 8e 99 01 00       	call   c001f4fc <__udivdi3>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b75:	19 d6                	sbb    esi,edx
c0005b77:	72 20                	jb     c0005b99 <f_lseek+0x2c0>
c0005b79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b81:	f7 d9                	neg    ecx
c0005b83:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b87:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b8d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b90:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b94:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b97:	eb 28                	jmp    c0005bc1 <f_lseek+0x2e8>
c0005b99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b9c:	85 c0                	test   eax,eax
c0005b9e:	75 1e                	jne    c0005bbe <f_lseek+0x2e5>
c0005ba0:	31 d2                	xor    edx,edx
c0005ba2:	89 d8                	mov    eax,ebx
c0005ba4:	e8 de d4 ff ff       	call   c0003087 <create_chain>
c0005ba9:	83 f8 01             	cmp    eax,0x1
c0005bac:	0f 84 e3 fd ff ff    	je     c0005995 <f_lseek+0xbc>
c0005bb2:	83 f8 ff             	cmp    eax,0xffffffff
c0005bb5:	0f 84 f0 fd ff ff    	je     c00059ab <f_lseek+0xd2>
c0005bbb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc1:	85 c0                	test   eax,eax
c0005bc3:	0f 84 4b ff ff ff    	je     c0005b14 <f_lseek+0x23b>
c0005bc9:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bcd:	31 ff                	xor    edi,edi
c0005bcf:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd2:	89 fd                	mov    ebp,edi
c0005bd4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bd8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bdb:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bde:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be2:	73 7d                	jae    c0005c61 <f_lseek+0x388>
c0005be4:	29 34 24             	sub    DWORD PTR [esp],esi
c0005be7:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005beb:	01 d6                	add    esi,edx
c0005bed:	11 cf                	adc    edi,ecx
c0005bef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bf5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bf8:	f6 c2 02             	test   dl,0x2
c0005bfb:	74 25                	je     c0005c22 <f_lseek+0x349>
c0005bfd:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c00:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c03:	19 f9                	sbb    ecx,edi
c0005c05:	73 0c                	jae    c0005c13 <f_lseek+0x33a>
c0005c07:	83 ca 40             	or     edx,0x40
c0005c0a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c0d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c10:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c13:	89 c2                	mov    edx,eax
c0005c15:	89 d8                	mov    eax,ebx
c0005c17:	e8 6b d4 ff ff       	call   c0003087 <create_chain>
c0005c1c:	85 c0                	test   eax,eax
c0005c1e:	75 0b                	jne    c0005c2b <f_lseek+0x352>
c0005c20:	eb 30                	jmp    c0005c52 <f_lseek+0x379>
c0005c22:	89 c2                	mov    edx,eax
c0005c24:	89 d8                	mov    eax,ebx
c0005c26:	e8 6e d1 ff ff       	call   c0002d99 <get_fat>
c0005c2b:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2e:	0f 84 77 fd ff ff    	je     c00059ab <f_lseek+0xd2>
c0005c34:	83 f8 01             	cmp    eax,0x1
c0005c37:	0f 86 58 fd ff ff    	jbe    c0005995 <f_lseek+0xbc>
c0005c3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c41:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c44:	0f 86 4b fd ff ff    	jbe    c0005995 <f_lseek+0xbc>
c0005c4a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c4d:	e9 77 ff ff ff       	jmp    c0005bc9 <f_lseek+0x2f0>
c0005c52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c61:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c64:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c68:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c6b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c6e:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c71:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c77:	0f 84 97 fe ff ff    	je     c0005b14 <f_lseek+0x23b>
c0005c7d:	89 c2                	mov    edx,eax
c0005c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c83:	e8 51 c0 ff ff       	call   c0001cd9 <clst2sect>
c0005c88:	89 d7                	mov    edi,edx
c0005c8a:	09 c7                	or     edi,eax
c0005c8c:	0f 84 03 fd ff ff    	je     c0005995 <f_lseek+0xbc>
c0005c92:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c99:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c9d:	c1 ef 09             	shr    edi,0x9
c0005ca0:	01 c6                	add    esi,eax
c0005ca2:	11 d7                	adc    edi,edx
c0005ca4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ca7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caa:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cad:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb0:	19 d1                	sbb    ecx,edx
c0005cb2:	73 0a                	jae    c0005cbe <f_lseek+0x3e5>
c0005cb4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cb8:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cbb:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cbe:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc3:	74 6d                	je     c0005d32 <f_lseek+0x459>
c0005cc5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cc8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ccb:	39 fa                	cmp    edx,edi
c0005ccd:	75 04                	jne    c0005cd3 <f_lseek+0x3fa>
c0005ccf:	39 f0                	cmp    eax,esi
c0005cd1:	74 5f                	je     c0005d32 <f_lseek+0x459>
c0005cd3:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cd6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cda:	79 25                	jns    c0005d01 <f_lseek+0x428>
c0005cdc:	83 ec 0c             	sub    esp,0xc
c0005cdf:	6a 01                	push   0x1
c0005ce1:	52                   	push   edx
c0005ce2:	50                   	push   eax
c0005ce3:	55                   	push   ebp
c0005ce4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ce8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cec:	50                   	push   eax
c0005ced:	e8 19 bd ff ff       	call   c0001a0b <disk_write>
c0005cf2:	83 c4 20             	add    esp,0x20
c0005cf5:	85 c0                	test   eax,eax
c0005cf7:	0f 85 ae fc ff ff    	jne    c00059ab <f_lseek+0xd2>
c0005cfd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d01:	83 ec 0c             	sub    esp,0xc
c0005d04:	6a 01                	push   0x1
c0005d06:	57                   	push   edi
c0005d07:	56                   	push   esi
c0005d08:	55                   	push   ebp
c0005d09:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d0d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d11:	50                   	push   eax
c0005d12:	e8 de bc ff ff       	call   c00019f5 <disk_read>
c0005d17:	83 c4 20             	add    esp,0x20
c0005d1a:	85 c0                	test   eax,eax
c0005d1c:	0f 85 89 fc ff ff    	jne    c00059ab <f_lseek+0xd2>
c0005d22:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d25:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d28:	eb 08                	jmp    c0005d32 <f_lseek+0x459>
c0005d2a:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d36:	83 c4 3c             	add    esp,0x3c
c0005d39:	5b                   	pop    ebx
c0005d3a:	5e                   	pop    esi
c0005d3b:	5f                   	pop    edi
c0005d3c:	5d                   	pop    ebp
c0005d3d:	c3                   	ret    

c0005d3e <f_opendir>:
c0005d3e:	56                   	push   esi
c0005d3f:	b8 09 00 00 00       	mov    eax,0x9
c0005d44:	53                   	push   ebx
c0005d45:	83 ec 24             	sub    esp,0x24
c0005d48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d4c:	85 db                	test   ebx,ebx
c0005d4e:	0f 84 e6 00 00 00    	je     c0005e3a <f_opendir+0xfc>
c0005d54:	31 c9                	xor    ecx,ecx
c0005d56:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5a:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d5e:	e8 5f c7 ff ff       	call   c00024c2 <mount_volume>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	0f 85 c9 00 00 00    	jne    c0005e34 <f_opendir+0xf6>
c0005d6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d6f:	83 ec 0c             	sub    esp,0xc
c0005d72:	89 03                	mov    DWORD PTR [ebx],eax
c0005d74:	68 60 04 00 00       	push   0x460
c0005d79:	e8 a8 24 00 00       	call   c0008226 <ff_memalloc>
c0005d7e:	89 c6                	mov    esi,eax
c0005d80:	83 c4 10             	add    esp,0x10
c0005d83:	b8 11 00 00 00       	mov    eax,0x11
c0005d88:	85 f6                	test   esi,esi
c0005d8a:	0f 84 aa 00 00 00    	je     c0005e3a <f_opendir+0xfc>
c0005d90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d94:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d9d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da4:	89 d8                	mov    eax,ebx
c0005da6:	e8 83 ee ff ff       	call   c0004c2e <follow_path>
c0005dab:	85 c0                	test   eax,eax
c0005dad:	75 61                	jne    c0005e10 <f_opendir+0xd2>
c0005daf:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db3:	78 46                	js     c0005dfb <f_opendir+0xbd>
c0005db5:	b8 05 00 00 00       	mov    eax,0x5
c0005dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dbe:	74 50                	je     c0005e10 <f_opendir+0xd2>
c0005dc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc4:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dc6:	3c 04                	cmp    al,0x4
c0005dc8:	75 26                	jne    c0005df0 <f_opendir+0xb2>
c0005dca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dcd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd3:	30 d2                	xor    dl,dl
c0005dd5:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dd9:	09 c2                	or     edx,eax
c0005ddb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005dde:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de4:	89 da                	mov    edx,ebx
c0005de6:	8d 41 10             	lea    eax,[ecx+0x10]
c0005de9:	e8 06 ee ff ff       	call   c0004bf4 <init_alloc_info.isra.2>
c0005dee:	eb 0b                	jmp    c0005dfb <f_opendir+0xbd>
c0005df0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df3:	e8 ab ed ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0005df8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005dfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dff:	31 d2                	xor    edx,edx
c0005e01:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e05:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e09:	89 d8                	mov    eax,ebx
c0005e0b:	e8 7f d1 ff ff       	call   c0002f8f <dir_sdi>
c0005e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e14:	83 ec 0c             	sub    esp,0xc
c0005e17:	56                   	push   esi
c0005e18:	e8 1f 24 00 00       	call   c000823c <ff_memfree>
c0005e1d:	83 c4 10             	add    esp,0x10
c0005e20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e24:	83 f8 04             	cmp    eax,0x4
c0005e27:	74 06                	je     c0005e2f <f_opendir+0xf1>
c0005e29:	85 c0                	test   eax,eax
c0005e2b:	74 0d                	je     c0005e3a <f_opendir+0xfc>
c0005e2d:	eb 05                	jmp    c0005e34 <f_opendir+0xf6>
c0005e2f:	b8 05 00 00 00       	mov    eax,0x5
c0005e34:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3a:	83 c4 24             	add    esp,0x24
c0005e3d:	5b                   	pop    ebx
c0005e3e:	5e                   	pop    esi
c0005e3f:	c3                   	ret    

c0005e40 <f_closedir>:
c0005e40:	53                   	push   ebx
c0005e41:	83 ec 18             	sub    esp,0x18
c0005e44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e48:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e4c:	89 d8                	mov    eax,ebx
c0005e4e:	e8 e9 c2 ff ff       	call   c000213c <validate>
c0005e53:	85 c0                	test   eax,eax
c0005e55:	75 06                	jne    c0005e5d <f_closedir+0x1d>
c0005e57:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e5d:	83 c4 18             	add    esp,0x18
c0005e60:	5b                   	pop    ebx
c0005e61:	c3                   	ret    

c0005e62 <f_readdir>:
c0005e62:	57                   	push   edi
c0005e63:	56                   	push   esi
c0005e64:	53                   	push   ebx
c0005e65:	83 ec 20             	sub    esp,0x20
c0005e68:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e6c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e70:	89 d8                	mov    eax,ebx
c0005e72:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e76:	e8 c1 c2 ff ff       	call   c000213c <validate>
c0005e7b:	85 c0                	test   eax,eax
c0005e7d:	75 77                	jne    c0005ef6 <f_readdir+0x94>
c0005e7f:	85 ff                	test   edi,edi
c0005e81:	75 0b                	jne    c0005e8e <f_readdir+0x2c>
c0005e83:	31 d2                	xor    edx,edx
c0005e85:	89 d8                	mov    eax,ebx
c0005e87:	e8 03 d1 ff ff       	call   c0002f8f <dir_sdi>
c0005e8c:	eb 68                	jmp    c0005ef6 <f_readdir+0x94>
c0005e8e:	83 ec 0c             	sub    esp,0xc
c0005e91:	68 60 04 00 00       	push   0x460
c0005e96:	e8 8b 23 00 00       	call   c0008226 <ff_memalloc>
c0005e9b:	89 c6                	mov    esi,eax
c0005e9d:	83 c4 10             	add    esp,0x10
c0005ea0:	b8 11 00 00 00       	mov    eax,0x11
c0005ea5:	85 f6                	test   esi,esi
c0005ea7:	74 4d                	je     c0005ef6 <f_readdir+0x94>
c0005ea9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ead:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eb9:	31 d2                	xor    edx,edx
c0005ebb:	89 d8                	mov    eax,ebx
c0005ebd:	e8 df d8 ff ff       	call   c00037a1 <dir_read>
c0005ec2:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ec7:	75 19                	jne    c0005ee2 <f_readdir+0x80>
c0005ec9:	89 fa                	mov    edx,edi
c0005ecb:	89 d8                	mov    eax,ebx
c0005ecd:	e8 d0 ea ff ff       	call   c00049a2 <get_fileinfo>
c0005ed2:	31 d2                	xor    edx,edx
c0005ed4:	89 d8                	mov    eax,ebx
c0005ed6:	e8 0e d6 ff ff       	call   c00034e9 <dir_next>
c0005edb:	83 f8 04             	cmp    eax,0x4
c0005ede:	75 02                	jne    c0005ee2 <f_readdir+0x80>
c0005ee0:	31 c0                	xor    eax,eax
c0005ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ee6:	83 ec 0c             	sub    esp,0xc
c0005ee9:	56                   	push   esi
c0005eea:	e8 4d 23 00 00       	call   c000823c <ff_memfree>
c0005eef:	83 c4 10             	add    esp,0x10
c0005ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ef6:	83 c4 20             	add    esp,0x20
c0005ef9:	5b                   	pop    ebx
c0005efa:	5e                   	pop    esi
c0005efb:	5f                   	pop    edi
c0005efc:	c3                   	ret    

c0005efd <f_stat>:
c0005efd:	57                   	push   edi
c0005efe:	31 c9                	xor    ecx,ecx
c0005f00:	56                   	push   esi
c0005f01:	53                   	push   ebx
c0005f02:	83 ec 50             	sub    esp,0x50
c0005f05:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f09:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f0d:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f11:	e8 ac c5 ff ff       	call   c00024c2 <mount_volume>
c0005f16:	89 c3                	mov    ebx,eax
c0005f18:	85 c0                	test   eax,eax
c0005f1a:	75 67                	jne    c0005f83 <f_stat+0x86>
c0005f1c:	83 ec 0c             	sub    esp,0xc
c0005f1f:	bb 11 00 00 00       	mov    ebx,0x11
c0005f24:	68 60 04 00 00       	push   0x460
c0005f29:	e8 f8 22 00 00       	call   c0008226 <ff_memalloc>
c0005f2e:	83 c4 10             	add    esp,0x10
c0005f31:	89 c6                	mov    esi,eax
c0005f33:	85 c0                	test   eax,eax
c0005f35:	74 4c                	je     c0005f83 <f_stat+0x86>
c0005f37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f3b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f44:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f47:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f4b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f4f:	e8 da ec ff ff       	call   c0004c2e <follow_path>
c0005f54:	89 c3                	mov    ebx,eax
c0005f56:	85 c0                	test   eax,eax
c0005f58:	75 1d                	jne    c0005f77 <f_stat+0x7a>
c0005f5a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f5f:	78 11                	js     c0005f72 <f_stat+0x75>
c0005f61:	85 ff                	test   edi,edi
c0005f63:	74 12                	je     c0005f77 <f_stat+0x7a>
c0005f65:	89 fa                	mov    edx,edi
c0005f67:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f6b:	e8 32 ea ff ff       	call   c00049a2 <get_fileinfo>
c0005f70:	eb 05                	jmp    c0005f77 <f_stat+0x7a>
c0005f72:	bb 06 00 00 00       	mov    ebx,0x6
c0005f77:	83 ec 0c             	sub    esp,0xc
c0005f7a:	56                   	push   esi
c0005f7b:	e8 bc 22 00 00       	call   c000823c <ff_memfree>
c0005f80:	83 c4 10             	add    esp,0x10
c0005f83:	83 c4 50             	add    esp,0x50
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	5b                   	pop    ebx
c0005f89:	5e                   	pop    esi
c0005f8a:	5f                   	pop    edi
c0005f8b:	c3                   	ret    

c0005f8c <f_getfree>:
c0005f8c:	55                   	push   ebp
c0005f8d:	31 c9                	xor    ecx,ecx
c0005f8f:	57                   	push   edi
c0005f90:	56                   	push   esi
c0005f91:	53                   	push   ebx
c0005f92:	83 ec 5c             	sub    esp,0x5c
c0005f95:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f99:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f9d:	e8 20 c5 ff ff       	call   c00024c2 <mount_volume>
c0005fa2:	89 c5                	mov    ebp,eax
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 85 be 01 00 00    	jne    c000616a <f_getfree+0x1de>
c0005fac:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb4:	89 02                	mov    DWORD PTR [edx],eax
c0005fb6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fb9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc0:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc3:	39 f2                	cmp    edx,esi
c0005fc5:	77 0b                	ja     c0005fd2 <f_getfree+0x46>
c0005fc7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fcb:	89 10                	mov    DWORD PTR [eax],edx
c0005fcd:	e9 98 01 00 00       	jmp    c000616a <f_getfree+0x1de>
c0005fd2:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd4:	80 fa 01             	cmp    dl,0x1
c0005fd7:	75 3a                	jne    c0006013 <f_getfree+0x87>
c0005fd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fdd:	be 02 00 00 00       	mov    esi,0x2
c0005fe2:	31 db                	xor    ebx,ebx
c0005fe4:	89 f2                	mov    edx,esi
c0005fe6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fea:	e8 aa cd ff ff       	call   c0002d99 <get_fat>
c0005fef:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff2:	0f 84 51 01 00 00    	je     c0006149 <f_getfree+0x1bd>
c0005ff8:	83 f8 01             	cmp    eax,0x1
c0005ffb:	0f 84 4f 01 00 00    	je     c0006150 <f_getfree+0x1c4>
c0006001:	83 d3 00             	adc    ebx,0x0
c0006004:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006008:	46                   	inc    esi
c0006009:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000600c:	77 d6                	ja     c0005fe4 <f_getfree+0x58>
c000600e:	e9 46 01 00 00       	jmp    c0006159 <f_getfree+0x1cd>
c0006013:	80 fa 04             	cmp    dl,0x4
c0006016:	0f 85 94 00 00 00    	jne    c00060b0 <f_getfree+0x124>
c000601c:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000601f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006022:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006026:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602a:	31 ff                	xor    edi,edi
c000602c:	31 db                	xor    ebx,ebx
c000602e:	85 ff                	test   edi,edi
c0006030:	75 3f                	jne    c0006071 <f_getfree+0xe5>
c0006032:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006036:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603a:	83 c0 01             	add    eax,0x1
c000603d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006041:	83 d2 00             	adc    edx,0x0
c0006044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006048:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000604c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006054:	e8 be c1 ff ff       	call   c0002217 <move_window>
c0006059:	85 c0                	test   eax,eax
c000605b:	0f 85 f6 00 00 00    	jne    c0006157 <f_getfree+0x1cb>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000606d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006071:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006075:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006079:	88 c2                	mov    dl,al
c000607b:	b8 08 00 00 00       	mov    eax,0x8
c0006080:	29 f0                	sub    eax,esi
c0006082:	89 c1                	mov    ecx,eax
c0006084:	01 f1                	add    ecx,esi
c0006086:	74 18                	je     c00060a0 <f_getfree+0x114>
c0006088:	85 f6                	test   esi,esi
c000608a:	74 14                	je     c00060a0 <f_getfree+0x114>
c000608c:	88 d1                	mov    cl,dl
c000608e:	83 e1 01             	and    ecx,0x1
c0006091:	80 f9 01             	cmp    cl,0x1
c0006094:	88 d1                	mov    cl,dl
c0006096:	83 d3 00             	adc    ebx,0x0
c0006099:	4e                   	dec    esi
c000609a:	d0 e9                	shr    cl,1
c000609c:	88 ca                	mov    dl,cl
c000609e:	eb e2                	jmp    c0006082 <f_getfree+0xf6>
c00060a0:	47                   	inc    edi
c00060a1:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060a7:	85 f6                	test   esi,esi
c00060a9:	75 83                	jne    c000602e <f_getfree+0xa2>
c00060ab:	e9 a9 00 00 00       	jmp    c0006159 <f_getfree+0x1cd>
c00060b0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060be:	31 db                	xor    ebx,ebx
c00060c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060c5:	75 1b                	jne    c00060e2 <f_getfree+0x156>
c00060c7:	89 d6                	mov    esi,edx
c00060c9:	89 cf                	mov    edi,ecx
c00060cb:	83 c6 01             	add    esi,0x1
c00060ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d2:	83 d7 00             	adc    edi,0x0
c00060d5:	e8 3d c1 ff ff       	call   c0002217 <move_window>
c00060da:	85 c0                	test   eax,eax
c00060dc:	75 79                	jne    c0006157 <f_getfree+0x1cb>
c00060de:	89 f2                	mov    edx,esi
c00060e0:	89 f9                	mov    ecx,edi
c00060e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060ee:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f2:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060f6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00060fd:	75 15                	jne    c0006114 <f_getfree+0x188>
c00060ff:	e8 3c b9 ff ff       	call   c0001a40 <ld_word>
c0006104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006108:	66 83 f8 01          	cmp    ax,0x1
c000610c:	83 d3 00             	adc    ebx,0x0
c000610f:	83 c6 02             	add    esi,0x2
c0006112:	eb 17                	jmp    c000612b <f_getfree+0x19f>
c0006114:	e8 34 b9 ff ff       	call   c0001a4d <ld_dword>
c0006119:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000611d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006122:	83 f8 01             	cmp    eax,0x1
c0006125:	83 d3 00             	adc    ebx,0x0
c0006128:	83 c6 04             	add    esi,0x4
c000612b:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006131:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006135:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006139:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000613d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006141:	0f 85 79 ff ff ff    	jne    c00060c0 <f_getfree+0x134>
c0006147:	eb 10                	jmp    c0006159 <f_getfree+0x1cd>
c0006149:	bd 01 00 00 00       	mov    ebp,0x1
c000614e:	eb 09                	jmp    c0006159 <f_getfree+0x1cd>
c0006150:	bd 02 00 00 00       	mov    ebp,0x2
c0006155:	eb 02                	jmp    c0006159 <f_getfree+0x1cd>
c0006157:	89 c5                	mov    ebp,eax
c0006159:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000615d:	89 18                	mov    DWORD PTR [eax],ebx
c000615f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006163:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006167:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616a:	83 c4 5c             	add    esp,0x5c
c000616d:	89 e8                	mov    eax,ebp
c000616f:	5b                   	pop    ebx
c0006170:	5e                   	pop    esi
c0006171:	5f                   	pop    edi
c0006172:	5d                   	pop    ebp
c0006173:	c3                   	ret    

c0006174 <f_truncate>:
c0006174:	56                   	push   esi
c0006175:	53                   	push   ebx
c0006176:	83 ec 14             	sub    esp,0x14
c0006179:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000617d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006181:	89 d8                	mov    eax,ebx
c0006183:	e8 b4 bf ff ff       	call   c000213c <validate>
c0006188:	89 c6                	mov    esi,eax
c000618a:	85 c0                	test   eax,eax
c000618c:	0f 85 d2 00 00 00    	jne    c0006264 <f_truncate+0xf0>
c0006192:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006196:	85 f6                	test   esi,esi
c0006198:	0f 85 c6 00 00 00    	jne    c0006264 <f_truncate+0xf0>
c000619e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a2:	0f 84 b7 00 00 00    	je     c000625f <f_truncate+0xeb>
c00061a8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061ab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061ae:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061b6:	0f 83 a8 00 00 00    	jae    c0006264 <f_truncate+0xf0>
c00061bc:	09 c2                	or     edx,eax
c00061be:	75 15                	jne    c00061d5 <f_truncate+0x61>
c00061c0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c3:	31 c9                	xor    ecx,ecx
c00061c5:	89 d8                	mov    eax,ebx
c00061c7:	e8 bc d0 ff ff       	call   c0003288 <remove_chain>
c00061cc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d3:	eb 35                	jmp    c000620a <f_truncate+0x96>
c00061d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 ba cb ff ff       	call   c0002d99 <get_fat>
c00061df:	89 c2                	mov    edx,eax
c00061e1:	b8 01 00 00 00       	mov    eax,0x1
c00061e6:	83 fa ff             	cmp    edx,0xffffffff
c00061e9:	74 1f                	je     c000620a <f_truncate+0x96>
c00061eb:	b8 02 00 00 00       	mov    eax,0x2
c00061f0:	83 fa 01             	cmp    edx,0x1
c00061f3:	74 15                	je     c000620a <f_truncate+0x96>
c00061f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061f9:	31 c0                	xor    eax,eax
c00061fb:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00061fe:	76 0a                	jbe    c000620a <f_truncate+0x96>
c0006200:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006203:	89 d8                	mov    eax,ebx
c0006205:	e8 7e d0 ff ff       	call   c0003288 <remove_chain>
c000620a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000620d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006210:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006213:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006216:	83 ca 40             	or     edx,0x40
c0006219:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000621c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000621f:	85 c0                	test   eax,eax
c0006221:	75 35                	jne    c0006258 <f_truncate+0xe4>
c0006223:	84 d2                	test   dl,dl
c0006225:	79 3d                	jns    c0006264 <f_truncate+0xf0>
c0006227:	83 ec 0c             	sub    esp,0xc
c000622a:	8d 43 50             	lea    eax,[ebx+0x50]
c000622d:	6a 01                	push   0x1
c000622f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006232:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006235:	50                   	push   eax
c0006236:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000623e:	50                   	push   eax
c000623f:	e8 c7 b7 ff ff       	call   c0001a0b <disk_write>
c0006244:	83 c4 20             	add    esp,0x20
c0006247:	85 c0                	test   eax,eax
c0006249:	75 08                	jne    c0006253 <f_truncate+0xdf>
c000624b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000624f:	31 f6                	xor    esi,esi
c0006251:	eb 11                	jmp    c0006264 <f_truncate+0xf0>
c0006253:	b8 01 00 00 00       	mov    eax,0x1
c0006258:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000625b:	89 c6                	mov    esi,eax
c000625d:	eb 05                	jmp    c0006264 <f_truncate+0xf0>
c000625f:	be 07 00 00 00       	mov    esi,0x7
c0006264:	83 c4 14             	add    esp,0x14
c0006267:	89 f0                	mov    eax,esi
c0006269:	5b                   	pop    ebx
c000626a:	5e                   	pop    esi
c000626b:	c3                   	ret    

c000626c <f_unlink>:
c000626c:	56                   	push   esi
c000626d:	b9 02 00 00 00       	mov    ecx,0x2
c0006272:	53                   	push   ebx
c0006273:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000627d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006284:	e8 39 c2 ff ff       	call   c00024c2 <mount_volume>
c0006289:	85 c0                	test   eax,eax
c000628b:	0f 85 53 01 00 00    	jne    c00063e4 <f_unlink+0x178>
c0006291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006295:	83 ec 0c             	sub    esp,0xc
c0006298:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000629c:	68 60 04 00 00       	push   0x460
c00062a1:	e8 80 1f 00 00       	call   c0008226 <ff_memalloc>
c00062a6:	89 c3                	mov    ebx,eax
c00062a8:	83 c4 10             	add    esp,0x10
c00062ab:	b8 11 00 00 00       	mov    eax,0x11
c00062b0:	85 db                	test   ebx,ebx
c00062b2:	0f 84 2c 01 00 00    	je     c00063e4 <f_unlink+0x178>
c00062b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062bc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062c5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062c8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062cf:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d3:	e8 56 e9 ff ff       	call   c0004c2e <follow_path>
c00062d8:	85 c0                	test   eax,eax
c00062da:	0f 85 f0 00 00 00    	jne    c00063d0 <f_unlink+0x164>
c00062e0:	b8 06 00 00 00       	mov    eax,0x6
c00062e5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062ed:	0f 88 dd 00 00 00    	js     c00063d0 <f_unlink+0x164>
c00062f3:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062f8:	74 0a                	je     c0006304 <f_unlink+0x98>
c00062fa:	b8 07 00 00 00       	mov    eax,0x7
c00062ff:	e9 cc 00 00 00       	jmp    c00063d0 <f_unlink+0x164>
c0006304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006308:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000630c:	8a 02                	mov    al,BYTE PTR [edx]
c000630e:	3c 04                	cmp    al,0x4
c0006310:	75 12                	jne    c0006324 <f_unlink+0xb8>
c0006312:	8d 42 10             	lea    eax,[edx+0x10]
c0006315:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006319:	e8 d6 e8 ff ff       	call   c0004bf4 <init_alloc_info.isra.2>
c000631e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006322:	eb 0e                	jmp    c0006332 <f_unlink+0xc6>
c0006324:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000632b:	e8 73 e8 ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0006330:	89 c6                	mov    esi,eax
c0006332:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006337:	75 20                	jne    c0006359 <f_unlink+0xed>
c0006339:	8d 44 24 48          	lea    eax,[esp+0x48]
c000633d:	e8 d6 d6 ff ff       	call   c0003a18 <dir_remove>
c0006342:	85 c0                	test   eax,eax
c0006344:	75 7d                	jne    c00063c3 <f_unlink+0x157>
c0006346:	85 f6                	test   esi,esi
c0006348:	74 79                	je     c00063c3 <f_unlink+0x157>
c000634a:	31 c9                	xor    ecx,ecx
c000634c:	89 f2                	mov    edx,esi
c000634e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006352:	e8 31 cf ff ff       	call   c0003288 <remove_chain>
c0006357:	eb 6a                	jmp    c00063c3 <f_unlink+0x157>
c0006359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006364:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000636e:	75 21                	jne    c0006391 <f_unlink+0x125>
c0006370:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006378:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000637f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006383:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006391:	31 d2                	xor    edx,edx
c0006393:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639a:	e8 f0 cb ff ff       	call   c0002f8f <dir_sdi>
c000639f:	85 c0                	test   eax,eax
c00063a1:	75 2d                	jne    c00063d0 <f_unlink+0x164>
c00063a3:	31 d2                	xor    edx,edx
c00063a5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ac:	e8 f0 d3 ff ff       	call   c00037a1 <dir_read>
c00063b1:	85 c0                	test   eax,eax
c00063b3:	0f 84 41 ff ff ff    	je     c00062fa <f_unlink+0x8e>
c00063b9:	83 f8 04             	cmp    eax,0x4
c00063bc:	75 12                	jne    c00063d0 <f_unlink+0x164>
c00063be:	e9 76 ff ff ff       	jmp    c0006339 <f_unlink+0xcd>
c00063c3:	85 c0                	test   eax,eax
c00063c5:	75 09                	jne    c00063d0 <f_unlink+0x164>
c00063c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063cb:	e8 55 df ff ff       	call   c0004325 <sync_fs>
c00063d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d4:	83 ec 0c             	sub    esp,0xc
c00063d7:	53                   	push   ebx
c00063d8:	e8 5f 1e 00 00       	call   c000823c <ff_memfree>
c00063dd:	83 c4 10             	add    esp,0x10
c00063e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e4:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ea:	5b                   	pop    ebx
c00063eb:	5e                   	pop    esi
c00063ec:	c3                   	ret    

c00063ed <f_mkdir>:
c00063ed:	57                   	push   edi
c00063ee:	b9 02 00 00 00       	mov    ecx,0x2
c00063f3:	56                   	push   esi
c00063f4:	53                   	push   ebx
c00063f5:	83 c4 80             	add    esp,0xffffff80
c00063f8:	8d 54 24 08          	lea    edx,[esp+0x8]
c00063fc:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006403:	e8 ba c0 ff ff       	call   c00024c2 <mount_volume>
c0006408:	89 c3                	mov    ebx,eax
c000640a:	85 c0                	test   eax,eax
c000640c:	0f 85 fe 01 00 00    	jne    c0006610 <f_mkdir+0x223>
c0006412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006416:	83 ec 0c             	sub    esp,0xc
c0006419:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000641d:	bb 11 00 00 00       	mov    ebx,0x11
c0006422:	68 60 04 00 00       	push   0x460
c0006427:	e8 fa 1d 00 00       	call   c0008226 <ff_memalloc>
c000642c:	83 c4 10             	add    esp,0x10
c000642f:	89 c7                	mov    edi,eax
c0006431:	85 c0                	test   eax,eax
c0006433:	0f 84 d7 01 00 00    	je     c0006610 <f_mkdir+0x223>
c0006439:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000643d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006443:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006446:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006449:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006450:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006454:	e8 d5 e7 ff ff       	call   c0004c2e <follow_path>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	85 c0                	test   eax,eax
c000645d:	74 3e                	je     c000649d <f_mkdir+0xb0>
c000645f:	83 f8 04             	cmp    eax,0x4
c0006462:	75 3e                	jne    c00064a2 <f_mkdir+0xb5>
c0006464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006468:	31 d2                	xor    edx,edx
c000646a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000646e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006472:	e8 10 cc ff ff       	call   c0003087 <create_chain>
c0006477:	89 c6                	mov    esi,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	74 0c                	je     c0006489 <f_mkdir+0x9c>
c000647d:	bb 02 00 00 00       	mov    ebx,0x2
c0006482:	83 f8 01             	cmp    eax,0x1
c0006485:	74 07                	je     c000648e <f_mkdir+0xa1>
c0006487:	eb 2a                	jmp    c00064b3 <f_mkdir+0xc6>
c0006489:	bb 07 00 00 00       	mov    ebx,0x7
c000648e:	31 c9                	xor    ecx,ecx
c0006490:	89 f2                	mov    edx,esi
c0006492:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006496:	e8 ed cd ff ff       	call   c0003288 <remove_chain>
c000649b:	eb 05                	jmp    c00064a2 <f_mkdir+0xb5>
c000649d:	bb 08 00 00 00       	mov    ebx,0x8
c00064a2:	83 ec 0c             	sub    esp,0xc
c00064a5:	57                   	push   edi
c00064a6:	e8 91 1d 00 00       	call   c000823c <ff_memfree>
c00064ab:	83 c4 10             	add    esp,0x10
c00064ae:	e9 5d 01 00 00       	jmp    c0006610 <f_mkdir+0x223>
c00064b3:	bb 01 00 00 00       	mov    ebx,0x1
c00064b8:	83 f8 ff             	cmp    eax,0xffffffff
c00064bb:	74 d1                	je     c000648e <f_mkdir+0xa1>
c00064bd:	89 f2                	mov    edx,esi
c00064bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c3:	e8 08 cf ff ff       	call   c00033d0 <dir_clear>
c00064c8:	89 c3                	mov    ebx,eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	75 c0                	jne    c000648e <f_mkdir+0xa1>
c00064ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d5:	74 69                	je     c0006540 <f_mkdir+0x153>
c00064d7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064dc:	83 c0 54             	add    eax,0x54
c00064df:	ba 20 00 00 00       	mov    edx,0x20
c00064e4:	e8 eb b5 ff ff       	call   c0001ad4 <mem_set>
c00064e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ed:	83 c0 6a             	add    eax,0x6a
c00064f0:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f4:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064f8:	ba 00 00 21 50       	mov    edx,0x50210000
c00064fd:	e8 b4 b5 ff ff       	call   c0001ab6 <st_dword>
c0006502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006506:	89 f1                	mov    ecx,esi
c0006508:	8d 50 54             	lea    edx,[eax+0x54]
c000650b:	e8 bc e6 ff ff       	call   c0004bcc <st_clust.isra.1>
c0006510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006514:	b9 20 00 00 00       	mov    ecx,0x20
c0006519:	8d 50 54             	lea    edx,[eax+0x54]
c000651c:	83 c0 74             	add    eax,0x74
c000651f:	e8 9b b5 ff ff       	call   c0001abf <mem_cpy>
c0006524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006528:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000652c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006530:	8d 50 74             	lea    edx,[eax+0x74]
c0006533:	e8 94 e6 ff ff       	call   c0004bcc <st_clust.isra.1>
c0006538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006540:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006544:	e8 59 db ff ff       	call   c00040a2 <dir_register>
c0006549:	89 c3                	mov    ebx,eax
c000654b:	85 c0                	test   eax,eax
c000654d:	0f 85 3b ff ff ff    	jne    c000648e <f_mkdir+0xa1>
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655a:	75 74                	jne    c00065d0 <f_mkdir+0x1e3>
c000655c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000655f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006564:	83 c0 0c             	add    eax,0xc
c0006567:	e8 4a b5 ff ff       	call   c0001ab6 <st_dword>
c000656c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006570:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006573:	89 f2                	mov    edx,esi
c0006575:	83 c0 34             	add    eax,0x34
c0006578:	e8 39 b5 ff ff       	call   c0001ab6 <st_dword>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006585:	c1 e2 09             	shl    edx,0x9
c0006588:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000658b:	83 c0 38             	add    eax,0x38
c000658e:	e8 23 b5 ff ff       	call   c0001ab6 <st_dword>
c0006593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006597:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000659b:	c1 e2 09             	shl    edx,0x9
c000659e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a1:	83 c0 28             	add    eax,0x28
c00065a4:	e8 0d b5 ff ff       	call   c0001ab6 <st_dword>
c00065a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065bf:	e8 cf d3 ff ff       	call   c0003993 <store_xdir>
c00065c4:	89 c3                	mov    ebx,eax
c00065c6:	85 c0                	test   eax,eax
c00065c8:	0f 85 d4 fe ff ff    	jne    c00064a2 <f_mkdir+0xb5>
c00065ce:	eb 30                	jmp    c0006600 <f_mkdir+0x213>
c00065d0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065d9:	83 c0 16             	add    eax,0x16
c00065dc:	e8 d5 b4 ff ff       	call   c0001ab6 <st_dword>
c00065e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e5:	89 f1                	mov    ecx,esi
c00065e7:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065eb:	e8 dc e5 ff ff       	call   c0004bcc <st_clust.isra.1>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006604:	e8 1c dd ff ff       	call   c0004325 <sync_fs>
c0006609:	89 c3                	mov    ebx,eax
c000660b:	e9 92 fe ff ff       	jmp    c00064a2 <f_mkdir+0xb5>
c0006610:	83 ec 80             	sub    esp,0xffffff80
c0006613:	89 d8                	mov    eax,ebx
c0006615:	5b                   	pop    ebx
c0006616:	5e                   	pop    esi
c0006617:	5f                   	pop    edi
c0006618:	c3                   	ret    

c0006619 <f_rename>:
c0006619:	55                   	push   ebp
c000661a:	57                   	push   edi
c000661b:	56                   	push   esi
c000661c:	53                   	push   ebx
c000661d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006623:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662a:	e8 f3 b9 ff ff       	call   c0002022 <get_ldnumber>
c000662f:	b9 02 00 00 00       	mov    ecx,0x2
c0006634:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006638:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000663f:	e8 7e be ff ff       	call   c00024c2 <mount_volume>
c0006644:	85 c0                	test   eax,eax
c0006646:	0f 85 b5 02 00 00    	jne    c0006901 <f_rename+0x2e8>
c000664c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006650:	83 ec 0c             	sub    esp,0xc
c0006653:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006657:	68 60 04 00 00       	push   0x460
c000665c:	e8 c5 1b 00 00       	call   c0008226 <ff_memalloc>
c0006661:	89 c3                	mov    ebx,eax
c0006663:	83 c4 10             	add    esp,0x10
c0006666:	b8 11 00 00 00       	mov    eax,0x11
c000666b:	85 db                	test   ebx,ebx
c000666d:	0f 84 8e 02 00 00    	je     c0006901 <f_rename+0x2e8>
c0006673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006677:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000667d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006680:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006683:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000668e:	e8 9b e5 ff ff       	call   c0004c2e <follow_path>
c0006693:	85 c0                	test   eax,eax
c0006695:	0f 85 52 02 00 00    	jne    c00068ed <f_rename+0x2d4>
c000669b:	b8 06 00 00 00       	mov    eax,0x6
c00066a0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066a8:	0f 85 3f 02 00 00    	jne    c00068ed <f_rename+0x2d4>
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066b5:	0f 85 05 01 00 00    	jne    c00067c0 <f_rename+0x1a7>
c00066bb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066be:	b9 40 00 00 00       	mov    ecx,0x40
c00066c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066c7:	e8 f3 b3 ff ff       	call   c0001abf <mem_cpy>
c00066cc:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066d5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066dc:	e8 de b3 ff ff       	call   c0001abf <mem_cpy>
c00066e1:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066e8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ef:	e8 3a e5 ff ff       	call   c0004c2e <follow_path>
c00066f4:	85 c0                	test   eax,eax
c00066f6:	75 29                	jne    c0006721 <f_rename+0x108>
c00066f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00066fc:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006703:	74 0a                	je     c000670f <f_rename+0xf6>
c0006705:	b8 08 00 00 00       	mov    eax,0x8
c000670a:	e9 de 01 00 00       	jmp    c00068ed <f_rename+0x2d4>
c000670f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006716:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000671d:	75 e6                	jne    c0006705 <f_rename+0xec>
c000671f:	eb 09                	jmp    c000672a <f_rename+0x111>
c0006721:	83 f8 04             	cmp    eax,0x4
c0006724:	0f 85 c3 01 00 00    	jne    c00068ed <f_rename+0x2d4>
c000672a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006731:	e8 6c d9 ff ff       	call   c00040a2 <dir_register>
c0006736:	85 c0                	test   eax,eax
c0006738:	0f 85 af 01 00 00    	jne    c00068ed <f_rename+0x2d4>
c000673e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006742:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006745:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006748:	89 c5                	mov    ebp,eax
c000674a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000674d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006751:	8d 46 24             	lea    eax,[esi+0x24]
c0006754:	e8 e7 b2 ff ff       	call   c0001a40 <ld_word>
c0006759:	b9 40 00 00 00       	mov    ecx,0x40
c000675e:	89 c7                	mov    edi,eax
c0006760:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006764:	89 f0                	mov    eax,esi
c0006766:	e8 54 b3 ff ff       	call   c0001abf <mem_cpy>
c000676b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000676f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006772:	89 e9                	mov    ecx,ebp
c0006774:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006777:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000677b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006782:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006785:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006788:	83 c0 24             	add    eax,0x24
c000678b:	0f b7 d7             	movzx  edx,di
c000678e:	e8 1f b3 ff ff       	call   c0001ab2 <st_word>
c0006793:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006797:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000679d:	a8 10                	test   al,0x10
c000679f:	75 06                	jne    c00067a7 <f_rename+0x18e>
c00067a1:	83 c8 20             	or     eax,0x20
c00067a4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067a7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ae:	e8 e0 d1 ff ff       	call   c0003993 <store_xdir>
c00067b3:	85 c0                	test   eax,eax
c00067b5:	0f 84 1c 01 00 00    	je     c00068d7 <f_rename+0x2be>
c00067bb:	e9 2d 01 00 00       	jmp    c00068ed <f_rename+0x2d4>
c00067c0:	b9 20 00 00 00       	mov    ecx,0x20
c00067c5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d0:	e8 ea b2 ff ff       	call   c0001abf <mem_cpy>
c00067d5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067da:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067de:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067e5:	e8 d5 b2 ff ff       	call   c0001abf <mem_cpy>
c00067ea:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f8:	e8 31 e4 ff ff       	call   c0004c2e <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	75 27                	jne    c0006828 <f_rename+0x20f>
c0006801:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006805:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000680c:	0f 85 f3 fe ff ff    	jne    c0006705 <f_rename+0xec>
c0006812:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006819:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006820:	0f 85 df fe ff ff    	jne    c0006705 <f_rename+0xec>
c0006826:	eb 09                	jmp    c0006831 <f_rename+0x218>
c0006828:	83 f8 04             	cmp    eax,0x4
c000682b:	0f 85 bc 00 00 00    	jne    c00068ed <f_rename+0x2d4>
c0006831:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006838:	e8 65 d8 ff ff       	call   c00040a2 <dir_register>
c000683d:	85 c0                	test   eax,eax
c000683f:	0f 85 a8 00 00 00    	jne    c00068ed <f_rename+0x2d4>
c0006845:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000684c:	b9 13 00 00 00       	mov    ecx,0x13
c0006851:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006855:	8d 46 0d             	lea    eax,[esi+0xd]
c0006858:	e8 62 b2 ff ff       	call   c0001abf <mem_cpy>
c000685d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006861:	a8 10                	test   al,0x10
c0006863:	75 03                	jne    c0006868 <f_rename+0x24f>
c0006865:	83 c8 20             	or     eax,0x20
c0006868:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000686b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000686f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006873:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006877:	74 5e                	je     c00068d7 <f_rename+0x2be>
c0006879:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006880:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006884:	74 51                	je     c00068d7 <f_rename+0x2be>
c0006886:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688a:	89 f2                	mov    edx,esi
c000688c:	8a 07                	mov    al,BYTE PTR [edi]
c000688e:	e8 10 e3 ff ff       	call   c0004ba3 <ld_clust.isra.0>
c0006893:	89 c2                	mov    edx,eax
c0006895:	89 f8                	mov    eax,edi
c0006897:	e8 3d b4 ff ff       	call   c0001cd9 <clst2sect>
c000689c:	89 c6                	mov    esi,eax
c000689e:	89 d1                	mov    ecx,edx
c00068a0:	b8 02 00 00 00       	mov    eax,0x2
c00068a5:	09 f2                	or     edx,esi
c00068a7:	74 44                	je     c00068ed <f_rename+0x2d4>
c00068a9:	89 f2                	mov    edx,esi
c00068ab:	89 f8                	mov    eax,edi
c00068ad:	e8 65 b9 ff ff       	call   c0002217 <move_window>
c00068b2:	85 c0                	test   eax,eax
c00068b4:	75 37                	jne    c00068ed <f_rename+0x2d4>
c00068b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ba:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068be:	75 17                	jne    c00068d7 <f_rename+0x2be>
c00068c0:	8d 50 74             	lea    edx,[eax+0x74]
c00068c3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ca:	e8 fd e2 ff ff       	call   c0004bcc <st_clust.isra.1>
c00068cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068d7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068db:	e8 38 d1 ff ff       	call   c0003a18 <dir_remove>
c00068e0:	85 c0                	test   eax,eax
c00068e2:	75 09                	jne    c00068ed <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	e8 38 da ff ff       	call   c0004325 <sync_fs>
c00068ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f1:	83 ec 0c             	sub    esp,0xc
c00068f4:	53                   	push   ebx
c00068f5:	e8 42 19 00 00       	call   c000823c <ff_memfree>
c00068fa:	83 c4 10             	add    esp,0x10
c00068fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006901:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006907:	5b                   	pop    ebx
c0006908:	5e                   	pop    esi
c0006909:	5f                   	pop    edi
c000690a:	5d                   	pop    ebp
c000690b:	c3                   	ret    

c000690c <f_chmod>:
c000690c:	57                   	push   edi
c000690d:	b9 02 00 00 00       	mov    ecx,0x2
c0006912:	56                   	push   esi
c0006913:	53                   	push   ebx
c0006914:	83 ec 60             	sub    esp,0x60
c0006917:	8d 54 24 10          	lea    edx,[esp+0x10]
c000691b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000691f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006923:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006927:	e8 96 bb ff ff       	call   c00024c2 <mount_volume>
c000692c:	85 c0                	test   eax,eax
c000692e:	0f 85 af 00 00 00    	jne    c00069e3 <f_chmod+0xd7>
c0006934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006938:	83 ec 0c             	sub    esp,0xc
c000693b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000693f:	68 60 04 00 00       	push   0x460
c0006944:	e8 dd 18 00 00       	call   c0008226 <ff_memalloc>
c0006949:	89 c6                	mov    esi,eax
c000694b:	83 c4 10             	add    esp,0x10
c000694e:	b8 11 00 00 00       	mov    eax,0x11
c0006953:	85 f6                	test   esi,esi
c0006955:	0f 84 88 00 00 00    	je     c00069e3 <f_chmod+0xd7>
c000695b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000695f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006965:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006968:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000696b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000696f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006973:	e8 b6 e2 ff ff       	call   c0004c2e <follow_path>
c0006978:	85 c0                	test   eax,eax
c000697a:	75 53                	jne    c00069cf <f_chmod+0xc3>
c000697c:	b8 06 00 00 00       	mov    eax,0x6
c0006981:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006986:	75 47                	jne    c00069cf <f_chmod+0xc3>
c0006988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000698c:	89 f9                	mov    ecx,edi
c000698e:	83 e1 27             	and    ecx,0x27
c0006991:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006994:	75 1d                	jne    c00069b3 <f_chmod+0xa7>
c0006996:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006999:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000699c:	21 cb                	and    ebx,ecx
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069a8:	e8 e6 cf ff ff       	call   c0003993 <store_xdir>
c00069ad:	85 c0                	test   eax,eax
c00069af:	75 1e                	jne    c00069cf <f_chmod+0xc3>
c00069b1:	eb 13                	jmp    c00069c6 <f_chmod+0xba>
c00069b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069b7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069ba:	21 cb                	and    ebx,ecx
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ca:	e8 56 d9 ff ff       	call   c0004325 <sync_fs>
c00069cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d3:	83 ec 0c             	sub    esp,0xc
c00069d6:	56                   	push   esi
c00069d7:	e8 60 18 00 00       	call   c000823c <ff_memfree>
c00069dc:	83 c4 10             	add    esp,0x10
c00069df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e3:	83 c4 60             	add    esp,0x60
c00069e6:	5b                   	pop    ebx
c00069e7:	5e                   	pop    esi
c00069e8:	5f                   	pop    edi
c00069e9:	c3                   	ret    

c00069ea <f_utime>:
c00069ea:	56                   	push   esi
c00069eb:	b9 02 00 00 00       	mov    ecx,0x2
c00069f0:	53                   	push   ebx
c00069f1:	83 ec 64             	sub    esp,0x64
c00069f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069f8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069fc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a00:	e8 bd ba ff ff       	call   c00024c2 <mount_volume>
c0006a05:	85 c0                	test   eax,eax
c0006a07:	0f 85 b5 00 00 00    	jne    c0006ac2 <f_utime+0xd8>
c0006a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a11:	83 ec 0c             	sub    esp,0xc
c0006a14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a18:	68 60 04 00 00       	push   0x460
c0006a1d:	e8 04 18 00 00       	call   c0008226 <ff_memalloc>
c0006a22:	89 c3                	mov    ebx,eax
c0006a24:	83 c4 10             	add    esp,0x10
c0006a27:	b8 11 00 00 00       	mov    eax,0x11
c0006a2c:	85 db                	test   ebx,ebx
c0006a2e:	0f 84 8e 00 00 00    	je     c0006ac2 <f_utime+0xd8>
c0006a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a38:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a41:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a44:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a48:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a4c:	e8 dd e1 ff ff       	call   c0004c2e <follow_path>
c0006a51:	85 c0                	test   eax,eax
c0006a53:	75 59                	jne    c0006aae <f_utime+0xc4>
c0006a55:	b8 06 00 00 00       	mov    eax,0x6
c0006a5a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a5f:	75 4d                	jne    c0006aae <f_utime+0xc4>
c0006a61:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a69:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a6d:	c1 e2 10             	shl    edx,0x10
c0006a70:	09 ca                	or     edx,ecx
c0006a72:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a75:	75 1a                	jne    c0006a91 <f_utime+0xa7>
c0006a77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7a:	83 c0 0c             	add    eax,0xc
c0006a7d:	e8 34 b0 ff ff       	call   c0001ab6 <st_dword>
c0006a82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a86:	e8 08 cf ff ff       	call   c0003993 <store_xdir>
c0006a8b:	85 c0                	test   eax,eax
c0006a8d:	75 1f                	jne    c0006aae <f_utime+0xc4>
c0006a8f:	eb 14                	jmp    c0006aa5 <f_utime+0xbb>
c0006a91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a95:	83 c0 16             	add    eax,0x16
c0006a98:	e8 19 b0 ff ff       	call   c0001ab6 <st_dword>
c0006a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa9:	e8 77 d8 ff ff       	call   c0004325 <sync_fs>
c0006aae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	53                   	push   ebx
c0006ab6:	e8 81 17 00 00       	call   c000823c <ff_memfree>
c0006abb:	83 c4 10             	add    esp,0x10
c0006abe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac2:	83 c4 64             	add    esp,0x64
c0006ac5:	5b                   	pop    ebx
c0006ac6:	5e                   	pop    esi
c0006ac7:	c3                   	ret    

c0006ac8 <f_getlabel>:
c0006ac8:	55                   	push   ebp
c0006ac9:	31 c9                	xor    ecx,ecx
c0006acb:	57                   	push   edi
c0006acc:	56                   	push   esi
c0006acd:	53                   	push   ebx
c0006ace:	83 ec 6c             	sub    esp,0x6c
c0006ad1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ad5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006adc:	e8 e1 b9 ff ff       	call   c00024c2 <mount_volume>
c0006ae1:	89 c3                	mov    ebx,eax
c0006ae3:	85 c0                	test   eax,eax
c0006ae5:	0f 85 73 01 00 00    	jne    c0006c5e <f_getlabel+0x196>
c0006aeb:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af3:	0f 84 65 01 00 00    	je     c0006c5e <f_getlabel+0x196>
c0006af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afd:	31 d2                	xor    edx,edx
c0006aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b0f:	e8 7b c4 ff ff       	call   c0002f8f <dir_sdi>
c0006b14:	89 c3                	mov    ebx,eax
c0006b16:	85 c0                	test   eax,eax
c0006b18:	0f 85 2f 01 00 00    	jne    c0006c4d <f_getlabel+0x185>
c0006b1e:	ba 01 00 00 00       	mov    edx,0x1
c0006b23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b27:	e8 75 cc ff ff       	call   c00037a1 <dir_read>
c0006b2c:	89 c3                	mov    ebx,eax
c0006b2e:	85 c0                	test   eax,eax
c0006b30:	0f 85 17 01 00 00    	jne    c0006c4d <f_getlabel+0x185>
c0006b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b3d:	74 09                	je     c0006b48 <f_getlabel+0x80>
c0006b3f:	31 f6                	xor    esi,esi
c0006b41:	31 c9                	xor    ecx,ecx
c0006b43:	e9 c8 00 00 00       	jmp    c0006c10 <f_getlabel+0x148>
c0006b48:	31 ed                	xor    ebp,ebp
c0006b4a:	31 f6                	xor    esi,esi
c0006b4c:	31 ff                	xor    edi,edi
c0006b4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b56:	39 fa                	cmp    edx,edi
c0006b58:	76 4b                	jbe    c0006ba5 <f_getlabel+0xdd>
c0006b5a:	47                   	inc    edi
c0006b5b:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b5e:	01 d0                	add    eax,edx
c0006b60:	e8 db ae ff ff       	call   c0001a40 <ld_word>
c0006b65:	66 85 ed             	test   bp,bp
c0006b68:	75 0d                	jne    c0006b77 <f_getlabel+0xaf>
c0006b6a:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b70:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b75:	76 28                	jbe    c0006b9f <f_getlabel+0xd7>
c0006b77:	89 e9                	mov    ecx,ebp
c0006b79:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b80:	c1 e1 10             	shl    ecx,0x10
c0006b83:	01 f2                	add    edx,esi
c0006b85:	0f b7 c0             	movzx  eax,ax
c0006b88:	09 c8                	or     eax,ecx
c0006b8a:	b9 04 00 00 00       	mov    ecx,0x4
c0006b8f:	e8 4c b0 ff ff       	call   c0001be0 <put_utf>
c0006b94:	84 c0                	test   al,al
c0006b96:	74 0b                	je     c0006ba3 <f_getlabel+0xdb>
c0006b98:	0f b6 c0             	movzx  eax,al
c0006b9b:	01 c6                	add    esi,eax
c0006b9d:	31 c0                	xor    eax,eax
c0006b9f:	89 c5                	mov    ebp,eax
c0006ba1:	eb ab                	jmp    c0006b4e <f_getlabel+0x86>
c0006ba3:	31 f6                	xor    esi,esi
c0006ba5:	66 85 ed             	test   bp,bp
c0006ba8:	74 02                	je     c0006bac <f_getlabel+0xe4>
c0006baa:	31 f6                	xor    esi,esi
c0006bac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb3:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bb7:	e9 a2 00 00 00       	jmp    c0006c5e <f_getlabel+0x196>
c0006bbc:	83 ff 0b             	cmp    edi,0xb
c0006bbf:	74 11                	je     c0006bd2 <f_getlabel+0x10a>
c0006bc1:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bca:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bcd:	c1 e0 08             	shl    eax,0x8
c0006bd0:	09 c2                	or     edx,eax
c0006bd2:	50                   	push   eax
c0006bd3:	50                   	push   eax
c0006bd4:	68 b5 01 00 00       	push   0x1b5
c0006bd9:	0f b7 d2             	movzx  edx,dx
c0006bdc:	52                   	push   edx
c0006bdd:	e8 07 17 00 00       	call   c00082e9 <ff_oem2uni>
c0006be2:	83 c4 10             	add    esp,0x10
c0006be5:	66 85 c0             	test   ax,ax
c0006be8:	74 46                	je     c0006c30 <f_getlabel+0x168>
c0006bea:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf1:	b9 04 00 00 00       	mov    ecx,0x4
c0006bf6:	01 f2                	add    edx,esi
c0006bf8:	0f b7 c0             	movzx  eax,ax
c0006bfb:	e8 e0 af ff ff       	call   c0001be0 <put_utf>
c0006c00:	84 c0                	test   al,al
c0006c02:	74 2c                	je     c0006c30 <f_getlabel+0x168>
c0006c04:	0f b6 c0             	movzx  eax,al
c0006c07:	01 c6                	add    esi,eax
c0006c09:	83 ff 0b             	cmp    edi,0xb
c0006c0c:	74 24                	je     c0006c32 <f_getlabel+0x16a>
c0006c0e:	89 f9                	mov    ecx,edi
c0006c10:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c14:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c17:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c1c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c25:	e8 ea ae ff ff       	call   c0001b14 <dbc_1st>
c0006c2a:	85 c0                	test   eax,eax
c0006c2c:	74 a4                	je     c0006bd2 <f_getlabel+0x10a>
c0006c2e:	eb 8c                	jmp    c0006bbc <f_getlabel+0xf4>
c0006c30:	31 f6                	xor    esi,esi
c0006c32:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c39:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c3c:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c43:	74 19                	je     c0006c5e <f_getlabel+0x196>
c0006c45:	4e                   	dec    esi
c0006c46:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c49:	74 ee                	je     c0006c39 <f_getlabel+0x171>
c0006c4b:	eb 11                	jmp    c0006c5e <f_getlabel+0x196>
c0006c4d:	83 fb 04             	cmp    ebx,0x4
c0006c50:	75 0c                	jne    c0006c5e <f_getlabel+0x196>
c0006c52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c59:	31 db                	xor    ebx,ebx
c0006c5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c5e:	85 db                	test   ebx,ebx
c0006c60:	75 50                	jne    c0006cb2 <f_getlabel+0x1ea>
c0006c62:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6a:	74 46                	je     c0006cb2 <f_getlabel+0x1ea>
c0006c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c70:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c73:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c76:	e8 9c b5 ff ff       	call   c0002217 <move_window>
c0006c7b:	89 c3                	mov    ebx,eax
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	75 31                	jne    c0006cb2 <f_getlabel+0x1ea>
c0006c81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c85:	b8 43 00 00 00       	mov    eax,0x43
c0006c8a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c8c:	80 f9 03             	cmp    cl,0x3
c0006c8f:	74 0f                	je     c0006ca0 <f_getlabel+0x1d8>
c0006c91:	31 c0                	xor    eax,eax
c0006c93:	80 f9 04             	cmp    cl,0x4
c0006c96:	0f 94 c0             	sete   al
c0006c99:	48                   	dec    eax
c0006c9a:	83 e0 c3             	and    eax,0xffffffc3
c0006c9d:	83 c0 64             	add    eax,0x64
c0006ca0:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca4:	e8 a4 ad ff ff       	call   c0001a4d <ld_dword>
c0006ca9:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb0:	89 07                	mov    DWORD PTR [edi],eax
c0006cb2:	83 c4 6c             	add    esp,0x6c
c0006cb5:	89 d8                	mov    eax,ebx
c0006cb7:	5b                   	pop    ebx
c0006cb8:	5e                   	pop    esi
c0006cb9:	5f                   	pop    edi
c0006cba:	5d                   	pop    ebp
c0006cbb:	c3                   	ret    

c0006cbc <f_setlabel>:
c0006cbc:	56                   	push   esi
c0006cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc2:	53                   	push   ebx
c0006cc3:	83 ec 74             	sub    esp,0x74
c0006cc6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cca:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd1:	e8 ec b7 ff ff       	call   c00024c2 <mount_volume>
c0006cd6:	89 c6                	mov    esi,eax
c0006cd8:	85 c0                	test   eax,eax
c0006cda:	0f 85 41 02 00 00    	jne    c0006f21 <f_setlabel+0x265>
c0006ce0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce7:	0f 85 8e 00 00 00    	jne    c0006d7b <f_setlabel+0xbf>
c0006ced:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf2:	31 d2                	xor    edx,edx
c0006cf4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cf8:	31 db                	xor    ebx,ebx
c0006cfa:	e8 d5 ad ff ff       	call   c0001ad4 <mem_set>
c0006cff:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d06:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d09:	0f 86 0a 01 00 00    	jbe    c0006e19 <f_setlabel+0x15d>
c0006d0f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d16:	e8 ff ad ff ff       	call   c0001b1a <tchar2uni>
c0006d1b:	89 c6                	mov    esi,eax
c0006d1d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d22:	76 2a                	jbe    c0006d4e <f_setlabel+0x92>
c0006d24:	83 f8 ff             	cmp    eax,0xffffffff
c0006d27:	74 05                	je     c0006d2e <f_setlabel+0x72>
c0006d29:	83 fb 09             	cmp    ebx,0x9
c0006d2c:	76 0a                	jbe    c0006d38 <f_setlabel+0x7c>
c0006d2e:	be 06 00 00 00       	mov    esi,0x6
c0006d33:	e9 e9 01 00 00       	jmp    c0006f21 <f_setlabel+0x265>
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d3e:	c1 ea 10             	shr    edx,0x10
c0006d41:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d44:	01 c8                	add    eax,ecx
c0006d46:	43                   	inc    ebx
c0006d47:	e8 66 ad ff ff       	call   c0001ab2 <st_word>
c0006d4c:	eb 04                	jmp    c0006d52 <f_setlabel+0x96>
c0006d4e:	85 c0                	test   eax,eax
c0006d50:	74 dc                	je     c0006d2e <f_setlabel+0x72>
c0006d52:	89 f2                	mov    edx,esi
c0006d54:	b8 77 04 02 c0       	mov    eax,0xc0020477
c0006d59:	e8 a4 ad ff ff       	call   c0001b02 <chk_chr>
c0006d5e:	85 c0                	test   eax,eax
c0006d60:	75 cc                	jne    c0006d2e <f_setlabel+0x72>
c0006d62:	83 fb 0a             	cmp    ebx,0xa
c0006d65:	77 c7                	ja     c0006d2e <f_setlabel+0x72>
c0006d67:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d6e:	0f b7 d6             	movzx  edx,si
c0006d71:	01 c8                	add    eax,ecx
c0006d73:	43                   	inc    ebx
c0006d74:	e8 39 ad ff ff       	call   c0001ab2 <st_word>
c0006d79:	eb 84                	jmp    c0006cff <f_setlabel+0x43>
c0006d7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d80:	ba 20 00 00 00       	mov    edx,0x20
c0006d85:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d89:	31 db                	xor    ebx,ebx
c0006d8b:	e8 44 ad ff ff       	call   c0001ad4 <mem_set>
c0006d90:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d97:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9a:	76 60                	jbe    c0006dfc <f_setlabel+0x140>
c0006d9c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da3:	e8 72 ad ff ff       	call   c0001b1a <tchar2uni>
c0006da8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dad:	0f 87 7b ff ff ff    	ja     c0006d2e <f_setlabel+0x72>
c0006db3:	83 ec 0c             	sub    esp,0xc
c0006db6:	50                   	push   eax
c0006db7:	e8 9c 15 00 00       	call   c0008358 <ff_wtoupper>
c0006dbc:	5a                   	pop    edx
c0006dbd:	59                   	pop    ecx
c0006dbe:	68 b5 01 00 00       	push   0x1b5
c0006dc3:	50                   	push   eax
c0006dc4:	e8 8a 14 00 00       	call   c0008253 <ff_uni2oem>
c0006dc9:	83 c4 10             	add    esp,0x10
c0006dcc:	89 c6                	mov    esi,eax
c0006dce:	66 85 c0             	test   ax,ax
c0006dd1:	0f 84 57 ff ff ff    	je     c0006d2e <f_setlabel+0x72>
c0006dd7:	0f b7 d0             	movzx  edx,ax
c0006dda:	b8 70 04 02 c0       	mov    eax,0xc0020470
c0006ddf:	e8 1e ad ff ff       	call   c0001b02 <chk_chr>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 42 ff ff ff    	jne    c0006d2e <f_setlabel+0x72>
c0006dec:	66 81 fe ff 00       	cmp    si,0xff
c0006df1:	0f 87 14 01 00 00    	ja     c0006f0b <f_setlabel+0x24f>
c0006df7:	e9 fa 00 00 00       	jmp    c0006ef6 <f_setlabel+0x23a>
c0006dfc:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e01:	0f 84 27 ff ff ff    	je     c0006d2e <f_setlabel+0x72>
c0006e07:	85 db                	test   ebx,ebx
c0006e09:	74 0e                	je     c0006e19 <f_setlabel+0x15d>
c0006e0b:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e0e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e13:	75 04                	jne    c0006e19 <f_setlabel+0x15d>
c0006e15:	89 c3                	mov    ebx,eax
c0006e17:	eb ee                	jmp    c0006e07 <f_setlabel+0x14b>
c0006e19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e1d:	31 d2                	xor    edx,edx
c0006e1f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e27:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e2f:	e8 5b c1 ff ff       	call   c0002f8f <dir_sdi>
c0006e34:	89 c6                	mov    esi,eax
c0006e36:	85 c0                	test   eax,eax
c0006e38:	0f 85 e3 00 00 00    	jne    c0006f21 <f_setlabel+0x265>
c0006e3e:	ba 01 00 00 00       	mov    edx,0x1
c0006e43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e47:	e8 55 c9 ff ff       	call   c00037a1 <dir_read>
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	75 21                	jne    c0006e71 <f_setlabel+0x1b5>
c0006e50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e54:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e58:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e5b:	74 5d                	je     c0006eba <f_setlabel+0x1fe>
c0006e5d:	85 db                	test   ebx,ebx
c0006e5f:	74 0b                	je     c0006e6c <f_setlabel+0x1b0>
c0006e61:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e66:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6a:	eb 70                	jmp    c0006edc <f_setlabel+0x220>
c0006e6c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x225>
c0006e71:	83 f8 04             	cmp    eax,0x4
c0006e74:	75 7c                	jne    c0006ef2 <f_setlabel+0x236>
c0006e76:	85 db                	test   ebx,ebx
c0006e78:	0f 84 a3 00 00 00    	je     c0006f21 <f_setlabel+0x265>
c0006e7e:	ba 01 00 00 00       	mov    edx,0x1
c0006e83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e87:	e8 8f ca ff ff       	call   c000391b <dir_alloc>
c0006e8c:	89 c6                	mov    esi,eax
c0006e8e:	85 c0                	test   eax,eax
c0006e90:	0f 85 8b 00 00 00    	jne    c0006f21 <f_setlabel+0x265>
c0006e96:	31 d2                	xor    edx,edx
c0006e98:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e9c:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea1:	e8 2e ac ff ff       	call   c0001ad4 <mem_set>
c0006ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ead:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb1:	75 18                	jne    c0006ecb <f_setlabel+0x20f>
c0006eb3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006eb6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eba:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ebd:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	83 c0 02             	add    eax,0x2
c0006ec9:	eb 9b                	jmp    c0006e66 <f_setlabel+0x1aa>
c0006ecb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ecf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed4:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ed8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006edc:	e8 de ab ff ff       	call   c0001abf <mem_cpy>
c0006ee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ee5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eed:	e8 33 d4 ff ff       	call   c0004325 <sync_fs>
c0006ef2:	89 c6                	mov    esi,eax
c0006ef4:	eb 2b                	jmp    c0006f21 <f_setlabel+0x265>
c0006ef6:	83 fb 0a             	cmp    ebx,0xa
c0006ef9:	0f 87 2f fe ff ff    	ja     c0006d2e <f_setlabel+0x72>
c0006eff:	89 f0                	mov    eax,esi
c0006f01:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f05:	43                   	inc    ebx
c0006f06:	e9 85 fe ff ff       	jmp    c0006d90 <f_setlabel+0xd4>
c0006f0b:	83 fb 09             	cmp    ebx,0x9
c0006f0e:	0f 87 1a fe ff ff    	ja     c0006d2e <f_setlabel+0x72>
c0006f14:	89 f0                	mov    eax,esi
c0006f16:	66 c1 e8 08          	shr    ax,0x8
c0006f1a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1e:	43                   	inc    ebx
c0006f1f:	eb de                	jmp    c0006eff <f_setlabel+0x243>
c0006f21:	83 c4 74             	add    esp,0x74
c0006f24:	89 f0                	mov    eax,esi
c0006f26:	5b                   	pop    ebx
c0006f27:	5e                   	pop    esi
c0006f28:	c3                   	ret    

c0006f29 <f_forward>:
c0006f29:	55                   	push   ebp
c0006f2a:	57                   	push   edi
c0006f2b:	56                   	push   esi
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 2c             	sub    esp,0x2c
c0006f30:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f34:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f38:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f42:	89 d8                	mov    eax,ebx
c0006f44:	e8 f3 b1 ff ff       	call   c000213c <validate>
c0006f49:	89 c5                	mov    ebp,eax
c0006f4b:	85 c0                	test   eax,eax
c0006f4d:	0f 85 aa 01 00 00    	jne    c00070fd <f_forward+0x1d4>
c0006f53:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f57:	85 ed                	test   ebp,ebp
c0006f59:	0f 85 9e 01 00 00    	jne    c00070fd <f_forward+0x1d4>
c0006f5f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f63:	0f 84 8f 01 00 00    	je     c00070f8 <f_forward+0x1cf>
c0006f69:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f6c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f6f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f72:	bf 00 00 00 00       	mov    edi,0x0
c0006f77:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7a:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f7e:	89 d1                	mov    ecx,edx
c0006f80:	19 f9                	sbb    ecx,edi
c0006f82:	0f 83 cf 00 00 00    	jae    c0007057 <f_forward+0x12e>
c0006f88:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f8c:	e9 c6 00 00 00       	jmp    c0007057 <f_forward+0x12e>
c0006f91:	50                   	push   eax
c0006f92:	50                   	push   eax
c0006f93:	6a 00                	push   0x0
c0006f95:	6a 00                	push   0x0
c0006f97:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f9b:	83 c4 10             	add    esp,0x10
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 84 57 01 00 00    	je     c00070fd <f_forward+0x1d4>
c0006fa6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fad:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb4:	89 d7                	mov    edi,edx
c0006fb6:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fb9:	89 c6                	mov    esi,eax
c0006fbb:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fbf:	21 ce                	and    esi,ecx
c0006fc1:	89 c1                	mov    ecx,eax
c0006fc3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fc9:	0f 84 98 00 00 00    	je     c0007067 <f_forward+0x13e>
c0006fcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fd6:	89 c8                	mov    eax,ecx
c0006fd8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fdc:	e8 f8 ac ff ff       	call   c0001cd9 <clst2sect>
c0006fe1:	89 d7                	mov    edi,edx
c0006fe3:	09 c7                	or     edi,eax
c0006fe5:	0f 84 9e 00 00 00    	je     c0007089 <f_forward+0x160>
c0006feb:	31 ff                	xor    edi,edi
c0006fed:	01 c6                	add    esi,eax
c0006fef:	11 d7                	adc    edi,edx
c0006ff1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ff7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006ffb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006ffe:	39 fa                	cmp    edx,edi
c0007000:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007004:	0f 85 a2 00 00 00    	jne    c00070ac <f_forward+0x183>
c000700a:	39 f0                	cmp    eax,esi
c000700c:	0f 85 9a 00 00 00    	jne    c00070ac <f_forward+0x183>
c0007012:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007015:	ba 00 02 00 00       	mov    edx,0x200
c000701a:	25 ff 01 00 00       	and    eax,0x1ff
c000701f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007023:	29 c2                	sub    edx,eax
c0007025:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007028:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000702b:	39 d1                	cmp    ecx,edx
c000702d:	76 02                	jbe    c0007031 <f_forward+0x108>
c000702f:	89 d1                	mov    ecx,edx
c0007031:	52                   	push   edx
c0007032:	8d 73 50             	lea    esi,[ebx+0x50]
c0007035:	52                   	push   edx
c0007036:	01 c6                	add    esi,eax
c0007038:	51                   	push   ecx
c0007039:	56                   	push   esi
c000703a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000703e:	83 c4 10             	add    esp,0x10
c0007041:	85 c0                	test   eax,eax
c0007043:	74 44                	je     c0007089 <f_forward+0x160>
c0007045:	31 ff                	xor    edi,edi
c0007047:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000704d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007051:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007055:	01 07                	add    DWORD PTR [edi],eax
c0007057:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000705c:	0f 85 2f ff ff ff    	jne    c0006f91 <f_forward+0x68>
c0007062:	e9 96 00 00 00       	jmp    c00070fd <f_forward+0x1d4>
c0007067:	85 f6                	test   esi,esi
c0007069:	0f 85 60 ff ff ff    	jne    c0006fcf <f_forward+0xa6>
c000706f:	89 d7                	mov    edi,edx
c0007071:	09 c7                	or     edi,eax
c0007073:	75 05                	jne    c000707a <f_forward+0x151>
c0007075:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007078:	eb 0a                	jmp    c0007084 <f_forward+0x15b>
c000707a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000707d:	89 d8                	mov    eax,ebx
c000707f:	e8 15 bd ff ff       	call   c0002d99 <get_fat>
c0007084:	83 f8 01             	cmp    eax,0x1
c0007087:	77 0b                	ja     c0007094 <f_forward+0x16b>
c0007089:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000708d:	bd 02 00 00 00       	mov    ebp,0x2
c0007092:	eb 69                	jmp    c00070fd <f_forward+0x1d4>
c0007094:	83 f8 ff             	cmp    eax,0xffffffff
c0007097:	75 0b                	jne    c00070a4 <f_forward+0x17b>
c0007099:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000709d:	bd 01 00 00 00       	mov    ebp,0x1
c00070a2:	eb 59                	jmp    c00070fd <f_forward+0x1d4>
c00070a4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070a7:	e9 23 ff ff ff       	jmp    c0006fcf <f_forward+0xa6>
c00070ac:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b0:	79 20                	jns    c00070d2 <f_forward+0x1a9>
c00070b2:	83 ec 0c             	sub    esp,0xc
c00070b5:	6a 01                	push   0x1
c00070b7:	52                   	push   edx
c00070b8:	50                   	push   eax
c00070b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c1:	50                   	push   eax
c00070c2:	e8 44 a9 ff ff       	call   c0001a0b <disk_write>
c00070c7:	83 c4 20             	add    esp,0x20
c00070ca:	85 c0                	test   eax,eax
c00070cc:	75 cb                	jne    c0007099 <f_forward+0x170>
c00070ce:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	6a 01                	push   0x1
c00070d7:	57                   	push   edi
c00070d8:	56                   	push   esi
c00070d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070e5:	50                   	push   eax
c00070e6:	e8 0a a9 ff ff       	call   c00019f5 <disk_read>
c00070eb:	83 c4 20             	add    esp,0x20
c00070ee:	85 c0                	test   eax,eax
c00070f0:	0f 84 1c ff ff ff    	je     c0007012 <f_forward+0xe9>
c00070f6:	eb a1                	jmp    c0007099 <f_forward+0x170>
c00070f8:	bd 07 00 00 00       	mov    ebp,0x7
c00070fd:	83 c4 2c             	add    esp,0x2c
c0007100:	89 e8                	mov    eax,ebp
c0007102:	5b                   	pop    ebx
c0007103:	5e                   	pop    esi
c0007104:	5f                   	pop    edi
c0007105:	5d                   	pop    ebp
c0007106:	c3                   	ret    

c0007107 <f_mkfs>:
c0007107:	55                   	push   ebp
c0007108:	57                   	push   edi
c0007109:	56                   	push   esi
c000710a:	53                   	push   ebx
c000710b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007110:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007116:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000711d:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007124:	e8 f9 ae ff ff       	call   c0002022 <get_ldnumber>
c0007129:	85 c0                	test   eax,eax
c000712b:	0f 88 e8 10 00 00    	js     c0008219 <f_mkfs+0x1112>
c0007131:	8b 14 85 20 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8e0]
c0007138:	85 d2                	test   edx,edx
c000713a:	74 03                	je     c000713f <f_mkfs+0x38>
c000713c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000713f:	85 f6                	test   esi,esi
c0007141:	75 05                	jne    c0007148 <f_mkfs+0x41>
c0007143:	be 60 04 02 c0       	mov    esi,0xc0020460
c0007148:	0f b6 c0             	movzx  eax,al
c000714b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000714f:	83 ec 0c             	sub    esp,0xc
c0007152:	bb 03 00 00 00       	mov    ebx,0x3
c0007157:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000715b:	e8 92 a8 ff ff       	call   c00019f2 <disk_initialize>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	a8 01                	test   al,0x1
c0007165:	0f 85 ae 10 00 00    	jne    c0008219 <f_mkfs+0x1112>
c000716b:	bb 0a 00 00 00       	mov    ebx,0xa
c0007170:	a8 04                	test   al,0x4
c0007172:	0f 85 a1 10 00 00    	jne    c0008219 <f_mkfs+0x1112>
c0007178:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000717b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000717f:	85 c0                	test   eax,eax
c0007181:	75 20                	jne    c00071a3 <f_mkfs+0x9c>
c0007183:	51                   	push   ecx
c0007184:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007188:	50                   	push   eax
c0007189:	6a 03                	push   0x3
c000718b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000718f:	e8 8d a8 ff ff       	call   c0001a21 <disk_ioctl>
c0007194:	83 c4 10             	add    esp,0x10
c0007197:	85 c0                	test   eax,eax
c0007199:	74 08                	je     c00071a3 <f_mkfs+0x9c>
c000719b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071a7:	8d 42 ff             	lea    eax,[edx-0x1]
c00071aa:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071af:	77 04                	ja     c00071b5 <f_mkfs+0xae>
c00071b1:	85 c2                	test   edx,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0xb6>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c0:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c4:	48                   	dec    eax
c00071c5:	3c 01                	cmp    al,0x1
c00071c7:	76 05                	jbe    c00071ce <f_mkfs+0xc7>
c00071c9:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071ce:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071d5:	48                   	dec    eax
c00071d6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071db:	77 07                	ja     c00071e4 <f_mkfs+0xdd>
c00071dd:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e2:	74 08                	je     c00071ec <f_mkfs+0xe5>
c00071e4:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071ec:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071ef:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xf7>
c00071f7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071fa:	85 d8                	test   eax,ebx
c00071fc:	74 02                	je     c0007200 <f_mkfs+0xf9>
c00071fe:	31 db                	xor    ebx,ebx
c0007200:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000720b:	77 0a                	ja     c0007217 <f_mkfs+0x110>
c000720d:	bb 11 00 00 00       	mov    ebx,0x11
c0007212:	e9 02 10 00 00       	jmp    c0008219 <f_mkfs+0x1112>
c0007217:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000721e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007220:	85 ed                	test   ebp,ebp
c0007222:	75 1e                	jne    c0007242 <f_mkfs+0x13b>
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000722e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007233:	50                   	push   eax
c0007234:	e8 ed 0f 00 00       	call   c0008226 <ff_memalloc>
c0007239:	83 c4 10             	add    esp,0x10
c000723c:	89 c5                	mov    ebp,eax
c000723e:	85 c0                	test   eax,eax
c0007240:	74 cb                	je     c000720d <f_mkfs+0x106>
c0007242:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007252:	52                   	push   edx
c0007253:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007257:	50                   	push   eax
c0007258:	6a 01                	push   0x1
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	e8 be a7 ff ff       	call   c0001a21 <disk_ioctl>
c0007263:	83 c4 10             	add    esp,0x10
c0007266:	85 c0                	test   eax,eax
c0007268:	0f 85 46 0f 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c000726e:	89 f1                	mov    ecx,esi
c0007270:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007278:	83 e1 0f             	and    ecx,0xf
c000727b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007283:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007287:	83 e6 08             	and    esi,0x8
c000728a:	75 56                	jne    c00072e2 <f_mkfs+0x1db>
c000728c:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007290:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007294:	83 ff 00             	cmp    edi,0x0
c0007297:	76 20                	jbe    c00072b9 <f_mkfs+0x1b2>
c0007299:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000729e:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a4:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072ac:	83 d7 ff             	adc    edi,0xffffffff
c00072af:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072b7:	eb 21                	jmp    c00072da <f_mkfs+0x1d3>
c00072b9:	ba 3f 00 00 00       	mov    edx,0x3f
c00072be:	39 f2                	cmp    edx,esi
c00072c0:	19 f8                	sbb    eax,edi
c00072c2:	73 1e                	jae    c00072e2 <f_mkfs+0x1db>
c00072c4:	83 c6 c1             	add    esi,0xffffffc1
c00072c7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072cf:	83 d7 ff             	adc    edi,0xffffffff
c00072d2:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072d6:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072da:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072e6:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00072ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f1:	ba 7f 00 00 00       	mov    edx,0x7f
c00072f6:	31 c0                	xor    eax,eax
c00072f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072fb:	89 c7                	mov    edi,eax
c00072fd:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007301:	0f 83 c1 0a 00 00    	jae    c0007dc8 <f_mkfs+0xcc1>
c0007307:	89 df                	mov    edi,ebx
c0007309:	c1 ef 09             	shr    edi,0x9
c000730c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007310:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007317:	c1 ef 09             	shr    edi,0x9
c000731a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000731f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007323:	74 29                	je     c000734e <f_mkfs+0x247>
c0007325:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007330:	0f 97 c2             	seta   dl
c0007333:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007336:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733a:	0f 92 c0             	setb   al
c000733d:	08 c2                	or     dl,al
c000733f:	75 5b                	jne    c000739c <f_mkfs+0x295>
c0007341:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007345:	83 e0 07             	and    eax,0x7
c0007348:	3c 04                	cmp    al,0x4
c000734a:	74 50                	je     c000739c <f_mkfs+0x295>
c000734c:	eb 1b                	jmp    c0007369 <f_mkfs+0x262>
c000734e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007353:	0f 87 6f 0a 00 00    	ja     c0007dc8 <f_mkfs+0xcc1>
c0007359:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000735f:	76 08                	jbe    c0007369 <f_mkfs+0x262>
c0007361:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007369:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000736d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007371:	83 e0 01             	and    eax,0x1
c0007374:	80 e1 02             	and    cl,0x2
c0007377:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000737b:	74 0d                	je     c000738a <f_mkfs+0x283>
c000737d:	84 c0                	test   al,al
c000737f:	0f 84 4f 09 00 00    	je     c0007cd4 <f_mkfs+0xbcd>
c0007385:	e9 0e 08 00 00       	jmp    c0007b98 <f_mkfs+0xa91>
c000738a:	bb 13 00 00 00       	mov    ebx,0x13
c000738f:	84 c0                	test   al,al
c0007391:	0f 85 01 08 00 00    	jne    c0007b98 <f_mkfs+0xa91>
c0007397:	e9 35 0e 00 00       	jmp    c00081d1 <f_mkfs+0x10ca>
c000739c:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a1:	31 c0                	xor    eax,eax
c00073a3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073a6:	89 c7                	mov    edi,eax
c00073a8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ac:	0f 83 16 0a 00 00    	jae    c0007dc8 <f_mkfs+0xcc1>
c00073b2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073b8:	77 39                	ja     c00073f3 <f_mkfs+0x2ec>
c00073ba:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073bf:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073c7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ca:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ce:	73 08                	jae    c00073d8 <f_mkfs+0x2d1>
c00073d0:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073d8:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073dd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e0:	b8 00 00 00 00       	mov    eax,0x0
c00073e5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e9:	73 08                	jae    c00073f3 <f_mkfs+0x2ec>
c00073eb:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00073fb:	83 c0 20             	add    eax,0x20
c00073fe:	83 d2 00             	adc    edx,0x0
c0007401:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007405:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007409:	31 d2                	xor    edx,edx
c000740b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000740f:	52                   	push   edx
c0007410:	50                   	push   eax
c0007411:	31 ff                	xor    edi,edi
c0007413:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741b:	e8 dc 80 01 00       	call   c001f4fc <__udivdi3>
c0007420:	83 c4 10             	add    esp,0x10
c0007423:	c1 e0 02             	shl    eax,0x2
c0007426:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742a:	05 07 02 00 00       	add    eax,0x207
c000742f:	89 f1                	mov    ecx,esi
c0007431:	c1 e8 09             	shr    eax,0x9
c0007434:	89 fb                	mov    ebx,edi
c0007436:	83 c1 ff             	add    ecx,0xffffffff
c0007439:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000743d:	83 d3 ff             	adc    ebx,0xffffffff
c0007440:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007444:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007448:	31 d2                	xor    edx,edx
c000744a:	01 c8                	add    eax,ecx
c000744c:	11 da                	adc    edx,ebx
c000744e:	89 c1                	mov    ecx,eax
c0007450:	f7 de                	neg    esi
c0007452:	83 d7 00             	adc    edi,0x0
c0007455:	21 f1                	and    ecx,esi
c0007457:	f7 df                	neg    edi
c0007459:	89 d0                	mov    eax,edx
c000745b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000745f:	21 f8                	and    eax,edi
c0007461:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007465:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007469:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000746d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007479:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000747c:	0f ac d0 01          	shrd   eax,edx,0x1
c0007480:	d1 ea                	shr    edx,1
c0007482:	89 df                	mov    edi,ebx
c0007484:	39 c1                	cmp    ecx,eax
c0007486:	19 d7                	sbb    edi,edx
c0007488:	0f 83 3a 09 00 00    	jae    c0007dc8 <f_mkfs+0xcc1>
c000748e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007492:	31 d2                	xor    edx,edx
c0007494:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000749c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074a7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b3:	83 f8 0f             	cmp    eax,0xf
c00074b6:	0f 86 0c 09 00 00    	jbe    c0007dc8 <f_mkfs+0xcc1>
c00074bc:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c4:	0f 87 fe 08 00 00    	ja     c0007dc8 <f_mkfs+0xcc1>
c00074ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ce:	31 d2                	xor    edx,edx
c00074d0:	83 c0 07             	add    eax,0x7
c00074d3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074db:	c1 e8 03             	shr    eax,0x3
c00074de:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074e6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074ee:	c1 e0 09             	shl    eax,0x9
c00074f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00074fc:	48                   	dec    eax
c00074fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007501:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007505:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007509:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000750d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007518:	31 d2                	xor    edx,edx
c000751a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000751f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007523:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007527:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000752b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000752f:	31 ff                	xor    edi,edi
c0007531:	31 f6                	xor    esi,esi
c0007533:	31 db                	xor    ebx,ebx
c0007535:	85 ff                	test   edi,edi
c0007537:	74 05                	je     c000753e <f_mkfs+0x437>
c0007539:	4f                   	dec    edi
c000753a:	74 44                	je     c0007580 <f_mkfs+0x479>
c000753c:	eb 4f                	jmp    c000758d <f_mkfs+0x486>
c000753e:	83 ec 0c             	sub    esp,0xc
c0007541:	0f b7 c3             	movzx  eax,bx
c0007544:	50                   	push   eax
c0007545:	e8 0e 0e 00 00       	call   c0008358 <ff_wtoupper>
c000754a:	83 c4 10             	add    esp,0x10
c000754d:	89 c1                	mov    ecx,eax
c000754f:	66 39 c3             	cmp    bx,ax
c0007552:	8d 53 01             	lea    edx,[ebx+0x1]
c0007555:	75 3e                	jne    c0007595 <f_mkfs+0x48e>
c0007557:	be 01 00 00 00       	mov    esi,0x1
c000755c:	89 df                	mov    edi,ebx
c000755e:	66 01 f7             	add    di,si
c0007561:	75 07                	jne    c000756a <f_mkfs+0x463>
c0007563:	83 fe 7f             	cmp    esi,0x7f
c0007566:	77 31                	ja     c0007599 <f_mkfs+0x492>
c0007568:	eb 16                	jmp    c0007580 <f_mkfs+0x479>
c000756a:	83 ec 0c             	sub    esp,0xc
c000756d:	0f b7 ff             	movzx  edi,di
c0007570:	57                   	push   edi
c0007571:	e8 e2 0d 00 00       	call   c0008358 <ff_wtoupper>
c0007576:	83 c4 10             	add    esp,0x10
c0007579:	39 c7                	cmp    edi,eax
c000757b:	75 e6                	jne    c0007563 <f_mkfs+0x45c>
c000757d:	46                   	inc    esi
c000757e:	eb dc                	jmp    c000755c <f_mkfs+0x455>
c0007580:	31 c0                	xor    eax,eax
c0007582:	4e                   	dec    esi
c0007583:	0f 95 c0             	setne  al
c0007586:	89 d9                	mov    ecx,ebx
c0007588:	89 c7                	mov    edi,eax
c000758a:	43                   	inc    ebx
c000758b:	eb 14                	jmp    c00075a1 <f_mkfs+0x49a>
c000758d:	89 f1                	mov    ecx,esi
c000758f:	01 f3                	add    ebx,esi
c0007591:	31 ff                	xor    edi,edi
c0007593:	eb 0c                	jmp    c00075a1 <f_mkfs+0x49a>
c0007595:	89 d3                	mov    ebx,edx
c0007597:	eb 08                	jmp    c00075a1 <f_mkfs+0x49a>
c0007599:	bf 02 00 00 00       	mov    edi,0x2
c000759e:	83 c9 ff             	or     ecx,0xffffffff
c00075a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a4:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075a8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ac:	0f b6 c1             	movzx  eax,cl
c00075af:	e8 87 a9 ff ff       	call   c0001f3b <xsum32>
c00075b4:	66 c1 e9 08          	shr    cx,0x8
c00075b8:	89 c2                	mov    edx,eax
c00075ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075bd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c1:	0f b7 c1             	movzx  eax,cx
c00075c4:	e8 72 a9 ff ff       	call   c0001f3b <xsum32>
c00075c9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ce:	66 85 db             	test   bx,bx
c00075d1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075d5:	74 1f                	je     c00075f6 <f_mkfs+0x4ef>
c00075d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075da:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e1:	83 c0 02             	add    eax,0x2
c00075e4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ea:	39 c2                	cmp    edx,eax
c00075ec:	74 08                	je     c00075f6 <f_mkfs+0x4ef>
c00075ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f1:	e9 3f ff ff ff       	jmp    c0007535 <f_mkfs+0x42e>
c00075f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f9:	83 ec 0c             	sub    esp,0xc
c00075fc:	05 01 02 00 00       	add    eax,0x201
c0007601:	c1 e8 09             	shr    eax,0x9
c0007604:	50                   	push   eax
c0007605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007609:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000760d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007611:	55                   	push   ebp
c0007612:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007616:	e8 f0 a3 ff ff       	call   c0001a0b <disk_write>
c000761b:	83 c4 20             	add    esp,0x20
c000761e:	85 c0                	test   eax,eax
c0007620:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007623:	0f 85 8b 0b 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0007629:	89 d0                	mov    eax,edx
c000762b:	31 d2                	xor    edx,edx
c000762d:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007631:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007635:	66 85 db             	test   bx,bx
c0007638:	74 04                	je     c000763e <f_mkfs+0x537>
c000763a:	31 c0                	xor    eax,eax
c000763c:	eb b0                	jmp    c00075ee <f_mkfs+0x4e7>
c000763e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007642:	31 d2                	xor    edx,edx
c0007644:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007648:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000764c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007650:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007657:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000765b:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007661:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007665:	8d 70 01             	lea    esi,[eax+0x1]
c0007668:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	c1 eb 09             	shr    ebx,0x9
c000767e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007682:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007686:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000768d:	31 d2                	xor    edx,edx
c000768f:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 c1                	mov    ecx,eax
c0007699:	89 e8                	mov    eax,ebp
c000769b:	e8 34 a4 ff ff       	call   c0001ad4 <mem_set>
c00076a0:	31 c0                	xor    eax,eax
c00076a2:	83 fe 07             	cmp    esi,0x7
c00076a5:	76 10                	jbe    c00076b7 <f_mkfs+0x5b0>
c00076a7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076aa:	76 0b                	jbe    c00076b7 <f_mkfs+0x5b0>
c00076ac:	40                   	inc    eax
c00076ad:	83 ee 08             	sub    esi,0x8
c00076b0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076b5:	eb eb                	jmp    c00076a2 <f_mkfs+0x59b>
c00076b7:	b2 01                	mov    dl,0x1
c00076b9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076bd:	85 f6                	test   esi,esi
c00076bf:	74 0c                	je     c00076cd <f_mkfs+0x5c6>
c00076c1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c4:	76 07                	jbe    c00076cd <f_mkfs+0x5c6>
c00076c6:	08 11                	or     BYTE PTR [ecx],dl
c00076c8:	4e                   	dec    esi
c00076c9:	01 d2                	add    edx,edx
c00076cb:	eb f0                	jmp    c00076bd <f_mkfs+0x5b6>
c00076cd:	89 df                	mov    edi,ebx
c00076cf:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d3:	76 04                	jbe    c00076d9 <f_mkfs+0x5d2>
c00076d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076d9:	83 ec 0c             	sub    esp,0xc
c00076dc:	57                   	push   edi
c00076dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e5:	55                   	push   ebp
c00076e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ea:	e8 1c a3 ff ff       	call   c0001a0b <disk_write>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	85 c0                	test   eax,eax
c00076f4:	0f 85 ba 0a 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007700:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007704:	29 fb                	sub    ebx,edi
c0007706:	0f 85 7a ff ff ff    	jne    c0007686 <f_mkfs+0x57f>
c000770c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007710:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007718:	31 f6                	xor    esi,esi
c000771a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000771e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007721:	31 d2                	xor    edx,edx
c0007723:	89 e8                	mov    eax,ebp
c0007725:	e8 aa a3 ff ff       	call   c0001ad4 <mem_set>
c000772a:	31 c9                	xor    ecx,ecx
c000772c:	85 db                	test   ebx,ebx
c000772e:	75 40                	jne    c0007770 <f_mkfs+0x669>
c0007730:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007735:	89 e8                	mov    eax,ebp
c0007737:	e8 7a a3 ff ff       	call   c0001ab6 <st_dword>
c000773c:	8d 45 04             	lea    eax,[ebp+0x4]
c000773f:	83 ca ff             	or     edx,0xffffffff
c0007742:	bb 02 00 00 00       	mov    ebx,0x2
c0007747:	e8 6a a3 ff ff       	call   c0001ab6 <st_dword>
c000774c:	b9 08 00 00 00       	mov    ecx,0x8
c0007751:	eb 1d                	jmp    c0007770 <f_mkfs+0x669>
c0007753:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007756:	76 3b                	jbe    c0007793 <f_mkfs+0x68c>
c0007758:	43                   	inc    ebx
c0007759:	83 fe 01             	cmp    esi,0x1
c000775c:	89 da                	mov    edx,ebx
c000775e:	77 03                	ja     c0007763 <f_mkfs+0x65c>
c0007760:	83 ca ff             	or     edx,0xffffffff
c0007763:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007767:	4e                   	dec    esi
c0007768:	e8 49 a3 ff ff       	call   c0001ab6 <st_dword>
c000776d:	83 c1 04             	add    ecx,0x4
c0007770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007774:	85 f6                	test   esi,esi
c0007776:	75 db                	jne    c0007753 <f_mkfs+0x64c>
c0007778:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000777d:	77 14                	ja     c0007793 <f_mkfs+0x68c>
c000777f:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007786:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778a:	85 f6                	test   esi,esi
c000778c:	74 05                	je     c0007793 <f_mkfs+0x68c>
c000778e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007791:	77 dd                	ja     c0007770 <f_mkfs+0x669>
c0007793:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0007797:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000779b:	39 cf                	cmp    edi,ecx
c000779d:	76 02                	jbe    c00077a1 <f_mkfs+0x69a>
c000779f:	89 cf                	mov    edi,ecx
c00077a1:	83 ec 0c             	sub    esp,0xc
c00077a4:	57                   	push   edi
c00077a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ad:	55                   	push   ebp
c00077ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b2:	e8 54 a2 ff ff       	call   c0001a0b <disk_write>
c00077b7:	83 c4 20             	add    esp,0x20
c00077ba:	85 c0                	test   eax,eax
c00077bc:	0f 85 f2 09 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c00077c2:	31 d2                	xor    edx,edx
c00077c4:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077c8:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077cc:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d0:	0f 85 48 ff ff ff    	jne    c000771e <f_mkfs+0x617>
c00077d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077d9:	31 d2                	xor    edx,edx
c00077db:	89 e8                	mov    eax,ebp
c00077dd:	31 ff                	xor    edi,edi
c00077df:	e8 f0 a2 ff ff       	call   c0001ad4 <mem_set>
c00077e4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077e7:	ba 02 00 00 00       	mov    edx,0x2
c00077ec:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f0:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f4:	e8 bd a2 ff ff       	call   c0001ab6 <st_dword>
c00077f9:	8d 45 38             	lea    eax,[ebp+0x38]
c00077fc:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007800:	e8 b1 a2 ff ff       	call   c0001ab6 <st_dword>
c0007805:	8d 45 44             	lea    eax,[ebp+0x44]
c0007808:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000780c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007810:	e8 a1 a2 ff ff       	call   c0001ab6 <st_dword>
c0007815:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007819:	8d 45 54             	lea    eax,[ebp+0x54]
c000781c:	83 c2 02             	add    edx,0x2
c000781f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007823:	e8 8e a2 ff ff       	call   c0001ab6 <st_dword>
c0007828:	8d 45 58             	lea    eax,[ebp+0x58]
c000782b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000782f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007833:	e8 7e a2 ff ff       	call   c0001ab6 <st_dword>
c0007838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000783c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007841:	89 c6                	mov    esi,eax
c0007843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007847:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000784b:	89 04 24             	mov    DWORD PTR [esp],eax
c000784e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007852:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007855:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007859:	39 cb                	cmp    ebx,ecx
c000785b:	76 02                	jbe    c000785f <f_mkfs+0x758>
c000785d:	89 cb                	mov    ebx,ecx
c000785f:	83 ec 0c             	sub    esp,0xc
c0007862:	53                   	push   ebx
c0007863:	57                   	push   edi
c0007864:	56                   	push   esi
c0007865:	55                   	push   ebp
c0007866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786a:	e8 9c a1 ff ff       	call   c0001a0b <disk_write>
c000786f:	83 c4 20             	add    esp,0x20
c0007872:	85 c0                	test   eax,eax
c0007874:	0f 85 3a 09 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c000787a:	31 d2                	xor    edx,edx
c000787c:	b9 00 02 00 00       	mov    ecx,0x200
c0007881:	89 e8                	mov    eax,ebp
c0007883:	e8 4c a2 ff ff       	call   c0001ad4 <mem_set>
c0007888:	31 d2                	xor    edx,edx
c000788a:	01 de                	add    esi,ebx
c000788c:	11 d7                	adc    edi,edx
c000788e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007891:	75 bf                	jne    c0007852 <f_mkfs+0x74b>
c0007893:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007897:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000789b:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a3:	b9 00 02 00 00       	mov    ecx,0x200
c00078a8:	31 d2                	xor    edx,edx
c00078aa:	89 e8                	mov    eax,ebp
c00078ac:	e8 23 a2 ff ff       	call   c0001ad4 <mem_set>
c00078b1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078b6:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00078bb:	89 e8                	mov    eax,ebp
c00078bd:	e8 fd a1 ff ff       	call   c0001abf <mem_cpy>
c00078c2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078cd:	e8 e7 a1 ff ff       	call   c0001ab9 <st_qword>
c00078d2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078d6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078d9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078dd:	e8 d7 a1 ff ff       	call   c0001ab9 <st_qword>
c00078e2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078e5:	ba 20 00 00 00       	mov    edx,0x20
c00078ea:	e8 c7 a1 ff ff       	call   c0001ab6 <st_dword>
c00078ef:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078f7:	e8 ba a1 ff ff       	call   c0001ab6 <st_dword>
c00078fc:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007900:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007904:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007908:	e8 a9 a1 ff ff       	call   c0001ab6 <st_dword>
c000790d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007910:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007914:	e8 9d a1 ff ff       	call   c0001ab6 <st_dword>
c0007919:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000791d:	8d 50 02             	lea    edx,[eax+0x2]
c0007920:	8d 45 60             	lea    eax,[ebp+0x60]
c0007923:	e8 8e a1 ff ff       	call   c0001ab6 <st_dword>
c0007928:	8d 45 64             	lea    eax,[ebp+0x64]
c000792b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007930:	e8 81 a1 ff ff       	call   c0001ab6 <st_dword>
c0007935:	8d 45 68             	lea    eax,[ebp+0x68]
c0007938:	ba 00 01 00 00       	mov    edx,0x100
c000793d:	e8 70 a1 ff ff       	call   c0001ab2 <st_word>
c0007942:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007946:	b8 0a 00 00 00       	mov    eax,0xa
c000794b:	48                   	dec    eax
c000794c:	74 05                	je     c0007953 <f_mkfs+0x84c>
c000794e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007951:	eb f8                	jmp    c000794b <f_mkfs+0x844>
c0007953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007957:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000795b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000795f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007963:	74 05                	je     c000796a <f_mkfs+0x863>
c0007965:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007968:	eb f5                	jmp    c000795f <f_mkfs+0x858>
c000796a:	8d 45 78             	lea    eax,[ebp+0x78]
c000796d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007972:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007978:	31 db                	xor    ebx,ebx
c000797a:	e8 33 a1 ff ff       	call   c0001ab2 <st_word>
c000797f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007985:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798a:	89 04 24             	mov    DWORD PTR [esp],eax
c000798d:	e8 20 a1 ff ff       	call   c0001ab2 <st_word>
c0007992:	31 c9                	xor    ecx,ecx
c0007994:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007997:	83 f8 01             	cmp    eax,0x1
c000799a:	76 13                	jbe    c00079af <f_mkfs+0x8a8>
c000799c:	83 f9 70             	cmp    ecx,0x70
c000799f:	74 0e                	je     c00079af <f_mkfs+0x8a8>
c00079a1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079a6:	89 da                	mov    edx,ebx
c00079a8:	e8 8e a5 ff ff       	call   c0001f3b <xsum32>
c00079ad:	89 c3                	mov    ebx,eax
c00079af:	41                   	inc    ecx
c00079b0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079b6:	75 dc                	jne    c0007994 <f_mkfs+0x88d>
c00079b8:	89 f0                	mov    eax,esi
c00079ba:	89 fa                	mov    edx,edi
c00079bc:	83 c0 01             	add    eax,0x1
c00079bf:	83 d2 00             	adc    edx,0x0
c00079c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079ca:	83 ec 0c             	sub    esp,0xc
c00079cd:	6a 01                	push   0x1
c00079cf:	57                   	push   edi
c00079d0:	56                   	push   esi
c00079d1:	55                   	push   ebp
c00079d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079d6:	e8 30 a0 ff ff       	call   c0001a0b <disk_write>
c00079db:	83 c4 20             	add    esp,0x20
c00079de:	85 c0                	test   eax,eax
c00079e0:	0f 85 ce 07 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	b9 00 02 00 00       	mov    ecx,0x200
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	e8 e0 a0 ff ff       	call   c0001ad4 <mem_set>
c00079f4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079fc:	e8 b1 a0 ff ff       	call   c0001ab2 <st_word>
c0007a01:	89 f0                	mov    eax,esi
c0007a03:	83 c0 09             	add    eax,0x9
c0007a06:	89 fa                	mov    edx,edi
c0007a08:	83 d2 00             	adc    edx,0x0
c0007a0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a12:	31 c9                	xor    ecx,ecx
c0007a14:	41                   	inc    ecx
c0007a15:	89 da                	mov    edx,ebx
c0007a17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a1c:	e8 1a a5 ff ff       	call   c0001f3b <xsum32>
c0007a21:	89 c3                	mov    ebx,eax
c0007a23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a29:	75 e9                	jne    c0007a14 <f_mkfs+0x90d>
c0007a2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a33:	83 c0 01             	add    eax,0x1
c0007a36:	83 d2 00             	adc    edx,0x0
c0007a39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a41:	83 ec 0c             	sub    esp,0xc
c0007a44:	6a 01                	push   0x1
c0007a46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4e:	55                   	push   ebp
c0007a4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a53:	e8 b3 9f ff ff       	call   c0001a0b <disk_write>
c0007a58:	83 c4 20             	add    esp,0x20
c0007a5b:	85 c0                	test   eax,eax
c0007a5d:	0f 85 51 07 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0007a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a67:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a6b:	75 09                	jne    c0007a76 <f_mkfs+0x96f>
c0007a6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a70:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a74:	74 12                	je     c0007a88 <f_mkfs+0x981>
c0007a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a86:	eb 8a                	jmp    c0007a12 <f_mkfs+0x90b>
c0007a88:	31 d2                	xor    edx,edx
c0007a8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a8f:	89 e8                	mov    eax,ebp
c0007a91:	e8 3e a0 ff ff       	call   c0001ad4 <mem_set>
c0007a96:	83 c6 0b             	add    esi,0xb
c0007a99:	83 d7 00             	adc    edi,0x0
c0007a9c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa4:	31 c9                	xor    ecx,ecx
c0007aa6:	41                   	inc    ecx
c0007aa7:	89 da                	mov    edx,ebx
c0007aa9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007aae:	e8 88 a4 ff ff       	call   c0001f3b <xsum32>
c0007ab3:	89 c3                	mov    ebx,eax
c0007ab5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007abb:	75 e9                	jne    c0007aa6 <f_mkfs+0x99f>
c0007abd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac4:	83 c6 01             	add    esi,0x1
c0007ac7:	83 d7 00             	adc    edi,0x0
c0007aca:	83 ec 0c             	sub    esp,0xc
c0007acd:	6a 01                	push   0x1
c0007acf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad7:	55                   	push   ebp
c0007ad8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007adc:	e8 2a 9f ff ff       	call   c0001a0b <disk_write>
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	85 c0                	test   eax,eax
c0007ae6:	0f 85 c8 06 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0007aec:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af0:	75 06                	jne    c0007af8 <f_mkfs+0x9f1>
c0007af2:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007af6:	74 09                	je     c0007b01 <f_mkfs+0x9fa>
c0007af8:	89 34 24             	mov    DWORD PTR [esp],esi
c0007afb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007aff:	eb a3                	jmp    c0007aa4 <f_mkfs+0x99d>
c0007b01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b05:	89 da                	mov    edx,ebx
c0007b07:	01 e8                	add    eax,ebp
c0007b09:	e8 a8 9f ff ff       	call   c0001ab6 <st_dword>
c0007b0e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b13:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b1b:	75 e4                	jne    c0007b01 <f_mkfs+0x9fa>
c0007b1d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b20:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b24:	83 c6 02             	add    esi,0x2
c0007b27:	83 d7 00             	adc    edi,0x0
c0007b2a:	83 ec 0c             	sub    esp,0xc
c0007b2d:	6a 01                	push   0x1
c0007b2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b37:	55                   	push   ebp
c0007b38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b3c:	e8 ca 9e ff ff       	call   c0001a0b <disk_write>
c0007b41:	83 c4 20             	add    esp,0x20
c0007b44:	85 c0                	test   eax,eax
c0007b46:	0f 85 68 06 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0007b4c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b51:	74 0d                	je     c0007b60 <f_mkfs+0xa59>
c0007b53:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b5b:	e9 43 fd ff ff       	jmp    c00078a3 <f_mkfs+0x79c>
c0007b60:	b1 07                	mov    cl,0x7
c0007b62:	e9 e3 05 00 00       	jmp    c000814a <f_mkfs+0x1043>
c0007b67:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b6c:	0f 85 4f 02 00 00    	jne    c0007dc1 <f_mkfs+0xcba>
c0007b72:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b77:	0f 86 22 02 00 00    	jbe    c0007d9f <f_mkfs+0xc98>
c0007b7d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b82:	0f 85 81 06 00 00    	jne    c0008209 <f_mkfs+0x1102>
c0007b88:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b8f:	83 f8 40             	cmp    eax,0x40
c0007b92:	0f 87 51 06 00 00    	ja     c00081e9 <f_mkfs+0x10e2>
c0007b98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b9c:	85 ff                	test   edi,edi
c0007b9e:	75 1c                	jne    c0007bbc <f_mkfs+0xab5>
c0007ba0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba3:	ba 40 04 02 c0       	mov    edx,0xc0020440
c0007ba8:	c1 e9 0c             	shr    ecx,0xc
c0007bab:	bf 01 00 00 00       	mov    edi,0x1
c0007bb0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb3:	66 85 c0             	test   ax,ax
c0007bb6:	0f 85 95 01 00 00    	jne    c0007d51 <f_mkfs+0xc4a>
c0007bbc:	31 d2                	xor    edx,edx
c0007bbe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc1:	f7 f7                	div    edi
c0007bc3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bc8:	0f 86 95 01 00 00    	jbe    c0007d63 <f_mkfs+0xc5c>
c0007bce:	83 c0 02             	add    eax,0x2
c0007bd1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bdd:	be 01 00 00 00       	mov    esi,0x1
c0007be2:	c1 e8 09             	shr    eax,0x9
c0007be5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007be9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bed:	c1 e0 05             	shl    eax,0x5
c0007bf0:	c1 e8 09             	shr    eax,0x9
c0007bf3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bf7:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007bfc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	31 d2                	xor    edx,edx
c0007c04:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c10:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c14:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c18:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c21:	31 d2                	xor    edx,edx
c0007c23:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c27:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c2b:	31 db                	xor    ebx,ebx
c0007c2d:	01 c8                	add    eax,ecx
c0007c2f:	11 da                	adc    edx,ebx
c0007c31:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c35:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c39:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c3d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c41:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c45:	f7 da                	neg    edx
c0007c47:	21 d1                	and    ecx,edx
c0007c49:	29 d9                	sub    ecx,ebx
c0007c4b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c50:	0f 85 20 01 00 00    	jne    c0007d76 <f_mkfs+0xc6f>
c0007c56:	31 db                	xor    ebx,ebx
c0007c58:	01 ce                	add    esi,ecx
c0007c5a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c5e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c62:	89 f8                	mov    eax,edi
c0007c64:	31 d2                	xor    edx,edx
c0007c66:	c1 e0 04             	shl    eax,0x4
c0007c69:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c6d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c71:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c75:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c79:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c7d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c80:	19 d3                	sbb    ebx,edx
c0007c82:	0f 82 40 01 00 00    	jb     c0007dc8 <f_mkfs+0xcc1>
c0007c88:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c8c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c8f:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c94:	89 c8                	mov    eax,ecx
c0007c96:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9a:	29 f0                	sub    eax,esi
c0007c9c:	29 d0                	sub    eax,edx
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	f7 f7                	div    edi
c0007ca2:	89 c3                	mov    ebx,eax
c0007ca4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca9:	0f 85 b8 fe ff ff    	jne    c0007b67 <f_mkfs+0xa60>
c0007caf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb4:	0f 87 1d 01 00 00    	ja     c0007dd7 <f_mkfs+0xcd0>
c0007cba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cbf:	0f 85 03 01 00 00    	jne    c0007dc8 <f_mkfs+0xcc1>
c0007cc5:	83 ff 01             	cmp    edi,0x1
c0007cc8:	0f 86 fa 00 00 00    	jbe    c0007dc8 <f_mkfs+0xcc1>
c0007cce:	d1 ef                	shr    edi,1
c0007cd0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cd8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cdb:	85 db                	test   ebx,ebx
c0007cdd:	75 2d                	jne    c0007d0c <f_mkfs+0xc05>
c0007cdf:	89 cb                	mov    ebx,ecx
c0007ce1:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0007ce6:	c1 eb 11             	shr    ebx,0x11
c0007ce9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf1:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf4:	66 85 c0             	test   ax,ax
c0007cf7:	74 11                	je     c0007d0a <f_mkfs+0xc03>
c0007cf9:	83 c2 02             	add    edx,0x2
c0007cfc:	39 d8                	cmp    eax,ebx
c0007cfe:	77 0a                	ja     c0007d0a <f_mkfs+0xc03>
c0007d00:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d04:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d08:	eb e7                	jmp    c0007cf1 <f_mkfs+0xbea>
c0007d0a:	31 db                	xor    ebx,ebx
c0007d0c:	31 d2                	xor    edx,edx
c0007d0e:	89 c8                	mov    eax,ecx
c0007d10:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d14:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d1b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d20:	c1 ea 09             	shr    edx,0x9
c0007d23:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d28:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d2c:	0f 87 96 00 00 00    	ja     c0007dc8 <f_mkfs+0xcc1>
c0007d32:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d36:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d3e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d42:	be 20 00 00 00       	mov    esi,0x20
c0007d47:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d4c:	e9 a6 fe ff ff       	jmp    c0007bf7 <f_mkfs+0xaf0>
c0007d51:	83 c2 02             	add    edx,0x2
c0007d54:	39 c8                	cmp    eax,ecx
c0007d56:	0f 87 60 fe ff ff    	ja     c0007bbc <f_mkfs+0xab5>
c0007d5c:	01 ff                	add    edi,edi
c0007d5e:	e9 4d fe ff ff       	jmp    c0007bb0 <f_mkfs+0xaa9>
c0007d63:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d66:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d6b:	40                   	inc    eax
c0007d6c:	d1 e8                	shr    eax,1
c0007d6e:	83 c0 03             	add    eax,0x3
c0007d71:	e9 62 fe ff ff       	jmp    c0007bd8 <f_mkfs+0xad1>
c0007d76:	31 d2                	xor    edx,edx
c0007d78:	89 c8                	mov    eax,ecx
c0007d7a:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d7e:	85 d2                	test   edx,edx
c0007d80:	74 0c                	je     c0007d8e <f_mkfs+0xc87>
c0007d82:	49                   	dec    ecx
c0007d83:	46                   	inc    esi
c0007d84:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d89:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d8e:	89 c8                	mov    eax,ecx
c0007d90:	31 d2                	xor    edx,edx
c0007d92:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d96:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9a:	e9 c3 fe ff ff       	jmp    c0007c62 <f_mkfs+0xb5b>
c0007d9f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da4:	77 31                	ja     c0007dd7 <f_mkfs+0xcd0>
c0007da6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dab:	75 1b                	jne    c0007dc8 <f_mkfs+0xcc1>
c0007dad:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db4:	3d 80 00 00 00       	cmp    eax,0x80
c0007db9:	0f 86 d9 fd ff ff    	jbe    c0007b98 <f_mkfs+0xa91>
c0007dbf:	eb 07                	jmp    c0007dc8 <f_mkfs+0xcc1>
c0007dc1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc6:	76 0a                	jbe    c0007dd2 <f_mkfs+0xccb>
c0007dc8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dcd:	e9 ff 03 00 00       	jmp    c00081d1 <f_mkfs+0x10ca>
c0007dd2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dd7:	31 d2                	xor    edx,edx
c0007dd9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dde:	89 e8                	mov    eax,ebp
c0007de0:	e8 ef 9c ff ff       	call   c0001ad4 <mem_set>
c0007de5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dea:	ba 62 05 02 c0       	mov    edx,0xc0020562
c0007def:	89 e8                	mov    eax,ebp
c0007df1:	e8 c9 9c ff ff       	call   c0001abf <mem_cpy>
c0007df6:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007df9:	ba 00 02 00 00       	mov    edx,0x200
c0007dfe:	e8 af 9c ff ff       	call   c0001ab2 <st_word>
c0007e03:	89 f8                	mov    eax,edi
c0007e05:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e08:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e0b:	0f b7 d6             	movzx  edx,si
c0007e0e:	e8 9f 9c ff ff       	call   c0001ab2 <st_word>
c0007e13:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e17:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e1f:	75 08                	jne    c0007e29 <f_mkfs+0xd22>
c0007e21:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e29:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e30:	e8 7d 9c ff ff       	call   c0001ab2 <st_word>
c0007e35:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e3e:	39 d0                	cmp    eax,edx
c0007e40:	b8 00 00 00 00       	mov    eax,0x0
c0007e45:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e49:	72 0a                	jb     c0007e55 <f_mkfs+0xd4e>
c0007e4b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e4e:	e8 5f 9c ff ff       	call   c0001ab2 <st_word>
c0007e53:	eb 08                	jmp    c0007e5d <f_mkfs+0xd56>
c0007e55:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e58:	e8 59 9c ff ff       	call   c0001ab6 <st_dword>
c0007e5d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e60:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e65:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e69:	e8 44 9c ff ff       	call   c0001ab2 <st_word>
c0007e6e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e71:	ba ff 00 00 00       	mov    edx,0xff
c0007e76:	e8 37 9c ff ff       	call   c0001ab2 <st_word>
c0007e7b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e82:	e8 2f 9c ff ff       	call   c0001ab6 <st_dword>
c0007e87:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e8c:	75 57                	jne    c0007ee5 <f_mkfs+0xdde>
c0007e8e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e91:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e96:	e8 1b 9c ff ff       	call   c0001ab6 <st_dword>
c0007e9b:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea2:	e8 0f 9c ff ff       	call   c0001ab6 <st_dword>
c0007ea7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaa:	ba 02 00 00 00       	mov    edx,0x2
c0007eaf:	e8 02 9c ff ff       	call   c0001ab6 <st_dword>
c0007eb4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007eb7:	ba 01 00 00 00       	mov    edx,0x1
c0007ebc:	e8 f1 9b ff ff       	call   c0001ab2 <st_word>
c0007ec1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec4:	ba 06 00 00 00       	mov    edx,0x6
c0007ec9:	e8 e4 9b ff ff       	call   c0001ab2 <st_word>
c0007ece:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ed6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ed9:	b9 13 00 00 00       	mov    ecx,0x13
c0007ede:	ba 6e 05 02 c0       	mov    edx,0xc002056e
c0007ee3:	eb 2f                	jmp    c0007f14 <f_mkfs+0xe0d>
c0007ee5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 c4 9b ff ff       	call   c0001ab6 <st_dword>
c0007ef2:	8d 45 16             	lea    eax,[ebp+0x16]
c0007ef5:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007efa:	e8 b3 9b ff ff       	call   c0001ab2 <st_word>
c0007eff:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f03:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f07:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f0f:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007f14:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1a:	e8 a0 9b ff ff       	call   c0001abf <mem_cpy>
c0007f1f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f24:	89 f0                	mov    eax,esi
c0007f26:	e8 87 9b ff ff       	call   c0001ab2 <st_word>
c0007f2b:	83 ec 0c             	sub    esp,0xc
c0007f2e:	6a 01                	push   0x1
c0007f30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f38:	55                   	push   ebp
c0007f39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f3d:	e8 c9 9a ff ff       	call   c0001a0b <disk_write>
c0007f42:	83 c4 20             	add    esp,0x20
c0007f45:	85 c0                	test   eax,eax
c0007f47:	0f 85 67 02 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0007f4d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f52:	0f 85 b7 00 00 00    	jne    c000800f <f_mkfs+0xf08>
c0007f58:	83 ec 0c             	sub    esp,0xc
c0007f5b:	6a 01                	push   0x1
c0007f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f65:	83 c0 06             	add    eax,0x6
c0007f68:	83 d2 00             	adc    edx,0x0
c0007f6b:	52                   	push   edx
c0007f6c:	50                   	push   eax
c0007f6d:	55                   	push   ebp
c0007f6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f72:	e8 94 9a ff ff       	call   c0001a0b <disk_write>
c0007f77:	83 c4 20             	add    esp,0x20
c0007f7a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f7f:	31 d2                	xor    edx,edx
c0007f81:	89 e8                	mov    eax,ebp
c0007f83:	e8 4c 9b ff ff       	call   c0001ad4 <mem_set>
c0007f88:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f8d:	89 e8                	mov    eax,ebp
c0007f8f:	e8 22 9b ff ff       	call   c0001ab6 <st_dword>
c0007f94:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9a:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f9f:	e8 12 9b ff ff       	call   c0001ab6 <st_dword>
c0007fa4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fa7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fad:	e8 04 9b ff ff       	call   c0001ab6 <st_dword>
c0007fb2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fb8:	ba 02 00 00 00       	mov    edx,0x2
c0007fbd:	e8 f4 9a ff ff       	call   c0001ab6 <st_dword>
c0007fc2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fc7:	89 f0                	mov    eax,esi
c0007fc9:	e8 e4 9a ff ff       	call   c0001ab2 <st_word>
c0007fce:	83 ec 0c             	sub    esp,0xc
c0007fd1:	6a 01                	push   0x1
c0007fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fd7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fdb:	83 c0 07             	add    eax,0x7
c0007fde:	83 d2 00             	adc    edx,0x0
c0007fe1:	52                   	push   edx
c0007fe2:	50                   	push   eax
c0007fe3:	55                   	push   ebp
c0007fe4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fe8:	e8 1e 9a ff ff       	call   c0001a0b <disk_write>
c0007fed:	83 c4 14             	add    esp,0x14
c0007ff0:	6a 01                	push   0x1
c0007ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ffa:	83 c0 01             	add    eax,0x1
c0007ffd:	83 d2 00             	adc    edx,0x0
c0008000:	52                   	push   edx
c0008001:	50                   	push   eax
c0008002:	55                   	push   ebp
c0008003:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008007:	e8 ff 99 ff ff       	call   c0001a0b <disk_write>
c000800c:	83 c4 20             	add    esp,0x20
c000800f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008016:	31 d2                	xor    edx,edx
c0008018:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000801e:	31 db                	xor    ebx,ebx
c0008020:	89 e8                	mov    eax,ebp
c0008022:	e8 ad 9a ff ff       	call   c0001ad4 <mem_set>
c0008027:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000802e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008033:	0f 94 c3             	sete   bl
c0008036:	4b                   	dec    ebx
c0008037:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000803d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008043:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008048:	75 21                	jne    c000806b <f_mkfs+0xf64>
c000804a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000804f:	89 e8                	mov    eax,ebp
c0008051:	e8 60 9a ff ff       	call   c0001ab6 <st_dword>
c0008056:	8d 45 04             	lea    eax,[ebp+0x4]
c0008059:	83 ca ff             	or     edx,0xffffffff
c000805c:	e8 55 9a ff ff       	call   c0001ab6 <st_dword>
c0008061:	8d 45 08             	lea    eax,[ebp+0x8]
c0008064:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008069:	eb 04                	jmp    c000806f <f_mkfs+0xf68>
c000806b:	89 da                	mov    edx,ebx
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 42 9a ff ff       	call   c0001ab6 <st_dword>
c0008074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000807c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008080:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008084:	39 ce                	cmp    esi,ecx
c0008086:	76 02                	jbe    c000808a <f_mkfs+0xf83>
c0008088:	89 ce                	mov    esi,ecx
c000808a:	83 ec 0c             	sub    esp,0xc
c000808d:	56                   	push   esi
c000808e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008092:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008096:	55                   	push   ebp
c0008097:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000809b:	e8 6b 99 ff ff       	call   c0001a0b <disk_write>
c00080a0:	83 c4 20             	add    esp,0x20
c00080a3:	85 c0                	test   eax,eax
c00080a5:	0f 85 09 01 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	b9 00 02 00 00       	mov    ecx,0x200
c00080b2:	89 e8                	mov    eax,ebp
c00080b4:	e8 1b 9a ff ff       	call   c0001ad4 <mem_set>
c00080b9:	31 d2                	xor    edx,edx
c00080bb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080bf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080c7:	75 b3                	jne    c000807c <f_mkfs+0xf75>
c00080c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d3:	40                   	inc    eax
c00080d4:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080d8:	0f 87 65 ff ff ff    	ja     c0008043 <f_mkfs+0xf3c>
c00080de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e3:	74 04                	je     c00080e9 <f_mkfs+0xfe2>
c00080e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080e9:	89 fb                	mov    ebx,edi
c00080eb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ef:	76 04                	jbe    c00080f5 <f_mkfs+0xfee>
c00080f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080f5:	83 ec 0c             	sub    esp,0xc
c00080f8:	53                   	push   ebx
c00080f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008101:	55                   	push   ebp
c0008102:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008106:	e8 00 99 ff ff       	call   c0001a0b <disk_write>
c000810b:	83 c4 20             	add    esp,0x20
c000810e:	85 c0                	test   eax,eax
c0008110:	0f 85 9e 00 00 00    	jne    c00081b4 <f_mkfs+0x10ad>
c0008116:	31 d2                	xor    edx,edx
c0008118:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000811c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008120:	29 df                	sub    edi,ebx
c0008122:	75 c5                	jne    c00080e9 <f_mkfs+0xfe2>
c0008124:	b1 0c                	mov    cl,0xc
c0008126:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000812b:	74 1d                	je     c000814a <f_mkfs+0x1043>
c000812d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008132:	b1 06                	mov    cl,0x6
c0008134:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008138:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000813c:	72 0c                	jb     c000814a <f_mkfs+0x1043>
c000813e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008143:	0f 94 c1             	sete   cl
c0008146:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000814f:	75 4c                	jne    c000819d <f_mkfs+0x1096>
c0008151:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008155:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008159:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008160:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008167:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008172:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000817d:	83 ec 0c             	sub    esp,0xc
c0008180:	0f b6 c9             	movzx  ecx,cl
c0008183:	55                   	push   ebp
c0008184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008188:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000818f:	e8 58 c2 ff ff       	call   c00043ec <create_partition>
c0008194:	83 c4 10             	add    esp,0x10
c0008197:	89 c3                	mov    ebx,eax
c0008199:	85 c0                	test   eax,eax
c000819b:	75 34                	jne    c00081d1 <f_mkfs+0x10ca>
c000819d:	50                   	push   eax
c000819e:	31 db                	xor    ebx,ebx
c00081a0:	6a 00                	push   0x0
c00081a2:	6a 00                	push   0x0
c00081a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081a8:	e8 74 98 ff ff       	call   c0001a21 <disk_ioctl>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	85 c0                	test   eax,eax
c00081b2:	74 1d                	je     c00081d1 <f_mkfs+0x10ca>
c00081b4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081bc:	75 0c                	jne    c00081ca <f_mkfs+0x10c3>
c00081be:	83 ec 0c             	sub    esp,0xc
c00081c1:	55                   	push   ebp
c00081c2:	e8 75 00 00 00       	call   c000823c <ff_memfree>
c00081c7:	83 c4 10             	add    esp,0x10
c00081ca:	bb 01 00 00 00       	mov    ebx,0x1
c00081cf:	eb 48                	jmp    c0008219 <f_mkfs+0x1112>
c00081d1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081d9:	75 3e                	jne    c0008219 <f_mkfs+0x1112>
c00081db:	83 ec 0c             	sub    esp,0xc
c00081de:	55                   	push   ebp
c00081df:	e8 58 00 00 00       	call   c000823c <ff_memfree>
c00081e4:	83 c4 10             	add    esp,0x10
c00081e7:	eb 30                	jmp    c0008219 <f_mkfs+0x1112>
c00081e9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081ee:	0f 85 eb fa ff ff    	jne    c0007cdf <f_mkfs+0xbd8>
c00081f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081f8:	81 ff 80 00 00 00    	cmp    edi,0x80
c00081fe:	0f 86 b8 f9 ff ff    	jbe    c0007bbc <f_mkfs+0xab5>
c0008204:	e9 bf fb ff ff       	jmp    c0007dc8 <f_mkfs+0xcc1>
c0008209:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820e:	0f 85 c0 fa ff ff    	jne    c0007cd4 <f_mkfs+0xbcd>
c0008214:	e9 af fb ff ff       	jmp    c0007dc8 <f_mkfs+0xcc1>
c0008219:	81 c4 9c 00 00 00    	add    esp,0x9c
c000821f:	89 d8                	mov    eax,ebx
c0008221:	5b                   	pop    ebx
c0008222:	5e                   	pop    esi
c0008223:	5f                   	pop    edi
c0008224:	5d                   	pop    ebp
c0008225:	c3                   	ret    

c0008226 <ff_memalloc>:
c0008226:	83 ec 0c             	sub    esp,0xc
c0008229:	83 ec 0c             	sub    esp,0xc
c000822c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008230:	e8 9e 3d 00 00       	call   c000bfd3 <malloc>
c0008235:	83 c4 10             	add    esp,0x10
c0008238:	83 c4 0c             	add    esp,0xc
c000823b:	c3                   	ret    

c000823c <ff_memfree>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	83 ec 0c             	sub    esp,0xc
c0008242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008246:	e8 98 3d 00 00       	call   c000bfe3 <free>
c000824b:	83 c4 10             	add    esp,0x10
c000824e:	90                   	nop
c000824f:	83 c4 0c             	add    esp,0xc
c0008252:	c3                   	ret    

c0008253 <ff_uni2oem>:
c0008253:	83 ec 14             	sub    esp,0x14
c0008256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000825e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008265:	c7 44 24 0c a0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208a0
c000826d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008272:	77 0b                	ja     c000827f <ff_uni2oem+0x2c>
c0008274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008278:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000827d:	eb 61                	jmp    c00082e0 <ff_uni2oem+0x8d>
c000827f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008287:	77 57                	ja     c00082e0 <ff_uni2oem+0x8d>
c0008289:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000828f:	75 4f                	jne    c00082e0 <ff_uni2oem+0x8d>
c0008291:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008298:	eb 0b                	jmp    c00082a5 <ff_uni2oem+0x52>
c000829a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000829f:	40                   	inc    eax
c00082a0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082a5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082ab:	77 21                	ja     c00082ce <ff_uni2oem+0x7b>
c00082ad:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b2:	25 ff ff 00 00       	and    eax,0xffff
c00082b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00082ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082be:	01 d0                	add    eax,edx
c00082c0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c3:	25 ff ff 00 00       	and    eax,0xffff
c00082c8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082cc:	75 cc                	jne    c000829a <ff_uni2oem+0x47>
c00082ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d3:	83 e8 80             	sub    eax,0xffffff80
c00082d6:	25 ff 00 00 00       	and    eax,0xff
c00082db:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082e5:	83 c4 14             	add    esp,0x14
c00082e8:	c3                   	ret    

c00082e9 <ff_oem2uni>:
c00082e9:	83 ec 18             	sub    esp,0x18
c00082ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f4:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082f9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082fd:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008304:	c7 44 24 10 a0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208a0
c000830c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008312:	77 0b                	ja     c000831f <ff_oem2uni+0x36>
c0008314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008318:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000831d:	eb 30                	jmp    c000834f <ff_oem2uni+0x66>
c000831f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008325:	75 28                	jne    c000834f <ff_oem2uni+0x66>
c0008327:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000832e:	77 1f                	ja     c000834f <ff_oem2uni+0x66>
c0008330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008334:	25 ff ff 00 00       	and    eax,0xffff
c0008339:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000833e:	8d 14 00             	lea    edx,[eax+eax*1]
c0008341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008345:	01 d0                	add    eax,edx
c0008347:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000834f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008354:	83 c4 18             	add    esp,0x18
c0008357:	c3                   	ret    

c0008358 <ff_wtoupper>:
c0008358:	83 ec 10             	sub    esp,0x10
c000835b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008363:	0f 87 62 01 00 00    	ja     c00084cb <ff_wtoupper+0x173>
c0008369:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000836d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008372:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008379:	77 07                	ja     c0008382 <ff_wtoupper+0x2a>
c000837b:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0008380:	eb 05                	jmp    c0008387 <ff_wtoupper+0x2f>
c0008382:	b8 e0 05 02 c0       	mov    eax,0xc00205e0
c0008387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000838b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000838f:	8d 50 02             	lea    edx,[eax+0x2]
c0008392:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008396:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008399:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000839e:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a4:	0f 84 13 01 00 00    	je     c00084bd <ff_wtoupper+0x165>
c00083aa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083af:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b4:	0f 82 03 01 00 00    	jb     c00084bd <ff_wtoupper+0x165>
c00083ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083be:	8d 50 02             	lea    edx,[eax+0x2]
c00083c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083c8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083cd:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d2:	66 c1 e8 08          	shr    ax,0x8
c00083d6:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083db:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083e7:	31 d2                	xor    edx,edx
c00083e9:	66 89 c2             	mov    dx,ax
c00083ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f0:	31 c9                	xor    ecx,ecx
c00083f2:	66 89 c1             	mov    cx,ax
c00083f5:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083fa:	25 ff ff 00 00       	and    eax,0xffff
c00083ff:	01 c8                	add    eax,ecx
c0008401:	39 c2                	cmp    edx,eax
c0008403:	0f 8d 92 00 00 00    	jge    c000849b <ff_wtoupper+0x143>
c0008409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000840d:	25 ff ff 00 00       	and    eax,0xffff
c0008412:	83 f8 08             	cmp    eax,0x8
c0008415:	0f 87 a1 00 00 00    	ja     c00084bc <ff_wtoupper+0x164>
c000841b:	8b 04 85 a0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa60]
c0008422:	ff e0                	jmp    eax
c0008424:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008429:	31 d2                	xor    edx,edx
c000842b:	66 89 c2             	mov    dx,ax
c000842e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008432:	25 ff ff 00 00       	and    eax,0xffff
c0008437:	29 c2                	sub    edx,eax
c0008439:	89 d0                	mov    eax,edx
c000843b:	8d 14 00             	lea    edx,[eax+eax*1]
c000843e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008442:	01 d0                	add    eax,edx
c0008444:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008447:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000844c:	eb 4b                	jmp    c0008499 <ff_wtoupper+0x141>
c000844e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008453:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008457:	83 e0 01             	and    eax,0x1
c000845a:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845f:	eb 38                	jmp    c0008499 <ff_wtoupper+0x141>
c0008461:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008467:	eb 30                	jmp    c0008499 <ff_wtoupper+0x141>
c0008469:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846f:	eb 28                	jmp    c0008499 <ff_wtoupper+0x141>
c0008471:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008477:	eb 20                	jmp    c0008499 <ff_wtoupper+0x141>
c0008479:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847f:	eb 18                	jmp    c0008499 <ff_wtoupper+0x141>
c0008481:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008487:	eb 10                	jmp    c0008499 <ff_wtoupper+0x141>
c0008489:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848f:	eb 08                	jmp    c0008499 <ff_wtoupper+0x141>
c0008491:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008498:	90                   	nop
c0008499:	eb 21                	jmp    c00084bc <ff_wtoupper+0x164>
c000849b:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a1:	0f 85 e4 fe ff ff    	jne    c000838b <ff_wtoupper+0x33>
c00084a7:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084ac:	25 ff ff 00 00       	and    eax,0xffff
c00084b1:	01 c0                	add    eax,eax
c00084b3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084b7:	e9 cf fe ff ff       	jmp    c000838b <ff_wtoupper+0x33>
c00084bc:	90                   	nop
c00084bd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c2:	25 ff ff 00 00       	and    eax,0xffff
c00084c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084cf:	83 c4 10             	add    esp,0x10
c00084d2:	c3                   	ret    

c00084d3 <is_bad_src_ratio>:
c00084d3:	83 ec 0c             	sub    esp,0xc
c00084d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084da:	89 04 24             	mov    DWORD PTR [esp],eax
c00084dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084e5:	dd 04 24             	fld    QWORD PTR [esp]
c00084e8:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c00084ee:	de d9                	fcompp 
c00084f0:	df e0                	fnstsw ax
c00084f2:	f6 c4 45             	test   ah,0x45
c00084f5:	74 10                	je     c0008507 <is_bad_src_ratio+0x34>
c00084f7:	dd 04 24             	fld    QWORD PTR [esp]
c00084fa:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0008500:	df e0                	fnstsw ax
c0008502:	f6 c4 45             	test   ah,0x45
c0008505:	75 07                	jne    c000850e <is_bad_src_ratio+0x3b>
c0008507:	b8 01 00 00 00       	mov    eax,0x1
c000850c:	eb 05                	jmp    c0008513 <is_bad_src_ratio+0x40>
c000850e:	b8 00 00 00 00       	mov    eax,0x0
c0008513:	83 c4 0c             	add    esp,0xc
c0008516:	c3                   	ret    

c0008517 <psrc_set_converter>:
c0008517:	56                   	push   esi
c0008518:	89 d6                	mov    esi,edx
c000851a:	53                   	push   ebx
c000851b:	89 c3                	mov    ebx,eax
c000851d:	83 ec 0c             	sub    esp,0xc
c0008520:	52                   	push   edx
c0008521:	50                   	push   eax
c0008522:	e8 21 24 00 00       	call   c000a948 <sinc_set_converter>
c0008527:	83 c4 10             	add    esp,0x10
c000852a:	85 c0                	test   eax,eax
c000852c:	74 25                	je     c0008553 <psrc_set_converter+0x3c>
c000852e:	50                   	push   eax
c000852f:	50                   	push   eax
c0008530:	56                   	push   esi
c0008531:	53                   	push   ebx
c0008532:	e8 1c 28 00 00       	call   c000ad53 <zoh_set_converter>
c0008537:	83 c4 10             	add    esp,0x10
c000853a:	85 c0                	test   eax,eax
c000853c:	74 15                	je     c0008553 <psrc_set_converter+0x3c>
c000853e:	51                   	push   ecx
c000853f:	51                   	push   ecx
c0008540:	56                   	push   esi
c0008541:	53                   	push   ebx
c0008542:	e8 0c 0a 00 00       	call   c0008f53 <linear_set_converter>
c0008547:	83 c4 10             	add    esp,0x10
c000854a:	ba 0a 00 00 00       	mov    edx,0xa
c000854f:	85 c0                	test   eax,eax
c0008551:	75 02                	jne    c0008555 <psrc_set_converter+0x3e>
c0008553:	31 d2                	xor    edx,edx
c0008555:	89 d0                	mov    eax,edx
c0008557:	5a                   	pop    edx
c0008558:	5b                   	pop    ebx
c0008559:	5e                   	pop    esi
c000855a:	c3                   	ret    

c000855b <src_delete>:
c000855b:	53                   	push   ebx
c000855c:	83 ec 08             	sub    esp,0x8
c000855f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008563:	85 db                	test   ebx,ebx
c0008565:	74 29                	je     c0008590 <src_delete+0x35>
c0008567:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856a:	85 c0                	test   eax,eax
c000856c:	74 0c                	je     c000857a <src_delete+0x1f>
c000856e:	83 ec 0c             	sub    esp,0xc
c0008571:	50                   	push   eax
c0008572:	e8 6c 3a 00 00       	call   c000bfe3 <free>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	50                   	push   eax
c000857b:	6a 3c                	push   0x3c
c000857d:	6a 00                	push   0x0
c000857f:	53                   	push   ebx
c0008580:	e8 30 81 ff ff       	call   c00006b5 <memset>
c0008585:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008588:	e8 56 3a 00 00       	call   c000bfe3 <free>
c000858d:	83 c4 10             	add    esp,0x10
c0008590:	83 c4 08             	add    esp,0x8
c0008593:	31 c0                	xor    eax,eax
c0008595:	5b                   	pop    ebx
c0008596:	c3                   	ret    

c0008597 <src_process>:
c0008597:	56                   	push   esi
c0008598:	53                   	push   ebx
c0008599:	53                   	push   ebx
c000859a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000859e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a2:	85 f6                	test   esi,esi
c00085a4:	0f 84 e2 00 00 00    	je     c000868c <src_process+0xf5>
c00085aa:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085ae:	0f 84 df 00 00 00    	je     c0008693 <src_process+0xfc>
c00085b4:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085b8:	0f 84 d5 00 00 00    	je     c0008693 <src_process+0xfc>
c00085be:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085c5:	0f 85 cf 00 00 00    	jne    c000869a <src_process+0x103>
c00085cb:	85 db                	test   ebx,ebx
c00085cd:	0f 84 ce 00 00 00    	je     c00086a1 <src_process+0x10a>
c00085d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085d6:	0f 84 cc 00 00 00    	je     c00086a8 <src_process+0x111>
c00085dc:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e0:	0f 84 c2 00 00 00    	je     c00086a8 <src_process+0x111>
c00085e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085e9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085ec:	e8 e2 fe ff ff       	call   c00084d3 <is_bad_src_ratio>
c00085f1:	5a                   	pop    edx
c00085f2:	85 c0                	test   eax,eax
c00085f4:	59                   	pop    ecx
c00085f5:	0f 85 b4 00 00 00    	jne    c00086af <src_process+0x118>
c00085fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085ff:	79 07                	jns    c0008608 <src_process+0x71>
c0008601:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008608:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000860c:	79 07                	jns    c0008615 <src_process+0x7e>
c000860e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008615:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008617:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000861d:	39 ca                	cmp    edx,ecx
c000861f:	73 0b                	jae    c000862c <src_process+0x95>
c0008621:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008625:	8d 04 82             	lea    eax,[edx+eax*4]
c0008628:	39 c1                	cmp    ecx,eax
c000862a:	eb 09                	jmp    c0008635 <src_process+0x9e>
c000862c:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008630:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008633:	39 c2                	cmp    edx,eax
c0008635:	72 7f                	jb     c00086b6 <src_process+0x11f>
c0008637:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000863e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008645:	d9 05 80 0e 02 c0    	fld    DWORD PTR ds:0xc0020e80
c000864b:	dc 1e                	fcomp  QWORD PTR [esi]
c000864d:	df e0                	fnstsw ax
c000864f:	9e                   	sahf   
c0008650:	76 05                	jbe    c0008657 <src_process+0xc0>
c0008652:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008655:	dd 1e                	fstp   QWORD PTR [esi]
c0008657:	dd 06                	fld    QWORD PTR [esi]
c0008659:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000865c:	83 ec 10             	sub    esp,0x10
c000865f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008662:	e8 b9 70 01 00       	call   c001f720 <fabs>
c0008667:	83 c4 10             	add    esp,0x10
c000866a:	dd 05 70 0e 02 c0    	fld    QWORD PTR ds:0xc0020e70
c0008670:	de d9                	fcompp 
c0008672:	df e0                	fnstsw ax
c0008674:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008678:	9e                   	sahf   
c0008679:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000867d:	76 05                	jbe    c0008684 <src_process+0xed>
c000867f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008682:	eb 03                	jmp    c0008687 <src_process+0xf0>
c0008684:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008687:	59                   	pop    ecx
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	ff e0                	jmp    eax
c000868c:	b8 02 00 00 00       	mov    eax,0x2
c0008691:	eb 28                	jmp    c00086bb <src_process+0x124>
c0008693:	b8 07 00 00 00       	mov    eax,0x7
c0008698:	eb 21                	jmp    c00086bb <src_process+0x124>
c000869a:	b8 12 00 00 00       	mov    eax,0x12
c000869f:	eb 1a                	jmp    c00086bb <src_process+0x124>
c00086a1:	b8 03 00 00 00       	mov    eax,0x3
c00086a6:	eb 13                	jmp    c00086bb <src_process+0x124>
c00086a8:	b8 04 00 00 00       	mov    eax,0x4
c00086ad:	eb 0c                	jmp    c00086bb <src_process+0x124>
c00086af:	b8 06 00 00 00       	mov    eax,0x6
c00086b4:	eb 05                	jmp    c00086bb <src_process+0x124>
c00086b6:	b8 10 00 00 00       	mov    eax,0x10
c00086bb:	5a                   	pop    edx
c00086bc:	5b                   	pop    ebx
c00086bd:	5e                   	pop    esi
c00086be:	c3                   	ret    

c00086bf <src_callback_read>:
c00086bf:	55                   	push   ebp
c00086c0:	57                   	push   edi
c00086c1:	56                   	push   esi
c00086c2:	53                   	push   ebx
c00086c3:	83 ec 4c             	sub    esp,0x4c
c00086c6:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086ca:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086ce:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d2:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086d6:	85 ff                	test   edi,edi
c00086d8:	0f 8e 36 01 00 00    	jle    c0008814 <src_callback_read+0x155>
c00086de:	85 db                	test   ebx,ebx
c00086e0:	0f 84 2e 01 00 00    	je     c0008814 <src_callback_read+0x155>
c00086e6:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086ed:	74 0c                	je     c00086fb <src_callback_read+0x3c>
c00086ef:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086f6:	e9 19 01 00 00       	jmp    c0008814 <src_callback_read+0x155>
c00086fb:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00086ff:	75 0c                	jne    c000870d <src_callback_read+0x4e>
c0008701:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008708:	e9 07 01 00 00       	jmp    c0008814 <src_callback_read+0x155>
c000870d:	51                   	push   ecx
c000870e:	6a 24                	push   0x24
c0008710:	6a 00                	push   0x0
c0008712:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008716:	50                   	push   eax
c0008717:	e8 99 7f ff ff       	call   c00006b5 <memset>
c000871c:	5e                   	pop    esi
c000871d:	5d                   	pop    ebp
c000871e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008726:	e8 a8 fd ff ff       	call   c00084d3 <is_bad_src_ratio>
c000872b:	83 c4 10             	add    esp,0x10
c000872e:	85 c0                	test   eax,eax
c0008730:	74 0c                	je     c000873e <src_callback_read+0x7f>
c0008732:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008739:	e9 d6 00 00 00       	jmp    c0008814 <src_callback_read+0x155>
c000873e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008742:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008746:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000874e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008751:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008755:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008758:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000875c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008760:	31 f6                	xor    esi,esi
c0008762:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008767:	75 30                	jne    c0008799 <src_callback_read+0xda>
c0008769:	8d 44 24 14          	lea    eax,[esp+0x14]
c000876d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008771:	52                   	push   edx
c0008772:	52                   	push   edx
c0008773:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008777:	50                   	push   eax
c0008778:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000877b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000877e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008782:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008786:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	85 c0                	test   eax,eax
c000878f:	75 08                	jne    c0008799 <src_callback_read+0xda>
c0008791:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008799:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a0:	50                   	push   eax
c00087a1:	50                   	push   eax
c00087a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087a6:	50                   	push   eax
c00087a7:	53                   	push   ebx
c00087a8:	e8 ea fd ff ff       	call   c0008597 <src_process>
c00087ad:	83 c4 10             	add    esp,0x10
c00087b0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087b7:	85 c0                	test   eax,eax
c00087b9:	75 42                	jne    c00087fd <src_callback_read+0x13e>
c00087bb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087bf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c2:	89 e9                	mov    ecx,ebp
c00087c4:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087c8:	0f af ca             	imul   ecx,edx
c00087cb:	c1 e1 02             	shl    ecx,0x2
c00087ce:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087d6:	0f af d1             	imul   edx,ecx
c00087d9:	c1 e2 02             	shl    edx,0x2
c00087dc:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e0:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e4:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087e7:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087ec:	75 04                	jne    c00087f2 <src_callback_read+0x133>
c00087ee:	85 c9                	test   ecx,ecx
c00087f0:	74 0b                	je     c00087fd <src_callback_read+0x13e>
c00087f2:	39 d7                	cmp    edi,edx
c00087f4:	7e 09                	jle    c00087ff <src_callback_read+0x140>
c00087f6:	89 d6                	mov    esi,edx
c00087f8:	e9 65 ff ff ff       	jmp    c0008762 <src_callback_read+0xa3>
c00087fd:	89 f2                	mov    edx,esi
c00087ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008803:	85 c0                	test   eax,eax
c0008805:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008808:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000880c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000880f:	74 05                	je     c0008816 <src_callback_read+0x157>
c0008811:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008814:	31 d2                	xor    edx,edx
c0008816:	83 c4 4c             	add    esp,0x4c
c0008819:	89 d0                	mov    eax,edx
c000881b:	5b                   	pop    ebx
c000881c:	5e                   	pop    esi
c000881d:	5f                   	pop    edi
c000881e:	5d                   	pop    ebp
c000881f:	c3                   	ret    

c0008820 <src_set_ratio>:
c0008820:	53                   	push   ebx
c0008821:	b8 02 00 00 00       	mov    eax,0x2
c0008826:	83 ec 08             	sub    esp,0x8
c0008829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000882d:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008831:	85 db                	test   ebx,ebx
c0008833:	74 33                	je     c0008868 <src_set_ratio+0x48>
c0008835:	b8 07 00 00 00       	mov    eax,0x7
c000883a:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000883e:	74 2c                	je     c000886c <src_set_ratio+0x4c>
c0008840:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008844:	74 2a                	je     c0008870 <src_set_ratio+0x50>
c0008846:	50                   	push   eax
c0008847:	50                   	push   eax
c0008848:	dd 14 24             	fst    QWORD PTR [esp]
c000884b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000884f:	e8 7f fc ff ff       	call   c00084d3 <is_bad_src_ratio>
c0008854:	5a                   	pop    edx
c0008855:	59                   	pop    ecx
c0008856:	85 c0                	test   eax,eax
c0008858:	75 07                	jne    c0008861 <src_set_ratio+0x41>
c000885a:	dd 04 24             	fld    QWORD PTR [esp]
c000885d:	dd 1b                	fstp   QWORD PTR [ebx]
c000885f:	eb 11                	jmp    c0008872 <src_set_ratio+0x52>
c0008861:	b8 06 00 00 00       	mov    eax,0x6
c0008866:	eb 0a                	jmp    c0008872 <src_set_ratio+0x52>
c0008868:	dd d8                	fstp   st(0)
c000886a:	eb 06                	jmp    c0008872 <src_set_ratio+0x52>
c000886c:	dd d8                	fstp   st(0)
c000886e:	eb 02                	jmp    c0008872 <src_set_ratio+0x52>
c0008870:	dd d8                	fstp   st(0)
c0008872:	83 c4 08             	add    esp,0x8
c0008875:	5b                   	pop    ebx
c0008876:	c3                   	ret    

c0008877 <src_get_channels>:
c0008877:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887b:	b8 02 00 00 00       	mov    eax,0x2
c0008880:	85 d2                	test   edx,edx
c0008882:	74 14                	je     c0008898 <src_get_channels+0x21>
c0008884:	b8 07 00 00 00       	mov    eax,0x7
c0008889:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000888d:	74 09                	je     c0008898 <src_get_channels+0x21>
c000888f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008893:	74 03                	je     c0008898 <src_get_channels+0x21>
c0008895:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008898:	c3                   	ret    

c0008899 <src_reset>:
c0008899:	53                   	push   ebx
c000889a:	b8 02 00 00 00       	mov    eax,0x2
c000889f:	83 ec 08             	sub    esp,0x8
c00088a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a6:	85 db                	test   ebx,ebx
c00088a8:	74 2e                	je     c00088d8 <src_reset+0x3f>
c00088aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088ad:	85 c0                	test   eax,eax
c00088af:	74 09                	je     c00088ba <src_reset+0x21>
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	ff d0                	call   eax
c00088b7:	83 c4 10             	add    esp,0x10
c00088ba:	d9 ee                	fldz   
c00088bc:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c3:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088ca:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088cd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d4:	31 c0                	xor    eax,eax
c00088d6:	dd 1b                	fstp   QWORD PTR [ebx]
c00088d8:	83 c4 08             	add    esp,0x8
c00088db:	5b                   	pop    ebx
c00088dc:	c3                   	ret    

c00088dd <src_new>:
c00088dd:	57                   	push   edi
c00088de:	56                   	push   esi
c00088df:	53                   	push   ebx
c00088e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088e8:	85 f6                	test   esi,esi
c00088ea:	74 73                	je     c000895f <src_new+0x82>
c00088ec:	85 ff                	test   edi,edi
c00088ee:	7f 08                	jg     c00088f8 <src_new+0x1b>
c00088f0:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088f6:	eb 1e                	jmp    c0008916 <src_new+0x39>
c00088f8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00088fe:	50                   	push   eax
c00088ff:	50                   	push   eax
c0008900:	6a 3c                	push   0x3c
c0008902:	6a 01                	push   0x1
c0008904:	e8 fa 36 00 00       	call   c000c003 <calloc>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	89 c3                	mov    ebx,eax
c000890e:	85 c0                	test   eax,eax
c0008910:	75 10                	jne    c0008922 <src_new+0x45>
c0008912:	85 f6                	test   esi,esi
c0008914:	75 04                	jne    c000891a <src_new+0x3d>
c0008916:	31 db                	xor    ebx,ebx
c0008918:	eb 4b                	jmp    c0008965 <src_new+0x88>
c000891a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008920:	eb 43                	jmp    c0008965 <src_new+0x88>
c0008922:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008925:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000892c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008930:	e8 e2 fb ff ff       	call   c0008517 <psrc_set_converter>
c0008935:	85 c0                	test   eax,eax
c0008937:	74 18                	je     c0008951 <src_new+0x74>
c0008939:	85 f6                	test   esi,esi
c000893b:	74 06                	je     c0008943 <src_new+0x66>
c000893d:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008943:	83 ec 0c             	sub    esp,0xc
c0008946:	53                   	push   ebx
c0008947:	31 db                	xor    ebx,ebx
c0008949:	e8 95 36 00 00       	call   c000bfe3 <free>
c000894e:	83 c4 10             	add    esp,0x10
c0008951:	83 ec 0c             	sub    esp,0xc
c0008954:	53                   	push   ebx
c0008955:	e8 3f ff ff ff       	call   c0008899 <src_reset>
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	eb 06                	jmp    c0008965 <src_new+0x88>
c000895f:	85 ff                	test   edi,edi
c0008961:	7f 9b                	jg     c00088fe <src_new+0x21>
c0008963:	eb b1                	jmp    c0008916 <src_new+0x39>
c0008965:	89 d8                	mov    eax,ebx
c0008967:	5b                   	pop    ebx
c0008968:	5e                   	pop    esi
c0008969:	5f                   	pop    edi
c000896a:	c3                   	ret    

c000896b <src_callback_new>:
c000896b:	56                   	push   esi
c000896c:	53                   	push   ebx
c000896d:	53                   	push   ebx
c000896e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008976:	85 f6                	test   esi,esi
c0008978:	75 0e                	jne    c0008988 <src_callback_new+0x1d>
c000897a:	31 db                	xor    ebx,ebx
c000897c:	85 c0                	test   eax,eax
c000897e:	74 47                	je     c00089c7 <src_callback_new+0x5c>
c0008980:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008986:	eb 3f                	jmp    c00089c7 <src_callback_new+0x5c>
c0008988:	85 c0                	test   eax,eax
c000898a:	74 06                	je     c0008992 <src_callback_new+0x27>
c000898c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008992:	51                   	push   ecx
c0008993:	50                   	push   eax
c0008994:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008998:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899c:	e8 3c ff ff ff       	call   c00088dd <src_new>
c00089a1:	83 c4 10             	add    esp,0x10
c00089a4:	89 c3                	mov    ebx,eax
c00089a6:	85 c0                	test   eax,eax
c00089a8:	74 1d                	je     c00089c7 <src_callback_new+0x5c>
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	50                   	push   eax
c00089ae:	e8 e6 fe ff ff       	call   c0008899 <src_reset>
c00089b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089b7:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089be:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c4:	83 c4 10             	add    esp,0x10
c00089c7:	5a                   	pop    edx
c00089c8:	89 d8                	mov    eax,ebx
c00089ca:	5b                   	pop    ebx
c00089cb:	5e                   	pop    esi
c00089cc:	c3                   	ret    

c00089cd <src_get_name>:
c00089cd:	53                   	push   ebx
c00089ce:	83 ec 14             	sub    esp,0x14
c00089d1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089d5:	53                   	push   ebx
c00089d6:	e8 47 1f 00 00       	call   c000a922 <sinc_get_name>
c00089db:	83 c4 10             	add    esp,0x10
c00089de:	85 c0                	test   eax,eax
c00089e0:	75 1d                	jne    c00089ff <src_get_name+0x32>
c00089e2:	83 ec 0c             	sub    esp,0xc
c00089e5:	53                   	push   ebx
c00089e6:	e8 4a 23 00 00       	call   c000ad35 <zoh_get_name>
c00089eb:	83 c4 10             	add    esp,0x10
c00089ee:	85 c0                	test   eax,eax
c00089f0:	75 0d                	jne    c00089ff <src_get_name+0x32>
c00089f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089f6:	83 c4 08             	add    esp,0x8
c00089f9:	5b                   	pop    ebx
c00089fa:	e9 36 05 00 00       	jmp    c0008f35 <linear_get_name>
c00089ff:	83 c4 08             	add    esp,0x8
c0008a02:	5b                   	pop    ebx
c0008a03:	c3                   	ret    

c0008a04 <src_get_description>:
c0008a04:	53                   	push   ebx
c0008a05:	83 ec 14             	sub    esp,0x14
c0008a08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 23 1f 00 00       	call   c000a935 <sinc_get_description>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	85 c0                	test   eax,eax
c0008a17:	75 1d                	jne    c0008a36 <src_get_description+0x32>
c0008a19:	83 ec 0c             	sub    esp,0xc
c0008a1c:	53                   	push   ebx
c0008a1d:	e8 22 23 00 00       	call   c000ad44 <zoh_get_description>
c0008a22:	83 c4 10             	add    esp,0x10
c0008a25:	85 c0                	test   eax,eax
c0008a27:	75 0d                	jne    c0008a36 <src_get_description+0x32>
c0008a29:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a2d:	83 c4 08             	add    esp,0x8
c0008a30:	5b                   	pop    ebx
c0008a31:	e9 0e 05 00 00       	jmp    c0008f44 <linear_get_description>
c0008a36:	83 c4 08             	add    esp,0x8
c0008a39:	5b                   	pop    ebx
c0008a3a:	c3                   	ret    

c0008a3b <src_get_version>:
c0008a3b:	b8 a0 09 02 c0       	mov    eax,0xc00209a0
c0008a40:	c3                   	ret    

c0008a41 <src_is_valid_ratio>:
c0008a41:	50                   	push   eax
c0008a42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4a:	e8 84 fa ff ff       	call   c00084d3 <is_bad_src_ratio>
c0008a4f:	85 c0                	test   eax,eax
c0008a51:	0f 94 c0             	sete   al
c0008a54:	0f b6 c0             	movzx  eax,al
c0008a57:	83 c4 0c             	add    esp,0xc
c0008a5a:	c3                   	ret    

c0008a5b <src_error>:
c0008a5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a5f:	31 c0                	xor    eax,eax
c0008a61:	85 d2                	test   edx,edx
c0008a63:	74 03                	je     c0008a68 <src_error+0xd>
c0008a65:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a68:	c3                   	ret    

c0008a69 <src_strerror>:
c0008a69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a6d:	31 c0                	xor    eax,eax
c0008a6f:	83 fa 17             	cmp    edx,0x17
c0008a72:	77 07                	ja     c0008a7b <src_strerror+0x12>
c0008a74:	8b 04 95 00 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf200]
c0008a7b:	c3                   	ret    

c0008a7c <src_simple>:
c0008a7c:	56                   	push   esi
c0008a7d:	53                   	push   ebx
c0008a7e:	83 ec 18             	sub    esp,0x18
c0008a81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a89:	50                   	push   eax
c0008a8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a92:	e8 46 fe ff ff       	call   c00088dd <src_new>
c0008a97:	83 c4 10             	add    esp,0x10
c0008a9a:	85 c0                	test   eax,eax
c0008a9c:	75 06                	jne    c0008aa4 <src_simple+0x28>
c0008a9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa2:	eb 25                	jmp    c0008ac9 <src_simple+0x4d>
c0008aa4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008aab:	89 c3                	mov    ebx,eax
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	56                   	push   esi
c0008ab0:	53                   	push   ebx
c0008ab1:	e8 e1 fa ff ff       	call   c0008597 <src_process>
c0008ab6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008abd:	e8 99 fa ff ff       	call   c000855b <src_delete>
c0008ac2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ac6:	83 c4 10             	add    esp,0x10
c0008ac9:	83 c4 14             	add    esp,0x14
c0008acc:	5b                   	pop    ebx
c0008acd:	5e                   	pop    esi
c0008ace:	c3                   	ret    

c0008acf <src_short_to_float_array>:
c0008acf:	83 ec 0c             	sub    esp,0xc
c0008ad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ada:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ade:	85 c0                	test   eax,eax
c0008ae0:	74 0f                	je     c0008af1 <src_short_to_float_array+0x22>
c0008ae2:	48                   	dec    eax
c0008ae3:	d9 05 84 0e 02 c0    	fld    DWORD PTR ds:0xc0020e84
c0008ae9:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008aec:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008aef:	eb ed                	jmp    c0008ade <src_short_to_float_array+0xf>
c0008af1:	83 c4 0c             	add    esp,0xc
c0008af4:	c3                   	ret    

c0008af5 <src_float_to_short_array>:
c0008af5:	56                   	push   esi
c0008af6:	53                   	push   ebx
c0008af7:	52                   	push   edx
c0008af8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008afc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b00:	85 db                	test   ebx,ebx
c0008b02:	74 51                	je     c0008b55 <src_float_to_short_array+0x60>
c0008b04:	4b                   	dec    ebx
c0008b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b09:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008b0f:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b12:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008b18:	df e0                	fnstsw ax
c0008b1a:	9e                   	sahf   
c0008b1b:	72 0a                	jb     c0008b27 <src_float_to_short_array+0x32>
c0008b1d:	dd d8                	fstp   st(0)
c0008b1f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b25:	eb d9                	jmp    c0008b00 <src_float_to_short_array+0xb>
c0008b27:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008b2d:	d8 d9                	fcomp  st(1)
c0008b2f:	df e0                	fnstsw ax
c0008b31:	9e                   	sahf   
c0008b32:	72 0a                	jb     c0008b3e <src_float_to_short_array+0x49>
c0008b34:	dd d8                	fstp   st(0)
c0008b36:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b3c:	eb c2                	jmp    c0008b00 <src_float_to_short_array+0xb>
c0008b3e:	83 ec 10             	sub    esp,0x10
c0008b41:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b44:	e8 f7 6b 01 00       	call   c001f740 <lrint>
c0008b49:	83 c4 10             	add    esp,0x10
c0008b4c:	c1 f8 10             	sar    eax,0x10
c0008b4f:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b53:	eb ab                	jmp    c0008b00 <src_float_to_short_array+0xb>
c0008b55:	58                   	pop    eax
c0008b56:	5b                   	pop    ebx
c0008b57:	5e                   	pop    esi
c0008b58:	c3                   	ret    

c0008b59 <src_int_to_float_array>:
c0008b59:	83 ec 0c             	sub    esp,0xc
c0008b5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b68:	85 c0                	test   eax,eax
c0008b6a:	74 0f                	je     c0008b7b <src_int_to_float_array+0x22>
c0008b6c:	48                   	dec    eax
c0008b6d:	d9 05 90 0e 02 c0    	fld    DWORD PTR ds:0xc0020e90
c0008b73:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b76:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b79:	eb ed                	jmp    c0008b68 <src_int_to_float_array+0xf>
c0008b7b:	83 c4 0c             	add    esp,0xc
c0008b7e:	c3                   	ret    

c0008b7f <src_float_to_int_array>:
c0008b7f:	56                   	push   esi
c0008b80:	53                   	push   ebx
c0008b81:	52                   	push   edx
c0008b82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8a:	85 db                	test   ebx,ebx
c0008b8c:	74 4f                	je     c0008bdd <src_float_to_int_array+0x5e>
c0008b8e:	4b                   	dec    ebx
c0008b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b93:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008b99:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b9c:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008ba2:	df e0                	fnstsw ax
c0008ba4:	9e                   	sahf   
c0008ba5:	72 0b                	jb     c0008bb2 <src_float_to_int_array+0x33>
c0008ba7:	dd d8                	fstp   st(0)
c0008ba9:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb0:	eb d8                	jmp    c0008b8a <src_float_to_int_array+0xb>
c0008bb2:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008bb8:	d8 d9                	fcomp  st(1)
c0008bba:	df e0                	fnstsw ax
c0008bbc:	9e                   	sahf   
c0008bbd:	72 0b                	jb     c0008bca <src_float_to_int_array+0x4b>
c0008bbf:	dd d8                	fstp   st(0)
c0008bc1:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bc8:	eb c0                	jmp    c0008b8a <src_float_to_int_array+0xb>
c0008bca:	83 ec 10             	sub    esp,0x10
c0008bcd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd0:	e8 6b 6b 01 00       	call   c001f740 <lrint>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bdb:	eb ad                	jmp    c0008b8a <src_float_to_int_array+0xb>
c0008bdd:	58                   	pop    eax
c0008bde:	5b                   	pop    ebx
c0008bdf:	5e                   	pop    esi
c0008be0:	c3                   	ret    

c0008be1 <is_bad_src_ratio>:
c0008be1:	83 ec 0c             	sub    esp,0xc
c0008be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be8:	89 04 24             	mov    DWORD PTR [esp],eax
c0008beb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf3:	dd 04 24             	fld    QWORD PTR [esp]
c0008bf6:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0008bfc:	de d9                	fcompp 
c0008bfe:	df e0                	fnstsw ax
c0008c00:	f6 c4 45             	test   ah,0x45
c0008c03:	74 10                	je     c0008c15 <is_bad_src_ratio+0x34>
c0008c05:	dd 04 24             	fld    QWORD PTR [esp]
c0008c08:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0008c0e:	df e0                	fnstsw ax
c0008c10:	f6 c4 45             	test   ah,0x45
c0008c13:	75 07                	jne    c0008c1c <is_bad_src_ratio+0x3b>
c0008c15:	b8 01 00 00 00       	mov    eax,0x1
c0008c1a:	eb 05                	jmp    c0008c21 <is_bad_src_ratio+0x40>
c0008c1c:	b8 00 00 00 00       	mov    eax,0x0
c0008c21:	83 c4 0c             	add    esp,0xc
c0008c24:	c3                   	ret    

c0008c25 <fmod_one>:
c0008c25:	83 ec 2c             	sub    esp,0x2c
c0008c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c38:	83 ec 08             	sub    esp,0x8
c0008c3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c43:	e8 f8 6a 01 00       	call   c001f740 <lrint>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c4f:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c53:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c57:	de e1                	fsubrp st(1),st
c0008c59:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c5d:	d9 ee                	fldz   
c0008c5f:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c63:	df e0                	fnstsw ax
c0008c65:	f6 c4 45             	test   ah,0x45
c0008c68:	75 0a                	jne    c0008c74 <fmod_one+0x4f>
c0008c6a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c6e:	d9 e8                	fld1   
c0008c70:	de c1                	faddp  st(1),st
c0008c72:	eb 04                	jmp    c0008c78 <fmod_one+0x53>
c0008c74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c78:	83 c4 2c             	add    esp,0x2c
c0008c7b:	c3                   	ret    

c0008c7c <linear_vari_process>:
c0008c7c:	55                   	push   ebp
c0008c7d:	57                   	push   edi
c0008c7e:	56                   	push   esi
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 2c             	sub    esp,0x2c
c0008c83:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c87:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c93:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c97:	0f 8e 5a 02 00 00    	jle    c0008ef7 <linear_vari_process+0x27b>
c0008c9d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca0:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008ca8:	85 db                	test   ebx,ebx
c0008caa:	0f 84 47 02 00 00    	je     c0008ef7 <linear_vari_process+0x27b>
c0008cb0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cb7:	74 19                	je     c0008cd2 <linear_vari_process+0x56>
c0008cb9:	31 d2                	xor    edx,edx
c0008cbb:	39 c2                	cmp    edx,eax
c0008cbd:	7d 0c                	jge    c0008ccb <linear_vari_process+0x4f>
c0008cbf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc1:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc4:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008cc8:	42                   	inc    edx
c0008cc9:	eb f0                	jmp    c0008cbb <linear_vari_process+0x3f>
c0008ccb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cd5:	0f af d0             	imul   edx,eax
c0008cd8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cdb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cdf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ce6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008ce9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf0:	dd 07                	fld    QWORD PTR [edi]
c0008cf2:	dd 14 24             	fst    QWORD PTR [esp]
c0008cf5:	50                   	push   eax
c0008cf6:	50                   	push   eax
c0008cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cfa:	e8 e2 fe ff ff       	call   c0008be1 <is_bad_src_ratio>
c0008cff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d03:	5a                   	pop    edx
c0008d04:	59                   	pop    ecx
c0008d05:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0a:	0f 85 df 01 00 00    	jne    c0008eef <linear_vari_process+0x273>
c0008d10:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d13:	d9 e8                	fld1   
c0008d15:	d8 d1                	fcom   st(1)
c0008d17:	df e0                	fnstsw ax
c0008d19:	9e                   	sahf   
c0008d1a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d1e:	0f 86 97 00 00 00    	jbe    c0008dbb <linear_vari_process+0x13f>
c0008d24:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d27:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2a:	0f 8d 8b 00 00 00    	jge    c0008dbb <linear_vari_process+0x13f>
c0008d30:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d34:	d8 c1                	fadd   st,st(1)
c0008d36:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d39:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d3c:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d3f:	df e0                	fnstsw ax
c0008d41:	9e                   	sahf   
c0008d42:	73 77                	jae    c0008dbb <linear_vari_process+0x13f>
c0008d44:	85 d2                	test   edx,edx
c0008d46:	7e 36                	jle    c0008d7e <linear_vari_process+0x102>
c0008d48:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d4c:	dd 07                	fld    QWORD PTR [edi]
c0008d4e:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d51:	83 ec 10             	sub    esp,0x10
c0008d54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d57:	e8 c4 69 01 00       	call   c001f720 <fabs>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008d65:	df e0                	fnstsw ax
c0008d67:	9e                   	sahf   
c0008d68:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d6c:	76 10                	jbe    c0008d7e <linear_vari_process+0x102>
c0008d6e:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d71:	dc 27                	fsub   QWORD PTR [edi]
c0008d73:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d76:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d79:	dc 07                	fadd   QWORD PTR [edi]
c0008d7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d7e:	31 c0                	xor    eax,eax
c0008d80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d83:	7e 1f                	jle    c0008da4 <linear_vari_process+0x128>
c0008d85:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d87:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8a:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d8e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d92:	d8 e1                	fsub   st,st(1)
c0008d94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d97:	40                   	inc    eax
c0008d98:	d8 ca                	fmul   st,st(2)
c0008d9a:	de c1                	faddp  st(1),st
c0008d9c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d9f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da2:	eb dc                	jmp    c0008d80 <linear_vari_process+0x104>
c0008da4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008da8:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dab:	de c1                	faddp  st(1),st
c0008dad:	e9 61 ff ff ff       	jmp    c0008d13 <linear_vari_process+0x97>
c0008db2:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008db6:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db9:	de c1                	faddp  st(1),st
c0008dbb:	83 ec 10             	sub    esp,0x10
c0008dbe:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dc5:	e8 5b fe ff ff       	call   c0008c25 <fmod_one>
c0008dca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dcd:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd1:	d8 e1                	fsub   st,st(1)
c0008dd3:	d9 c9                	fxch   st(1)
c0008dd5:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dd9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ddc:	e8 5f 69 01 00       	call   c001f740 <lrint>
c0008de1:	83 c4 10             	add    esp,0x10
c0008de4:	0f af e8             	imul   ebp,eax
c0008de7:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008dea:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008ded:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df4:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008df7:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dfa:	0f 8d 95 00 00 00    	jge    c0008e95 <linear_vari_process+0x219>
c0008e00:	d9 c0                	fld    st(0)
c0008e02:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e05:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e09:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e0d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e11:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e15:	de d9                	fcompp 
c0008e17:	df e0                	fnstsw ax
c0008e19:	9e                   	sahf   
c0008e1a:	76 79                	jbe    c0008e95 <linear_vari_process+0x219>
c0008e1c:	85 ed                	test   ebp,ebp
c0008e1e:	7e 36                	jle    c0008e56 <linear_vari_process+0x1da>
c0008e20:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e24:	dd 07                	fld    QWORD PTR [edi]
c0008e26:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e29:	83 ec 10             	sub    esp,0x10
c0008e2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e2f:	e8 ec 68 01 00       	call   c001f720 <fabs>
c0008e34:	83 c4 10             	add    esp,0x10
c0008e37:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008e3d:	df e0                	fnstsw ax
c0008e3f:	9e                   	sahf   
c0008e40:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e44:	76 10                	jbe    c0008e56 <linear_vari_process+0x1da>
c0008e46:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e49:	dc 27                	fsub   QWORD PTR [edi]
c0008e4b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e4e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e51:	dc 07                	fadd   QWORD PTR [edi]
c0008e53:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e56:	31 c0                	xor    eax,eax
c0008e58:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e5b:	39 c2                	cmp    edx,eax
c0008e5d:	0f 8e 4f ff ff ff    	jle    c0008db2 <linear_vari_process+0x136>
c0008e63:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e65:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e68:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e6c:	89 e9                	mov    ecx,ebp
c0008e6e:	29 d1                	sub    ecx,edx
c0008e70:	01 c5                	add    ebp,eax
c0008e72:	89 ca                	mov    edx,ecx
c0008e74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e78:	01 c2                	add    edx,eax
c0008e7a:	40                   	inc    eax
c0008e7b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e7e:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e81:	d8 e1                	fsub   st,st(1)
c0008e83:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e86:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e89:	d8 ca                	fmul   st,st(2)
c0008e8b:	de c1                	faddp  st(1),st
c0008e8d:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e90:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e93:	eb c3                	jmp    c0008e58 <linear_vari_process+0x1dc>
c0008e95:	39 d1                	cmp    ecx,edx
c0008e97:	7d 13                	jge    c0008eac <linear_vari_process+0x230>
c0008e99:	89 d0                	mov    eax,edx
c0008e9b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e9e:	29 c8                	sub    eax,ecx
c0008ea0:	99                   	cdq    
c0008ea1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ea8:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eac:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eaf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb2:	85 c0                	test   eax,eax
c0008eb4:	7f 1b                	jg     c0008ed1 <linear_vari_process+0x255>
c0008eb6:	dd 04 24             	fld    QWORD PTR [esp]
c0008eb9:	dd 1f                	fstp   QWORD PTR [edi]
c0008ebb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ebe:	99                   	cdq    
c0008ebf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ec5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ec8:	99                   	cdq    
c0008ec9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ecc:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ecf:	eb 26                	jmp    c0008ef7 <linear_vari_process+0x27b>
c0008ed1:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed4:	31 d2                	xor    edx,edx
c0008ed6:	29 c8                	sub    eax,ecx
c0008ed8:	c1 e0 02             	shl    eax,0x2
c0008edb:	39 d1                	cmp    ecx,edx
c0008edd:	7e d7                	jle    c0008eb6 <linear_vari_process+0x23a>
c0008edf:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee1:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008ee5:	83 c0 04             	add    eax,0x4
c0008ee8:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008eec:	42                   	inc    edx
c0008eed:	eb ec                	jmp    c0008edb <linear_vari_process+0x25f>
c0008eef:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008ef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008efb:	83 c4 2c             	add    esp,0x2c
c0008efe:	5b                   	pop    ebx
c0008eff:	5e                   	pop    esi
c0008f00:	5f                   	pop    edi
c0008f01:	5d                   	pop    ebp
c0008f02:	c3                   	ret    

c0008f03 <linear_reset>:
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f0d:	85 c0                	test   eax,eax
c0008f0f:	74 20                	je     c0008f31 <linear_reset+0x2e>
c0008f11:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f14:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f1e:	51                   	push   ecx
c0008f1f:	c1 e2 02             	shl    edx,0x2
c0008f22:	83 c0 1c             	add    eax,0x1c
c0008f25:	52                   	push   edx
c0008f26:	6a 00                	push   0x0
c0008f28:	50                   	push   eax
c0008f29:	e8 87 77 ff ff       	call   c00006b5 <memset>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	83 c4 0c             	add    esp,0xc
c0008f34:	c3                   	ret    

c0008f35 <linear_get_name>:
c0008f35:	31 c0                	xor    eax,eax
c0008f37:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f3c:	75 05                	jne    c0008f43 <linear_get_name+0xe>
c0008f3e:	b8 94 0e 02 c0       	mov    eax,0xc0020e94
c0008f43:	c3                   	ret    

c0008f44 <linear_get_description>:
c0008f44:	31 c0                	xor    eax,eax
c0008f46:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f4b:	75 05                	jne    c0008f52 <linear_get_description+0xe>
c0008f4d:	b8 a8 0e 02 c0       	mov    eax,0xc0020ea8
c0008f52:	c3                   	ret    

c0008f53 <linear_set_converter>:
c0008f53:	53                   	push   ebx
c0008f54:	b8 0a 00 00 00       	mov    eax,0xa
c0008f59:	83 ec 08             	sub    esp,0x8
c0008f5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f60:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f65:	75 6e                	jne    c0008fd5 <linear_set_converter+0x82>
c0008f67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6a:	85 c0                	test   eax,eax
c0008f6c:	74 13                	je     c0008f81 <linear_set_converter+0x2e>
c0008f6e:	83 ec 0c             	sub    esp,0xc
c0008f71:	50                   	push   eax
c0008f72:	e8 6c 30 00 00       	call   c000bfe3 <free>
c0008f77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	50                   	push   eax
c0008f82:	50                   	push   eax
c0008f83:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f86:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f8d:	50                   	push   eax
c0008f8e:	6a 01                	push   0x1
c0008f90:	e8 6e 30 00 00       	call   c000c003 <calloc>
c0008f95:	89 c2                	mov    edx,eax
c0008f97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	b8 01 00 00 00       	mov    eax,0x1
c0008fa2:	85 d2                	test   edx,edx
c0008fa4:	74 2f                	je     c0008fd5 <linear_set_converter+0x82>
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008faf:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fb5:	c7 43 24 7c 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c7c
c0008fbc:	c7 43 20 7c 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c7c
c0008fc3:	c7 43 28 03 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f03
c0008fca:	53                   	push   ebx
c0008fcb:	e8 33 ff ff ff       	call   c0008f03 <linear_reset>
c0008fd0:	83 c4 10             	add    esp,0x10
c0008fd3:	31 c0                	xor    eax,eax
c0008fd5:	83 c4 08             	add    esp,0x8
c0008fd8:	5b                   	pop    ebx
c0008fd9:	c3                   	ret    

c0008fda <is_bad_src_ratio>:
c0008fda:	83 ec 0c             	sub    esp,0xc
c0008fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe1:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fe8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fec:	dd 04 24             	fld    QWORD PTR [esp]
c0008fef:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0008ff5:	de d9                	fcompp 
c0008ff7:	df e0                	fnstsw ax
c0008ff9:	f6 c4 45             	test   ah,0x45
c0008ffc:	74 10                	je     c000900e <is_bad_src_ratio+0x34>
c0008ffe:	dd 04 24             	fld    QWORD PTR [esp]
c0009001:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0009007:	df e0                	fnstsw ax
c0009009:	f6 c4 45             	test   ah,0x45
c000900c:	75 07                	jne    c0009015 <is_bad_src_ratio+0x3b>
c000900e:	b8 01 00 00 00       	mov    eax,0x1
c0009013:	eb 05                	jmp    c000901a <is_bad_src_ratio+0x40>
c0009015:	b8 00 00 00 00       	mov    eax,0x0
c000901a:	83 c4 0c             	add    esp,0xc
c000901d:	c3                   	ret    

c000901e <int_to_fp>:
c000901e:	c1 e0 0c             	shl    eax,0xc
c0009021:	c3                   	ret    

c0009022 <fp_to_int>:
c0009022:	c1 f8 0c             	sar    eax,0xc
c0009025:	c3                   	ret    

c0009026 <fp_fraction_part>:
c0009026:	25 ff 0f 00 00       	and    eax,0xfff
c000902b:	c3                   	ret    

c000902c <fp_to_double>:
c000902c:	83 ec 0c             	sub    esp,0xc
c000902f:	e8 f2 ff ff ff       	call   c0009026 <fp_fraction_part>
c0009034:	d9 05 68 10 02 c0    	fld    DWORD PTR ds:0xc0021068
c000903a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000903e:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009042:	83 c4 0c             	add    esp,0xc
c0009045:	c3                   	ret    

c0009046 <calc_output_single>:
c0009046:	55                   	push   ebp
c0009047:	57                   	push   edi
c0009048:	89 c7                	mov    edi,eax
c000904a:	56                   	push   esi
c000904b:	53                   	push   ebx
c000904c:	89 d3                	mov    ebx,edx
c000904e:	83 ec 24             	sub    esp,0x24
c0009051:	89 de                	mov    esi,ebx
c0009053:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009056:	e8 c3 ff ff ff       	call   c000901e <int_to_fp>
c000905b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000905e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009062:	29 c8                	sub    eax,ecx
c0009064:	99                   	cdq    
c0009065:	f7 fb                	idiv   ebx
c0009067:	0f af f0             	imul   esi,eax
c000906a:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000906d:	01 ce                	add    esi,ecx
c000906f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009073:	29 c2                	sub    edx,eax
c0009075:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000907c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009084:	8d 14 97             	lea    edx,[edi+edx*4]
c0009087:	89 f0                	mov    eax,esi
c0009089:	e8 9e ff ff ff       	call   c000902c <fp_to_double>
c000908e:	89 f0                	mov    eax,esi
c0009090:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009094:	e8 89 ff ff ff       	call   c0009022 <fp_to_int>
c0009099:	83 c2 04             	add    edx,0x4
c000909c:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a4:	d8 e1                	fsub   st,st(1)
c00090a6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090aa:	de c9                	fmulp  st(1),st
c00090ac:	de c1                	faddp  st(1),st
c00090ae:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b4:	29 de                	sub    esi,ebx
c00090b6:	dc 04 24             	fadd   QWORD PTR [esp]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	79 c9                	jns    c0009087 <calc_output_single+0x41>
c00090be:	89 d8                	mov    eax,ebx
c00090c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c4:	29 c8                	sub    eax,ecx
c00090c6:	89 c1                	mov    ecx,eax
c00090c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090cc:	29 c8                	sub    eax,ecx
c00090ce:	99                   	cdq    
c00090cf:	f7 fb                	idiv   ebx
c00090d1:	89 da                	mov    edx,ebx
c00090d3:	0f af d0             	imul   edx,eax
c00090d6:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090da:	01 d1                	add    ecx,edx
c00090dc:	d9 ee                	fldz   
c00090de:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090e5:	89 c8                	mov    eax,ecx
c00090e7:	e8 40 ff ff ff       	call   c000902c <fp_to_double>
c00090ec:	89 c8                	mov    eax,ecx
c00090ee:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f2:	e8 2b ff ff ff       	call   c0009022 <fp_to_int>
c00090f7:	29 d9                	sub    ecx,ebx
c00090f9:	83 ea 04             	sub    edx,0x4
c00090fc:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009100:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009104:	d8 e1                	fsub   st,st(1)
c0009106:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910a:	de c9                	fmulp  st(1),st
c000910c:	de c1                	faddp  st(1),st
c000910e:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009114:	85 c9                	test   ecx,ecx
c0009116:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911a:	de c1                	faddp  st(1),st
c000911c:	7f c3                	jg     c00090e1 <calc_output_single+0x9b>
c000911e:	dd 04 24             	fld    QWORD PTR [esp]
c0009121:	de c1                	faddp  st(1),st
c0009123:	83 c4 24             	add    esp,0x24
c0009126:	5b                   	pop    ebx
c0009127:	5e                   	pop    esi
c0009128:	5f                   	pop    edi
c0009129:	5d                   	pop    ebp
c000912a:	c3                   	ret    

c000912b <calc_output_stereo>:
c000912b:	55                   	push   ebp
c000912c:	57                   	push   edi
c000912d:	89 c7                	mov    edi,eax
c000912f:	56                   	push   esi
c0009130:	53                   	push   ebx
c0009131:	89 d3                	mov    ebx,edx
c0009133:	83 ec 44             	sub    esp,0x44
c0009136:	89 de                	mov    esi,ebx
c0009138:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000913b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000913f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009143:	e8 d6 fe ff ff       	call   c000901e <int_to_fp>
c0009148:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000914b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000914f:	29 c8                	sub    eax,ecx
c0009151:	99                   	cdq    
c0009152:	f7 fb                	idiv   ebx
c0009154:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009157:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000915f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009163:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009166:	0f af f0             	imul   esi,eax
c0009169:	0f af c2             	imul   eax,edx
c000916c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009170:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009174:	d9 ee                	fldz   
c0009176:	29 c2                	sub    edx,eax
c0009178:	01 ce                	add    esi,ecx
c000917a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000917d:	8d 14 97             	lea    edx,[edi+edx*4]
c0009180:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009188:	89 f0                	mov    eax,esi
c000918a:	e8 9d fe ff ff       	call   c000902c <fp_to_double>
c000918f:	89 f0                	mov    eax,esi
c0009191:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009195:	e8 88 fe ff ff       	call   c0009022 <fp_to_int>
c000919a:	83 c2 08             	add    edx,0x8
c000919d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091a5:	d8 e1                	fsub   st,st(1)
c00091a7:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091ab:	de c9                	fmulp  st(1),st
c00091ad:	de c1                	faddp  st(1),st
c00091af:	d9 c0                	fld    st(0)
c00091b1:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091b7:	dc 04 24             	fadd   QWORD PTR [esp]
c00091ba:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091bd:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c3:	29 de                	sub    esi,ebx
c00091c5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091c9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091cd:	79 b9                	jns    c0009188 <calc_output_stereo+0x5d>
c00091cf:	89 d8                	mov    eax,ebx
c00091d1:	29 c8                	sub    eax,ecx
c00091d3:	89 c1                	mov    ecx,eax
c00091d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d9:	29 c8                	sub    eax,ecx
c00091db:	99                   	cdq    
c00091dc:	f7 fb                	idiv   ebx
c00091de:	89 da                	mov    edx,ebx
c00091e0:	0f af d0             	imul   edx,eax
c00091e3:	40                   	inc    eax
c00091e4:	01 d1                	add    ecx,edx
c00091e6:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091eb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091ef:	d9 ee                	fldz   
c00091f1:	d9 ee                	fldz   
c00091f3:	8d 14 87             	lea    edx,[edi+eax*4]
c00091f6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091fa:	89 c8                	mov    eax,ecx
c00091fc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009200:	e8 27 fe ff ff       	call   c000902c <fp_to_double>
c0009205:	89 c8                	mov    eax,ecx
c0009207:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000920b:	e8 12 fe ff ff       	call   c0009022 <fp_to_int>
c0009210:	29 d9                	sub    ecx,ebx
c0009212:	83 ea 08             	sub    edx,0x8
c0009215:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009219:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000921d:	d8 e1                	fsub   st,st(1)
c000921f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009223:	de c9                	fmulp  st(1),st
c0009225:	de c1                	faddp  st(1),st
c0009227:	d9 c0                	fld    st(0)
c0009229:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000922f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009233:	de c1                	faddp  st(1),st
c0009235:	d9 c9                	fxch   st(1)
c0009237:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000923d:	85 c9                	test   ecx,ecx
c000923f:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009243:	de c1                	faddp  st(1),st
c0009245:	7f af                	jg     c00091f6 <calc_output_stereo+0xcb>
c0009247:	dd 04 24             	fld    QWORD PTR [esp]
c000924a:	de c2                	faddp  st(2),st
c000924c:	d9 c9                	fxch   st(1)
c000924e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009252:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009256:	d9 18                	fstp   DWORD PTR [eax]
c0009258:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000925c:	de c1                	faddp  st(1),st
c000925e:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009262:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009265:	83 c4 44             	add    esp,0x44
c0009268:	5b                   	pop    ebx
c0009269:	5e                   	pop    esi
c000926a:	5f                   	pop    edi
c000926b:	5d                   	pop    ebp
c000926c:	c3                   	ret    

c000926d <calc_output_quad>:
c000926d:	55                   	push   ebp
c000926e:	57                   	push   edi
c000926f:	56                   	push   esi
c0009270:	89 c6                	mov    esi,eax
c0009272:	53                   	push   ebx
c0009273:	89 d3                	mov    ebx,edx
c0009275:	83 ec 5c             	sub    esp,0x5c
c0009278:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000927b:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000927f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009283:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009286:	e8 93 fd ff ff       	call   c000901e <int_to_fp>
c000928b:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000928e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009292:	29 c8                	sub    eax,ecx
c0009294:	99                   	cdq    
c0009295:	f7 fb                	idiv   ebx
c0009297:	89 da                	mov    edx,ebx
c0009299:	0f af d0             	imul   edx,eax
c000929c:	01 ca                	add    edx,ecx
c000929e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a2:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092a9:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092ac:	0f af c2             	imul   eax,edx
c00092af:	d9 ee                	fldz   
c00092b1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092b9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092bd:	29 c2                	sub    edx,eax
c00092bf:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c3:	8d 14 96             	lea    edx,[esi+edx*4]
c00092c6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092ca:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d2:	e8 55 fd ff ff       	call   c000902c <fp_to_double>
c00092d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092db:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092df:	e8 3e fd ff ff       	call   c0009022 <fp_to_int>
c00092e4:	83 c2 10             	add    edx,0x10
c00092e7:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092eb:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092ef:	d8 e1                	fsub   st,st(1)
c00092f1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092f5:	de c9                	fmulp  st(1),st
c00092f7:	de c1                	faddp  st(1),st
c00092f9:	d9 c0                	fld    st(0)
c00092fb:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009301:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009305:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009309:	d9 c0                	fld    st(0)
c000930b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009311:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009315:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009319:	d9 c0                	fld    st(0)
c000931b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009321:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009325:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009329:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000932f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009333:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009337:	de c1                	faddp  st(1),st
c0009339:	79 8f                	jns    c00092ca <calc_output_quad+0x5d>
c000933b:	89 d8                	mov    eax,ebx
c000933d:	29 c8                	sub    eax,ecx
c000933f:	89 c1                	mov    ecx,eax
c0009341:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009345:	29 c8                	sub    eax,ecx
c0009347:	99                   	cdq    
c0009348:	f7 fb                	idiv   ebx
c000934a:	89 da                	mov    edx,ebx
c000934c:	0f af d0             	imul   edx,eax
c000934f:	40                   	inc    eax
c0009350:	01 d1                	add    ecx,edx
c0009352:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009357:	d9 ee                	fldz   
c0009359:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000935d:	d9 ee                	fldz   
c000935f:	d9 ee                	fldz   
c0009361:	d9 ee                	fldz   
c0009363:	8d 14 86             	lea    edx,[esi+eax*4]
c0009366:	eb 0a                	jmp    c0009372 <calc_output_quad+0x105>
c0009368:	d9 cc                	fxch   st(4)
c000936a:	d9 ca                	fxch   st(2)
c000936c:	d9 c9                	fxch   st(1)
c000936e:	d9 cb                	fxch   st(3)
c0009370:	d9 c9                	fxch   st(1)
c0009372:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009376:	d9 c9                	fxch   st(1)
c0009378:	89 c8                	mov    eax,ecx
c000937a:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000937e:	d9 c9                	fxch   st(1)
c0009380:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009384:	d9 c9                	fxch   st(1)
c0009386:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000938e:	e8 99 fc ff ff       	call   c000902c <fp_to_double>
c0009393:	89 c8                	mov    eax,ecx
c0009395:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009399:	e8 84 fc ff ff       	call   c0009022 <fp_to_int>
c000939e:	29 d9                	sub    ecx,ebx
c00093a0:	83 ea 10             	sub    edx,0x10
c00093a3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093a7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093ab:	d8 e1                	fsub   st,st(1)
c00093ad:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b1:	de c9                	fmulp  st(1),st
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	d9 c0                	fld    st(0)
c00093b7:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093bd:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c1:	de c1                	faddp  st(1),st
c00093c3:	d9 c1                	fld    st(1)
c00093c5:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093cb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093cf:	de c1                	faddp  st(1),st
c00093d1:	d9 c2                	fld    st(2)
c00093d3:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093d9:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093dd:	de c1                	faddp  st(1),st
c00093df:	d9 cb                	fxch   st(3)
c00093e1:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093e7:	85 c9                	test   ecx,ecx
c00093e9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093ed:	de c1                	faddp  st(1),st
c00093ef:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f3:	0f 8f 6f ff ff ff    	jg     c0009368 <calc_output_quad+0xfb>
c00093f9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00093fd:	de c4                	faddp  st(4),st
c00093ff:	d9 cb                	fxch   st(3)
c0009401:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009404:	d9 1f                	fstp   DWORD PTR [edi]
c0009406:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940a:	de c2                	faddp  st(2),st
c000940c:	d9 c9                	fxch   st(1)
c000940e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009411:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009414:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009418:	de c3                	faddp  st(3),st
c000941a:	d9 ca                	fxch   st(2)
c000941c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000941f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009422:	de c1                	faddp  st(1),st
c0009424:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009427:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942a:	83 c4 5c             	add    esp,0x5c
c000942d:	5b                   	pop    ebx
c000942e:	5e                   	pop    esi
c000942f:	5f                   	pop    edi
c0009430:	5d                   	pop    ebp
c0009431:	c3                   	ret    

c0009432 <calc_output_hex>:
c0009432:	55                   	push   ebp
c0009433:	57                   	push   edi
c0009434:	89 c7                	mov    edi,eax
c0009436:	56                   	push   esi
c0009437:	53                   	push   ebx
c0009438:	89 d3                	mov    ebx,edx
c000943a:	83 ec 7c             	sub    esp,0x7c
c000943d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009440:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009447:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000944e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009451:	e8 c8 fb ff ff       	call   c000901e <int_to_fp>
c0009456:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009459:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000945d:	29 c8                	sub    eax,ecx
c000945f:	99                   	cdq    
c0009460:	f7 fb                	idiv   ebx
c0009462:	89 da                	mov    edx,ebx
c0009464:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c000946c:	0f af d0             	imul   edx,eax
c000946f:	01 ca                	add    edx,ecx
c0009471:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009479:	d9 ee                	fldz   
c000947b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000947f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009482:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009486:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009489:	0f af c2             	imul   eax,edx
c000948c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009490:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009494:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009498:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000949c:	29 c2                	sub    edx,eax
c000949e:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a2:	8d 14 97             	lea    edx,[edi+edx*4]
c00094a5:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094a9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b1:	e8 76 fb ff ff       	call   c000902c <fp_to_double>
c00094b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094ba:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094be:	e8 5f fb ff ff       	call   c0009022 <fp_to_int>
c00094c3:	83 c2 18             	add    edx,0x18
c00094c6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094ca:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094ce:	d8 e1                	fsub   st,st(1)
c00094d0:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d4:	de c9                	fmulp  st(1),st
c00094d6:	de c1                	faddp  st(1),st
c00094d8:	d9 c0                	fld    st(0)
c00094da:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e0:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094e8:	d9 c0                	fld    st(0)
c00094ea:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f0:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094f8:	d9 c0                	fld    st(0)
c00094fa:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009500:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009504:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009508:	d9 c0                	fld    st(0)
c000950a:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009510:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009514:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009518:	d9 c0                	fld    st(0)
c000951a:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009520:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009524:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009528:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000952e:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009532:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009536:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953a:	0f 89 6d ff ff ff    	jns    c00094ad <calc_output_hex+0x7b>
c0009540:	89 d8                	mov    eax,ebx
c0009542:	29 c8                	sub    eax,ecx
c0009544:	89 c1                	mov    ecx,eax
c0009546:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954a:	29 c8                	sub    eax,ecx
c000954c:	99                   	cdq    
c000954d:	f7 fb                	idiv   ebx
c000954f:	89 da                	mov    edx,ebx
c0009551:	0f af d0             	imul   edx,eax
c0009554:	40                   	inc    eax
c0009555:	01 d1                	add    ecx,edx
c0009557:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000955c:	d9 ee                	fldz   
c000955e:	d9 ee                	fldz   
c0009560:	d9 ee                	fldz   
c0009562:	d9 ca                	fxch   st(2)
c0009564:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009568:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000956c:	d9 ee                	fldz   
c000956e:	8d 14 87             	lea    edx,[edi+eax*4]
c0009571:	d9 ee                	fldz   
c0009573:	d9 ca                	fxch   st(2)
c0009575:	eb 0a                	jmp    c0009581 <calc_output_hex+0x14f>
c0009577:	d9 c9                	fxch   st(1)
c0009579:	d9 cc                	fxch   st(4)
c000957b:	d9 cb                	fxch   st(3)
c000957d:	d9 ca                	fxch   st(2)
c000957f:	d9 c9                	fxch   st(1)
c0009581:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009585:	89 c8                	mov    eax,ecx
c0009587:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c000958b:	d9 ca                	fxch   st(2)
c000958d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009591:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009595:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009599:	e8 8e fa ff ff       	call   c000902c <fp_to_double>
c000959e:	89 c8                	mov    eax,ecx
c00095a0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a4:	e8 79 fa ff ff       	call   c0009022 <fp_to_int>
c00095a9:	29 d9                	sub    ecx,ebx
c00095ab:	83 ea 18             	sub    edx,0x18
c00095ae:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b2:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095b6:	d8 e1                	fsub   st,st(1)
c00095b8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095bc:	de c9                	fmulp  st(1),st
c00095be:	de c1                	faddp  st(1),st
c00095c0:	d9 c0                	fld    st(0)
c00095c2:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095c8:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095cc:	de c1                	faddp  st(1),st
c00095ce:	d9 c1                	fld    st(1)
c00095d0:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095d6:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095da:	de c1                	faddp  st(1),st
c00095dc:	d9 c2                	fld    st(2)
c00095de:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e4:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095e8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095ec:	d9 c2                	fld    st(2)
c00095ee:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f4:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095f8:	de c1                	faddp  st(1),st
c00095fa:	d9 c3                	fld    st(3)
c00095fc:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009602:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009606:	de c1                	faddp  st(1),st
c0009608:	d9 cc                	fxch   st(4)
c000960a:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009610:	85 c9                	test   ecx,ecx
c0009612:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009616:	de c1                	faddp  st(1),st
c0009618:	0f 8f 59 ff ff ff    	jg     c0009577 <calc_output_hex+0x145>
c000961e:	d9 cb                	fxch   st(3)
c0009620:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009624:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009627:	d9 1e                	fstp   DWORD PTR [esi]
c0009629:	d9 c9                	fxch   st(1)
c000962b:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000962f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009632:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009635:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009639:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000963d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009640:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009643:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c000964d:	d9 c9                	fxch   st(1)
c000964f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009653:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009656:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009659:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000965d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009660:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009663:	83 c4 7c             	add    esp,0x7c
c0009666:	5b                   	pop    ebx
c0009667:	5e                   	pop    esi
c0009668:	5f                   	pop    edi
c0009669:	5d                   	pop    ebp
c000966a:	c3                   	ret    

c000966b <sinc_reset>:
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	51                   	push   ecx
c000966e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009672:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009675:	85 db                	test   ebx,ebx
c0009677:	74 51                	je     c00096ca <sinc_reset+0x5f>
c0009679:	d9 ee                	fldz   
c000967b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009682:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009689:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c000968c:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009693:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009699:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c000969c:	52                   	push   edx
c000969d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a0:	c1 e0 02             	shl    eax,0x2
c00096a3:	50                   	push   eax
c00096a4:	6a 00                	push   0x0
c00096a6:	56                   	push   esi
c00096a7:	e8 09 70 ff ff       	call   c00006b5 <memset>
c00096ac:	83 c4 0c             	add    esp,0xc
c00096af:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b2:	c1 e0 02             	shl    eax,0x2
c00096b5:	50                   	push   eax
c00096b6:	68 aa 00 00 00       	push   0xaa
c00096bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096be:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c1:	50                   	push   eax
c00096c2:	e8 ee 6f ff ff       	call   c00006b5 <memset>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	58                   	pop    eax
c00096cb:	5b                   	pop    ebx
c00096cc:	5e                   	pop    esi
c00096cd:	c3                   	ret    

c00096ce <calc_output_multi>:
c00096ce:	55                   	push   ebp
c00096cf:	57                   	push   edi
c00096d0:	8d 78 44             	lea    edi,[eax+0x44]
c00096d3:	56                   	push   esi
c00096d4:	89 c6                	mov    esi,eax
c00096d6:	53                   	push   ebx
c00096d7:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096dd:	83 ec 4c             	sub    esp,0x4c
c00096e0:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096e8:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096f7:	e8 22 f9 ff ff       	call   c000901e <int_to_fp>
c00096fc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009700:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009704:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009708:	99                   	cdq    
c0009709:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000970d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009711:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009714:	0f af d0             	imul   edx,eax
c0009717:	0f af c3             	imul   eax,ebx
c000971a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000971e:	29 c5                	sub    ebp,eax
c0009720:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009727:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000972b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000972f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009733:	52                   	push   edx
c0009734:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009738:	6a 00                	push   0x0
c000973a:	57                   	push   edi
c000973b:	e8 75 6f ff ff       	call   c00006b5 <memset>
c0009740:	83 c4 10             	add    esp,0x10
c0009743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009747:	e8 e0 f8 ff ff       	call   c000902c <fp_to_double>
c000974c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009750:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009754:	e8 c9 f8 ff ff       	call   c0009022 <fp_to_int>
c0009759:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000975c:	89 d9                	mov    ecx,ebx
c000975e:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009761:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009765:	d8 e1                	fsub   st,st(1)
c0009767:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000976b:	de c9                	fmulp  st(1),st
c000976d:	de c1                	faddp  st(1),st
c000976f:	89 c8                	mov    eax,ecx
c0009771:	bd 08 00 00 00       	mov    ebp,0x8
c0009776:	99                   	cdq    
c0009777:	f7 fd                	idiv   ebp
c0009779:	4a                   	dec    edx
c000977a:	83 fa 06             	cmp    edx,0x6
c000977d:	77 07                	ja     c0009786 <calc_output_multi+0xb8>
c000977f:	ff 24 95 e0 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf120]
c0009786:	49                   	dec    ecx
c0009787:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000978b:	d9 c0                	fld    st(0)
c000978d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009794:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009797:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000979b:	dc 00                	fadd   QWORD PTR [eax]
c000979d:	dd 18                	fstp   QWORD PTR [eax]
c000979f:	49                   	dec    ecx
c00097a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a4:	d9 c0                	fld    st(0)
c00097a6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ad:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b4:	dc 00                	fadd   QWORD PTR [eax]
c00097b6:	dd 18                	fstp   QWORD PTR [eax]
c00097b8:	49                   	dec    ecx
c00097b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097bd:	d9 c0                	fld    st(0)
c00097bf:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097c6:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097c9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097cd:	dc 00                	fadd   QWORD PTR [eax]
c00097cf:	dd 18                	fstp   QWORD PTR [eax]
c00097d1:	49                   	dec    ecx
c00097d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097d6:	d9 c0                	fld    st(0)
c00097d8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097df:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097e6:	dc 00                	fadd   QWORD PTR [eax]
c00097e8:	dd 18                	fstp   QWORD PTR [eax]
c00097ea:	49                   	dec    ecx
c00097eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097ef:	d9 c0                	fld    st(0)
c00097f1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097f8:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097fb:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097ff:	dc 00                	fadd   QWORD PTR [eax]
c0009801:	dd 18                	fstp   QWORD PTR [eax]
c0009803:	49                   	dec    ecx
c0009804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009808:	d9 c0                	fld    st(0)
c000980a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009811:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009814:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009818:	dc 00                	fadd   QWORD PTR [eax]
c000981a:	dd 18                	fstp   QWORD PTR [eax]
c000981c:	49                   	dec    ecx
c000981d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009821:	d9 c0                	fld    st(0)
c0009823:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000982d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009831:	dc 00                	fadd   QWORD PTR [eax]
c0009833:	dd 18                	fstp   QWORD PTR [eax]
c0009835:	49                   	dec    ecx
c0009836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983a:	d9 c0                	fld    st(0)
c000983c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009843:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009846:	85 c9                	test   ecx,ecx
c0009848:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000984c:	dc 00                	fadd   QWORD PTR [eax]
c000984e:	dd 18                	fstp   QWORD PTR [eax]
c0009850:	0f 8f 19 ff ff ff    	jg     c000976f <calc_output_multi+0xa1>
c0009856:	dd d8                	fstp   st(0)
c0009858:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000985c:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009860:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009864:	0f 89 d9 fe ff ff    	jns    c0009743 <calc_output_multi+0x75>
c000986a:	89 d1                	mov    ecx,edx
c000986c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009870:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009874:	29 c8                	sub    eax,ecx
c0009876:	99                   	cdq    
c0009877:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000987b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987f:	0f af d0             	imul   edx,eax
c0009882:	40                   	inc    eax
c0009883:	01 d1                	add    ecx,edx
c0009885:	0f af c3             	imul   eax,ebx
c0009888:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000988b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000988f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009893:	50                   	push   eax
c0009894:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009898:	6a 00                	push   0x0
c000989a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000989e:	e8 12 6e ff ff       	call   c00006b5 <memset>
c00098a3:	83 c4 10             	add    esp,0x10
c00098a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098aa:	e8 7d f7 ff ff       	call   c000902c <fp_to_double>
c00098af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098b7:	e8 66 f7 ff ff       	call   c0009022 <fp_to_int>
c00098bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098bf:	89 d9                	mov    ecx,ebx
c00098c1:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c4:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098c8:	d8 e1                	fsub   st,st(1)
c00098ca:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098ce:	de c9                	fmulp  st(1),st
c00098d0:	de c1                	faddp  st(1),st
c00098d2:	89 c8                	mov    eax,ecx
c00098d4:	bd 08 00 00 00       	mov    ebp,0x8
c00098d9:	99                   	cdq    
c00098da:	f7 fd                	idiv   ebp
c00098dc:	4a                   	dec    edx
c00098dd:	83 fa 06             	cmp    edx,0x6
c00098e0:	77 07                	ja     c00098e9 <calc_output_multi+0x21b>
c00098e2:	ff 24 95 fc 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf104]
c00098e9:	49                   	dec    ecx
c00098ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f9:	d9 c0                	fld    st(0)
c00098fb:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098ff:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009902:	dc 00                	fadd   QWORD PTR [eax]
c0009904:	dd 18                	fstp   QWORD PTR [eax]
c0009906:	49                   	dec    ecx
c0009907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000990f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009916:	d9 c0                	fld    st(0)
c0009918:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000991c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000991f:	dc 00                	fadd   QWORD PTR [eax]
c0009921:	dd 18                	fstp   QWORD PTR [eax]
c0009923:	49                   	dec    ecx
c0009924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000992c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009933:	d9 c0                	fld    st(0)
c0009935:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009939:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000993c:	dc 00                	fadd   QWORD PTR [eax]
c000993e:	dd 18                	fstp   QWORD PTR [eax]
c0009940:	49                   	dec    ecx
c0009941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009949:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009950:	d9 c0                	fld    st(0)
c0009952:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009956:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009959:	dc 00                	fadd   QWORD PTR [eax]
c000995b:	dd 18                	fstp   QWORD PTR [eax]
c000995d:	49                   	dec    ecx
c000995e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009966:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000996d:	d9 c0                	fld    st(0)
c000996f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009973:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009976:	dc 00                	fadd   QWORD PTR [eax]
c0009978:	dd 18                	fstp   QWORD PTR [eax]
c000997a:	49                   	dec    ecx
c000997b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000997f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009983:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998a:	d9 c0                	fld    st(0)
c000998c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009990:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009993:	dc 00                	fadd   QWORD PTR [eax]
c0009995:	dd 18                	fstp   QWORD PTR [eax]
c0009997:	49                   	dec    ecx
c0009998:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000999c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a7:	d9 c0                	fld    st(0)
c00099a9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ad:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b0:	dc 00                	fadd   QWORD PTR [eax]
c00099b2:	dd 18                	fstp   QWORD PTR [eax]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099bd:	85 c9                	test   ecx,ecx
c00099bf:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c6:	d9 c0                	fld    st(0)
c00099c8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099cc:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099cf:	dc 00                	fadd   QWORD PTR [eax]
c00099d1:	dd 18                	fstp   QWORD PTR [eax]
c00099d3:	0f 8f f9 fe ff ff    	jg     c00098d2 <calc_output_multi+0x204>
c00099d9:	dd d8                	fstp   st(0)
c00099db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099df:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e3:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099e7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099ec:	0f 8f b4 fe ff ff    	jg     c00098a6 <calc_output_multi+0x1d8>
c00099f2:	b9 08 00 00 00       	mov    ecx,0x8
c00099f7:	89 d8                	mov    eax,ebx
c00099f9:	99                   	cdq    
c00099fa:	f7 f9                	idiv   ecx
c00099fc:	4a                   	dec    edx
c00099fd:	83 fa 06             	cmp    edx,0x6
c0009a00:	77 07                	ja     c0009a09 <calc_output_multi+0x33b>
c0009a02:	ff 24 95 18 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e8]
c0009a09:	4b                   	dec    ebx
c0009a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a0e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a11:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a14:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a18:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a1c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a1f:	4b                   	dec    ebx
c0009a20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a24:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a27:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2e:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a32:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a35:	4b                   	dec    ebx
c0009a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a3d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a40:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a44:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a48:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a4b:	4b                   	dec    ebx
c0009a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a50:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a53:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a56:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5a:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a5e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a61:	4b                   	dec    ebx
c0009a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a66:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a69:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a6c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a70:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a74:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a77:	4b                   	dec    ebx
c0009a78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a7c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a7f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a82:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a86:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a8d:	4b                   	dec    ebx
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a95:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a98:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a9c:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa3:	4b                   	dec    ebx
c0009aa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aa8:	85 db                	test   ebx,ebx
c0009aaa:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aad:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab4:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ab8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009abb:	0f 8f 36 ff ff ff    	jg     c00099f7 <calc_output_multi+0x329>
c0009ac1:	83 c4 4c             	add    esp,0x4c
c0009ac4:	5b                   	pop    ebx
c0009ac5:	5e                   	pop    esi
c0009ac6:	5f                   	pop    edi
c0009ac7:	5d                   	pop    ebp
c0009ac8:	c3                   	ret    

c0009ac9 <double_to_fp>:
c0009ac9:	d9 05 6c 10 02 c0    	fld    DWORD PTR ds:0xc002106c
c0009acf:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad3:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009ad7:	e9 64 5c 01 00       	jmp    c001f740 <lrint>

c0009adc <fmod_one>:
c0009adc:	83 ec 2c             	sub    esp,0x2c
c0009adf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ae7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009aeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009aef:	83 ec 08             	sub    esp,0x8
c0009af2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009af6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afa:	e8 41 5c 01 00       	call   c001f740 <lrint>
c0009aff:	83 c4 10             	add    esp,0x10
c0009b02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b06:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b0e:	de e1                	fsubrp st(1),st
c0009b10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b14:	d9 ee                	fldz   
c0009b16:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1a:	df e0                	fnstsw ax
c0009b1c:	f6 c4 45             	test   ah,0x45
c0009b1f:	75 0a                	jne    c0009b2b <fmod_one+0x4f>
c0009b21:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b25:	d9 e8                	fld1   
c0009b27:	de c1                	faddp  st(1),st
c0009b29:	eb 04                	jmp    c0009b2f <fmod_one+0x53>
c0009b2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2f:	83 c4 2c             	add    esp,0x2c
c0009b32:	c3                   	ret    

c0009b33 <prepare_data>:
c0009b33:	55                   	push   ebp
c0009b34:	57                   	push   edi
c0009b35:	56                   	push   esi
c0009b36:	53                   	push   ebx
c0009b37:	83 ec 1c             	sub    esp,0x1c
c0009b3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b3e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b42:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b46:	0f 89 57 01 00 00    	jns    c0009ca3 <prepare_data+0x170>
c0009b4c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b4f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b52:	85 d2                	test   edx,edx
c0009b54:	75 0d                	jne    c0009b63 <prepare_data+0x30>
c0009b56:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b59:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b5c:	29 d0                	sub    eax,edx
c0009b5e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b61:	eb 44                	jmp    c0009ba7 <prepare_data+0x74>
c0009b63:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b66:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b69:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b6c:	39 c1                	cmp    ecx,eax
c0009b6e:	7d 04                	jge    c0009b74 <prepare_data+0x41>
c0009b70:	29 d0                	sub    eax,edx
c0009b72:	eb 2d                	jmp    c0009ba1 <prepare_data+0x6e>
c0009b74:	29 d7                	sub    edi,edx
c0009b76:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b7c:	01 f7                	add    edi,esi
c0009b7e:	29 f2                	sub    edx,esi
c0009b80:	51                   	push   ecx
c0009b81:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b88:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b8b:	51                   	push   ecx
c0009b8c:	52                   	push   edx
c0009b8d:	50                   	push   eax
c0009b8e:	e8 b4 6a ff ff       	call   c0000647 <memmove>
c0009b93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b96:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b99:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b9c:	29 f0                	sub    eax,esi
c0009b9e:	83 c4 10             	add    esp,0x10
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	79 02                	jns    c0009ba7 <prepare_data+0x74>
c0009ba5:	31 c0                	xor    eax,eax
c0009ba7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baa:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bad:	29 ef                	sub    edi,ebp
c0009baf:	39 c7                	cmp    edi,eax
c0009bb1:	7e 02                	jle    c0009bb5 <prepare_data+0x82>
c0009bb3:	89 c7                	mov    edi,eax
c0009bb5:	89 f8                	mov    eax,edi
c0009bb7:	99                   	cdq    
c0009bb8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bbb:	29 d7                	sub    edi,edx
c0009bbd:	b8 15 00 00 00       	mov    eax,0x15
c0009bc2:	0f 88 dd 00 00 00    	js     c0009ca5 <prepare_data+0x172>
c0009bc8:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bcb:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bce:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd1:	0f 8f ce 00 00 00    	jg     c0009ca5 <prepare_data+0x172>
c0009bd7:	50                   	push   eax
c0009bd8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bdf:	50                   	push   eax
c0009be0:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009be6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bec:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bef:	50                   	push   eax
c0009bf0:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bf7:	50                   	push   eax
c0009bf8:	e8 82 6a ff ff       	call   c000067f <memcpy>
c0009bfd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c00:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c03:	83 c4 10             	add    esp,0x10
c0009c06:	01 fd                	add    ebp,edi
c0009c08:	01 f9                	add    ecx,edi
c0009c0a:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c0d:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c10:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c17:	0f 85 86 00 00 00    	jne    c0009ca3 <prepare_data+0x170>
c0009c1d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c20:	89 e8                	mov    eax,ebp
c0009c22:	29 c8                	sub    eax,ecx
c0009c24:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c27:	39 f8                	cmp    eax,edi
c0009c29:	7d 78                	jge    c0009ca3 <prepare_data+0x170>
c0009c2b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c2f:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c33:	74 6e                	je     c0009ca3 <prepare_data+0x170>
c0009c35:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c38:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c3c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c3f:	29 ef                	sub    edi,ebp
c0009c41:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c45:	7c 29                	jl     c0009c70 <prepare_data+0x13d>
c0009c47:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4a:	29 f1                	sub    ecx,esi
c0009c4c:	55                   	push   ebp
c0009c4d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c54:	50                   	push   eax
c0009c55:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c58:	50                   	push   eax
c0009c59:	52                   	push   edx
c0009c5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c5e:	e8 e4 69 ff ff       	call   c0000647 <memmove>
c0009c63:	83 c4 10             	add    esp,0x10
c0009c66:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c69:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c70:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c73:	83 c6 05             	add    esi,0x5
c0009c76:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c7c:	78 07                	js     c0009c85 <prepare_data+0x152>
c0009c7e:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c81:	39 cf                	cmp    edi,ecx
c0009c83:	7e 04                	jle    c0009c89 <prepare_data+0x156>
c0009c85:	89 ce                	mov    esi,ecx
c0009c87:	29 c6                	sub    esi,eax
c0009c89:	51                   	push   ecx
c0009c8a:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c91:	51                   	push   ecx
c0009c92:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c95:	6a 00                	push   0x0
c0009c97:	50                   	push   eax
c0009c98:	e8 18 6a ff ff       	call   c00006b5 <memset>
c0009c9d:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca0:	83 c4 10             	add    esp,0x10
c0009ca3:	31 c0                	xor    eax,eax
c0009ca5:	83 c4 1c             	add    esp,0x1c
c0009ca8:	5b                   	pop    ebx
c0009ca9:	5e                   	pop    esi
c0009caa:	5f                   	pop    edi
c0009cab:	5d                   	pop    ebp
c0009cac:	c3                   	ret    

c0009cad <sinc_multichan_vari_process>:
c0009cad:	55                   	push   ebp
c0009cae:	b8 05 00 00 00       	mov    eax,0x5
c0009cb3:	57                   	push   edi
c0009cb4:	56                   	push   esi
c0009cb5:	53                   	push   ebx
c0009cb6:	83 ec 3c             	sub    esp,0x3c
c0009cb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cbd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc1:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc4:	85 db                	test   ebx,ebx
c0009cc6:	0f 84 5b 02 00 00    	je     c0009f27 <sinc_multichan_vari_process+0x27a>
c0009ccc:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ccf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd2:	0f af d0             	imul   edx,eax
c0009cd5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cd8:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009cdc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ce6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ced:	dd 06                	fld    QWORD PTR [esi]
c0009cef:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf3:	55                   	push   ebp
c0009cf4:	55                   	push   ebp
c0009cf5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cf8:	e8 dd f2 ff ff       	call   c0008fda <is_bad_src_ratio>
c0009cfd:	89 c2                	mov    edx,eax
c0009cff:	58                   	pop    eax
c0009d00:	59                   	pop    ecx
c0009d01:	b8 16 00 00 00       	mov    eax,0x16
c0009d06:	85 d2                	test   edx,edx
c0009d08:	0f 85 19 02 00 00    	jne    c0009f27 <sinc_multichan_vari_process+0x27a>
c0009d0e:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009d14:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d17:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1a:	dd 06                	fld    QWORD PTR [esi]
c0009d1c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d1f:	d8 d1                	fcom   st(1)
c0009d21:	df e0                	fnstsw ax
c0009d23:	9e                   	sahf   
c0009d24:	76 0f                	jbe    c0009d35 <sinc_multichan_vari_process+0x88>
c0009d26:	dd d8                	fstp   st(0)
c0009d28:	d9 e8                	fld1   
c0009d2a:	d8 d9                	fcomp  st(1)
c0009d2c:	df e0                	fnstsw ax
c0009d2e:	9e                   	sahf   
c0009d2f:	77 0f                	ja     c0009d40 <sinc_multichan_vari_process+0x93>
c0009d31:	dd d8                	fstp   st(0)
c0009d33:	eb 11                	jmp    c0009d46 <sinc_multichan_vari_process+0x99>
c0009d35:	dd d9                	fstp   st(1)
c0009d37:	d9 e8                	fld1   
c0009d39:	d8 d9                	fcomp  st(1)
c0009d3b:	df e0                	fnstsw ax
c0009d3d:	9e                   	sahf   
c0009d3e:	76 04                	jbe    c0009d44 <sinc_multichan_vari_process+0x97>
c0009d40:	de f9                	fdivp  st(1),st
c0009d42:	eb 02                	jmp    c0009d46 <sinc_multichan_vari_process+0x99>
c0009d44:	dd d8                	fstp   st(0)
c0009d46:	83 ec 10             	sub    esp,0x10
c0009d49:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d4c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d4f:	e8 ec 59 01 00       	call   c001f740 <lrint>
c0009d54:	40                   	inc    eax
c0009d55:	0f af c5             	imul   eax,ebp
c0009d58:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d5b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d5f:	dd 14 24             	fst    QWORD PTR [esp]
c0009d62:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d66:	e8 71 fd ff ff       	call   c0009adc <fmod_one>
c0009d6b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d6e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d75:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d79:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d7d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d81:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d84:	e8 b7 59 01 00       	call   c001f740 <lrint>
c0009d89:	d9 e8                	fld1   
c0009d8b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d8f:	0f af e8             	imul   ebp,eax
c0009d92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d96:	01 e8                	add    eax,ebp
c0009d98:	99                   	cdq    
c0009d99:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d9c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d9f:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c0009da5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009da9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dac:	83 c4 10             	add    esp,0x10
c0009daf:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db2:	7d 4b                	jge    c0009dff <sinc_multichan_vari_process+0x152>
c0009db4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009db7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dba:	01 c8                	add    eax,ecx
c0009dbc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dbf:	99                   	cdq    
c0009dc0:	f7 f9                	idiv   ecx
c0009dc2:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dc6:	7d 09                	jge    c0009dd1 <sinc_multichan_vari_process+0x124>
c0009dc8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dcb:	85 c0                	test   eax,eax
c0009dcd:	79 57                	jns    c0009e26 <sinc_multichan_vari_process+0x179>
c0009dcf:	eb 70                	jmp    c0009e41 <sinc_multichan_vari_process+0x194>
c0009dd1:	51                   	push   ecx
c0009dd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dd6:	57                   	push   edi
c0009dd7:	53                   	push   ebx
c0009dd8:	e8 56 fd ff ff       	call   c0009b33 <prepare_data>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de3:	85 c0                	test   eax,eax
c0009de5:	0f 85 3c 01 00 00    	jne    c0009f27 <sinc_multichan_vari_process+0x27a>
c0009deb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dee:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df1:	01 c8                	add    eax,ecx
c0009df3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009df6:	99                   	cdq    
c0009df7:	f7 f9                	idiv   ecx
c0009df9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dfd:	7c c9                	jl     c0009dc8 <sinc_multichan_vari_process+0x11b>
c0009dff:	dd 04 24             	fld    QWORD PTR [esp]
c0009e02:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e05:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e09:	dd 1e                	fstp   QWORD PTR [esi]
c0009e0b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e0e:	99                   	cdq    
c0009e0f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e12:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e18:	99                   	cdq    
c0009e19:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e1c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e1f:	31 c0                	xor    eax,eax
c0009e21:	e9 01 01 00 00       	jmp    c0009f27 <sinc_multichan_vari_process+0x27a>
c0009e26:	dd 04 24             	fld    QWORD PTR [esp]
c0009e29:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e30:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e34:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e38:	d9 c9                	fxch   st(1)
c0009e3a:	de d9                	fcompp 
c0009e3c:	df e0                	fnstsw ax
c0009e3e:	9e                   	sahf   
c0009e3f:	73 be                	jae    c0009dff <sinc_multichan_vari_process+0x152>
c0009e41:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e45:	7e 2f                	jle    c0009e76 <sinc_multichan_vari_process+0x1c9>
c0009e47:	dd 06                	fld    QWORD PTR [esi]
c0009e49:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e4c:	83 ec 10             	sub    esp,0x10
c0009e4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e52:	e8 c9 58 01 00       	call   c001f720 <fabs>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c0009e60:	df e0                	fnstsw ax
c0009e62:	9e                   	sahf   
c0009e63:	76 11                	jbe    c0009e76 <sinc_multichan_vari_process+0x1c9>
c0009e65:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e68:	dc 26                	fsub   QWORD PTR [esi]
c0009e6a:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e6d:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e70:	dc 06                	fadd   QWORD PTR [esi]
c0009e72:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e76:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e79:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e7d:	d9 e8                	fld1   
c0009e7f:	d8 d9                	fcomp  st(1)
c0009e81:	df e0                	fnstsw ax
c0009e83:	9e                   	sahf   
c0009e84:	77 04                	ja     c0009e8a <sinc_multichan_vari_process+0x1dd>
c0009e86:	dd d8                	fstp   st(0)
c0009e88:	d9 e8                	fld1   
c0009e8a:	de c9                	fmulp  st(1),st
c0009e8c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e90:	50                   	push   eax
c0009e91:	50                   	push   eax
c0009e92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9a:	e8 2a fc ff ff       	call   c0009ac9 <double_to_fp>
c0009e9f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea3:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009ea7:	89 c5                	mov    ebp,eax
c0009ea9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eac:	e8 18 fc ff ff       	call   c0009ac9 <double_to_fp>
c0009eb1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009eb7:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009eba:	89 c1                	mov    ecx,eax
c0009ebc:	52                   	push   edx
c0009ebd:	89 d8                	mov    eax,ebx
c0009ebf:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ec6:	52                   	push   edx
c0009ec7:	52                   	push   edx
c0009ec8:	89 ea                	mov    edx,ebp
c0009eca:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ecd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed0:	e8 f9 f7 ff ff       	call   c00096ce <calc_output_multi>
c0009ed5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ed8:	d9 e8                	fld1   
c0009eda:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ede:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	dd 14 24             	fst    QWORD PTR [esp]
c0009eeb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009eef:	e8 e8 fb ff ff       	call   c0009adc <fmod_one>
c0009ef4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ef7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009efa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009efe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f02:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f06:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f0d:	e8 2e 58 01 00       	call   c001f740 <lrint>
c0009f12:	0f af e8             	imul   ebp,eax
c0009f15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f19:	01 e8                	add    eax,ebp
c0009f1b:	99                   	cdq    
c0009f1c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f1f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f22:	e9 82 fe ff ff       	jmp    c0009da9 <sinc_multichan_vari_process+0xfc>
c0009f27:	83 c4 3c             	add    esp,0x3c
c0009f2a:	5b                   	pop    ebx
c0009f2b:	5e                   	pop    esi
c0009f2c:	5f                   	pop    edi
c0009f2d:	5d                   	pop    ebp
c0009f2e:	c3                   	ret    

c0009f2f <sinc_hex_vari_process>:
c0009f2f:	55                   	push   ebp
c0009f30:	b8 05 00 00 00       	mov    eax,0x5
c0009f35:	57                   	push   edi
c0009f36:	56                   	push   esi
c0009f37:	53                   	push   ebx
c0009f38:	83 ec 3c             	sub    esp,0x3c
c0009f3b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f3f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f43:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f46:	85 db                	test   ebx,ebx
c0009f48:	0f 84 56 02 00 00    	je     c000a1a4 <sinc_hex_vari_process+0x275>
c0009f4e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f54:	0f af d0             	imul   edx,eax
c0009f57:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f5e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f65:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f68:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f6f:	dd 06                	fld    QWORD PTR [esi]
c0009f71:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f75:	55                   	push   ebp
c0009f76:	55                   	push   ebp
c0009f77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7a:	e8 5b f0 ff ff       	call   c0008fda <is_bad_src_ratio>
c0009f7f:	89 c2                	mov    edx,eax
c0009f81:	58                   	pop    eax
c0009f82:	59                   	pop    ecx
c0009f83:	b8 16 00 00 00       	mov    eax,0x16
c0009f88:	85 d2                	test   edx,edx
c0009f8a:	0f 85 14 02 00 00    	jne    c000a1a4 <sinc_hex_vari_process+0x275>
c0009f90:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009f96:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f99:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f9c:	dd 06                	fld    QWORD PTR [esi]
c0009f9e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa1:	d8 d1                	fcom   st(1)
c0009fa3:	df e0                	fnstsw ax
c0009fa5:	9e                   	sahf   
c0009fa6:	76 0f                	jbe    c0009fb7 <sinc_hex_vari_process+0x88>
c0009fa8:	dd d8                	fstp   st(0)
c0009faa:	d9 e8                	fld1   
c0009fac:	d8 d9                	fcomp  st(1)
c0009fae:	df e0                	fnstsw ax
c0009fb0:	9e                   	sahf   
c0009fb1:	77 0f                	ja     c0009fc2 <sinc_hex_vari_process+0x93>
c0009fb3:	dd d8                	fstp   st(0)
c0009fb5:	eb 11                	jmp    c0009fc8 <sinc_hex_vari_process+0x99>
c0009fb7:	dd d9                	fstp   st(1)
c0009fb9:	d9 e8                	fld1   
c0009fbb:	d8 d9                	fcomp  st(1)
c0009fbd:	df e0                	fnstsw ax
c0009fbf:	9e                   	sahf   
c0009fc0:	76 04                	jbe    c0009fc6 <sinc_hex_vari_process+0x97>
c0009fc2:	de f9                	fdivp  st(1),st
c0009fc4:	eb 02                	jmp    c0009fc8 <sinc_hex_vari_process+0x99>
c0009fc6:	dd d8                	fstp   st(0)
c0009fc8:	83 ec 10             	sub    esp,0x10
c0009fcb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fce:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd1:	e8 6a 57 01 00       	call   c001f740 <lrint>
c0009fd6:	40                   	inc    eax
c0009fd7:	0f af c5             	imul   eax,ebp
c0009fda:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fdd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe1:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fe8:	e8 ef fa ff ff       	call   c0009adc <fmod_one>
c0009fed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ffb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009fff:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a003:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a006:	e8 35 57 01 00       	call   c001f740 <lrint>
c000a00b:	d9 e8                	fld1   
c000a00d:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a011:	0f af e8             	imul   ebp,eax
c000a014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a018:	01 e8                	add    eax,ebp
c000a01a:	99                   	cdq    
c000a01b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a01e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a021:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a027:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a02b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a02e:	83 c4 10             	add    esp,0x10
c000a031:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a034:	7d 4b                	jge    c000a081 <sinc_hex_vari_process+0x152>
c000a036:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a039:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a03c:	01 c8                	add    eax,ecx
c000a03e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a041:	99                   	cdq    
c000a042:	f7 f9                	idiv   ecx
c000a044:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a048:	7d 09                	jge    c000a053 <sinc_hex_vari_process+0x124>
c000a04a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a04d:	85 c0                	test   eax,eax
c000a04f:	79 57                	jns    c000a0a8 <sinc_hex_vari_process+0x179>
c000a051:	eb 70                	jmp    c000a0c3 <sinc_hex_vari_process+0x194>
c000a053:	51                   	push   ecx
c000a054:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a058:	57                   	push   edi
c000a059:	53                   	push   ebx
c000a05a:	e8 d4 fa ff ff       	call   c0009b33 <prepare_data>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a065:	85 c0                	test   eax,eax
c000a067:	0f 85 37 01 00 00    	jne    c000a1a4 <sinc_hex_vari_process+0x275>
c000a06d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a070:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a073:	01 c8                	add    eax,ecx
c000a075:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a078:	99                   	cdq    
c000a079:	f7 f9                	idiv   ecx
c000a07b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a07f:	7c c9                	jl     c000a04a <sinc_hex_vari_process+0x11b>
c000a081:	dd 04 24             	fld    QWORD PTR [esp]
c000a084:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a087:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a08b:	dd 1e                	fstp   QWORD PTR [esi]
c000a08d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a090:	99                   	cdq    
c000a091:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a094:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a097:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09a:	99                   	cdq    
c000a09b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a09e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a1:	31 c0                	xor    eax,eax
c000a0a3:	e9 fc 00 00 00       	jmp    c000a1a4 <sinc_hex_vari_process+0x275>
c000a0a8:	dd 04 24             	fld    QWORD PTR [esp]
c000a0ab:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b2:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0b6:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0ba:	d9 c9                	fxch   st(1)
c000a0bc:	de d9                	fcompp 
c000a0be:	df e0                	fnstsw ax
c000a0c0:	9e                   	sahf   
c000a0c1:	73 be                	jae    c000a081 <sinc_hex_vari_process+0x152>
c000a0c3:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0c7:	7e 2f                	jle    c000a0f8 <sinc_hex_vari_process+0x1c9>
c000a0c9:	dd 06                	fld    QWORD PTR [esi]
c000a0cb:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0ce:	83 ec 10             	sub    esp,0x10
c000a0d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d4:	e8 47 56 01 00       	call   c001f720 <fabs>
c000a0d9:	83 c4 10             	add    esp,0x10
c000a0dc:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a0e2:	df e0                	fnstsw ax
c000a0e4:	9e                   	sahf   
c000a0e5:	76 11                	jbe    c000a0f8 <sinc_hex_vari_process+0x1c9>
c000a0e7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ea:	dc 26                	fsub   QWORD PTR [esi]
c000a0ec:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0ef:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f2:	dc 06                	fadd   QWORD PTR [esi]
c000a0f4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0f8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a0fb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0ff:	d9 e8                	fld1   
c000a101:	d8 d9                	fcomp  st(1)
c000a103:	df e0                	fnstsw ax
c000a105:	9e                   	sahf   
c000a106:	77 04                	ja     c000a10c <sinc_hex_vari_process+0x1dd>
c000a108:	dd d8                	fstp   st(0)
c000a10a:	d9 e8                	fld1   
c000a10c:	de c9                	fmulp  st(1),st
c000a10e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a112:	50                   	push   eax
c000a113:	50                   	push   eax
c000a114:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11c:	e8 a8 f9 ff ff       	call   c0009ac9 <double_to_fp>
c000a121:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a125:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a129:	89 c5                	mov    ebp,eax
c000a12b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a12e:	e8 96 f9 ff ff       	call   c0009ac9 <double_to_fp>
c000a133:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a136:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a139:	83 c4 0c             	add    esp,0xc
c000a13c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	52                   	push   edx
c000a142:	89 d8                	mov    eax,ebx
c000a144:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a148:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a14b:	52                   	push   edx
c000a14c:	52                   	push   edx
c000a14d:	89 ea                	mov    edx,ebp
c000a14f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a152:	e8 db f2 ff ff       	call   c0009432 <calc_output_hex>
c000a157:	d9 e8                	fld1   
c000a159:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a15d:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a161:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a165:	dd 14 24             	fst    QWORD PTR [esp]
c000a168:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a16c:	e8 6b f9 ff ff       	call   c0009adc <fmod_one>
c000a171:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a174:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a177:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a17b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a17f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a183:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a187:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18a:	e8 b1 55 01 00       	call   c001f740 <lrint>
c000a18f:	0f af e8             	imul   ebp,eax
c000a192:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a196:	01 e8                	add    eax,ebp
c000a198:	99                   	cdq    
c000a199:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a19c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a19f:	e9 87 fe ff ff       	jmp    c000a02b <sinc_hex_vari_process+0xfc>
c000a1a4:	83 c4 3c             	add    esp,0x3c
c000a1a7:	5b                   	pop    ebx
c000a1a8:	5e                   	pop    esi
c000a1a9:	5f                   	pop    edi
c000a1aa:	5d                   	pop    ebp
c000a1ab:	c3                   	ret    

c000a1ac <sinc_quad_vari_process>:
c000a1ac:	55                   	push   ebp
c000a1ad:	b8 05 00 00 00       	mov    eax,0x5
c000a1b2:	57                   	push   edi
c000a1b3:	56                   	push   esi
c000a1b4:	53                   	push   ebx
c000a1b5:	83 ec 3c             	sub    esp,0x3c
c000a1b8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1bc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c0:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c3:	85 db                	test   ebx,ebx
c000a1c5:	0f 84 56 02 00 00    	je     c000a421 <sinc_quad_vari_process+0x275>
c000a1cb:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1ce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d1:	0f af d0             	imul   edx,eax
c000a1d4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1d7:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1e5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1ec:	dd 06                	fld    QWORD PTR [esi]
c000a1ee:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f2:	55                   	push   ebp
c000a1f3:	55                   	push   ebp
c000a1f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1f7:	e8 de ed ff ff       	call   c0008fda <is_bad_src_ratio>
c000a1fc:	89 c2                	mov    edx,eax
c000a1fe:	58                   	pop    eax
c000a1ff:	59                   	pop    ecx
c000a200:	b8 16 00 00 00       	mov    eax,0x16
c000a205:	85 d2                	test   edx,edx
c000a207:	0f 85 14 02 00 00    	jne    c000a421 <sinc_quad_vari_process+0x275>
c000a20d:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a213:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a216:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a219:	dd 06                	fld    QWORD PTR [esi]
c000a21b:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a21e:	d8 d1                	fcom   st(1)
c000a220:	df e0                	fnstsw ax
c000a222:	9e                   	sahf   
c000a223:	76 0f                	jbe    c000a234 <sinc_quad_vari_process+0x88>
c000a225:	dd d8                	fstp   st(0)
c000a227:	d9 e8                	fld1   
c000a229:	d8 d9                	fcomp  st(1)
c000a22b:	df e0                	fnstsw ax
c000a22d:	9e                   	sahf   
c000a22e:	77 0f                	ja     c000a23f <sinc_quad_vari_process+0x93>
c000a230:	dd d8                	fstp   st(0)
c000a232:	eb 11                	jmp    c000a245 <sinc_quad_vari_process+0x99>
c000a234:	dd d9                	fstp   st(1)
c000a236:	d9 e8                	fld1   
c000a238:	d8 d9                	fcomp  st(1)
c000a23a:	df e0                	fnstsw ax
c000a23c:	9e                   	sahf   
c000a23d:	76 04                	jbe    c000a243 <sinc_quad_vari_process+0x97>
c000a23f:	de f9                	fdivp  st(1),st
c000a241:	eb 02                	jmp    c000a245 <sinc_quad_vari_process+0x99>
c000a243:	dd d8                	fstp   st(0)
c000a245:	83 ec 10             	sub    esp,0x10
c000a248:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a24b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a24e:	e8 ed 54 01 00       	call   c001f740 <lrint>
c000a253:	40                   	inc    eax
c000a254:	0f af c5             	imul   eax,ebp
c000a257:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a25e:	dd 14 24             	fst    QWORD PTR [esp]
c000a261:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a265:	e8 72 f8 ff ff       	call   c0009adc <fmod_one>
c000a26a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a26d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a274:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a278:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a27c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a280:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a283:	e8 b8 54 01 00       	call   c001f740 <lrint>
c000a288:	d9 e8                	fld1   
c000a28a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a28e:	0f af e8             	imul   ebp,eax
c000a291:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a295:	01 e8                	add    eax,ebp
c000a297:	99                   	cdq    
c000a298:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a29b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a29e:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a2a4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b1:	7d 4b                	jge    c000a2fe <sinc_quad_vari_process+0x152>
c000a2b3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2b9:	01 c8                	add    eax,ecx
c000a2bb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2be:	99                   	cdq    
c000a2bf:	f7 f9                	idiv   ecx
c000a2c1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2c5:	7d 09                	jge    c000a2d0 <sinc_quad_vari_process+0x124>
c000a2c7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2ca:	85 c0                	test   eax,eax
c000a2cc:	79 57                	jns    c000a325 <sinc_quad_vari_process+0x179>
c000a2ce:	eb 70                	jmp    c000a340 <sinc_quad_vari_process+0x194>
c000a2d0:	51                   	push   ecx
c000a2d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2d5:	57                   	push   edi
c000a2d6:	53                   	push   ebx
c000a2d7:	e8 57 f8 ff ff       	call   c0009b33 <prepare_data>
c000a2dc:	83 c4 10             	add    esp,0x10
c000a2df:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	0f 85 37 01 00 00    	jne    c000a421 <sinc_quad_vari_process+0x275>
c000a2ea:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ed:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f0:	01 c8                	add    eax,ecx
c000a2f2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2f5:	99                   	cdq    
c000a2f6:	f7 f9                	idiv   ecx
c000a2f8:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2fc:	7c c9                	jl     c000a2c7 <sinc_quad_vari_process+0x11b>
c000a2fe:	dd 04 24             	fld    QWORD PTR [esp]
c000a301:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a304:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a308:	dd 1e                	fstp   QWORD PTR [esi]
c000a30a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a30d:	99                   	cdq    
c000a30e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a311:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a314:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a317:	99                   	cdq    
c000a318:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a31b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a31e:	31 c0                	xor    eax,eax
c000a320:	e9 fc 00 00 00       	jmp    c000a421 <sinc_quad_vari_process+0x275>
c000a325:	dd 04 24             	fld    QWORD PTR [esp]
c000a328:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a32b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a32f:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a333:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a337:	d9 c9                	fxch   st(1)
c000a339:	de d9                	fcompp 
c000a33b:	df e0                	fnstsw ax
c000a33d:	9e                   	sahf   
c000a33e:	73 be                	jae    c000a2fe <sinc_quad_vari_process+0x152>
c000a340:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a344:	7e 2f                	jle    c000a375 <sinc_quad_vari_process+0x1c9>
c000a346:	dd 06                	fld    QWORD PTR [esi]
c000a348:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a34b:	83 ec 10             	sub    esp,0x10
c000a34e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a351:	e8 ca 53 01 00       	call   c001f720 <fabs>
c000a356:	83 c4 10             	add    esp,0x10
c000a359:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a35f:	df e0                	fnstsw ax
c000a361:	9e                   	sahf   
c000a362:	76 11                	jbe    c000a375 <sinc_quad_vari_process+0x1c9>
c000a364:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a367:	dc 26                	fsub   QWORD PTR [esi]
c000a369:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a36c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a36f:	dc 06                	fadd   QWORD PTR [esi]
c000a371:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a375:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a378:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a37c:	d9 e8                	fld1   
c000a37e:	d8 d9                	fcomp  st(1)
c000a380:	df e0                	fnstsw ax
c000a382:	9e                   	sahf   
c000a383:	77 04                	ja     c000a389 <sinc_quad_vari_process+0x1dd>
c000a385:	dd d8                	fstp   st(0)
c000a387:	d9 e8                	fld1   
c000a389:	de c9                	fmulp  st(1),st
c000a38b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a38f:	50                   	push   eax
c000a390:	50                   	push   eax
c000a391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a399:	e8 2b f7 ff ff       	call   c0009ac9 <double_to_fp>
c000a39e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a2:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3a6:	89 c5                	mov    ebp,eax
c000a3a8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3ab:	e8 19 f7 ff ff       	call   c0009ac9 <double_to_fp>
c000a3b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3b6:	83 c4 0c             	add    esp,0xc
c000a3b9:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3bc:	89 c1                	mov    ecx,eax
c000a3be:	52                   	push   edx
c000a3bf:	89 d8                	mov    eax,ebx
c000a3c1:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3c5:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3c8:	52                   	push   edx
c000a3c9:	52                   	push   edx
c000a3ca:	89 ea                	mov    edx,ebp
c000a3cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3cf:	e8 99 ee ff ff       	call   c000926d <calc_output_quad>
c000a3d4:	d9 e8                	fld1   
c000a3d6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3da:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3de:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e2:	dd 14 24             	fst    QWORD PTR [esp]
c000a3e5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3e9:	e8 ee f6 ff ff       	call   c0009adc <fmod_one>
c000a3ee:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a3fc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a400:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a404:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a407:	e8 34 53 01 00       	call   c001f740 <lrint>
c000a40c:	0f af e8             	imul   ebp,eax
c000a40f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a413:	01 e8                	add    eax,ebp
c000a415:	99                   	cdq    
c000a416:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a419:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a41c:	e9 87 fe ff ff       	jmp    c000a2a8 <sinc_quad_vari_process+0xfc>
c000a421:	83 c4 3c             	add    esp,0x3c
c000a424:	5b                   	pop    ebx
c000a425:	5e                   	pop    esi
c000a426:	5f                   	pop    edi
c000a427:	5d                   	pop    ebp
c000a428:	c3                   	ret    

c000a429 <sinc_stereo_vari_process>:
c000a429:	55                   	push   ebp
c000a42a:	b8 05 00 00 00       	mov    eax,0x5
c000a42f:	57                   	push   edi
c000a430:	56                   	push   esi
c000a431:	53                   	push   ebx
c000a432:	83 ec 3c             	sub    esp,0x3c
c000a435:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a439:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a43d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a440:	85 db                	test   ebx,ebx
c000a442:	0f 84 56 02 00 00    	je     c000a69e <sinc_stereo_vari_process+0x275>
c000a448:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a44b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a44e:	0f af d0             	imul   edx,eax
c000a451:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a454:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a458:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a45f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a462:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a469:	dd 06                	fld    QWORD PTR [esi]
c000a46b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a46f:	55                   	push   ebp
c000a470:	55                   	push   ebp
c000a471:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a474:	e8 61 eb ff ff       	call   c0008fda <is_bad_src_ratio>
c000a479:	89 c2                	mov    edx,eax
c000a47b:	58                   	pop    eax
c000a47c:	59                   	pop    ecx
c000a47d:	b8 16 00 00 00       	mov    eax,0x16
c000a482:	85 d2                	test   edx,edx
c000a484:	0f 85 14 02 00 00    	jne    c000a69e <sinc_stereo_vari_process+0x275>
c000a48a:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a490:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a493:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a496:	dd 06                	fld    QWORD PTR [esi]
c000a498:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a49b:	d8 d1                	fcom   st(1)
c000a49d:	df e0                	fnstsw ax
c000a49f:	9e                   	sahf   
c000a4a0:	76 0f                	jbe    c000a4b1 <sinc_stereo_vari_process+0x88>
c000a4a2:	dd d8                	fstp   st(0)
c000a4a4:	d9 e8                	fld1   
c000a4a6:	d8 d9                	fcomp  st(1)
c000a4a8:	df e0                	fnstsw ax
c000a4aa:	9e                   	sahf   
c000a4ab:	77 0f                	ja     c000a4bc <sinc_stereo_vari_process+0x93>
c000a4ad:	dd d8                	fstp   st(0)
c000a4af:	eb 11                	jmp    c000a4c2 <sinc_stereo_vari_process+0x99>
c000a4b1:	dd d9                	fstp   st(1)
c000a4b3:	d9 e8                	fld1   
c000a4b5:	d8 d9                	fcomp  st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 04                	jbe    c000a4c0 <sinc_stereo_vari_process+0x97>
c000a4bc:	de f9                	fdivp  st(1),st
c000a4be:	eb 02                	jmp    c000a4c2 <sinc_stereo_vari_process+0x99>
c000a4c0:	dd d8                	fstp   st(0)
c000a4c2:	83 ec 10             	sub    esp,0x10
c000a4c5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4cb:	e8 70 52 01 00       	call   c001f740 <lrint>
c000a4d0:	40                   	inc    eax
c000a4d1:	0f af c5             	imul   eax,ebp
c000a4d4:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4db:	dd 14 24             	fst    QWORD PTR [esp]
c000a4de:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e2:	e8 f5 f5 ff ff       	call   c0009adc <fmod_one>
c000a4e7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4f5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4f9:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a4fd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a500:	e8 3b 52 01 00       	call   c001f740 <lrint>
c000a505:	d9 e8                	fld1   
c000a507:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a50b:	0f af e8             	imul   ebp,eax
c000a50e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a512:	01 e8                	add    eax,ebp
c000a514:	99                   	cdq    
c000a515:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a518:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a51b:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a521:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a525:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a528:	83 c4 10             	add    esp,0x10
c000a52b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a52e:	7d 4b                	jge    c000a57b <sinc_stereo_vari_process+0x152>
c000a530:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a533:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a536:	01 c8                	add    eax,ecx
c000a538:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a53b:	99                   	cdq    
c000a53c:	f7 f9                	idiv   ecx
c000a53e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a542:	7d 09                	jge    c000a54d <sinc_stereo_vari_process+0x124>
c000a544:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a547:	85 c0                	test   eax,eax
c000a549:	79 57                	jns    c000a5a2 <sinc_stereo_vari_process+0x179>
c000a54b:	eb 70                	jmp    c000a5bd <sinc_stereo_vari_process+0x194>
c000a54d:	51                   	push   ecx
c000a54e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a552:	57                   	push   edi
c000a553:	53                   	push   ebx
c000a554:	e8 da f5 ff ff       	call   c0009b33 <prepare_data>
c000a559:	83 c4 10             	add    esp,0x10
c000a55c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a55f:	85 c0                	test   eax,eax
c000a561:	0f 85 37 01 00 00    	jne    c000a69e <sinc_stereo_vari_process+0x275>
c000a567:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a56d:	01 c8                	add    eax,ecx
c000a56f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a572:	99                   	cdq    
c000a573:	f7 f9                	idiv   ecx
c000a575:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a579:	7c c9                	jl     c000a544 <sinc_stereo_vari_process+0x11b>
c000a57b:	dd 04 24             	fld    QWORD PTR [esp]
c000a57e:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a581:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a585:	dd 1e                	fstp   QWORD PTR [esi]
c000a587:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58a:	99                   	cdq    
c000a58b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a58e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a591:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a594:	99                   	cdq    
c000a595:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a598:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a59b:	31 c0                	xor    eax,eax
c000a59d:	e9 fc 00 00 00       	jmp    c000a69e <sinc_stereo_vari_process+0x275>
c000a5a2:	dd 04 24             	fld    QWORD PTR [esp]
c000a5a5:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5ac:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b4:	d9 c9                	fxch   st(1)
c000a5b6:	de d9                	fcompp 
c000a5b8:	df e0                	fnstsw ax
c000a5ba:	9e                   	sahf   
c000a5bb:	73 be                	jae    c000a57b <sinc_stereo_vari_process+0x152>
c000a5bd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c1:	7e 2f                	jle    c000a5f2 <sinc_stereo_vari_process+0x1c9>
c000a5c3:	dd 06                	fld    QWORD PTR [esi]
c000a5c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5c8:	83 ec 10             	sub    esp,0x10
c000a5cb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ce:	e8 4d 51 01 00       	call   c001f720 <fabs>
c000a5d3:	83 c4 10             	add    esp,0x10
c000a5d6:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a5dc:	df e0                	fnstsw ax
c000a5de:	9e                   	sahf   
c000a5df:	76 11                	jbe    c000a5f2 <sinc_stereo_vari_process+0x1c9>
c000a5e1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e4:	dc 26                	fsub   QWORD PTR [esi]
c000a5e6:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5e9:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5ec:	dc 06                	fadd   QWORD PTR [esi]
c000a5ee:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f2:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5f5:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5f9:	d9 e8                	fld1   
c000a5fb:	d8 d9                	fcomp  st(1)
c000a5fd:	df e0                	fnstsw ax
c000a5ff:	9e                   	sahf   
c000a600:	77 04                	ja     c000a606 <sinc_stereo_vari_process+0x1dd>
c000a602:	dd d8                	fstp   st(0)
c000a604:	d9 e8                	fld1   
c000a606:	de c9                	fmulp  st(1),st
c000a608:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a60c:	50                   	push   eax
c000a60d:	50                   	push   eax
c000a60e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a616:	e8 ae f4 ff ff       	call   c0009ac9 <double_to_fp>
c000a61b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a61f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a623:	89 c5                	mov    ebp,eax
c000a625:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a628:	e8 9c f4 ff ff       	call   c0009ac9 <double_to_fp>
c000a62d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a630:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a633:	83 c4 0c             	add    esp,0xc
c000a636:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a639:	89 c1                	mov    ecx,eax
c000a63b:	52                   	push   edx
c000a63c:	89 d8                	mov    eax,ebx
c000a63e:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a642:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a645:	52                   	push   edx
c000a646:	52                   	push   edx
c000a647:	89 ea                	mov    edx,ebp
c000a649:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a64c:	e8 da ea ff ff       	call   c000912b <calc_output_stereo>
c000a651:	d9 e8                	fld1   
c000a653:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a657:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a65b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a65f:	dd 14 24             	fst    QWORD PTR [esp]
c000a662:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a666:	e8 71 f4 ff ff       	call   c0009adc <fmod_one>
c000a66b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a66e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a671:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a675:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a679:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a67d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a681:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a684:	e8 b7 50 01 00       	call   c001f740 <lrint>
c000a689:	0f af e8             	imul   ebp,eax
c000a68c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a690:	01 e8                	add    eax,ebp
c000a692:	99                   	cdq    
c000a693:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a696:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a699:	e9 87 fe ff ff       	jmp    c000a525 <sinc_stereo_vari_process+0xfc>
c000a69e:	83 c4 3c             	add    esp,0x3c
c000a6a1:	5b                   	pop    ebx
c000a6a2:	5e                   	pop    esi
c000a6a3:	5f                   	pop    edi
c000a6a4:	5d                   	pop    ebp
c000a6a5:	c3                   	ret    

c000a6a6 <sinc_mono_vari_process>:
c000a6a6:	55                   	push   ebp
c000a6a7:	b8 05 00 00 00       	mov    eax,0x5
c000a6ac:	57                   	push   edi
c000a6ad:	56                   	push   esi
c000a6ae:	53                   	push   ebx
c000a6af:	83 ec 3c             	sub    esp,0x3c
c000a6b2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6b6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6ba:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6bd:	85 db                	test   ebx,ebx
c000a6bf:	0f 84 55 02 00 00    	je     c000a91a <sinc_mono_vari_process+0x274>
c000a6c5:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6c8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6cb:	0f af d0             	imul   edx,eax
c000a6ce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d1:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6dc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6df:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6e6:	dd 06                	fld    QWORD PTR [esi]
c000a6e8:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6ec:	51                   	push   ecx
c000a6ed:	51                   	push   ecx
c000a6ee:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f1:	e8 e4 e8 ff ff       	call   c0008fda <is_bad_src_ratio>
c000a6f6:	5d                   	pop    ebp
c000a6f7:	89 c2                	mov    edx,eax
c000a6f9:	58                   	pop    eax
c000a6fa:	85 d2                	test   edx,edx
c000a6fc:	b8 16 00 00 00       	mov    eax,0x16
c000a701:	0f 85 13 02 00 00    	jne    c000a91a <sinc_mono_vari_process+0x274>
c000a707:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a70d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a710:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a713:	dd 06                	fld    QWORD PTR [esi]
c000a715:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a718:	d8 d1                	fcom   st(1)
c000a71a:	df e0                	fnstsw ax
c000a71c:	9e                   	sahf   
c000a71d:	76 0f                	jbe    c000a72e <sinc_mono_vari_process+0x88>
c000a71f:	dd d8                	fstp   st(0)
c000a721:	d9 e8                	fld1   
c000a723:	d8 d9                	fcomp  st(1)
c000a725:	df e0                	fnstsw ax
c000a727:	9e                   	sahf   
c000a728:	77 0f                	ja     c000a739 <sinc_mono_vari_process+0x93>
c000a72a:	dd d8                	fstp   st(0)
c000a72c:	eb 11                	jmp    c000a73f <sinc_mono_vari_process+0x99>
c000a72e:	dd d9                	fstp   st(1)
c000a730:	d9 e8                	fld1   
c000a732:	d8 d9                	fcomp  st(1)
c000a734:	df e0                	fnstsw ax
c000a736:	9e                   	sahf   
c000a737:	76 04                	jbe    c000a73d <sinc_mono_vari_process+0x97>
c000a739:	de f9                	fdivp  st(1),st
c000a73b:	eb 02                	jmp    c000a73f <sinc_mono_vari_process+0x99>
c000a73d:	dd d8                	fstp   st(0)
c000a73f:	83 ec 10             	sub    esp,0x10
c000a742:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a745:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a748:	e8 f3 4f 01 00       	call   c001f740 <lrint>
c000a74d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a750:	40                   	inc    eax
c000a751:	dd 14 24             	fst    QWORD PTR [esp]
c000a754:	0f af e8             	imul   ebp,eax
c000a757:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a75b:	e8 7c f3 ff ff       	call   c0009adc <fmod_one>
c000a760:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a763:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a767:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a76e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a772:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a776:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a77d:	e8 be 4f 01 00       	call   c001f740 <lrint>
c000a782:	d9 e8                	fld1   
c000a784:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a788:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a78d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a791:	99                   	cdq    
c000a792:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a795:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a798:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a79e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7ab:	7d 44                	jge    c000a7f1 <sinc_mono_vari_process+0x14b>
c000a7ad:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b3:	01 c8                	add    eax,ecx
c000a7b5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7b8:	99                   	cdq    
c000a7b9:	f7 f9                	idiv   ecx
c000a7bb:	39 d5                	cmp    ebp,edx
c000a7bd:	7d 09                	jge    c000a7c8 <sinc_mono_vari_process+0x122>
c000a7bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c2:	85 c0                	test   eax,eax
c000a7c4:	79 52                	jns    c000a818 <sinc_mono_vari_process+0x172>
c000a7c6:	eb 6b                	jmp    c000a833 <sinc_mono_vari_process+0x18d>
c000a7c8:	52                   	push   edx
c000a7c9:	55                   	push   ebp
c000a7ca:	57                   	push   edi
c000a7cb:	53                   	push   ebx
c000a7cc:	e8 62 f3 ff ff       	call   c0009b33 <prepare_data>
c000a7d1:	83 c4 10             	add    esp,0x10
c000a7d4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7d7:	85 c0                	test   eax,eax
c000a7d9:	0f 85 3b 01 00 00    	jne    c000a91a <sinc_mono_vari_process+0x274>
c000a7df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7e5:	01 c8                	add    eax,ecx
c000a7e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ea:	99                   	cdq    
c000a7eb:	f7 f9                	idiv   ecx
c000a7ed:	39 d5                	cmp    ebp,edx
c000a7ef:	7c ce                	jl     c000a7bf <sinc_mono_vari_process+0x119>
c000a7f1:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f4:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7f7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7fb:	dd 1e                	fstp   QWORD PTR [esi]
c000a7fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a800:	99                   	cdq    
c000a801:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a804:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a807:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80a:	99                   	cdq    
c000a80b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a80e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a811:	31 c0                	xor    eax,eax
c000a813:	e9 02 01 00 00       	jmp    c000a91a <sinc_mono_vari_process+0x274>
c000a818:	dd 04 24             	fld    QWORD PTR [esp]
c000a81b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a81e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a822:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a826:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82a:	d9 c9                	fxch   st(1)
c000a82c:	de d9                	fcompp 
c000a82e:	df e0                	fnstsw ax
c000a830:	9e                   	sahf   
c000a831:	77 be                	ja     c000a7f1 <sinc_mono_vari_process+0x14b>
c000a833:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a837:	7e 2f                	jle    c000a868 <sinc_mono_vari_process+0x1c2>
c000a839:	dd 06                	fld    QWORD PTR [esi]
c000a83b:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a83e:	83 ec 10             	sub    esp,0x10
c000a841:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a844:	e8 d7 4e 01 00       	call   c001f720 <fabs>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a852:	df e0                	fnstsw ax
c000a854:	9e                   	sahf   
c000a855:	76 11                	jbe    c000a868 <sinc_mono_vari_process+0x1c2>
c000a857:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85a:	dc 26                	fsub   QWORD PTR [esi]
c000a85c:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a85f:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a862:	dc 06                	fadd   QWORD PTR [esi]
c000a864:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a868:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a86b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a86f:	d9 e8                	fld1   
c000a871:	d8 d9                	fcomp  st(1)
c000a873:	df e0                	fnstsw ax
c000a875:	9e                   	sahf   
c000a876:	77 04                	ja     c000a87c <sinc_mono_vari_process+0x1d6>
c000a878:	dd d8                	fstp   st(0)
c000a87a:	d9 e8                	fld1   
c000a87c:	de c9                	fmulp  st(1),st
c000a87e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a882:	50                   	push   eax
c000a883:	50                   	push   eax
c000a884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88c:	e8 38 f2 ff ff       	call   c0009ac9 <double_to_fp>
c000a891:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a895:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a899:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a89d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a0:	e8 24 f2 ff ff       	call   c0009ac9 <double_to_fp>
c000a8a5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8a9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b0:	89 c1                	mov    ecx,eax
c000a8b2:	89 d8                	mov    eax,ebx
c000a8b4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8b8:	e8 89 e7 ff ff       	call   c0009046 <calc_output_single>
c000a8bd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c0:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8c7:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8ca:	d9 e8                	fld1   
c000a8cc:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d0:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8d7:	dd 14 24             	fst    QWORD PTR [esp]
c000a8da:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8de:	e8 f9 f1 ff ff       	call   c0009adc <fmod_one>
c000a8e3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8ed:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f1:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8f5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8fd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a900:	e8 3b 4e 01 00       	call   c001f740 <lrint>
c000a905:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a90e:	99                   	cdq    
c000a90f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a912:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a915:	e9 88 fe ff ff       	jmp    c000a7a2 <sinc_mono_vari_process+0xfc>
c000a91a:	83 c4 3c             	add    esp,0x3c
c000a91d:	5b                   	pop    ebx
c000a91e:	5e                   	pop    esi
c000a91f:	5f                   	pop    edi
c000a920:	5d                   	pop    ebp
c000a921:	c3                   	ret    

c000a922 <sinc_get_name>:
c000a922:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a926:	31 c0                	xor    eax,eax
c000a928:	83 fa 02             	cmp    edx,0x2
c000a92b:	77 07                	ja     c000a934 <sinc_get_name+0x12>
c000a92d:	8b 04 95 40 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0c0]
c000a934:	c3                   	ret    

c000a935 <sinc_get_description>:
c000a935:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a939:	31 c0                	xor    eax,eax
c000a93b:	83 fa 02             	cmp    edx,0x2
c000a93e:	77 07                	ja     c000a947 <sinc_get_description+0x12>
c000a940:	8b 04 95 34 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0cc]
c000a947:	c3                   	ret    

c000a948 <sinc_set_converter>:
c000a948:	53                   	push   ebx
c000a949:	81 ec 58 08 00 00    	sub    esp,0x858
c000a94f:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a956:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a959:	85 c0                	test   eax,eax
c000a95b:	74 13                	je     c000a970 <sinc_set_converter+0x28>
c000a95d:	83 ec 0c             	sub    esp,0xc
c000a960:	50                   	push   eax
c000a961:	e8 7d 16 00 00       	call   c000bfe3 <free>
c000a966:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a96d:	83 c4 10             	add    esp,0x10
c000a970:	50                   	push   eax
c000a971:	68 44 08 00 00       	push   0x844
c000a976:	6a 00                	push   0x0
c000a978:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a97c:	50                   	push   eax
c000a97d:	e8 33 5d ff ff       	call   c00006b5 <memset>
c000a982:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a985:	83 c4 10             	add    esp,0x10
c000a988:	b8 0b 00 00 00       	mov    eax,0xb
c000a98d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a993:	7f 6e                	jg     c000aa03 <sinc_set_converter+0xbb>
c000a995:	83 fa 01             	cmp    edx,0x1
c000a998:	75 10                	jne    c000a9aa <sinc_set_converter+0x62>
c000a99a:	c7 43 24 a6 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6a6
c000a9a1:	c7 43 20 a6 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6a6
c000a9a8:	eb 4d                	jmp    c000a9f7 <sinc_set_converter+0xaf>
c000a9aa:	83 fa 02             	cmp    edx,0x2
c000a9ad:	75 10                	jne    c000a9bf <sinc_set_converter+0x77>
c000a9af:	c7 43 24 29 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a429
c000a9b6:	c7 43 20 29 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a429
c000a9bd:	eb 38                	jmp    c000a9f7 <sinc_set_converter+0xaf>
c000a9bf:	83 fa 04             	cmp    edx,0x4
c000a9c2:	75 10                	jne    c000a9d4 <sinc_set_converter+0x8c>
c000a9c4:	c7 43 24 ac a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1ac
c000a9cb:	c7 43 20 ac a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1ac
c000a9d2:	eb 23                	jmp    c000a9f7 <sinc_set_converter+0xaf>
c000a9d4:	83 fa 06             	cmp    edx,0x6
c000a9d7:	75 10                	jne    c000a9e9 <sinc_set_converter+0xa1>
c000a9d9:	c7 43 24 2f 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f2f
c000a9e0:	c7 43 20 2f 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f2f
c000a9e7:	eb 0e                	jmp    c000a9f7 <sinc_set_converter+0xaf>
c000a9e9:	c7 43 24 ad 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cad
c000a9f0:	c7 43 20 ad 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cad
c000a9f7:	c7 43 28 6b 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000966b
c000a9fe:	b8 0a 00 00 00       	mov    eax,0xa
c000aa03:	81 c4 58 08 00 00    	add    esp,0x858
c000aa09:	5b                   	pop    ebx
c000aa0a:	c3                   	ret    

c000aa0b <is_bad_src_ratio>:
c000aa0b:	83 ec 0c             	sub    esp,0xc
c000aa0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa12:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa1d:	dd 04 24             	fld    QWORD PTR [esp]
c000aa20:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c000aa26:	de d9                	fcompp 
c000aa28:	df e0                	fnstsw ax
c000aa2a:	f6 c4 45             	test   ah,0x45
c000aa2d:	74 10                	je     c000aa3f <is_bad_src_ratio+0x34>
c000aa2f:	dd 04 24             	fld    QWORD PTR [esp]
c000aa32:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c000aa38:	df e0                	fnstsw ax
c000aa3a:	f6 c4 45             	test   ah,0x45
c000aa3d:	75 07                	jne    c000aa46 <is_bad_src_ratio+0x3b>
c000aa3f:	b8 01 00 00 00       	mov    eax,0x1
c000aa44:	eb 05                	jmp    c000aa4b <is_bad_src_ratio+0x40>
c000aa46:	b8 00 00 00 00       	mov    eax,0x0
c000aa4b:	83 c4 0c             	add    esp,0xc
c000aa4e:	c3                   	ret    

c000aa4f <fmod_one>:
c000aa4f:	83 ec 2c             	sub    esp,0x2c
c000aa52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa62:	83 ec 08             	sub    esp,0x8
c000aa65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6d:	e8 ce 4c 01 00       	call   c001f740 <lrint>
c000aa72:	83 c4 10             	add    esp,0x10
c000aa75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa79:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa7d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa81:	de e1                	fsubrp st(1),st
c000aa83:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa87:	d9 ee                	fldz   
c000aa89:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa8d:	df e0                	fnstsw ax
c000aa8f:	f6 c4 45             	test   ah,0x45
c000aa92:	75 0a                	jne    c000aa9e <fmod_one+0x4f>
c000aa94:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa98:	d9 e8                	fld1   
c000aa9a:	de c1                	faddp  st(1),st
c000aa9c:	eb 04                	jmp    c000aaa2 <fmod_one+0x53>
c000aa9e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa2:	83 c4 2c             	add    esp,0x2c
c000aaa5:	c3                   	ret    

c000aaa6 <zoh_vari_process>:
c000aaa6:	55                   	push   ebp
c000aaa7:	57                   	push   edi
c000aaa8:	56                   	push   esi
c000aaa9:	53                   	push   ebx
c000aaaa:	83 ec 2c             	sub    esp,0x2c
c000aaad:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aab5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aabd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac1:	0f 8e 30 02 00 00    	jle    c000acf7 <zoh_vari_process+0x251>
c000aac7:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aaca:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad2:	85 db                	test   ebx,ebx
c000aad4:	0f 84 1d 02 00 00    	je     c000acf7 <zoh_vari_process+0x251>
c000aada:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aadd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae1:	74 19                	je     c000aafc <zoh_vari_process+0x56>
c000aae3:	31 d2                	xor    edx,edx
c000aae5:	39 c2                	cmp    edx,eax
c000aae7:	7d 0c                	jge    c000aaf5 <zoh_vari_process+0x4f>
c000aae9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaeb:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaee:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf2:	42                   	inc    edx
c000aaf3:	eb f0                	jmp    c000aae5 <zoh_vari_process+0x3f>
c000aaf5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aafc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aaff:	0f af d0             	imul   edx,eax
c000ab02:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab05:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab09:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab10:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab13:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1a:	dd 07                	fld    QWORD PTR [edi]
c000ab1c:	dd 14 24             	fst    QWORD PTR [esp]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab24:	e8 e2 fe ff ff       	call   c000aa0b <is_bad_src_ratio>
c000ab29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab2d:	5a                   	pop    edx
c000ab2e:	59                   	pop    ecx
c000ab2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab34:	0f 85 b5 01 00 00    	jne    c000acef <zoh_vari_process+0x249>
c000ab3a:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab3d:	d9 e8                	fld1   
c000ab3f:	d8 d1                	fcom   st(1)
c000ab41:	df e0                	fnstsw ax
c000ab43:	9e                   	sahf   
c000ab44:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab48:	0f 86 83 00 00 00    	jbe    c000abd1 <zoh_vari_process+0x12b>
c000ab4e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab51:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab54:	7d 7b                	jge    c000abd1 <zoh_vari_process+0x12b>
c000ab56:	d9 c0                	fld    st(0)
c000ab58:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab5b:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab5e:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab61:	df e0                	fnstsw ax
c000ab63:	9e                   	sahf   
c000ab64:	73 6b                	jae    c000abd1 <zoh_vari_process+0x12b>
c000ab66:	85 d2                	test   edx,edx
c000ab68:	7e 36                	jle    c000aba0 <zoh_vari_process+0xfa>
c000ab6a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab6e:	dd 07                	fld    QWORD PTR [edi]
c000ab70:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab73:	83 ec 10             	sub    esp,0x10
c000ab76:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab79:	e8 a2 4b 01 00       	call   c001f720 <fabs>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ab87:	df e0                	fnstsw ax
c000ab89:	9e                   	sahf   
c000ab8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab8e:	76 10                	jbe    c000aba0 <zoh_vari_process+0xfa>
c000ab90:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab93:	dc 27                	fsub   QWORD PTR [edi]
c000ab95:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab98:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab9b:	dc 07                	fadd   QWORD PTR [edi]
c000ab9d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba0:	31 c0                	xor    eax,eax
c000aba2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000aba5:	7e 13                	jle    c000abba <zoh_vari_process+0x114>
c000aba7:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abab:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb1:	40                   	inc    eax
c000abb2:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abb5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abb8:	eb e8                	jmp    c000aba2 <zoh_vari_process+0xfc>
c000abba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abbe:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc1:	de c1                	faddp  st(1),st
c000abc3:	e9 75 ff ff ff       	jmp    c000ab3d <zoh_vari_process+0x97>
c000abc8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abcc:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abcf:	de c1                	faddp  st(1),st
c000abd1:	83 ec 10             	sub    esp,0x10
c000abd4:	dd 14 24             	fst    QWORD PTR [esp]
c000abd7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abdb:	e8 6f fe ff ff       	call   c000aa4f <fmod_one>
c000abe0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe3:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abe7:	d8 e1                	fsub   st,st(1)
c000abe9:	d9 c9                	fxch   st(1)
c000abeb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abef:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf2:	e8 49 4b 01 00       	call   c001f740 <lrint>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	0f af e8             	imul   ebp,eax
c000abfd:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac00:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac03:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac07:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0a:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac0d:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac10:	0f 8d 80 00 00 00    	jge    c000ac96 <zoh_vari_process+0x1f0>
c000ac16:	d9 c0                	fld    st(0)
c000ac18:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac1b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac1f:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac27:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac2b:	de d9                	fcompp 
c000ac2d:	df e0                	fnstsw ax
c000ac2f:	9e                   	sahf   
c000ac30:	72 64                	jb     c000ac96 <zoh_vari_process+0x1f0>
c000ac32:	85 d2                	test   edx,edx
c000ac34:	7e 36                	jle    c000ac6c <zoh_vari_process+0x1c6>
c000ac36:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3a:	dd 07                	fld    QWORD PTR [edi]
c000ac3c:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac3f:	83 ec 10             	sub    esp,0x10
c000ac42:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac45:	e8 d6 4a 01 00       	call   c001f720 <fabs>
c000ac4a:	83 c4 10             	add    esp,0x10
c000ac4d:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ac53:	df e0                	fnstsw ax
c000ac55:	9e                   	sahf   
c000ac56:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5a:	76 10                	jbe    c000ac6c <zoh_vari_process+0x1c6>
c000ac5c:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac5f:	dc 27                	fsub   QWORD PTR [edi]
c000ac61:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac64:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac67:	dc 07                	fadd   QWORD PTR [edi]
c000ac69:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac6c:	31 d2                	xor    edx,edx
c000ac6e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac71:	39 d0                	cmp    eax,edx
c000ac73:	0f 8e 4f ff ff ff    	jle    c000abc8 <zoh_vari_process+0x122>
c000ac79:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac7c:	29 c1                	sub    ecx,eax
c000ac7e:	89 c8                	mov    eax,ecx
c000ac80:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac82:	01 d0                	add    eax,edx
c000ac84:	42                   	inc    edx
c000ac85:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac88:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac8b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac8e:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac91:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac94:	eb d8                	jmp    c000ac6e <zoh_vari_process+0x1c8>
c000ac96:	39 e9                	cmp    ecx,ebp
c000ac98:	7d 13                	jge    c000acad <zoh_vari_process+0x207>
c000ac9a:	89 e8                	mov    eax,ebp
c000ac9c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac9f:	29 c8                	sub    eax,ecx
c000aca1:	99                   	cdq    
c000aca2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aca5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aca9:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acad:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb3:	85 c0                	test   eax,eax
c000acb5:	7f 1b                	jg     c000acd2 <zoh_vari_process+0x22c>
c000acb7:	dd 04 24             	fld    QWORD PTR [esp]
c000acba:	dd 1f                	fstp   QWORD PTR [edi]
c000acbc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acbf:	99                   	cdq    
c000acc0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acc6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acc9:	99                   	cdq    
c000acca:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000accd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd0:	eb 25                	jmp    c000acf7 <zoh_vari_process+0x251>
c000acd2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acd5:	31 d2                	xor    edx,edx
c000acd7:	29 e8                	sub    eax,ebp
c000acd9:	c1 e0 02             	shl    eax,0x2
c000acdc:	39 d5                	cmp    ebp,edx
c000acde:	7e d7                	jle    c000acb7 <zoh_vari_process+0x211>
c000ace0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace2:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ace5:	83 c0 04             	add    eax,0x4
c000ace8:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acec:	42                   	inc    edx
c000aced:	eb ed                	jmp    c000acdc <zoh_vari_process+0x236>
c000acef:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000acfb:	83 c4 2c             	add    esp,0x2c
c000acfe:	5b                   	pop    ebx
c000acff:	5e                   	pop    esi
c000ad00:	5f                   	pop    edi
c000ad01:	5d                   	pop    ebp
c000ad02:	c3                   	ret    

c000ad03 <zoh_reset>:
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad0d:	85 c0                	test   eax,eax
c000ad0f:	74 20                	je     c000ad31 <zoh_reset+0x2e>
c000ad11:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad14:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad1e:	51                   	push   ecx
c000ad1f:	c1 e2 02             	shl    edx,0x2
c000ad22:	83 c0 1c             	add    eax,0x1c
c000ad25:	52                   	push   edx
c000ad26:	6a 00                	push   0x0
c000ad28:	50                   	push   eax
c000ad29:	e8 87 59 ff ff       	call   c00006b5 <memset>
c000ad2e:	83 c4 10             	add    esp,0x10
c000ad31:	83 c4 0c             	add    esp,0xc
c000ad34:	c3                   	ret    

c000ad35 <zoh_get_name>:
c000ad35:	31 c0                	xor    eax,eax
c000ad37:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad3c:	75 05                	jne    c000ad43 <zoh_get_name+0xe>
c000ad3e:	b8 74 10 02 c0       	mov    eax,0xc0021074
c000ad43:	c3                   	ret    

c000ad44 <zoh_get_description>:
c000ad44:	31 c0                	xor    eax,eax
c000ad46:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad4b:	75 05                	jne    c000ad52 <zoh_get_description+0xe>
c000ad4d:	b8 85 10 02 c0       	mov    eax,0xc0021085
c000ad52:	c3                   	ret    

c000ad53 <zoh_set_converter>:
c000ad53:	53                   	push   ebx
c000ad54:	b8 0a 00 00 00       	mov    eax,0xa
c000ad59:	83 ec 08             	sub    esp,0x8
c000ad5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad60:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad65:	75 6e                	jne    c000add5 <zoh_set_converter+0x82>
c000ad67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6a:	85 c0                	test   eax,eax
c000ad6c:	74 13                	je     c000ad81 <zoh_set_converter+0x2e>
c000ad6e:	83 ec 0c             	sub    esp,0xc
c000ad71:	50                   	push   eax
c000ad72:	e8 6c 12 00 00       	call   c000bfe3 <free>
c000ad77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad7e:	83 c4 10             	add    esp,0x10
c000ad81:	50                   	push   eax
c000ad82:	50                   	push   eax
c000ad83:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad86:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad8d:	50                   	push   eax
c000ad8e:	6a 01                	push   0x1
c000ad90:	e8 6e 12 00 00       	call   c000c003 <calloc>
c000ad95:	89 c2                	mov    edx,eax
c000ad97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9a:	83 c4 10             	add    esp,0x10
c000ad9d:	b8 01 00 00 00       	mov    eax,0x1
c000ada2:	85 d2                	test   edx,edx
c000ada4:	74 2f                	je     c000add5 <zoh_set_converter+0x82>
c000ada6:	83 ec 0c             	sub    esp,0xc
c000ada9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adaf:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adb5:	c7 43 24 a6 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaa6
c000adbc:	c7 43 20 a6 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaa6
c000adc3:	c7 43 28 03 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad03
c000adca:	53                   	push   ebx
c000adcb:	e8 33 ff ff ff       	call   c000ad03 <zoh_reset>
c000add0:	83 c4 10             	add    esp,0x10
c000add3:	31 c0                	xor    eax,eax
c000add5:	83 c4 08             	add    esp,0x8
c000add8:	5b                   	pop    ebx
c000add9:	c3                   	ret    

c000adda <Computer::close(int, int, void*)>:
c000adda:	57                   	push   edi
c000addb:	56                   	push   esi
c000addc:	53                   	push   ebx
c000addd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ade5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adf2:	50                   	push   eax
c000adf3:	e8 98 59 00 00       	call   c0010790 <Device::closeAll()>
c000adf8:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adfe:	83 c4 10             	add    esp,0x10
c000ae01:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae03:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae07:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae0f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae17:	5b                   	pop    ebx
c000ae18:	5e                   	pop    esi
c000ae19:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae1c:	5f                   	pop    edi
c000ae1d:	ff e0                	jmp    eax
c000ae1f:	90                   	nop

c000ae20 <Computer::Computer()>:
c000ae20:	83 ec 0c             	sub    esp,0xc
c000ae23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae27:	83 ec 08             	sub    esp,0x8
c000ae2a:	68 bc 10 02 c0       	push   0xc00210bc
c000ae2f:	50                   	push   eax
c000ae30:	e8 d5 59 00 00       	call   c001080a <Device::Device(char const*)>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000ae3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae41:	89 10                	mov    DWORD PTR [eax],edx
c000ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae47:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae55:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae63:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae69:	83 ca 04             	or     edx,0x4
c000ae6c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae7c:	31 d2                	xor    edx,edx
c000ae7e:	88 c2                	mov    dl,al
c000ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae84:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae95:	31 d2                	xor    edx,edx
c000ae97:	88 c2                	mov    dl,al
c000ae99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	8d 50 01             	lea    edx,[eax+0x1]
c000aeaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aeb9:	31 d2                	xor    edx,edx
c000aebb:	88 c2                	mov    dl,al
c000aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aec5:	83 e1 3f             	and    ecx,0x3f
c000aec8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed6:	31 d2                	xor    edx,edx
c000aed8:	88 c2                	mov    dl,al
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeef:	31 d2                	xor    edx,edx
c000aef1:	88 c2                	mov    dl,al
c000aef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af06:	8d 50 01             	lea    edx,[eax+0x1]
c000af09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af0d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af13:	31 d2                	xor    edx,edx
c000af15:	88 c2                	mov    dl,al
c000af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af1f:	83 e1 3f             	and    ecx,0x3f
c000af22:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af30:	31 d2                	xor    edx,edx
c000af32:	88 c2                	mov    dl,al
c000af34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af38:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af49:	31 d2                	xor    edx,edx
c000af4b:	88 c2                	mov    dl,al
c000af4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af51:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af60:	8d 50 01             	lea    edx,[eax+0x1]
c000af63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af67:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af6d:	31 d2                	xor    edx,edx
c000af6f:	88 c2                	mov    dl,al
c000af71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af79:	83 e1 3f             	and    ecx,0x3f
c000af7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af80:	90                   	nop
c000af81:	83 c4 0c             	add    esp,0xc
c000af84:	c3                   	ret    
c000af85:	90                   	nop

c000af86 <Computer::setBootMessage(char const*)>:
c000af86:	c3                   	ret    
c000af87:	90                   	nop

c000af88 <Computer::start()>:
c000af88:	56                   	push   esi
c000af89:	53                   	push   ebx
c000af8a:	83 ec 14             	sub    esp,0x14
c000af8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af91:	e8 a7 da 00 00       	call   c0018a3d <lockScheduler()>
c000af96:	e8 eb dd 00 00       	call   c0018d86 <schedule()>
c000af9b:	e8 9f da 00 00       	call   c0018a3f <unlockScheduler()>
c000afa0:	fb                   	sti    
c000afa1:	83 ec 0c             	sub    esp,0xc
c000afa4:	68 3b 07 00 00       	push   0x73b
c000afa9:	e8 22 41 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000afae:	89 c6                	mov    esi,eax
c000afb0:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c000afb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afbc:	50                   	push   eax
c000afbd:	68 c5 10 02 c0       	push   0xc00210c5
c000afc2:	6a 01                	push   0x1
c000afc4:	56                   	push   esi
c000afc5:	e8 ca d8 00 00       	call   c0018894 <Process::Process(bool, char const*, Process*, char**)>
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	68 ff 00 00 00       	push   0xff
c000afd2:	6a 00                	push   0x0
c000afd4:	68 61 b9 00 c0       	push   0xc000b961
c000afd9:	56                   	push   esi
c000afda:	e8 93 db 00 00       	call   c0018b72 <Process::createThread(void (*)(void*), void*, int)>
c000afdf:	6a 7a                	push   0x7a
c000afe1:	8b 15 d4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bd4
c000afe7:	6a 00                	push   0x0
c000afe9:	68 b7 93 01 c0       	push   0xc00193b7
c000afee:	52                   	push   edx
c000afef:	e8 7e db 00 00       	call   c0018b72 <Process::createThread(void (*)(void*), void*, int)>
c000aff4:	83 c4 20             	add    esp,0x20
c000aff7:	a3 88 5b 02 c0       	mov    ds:0xc0025b88,eax
c000affc:	c6 05 8d 47 02 c0 01 	mov    BYTE PTR ds:0xc002478d,0x1
c000b003:	e8 60 45 00 00       	call   c000f568 <initVFS()>
c000b008:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b00e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b010:	6a 00                	push   0x0
c000b012:	6a 00                	push   0x0
c000b014:	6a 00                	push   0x0
c000b016:	50                   	push   eax
c000b017:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b01a:	e8 6c c2 00 00       	call   c001728b <setupSystemCalls()>
c000b01f:	e8 42 50 00 00       	call   c0010066 <loadClockSettings()>
c000b024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b027:	e8 38 57 00 00       	call   c0010764 <Device::loadDriversForAll()>
c000b02c:	bb 02 00 00 00       	mov    ebx,0x2
c000b031:	b8 01 00 00 00       	mov    eax,0x1
c000b036:	31 d2                	xor    edx,edx
c000b038:	31 c9                	xor    ecx,ecx
c000b03a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b042:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b04a:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b050:	59                   	pop    ecx
c000b051:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c000b057:	5e                   	pop    esi
c000b058:	6a 01                	push   0x1
c000b05a:	68 d2 10 02 c0       	push   0xc00210d2
c000b05f:	e8 f3 d3 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c000b064:	5a                   	pop    edx
c000b065:	59                   	pop    ecx
c000b066:	53                   	push   ebx
c000b067:	50                   	push   eax
c000b068:	e8 b0 d5 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c000b06d:	c7 04 24 c8 22 02 c0 	mov    DWORD PTR [esp],0xc00222c8
c000b074:	e8 8c 41 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	83 ec 0c             	sub    esp,0xc
c000b07f:	6a 02                	push   0x2
c000b081:	e8 59 de 00 00       	call   c0018edf <blockTask(TaskState)>
c000b086:	83 c4 10             	add    esp,0x10
c000b089:	eb f1                	jmp    c000b07c <Computer::start()+0xf4>

c000b08b <firstTask()>:
c000b08b:	83 ec 18             	sub    esp,0x18
c000b08e:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c000b093:	50                   	push   eax
c000b094:	e8 ef fe ff ff       	call   c000af88 <Computer::start()>
c000b099:	90                   	nop

c000b09a <Computer::detectFeatures()>:
c000b09a:	55                   	push   ebp
c000b09b:	57                   	push   edi
c000b09c:	56                   	push   esi
c000b09d:	53                   	push   ebx
c000b09e:	83 ec 1c             	sub    esp,0x1c
c000b0a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0a5:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0ab:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0b1:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0b7:	e8 b0 52 ff ff       	call   c000036c <detectCPUID>
c000b0bc:	85 c0                	test   eax,eax
c000b0be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0c4:	0f 95 c2             	setne  dl
c000b0c7:	01 d2                	add    edx,edx
c000b0c9:	83 e0 fd             	and    eax,0xfffffffd
c000b0cc:	09 d0                	or     eax,edx
c000b0ce:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0d4:	a8 02                	test   al,0x2
c000b0d6:	75 4e                	jne    c000b126 <Computer::detectFeatures()+0x8c>
c000b0d8:	f6 05 a1 47 02 c0 04 	test   BYTE PTR ds:0xc00247a1,0x4
c000b0df:	74 0f                	je     c000b0f0 <Computer::detectFeatures()+0x56>
c000b0e1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0e7:	83 e0 fb             	and    eax,0xfffffffb
c000b0ea:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f0:	e8 d1 40 01 00       	call   c001f1c6 <x87Detect>
c000b0f5:	83 e0 01             	and    eax,0x1
c000b0f8:	c1 e0 04             	shl    eax,0x4
c000b0fb:	88 c2                	mov    dl,al
c000b0fd:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b103:	83 e0 ef             	and    eax,0xffffffef
c000b106:	09 d0                	or     eax,edx
c000b108:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10e:	a8 10                	test   al,0x10
c000b110:	0f 85 20 01 00 00    	jne    c000b236 <Computer::detectFeatures()+0x19c>
c000b116:	84 c0                	test   al,al
c000b118:	0f 88 3b 01 00 00    	js     c000b259 <Computer::detectFeatures()+0x1bf>
c000b11e:	83 c4 1c             	add    esp,0x1c
c000b121:	5b                   	pop    ebx
c000b122:	5e                   	pop    esi
c000b123:	5f                   	pop    edi
c000b124:	5d                   	pop    ebp
c000b125:	c3                   	ret    
c000b126:	83 ec 0c             	sub    esp,0xc
c000b129:	6a 20                	push   0x20
c000b12b:	e8 e1 96 00 00       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c000b130:	83 e0 01             	and    eax,0x1
c000b133:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b13a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b140:	83 e0 f7             	and    eax,0xfffffff7
c000b143:	09 d0                	or     eax,edx
c000b145:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b14b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b152:	e8 ba 96 00 00       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c000b157:	83 e0 01             	and    eax,0x1
c000b15a:	88 c2                	mov    dl,al
c000b15c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b162:	83 e0 fe             	and    eax,0xfffffffe
c000b165:	09 d0                	or     eax,edx
c000b167:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b16d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b174:	e8 98 96 00 00       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c000b179:	c1 e0 07             	shl    eax,0x7
c000b17c:	88 c2                	mov    dl,al
c000b17e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b184:	83 e0 7f             	and    eax,0x7f
c000b187:	09 d0                	or     eax,edx
c000b189:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b18f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b196:	e8 76 96 00 00       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c000b19b:	83 c4 10             	add    esp,0x10
c000b19e:	83 e0 01             	and    eax,0x1
c000b1a1:	c1 e0 05             	shl    eax,0x5
c000b1a4:	88 c2                	mov    dl,al
c000b1a6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1ac:	83 e0 df             	and    eax,0xffffffdf
c000b1af:	09 d0                	or     eax,edx
c000b1b1:	f7 05 a0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247a0,0x401
c000b1bb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1c1:	0f 84 b8 00 00 00    	je     c000b27f <Computer::detectFeatures()+0x1e5>
c000b1c7:	83 ec 0c             	sub    esp,0xc
c000b1ca:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1d0:	83 e1 fe             	and    ecx,0xfffffffe
c000b1d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1d7:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1dd:	50                   	push   eax
c000b1de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1e2:	55                   	push   ebp
c000b1e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1e7:	57                   	push   edi
c000b1e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1ec:	56                   	push   esi
c000b1ed:	68 00 00 00 80       	push   0x80000000
c000b1f2:	e8 97 95 00 00       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1f7:	83 c4 20             	add    esp,0x20
c000b1fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b201:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b205:	0f 86 cd fe ff ff    	jbe    c000b0d8 <Computer::detectFeatures()+0x3e>
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	55                   	push   ebp
c000b210:	57                   	push   edi
c000b211:	56                   	push   esi
c000b212:	68 01 00 00 80       	push   0x80000001
c000b217:	e8 72 95 00 00       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b21c:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b222:	83 c4 20             	add    esp,0x20
c000b225:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b22b:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b231:	e9 a2 fe ff ff       	jmp    c000b0d8 <Computer::detectFeatures()+0x3e>
c000b236:	e8 45 3f 01 00       	call   c001f180 <sseDetect>
c000b23b:	88 c2                	mov    dl,al
c000b23d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b243:	c1 e2 07             	shl    edx,0x7
c000b246:	83 e0 7f             	and    eax,0x7f
c000b249:	09 d0                	or     eax,edx
c000b24b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b251:	84 c0                	test   al,al
c000b253:	0f 89 c5 fe ff ff    	jns    c000b11e <Computer::detectFeatures()+0x84>
c000b259:	e8 12 3f 01 00       	call   c001f170 <avxDetect>
c000b25e:	83 e0 01             	and    eax,0x1
c000b261:	c1 e0 05             	shl    eax,0x5
c000b264:	88 c2                	mov    dl,al
c000b266:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b26c:	83 e0 df             	and    eax,0xffffffdf
c000b26f:	09 d0                	or     eax,edx
c000b271:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b277:	83 c4 1c             	add    esp,0x1c
c000b27a:	5b                   	pop    ebx
c000b27b:	5e                   	pop    esi
c000b27c:	5f                   	pop    edi
c000b27d:	5d                   	pop    ebp
c000b27e:	c3                   	ret    
c000b27f:	83 ec 0c             	sub    esp,0xc
c000b282:	68 00 02 00 00       	push   0x200
c000b287:	e8 85 95 00 00       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	e9 33 ff ff ff       	jmp    c000b1c7 <Computer::detectFeatures()+0x12d>

c000b294 <Computer::displayFeatures()>:
c000b294:	53                   	push   ebx
c000b295:	83 ec 14             	sub    esp,0x14
c000b298:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b29c:	68 f5 10 02 c0       	push   0xc00210f5
c000b2a1:	e8 5f 3f 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2ae:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2b5:	74 05                	je     c000b2bc <Computer::displayFeatures()+0x28>
c000b2b7:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2bc:	51                   	push   ecx
c000b2bd:	51                   	push   ecx
c000b2be:	50                   	push   eax
c000b2bf:	68 08 11 02 c0       	push   0xc0021108
c000b2c4:	e8 3c 3f 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b2c9:	83 c4 10             	add    esp,0x10
c000b2cc:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2d1:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2d8:	75 05                	jne    c000b2df <Computer::displayFeatures()+0x4b>
c000b2da:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2df:	52                   	push   edx
c000b2e0:	52                   	push   edx
c000b2e1:	50                   	push   eax
c000b2e2:	68 19 11 02 c0       	push   0xc0021119
c000b2e7:	e8 19 3f 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2f4:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2fb:	75 05                	jne    c000b302 <Computer::displayFeatures()+0x6e>
c000b2fd:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b302:	51                   	push   ecx
c000b303:	51                   	push   ecx
c000b304:	50                   	push   eax
c000b305:	68 2a 11 02 c0       	push   0xc002112a
c000b30a:	e8 f6 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b30f:	83 c4 10             	add    esp,0x10
c000b312:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b317:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b31e:	75 05                	jne    c000b325 <Computer::displayFeatures()+0x91>
c000b320:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b325:	52                   	push   edx
c000b326:	52                   	push   edx
c000b327:	50                   	push   eax
c000b328:	68 3b 11 02 c0       	push   0xc002113b
c000b32d:	e8 d3 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b332:	83 c4 10             	add    esp,0x10
c000b335:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b33a:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b341:	75 05                	jne    c000b348 <Computer::displayFeatures()+0xb4>
c000b343:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b348:	51                   	push   ecx
c000b349:	51                   	push   ecx
c000b34a:	50                   	push   eax
c000b34b:	68 4c 11 02 c0       	push   0xc002114c
c000b350:	e8 b0 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b35d:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b364:	75 05                	jne    c000b36b <Computer::displayFeatures()+0xd7>
c000b366:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b36b:	52                   	push   edx
c000b36c:	52                   	push   edx
c000b36d:	50                   	push   eax
c000b36e:	68 5d 11 02 c0       	push   0xc002115d
c000b373:	e8 8d 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b380:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b387:	75 05                	jne    c000b38e <Computer::displayFeatures()+0xfa>
c000b389:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b38e:	51                   	push   ecx
c000b38f:	51                   	push   ecx
c000b390:	50                   	push   eax
c000b391:	68 6e 11 02 c0       	push   0xc002116e
c000b396:	e8 6a 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3a3:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3aa:	78 05                	js     c000b3b1 <Computer::displayFeatures()+0x11d>
c000b3ac:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b3b1:	52                   	push   edx
c000b3b2:	52                   	push   edx
c000b3b3:	50                   	push   eax
c000b3b4:	68 7f 11 02 c0       	push   0xc002117f
c000b3b9:	e8 47 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3c6:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3cd:	0f 84 93 01 00 00    	je     c000b566 <Computer::displayFeatures()+0x2d2>
c000b3d3:	51                   	push   ecx
c000b3d4:	51                   	push   ecx
c000b3d5:	50                   	push   eax
c000b3d6:	68 90 11 02 c0       	push   0xc0021190
c000b3db:	e8 25 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3e8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3ef:	0f 84 67 01 00 00    	je     c000b55c <Computer::displayFeatures()+0x2c8>
c000b3f5:	52                   	push   edx
c000b3f6:	52                   	push   edx
c000b3f7:	50                   	push   eax
c000b3f8:	68 a1 11 02 c0       	push   0xc00211a1
c000b3fd:	e8 03 3e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b402:	83 c4 10             	add    esp,0x10
c000b405:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b40a:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b411:	0f 84 3b 01 00 00    	je     c000b552 <Computer::displayFeatures()+0x2be>
c000b417:	51                   	push   ecx
c000b418:	51                   	push   ecx
c000b419:	50                   	push   eax
c000b41a:	68 b2 11 02 c0       	push   0xc00211b2
c000b41f:	e8 e1 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b42c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b433:	0f 84 0f 01 00 00    	je     c000b548 <Computer::displayFeatures()+0x2b4>
c000b439:	52                   	push   edx
c000b43a:	52                   	push   edx
c000b43b:	50                   	push   eax
c000b43c:	68 c3 11 02 c0       	push   0xc00211c3
c000b441:	e8 bf 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b446:	83 c4 10             	add    esp,0x10
c000b449:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b44e:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b455:	0f 84 e3 00 00 00    	je     c000b53e <Computer::displayFeatures()+0x2aa>
c000b45b:	51                   	push   ecx
c000b45c:	51                   	push   ecx
c000b45d:	50                   	push   eax
c000b45e:	68 d4 11 02 c0       	push   0xc00211d4
c000b463:	e8 9d 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b470:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b477:	0f 84 b7 00 00 00    	je     c000b534 <Computer::displayFeatures()+0x2a0>
c000b47d:	52                   	push   edx
c000b47e:	52                   	push   edx
c000b47f:	50                   	push   eax
c000b480:	68 e5 11 02 c0       	push   0xc00211e5
c000b485:	e8 7b 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b48a:	83 c4 10             	add    esp,0x10
c000b48d:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b492:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b499:	0f 84 8b 00 00 00    	je     c000b52a <Computer::displayFeatures()+0x296>
c000b49f:	51                   	push   ecx
c000b4a0:	51                   	push   ecx
c000b4a1:	50                   	push   eax
c000b4a2:	68 f6 11 02 c0       	push   0xc00211f6
c000b4a7:	e8 59 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4b4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4bb:	78 05                	js     c000b4c2 <Computer::displayFeatures()+0x22e>
c000b4bd:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b4c2:	52                   	push   edx
c000b4c3:	52                   	push   edx
c000b4c4:	50                   	push   eax
c000b4c5:	68 07 12 02 c0       	push   0xc0021207
c000b4ca:	e8 36 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4d7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4de:	74 43                	je     c000b523 <Computer::displayFeatures()+0x28f>
c000b4e0:	51                   	push   ecx
c000b4e1:	51                   	push   ecx
c000b4e2:	50                   	push   eax
c000b4e3:	68 18 12 02 c0       	push   0xc0021218
c000b4e8:	e8 18 3d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b4ed:	83 c4 10             	add    esp,0x10
c000b4f0:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4f5:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4fc:	74 1e                	je     c000b51c <Computer::displayFeatures()+0x288>
c000b4fe:	52                   	push   edx
c000b4ff:	52                   	push   edx
c000b500:	50                   	push   eax
c000b501:	68 29 12 02 c0       	push   0xc0021229
c000b506:	e8 fa 3c 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b50b:	c7 44 24 20 a6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228a6
c000b513:	83 c4 18             	add    esp,0x18
c000b516:	5b                   	pop    ebx
c000b517:	e9 e9 3c 00 00       	jmp    c000f205 <Dbg::kprintf(char const*, ...)>
c000b51c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b521:	eb db                	jmp    c000b4fe <Computer::displayFeatures()+0x26a>
c000b523:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b528:	eb b6                	jmp    c000b4e0 <Computer::displayFeatures()+0x24c>
c000b52a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b52f:	e9 6b ff ff ff       	jmp    c000b49f <Computer::displayFeatures()+0x20b>
c000b534:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b539:	e9 3f ff ff ff       	jmp    c000b47d <Computer::displayFeatures()+0x1e9>
c000b53e:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b543:	e9 13 ff ff ff       	jmp    c000b45b <Computer::displayFeatures()+0x1c7>
c000b548:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b54d:	e9 e7 fe ff ff       	jmp    c000b439 <Computer::displayFeatures()+0x1a5>
c000b552:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b557:	e9 bb fe ff ff       	jmp    c000b417 <Computer::displayFeatures()+0x183>
c000b55c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b561:	e9 8f fe ff ff       	jmp    c000b3f5 <Computer::displayFeatures()+0x161>
c000b566:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b56b:	e9 63 fe ff ff       	jmp    c000b3d3 <Computer::displayFeatures()+0x13f>

c000b570 <Computer::rdmsr(unsigned int)>:
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b577:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b57e:	74 0a                	je     c000b58a <Computer::rdmsr(unsigned int)+0x1a>
c000b580:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b584:	0f 32                	rdmsr  
c000b586:	83 c4 0c             	add    esp,0xc
c000b589:	c3                   	ret    
c000b58a:	83 ec 0c             	sub    esp,0xc
c000b58d:	68 3a 12 02 c0       	push   0xc002123a
c000b592:	e8 9d a4 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000b597:	83 c4 10             	add    esp,0x10
c000b59a:	eb e4                	jmp    c000b580 <Computer::rdmsr(unsigned int)+0x10>

c000b59c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b59c:	57                   	push   edi
c000b59d:	56                   	push   esi
c000b59e:	52                   	push   edx
c000b59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5ab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b2:	74 0e                	je     c000b5c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5b8:	89 f0                	mov    eax,esi
c000b5ba:	89 fa                	mov    edx,edi
c000b5bc:	0f 30                	wrmsr  
c000b5be:	58                   	pop    eax
c000b5bf:	5e                   	pop    esi
c000b5c0:	5f                   	pop    edi
c000b5c1:	c3                   	ret    
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	68 40 12 02 c0       	push   0xc0021240
c000b5ca:	e8 65 a4 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000b5cf:	83 c4 10             	add    esp,0x10
c000b5d2:	eb e0                	jmp    c000b5b4 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5d4 <Computer::nmiEnabled()>:
c000b5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5d8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5de:	c3                   	ret    
c000b5df:	90                   	nop

c000b5e0 <Computer::readCMOS(unsigned char)>:
c000b5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5ef:	19 c0                	sbb    eax,eax
c000b5f1:	83 e0 80             	and    eax,0xffffff80
c000b5f4:	09 d0                	or     eax,edx
c000b5f6:	e6 70                	out    0x70,al
c000b5f8:	e4 71                	in     al,0x71
c000b5fa:	c3                   	ret    
c000b5fb:	90                   	nop

c000b5fc <Computer::enableNMI(bool)>:
c000b5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b604:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b60a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b612:	eb cc                	jmp    c000b5e0 <Computer::readCMOS(unsigned char)>

c000b614 <Computer::open(int, int, void*)>:
c000b614:	56                   	push   esi
c000b615:	53                   	push   ebx
c000b616:	83 ec 10             	sub    esp,0x10
c000b619:	f6 05 a0 47 02 c0 04 	test   BYTE PTR ds:0xc00247a0,0x4
c000b620:	0f 94 05 c0 3b 02 c0 	sete   BYTE PTR ds:0xc0023bc0
c000b627:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b62b:	68 68 22 00 00       	push   0x2268
c000b630:	e8 9b 3a 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000b635:	89 c6                	mov    esi,eax
c000b637:	89 04 24             	mov    DWORD PTR [esp],eax
c000b63a:	e8 bf 87 00 00       	call   c0013dfe <ACPI::ACPI()>
c000b63f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b645:	59                   	pop    ecx
c000b646:	58                   	pop    eax
c000b647:	56                   	push   esi
c000b648:	53                   	push   ebx
c000b649:	e8 cc 4f 00 00       	call   c001061a <Device::addChild(Device*)>
c000b64e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b651:	e8 44 fa ff ff       	call   c000b09a <Computer::detectFeatures()>
c000b656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b659:	e8 36 fc ff ff       	call   c000b294 <Computer::displayFeatures()>
c000b65e:	58                   	pop    eax
c000b65f:	5a                   	pop    edx
c000b660:	6a 01                	push   0x1
c000b662:	53                   	push   ebx
c000b663:	e8 94 ff ff ff       	call   c000b5fc <Computer::enableNMI(bool)>
c000b668:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b66f:	e8 5c 3a 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000b674:	89 c6                	mov    esi,eax
c000b676:	89 04 24             	mov    DWORD PTR [esp],eax
c000b679:	e8 5e 92 00 00       	call   c00148dc <CPU::CPU()>
c000b67e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b684:	59                   	pop    ecx
c000b685:	58                   	pop    eax
c000b686:	56                   	push   esi
c000b687:	53                   	push   ebx
c000b688:	e8 8d 4f 00 00       	call   c001061a <Device::addChild(Device*)>
c000b68d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b693:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b697:	8b 10                	mov    edx,DWORD PTR [eax]
c000b699:	51                   	push   ecx
c000b69a:	6a 00                	push   0x0
c000b69c:	6a 00                	push   0x0
c000b69e:	50                   	push   eax
c000b69f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6a2:	83 c4 20             	add    esp,0x20
c000b6a5:	e8 d8 54 00 00       	call   c0010b82 <setupFPU()>
c000b6aa:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6b0:	85 c0                	test   eax,eax
c000b6b2:	74 1e                	je     c000b6d2 <Computer::open(int, int, void*)+0xbe>
c000b6b4:	52                   	push   edx
c000b6b5:	52                   	push   edx
c000b6b6:	50                   	push   eax
c000b6b7:	53                   	push   ebx
c000b6b8:	e8 5d 4f 00 00       	call   c001061a <Device::addChild(Device*)>
c000b6bd:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6c5:	6a 00                	push   0x0
c000b6c7:	6a 00                	push   0x0
c000b6c9:	6a 00                	push   0x0
c000b6cb:	50                   	push   eax
c000b6cc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6cf:	83 c4 20             	add    esp,0x20
c000b6d2:	83 ec 0c             	sub    esp,0xc
c000b6d5:	68 8b b0 00 c0       	push   0xc000b08b
c000b6da:	e8 92 d5 00 00       	call   c0018c71 <setupMultitasking(void (*)())>
c000b6df:	83 c4 14             	add    esp,0x14
c000b6e2:	83 c8 ff             	or     eax,0xffffffff
c000b6e5:	5b                   	pop    ebx
c000b6e6:	5e                   	pop    esi
c000b6e7:	c3                   	ret    

c000b6e8 <Computer::disableNMI()>:
c000b6e8:	6a 00                	push   0x0
c000b6ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ee:	50                   	push   eax
c000b6ef:	e8 08 ff ff ff       	call   c000b5fc <Computer::enableNMI(bool)>
c000b6f4:	5a                   	pop    edx
c000b6f5:	59                   	pop    ecx
c000b6f6:	c3                   	ret    
c000b6f7:	90                   	nop

c000b6f8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b700:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b707:	19 c0                	sbb    eax,eax
c000b709:	83 e0 80             	and    eax,0xffffff80
c000b70c:	09 d0                	or     eax,edx
c000b70e:	e6 70                	out    0x70,al
c000b710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b714:	e6 71                	out    0x71,al
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <Computer::handleNMI()>:
c000b718:	56                   	push   esi
c000b719:	53                   	push   ebx
c000b71a:	83 ec 10             	sub    esp,0x10
c000b71d:	e4 92                	in     al,0x92
c000b71f:	89 c6                	mov    esi,eax
c000b721:	e4 61                	in     al,0x61
c000b723:	68 46 12 02 c0       	push   0xc0021246
c000b728:	88 c3                	mov    bl,al
c000b72a:	e8 d6 3a 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	83 e6 10             	and    esi,0x10
c000b735:	75 0d                	jne    c000b744 <Computer::handleNMI()+0x2c>
c000b737:	f6 c3 40             	test   bl,0x40
c000b73a:	75 1d                	jne    c000b759 <Computer::handleNMI()+0x41>
c000b73c:	84 db                	test   bl,bl
c000b73e:	78 2d                	js     c000b76d <Computer::handleNMI()+0x55>
c000b740:	58                   	pop    eax
c000b741:	5b                   	pop    ebx
c000b742:	5e                   	pop    esi
c000b743:	c3                   	ret    
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	68 57 12 02 c0       	push   0xc0021257
c000b74c:	e8 e3 a2 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	f6 c3 40             	test   bl,0x40
c000b757:	74 e3                	je     c000b73c <Computer::handleNMI()+0x24>
c000b759:	83 ec 0c             	sub    esp,0xc
c000b75c:	68 64 12 02 c0       	push   0xc0021264
c000b761:	e8 ce a2 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000b766:	83 c4 10             	add    esp,0x10
c000b769:	84 db                	test   bl,bl
c000b76b:	79 d3                	jns    c000b740 <Computer::handleNMI()+0x28>
c000b76d:	c7 44 24 10 6e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002126e
c000b775:	5a                   	pop    edx
c000b776:	5b                   	pop    ebx
c000b777:	5e                   	pop    esi
c000b778:	e9 b7 a2 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c000b77d:	90                   	nop

c000b77e <Computer::setDiskActivityLight(int, bool)>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b784:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b789:	77 1c                	ja     c000b7a7 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b78b:	e4 92                	in     al,0x92
c000b78d:	bb 40 00 00 00       	mov    ebx,0x40
c000b792:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b796:	89 da                	mov    edx,ebx
c000b798:	d3 e2                	shl    edx,cl
c000b79a:	83 f2 ff             	xor    edx,0xffffffff
c000b79d:	89 f1                	mov    ecx,esi
c000b79f:	21 d0                	and    eax,edx
c000b7a1:	d3 e3                	shl    ebx,cl
c000b7a3:	09 d8                	or     eax,ebx
c000b7a5:	e6 92                	out    0x92,al
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    

c000b7aa <GDTEntry::setBase(unsigned int)>:
c000b7aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7b2:	89 c1                	mov    ecx,eax
c000b7b4:	c1 e9 10             	shr    ecx,0x10
c000b7b7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7bb:	c1 e8 18             	shr    eax,0x18
c000b7be:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7c1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <GDTEntry::setLimit(unsigned int)>:
c000b7c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ce:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7d1:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7d4:	c1 e8 10             	shr    eax,0x10
c000b7d7:	83 e2 f0             	and    edx,0xfffffff0
c000b7da:	83 e0 0f             	and    eax,0xf
c000b7dd:	09 d0                	or     eax,edx
c000b7df:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <GDT::GDT()>:
c000b7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7f8:	90                   	nop
c000b7f9:	c3                   	ret    

c000b7fa <GDT::addEntry(GDTEntry)>:
c000b7fa:	53                   	push   ebx
c000b7fb:	83 ec 0c             	sub    esp,0xc
c000b7fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b804:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b80b:	52                   	push   edx
c000b80c:	50                   	push   eax
c000b80d:	68 a8 12 02 c0       	push   0xc00212a8
c000b812:	e8 ee 39 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000b817:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b81d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b821:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b825:	8d 50 01             	lea    edx,[eax+0x1]
c000b828:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b82c:	89 13                	mov    DWORD PTR [ebx],edx
c000b82e:	c1 e0 03             	shl    eax,0x3
c000b831:	83 c4 18             	add    esp,0x18
c000b834:	5b                   	pop    ebx
c000b835:	c3                   	ret    

c000b836 <GDT::getNumberOfEntries()>:
c000b836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b83a:	8b 00                	mov    eax,DWORD PTR [eax]
c000b83c:	c3                   	ret    
c000b83d:	90                   	nop

c000b83e <GDT::flush()>:
c000b83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b842:	83 c0 04             	add    eax,0x4
c000b845:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b848:	a3 92 47 02 c0       	mov    ds:0xc0024792,eax
c000b84d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b854:	66 89 15 90 47 02 c0 	mov    WORD PTR ds:0xc0024790,dx
c000b85b:	e9 80 4b ff ff       	jmp    c00003e0 <loadGDT>

c000b860 <GDT::setup()>:
c000b860:	55                   	push   ebp
c000b861:	57                   	push   edi
c000b862:	56                   	push   esi
c000b863:	53                   	push   ebx
c000b864:	83 ec 3c             	sub    esp,0x3c
c000b867:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b86b:	6a 00                	push   0x0
c000b86d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b871:	53                   	push   ebx
c000b872:	e8 33 ff ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b877:	6a 00                	push   0x0
c000b879:	53                   	push   ebx
c000b87a:	e8 47 ff ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b87f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b887:	6a 00                	push   0x0
c000b889:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b88d:	53                   	push   ebx
c000b88e:	e8 17 ff ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b893:	68 ff ff ff 00       	push   0xffffff
c000b898:	53                   	push   ebx
c000b899:	e8 28 ff ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b89e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8a2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8a7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8ac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8b0:	83 c4 20             	add    esp,0x20
c000b8b3:	6a 00                	push   0x0
c000b8b5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8b9:	53                   	push   ebx
c000b8ba:	e8 eb fe ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000b8bf:	68 ff ff ff 00       	push   0xffffff
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 fc fe ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000b8ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8d2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8db:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8e0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8e4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8e8:	89 d8                	mov    eax,ebx
c000b8ea:	80 cc 60             	or     ah,0x60
c000b8ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b8f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b8f9:	83 c4 0c             	add    esp,0xc
c000b8fc:	89 f8                	mov    eax,edi
c000b8fe:	80 cc 60             	or     ah,0x60
c000b901:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b905:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b909:	89 c7                	mov    edi,eax
c000b90b:	55                   	push   ebp
c000b90c:	e8 e9 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b918:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b91c:	55                   	push   ebp
c000b91d:	e8 d8 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b922:	83 c4 0c             	add    esp,0xc
c000b925:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b929:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b92d:	55                   	push   ebp
c000b92e:	e8 c7 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b933:	83 c4 0c             	add    esp,0xc
c000b936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b93a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b93e:	53                   	push   ebx
c000b93f:	51                   	push   ecx
c000b940:	55                   	push   ebp
c000b941:	e8 b4 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b946:	83 c4 0c             	add    esp,0xc
c000b949:	57                   	push   edi
c000b94a:	56                   	push   esi
c000b94b:	55                   	push   ebp
c000b94c:	e8 a9 fe ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000b951:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b954:	e8 e5 fe ff ff       	call   c000b83e <GDT::flush()>
c000b959:	83 c4 4c             	add    esp,0x4c
c000b95c:	5b                   	pop    ebx
c000b95d:	5e                   	pop    esi
c000b95e:	5f                   	pop    edi
c000b95f:	5d                   	pop    ebp
c000b960:	c3                   	ret    

c000b961 <idleFunction(void*)>:
c000b961:	53                   	push   ebx
c000b962:	83 ec 08             	sub    esp,0x8
c000b965:	e8 d5 d0 00 00       	call   c0018a3f <unlockScheduler()>
c000b96a:	e8 59 8f 00 00       	call   c00148c8 <thisCPU()>
c000b96f:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b976:	74 41                	je     c000b9b9 <idleFunction(void*)+0x58>
c000b978:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c000b97d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b984:	74 33                	je     c000b9b9 <idleFunction(void*)+0x58>
c000b986:	52                   	push   edx
c000b987:	31 db                	xor    ebx,ebx
c000b989:	52                   	push   edx
c000b98a:	68 e1 00 00 00       	push   0xe1
c000b98f:	50                   	push   eax
c000b990:	e8 db fb ff ff       	call   c000b570 <Computer::rdmsr(unsigned int)>
c000b995:	53                   	push   ebx
c000b996:	83 e0 02             	and    eax,0x2
c000b999:	50                   	push   eax
c000b99a:	68 e1 00 00 00       	push   0xe1
c000b99f:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c000b9a5:	e8 f2 fb ff ff       	call   c000b59c <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9aa:	83 c4 20             	add    esp,0x20
c000b9ad:	e8 46 48 ff ff       	call   c00001f8 <doTPAUSE>
c000b9b2:	e8 09 3e 01 00       	call   c001f7c0 <idleCommon()>
c000b9b7:	eb f4                	jmp    c000b9ad <idleFunction(void*)+0x4c>
c000b9b9:	fb                   	sti    
c000b9ba:	f4                   	hlt    
c000b9bb:	e8 00 3e 01 00       	call   c001f7c0 <idleCommon()>
c000b9c0:	eb f7                	jmp    c000b9b9 <idleFunction(void*)+0x58>

c000b9c2 <IDTEntry::IDTEntry(bool)>:
c000b9c2:	83 ec 04             	sub    esp,0x4
c000b9c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9c9:	88 04 24             	mov    BYTE PTR [esp],al
c000b9cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9d0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9da:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9e5:	83 e2 f0             	and    edx,0xfffffff0
c000b9e8:	83 ca 0e             	or     edx,0xe
c000b9eb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9f5:	83 e2 ef             	and    edx,0xffffffef
c000b9f8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9fb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b9ff:	74 04                	je     c000ba05 <IDTEntry::IDTEntry(bool)+0x43>
c000ba01:	b2 03                	mov    dl,0x3
c000ba03:	eb 02                	jmp    c000ba07 <IDTEntry::IDTEntry(bool)+0x45>
c000ba05:	b2 00                	mov    dl,0x0
c000ba07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0b:	83 e2 03             	and    edx,0x3
c000ba0e:	88 d1                	mov    cl,dl
c000ba10:	c1 e1 05             	shl    ecx,0x5
c000ba13:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba16:	83 e2 9f             	and    edx,0xffffff9f
c000ba19:	09 ca                	or     edx,ecx
c000ba1b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba22:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba25:	83 ca 80             	or     edx,0xffffff80
c000ba28:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2b:	90                   	nop
c000ba2c:	83 c4 04             	add    esp,0x4
c000ba2f:	c3                   	ret    

c000ba30 <IDTEntry::setOffset(unsigned int)>:
c000ba30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba38:	66 89 02             	mov    WORD PTR [edx],ax
c000ba3b:	c1 e8 10             	shr    eax,0x10
c000ba3e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba42:	c3                   	ret    
c000ba43:	90                   	nop

c000ba44 <IDT::IDT()>:
c000ba44:	90                   	nop
c000ba45:	c3                   	ret    

c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	83 c0 30             	add    eax,0x30
c000ba4d:	c3                   	ret    

c000ba4e <IDT::addEntry(IDTEntry, int)>:
c000ba4e:	53                   	push   ebx
c000ba4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba5f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba62:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba66:	5b                   	pop    ebx
c000ba67:	c3                   	ret    

c000ba68 <IDT::addEntry(int, void (*)(), bool)>:
c000ba68:	53                   	push   ebx
c000ba69:	83 ec 10             	sub    esp,0x10
c000ba6c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba71:	50                   	push   eax
c000ba72:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba76:	53                   	push   ebx
c000ba77:	e8 46 ff ff ff       	call   c000b9c2 <IDTEntry::IDTEntry(bool)>
c000ba7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba80:	53                   	push   ebx
c000ba81:	e8 aa ff ff ff       	call   c000ba30 <IDTEntry::setOffset(unsigned int)>
c000ba86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba96:	e8 b3 ff ff ff       	call   c000ba4e <IDT::addEntry(IDTEntry, int)>
c000ba9b:	83 c4 30             	add    esp,0x30
c000ba9e:	5b                   	pop    ebx
c000ba9f:	c3                   	ret    

c000baa0 <IDT::flush()>:
c000baa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa4:	66 c7 05 98 47 02 c0 ff 07 	mov    WORD PTR ds:0xc0024798,0x7ff
c000baad:	a3 9a 47 02 c0       	mov    ds:0xc002479a,eax
c000bab2:	0f 01 1d 98 47 02 c0 	lidtd  ds:0xc0024798
c000bab9:	c3                   	ret    

c000baba <IDT::setup()>:
c000baba:	57                   	push   edi
c000babb:	56                   	push   esi
c000babc:	53                   	push   ebx
c000babd:	83 ec 10             	sub    esp,0x10
c000bac0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bac4:	6a 00                	push   0x0
c000bac6:	68 00 04 00 c0       	push   0xc0000400
c000bacb:	6a 00                	push   0x0
c000bacd:	53                   	push   ebx
c000bace:	e8 95 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bad3:	6a 00                	push   0x0
c000bad5:	68 10 04 00 c0       	push   0xc0000410
c000bada:	6a 01                	push   0x1
c000badc:	53                   	push   ebx
c000badd:	e8 86 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bae2:	83 c4 20             	add    esp,0x20
c000bae5:	6a 00                	push   0x0
c000bae7:	68 1a 04 00 c0       	push   0xc000041a
c000baec:	6a 02                	push   0x2
c000baee:	53                   	push   ebx
c000baef:	e8 74 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000baf4:	6a 00                	push   0x0
c000baf6:	68 24 04 00 c0       	push   0xc0000424
c000bafb:	6a 03                	push   0x3
c000bafd:	53                   	push   ebx
c000bafe:	e8 65 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb03:	83 c4 20             	add    esp,0x20
c000bb06:	6a 00                	push   0x0
c000bb08:	68 2e 04 00 c0       	push   0xc000042e
c000bb0d:	6a 04                	push   0x4
c000bb0f:	53                   	push   ebx
c000bb10:	e8 53 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb15:	6a 00                	push   0x0
c000bb17:	68 38 04 00 c0       	push   0xc0000438
c000bb1c:	6a 05                	push   0x5
c000bb1e:	53                   	push   ebx
c000bb1f:	e8 44 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb24:	83 c4 20             	add    esp,0x20
c000bb27:	6a 00                	push   0x0
c000bb29:	68 42 04 00 c0       	push   0xc0000442
c000bb2e:	6a 06                	push   0x6
c000bb30:	53                   	push   ebx
c000bb31:	e8 32 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb36:	6a 00                	push   0x0
c000bb38:	68 4c 04 00 c0       	push   0xc000044c
c000bb3d:	6a 07                	push   0x7
c000bb3f:	53                   	push   ebx
c000bb40:	e8 23 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb45:	83 c4 20             	add    esp,0x20
c000bb48:	6a 00                	push   0x0
c000bb4a:	68 56 04 00 c0       	push   0xc0000456
c000bb4f:	6a 08                	push   0x8
c000bb51:	53                   	push   ebx
c000bb52:	e8 11 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb57:	6a 00                	push   0x0
c000bb59:	68 5e 04 00 c0       	push   0xc000045e
c000bb5e:	6a 09                	push   0x9
c000bb60:	53                   	push   ebx
c000bb61:	e8 02 ff ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb66:	83 c4 20             	add    esp,0x20
c000bb69:	6a 00                	push   0x0
c000bb6b:	68 68 04 00 c0       	push   0xc0000468
c000bb70:	6a 0a                	push   0xa
c000bb72:	53                   	push   ebx
c000bb73:	e8 f0 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb78:	6a 00                	push   0x0
c000bb7a:	68 70 04 00 c0       	push   0xc0000470
c000bb7f:	6a 0b                	push   0xb
c000bb81:	53                   	push   ebx
c000bb82:	e8 e1 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb87:	83 c4 20             	add    esp,0x20
c000bb8a:	6a 00                	push   0x0
c000bb8c:	68 78 04 00 c0       	push   0xc0000478
c000bb91:	6a 0c                	push   0xc
c000bb93:	53                   	push   ebx
c000bb94:	e8 cf fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bb99:	6a 00                	push   0x0
c000bb9b:	68 80 04 00 c0       	push   0xc0000480
c000bba0:	6a 0d                	push   0xd
c000bba2:	53                   	push   ebx
c000bba3:	e8 c0 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bba8:	83 c4 20             	add    esp,0x20
c000bbab:	6a 00                	push   0x0
c000bbad:	68 88 04 00 c0       	push   0xc0000488
c000bbb2:	6a 0e                	push   0xe
c000bbb4:	53                   	push   ebx
c000bbb5:	e8 ae fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbba:	6a 00                	push   0x0
c000bbbc:	68 90 04 00 c0       	push   0xc0000490
c000bbc1:	6a 0f                	push   0xf
c000bbc3:	53                   	push   ebx
c000bbc4:	e8 9f fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbc9:	83 c4 20             	add    esp,0x20
c000bbcc:	6a 00                	push   0x0
c000bbce:	68 9a 04 00 c0       	push   0xc000049a
c000bbd3:	6a 10                	push   0x10
c000bbd5:	53                   	push   ebx
c000bbd6:	e8 8d fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbdb:	6a 00                	push   0x0
c000bbdd:	68 a4 04 00 c0       	push   0xc00004a4
c000bbe2:	6a 11                	push   0x11
c000bbe4:	53                   	push   ebx
c000bbe5:	e8 7e fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbea:	83 c4 20             	add    esp,0x20
c000bbed:	6a 00                	push   0x0
c000bbef:	68 ae 04 00 c0       	push   0xc00004ae
c000bbf4:	6a 12                	push   0x12
c000bbf6:	53                   	push   ebx
c000bbf7:	e8 6c fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bbfc:	6a 01                	push   0x1
c000bbfe:	68 b8 04 00 c0       	push   0xc00004b8
c000bc03:	6a 60                	push   0x60
c000bc05:	53                   	push   ebx
c000bc06:	e8 5d fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc0b:	83 c4 20             	add    esp,0x20
c000bc0e:	6a 00                	push   0x0
c000bc10:	68 c2 04 00 c0       	push   0xc00004c2
c000bc15:	6a 20                	push   0x20
c000bc17:	53                   	push   ebx
c000bc18:	e8 4b fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc1d:	6a 00                	push   0x0
c000bc1f:	68 cc 04 00 c0       	push   0xc00004cc
c000bc24:	6a 21                	push   0x21
c000bc26:	53                   	push   ebx
c000bc27:	e8 3c fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc2c:	83 c4 20             	add    esp,0x20
c000bc2f:	6a 00                	push   0x0
c000bc31:	68 d6 04 00 c0       	push   0xc00004d6
c000bc36:	6a 22                	push   0x22
c000bc38:	53                   	push   ebx
c000bc39:	e8 2a fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc3e:	6a 00                	push   0x0
c000bc40:	68 e0 04 00 c0       	push   0xc00004e0
c000bc45:	6a 23                	push   0x23
c000bc47:	53                   	push   ebx
c000bc48:	e8 1b fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc4d:	83 c4 20             	add    esp,0x20
c000bc50:	6a 00                	push   0x0
c000bc52:	68 ea 04 00 c0       	push   0xc00004ea
c000bc57:	6a 24                	push   0x24
c000bc59:	53                   	push   ebx
c000bc5a:	e8 09 fe ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc5f:	6a 00                	push   0x0
c000bc61:	68 f4 04 00 c0       	push   0xc00004f4
c000bc66:	6a 25                	push   0x25
c000bc68:	53                   	push   ebx
c000bc69:	e8 fa fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc6e:	83 c4 20             	add    esp,0x20
c000bc71:	6a 00                	push   0x0
c000bc73:	68 fe 04 00 c0       	push   0xc00004fe
c000bc78:	6a 26                	push   0x26
c000bc7a:	53                   	push   ebx
c000bc7b:	e8 e8 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc80:	6a 00                	push   0x0
c000bc82:	68 08 05 00 c0       	push   0xc0000508
c000bc87:	6a 27                	push   0x27
c000bc89:	53                   	push   ebx
c000bc8a:	e8 d9 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bc8f:	83 c4 20             	add    esp,0x20
c000bc92:	6a 00                	push   0x0
c000bc94:	68 12 05 00 c0       	push   0xc0000512
c000bc99:	6a 28                	push   0x28
c000bc9b:	53                   	push   ebx
c000bc9c:	e8 c7 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bca1:	6a 00                	push   0x0
c000bca3:	68 1c 05 00 c0       	push   0xc000051c
c000bca8:	6a 29                	push   0x29
c000bcaa:	53                   	push   ebx
c000bcab:	e8 b8 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcb0:	83 c4 20             	add    esp,0x20
c000bcb3:	6a 00                	push   0x0
c000bcb5:	68 26 05 00 c0       	push   0xc0000526
c000bcba:	6a 2a                	push   0x2a
c000bcbc:	53                   	push   ebx
c000bcbd:	e8 a6 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcc2:	6a 00                	push   0x0
c000bcc4:	68 30 05 00 c0       	push   0xc0000530
c000bcc9:	6a 2b                	push   0x2b
c000bccb:	53                   	push   ebx
c000bccc:	e8 97 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcd1:	83 c4 20             	add    esp,0x20
c000bcd4:	6a 00                	push   0x0
c000bcd6:	68 3a 05 00 c0       	push   0xc000053a
c000bcdb:	6a 2c                	push   0x2c
c000bcdd:	53                   	push   ebx
c000bcde:	e8 85 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bce3:	6a 00                	push   0x0
c000bce5:	68 44 05 00 c0       	push   0xc0000544
c000bcea:	6a 2d                	push   0x2d
c000bcec:	53                   	push   ebx
c000bced:	e8 76 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bcf2:	83 c4 20             	add    esp,0x20
c000bcf5:	6a 00                	push   0x0
c000bcf7:	68 4e 05 00 c0       	push   0xc000054e
c000bcfc:	6a 2e                	push   0x2e
c000bcfe:	53                   	push   ebx
c000bcff:	e8 64 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd04:	6a 00                	push   0x0
c000bd06:	68 58 05 00 c0       	push   0xc0000558
c000bd0b:	6a 2f                	push   0x2f
c000bd0d:	53                   	push   ebx
c000bd0e:	e8 55 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd13:	83 c4 20             	add    esp,0x20
c000bd16:	6a 00                	push   0x0
c000bd18:	68 62 05 00 c0       	push   0xc0000562
c000bd1d:	6a 30                	push   0x30
c000bd1f:	53                   	push   ebx
c000bd20:	e8 43 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd25:	6a 00                	push   0x0
c000bd27:	68 6c 05 00 c0       	push   0xc000056c
c000bd2c:	6a 31                	push   0x31
c000bd2e:	53                   	push   ebx
c000bd2f:	e8 34 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd34:	83 c4 20             	add    esp,0x20
c000bd37:	6a 00                	push   0x0
c000bd39:	68 76 05 00 c0       	push   0xc0000576
c000bd3e:	6a 32                	push   0x32
c000bd40:	53                   	push   ebx
c000bd41:	e8 22 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd46:	6a 00                	push   0x0
c000bd48:	68 80 05 00 c0       	push   0xc0000580
c000bd4d:	6a 33                	push   0x33
c000bd4f:	53                   	push   ebx
c000bd50:	e8 13 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd55:	83 c4 20             	add    esp,0x20
c000bd58:	6a 00                	push   0x0
c000bd5a:	68 8a 05 00 c0       	push   0xc000058a
c000bd5f:	6a 34                	push   0x34
c000bd61:	53                   	push   ebx
c000bd62:	e8 01 fd ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd67:	6a 00                	push   0x0
c000bd69:	68 94 05 00 c0       	push   0xc0000594
c000bd6e:	6a 35                	push   0x35
c000bd70:	53                   	push   ebx
c000bd71:	e8 f2 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd76:	83 c4 20             	add    esp,0x20
c000bd79:	6a 00                	push   0x0
c000bd7b:	68 9e 05 00 c0       	push   0xc000059e
c000bd80:	6a 36                	push   0x36
c000bd82:	53                   	push   ebx
c000bd83:	e8 e0 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd88:	6a 00                	push   0x0
c000bd8a:	68 a8 05 00 c0       	push   0xc00005a8
c000bd8f:	6a 37                	push   0x37
c000bd91:	53                   	push   ebx
c000bd92:	e8 d1 fc ff ff       	call   c000ba68 <IDT::addEntry(int, void (*)(), bool)>
c000bd97:	83 c4 20             	add    esp,0x20
c000bd9a:	e8 d8 25 00 00       	call   c000e377 <Virt::getAKernelVAS()>
c000bd9f:	52                   	push   edx
c000bda0:	6a 03                	push   0x3
c000bda2:	6a 02                	push   0x2
c000bda4:	50                   	push   eax
c000bda5:	e8 0e 2c 00 00       	call   c000e9b8 <VAS::allocatePages(int, int)>
c000bdaa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdb1:	89 c6                	mov    esi,eax
c000bdb3:	e8 18 33 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000bdb8:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc1:	89 c7                	mov    edi,eax
c000bdc3:	e8 ee 1c 00 00       	call   c000dab6 <TSS::TSS()>
c000bdc8:	83 c4 0c             	add    esp,0xc
c000bdcb:	68 56 04 00 c0       	push   0xc0000456
c000bdd0:	56                   	push   esi
c000bdd1:	57                   	push   edi
c000bdd2:	e8 1f 1d 00 00       	call   c000daf6 <TSS::setup(unsigned long, unsigned long)>
c000bdd7:	59                   	pop    ecx
c000bdd8:	89 c6                	mov    esi,eax
c000bdda:	5f                   	pop    edi
c000bddb:	6a 00                	push   0x0
c000bddd:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bde1:	50                   	push   eax
c000bde2:	e8 db fb ff ff       	call   c000b9c2 <IDTEntry::IDTEntry(bool)>
c000bde7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdeb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdf0:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bdf6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bdfd:	80 ce 05             	or     dh,0x5
c000be00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be08:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be0f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be15:	e8 86 fc ff ff       	call   c000baa0 <IDT::flush()>
c000be1a:	83 c4 20             	add    esp,0x20
c000be1d:	5b                   	pop    ebx
c000be1e:	5e                   	pop    esi
c000be1f:	5f                   	pop    edi
c000be20:	c3                   	ret    

c000be21 <sbrk>:
c000be21:	55                   	push   ebp
c000be22:	57                   	push   edi
c000be23:	56                   	push   esi
c000be24:	53                   	push   ebx
c000be25:	83 ec 1c             	sub    esp,0x1c
c000be28:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be2c:	85 db                	test   ebx,ebx
c000be2e:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c000be33:	0f 84 e4 00 00 00    	je     c000bf1d <sbrk+0xfc>
c000be39:	78 3d                	js     c000be78 <sbrk+0x57>
c000be3b:	e8 88 8a 00 00       	call   c00148c8 <thisCPU()>
c000be40:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be46:	83 e0 01             	and    eax,0x1
c000be49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be4d:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c000be52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be56:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be5c:	89 d8                	mov    eax,ebx
c000be5e:	c1 f8 1f             	sar    eax,0x1f
c000be61:	25 ff 0f 00 00       	and    eax,0xfff
c000be66:	01 c3                	add    ebx,eax
c000be68:	c1 fb 0c             	sar    ebx,0xc
c000be6b:	89 df                	mov    edi,ebx
c000be6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be71:	be 00 00 00 00       	mov    esi,0x0
c000be76:	eb 2a                	jmp    c000bea2 <sbrk+0x81>
c000be78:	83 ec 08             	sub    esp,0x8
c000be7b:	53                   	push   ebx
c000be7c:	68 c4 12 02 c0       	push   0xc00212c4
c000be81:	e8 7f 33 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be8e:	e9 8a 00 00 00       	jmp    c000bf1d <sbrk+0xfc>
c000be93:	81 05 a0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023ba0,0x1000
c000be9d:	46                   	inc    esi
c000be9e:	39 f7                	cmp    edi,esi
c000bea0:	74 34                	je     c000bed6 <sbrk+0xb5>
c000bea2:	e8 d0 24 00 00       	call   c000e377 <Virt::getAKernelVAS()>
c000bea7:	89 c3                	mov    ebx,eax
c000bea9:	8b 2d a0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023ba0
c000beaf:	e8 f5 06 00 00       	call   c000c5a9 <Phys::allocatePage()>
c000beb4:	68 01 04 00 00       	push   0x401
c000beb9:	55                   	push   ebp
c000beba:	50                   	push   eax
c000bebb:	53                   	push   ebx
c000bebc:	e8 f5 29 00 00       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bec1:	83 c4 10             	add    esp,0x10
c000bec4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bec9:	74 c8                	je     c000be93 <sbrk+0x72>
c000becb:	8b 1d a0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ba0
c000bed1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bed4:	eb bd                	jmp    c000be93 <sbrk+0x72>
c000bed6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bedb:	74 48                	je     c000bf25 <sbrk+0x104>
c000bedd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bee1:	89 d3                	mov    ebx,edx
c000bee3:	c1 eb 0a             	shr    ebx,0xa
c000bee6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000beec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bef6:	c1 e0 0c             	shl    eax,0xc
c000bef9:	01 d0                	add    eax,edx
c000befb:	c1 e8 0a             	shr    eax,0xa
c000befe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf03:	2d 00 00 40 00       	sub    eax,0x400000
c000bf08:	39 c3                	cmp    ebx,eax
c000bf0a:	77 0d                	ja     c000bf19 <sbrk+0xf8>
c000bf0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf15:	39 d8                	cmp    eax,ebx
c000bf17:	73 f3                	jae    c000bf0c <sbrk+0xeb>
c000bf19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf1d:	83 c4 1c             	add    esp,0x1c
c000bf20:	5b                   	pop    ebx
c000bf21:	5e                   	pop    esi
c000bf22:	5f                   	pop    edi
c000bf23:	5d                   	pop    ebp
c000bf24:	c3                   	ret    
c000bf25:	e8 ab 38 01 00       	call   c001f7d5 <CPU::readCR3()>
c000bf2a:	83 ec 0c             	sub    esp,0xc
c000bf2d:	50                   	push   eax
c000bf2e:	e8 b4 38 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000bf33:	83 c4 10             	add    esp,0x10
c000bf36:	eb e1                	jmp    c000bf19 <sbrk+0xf8>

c000bf38 <mmap>:
c000bf38:	83 ec 18             	sub    esp,0x18
c000bf3b:	68 f4 12 02 c0       	push   0xc00212f4
c000bf40:	e8 ef 9a 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000bf45:	b8 00 00 00 00       	mov    eax,0x0
c000bf4a:	83 c4 1c             	add    esp,0x1c
c000bf4d:	c3                   	ret    

c000bf4e <munmap>:
c000bf4e:	83 ec 18             	sub    esp,0x18
c000bf51:	68 f9 12 02 c0       	push   0xc00212f9
c000bf56:	e8 d9 9a 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000bf5b:	b8 00 00 00 00       	mov    eax,0x0
c000bf60:	83 c4 1c             	add    esp,0x1c
c000bf63:	c3                   	ret    

c000bf64 <liballoc_lock()>:
c000bf64:	83 ec 0c             	sub    esp,0xc
c000bf67:	e8 d1 ca 00 00       	call   c0018a3d <lockScheduler()>
c000bf6c:	b8 00 00 00 00       	mov    eax,0x0
c000bf71:	83 c4 0c             	add    esp,0xc
c000bf74:	c3                   	ret    

c000bf75 <liballoc_unlock()>:
c000bf75:	83 ec 0c             	sub    esp,0xc
c000bf78:	e8 c2 ca 00 00       	call   c0018a3f <unlockScheduler()>
c000bf7d:	b8 00 00 00 00       	mov    eax,0x0
c000bf82:	83 c4 0c             	add    esp,0xc
c000bf85:	c3                   	ret    

c000bf86 <liballoc_alloc(int)>:
c000bf86:	83 ec 0c             	sub    esp,0xc
c000bf89:	e8 e9 23 00 00       	call   c000e377 <Virt::getAKernelVAS()>
c000bf8e:	83 ec 04             	sub    esp,0x4
c000bf91:	6a 01                	push   0x1
c000bf93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf97:	50                   	push   eax
c000bf98:	e8 1b 2a 00 00       	call   c000e9b8 <VAS::allocatePages(int, int)>
c000bf9d:	83 c4 1c             	add    esp,0x1c
c000bfa0:	c3                   	ret    

c000bfa1 <liballoc_free(void*, int)>:
c000bfa1:	83 ec 0c             	sub    esp,0xc
c000bfa4:	e8 ce 23 00 00       	call   c000e377 <Virt::getAKernelVAS()>
c000bfa9:	83 ec 08             	sub    esp,0x8
c000bfac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb0:	50                   	push   eax
c000bfb1:	e8 a2 26 00 00       	call   c000e658 <VAS::freeAllocatedPages(unsigned long)>
c000bfb6:	b8 00 00 00 00       	mov    eax,0x0
c000bfbb:	83 c4 1c             	add    esp,0x1c
c000bfbe:	c3                   	ret    

c000bfbf <realloc>:
c000bfbf:	83 ec 14             	sub    esp,0x14
c000bfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfca:	e8 64 54 ff ff       	call   c0001433 <dlrealloc>
c000bfcf:	83 c4 1c             	add    esp,0x1c
c000bfd2:	c3                   	ret    

c000bfd3 <malloc>:
c000bfd3:	83 ec 18             	sub    esp,0x18
c000bfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfda:	e8 17 4f ff ff       	call   c0000ef6 <dlmalloc>
c000bfdf:	83 c4 1c             	add    esp,0x1c
c000bfe2:	c3                   	ret    

c000bfe3 <free>:
c000bfe3:	83 ec 18             	sub    esp,0x18
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	e8 a9 4b ff ff       	call   c0000b98 <dlfree>
c000bfef:	83 c4 1c             	add    esp,0x1c
c000bff2:	c3                   	ret    

c000bff3 <rfree>:
c000bff3:	83 ec 18             	sub    esp,0x18
c000bff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffa:	e8 e4 ff ff ff       	call   c000bfe3 <free>
c000bfff:	83 c4 1c             	add    esp,0x1c
c000c002:	c3                   	ret    

c000c003 <calloc>:
c000c003:	56                   	push   esi
c000c004:	53                   	push   ebx
c000c005:	83 ec 10             	sub    esp,0x10
c000c008:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c00c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c011:	53                   	push   ebx
c000c012:	e8 bc ff ff ff       	call   c000bfd3 <malloc>
c000c017:	89 c6                	mov    esi,eax
c000c019:	83 c4 0c             	add    esp,0xc
c000c01c:	53                   	push   ebx
c000c01d:	6a 00                	push   0x0
c000c01f:	50                   	push   eax
c000c020:	e8 90 46 ff ff       	call   c00006b5 <memset>
c000c025:	89 f0                	mov    eax,esi
c000c027:	83 c4 14             	add    esp,0x14
c000c02a:	5b                   	pop    ebx
c000c02b:	5e                   	pop    esi
c000c02c:	c3                   	ret    

c000c02d <hwTextMode_loadInData(VgaText*)>:
c000c02d:	57                   	push   edi
c000c02e:	56                   	push   esi
c000c02f:	53                   	push   ebx
c000c030:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c034:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c03a:	85 c0                	test   eax,eax
c000c03c:	7e 30                	jle    c000c06e <hwTextMode_loadInData(VgaText*)+0x41>
c000c03e:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c041:	31 f6                	xor    esi,esi
c000c043:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c046:	31 c0                	xor    eax,eax
c000c048:	c1 e1 05             	shl    ecx,0x5
c000c04b:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c051:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c055:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c059:	40                   	inc    eax
c000c05a:	83 f8 50             	cmp    eax,0x50
c000c05d:	75 f2                	jne    c000c051 <hwTextMode_loadInData(VgaText*)+0x24>
c000c05f:	46                   	inc    esi
c000c060:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c066:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c06c:	7f d5                	jg     c000c043 <hwTextMode_loadInData(VgaText*)+0x16>
c000c06e:	5b                   	pop    ebx
c000c06f:	5e                   	pop    esi
c000c070:	5f                   	pop    edi
c000c071:	c3                   	ret    

c000c072 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c072:	56                   	push   esi
c000c073:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c078:	53                   	push   ebx
c000c079:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c07d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c081:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c087:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c08d:	c1 e0 04             	shl    eax,0x4
c000c090:	83 e6 0f             	and    esi,0xf
c000c093:	25 ff 00 00 00       	and    eax,0xff
c000c098:	83 c2 02             	add    edx,0x2
c000c09b:	09 f0                	or     eax,esi
c000c09d:	41                   	inc    ecx
c000c09e:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0a2:	c1 e0 08             	shl    eax,0x8
c000c0a5:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0ab:	09 f0                	or     eax,esi
c000c0ad:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0b1:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0b7:	75 c8                	jne    c000c081 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0b9:	5b                   	pop    ebx
c000c0ba:	5e                   	pop    esi
c000c0bb:	c3                   	ret    

c000c0bc <hwTextMode_showCursor(VgaText*, bool)>:
c000c0bc:	56                   	push   esi
c000c0bd:	53                   	push   ebx
c000c0be:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0c3:	74 38                	je     c000c0fd <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0c5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0ca:	b0 0a                	mov    al,0xa
c000c0cc:	89 da                	mov    edx,ebx
c000c0ce:	ee                   	out    dx,al
c000c0cf:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0d4:	89 ca                	mov    edx,ecx
c000c0d6:	ec                   	in     al,dx
c000c0d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0db:	b2 0f                	mov    dl,0xf
c000c0dd:	83 e0 c0             	and    eax,0xffffffc0
c000c0e0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0e6:	09 d0                	or     eax,edx
c000c0e8:	89 ca                	mov    edx,ecx
c000c0ea:	ee                   	out    dx,al
c000c0eb:	b0 0b                	mov    al,0xb
c000c0ed:	89 da                	mov    edx,ebx
c000c0ef:	ee                   	out    dx,al
c000c0f0:	89 ca                	mov    edx,ecx
c000c0f2:	ec                   	in     al,dx
c000c0f3:	83 e0 e0             	and    eax,0xffffffe0
c000c0f6:	83 c8 0f             	or     eax,0xf
c000c0f9:	ee                   	out    dx,al
c000c0fa:	5b                   	pop    ebx
c000c0fb:	5e                   	pop    esi
c000c0fc:	c3                   	ret    
c000c0fd:	b0 0a                	mov    al,0xa
c000c0ff:	ba d4 03 00 00       	mov    edx,0x3d4
c000c104:	ee                   	out    dx,al
c000c105:	b0 20                	mov    al,0x20
c000c107:	ba d5 03 00 00       	mov    edx,0x3d5
c000c10c:	ee                   	out    dx,al
c000c10d:	5b                   	pop    ebx
c000c10e:	5e                   	pop    esi
c000c10f:	c3                   	ret    

c000c110 <hwTextMode_update(VgaText*)>:
c000c110:	c3                   	ret    

c000c111 <hwTextMode_updateCursor(VgaText*)>:
c000c111:	56                   	push   esi
c000c112:	b9 19 00 00 00       	mov    ecx,0x19
c000c117:	53                   	push   ebx
c000c118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c11c:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c122:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c128:	29 d1                	sub    ecx,edx
c000c12a:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c130:	01 d9                	add    ecx,ebx
c000c132:	b0 0f                	mov    al,0xf
c000c134:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c137:	c1 e1 04             	shl    ecx,0x4
c000c13a:	01 f1                	add    ecx,esi
c000c13c:	be d4 03 00 00       	mov    esi,0x3d4
c000c141:	89 f2                	mov    edx,esi
c000c143:	ee                   	out    dx,al
c000c144:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c149:	88 c8                	mov    al,cl
c000c14b:	89 da                	mov    edx,ebx
c000c14d:	ee                   	out    dx,al
c000c14e:	b0 0e                	mov    al,0xe
c000c150:	89 f2                	mov    edx,esi
c000c152:	ee                   	out    dx,al
c000c153:	89 c8                	mov    eax,ecx
c000c155:	89 da                	mov    edx,ebx
c000c157:	66 c1 e8 08          	shr    ax,0x8
c000c15b:	ee                   	out    dx,al
c000c15c:	5b                   	pop    ebx
c000c15d:	5e                   	pop    esi
c000c15e:	c3                   	ret    

c000c15f <hwTextMode_disableBlink(VgaText*, bool)>:
c000c15f:	ba da 03 00 00       	mov    edx,0x3da
c000c164:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c169:	75 18                	jne    c000c183 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c16b:	ec                   	in     al,dx
c000c16c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c171:	b0 30                	mov    al,0x30
c000c173:	89 ca                	mov    edx,ecx
c000c175:	ee                   	out    dx,al
c000c176:	ba c1 03 00 00       	mov    edx,0x3c1
c000c17b:	ec                   	in     al,dx
c000c17c:	83 c8 08             	or     eax,0x8
c000c17f:	89 ca                	mov    edx,ecx
c000c181:	ee                   	out    dx,al
c000c182:	c3                   	ret    
c000c183:	ec                   	in     al,dx
c000c184:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c189:	b0 30                	mov    al,0x30
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c193:	ec                   	in     al,dx
c000c194:	83 e0 f7             	and    eax,0xfffffff7
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	c3                   	ret    

c000c19b <hwTextMode_scrollScreen(VgaText*)>:
c000c19b:	55                   	push   ebp
c000c19c:	bd 02 00 00 00       	mov    ebp,0x2
c000c1a1:	57                   	push   edi
c000c1a2:	56                   	push   esi
c000c1a3:	53                   	push   ebx
c000c1a4:	83 ec 1c             	sub    esp,0x1c
c000c1a7:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1b3:	31 c0                	xor    eax,eax
c000c1b5:	eb 0b                	jmp    c000c1c2 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1b7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1bd:	74 58                	je     c000c217 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1bf:	43                   	inc    ebx
c000c1c0:	89 f0                	mov    eax,esi
c000c1c2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1c8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1ce:	88 13                	mov    BYTE PTR [ebx],dl
c000c1d0:	8d 70 01             	lea    esi,[eax+0x1]
c000c1d3:	83 fd 18             	cmp    ebp,0x18
c000c1d6:	75 df                	jne    c000c1b7 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1d8:	a8 01                	test   al,0x1
c000c1da:	75 13                	jne    c000c1ef <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1dc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1df:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1e5:	75 d8                	jne    c000c1bf <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1e7:	83 c4 1c             	add    esp,0x1c
c000c1ea:	5b                   	pop    ebx
c000c1eb:	5e                   	pop    esi
c000c1ec:	5f                   	pop    edi
c000c1ed:	5d                   	pop    ebp
c000c1ee:	c3                   	ret    
c000c1ef:	52                   	push   edx
c000c1f0:	31 c0                	xor    eax,eax
c000c1f2:	52                   	push   edx
c000c1f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c1f7:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c1fd:	50                   	push   eax
c000c1fe:	31 c0                	xor    eax,eax
c000c200:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c204:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c20a:	50                   	push   eax
c000c20b:	e8 84 0b 00 00       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	88 07                	mov    BYTE PTR [edi],al
c000c215:	eb c8                	jmp    c000c1df <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c21b:	45                   	inc    ebp
c000c21c:	05 a0 00 00 00       	add    eax,0xa0
c000c221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c225:	eb 88                	jmp    c000c1af <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c227 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c227:	56                   	push   esi
c000c228:	31 c0                	xor    eax,eax
c000c22a:	53                   	push   ebx
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c232:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c236:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c23a:	50                   	push   eax
c000c23b:	31 c0                	xor    eax,eax
c000c23d:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c241:	50                   	push   eax
c000c242:	e8 4d 0b 00 00       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000c247:	5a                   	pop    edx
c000c248:	25 ff 00 00 00       	and    eax,0xff
c000c24d:	59                   	pop    ecx
c000c24e:	50                   	push   eax
c000c24f:	89 f0                	mov    eax,esi
c000c251:	0f be f0             	movsx  esi,al
c000c254:	56                   	push   esi
c000c255:	e8 e0 0b 00 00       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000c25a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c25e:	ba 19 00 00 00       	mov    edx,0x19
c000c263:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c269:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c26c:	29 f2                	sub    edx,esi
c000c26e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c272:	c1 e1 04             	shl    ecx,0x4
c000c275:	8d 14 92             	lea    edx,[edx+edx*4]
c000c278:	01 d9                	add    ecx,ebx
c000c27a:	c1 e2 04             	shl    edx,0x4
c000c27d:	01 ca                	add    edx,ecx
c000c27f:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c287:	83 c4 14             	add    esp,0x14
c000c28a:	5b                   	pop    ebx
c000c28b:	5e                   	pop    esi
c000c28c:	c3                   	ret    

c000c28d <setupTextMode()>:
c000c28d:	c7 05 38 48 02 c0 5f c1 00 c0 	mov    DWORD PTR ds:0xc0024838,0xc000c15f
c000c297:	c7 05 24 48 02 c0 2d c0 00 c0 	mov    DWORD PTR ds:0xc0024824,0xc000c02d
c000c2a1:	c7 05 20 48 02 c0 72 c0 00 c0 	mov    DWORD PTR ds:0xc0024820,0xc000c072
c000c2ab:	c7 05 2c 48 02 c0 9b c1 00 c0 	mov    DWORD PTR ds:0xc002482c,0xc000c19b
c000c2b5:	c7 05 34 48 02 c0 bc c0 00 c0 	mov    DWORD PTR ds:0xc0024834,0xc000c0bc
c000c2bf:	c7 05 28 48 02 c0 10 c1 00 c0 	mov    DWORD PTR ds:0xc0024828,0xc000c110
c000c2c9:	c7 05 30 48 02 c0 11 c1 00 c0 	mov    DWORD PTR ds:0xc0024830,0xc000c111
c000c2d3:	c7 05 3c 48 02 c0 27 c2 00 c0 	mov    DWORD PTR ds:0xc002483c,0xc000c227
c000c2dd:	c3                   	ret    

c000c2de <kernel_main>:
c000c2de:	57                   	push   edi
c000c2df:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2e4:	56                   	push   esi
c000c2e5:	31 f6                	xor    esi,esi
c000c2e7:	53                   	push   ebx
c000c2e8:	83 ec 10             	sub    esp,0x10
c000c2eb:	e8 fe 08 00 00       	call   c000cbee <installVgaTextImplementation()>
c000c2f0:	e8 98 ff ff ff       	call   c000c28d <setupTextMode()>
c000c2f5:	89 f0                	mov    eax,esi
c000c2f7:	89 fa                	mov    edx,edi
c000c2f9:	ee                   	out    dx,al
c000c2fa:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c2ff:	b0 80                	mov    al,0x80
c000c301:	89 da                	mov    edx,ebx
c000c303:	ee                   	out    dx,al
c000c304:	b1 03                	mov    cl,0x3
c000c306:	ba f8 03 00 00       	mov    edx,0x3f8
c000c30b:	88 c8                	mov    al,cl
c000c30d:	ee                   	out    dx,al
c000c30e:	89 f0                	mov    eax,esi
c000c310:	89 fa                	mov    edx,edi
c000c312:	ee                   	out    dx,al
c000c313:	88 c8                	mov    al,cl
c000c315:	89 da                	mov    edx,ebx
c000c317:	ee                   	out    dx,al
c000c318:	b0 c7                	mov    al,0xc7
c000c31a:	ba fa 03 00 00       	mov    edx,0x3fa
c000c31f:	ee                   	out    dx,al
c000c320:	b0 0b                	mov    al,0xb
c000c322:	ba fc 03 00 00       	mov    edx,0x3fc
c000c327:	ee                   	out    dx,al
c000c328:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c32d:	83 ec 0c             	sub    esp,0xc
c000c330:	05 ff 0f 00 00       	add    eax,0xfff
c000c335:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c33a:	50                   	push   eax
c000c33b:	e8 6d 03 00 00       	call   c000c6ad <Phys::physicalMemorySetup(unsigned int)>
c000c340:	e8 b6 1f 00 00       	call   c000e2fb <Virt::virtualMemorySetup()>
c000c345:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c354:	75 0e                	jne    c000c364 <kernel_main+0x86>
c000c356:	89 d8                	mov    eax,ebx
c000c358:	25 48 03 00 00       	and    eax,0x348
c000c35d:	3d 00 03 00 00       	cmp    eax,0x300
c000c362:	74 10                	je     c000c374 <kernel_main+0x96>
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	68 a7 28 02 c0       	push   0xc00228a7
c000c36c:	e8 c3 96 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000c371:	83 c4 10             	add    esp,0x10
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	89 1d a0 47 02 c0    	mov    DWORD PTR ds:0xc00247a0,ebx
c000c37d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c381:	53                   	push   ebx
c000c382:	e8 11 21 00 00       	call   c000e498 <VAS::VAS()>
c000c387:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000c38d:	e8 8e 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c392:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c399:	e8 32 2d 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000c39e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a1:	89 c6                	mov    esi,eax
c000c3a3:	e8 78 ea ff ff       	call   c000ae20 <Computer::Computer()>
c000c3a8:	6a 00                	push   0x0
c000c3aa:	6a 00                	push   0x0
c000c3ac:	89 35 88 47 02 c0    	mov    DWORD PTR ds:0xc0024788,esi
c000c3b2:	6a 00                	push   0x0
c000c3b4:	56                   	push   esi
c000c3b5:	e8 5a f2 ff ff       	call   c000b614 <Computer::open(int, int, void*)>
c000c3ba:	83 c4 14             	add    esp,0x14
c000c3bd:	53                   	push   ebx
c000c3be:	e8 87 23 00 00       	call   c000e74a <VAS::~VAS()>
c000c3c3:	c7 04 24 00 13 02 c0 	mov    DWORD PTR [esp],0xc0021300
c000c3ca:	e8 65 96 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000c3cf:	83 c4 20             	add    esp,0x20
c000c3d2:	5b                   	pop    ebx
c000c3d3:	5e                   	pop    esi
c000c3d4:	5f                   	pop    edi
c000c3d5:	c3                   	ret    

c000c3d6 <Phys::allocateDMA(unsigned long)>:
c000c3d6:	57                   	push   edi
c000c3d7:	31 d2                	xor    edx,edx
c000c3d9:	56                   	push   esi
c000c3da:	31 ff                	xor    edi,edi
c000c3dc:	53                   	push   ebx
c000c3dd:	31 c9                	xor    ecx,ecx
c000c3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e3:	31 f6                	xor    esi,esi
c000c3e5:	05 ff 0f 00 00       	add    eax,0xfff
c000c3ea:	c1 e8 0c             	shr    eax,0xc
c000c3ed:	eb 17                	jmp    c000c406 <Phys::allocateDMA(unsigned long)+0x30>
c000c3ef:	85 c9                	test   ecx,ecx
c000c3f1:	75 04                	jne    c000c3f7 <Phys::allocateDMA(unsigned long)+0x21>
c000c3f3:	89 d7                	mov    edi,edx
c000c3f5:	89 d6                	mov    esi,edx
c000c3f7:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c3fa:	39 d8                	cmp    eax,ebx
c000c3fc:	74 1f                	je     c000c41d <Phys::allocateDMA(unsigned long)+0x47>
c000c3fe:	42                   	inc    edx
c000c3ff:	89 d9                	mov    ecx,ebx
c000c401:	83 fa 2f             	cmp    edx,0x2f
c000c404:	7f 11                	jg     c000c417 <Phys::allocateDMA(unsigned long)+0x41>
c000c406:	80 ba e0 47 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb820],0x0
c000c40d:	74 e0                	je     c000c3ef <Phys::allocateDMA(unsigned long)+0x19>
c000c40f:	31 c9                	xor    ecx,ecx
c000c411:	42                   	inc    edx
c000c412:	83 fa 2f             	cmp    edx,0x2f
c000c415:	7e ef                	jle    c000c406 <Phys::allocateDMA(unsigned long)+0x30>
c000c417:	5b                   	pop    ebx
c000c418:	31 c0                	xor    eax,eax
c000c41a:	5e                   	pop    esi
c000c41b:	5f                   	pop    edi
c000c41c:	c3                   	ret    
c000c41d:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c421:	89 d3                	mov    ebx,edx
c000c423:	c1 fb 1f             	sar    ebx,0x1f
c000c426:	83 e3 0f             	and    ebx,0xf
c000c429:	01 d3                	add    ebx,edx
c000c42b:	89 f2                	mov    edx,esi
c000c42d:	c1 fb 04             	sar    ebx,0x4
c000c430:	c1 fa 04             	sar    edx,0x4
c000c433:	39 da                	cmp    edx,ebx
c000c435:	75 30                	jne    c000c467 <Phys::allocateDMA(unsigned long)+0x91>
c000c437:	85 c0                	test   eax,eax
c000c439:	74 1b                	je     c000c456 <Phys::allocateDMA(unsigned long)+0x80>
c000c43b:	bf e0 47 02 c0       	mov    edi,0xc00247e0
c000c440:	8d 96 e0 47 02 c0    	lea    edx,[esi-0x3ffdb820]
c000c446:	83 f7 ff             	xor    edi,0xffffffff
c000c449:	29 f7                	sub    edi,esi
c000c44b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c44e:	42                   	inc    edx
c000c44f:	8d 04 17             	lea    eax,[edi+edx*1]
c000c452:	39 c1                	cmp    ecx,eax
c000c454:	7f f5                	jg     c000c44b <Phys::allocateDMA(unsigned long)+0x75>
c000c456:	85 db                	test   ebx,ebx
c000c458:	74 13                	je     c000c46d <Phys::allocateDMA(unsigned long)+0x97>
c000c45a:	5b                   	pop    ebx
c000c45b:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c461:	c1 e0 0c             	shl    eax,0xc
c000c464:	5e                   	pop    esi
c000c465:	5f                   	pop    edi
c000c466:	c3                   	ret    
c000c467:	89 fa                	mov    edx,edi
c000c469:	31 c9                	xor    ecx,ecx
c000c46b:	eb a4                	jmp    c000c411 <Phys::allocateDMA(unsigned long)+0x3b>
c000c46d:	c1 e6 0c             	shl    esi,0xc
c000c470:	5b                   	pop    ebx
c000c471:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c477:	5e                   	pop    esi
c000c478:	5f                   	pop    edi
c000c479:	c3                   	ret    

c000c47a <Phys::freeDMA(unsigned long, unsigned long)>:
c000c47a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c482:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c488:	c1 e9 0c             	shr    ecx,0xc
c000c48b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c490:	76 25                	jbe    c000c4b7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c492:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c497:	c1 e8 0c             	shr    eax,0xc
c000c49a:	8d 50 10             	lea    edx,[eax+0x10]
c000c49d:	85 c9                	test   ecx,ecx
c000c49f:	74 15                	je     c000c4b6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4a1:	8d 82 e0 47 02 c0    	lea    eax,[edx-0x3ffdb820]
c000c4a7:	8d 94 11 e0 47 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb820]
c000c4ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4b1:	40                   	inc    eax
c000c4b2:	39 d0                	cmp    eax,edx
c000c4b4:	75 f8                	jne    c000c4ae <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4b6:	c3                   	ret    
c000c4b7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4bd:	c1 ea 0c             	shr    edx,0xc
c000c4c0:	eb db                	jmp    c000c49d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4c2 <Phys::setPageState(unsigned long, bool)>:
c000c4c2:	56                   	push   esi
c000c4c3:	ba 01 00 00 00       	mov    edx,0x1
c000c4c8:	53                   	push   ebx
c000c4c9:	8b 35 a4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023ba4
c000c4cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4d7:	89 c8                	mov    eax,ecx
c000c4d9:	83 e1 07             	and    ecx,0x7
c000c4dc:	c1 e8 03             	shr    eax,0x3
c000c4df:	01 c6                	add    esi,eax
c000c4e1:	d3 e2                	shl    edx,cl
c000c4e3:	83 f2 ff             	xor    edx,0xffffffff
c000c4e6:	20 16                	and    BYTE PTR [esi],dl
c000c4e8:	8b 15 a4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023ba4
c000c4ee:	01 d0                	add    eax,edx
c000c4f0:	d3 e3                	shl    ebx,cl
c000c4f2:	8a 08                	mov    cl,BYTE PTR [eax]
c000c4f4:	09 d9                	or     ecx,ebx
c000c4f6:	88 08                	mov    BYTE PTR [eax],cl
c000c4f8:	5b                   	pop    ebx
c000c4f9:	5e                   	pop    esi
c000c4fa:	c3                   	ret    

c000c4fb <Phys::getPageState(unsigned long)>:
c000c4fb:	53                   	push   ebx
c000c4fc:	8b 15 a4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023ba4
c000c502:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c506:	31 db                	xor    ebx,ebx
c000c508:	89 c8                	mov    eax,ecx
c000c50a:	83 e1 07             	and    ecx,0x7
c000c50d:	c1 e8 03             	shr    eax,0x3
c000c510:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c513:	89 d8                	mov    eax,ebx
c000c515:	5b                   	pop    ebx
c000c516:	d3 f8                	sar    eax,cl
c000c518:	83 e0 01             	and    eax,0x1
c000c51b:	c3                   	ret    

c000c51c <Phys::freePage(unsigned long)>:
c000c51c:	53                   	push   ebx
c000c51d:	83 ec 08             	sub    esp,0x8
c000c520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c524:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c52a:	76 5a                	jbe    c000c586 <Phys::freePage(unsigned long)+0x6a>
c000c52c:	c1 eb 0c             	shr    ebx,0xc
c000c52f:	53                   	push   ebx
c000c530:	e8 c6 ff ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c535:	5a                   	pop    edx
c000c536:	84 c0                	test   al,al
c000c538:	74 5e                	je     c000c598 <Phys::freePage(unsigned long)+0x7c>
c000c53a:	a1 cc 47 02 c0       	mov    eax,ds:0xc00247cc
c000c53f:	48                   	dec    eax
c000c540:	a3 cc 47 02 c0       	mov    ds:0xc00247cc,eax
c000c545:	8d 04 80             	lea    eax,[eax+eax*4]
c000c548:	8d 04 80             	lea    eax,[eax+eax*4]
c000c54b:	c1 e0 02             	shl    eax,0x2
c000c54e:	89 c2                	mov    edx,eax
c000c550:	c1 fa 1f             	sar    edx,0x1f
c000c553:	f7 3d d0 47 02 c0    	idiv   DWORD PTR ds:0xc00247d0
c000c559:	39 05 c8 47 02 c0    	cmp    DWORD PTR ds:0xc00247c8,eax
c000c55f:	75 12                	jne    c000c573 <Phys::freePage(unsigned long)+0x57>
c000c561:	51                   	push   ecx
c000c562:	51                   	push   ecx
c000c563:	6a 00                	push   0x0
c000c565:	53                   	push   ebx
c000c566:	e8 57 ff ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	83 c4 08             	add    esp,0x8
c000c571:	5b                   	pop    ebx
c000c572:	c3                   	ret    
c000c573:	83 ec 0c             	sub    esp,0xc
c000c576:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c000c57b:	50                   	push   eax
c000c57c:	e8 01 0a 00 00       	call   c000cf82 <VgaText::updateRAMUsageDisplay(int)>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	eb db                	jmp    c000c561 <Phys::freePage(unsigned long)+0x45>
c000c586:	68 00 10 00 00       	push   0x1000
c000c58b:	53                   	push   ebx
c000c58c:	e8 e9 fe ff ff       	call   c000c47a <Phys::freeDMA(unsigned long, unsigned long)>
c000c591:	59                   	pop    ecx
c000c592:	5b                   	pop    ebx
c000c593:	83 c4 08             	add    esp,0x8
c000c596:	5b                   	pop    ebx
c000c597:	c3                   	ret    
c000c598:	c7 44 24 10 1b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002131b
c000c5a0:	83 c4 08             	add    esp,0x8
c000c5a3:	5b                   	pop    ebx
c000c5a4:	e9 8b 94 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>

c000c5a9 <Phys::allocatePage()>:
c000c5a9:	56                   	push   esi
c000c5aa:	53                   	push   ebx
c000c5ab:	51                   	push   ecx
c000c5ac:	8b 35 c0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247c0
c000c5b2:	89 f3                	mov    ebx,esi
c000c5b4:	eb 0a                	jmp    c000c5c0 <Phys::allocatePage()+0x17>
c000c5b6:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c5bc:	39 de                	cmp    esi,ebx
c000c5be:	74 24                	je     c000c5e4 <Phys::allocatePage()+0x3b>
c000c5c0:	53                   	push   ebx
c000c5c1:	e8 35 ff ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c5c6:	5a                   	pop    edx
c000c5c7:	84 c0                	test   al,al
c000c5c9:	74 5a                	je     c000c625 <Phys::allocatePage()+0x7c>
c000c5cb:	43                   	inc    ebx
c000c5cc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5d2:	75 e2                	jne    c000c5b6 <Phys::allocatePage()+0xd>
c000c5d4:	31 db                	xor    ebx,ebx
c000c5d6:	c7 05 c0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247c0,0x0
c000c5e0:	39 de                	cmp    esi,ebx
c000c5e2:	75 dc                	jne    c000c5c0 <Phys::allocatePage()+0x17>
c000c5e4:	83 ec 0c             	sub    esp,0xc
c000c5e7:	68 31 13 02 c0       	push   0xc0021331
c000c5ec:	e8 14 2c 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000c5f1:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c5f8:	e8 d9 fd ff ff       	call   c000c3d6 <Phys::allocateDMA(unsigned long)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	85 c0                	test   eax,eax
c000c602:	75 5a                	jne    c000c65e <Phys::allocatePage()+0xb5>
c000c604:	83 ec 0c             	sub    esp,0xc
c000c607:	68 42 13 02 c0       	push   0xc0021342
c000c60c:	e8 23 94 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	8b 1d c0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247c0
c000c61a:	53                   	push   ebx
c000c61b:	e8 db fe ff ff       	call   c000c4fb <Phys::getPageState(unsigned long)>
c000c620:	5a                   	pop    edx
c000c621:	84 c0                	test   al,al
c000c623:	75 a6                	jne    c000c5cb <Phys::allocatePage()+0x22>
c000c625:	6a 01                	push   0x1
c000c627:	53                   	push   ebx
c000c628:	e8 95 fe ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c62d:	a1 cc 47 02 c0       	mov    eax,ds:0xc00247cc
c000c632:	59                   	pop    ecx
c000c633:	40                   	inc    eax
c000c634:	5b                   	pop    ebx
c000c635:	a3 cc 47 02 c0       	mov    ds:0xc00247cc,eax
c000c63a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c63d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c640:	c1 e0 02             	shl    eax,0x2
c000c643:	89 c2                	mov    edx,eax
c000c645:	c1 fa 1f             	sar    edx,0x1f
c000c648:	f7 3d d0 47 02 c0    	idiv   DWORD PTR ds:0xc00247d0
c000c64e:	39 05 c8 47 02 c0    	cmp    DWORD PTR ds:0xc00247c8,eax
c000c654:	75 0c                	jne    c000c662 <Phys::allocatePage()+0xb9>
c000c656:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c000c65b:	c1 e0 0c             	shl    eax,0xc
c000c65e:	5a                   	pop    edx
c000c65f:	5b                   	pop    ebx
c000c660:	5e                   	pop    esi
c000c661:	c3                   	ret    
c000c662:	83 ec 0c             	sub    esp,0xc
c000c665:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c000c66a:	50                   	push   eax
c000c66b:	e8 12 09 00 00       	call   c000cf82 <VgaText::updateRAMUsageDisplay(int)>
c000c670:	83 c4 10             	add    esp,0x10
c000c673:	eb e1                	jmp    c000c656 <Phys::allocatePage()+0xad>

c000c675 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c675:	56                   	push   esi
c000c676:	53                   	push   ebx
c000c677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c67b:	39 1d c4 47 02 c0    	cmp    DWORD PTR ds:0xc00247c4,ebx
c000c681:	73 06                	jae    c000c689 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c683:	89 1d c4 47 02 c0    	mov    DWORD PTR ds:0xc00247c4,ebx
c000c689:	c1 eb 0c             	shr    ebx,0xc
c000c68c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c690:	c1 e8 0c             	shr    eax,0xc
c000c693:	39 d8                	cmp    eax,ebx
c000c695:	73 13                	jae    c000c6aa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c697:	6a 00                	push   0x0
c000c699:	8d 70 01             	lea    esi,[eax+0x1]
c000c69c:	50                   	push   eax
c000c69d:	e8 20 fe ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c6a2:	5a                   	pop    edx
c000c6a3:	89 f0                	mov    eax,esi
c000c6a5:	59                   	pop    ecx
c000c6a6:	39 f3                	cmp    ebx,esi
c000c6a8:	75 ed                	jne    c000c697 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6aa:	5b                   	pop    ebx
c000c6ab:	5e                   	pop    esi
c000c6ac:	c3                   	ret    

c000c6ad <Phys::physicalMemorySetup(unsigned int)>:
c000c6ad:	55                   	push   ebp
c000c6ae:	57                   	push   edi
c000c6af:	56                   	push   esi
c000c6b0:	53                   	push   ebx
c000c6b1:	31 db                	xor    ebx,ebx
c000c6b3:	83 ec 40             	sub    esp,0x40
c000c6b6:	6a 30                	push   0x30
c000c6b8:	6a 00                	push   0x0
c000c6ba:	68 e0 47 02 c0       	push   0xc00247e0
c000c6bf:	e8 f1 3f ff ff       	call   c00006b5 <memset>
c000c6c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6cd:	05 00 10 00 00       	add    eax,0x1000
c000c6d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6d6:	83 c4 10             	add    esp,0x10
c000c6d9:	56                   	push   esi
c000c6da:	56                   	push   esi
c000c6db:	6a 01                	push   0x1
c000c6dd:	53                   	push   ebx
c000c6de:	43                   	inc    ebx
c000c6df:	e8 de fd ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c6e4:	83 c4 10             	add    esp,0x10
c000c6e7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6ed:	75 ea                	jne    c000c6d9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6ef:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c6f5:	66 85 c0             	test   ax,ax
c000c6f8:	0f 84 3b 01 00 00    	je     c000c839 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c6fe:	89 c7                	mov    edi,eax
c000c700:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c708:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c70e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c713:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c717:	eb 6d                	jmp    c000c786 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c719:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c71d:	89 c1                	mov    ecx,eax
c000c71f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c723:	0f 83 bc 00 00 00    	jae    c000c7e5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c729:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c72d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c732:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c736:	39 f2                	cmp    edx,esi
c000c738:	19 f8                	sbb    eax,edi
c000c73a:	73 07                	jae    c000c743 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c73c:	be 00 00 0a 00       	mov    esi,0xa0000
c000c741:	31 ff                	xor    edi,edi
c000c743:	89 f2                	mov    edx,esi
c000c745:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c74a:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c750:	89 f9                	mov    ecx,edi
c000c752:	83 d1 ff             	adc    ecx,0xffffffff
c000c755:	39 d0                	cmp    eax,edx
c000c757:	b8 00 00 00 00       	mov    eax,0x0
c000c75c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c760:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c764:	19 c8                	sbb    eax,ecx
c000c766:	0f 82 0d 01 00 00    	jb     c000c879 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c76c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c770:	83 c3 18             	add    ebx,0x18
c000c773:	41                   	inc    ecx
c000c774:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c77c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c780:	0f 84 c3 00 00 00    	je     c000c849 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c786:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c788:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c78b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c78e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c792:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c795:	01 f0                	add    eax,esi
c000c797:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c79a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c79e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7a2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7a6:	11 fa                	adc    edx,edi
c000c7a8:	55                   	push   ebp
c000c7a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7b5:	51                   	push   ecx
c000c7b6:	56                   	push   esi
c000c7b7:	68 7c 13 02 c0       	push   0xc002137c
c000c7bc:	e8 44 2a 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000c7c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	09 f8                	or     eax,edi
c000c7ca:	75 7d                	jne    c000c849 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7cc:	83 fd 01             	cmp    ebp,0x1
c000c7cf:	75 11                	jne    c000c7e2 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7d1:	ba 00 00 08 00       	mov    edx,0x80000
c000c7d6:	89 c1                	mov    ecx,eax
c000c7d8:	39 f2                	cmp    edx,esi
c000c7da:	19 f9                	sbb    ecx,edi
c000c7dc:	0f 83 37 ff ff ff    	jae    c000c719 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7e2:	4d                   	dec    ebp
c000c7e3:	75 87                	jne    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7ef:	89 c8                	mov    eax,ecx
c000c7f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7f5:	19 d1                	sbb    ecx,edx
c000c7f7:	0f 82 6f ff ff ff    	jb     c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7fd:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c802:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c806:	b9 00 00 00 00       	mov    ecx,0x0
c000c80b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c80f:	0f 83 57 ff ff ff    	jae    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c815:	39 c6                	cmp    esi,eax
c000c817:	19 d7                	sbb    edi,edx
c000c819:	73 6a                	jae    c000c885 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c81b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c81f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c823:	29 c7                	sub    edi,eax
c000c825:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c829:	19 d5                	sbb    ebp,edx
c000c82b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c82f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c833:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c837:	eb 4c                	jmp    c000c885 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c839:	83 ec 0c             	sub    esp,0xc
c000c83c:	68 50 13 02 c0       	push   0xc0021350
c000c841:	e8 ee 91 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000c846:	83 c4 10             	add    esp,0x10
c000c849:	bb 40 01 00 00       	mov    ebx,0x140
c000c84e:	50                   	push   eax
c000c84f:	50                   	push   eax
c000c850:	6a 00                	push   0x0
c000c852:	53                   	push   ebx
c000c853:	e8 6a fc ff ff       	call   c000c4c2 <Phys::setPageState(unsigned long, bool)>
c000c858:	8b 15 d0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247d0
c000c85e:	43                   	inc    ebx
c000c85f:	42                   	inc    edx
c000c860:	83 c4 10             	add    esp,0x10
c000c863:	89 15 d0 47 02 c0    	mov    DWORD PTR ds:0xc00247d0,edx
c000c869:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c86f:	75 dd                	jne    c000c84e <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c871:	83 c4 3c             	add    esp,0x3c
c000c874:	5b                   	pop    ebx
c000c875:	5e                   	pop    esi
c000c876:	5f                   	pop    edi
c000c877:	5d                   	pop    ebp
c000c878:	c3                   	ret    
c000c879:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c87d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c885:	56                   	push   esi
c000c886:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c88a:	56                   	push   esi
c000c88b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c88f:	57                   	push   edi
c000c890:	68 a0 13 02 c0       	push   0xc00213a0
c000c895:	e8 6b 29 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000c89a:	5d                   	pop    ebp
c000c89b:	58                   	pop    eax
c000c89c:	56                   	push   esi
c000c89d:	57                   	push   edi
c000c89e:	e8 d2 fd ff ff       	call   c000c675 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8ab:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8af:	8b 15 d0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247d0
c000c8b5:	83 c4 0c             	add    esp,0xc
c000c8b8:	01 d0                	add    eax,edx
c000c8ba:	a3 d0 47 02 c0       	mov    ds:0xc00247d0,eax
c000c8bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8c6:	52                   	push   edx
c000c8c7:	50                   	push   eax
c000c8c8:	68 5e 13 02 c0       	push   0xc002135e
c000c8cd:	e8 33 29 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000c8d2:	83 c4 10             	add    esp,0x10
c000c8d5:	e9 92 fe ff ff       	jmp    c000c76c <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8da <Pipe::isAtty()>:
c000c8da:	31 c0                	xor    eax,eax
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <Pipe::~Pipe()>:
c000c8de:	83 ec 0c             	sub    esp,0xc
c000c8e1:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000c8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ea:	89 10                	mov    DWORD PTR [eax],edx
c000c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	50                   	push   eax
c000c8f4:	e8 5d 16 00 00       	call   c000df56 <UnixFile::~UnixFile()>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	90                   	nop
c000c8fd:	83 c4 0c             	add    esp,0xc
c000c900:	c3                   	ret    
c000c901:	90                   	nop

c000c902 <Pipe::~Pipe()>:
c000c902:	83 ec 0c             	sub    esp,0xc
c000c905:	83 ec 0c             	sub    esp,0xc
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 cd ff ff ff       	call   c000c8de <Pipe::~Pipe()>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	83 ec 08             	sub    esp,0x8
c000c917:	6a 20                	push   0x20
c000c919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91d:	e8 bd 27 00 00       	call   c000f0df <operator delete(void*, unsigned long)>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	83 c4 0c             	add    esp,0xc
c000c928:	c3                   	ret    
c000c929:	90                   	nop

c000c92a <Pipe::read(unsigned long long, void*, int*)>:
c000c92a:	55                   	push   ebp
c000c92b:	57                   	push   edi
c000c92c:	56                   	push   esi
c000c92d:	53                   	push   ebx
c000c92e:	83 ec 1c             	sub    esp,0x1c
c000c931:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c935:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c939:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c93d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c940:	89 c8                	mov    eax,ecx
c000c942:	99                   	cdq    
c000c943:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c947:	74 19                	je     c000c962 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c949:	39 f9                	cmp    ecx,edi
c000c94b:	89 d1                	mov    ecx,edx
c000c94d:	19 f1                	sbb    ecx,esi
c000c94f:	73 11                	jae    c000c962 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c951:	e8 e7 c0 00 00       	call   c0018a3d <lockScheduler()>
c000c956:	e8 2b c4 00 00       	call   c0018d86 <schedule()>
c000c95b:	e8 df c0 00 00       	call   c0018a3f <unlockScheduler()>
c000c960:	eb db                	jmp    c000c93d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c962:	39 f8                	cmp    eax,edi
c000c964:	89 d1                	mov    ecx,edx
c000c966:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c96a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c96e:	19 f1                	sbb    ecx,esi
c000c970:	73 08                	jae    c000c97a <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c976:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c97a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c97d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c980:	29 c6                	sub    esi,eax
c000c982:	89 f1                	mov    ecx,esi
c000c984:	c1 f9 1f             	sar    ecx,0x1f
c000c987:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c98b:	89 ca                	mov    edx,ecx
c000c98d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c991:	19 d1                	sbb    ecx,edx
c000c993:	73 04                	jae    c000c999 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c995:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c999:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c99d:	89 fd                	mov    ebp,edi
c000c99f:	29 f5                	sub    ebp,esi
c000c9a1:	85 f6                	test   esi,esi
c000c9a3:	74 12                	je     c000c9b7 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9a5:	52                   	push   edx
c000c9a6:	56                   	push   esi
c000c9a7:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9aa:	50                   	push   eax
c000c9ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9af:	e8 cb 3c ff ff       	call   c000067f <memcpy>
c000c9b4:	83 c4 10             	add    esp,0x10
c000c9b7:	85 ed                	test   ebp,ebp
c000c9b9:	74 12                	je     c000c9cd <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9bb:	50                   	push   eax
c000c9bc:	55                   	push   ebp
c000c9bd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9c0:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9c4:	56                   	push   esi
c000c9c5:	e8 b5 3c ff ff       	call   c000067f <memcpy>
c000c9ca:	83 c4 10             	add    esp,0x10
c000c9cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9d0:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9d3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9d6:	99                   	cdq    
c000c9d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9db:	89 f7                	mov    edi,esi
c000c9dd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9e1:	c1 ff 1f             	sar    edi,0x1f
c000c9e4:	57                   	push   edi
c000c9e5:	56                   	push   esi
c000c9e6:	52                   	push   edx
c000c9e7:	50                   	push   eax
c000c9e8:	e8 0f 2c 01 00       	call   c001f5fc <__umoddi3>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9f3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9f8:	75 10                	jne    c000ca0a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c9fa:	83 ec 0c             	sub    esp,0xc
c000c9fd:	68 c9 13 02 c0       	push   0xc00213c9
c000ca02:	e8 2d 90 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca12:	89 10                	mov    DWORD PTR [eax],edx
c000ca14:	83 c4 1c             	add    esp,0x1c
c000ca17:	31 c0                	xor    eax,eax
c000ca19:	5b                   	pop    ebx
c000ca1a:	5e                   	pop    esi
c000ca1b:	5f                   	pop    edi
c000ca1c:	5d                   	pop    ebp
c000ca1d:	c3                   	ret    

c000ca1e <Pipe::write(unsigned long long, void*, int*)>:
c000ca1e:	55                   	push   ebp
c000ca1f:	57                   	push   edi
c000ca20:	56                   	push   esi
c000ca21:	53                   	push   ebx
c000ca22:	83 ec 1c             	sub    esp,0x1c
c000ca25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca34:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca37:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca3a:	89 de                	mov    esi,ebx
c000ca3c:	89 df                	mov    edi,ebx
c000ca3e:	c1 ff 1f             	sar    edi,0x1f
c000ca41:	01 c6                	add    esi,eax
c000ca43:	89 c8                	mov    eax,ecx
c000ca45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca49:	11 d7                	adc    edi,edx
c000ca4b:	99                   	cdq    
c000ca4c:	89 d0                	mov    eax,edx
c000ca4e:	39 f1                	cmp    ecx,esi
c000ca50:	19 f8                	sbb    eax,edi
c000ca52:	b8 01 00 00 00       	mov    eax,0x1
c000ca57:	0f 82 80 00 00 00    	jb     c000cadd <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca60:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca63:	01 d8                	add    eax,ebx
c000ca65:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca69:	99                   	cdq    
c000ca6a:	f7 f9                	idiv   ecx
c000ca6c:	29 d1                	sub    ecx,edx
c000ca6e:	89 d7                	mov    edi,edx
c000ca70:	89 c8                	mov    eax,ecx
c000ca72:	99                   	cdq    
c000ca73:	39 ce                	cmp    esi,ecx
c000ca75:	19 d3                	sbb    ebx,edx
c000ca77:	bb 00 00 00 00       	mov    ebx,0x0
c000ca7c:	72 04                	jb     c000ca82 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca7e:	89 f3                	mov    ebx,esi
c000ca80:	29 cb                	sub    ebx,ecx
c000ca82:	89 f1                	mov    ecx,esi
c000ca84:	29 d9                	sub    ecx,ebx
c000ca86:	74 1a                	je     c000caa2 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca88:	52                   	push   edx
c000ca89:	51                   	push   ecx
c000ca8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca8e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca92:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca95:	57                   	push   edi
c000ca96:	e8 e4 3b ff ff       	call   c000067f <memcpy>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa2:	85 db                	test   ebx,ebx
c000caa4:	74 12                	je     c000cab8 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caa6:	50                   	push   eax
c000caa7:	53                   	push   ebx
c000caa8:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000caac:	51                   	push   ecx
c000caad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cab0:	e8 ca 3b ff ff       	call   c000067f <memcpy>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cabb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cac0:	75 10                	jne    c000cad2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cac2:	83 ec 0c             	sub    esp,0xc
c000cac5:	68 e5 13 02 c0       	push   0xc00213e5
c000caca:	e8 65 8f 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cad6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cad9:	89 38                	mov    DWORD PTR [eax],edi
c000cadb:	31 c0                	xor    eax,eax
c000cadd:	83 c4 1c             	add    esp,0x1c
c000cae0:	5b                   	pop    ebx
c000cae1:	5e                   	pop    esi
c000cae2:	5f                   	pop    edi
c000cae3:	5d                   	pop    ebp
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop

c000cae6 <Pipe::Pipe(int)>:
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caed:	83 ec 08             	sub    esp,0x8
c000caf0:	6a 00                	push   0x0
c000caf2:	50                   	push   eax
c000caf3:	e8 bc 12 00 00       	call   c000ddb4 <UnixFile::UnixFile(int)>
c000caf8:	83 c4 10             	add    esp,0x10
c000cafb:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb04:	89 10                	mov    DWORD PTR [eax],edx
c000cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb15:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb20:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb2b:	83 ec 0c             	sub    esp,0xc
c000cb2e:	50                   	push   eax
c000cb2f:	e8 9f f4 ff ff       	call   c000bfd3 <malloc>
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	89 c2                	mov    edx,eax
c000cb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb44:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb48:	90                   	nop
c000cb49:	83 c4 0c             	add    esp,0xc
c000cb4c:	c3                   	ret    
c000cb4d:	90                   	nop

c000cb4e <VgaText::isAtty()>:
c000cb4e:	b0 01                	mov    al,0x1
c000cb50:	c3                   	ret    
c000cb51:	90                   	nop

c000cb52 <VgaText::~VgaText()>:
c000cb52:	83 ec 0c             	sub    esp,0xc
c000cb55:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000cb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5e:	89 10                	mov    DWORD PTR [eax],edx
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	50                   	push   eax
c000cb68:	e8 e9 13 00 00       	call   c000df56 <UnixFile::~UnixFile()>
c000cb6d:	83 c4 10             	add    esp,0x10
c000cb70:	90                   	nop
c000cb71:	83 c4 0c             	add    esp,0xc
c000cb74:	c3                   	ret    
c000cb75:	90                   	nop

c000cb76 <VgaText::~VgaText()>:
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	83 ec 0c             	sub    esp,0xc
c000cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb80:	e8 cd ff ff ff       	call   c000cb52 <VgaText::~VgaText()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	83 ec 08             	sub    esp,0x8
c000cb8b:	68 60 12 00 00       	push   0x1260
c000cb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb94:	e8 46 25 00 00       	call   c000f0df <operator delete(void*, unsigned long)>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	83 c4 0c             	add    esp,0xc
c000cb9f:	c3                   	ret    

c000cba0 <VgaText::read(unsigned long long, void*, int*)>:
c000cba0:	83 ec 10             	sub    esp,0x10
c000cba3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbaf:	e8 69 58 00 00       	call   c001241d <readKeyboard(VgaText*, char*, unsigned long)>
c000cbb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbb8:	89 02                	mov    DWORD PTR [edx],eax
c000cbba:	31 c0                	xor    eax,eax
c000cbbc:	83 c4 1c             	add    esp,0x1c
c000cbbf:	c3                   	ret    

c000cbc0 <setTerminalScrollLock(bool)>:
c000cbc0:	c3                   	ret    

c000cbc1 <addToTerminalCycle(VgaText*)>:
c000cbc1:	8b 15 40 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024840
c000cbc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbcb:	85 d2                	test   edx,edx
c000cbcd:	75 0c                	jne    c000cbdb <addToTerminalCycle(VgaText*)+0x1a>
c000cbcf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbd5:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c000cbda:	c3                   	ret    
c000cbdb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbe1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbe7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbed:	c3                   	ret    

c000cbee <installVgaTextImplementation()>:
c000cbee:	83 ec 10             	sub    esp,0x10
c000cbf1:	6a 20                	push   0x20
c000cbf3:	6a 00                	push   0x0
c000cbf5:	68 20 48 02 c0       	push   0xc0024820
c000cbfa:	e8 b6 3a ff ff       	call   c00006b5 <memset>
c000cbff:	83 c4 1c             	add    esp,0x1c
c000cc02:	c3                   	ret    

c000cc03 <scrollTerminalScrollLock(int)>:
c000cc03:	c3                   	ret    

c000cc04 <VgaText::load()>:
c000cc04:	53                   	push   ebx
c000cc05:	31 c0                	xor    eax,eax
c000cc07:	83 ec 58             	sub    esp,0x58
c000cc0a:	89 e2                	mov    edx,esp
c000cc0c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc10:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc14:	40                   	inc    eax
c000cc15:	83 f8 50             	cmp    eax,0x50
c000cc18:	75 f6                	jne    c000cc10 <VgaText::load()+0xc>
c000cc1a:	31 c0                	xor    eax,eax
c000cc1c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc23:	84 c9                	test   cl,cl
c000cc25:	74 06                	je     c000cc2d <VgaText::load()+0x29>
c000cc27:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc2a:	40                   	inc    eax
c000cc2b:	eb ef                	jmp    c000cc1c <VgaText::load()+0x18>
c000cc2d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc33:	85 c0                	test   eax,eax
c000cc35:	74 09                	je     c000cc40 <VgaText::load()+0x3c>
c000cc37:	51                   	push   ecx
c000cc38:	51                   	push   ecx
c000cc39:	52                   	push   edx
c000cc3a:	53                   	push   ebx
c000cc3b:	ff d0                	call   eax
c000cc3d:	83 c4 10             	add    esp,0x10
c000cc40:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc46:	85 c0                	test   eax,eax
c000cc48:	74 09                	je     c000cc53 <VgaText::load()+0x4f>
c000cc4a:	83 ec 0c             	sub    esp,0xc
c000cc4d:	53                   	push   ebx
c000cc4e:	ff d0                	call   eax
c000cc50:	83 c4 10             	add    esp,0x10
c000cc53:	83 c4 58             	add    esp,0x58
c000cc56:	5b                   	pop    ebx
c000cc57:	c3                   	ret    

c000cc58 <VgaText::updateCursor()>:
c000cc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5c:	39 05 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,eax
c000cc62:	75 0c                	jne    c000cc70 <VgaText::updateCursor()+0x18>
c000cc64:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc6a:	85 c0                	test   eax,eax
c000cc6c:	74 02                	je     c000cc70 <VgaText::updateCursor()+0x18>
c000cc6e:	ff e0                	jmp    eax
c000cc70:	c3                   	ret    
c000cc71:	90                   	nop

c000cc72 <VgaText::showCursor(bool)>:
c000cc72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc7a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc80:	c3                   	ret    
c000cc81:	90                   	nop

c000cc82 <VgaText::disableBlink(bool)>:
c000cc82:	56                   	push   esi
c000cc83:	53                   	push   ebx
c000cc84:	51                   	push   ecx
c000cc85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc8d:	39 1d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebx
c000cc93:	75 18                	jne    c000ccad <VgaText::disableBlink(bool)+0x2b>
c000cc95:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cc9b:	85 c0                	test   eax,eax
c000cc9d:	74 0e                	je     c000ccad <VgaText::disableBlink(bool)+0x2b>
c000cc9f:	89 f1                	mov    ecx,esi
c000cca1:	52                   	push   edx
c000cca2:	52                   	push   edx
c000cca3:	0f b6 d1             	movzx  edx,cl
c000cca6:	52                   	push   edx
c000cca7:	53                   	push   ebx
c000cca8:	ff d0                	call   eax
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	89 f0                	mov    eax,esi
c000ccaf:	83 f0 01             	xor    eax,0x1
c000ccb2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccb8:	58                   	pop    eax
c000ccb9:	5b                   	pop    ebx
c000ccba:	5e                   	pop    esi
c000ccbb:	c3                   	ret    

c000ccbc <VgaText::doANSI_SGR(int)>:
c000ccbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc4:	85 d2                	test   edx,edx
c000ccc6:	75 14                	jne    c000ccdc <VgaText::doANSI_SGR(int)+0x20>
c000ccc8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccce:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccd4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccda:	eb 65                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000ccdc:	83 fa 07             	cmp    edx,0x7
c000ccdf:	75 14                	jne    c000ccf5 <VgaText::doANSI_SGR(int)+0x39>
c000cce1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cce7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cced:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccf3:	eb 4c                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000ccf5:	83 fa 1b             	cmp    edx,0x1b
c000ccf8:	74 ce                	je     c000ccc8 <VgaText::doANSI_SGR(int)+0xc>
c000ccfa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ccfd:	83 f9 07             	cmp    ecx,0x7
c000cd00:	77 09                	ja     c000cd0b <VgaText::doANSI_SGR(int)+0x4f>
c000cd02:	8b 14 8d e0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc420]
c000cd09:	eb 20                	jmp    c000cd2b <VgaText::doANSI_SGR(int)+0x6f>
c000cd0b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd0e:	83 f9 07             	cmp    ecx,0x7
c000cd11:	77 09                	ja     c000cd1c <VgaText::doANSI_SGR(int)+0x60>
c000cd13:	8b 14 8d e0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc420]
c000cd1a:	eb 25                	jmp    c000cd41 <VgaText::doANSI_SGR(int)+0x85>
c000cd1c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd1f:	83 f9 07             	cmp    ecx,0x7
c000cd22:	77 0e                	ja     c000cd32 <VgaText::doANSI_SGR(int)+0x76>
c000cd24:	8b 14 95 98 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc568]
c000cd2b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd31:	c3                   	ret    
c000cd32:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd35:	83 f9 07             	cmp    ecx,0x7
c000cd38:	77 0d                	ja     c000cd47 <VgaText::doANSI_SGR(int)+0x8b>
c000cd3a:	8b 14 95 70 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc590]
c000cd41:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd47:	c3                   	ret    

c000cd48 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd50:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd56:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd5c:	c3                   	ret    
c000cd5d:	90                   	nop

c000cd5e <VgaText::setDefaultFgColour(VgaColour)>:
c000cd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd66:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd6c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd72:	c3                   	ret    
c000cd73:	90                   	nop

c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd74:	53                   	push   ebx
c000cd75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd81:	51                   	push   ecx
c000cd82:	e8 c1 ff ff ff       	call   c000cd48 <VgaText::setDefaultBgColour(VgaColour)>
c000cd87:	58                   	pop    eax
c000cd88:	5a                   	pop    edx
c000cd89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd8d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd91:	5b                   	pop    ebx
c000cd92:	eb ca                	jmp    c000cd5e <VgaText::setDefaultFgColour(VgaColour)>

c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd94:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cd99:	c1 e2 04             	shl    edx,0x4
c000cd9c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cda0:	83 e0 0f             	and    eax,0xf
c000cda3:	09 d0                	or     eax,edx
c000cda5:	c3                   	ret    

c000cda6 <VgaText::scrollScreen()>:
c000cda6:	57                   	push   edi
c000cda7:	56                   	push   esi
c000cda8:	be 01 00 00 00       	mov    esi,0x1
c000cdad:	53                   	push   ebx
c000cdae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdb8:	31 ff                	xor    edi,edi
c000cdba:	01 d9                	add    ecx,ebx
c000cdbc:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdbf:	83 fe 17             	cmp    esi,0x17
c000cdc2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdc8:	75 28                	jne    c000cdf2 <VgaText::scrollScreen()+0x4c>
c000cdca:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdd0:	74 1c                	je     c000cdee <VgaText::scrollScreen()+0x48>
c000cdd2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdd9:	50                   	push   eax
c000cdda:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cde1:	50                   	push   eax
c000cde2:	e8 ad ff ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cde7:	5a                   	pop    edx
c000cde8:	5a                   	pop    edx
c000cde9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdec:	eb 04                	jmp    c000cdf2 <VgaText::scrollScreen()+0x4c>
c000cdee:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdf2:	47                   	inc    edi
c000cdf3:	41                   	inc    ecx
c000cdf4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cdfa:	75 c0                	jne    c000cdbc <VgaText::scrollScreen()+0x16>
c000cdfc:	46                   	inc    esi
c000cdfd:	83 fe 18             	cmp    esi,0x18
c000ce00:	75 b0                	jne    c000cdb2 <VgaText::scrollScreen()+0xc>
c000ce02:	39 1d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebx
c000ce08:	75 24                	jne    c000ce2e <VgaText::scrollScreen()+0x88>
c000ce0a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce11:	74 08                	je     c000ce1b <VgaText::scrollScreen()+0x75>
c000ce13:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce19:	eb 13                	jmp    c000ce2e <VgaText::scrollScreen()+0x88>
c000ce1b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce21:	85 c0                	test   eax,eax
c000ce23:	74 09                	je     c000ce2e <VgaText::scrollScreen()+0x88>
c000ce25:	83 ec 0c             	sub    esp,0xc
c000ce28:	53                   	push   ebx
c000ce29:	ff d0                	call   eax
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	5f                   	pop    edi
c000ce35:	e9 1e fe ff ff       	jmp    c000cc58 <VgaText::updateCursor()>

c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce3f:	c1 e0 08             	shl    eax,0x8
c000ce42:	89 c2                	mov    edx,eax
c000ce44:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce49:	09 d0                	or     eax,edx
c000ce4b:	c3                   	ret    

c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce4c:	53                   	push   ebx
c000ce4d:	83 ec 08             	sub    esp,0x8
c000ce50:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce59:	50                   	push   eax
c000ce5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5f:	50                   	push   eax
c000ce60:	e8 2f ff ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce65:	5a                   	pop    edx
c000ce66:	5b                   	pop    ebx
c000ce67:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce6c:	0f b6 c0             	movzx  eax,al
c000ce6f:	50                   	push   eax
c000ce70:	53                   	push   ebx
c000ce71:	e8 c4 ff ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000ce76:	5a                   	pop    edx
c000ce77:	5a                   	pop    edx
c000ce78:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce7e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce82:	0f b7 d2             	movzx  edx,dx
c000ce85:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce8a:	39 0d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ecx
c000ce90:	75 14                	jne    c000cea6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce92:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce98:	85 c0                	test   eax,eax
c000ce9a:	74 0a                	je     c000cea6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce9c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cea0:	83 c4 08             	add    esp,0x8
c000cea3:	5b                   	pop    ebx
c000cea4:	ff e0                	jmp    eax
c000cea6:	83 c4 08             	add    esp,0x8
c000cea9:	5b                   	pop    ebx
c000ceaa:	c3                   	ret    
c000ceab:	90                   	nop

c000ceac <VgaText::getCursorX()>:
c000ceac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceb6:	c3                   	ret    
c000ceb7:	90                   	nop

c000ceb8 <VgaText::getCursorY()>:
c000ceb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebc:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::setCursor(int, int)>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cecc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ced2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ced6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cedc:	e9 77 fd ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000cee1:	90                   	nop

c000cee2 <VgaText::setCursorX(int)>:
c000cee2:	83 ec 10             	sub    esp,0x10
c000cee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cee9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ceef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef3:	50                   	push   eax
c000cef4:	e8 cb ff ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000cef9:	83 c4 1c             	add    esp,0x1c
c000cefc:	c3                   	ret    
c000cefd:	90                   	nop

c000cefe <VgaText::setCursorY(int)>:
c000cefe:	83 ec 10             	sub    esp,0x10
c000cf01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf09:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf0f:	50                   	push   eax
c000cf10:	e8 af ff ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000cf15:	83 c4 1c             	add    esp,0x1c
c000cf18:	c3                   	ret    
c000cf19:	90                   	nop

c000cf1a <VgaText::incrementCursor(bool)>:
c000cf1a:	56                   	push   esi
c000cf1b:	53                   	push   ebx
c000cf1c:	51                   	push   ecx
c000cf1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf25:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf2b:	40                   	inc    eax
c000cf2c:	83 f8 50             	cmp    eax,0x50
c000cf2f:	74 08                	je     c000cf39 <VgaText::incrementCursor(bool)+0x1f>
c000cf31:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf37:	eb 33                	jmp    c000cf6c <VgaText::incrementCursor(bool)+0x52>
c000cf39:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf3f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf49:	8d 50 01             	lea    edx,[eax+0x1]
c000cf4c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf52:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf58:	75 12                	jne    c000cf6c <VgaText::incrementCursor(bool)+0x52>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf63:	53                   	push   ebx
c000cf64:	e8 3d fe ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 f0                	mov    eax,esi
c000cf6e:	84 c0                	test   al,al
c000cf70:	74 0c                	je     c000cf7e <VgaText::incrementCursor(bool)+0x64>
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	5a                   	pop    edx
c000cf77:	5b                   	pop    ebx
c000cf78:	5e                   	pop    esi
c000cf79:	e9 da fc ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000cf7e:	58                   	pop    eax
c000cf7f:	5b                   	pop    ebx
c000cf80:	5e                   	pop    esi
c000cf81:	c3                   	ret    

c000cf82 <VgaText::updateRAMUsageDisplay(int)>:
c000cf82:	53                   	push   ebx
c000cf83:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf88:	6a 0f                	push   0xf
c000cf8a:	6a 00                	push   0x0
c000cf8c:	e8 03 fe ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf91:	5a                   	pop    edx
c000cf92:	59                   	pop    ecx
c000cf93:	0f b6 c8             	movzx  ecx,al
c000cf96:	51                   	push   ecx
c000cf97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf9b:	99                   	cdq    
c000cf9c:	f7 fb                	idiv   ebx
c000cf9e:	83 c0 30             	add    eax,0x30
c000cfa1:	89 d3                	mov    ebx,edx
c000cfa3:	0f be c0             	movsx  eax,al
c000cfa6:	50                   	push   eax
c000cfa7:	e8 8e fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfac:	5a                   	pop    edx
c000cfad:	83 c3 30             	add    ebx,0x30
c000cfb0:	5a                   	pop    edx
c000cfb1:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfb7:	0f b6 db             	movzx  ebx,bl
c000cfba:	51                   	push   ecx
c000cfbb:	53                   	push   ebx
c000cfbc:	e8 79 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc1:	5b                   	pop    ebx
c000cfc2:	5a                   	pop    edx
c000cfc3:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfc9:	51                   	push   ecx
c000cfca:	6a 25                	push   0x25
c000cfcc:	e8 69 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd1:	59                   	pop    ecx
c000cfd2:	5b                   	pop    ebx
c000cfd3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfd9:	5b                   	pop    ebx
c000cfda:	c3                   	ret    
c000cfdb:	90                   	nop

c000cfdc <VgaText::updateDiskUsage()>:
c000cfdc:	55                   	push   ebp
c000cfdd:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfe2:	57                   	push   edi
c000cfe3:	56                   	push   esi
c000cfe4:	53                   	push   ebx
c000cfe5:	6a 0f                	push   0xf
c000cfe7:	6a 00                	push   0x0
c000cfe9:	e8 a6 fd ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfee:	0f b6 d8             	movzx  ebx,al
c000cff1:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000cff6:	5a                   	pop    edx
c000cff7:	99                   	cdq    
c000cff8:	f7 fd                	idiv   ebp
c000cffa:	59                   	pop    ecx
c000cffb:	b9 0a 00 00 00       	mov    ecx,0xa
c000d000:	99                   	cdq    
c000d001:	f7 f9                	idiv   ecx
c000d003:	53                   	push   ebx
c000d004:	8d 42 30             	lea    eax,[edx+0x30]
c000d007:	0f b6 c0             	movzx  eax,al
c000d00a:	50                   	push   eax
c000d00b:	e8 2a fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d010:	5e                   	pop    esi
c000d011:	5f                   	pop    edi
c000d012:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d018:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d01d:	bf e8 03 00 00       	mov    edi,0x3e8
c000d022:	99                   	cdq    
c000d023:	f7 ff                	idiv   edi
c000d025:	99                   	cdq    
c000d026:	f7 f9                	idiv   ecx
c000d028:	53                   	push   ebx
c000d029:	8d 42 30             	lea    eax,[edx+0x30]
c000d02c:	0f b6 c0             	movzx  eax,al
c000d02f:	50                   	push   eax
c000d030:	e8 05 fe ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d035:	5a                   	pop    edx
c000d036:	5e                   	pop    esi
c000d037:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d03d:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d042:	be 64 00 00 00       	mov    esi,0x64
c000d047:	99                   	cdq    
c000d048:	f7 fe                	idiv   esi
c000d04a:	99                   	cdq    
c000d04b:	f7 f9                	idiv   ecx
c000d04d:	53                   	push   ebx
c000d04e:	8d 42 30             	lea    eax,[edx+0x30]
c000d051:	0f b6 c0             	movzx  eax,al
c000d054:	50                   	push   eax
c000d055:	e8 e0 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d05a:	5a                   	pop    edx
c000d05b:	5a                   	pop    edx
c000d05c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d062:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d067:	53                   	push   ebx
c000d068:	99                   	cdq    
c000d069:	f7 f9                	idiv   ecx
c000d06b:	99                   	cdq    
c000d06c:	f7 f9                	idiv   ecx
c000d06e:	8d 42 30             	lea    eax,[edx+0x30]
c000d071:	0f b6 c0             	movzx  eax,al
c000d074:	50                   	push   eax
c000d075:	e8 c0 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d07a:	5a                   	pop    edx
c000d07b:	5a                   	pop    edx
c000d07c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d082:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d087:	53                   	push   ebx
c000d088:	99                   	cdq    
c000d089:	f7 f9                	idiv   ecx
c000d08b:	8d 42 30             	lea    eax,[edx+0x30]
c000d08e:	0f b6 c0             	movzx  eax,al
c000d091:	50                   	push   eax
c000d092:	e8 a3 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d097:	5a                   	pop    edx
c000d098:	5a                   	pop    edx
c000d099:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d09f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0a4:	53                   	push   ebx
c000d0a5:	99                   	cdq    
c000d0a6:	f7 fd                	idiv   ebp
c000d0a8:	99                   	cdq    
c000d0a9:	f7 f9                	idiv   ecx
c000d0ab:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ae:	0f b6 c0             	movzx  eax,al
c000d0b1:	50                   	push   eax
c000d0b2:	e8 83 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b7:	5d                   	pop    ebp
c000d0b8:	5a                   	pop    edx
c000d0b9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0bf:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0c4:	53                   	push   ebx
c000d0c5:	99                   	cdq    
c000d0c6:	f7 ff                	idiv   edi
c000d0c8:	99                   	cdq    
c000d0c9:	f7 f9                	idiv   ecx
c000d0cb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ce:	0f b6 c0             	movzx  eax,al
c000d0d1:	50                   	push   eax
c000d0d2:	e8 63 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d7:	5f                   	pop    edi
c000d0d8:	5d                   	pop    ebp
c000d0d9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0df:	53                   	push   ebx
c000d0e0:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0e5:	99                   	cdq    
c000d0e6:	f7 fe                	idiv   esi
c000d0e8:	99                   	cdq    
c000d0e9:	f7 f9                	idiv   ecx
c000d0eb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ee:	0f b6 c0             	movzx  eax,al
c000d0f1:	50                   	push   eax
c000d0f2:	e8 43 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0f7:	5a                   	pop    edx
c000d0f8:	5e                   	pop    esi
c000d0f9:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d0ff:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d104:	53                   	push   ebx
c000d105:	99                   	cdq    
c000d106:	f7 f9                	idiv   ecx
c000d108:	99                   	cdq    
c000d109:	f7 f9                	idiv   ecx
c000d10b:	8d 42 30             	lea    eax,[edx+0x30]
c000d10e:	0f b6 c0             	movzx  eax,al
c000d111:	50                   	push   eax
c000d112:	e8 23 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d117:	5f                   	pop    edi
c000d118:	5d                   	pop    ebp
c000d119:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d11f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d124:	53                   	push   ebx
c000d125:	99                   	cdq    
c000d126:	f7 f9                	idiv   ecx
c000d128:	83 c2 30             	add    edx,0x30
c000d12b:	0f b6 d2             	movzx  edx,dl
c000d12e:	52                   	push   edx
c000d12f:	e8 06 fd ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d134:	5a                   	pop    edx
c000d135:	59                   	pop    ecx
c000d136:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d13c:	5b                   	pop    ebx
c000d13d:	5e                   	pop    esi
c000d13e:	5f                   	pop    edi
c000d13f:	5d                   	pop    ebp
c000d140:	c3                   	ret    
c000d141:	90                   	nop

c000d142 <VgaText::updateTitle()>:
c000d142:	53                   	push   ebx
c000d143:	31 c0                	xor    eax,eax
c000d145:	83 ec 58             	sub    esp,0x58
c000d148:	89 e1                	mov    ecx,esp
c000d14a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d14e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d152:	40                   	inc    eax
c000d153:	83 f8 50             	cmp    eax,0x50
c000d156:	75 f6                	jne    c000d14e <VgaText::updateTitle()+0xc>
c000d158:	31 c0                	xor    eax,eax
c000d15a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d161:	84 db                	test   bl,bl
c000d163:	74 06                	je     c000d16b <VgaText::updateTitle()+0x29>
c000d165:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d168:	40                   	inc    eax
c000d169:	eb ef                	jmp    c000d15a <VgaText::updateTitle()+0x18>
c000d16b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d171:	85 c0                	test   eax,eax
c000d173:	74 09                	je     c000d17e <VgaText::updateTitle()+0x3c>
c000d175:	53                   	push   ebx
c000d176:	53                   	push   ebx
c000d177:	51                   	push   ecx
c000d178:	52                   	push   edx
c000d179:	ff d0                	call   eax
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	e8 59 fe ff ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c000d183:	83 c4 58             	add    esp,0x58
c000d186:	5b                   	pop    ebx
c000d187:	c3                   	ret    

c000d188 <VgaText::setTitleTextColour(VgaColour)>:
c000d188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d190:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d196:	eb aa                	jmp    c000d142 <VgaText::updateTitle()>

c000d198 <VgaText::setTitleColour(VgaColour)>:
c000d198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a0:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1a6:	eb 9a                	jmp    c000d142 <VgaText::updateTitle()>

c000d1a8 <VgaText::setTitle(char*)>:
c000d1a8:	53                   	push   ebx
c000d1a9:	83 ec 10             	sub    esp,0x10
c000d1ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1ba:	50                   	push   eax
c000d1bb:	e8 94 35 ff ff       	call   c0000754 <strcpy>
c000d1c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1c4:	83 c4 18             	add    esp,0x18
c000d1c7:	5b                   	pop    ebx
c000d1c8:	e9 75 ff ff ff       	jmp    c000d142 <VgaText::updateTitle()>
c000d1cd:	90                   	nop

c000d1ce <VgaText::decrementCursor(bool)>:
c000d1ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1d6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1dc:	85 c0                	test   eax,eax
c000d1de:	74 07                	je     c000d1e7 <VgaText::decrementCursor(bool)+0x19>
c000d1e0:	48                   	dec    eax
c000d1e1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1e7:	84 c9                	test   cl,cl
c000d1e9:	74 09                	je     c000d1f4 <VgaText::decrementCursor(bool)+0x26>
c000d1eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1ef:	e9 64 fa ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000d1f4:	c3                   	ret    
c000d1f5:	90                   	nop

c000d1f6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d1f6:	53                   	push   ebx
c000d1f7:	83 ec 08             	sub    esp,0x8
c000d1fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d1fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d202:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d206:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d20a:	3c 07                	cmp    al,0x7
c000d20c:	75 2a                	jne    c000d238 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d20e:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000d213:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d21b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d223:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d22b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d22f:	83 c4 08             	add    esp,0x8
c000d232:	5b                   	pop    ebx
c000d233:	e9 c0 2d 00 00       	jmp    c000fff8 <Buzzer::beep(int, int, bool)>
c000d238:	3c 0d                	cmp    al,0xd
c000d23a:	75 0c                	jne    c000d248 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d23c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d246:	eb 3b                	jmp    c000d283 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d248:	3c 0a                	cmp    al,0xa
c000d24a:	75 40                	jne    c000d28c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d24c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d252:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d25c:	8d 50 01             	lea    edx,[eax+0x1]
c000d25f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d265:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d26b:	75 12                	jne    c000d27f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d26d:	83 ec 0c             	sub    esp,0xc
c000d270:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d276:	53                   	push   ebx
c000d277:	e8 2a fb ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d283:	83 c4 08             	add    esp,0x8
c000d286:	5b                   	pop    ebx
c000d287:	e9 cc f9 ff ff       	jmp    c000cc58 <VgaText::updateCursor()>
c000d28c:	3c 08                	cmp    al,0x8
c000d28e:	75 31                	jne    c000d2c1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d290:	50                   	push   eax
c000d291:	50                   	push   eax
c000d292:	6a 01                	push   0x1
c000d294:	53                   	push   ebx
c000d295:	e8 34 ff ff ff       	call   c000d1ce <VgaText::decrementCursor(bool)>
c000d29a:	5a                   	pop    edx
c000d29b:	59                   	pop    ecx
c000d29c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2a2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2a8:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2ae:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2b4:	6a 20                	push   0x20
c000d2b6:	53                   	push   ebx
c000d2b7:	e8 90 fb ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2bc:	83 c4 28             	add    esp,0x28
c000d2bf:	5b                   	pop    ebx
c000d2c0:	c3                   	ret    
c000d2c1:	83 ec 08             	sub    esp,0x8
c000d2c4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ca:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2d0:	0f be c0             	movsx  eax,al
c000d2d3:	51                   	push   ecx
c000d2d4:	52                   	push   edx
c000d2d5:	50                   	push   eax
c000d2d6:	53                   	push   ebx
c000d2d7:	e8 70 fb ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2dc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2e0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2e8:	83 c4 28             	add    esp,0x28
c000d2eb:	5b                   	pop    ebx
c000d2ec:	e9 29 fc ff ff       	jmp    c000cf1a <VgaText::incrementCursor(bool)>
c000d2f1:	90                   	nop

c000d2f2 <VgaText::isShowingCursor()>:
c000d2f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d2fc:	c3                   	ret    
c000d2fd:	90                   	nop

c000d2fe <VgaText::isBlinkDisabled()>:
c000d2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d302:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d308:	83 f0 01             	xor    eax,0x1
c000d30b:	c3                   	ret    

c000d30c <VgaText::setCursorHeight(int)>:
c000d30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d314:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d31a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d325:	e9 48 f9 ff ff       	jmp    c000cc72 <VgaText::showCursor(bool)>

c000d32a <VgaText::getCursorHeight()>:
c000d32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d334:	c3                   	ret    

c000d335 <setActiveTerminal(VgaText*)>:
c000d335:	53                   	push   ebx
c000d336:	83 ec 08             	sub    esp,0x8
c000d339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d33d:	85 db                	test   ebx,ebx
c000d33f:	75 11                	jne    c000d352 <setActiveTerminal(VgaText*)+0x1d>
c000d341:	c7 44 24 10 20 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021420
c000d349:	83 c4 08             	add    esp,0x8
c000d34c:	5b                   	pop    ebx
c000d34d:	e9 e2 86 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c000d352:	50                   	push   eax
c000d353:	50                   	push   eax
c000d354:	53                   	push   ebx
c000d355:	68 2e 14 02 c0       	push   0xc002142e
c000d35a:	e8 a6 1e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000d35f:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	85 c0                	test   eax,eax
c000d369:	74 0c                	je     c000d377 <setActiveTerminal(VgaText*)+0x42>
c000d36b:	83 ec 0c             	sub    esp,0xc
c000d36e:	50                   	push   eax
c000d36f:	e8 e4 f8 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	51                   	push   ecx
c000d378:	89 1d 44 48 02 c0    	mov    DWORD PTR ds:0xc0024844,ebx
c000d37e:	51                   	push   ecx
c000d37f:	53                   	push   ebx
c000d380:	68 46 14 02 c0       	push   0xc0021446
c000d385:	e8 7b 1e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d393:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d399:	53                   	push   ebx
c000d39a:	e8 25 fb ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d39f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3a2:	e8 57 ff ff ff       	call   c000d2fe <VgaText::isBlinkDisabled()>
c000d3a7:	5a                   	pop    edx
c000d3a8:	59                   	pop    ecx
c000d3a9:	0f b6 c0             	movzx  eax,al
c000d3ac:	50                   	push   eax
c000d3ad:	53                   	push   ebx
c000d3ae:	e8 cf f8 ff ff       	call   c000cc82 <VgaText::disableBlink(bool)>
c000d3b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3b6:	e8 6f ff ff ff       	call   c000d32a <VgaText::getCursorHeight()>
c000d3bb:	5a                   	pop    edx
c000d3bc:	59                   	pop    ecx
c000d3bd:	50                   	push   eax
c000d3be:	53                   	push   ebx
c000d3bf:	e8 48 ff ff ff       	call   c000d30c <VgaText::setCursorHeight(int)>
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3ce:	75 0a                	jne    c000d3da <setActiveTerminal(VgaText*)+0xa5>
c000d3d0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3da:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3de:	83 c4 08             	add    esp,0x8
c000d3e1:	5b                   	pop    ebx
c000d3e2:	e9 1d f8 ff ff       	jmp    c000cc04 <VgaText::load()>

c000d3e7 <doTerminalCycle()>:
c000d3e7:	83 ec 18             	sub    esp,0x18
c000d3ea:	a1 40 48 02 c0       	mov    eax,ds:0xc0024840
c000d3ef:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3f5:	50                   	push   eax
c000d3f6:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c000d3fb:	e8 35 ff ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c000d400:	83 c4 1c             	add    esp,0x1c
c000d403:	c3                   	ret    

c000d404 <VgaText::doUpdate()>:
c000d404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d408:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d40e:	85 c0                	test   eax,eax
c000d410:	74 02                	je     c000d414 <VgaText::doUpdate()+0x10>
c000d412:	ff e0                	jmp    eax
c000d414:	c3                   	ret    
c000d415:	90                   	nop

c000d416 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d416:	55                   	push   ebp
c000d417:	57                   	push   edi
c000d418:	56                   	push   esi
c000d419:	53                   	push   ebx
c000d41a:	83 ec 1c             	sub    esp,0x1c
c000d41d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d421:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d426:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d42d:	50                   	push   eax
c000d42e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d433:	50                   	push   eax
c000d434:	e8 5b f9 ff ff       	call   c000cd94 <VgaText::combineColours(unsigned char, unsigned char)>
c000d439:	59                   	pop    ecx
c000d43a:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d43d:	5b                   	pop    ebx
c000d43e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d446:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d44c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d450:	0f b7 db             	movzx  ebx,bx
c000d453:	01 db                	add    ebx,ebx
c000d455:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d459:	01 fb                	add    ebx,edi
c000d45b:	31 c0                	xor    eax,eax
c000d45d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d460:	84 c9                	test   cl,cl
c000d462:	0f 84 3d 01 00 00    	je     c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d468:	80 f9 0d             	cmp    cl,0xd
c000d46b:	75 0f                	jne    c000d47c <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d46d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d477:	e9 23 01 00 00       	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d47c:	80 f9 0a             	cmp    cl,0xa
c000d47f:	75 5b                	jne    c000d4dc <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d481:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d487:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d491:	8d 48 01             	lea    ecx,[eax+0x1]
c000d494:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d49a:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4a0:	75 12                	jne    c000d4b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4a2:	83 ec 0c             	sub    esp,0xc
c000d4a5:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4ab:	55                   	push   ebp
c000d4ac:	e8 f5 f8 ff ff       	call   c000cda6 <VgaText::scrollScreen()>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	83 ec 0c             	sub    esp,0xc
c000d4b7:	55                   	push   ebp
c000d4b8:	e8 9b f7 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d4bd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4c5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	0f b7 db             	movzx  ebx,bx
c000d4d1:	01 db                	add    ebx,ebx
c000d4d3:	31 c0                	xor    eax,eax
c000d4d5:	01 fb                	add    ebx,edi
c000d4d7:	e9 c3 00 00 00       	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4dc:	80 f9 08             	cmp    cl,0x8
c000d4df:	75 4e                	jne    c000d52f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4e5:	50                   	push   eax
c000d4e6:	50                   	push   eax
c000d4e7:	6a 01                	push   0x1
c000d4e9:	55                   	push   ebp
c000d4ea:	e8 df fc ff ff       	call   c000d1ce <VgaText::decrementCursor(bool)>
c000d4ef:	58                   	pop    eax
c000d4f0:	5a                   	pop    edx
c000d4f1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4f7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d4fd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d503:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d509:	6a 20                	push   0x20
c000d50b:	55                   	push   ebp
c000d50c:	e8 3b f9 ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d511:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d519:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d51f:	83 c4 20             	add    esp,0x20
c000d522:	0f b7 db             	movzx  ebx,bx
c000d525:	01 db                	add    ebx,ebx
c000d527:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d52b:	01 fb                	add    ebx,edi
c000d52d:	eb 70                	jmp    c000d59f <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d52f:	50                   	push   eax
c000d530:	50                   	push   eax
c000d531:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d536:	50                   	push   eax
c000d537:	51                   	push   ecx
c000d538:	e8 fd f8 ff ff       	call   c000ce3a <VgaText::combineCharAndColour(char, unsigned char)>
c000d53d:	66 89 03             	mov    WORD PTR [ebx],ax
c000d540:	83 c4 10             	add    esp,0x10
c000d543:	39 2d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebp
c000d549:	75 2a                	jne    c000d575 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d54b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d551:	85 c0                	test   eax,eax
c000d553:	74 20                	je     c000d575 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d555:	52                   	push   edx
c000d556:	52                   	push   edx
c000d557:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d55d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d56e:	51                   	push   ecx
c000d56f:	55                   	push   ebp
c000d570:	ff d0                	call   eax
c000d572:	83 c4 20             	add    esp,0x20
c000d575:	50                   	push   eax
c000d576:	83 c3 02             	add    ebx,0x2
c000d579:	50                   	push   eax
c000d57a:	6a 00                	push   0x0
c000d57c:	55                   	push   ebp
c000d57d:	e8 98 f9 ff ff       	call   c000cf1a <VgaText::incrementCursor(bool)>
c000d582:	83 c4 10             	add    esp,0x10
c000d585:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d58c:	75 0f                	jne    c000d59d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d58e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d596:	0f b7 db             	movzx  ebx,bx
c000d599:	01 db                	add    ebx,ebx
c000d59b:	01 fb                	add    ebx,edi
c000d59d:	b0 01                	mov    al,0x1
c000d59f:	46                   	inc    esi
c000d5a0:	e9 b8 fe ff ff       	jmp    c000d45d <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5a9:	83 ec 0c             	sub    esp,0xc
c000d5ac:	55                   	push   ebp
c000d5ad:	e8 a6 f6 ff ff       	call   c000cc58 <VgaText::updateCursor()>
c000d5b2:	83 c4 10             	add    esp,0x10
c000d5b5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5b9:	84 c0                	test   al,al
c000d5bb:	74 0c                	je     c000d5c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5bd:	83 ec 0c             	sub    esp,0xc
c000d5c0:	55                   	push   ebp
c000d5c1:	e8 3e fe ff ff       	call   c000d404 <VgaText::doUpdate()>
c000d5c6:	83 c4 10             	add    esp,0x10
c000d5c9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5d0:	83 c4 1c             	add    esp,0x1c
c000d5d3:	5b                   	pop    ebx
c000d5d4:	5e                   	pop    esi
c000d5d5:	5f                   	pop    edi
c000d5d6:	5d                   	pop    ebp
c000d5d7:	c3                   	ret    

c000d5d8 <VgaText::clearScreen()>:
c000d5d8:	57                   	push   edi
c000d5d9:	56                   	push   esi
c000d5da:	31 f6                	xor    esi,esi
c000d5dc:	53                   	push   ebx
c000d5dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e1:	52                   	push   edx
c000d5e2:	6a 00                	push   0x0
c000d5e4:	6a 00                	push   0x0
c000d5e6:	53                   	push   ebx
c000d5e7:	e8 d8 f8 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d5ec:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5f3:	83 c4 10             	add    esp,0x10
c000d5f6:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d5fc:	7e 26                	jle    c000d624 <VgaText::clearScreen()+0x4c>
c000d5fe:	31 ff                	xor    edi,edi
c000d600:	50                   	push   eax
c000d601:	50                   	push   eax
c000d602:	56                   	push   esi
c000d603:	57                   	push   edi
c000d604:	47                   	inc    edi
c000d605:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d60b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d611:	6a 20                	push   0x20
c000d613:	53                   	push   ebx
c000d614:	e8 33 f8 ff ff       	call   c000ce4c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d619:	83 c4 20             	add    esp,0x20
c000d61c:	83 ff 50             	cmp    edi,0x50
c000d61f:	75 df                	jne    c000d600 <VgaText::clearScreen()+0x28>
c000d621:	46                   	inc    esi
c000d622:	eb d2                	jmp    c000d5f6 <VgaText::clearScreen()+0x1e>
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	53                   	push   ebx
c000d628:	e8 d7 fd ff ff       	call   c000d404 <VgaText::doUpdate()>
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d637:	5b                   	pop    ebx
c000d638:	5e                   	pop    esi
c000d639:	5f                   	pop    edi
c000d63a:	c3                   	ret    
c000d63b:	90                   	nop

c000d63c <VgaText::putchar(char)>:
c000d63c:	56                   	push   esi
c000d63d:	53                   	push   ebx
c000d63e:	83 ec 14             	sub    esp,0x14
c000d641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d645:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d649:	3c 5b                	cmp    al,0x5b
c000d64b:	75 21                	jne    c000d66e <VgaText::putchar(char)+0x32>
c000d64d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d654:	74 28                	je     c000d67e <VgaText::putchar(char)+0x42>
c000d656:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d65f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d669:	e9 e2 00 00 00       	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d66e:	3c 1b                	cmp    al,0x1b
c000d670:	75 0c                	jne    c000d67e <VgaText::putchar(char)+0x42>
c000d672:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d679:	e9 d2 00 00 00       	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d67e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d684:	84 c9                	test   cl,cl
c000d686:	0f 84 ab 00 00 00    	je     c000d737 <VgaText::putchar(char)+0xfb>
c000d68c:	8d 50 c0             	lea    edx,[eax-0x40]
c000d68f:	80 fa 3e             	cmp    dl,0x3e
c000d692:	0f 87 82 00 00 00    	ja     c000d71a <VgaText::putchar(char)+0xde>
c000d698:	3c 6d                	cmp    al,0x6d
c000d69a:	75 4d                	jne    c000d6e9 <VgaText::putchar(char)+0xad>
c000d69c:	31 f6                	xor    esi,esi
c000d69e:	31 d2                	xor    edx,edx
c000d6a0:	31 c0                	xor    eax,eax
c000d6a2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6a8:	7e 30                	jle    c000d6da <VgaText::putchar(char)+0x9e>
c000d6aa:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6b2:	80 fa 3b             	cmp    dl,0x3b
c000d6b5:	75 17                	jne    c000d6ce <VgaText::putchar(char)+0x92>
c000d6b7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6bb:	50                   	push   eax
c000d6bc:	53                   	push   ebx
c000d6bd:	e8 fa f5 ff ff       	call   c000ccbc <VgaText::doANSI_SGR(int)>
c000d6c2:	59                   	pop    ecx
c000d6c3:	31 d2                	xor    edx,edx
c000d6c5:	58                   	pop    eax
c000d6c6:	31 c0                	xor    eax,eax
c000d6c8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6cc:	eb 09                	jmp    c000d6d7 <VgaText::putchar(char)+0x9b>
c000d6ce:	6b c0 0a             	imul   eax,eax,0xa
c000d6d1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6d5:	88 ca                	mov    dl,cl
c000d6d7:	46                   	inc    esi
c000d6d8:	eb c8                	jmp    c000d6a2 <VgaText::putchar(char)+0x66>
c000d6da:	84 d2                	test   dl,dl
c000d6dc:	74 31                	je     c000d70f <VgaText::putchar(char)+0xd3>
c000d6de:	50                   	push   eax
c000d6df:	53                   	push   ebx
c000d6e0:	e8 d7 f5 ff ff       	call   c000ccbc <VgaText::doANSI_SGR(int)>
c000d6e5:	58                   	pop    eax
c000d6e6:	5a                   	pop    edx
c000d6e7:	eb 26                	jmp    c000d70f <VgaText::putchar(char)+0xd3>
c000d6e9:	3c 4a                	cmp    al,0x4a
c000d6eb:	75 22                	jne    c000d70f <VgaText::putchar(char)+0xd3>
c000d6ed:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6f4:	75 19                	jne    c000d70f <VgaText::putchar(char)+0xd3>
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	53                   	push   ebx
c000d6fa:	e8 d9 fe ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c000d6ff:	83 c4 0c             	add    esp,0xc
c000d702:	6a 00                	push   0x0
c000d704:	6a 00                	push   0x0
c000d706:	53                   	push   ebx
c000d707:	e8 b8 f7 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d70c:	83 c4 10             	add    esp,0x10
c000d70f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d718:	eb 36                	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d71a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d720:	83 fa 0e             	cmp    edx,0xe
c000d723:	7f 2b                	jg     c000d750 <VgaText::putchar(char)+0x114>
c000d725:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d728:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d72e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d735:	eb 19                	jmp    c000d750 <VgaText::putchar(char)+0x114>
c000d737:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d73d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d743:	0f be c0             	movsx  eax,al
c000d746:	50                   	push   eax
c000d747:	53                   	push   ebx
c000d748:	e8 a9 fa ff ff       	call   c000d1f6 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	83 c4 14             	add    esp,0x14
c000d753:	5b                   	pop    ebx
c000d754:	5e                   	pop    esi
c000d755:	c3                   	ret    

c000d756 <VgaText::puts(char const*)>:
c000d756:	53                   	push   ebx
c000d757:	83 ec 08             	sub    esp,0x8
c000d75a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d75e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d761:	84 c0                	test   al,al
c000d763:	74 12                	je     c000d777 <VgaText::puts(char const*)+0x21>
c000d765:	51                   	push   ecx
c000d766:	43                   	inc    ebx
c000d767:	51                   	push   ecx
c000d768:	50                   	push   eax
c000d769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76d:	e8 ca fe ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d772:	83 c4 10             	add    esp,0x10
c000d775:	eb e7                	jmp    c000d75e <VgaText::puts(char const*)+0x8>
c000d777:	83 c4 08             	add    esp,0x8
c000d77a:	5b                   	pop    ebx
c000d77b:	c3                   	ret    

c000d77c <VgaText::putx(unsigned int)>:
c000d77c:	57                   	push   edi
c000d77d:	b9 11 00 00 00       	mov    ecx,0x11
c000d782:	56                   	push   esi
c000d783:	be 62 14 02 c0       	mov    esi,0xc0021462
c000d788:	53                   	push   ebx
c000d789:	83 ec 20             	sub    esp,0x20
c000d78c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d790:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d794:	fc                   	cld    
c000d795:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d797:	be 08 00 00 00       	mov    esi,0x8
c000d79c:	50                   	push   eax
c000d79d:	50                   	push   eax
c000d79e:	89 d8                	mov    eax,ebx
c000d7a0:	c1 e8 1c             	shr    eax,0x1c
c000d7a3:	c1 e3 04             	shl    ebx,0x4
c000d7a6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7ab:	50                   	push   eax
c000d7ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7b0:	e8 87 fe ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	4e                   	dec    esi
c000d7b9:	75 e1                	jne    c000d79c <VgaText::putx(unsigned int)+0x20>
c000d7bb:	83 c4 20             	add    esp,0x20
c000d7be:	5b                   	pop    ebx
c000d7bf:	5e                   	pop    esi
c000d7c0:	5f                   	pop    edi
c000d7c1:	c3                   	ret    

c000d7c2 <VgaText::VgaText(char const*)>:
c000d7c2:	57                   	push   edi
c000d7c3:	56                   	push   esi
c000d7c4:	53                   	push   ebx
c000d7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c9:	83 ec 08             	sub    esp,0x8
c000d7cc:	6a 00                	push   0x0
c000d7ce:	50                   	push   eax
c000d7cf:	e8 e0 05 00 00       	call   c000ddb4 <UnixFile::UnixFile(int)>
c000d7d4:	83 c4 10             	add    esp,0x10
c000d7d7:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000d7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e0:	89 10                	mov    DWORD PTR [eax],edx
c000d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d802:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d850:	bb 20 48 02 c0       	mov    ebx,0xc0024820
c000d855:	b8 08 00 00 00       	mov    eax,0x8
c000d85a:	fc                   	cld    
c000d85b:	89 d7                	mov    edi,edx
c000d85d:	89 de                	mov    esi,ebx
c000d85f:	89 c1                	mov    ecx,eax
c000d861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d867:	05 1e 10 00 00       	add    eax,0x101e
c000d86c:	83 ec 08             	sub    esp,0x8
c000d86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d873:	50                   	push   eax
c000d874:	e8 db 2e ff ff       	call   c0000754 <strcpy>
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d880:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	83 c0 0c             	add    eax,0xc
c000d891:	83 ec 04             	sub    esp,0x4
c000d894:	68 00 0f 00 00       	push   0xf00
c000d899:	6a 00                	push   0x0
c000d89b:	50                   	push   eax
c000d89c:	e8 14 2e ff ff       	call   c00006b5 <memset>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	83 ec 04             	sub    esp,0x4
c000d8a7:	6a 00                	push   0x0
c000d8a9:	6a 07                	push   0x7
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	e8 c0 f4 ff ff       	call   c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	83 ec 08             	sub    esp,0x8
c000d8ba:	6a 02                	push   0x2
c000d8bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c0:	e8 47 fa ff ff       	call   c000d30c <VgaText::setCursorHeight(int)>
c000d8c5:	83 c4 10             	add    esp,0x10
c000d8c8:	83 ec 04             	sub    esp,0x4
c000d8cb:	6a 00                	push   0x0
c000d8cd:	6a 00                	push   0x0
c000d8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d3:	e8 ec f5 ff ff       	call   c000cec4 <VgaText::setCursor(int, int)>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	83 ec 08             	sub    esp,0x8
c000d8de:	6a 01                	push   0x1
c000d8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e4:	e8 89 f3 ff ff       	call   c000cc72 <VgaText::showCursor(bool)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	83 ec 08             	sub    esp,0x8
c000d8ef:	6a 01                	push   0x1
c000d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f5:	e8 88 f3 ff ff       	call   c000cc82 <VgaText::disableBlink(bool)>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	83 ec 0c             	sub    esp,0xc
c000d900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d904:	e8 cf fc ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c000d909:	83 c4 10             	add    esp,0x10
c000d90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d910:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91b:	05 9e 10 00 00       	add    eax,0x109e
c000d920:	83 ec 04             	sub    esp,0x4
c000d923:	68 96 00 00 00       	push   0x96
c000d928:	6a 00                	push   0x0
c000d92a:	50                   	push   eax
c000d92b:	e8 85 2d ff ff       	call   c00006b5 <memset>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d937:	05 34 11 00 00       	add    eax,0x1134
c000d93c:	83 ec 04             	sub    esp,0x4
c000d93f:	68 2c 01 00 00       	push   0x12c
c000d944:	6a 00                	push   0x0
c000d946:	50                   	push   eax
c000d947:	e8 69 2d ff ff       	call   c00006b5 <memset>
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	90                   	nop
c000d950:	5b                   	pop    ebx
c000d951:	5e                   	pop    esi
c000d952:	5f                   	pop    edi
c000d953:	c3                   	ret    

c000d954 <VgaText::receiveKey(unsigned char)>:
c000d954:	55                   	push   ebp
c000d955:	57                   	push   edi
c000d956:	56                   	push   esi
c000d957:	53                   	push   ebx
c000d958:	83 ec 1c             	sub    esp,0x1c
c000d95b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d95f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d963:	84 db                	test   bl,bl
c000d965:	0f 84 c9 00 00 00    	je     c000da34 <VgaText::receiveKey(unsigned char)+0xe0>
c000d96b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d971:	80 fb 08             	cmp    bl,0x8
c000d974:	75 2c                	jne    c000d9a2 <VgaText::receiveKey(unsigned char)+0x4e>
c000d976:	83 ec 0c             	sub    esp,0xc
c000d979:	57                   	push   edi
c000d97a:	e8 53 2d ff ff       	call   c00006d2 <strlen>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	85 c0                	test   eax,eax
c000d984:	74 41                	je     c000d9c7 <VgaText::receiveKey(unsigned char)+0x73>
c000d986:	50                   	push   eax
c000d987:	50                   	push   eax
c000d988:	6a 08                	push   0x8
c000d98a:	56                   	push   esi
c000d98b:	e8 ac fc ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d990:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d993:	e8 3a 2d ff ff       	call   c00006d2 <strlen>
c000d998:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9a0:	eb 22                	jmp    c000d9c4 <VgaText::receiveKey(unsigned char)+0x70>
c000d9a2:	52                   	push   edx
c000d9a3:	52                   	push   edx
c000d9a4:	0f be c3             	movsx  eax,bl
c000d9a7:	50                   	push   eax
c000d9a8:	56                   	push   esi
c000d9a9:	e8 8e fc ff ff       	call   c000d63c <VgaText::putchar(char)>
c000d9ae:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9b7:	59                   	pop    ecx
c000d9b8:	5d                   	pop    ebp
c000d9b9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9bd:	50                   	push   eax
c000d9be:	57                   	push   edi
c000d9bf:	e8 47 2e ff ff       	call   c000080b <strcat>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9ce:	75 05                	jne    c000d9d5 <VgaText::receiveKey(unsigned char)+0x81>
c000d9d0:	80 fb 0a             	cmp    bl,0xa
c000d9d3:	75 53                	jne    c000da28 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9d5:	83 ec 0c             	sub    esp,0xc
c000d9d8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9de:	53                   	push   ebx
c000d9df:	e8 ee 2c ff ff       	call   c00006d2 <strlen>
c000d9e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9e7:	89 c5                	mov    ebp,eax
c000d9e9:	e8 e4 2c ff ff       	call   c00006d2 <strlen>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9f5:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d9fa:	76 10                	jbe    c000da0c <VgaText::receiveKey(unsigned char)+0xb8>
c000d9fc:	83 ec 0c             	sub    esp,0xc
c000d9ff:	68 73 14 02 c0       	push   0xc0021473
c000da04:	e8 2b 80 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000da09:	83 c4 10             	add    esp,0x10
c000da0c:	50                   	push   eax
c000da0d:	50                   	push   eax
c000da0e:	57                   	push   edi
c000da0f:	53                   	push   ebx
c000da10:	e8 f6 2d ff ff       	call   c000080b <strcat>
c000da15:	83 c4 0c             	add    esp,0xc
c000da18:	68 96 00 00 00       	push   0x96
c000da1d:	6a 00                	push   0x0
c000da1f:	57                   	push   edi
c000da20:	e8 90 2c ff ff       	call   c00006b5 <memset>
c000da25:	83 c4 10             	add    esp,0x10
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	56                   	push   esi
c000da2c:	e8 d3 f9 ff ff       	call   c000d404 <VgaText::doUpdate()>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	83 c4 1c             	add    esp,0x1c
c000da37:	5b                   	pop    ebx
c000da38:	5e                   	pop    esi
c000da39:	5f                   	pop    edi
c000da3a:	5d                   	pop    ebp
c000da3b:	c3                   	ret    

c000da3c <VgaText::write(unsigned long long, void*, int*)>:
c000da3c:	55                   	push   ebp
c000da3d:	57                   	push   edi
c000da3e:	56                   	push   esi
c000da3f:	53                   	push   ebx
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da47:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da4b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da4f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da56:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da59:	39 eb                	cmp    ebx,ebp
c000da5b:	74 13                	je     c000da70 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da5d:	50                   	push   eax
c000da5e:	43                   	inc    ebx
c000da5f:	50                   	push   eax
c000da60:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da64:	50                   	push   eax
c000da65:	56                   	push   esi
c000da66:	e8 d1 fb ff ff       	call   c000d63c <VgaText::putchar(char)>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	eb e9                	jmp    c000da59 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da7a:	56                   	push   esi
c000da7b:	e8 84 f9 ff ff       	call   c000d404 <VgaText::doUpdate()>
c000da80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da84:	89 38                	mov    DWORD PTR [eax],edi
c000da86:	83 c4 1c             	add    esp,0x1c
c000da89:	31 c0                	xor    eax,eax
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <newTerminal(char*)>:
c000da90:	83 ec 28             	sub    esp,0x28
c000da93:	68 60 12 00 00       	push   0x1260
c000da98:	e8 33 16 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000da9d:	5a                   	pop    edx
c000da9e:	59                   	pop    ecx
c000da9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daa3:	50                   	push   eax
c000daa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daa8:	e8 15 fd ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c000daad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab1:	83 c4 2c             	add    esp,0x2c
c000dab4:	c3                   	ret    
c000dab5:	90                   	nop

c000dab6 <TSS::TSS()>:
c000dab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac1:	90                   	nop
c000dac2:	c3                   	ret    
c000dac3:	90                   	nop

c000dac4 <TSS::setESP(unsigned long)>:
c000dac4:	55                   	push   ebp
c000dac5:	89 e5                	mov    ebp,esp
c000dac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dacd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dad0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad3:	90                   	nop
c000dad4:	5d                   	pop    ebp
c000dad5:	c3                   	ret    

c000dad6 <TSS::flush()>:
c000dad6:	55                   	push   ebp
c000dad7:	89 e5                	mov    ebp,esp
c000dad9:	83 ec 10             	sub    esp,0x10
c000dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dadf:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae1:	83 c8 03             	or     eax,0x3
c000dae4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000dae8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daec:	66 89 d0             	mov    ax,dx
c000daef:	0f 00 d8             	ltr    ax
c000daf2:	90                   	nop
c000daf3:	c9                   	leave  
c000daf4:	c3                   	ret    
c000daf5:	90                   	nop

c000daf6 <TSS::setup(unsigned long, unsigned long)>:
c000daf6:	55                   	push   ebp
c000daf7:	89 e5                	mov    ebp,esp
c000daf9:	53                   	push   ebx
c000dafa:	83 ec 14             	sub    esp,0x14
c000dafd:	83 ec 0c             	sub    esp,0xc
c000db00:	6a 68                	push   0x68
c000db02:	e8 cc e4 ff ff       	call   c000bfd3 <malloc>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	89 c2                	mov    edx,eax
c000db0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db18:	83 ec 04             	sub    esp,0x4
c000db1b:	6a 68                	push   0x68
c000db1d:	6a 00                	push   0x0
c000db1f:	50                   	push   eax
c000db20:	e8 90 2b ff ff       	call   c00006b5 <memset>
c000db25:	83 c4 10             	add    esp,0x10
c000db28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db2e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db85:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dba7:	e8 29 1c 01 00       	call   c001f7d5 <CPU::readCR3()>
c000dbac:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb5:	83 ec 08             	sub    esp,0x8
c000dbb8:	50                   	push   eax
c000dbb9:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbbc:	50                   	push   eax
c000dbbd:	e8 e8 db ff ff       	call   c000b7aa <GDTEntry::setBase(unsigned int)>
c000dbc2:	83 c4 10             	add    esp,0x10
c000dbc5:	83 ec 08             	sub    esp,0x8
c000dbc8:	6a 68                	push   0x68
c000dbca:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbcd:	50                   	push   eax
c000dbce:	e8 f3 db ff ff       	call   c000b7c6 <GDTEntry::setLimit(unsigned int)>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbda:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbdd:	83 e0 0f             	and    eax,0xf
c000dbe0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbe3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe6:	83 c8 40             	or     eax,0x40
c000dbe9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbec:	e8 d7 6c 00 00       	call   c00148c8 <thisCPU()>
c000dbf1:	05 78 01 00 00       	add    eax,0x178
c000dbf6:	83 ec 04             	sub    esp,0x4
c000dbf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dbfc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dbff:	50                   	push   eax
c000dc00:	e8 f5 db ff ff       	call   c000b7fa <GDT::addEntry(GDTEntry)>
c000dc05:	83 c4 10             	add    esp,0x10
c000dc08:	89 c2                	mov    edx,eax
c000dc0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc0d:	89 10                	mov    DWORD PTR [eax],edx
c000dc0f:	e8 b4 6c 00 00       	call   c00148c8 <thisCPU()>
c000dc14:	05 78 01 00 00       	add    eax,0x178
c000dc19:	83 ec 0c             	sub    esp,0xc
c000dc1c:	50                   	push   eax
c000dc1d:	e8 1c dc ff ff       	call   c000b83e <GDT::flush()>
c000dc22:	83 c4 10             	add    esp,0x10
c000dc25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc28:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc2a:	83 ec 08             	sub    esp,0x8
c000dc2d:	50                   	push   eax
c000dc2e:	68 dc 14 02 c0       	push   0xc00214dc
c000dc33:	e8 cd 15 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000dc38:	83 c4 10             	add    esp,0x10
c000dc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc40:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc43:	c9                   	leave  
c000dc44:	c3                   	ret    
c000dc45:	90                   	nop

c000dc46 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc46:	55                   	push   ebp
c000dc47:	57                   	push   edi
c000dc48:	56                   	push   esi
c000dc49:	53                   	push   ebx
c000dc4a:	83 ec 0c             	sub    esp,0xc
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc55:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc59:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc60:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc64:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc69:	75 08                	jne    c000dc73 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc6b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc71:	eb 5e                	jmp    c000dcd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc73:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc78:	75 3d                	jne    c000dcb7 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc7a:	83 ec 0c             	sub    esp,0xc
c000dc7d:	68 fa 14 02 c0       	push   0xc00214fa
c000dc82:	e8 7e 15 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000dc87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc95:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc97:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dc9b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dc9f:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dca3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dca7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcab:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcae:	83 c4 1c             	add    esp,0x1c
c000dcb1:	5b                   	pop    ebx
c000dcb2:	5e                   	pop    esi
c000dcb3:	5f                   	pop    edi
c000dcb4:	5d                   	pop    ebp
c000dcb5:	ff e0                	jmp    eax
c000dcb7:	89 c2                	mov    edx,eax
c000dcb9:	83 e2 fd             	and    edx,0xfffffffd
c000dcbc:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcc2:	74 a7                	je     c000dc6b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcc9:	83 e0 ef             	and    eax,0xffffffef
c000dccc:	83 f8 08             	cmp    eax,0x8
c000dccf:	76 9a                	jbe    c000dc6b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcd1:	83 c4 0c             	add    esp,0xc
c000dcd4:	31 c0                	xor    eax,eax
c000dcd6:	5b                   	pop    ebx
c000dcd7:	5e                   	pop    esi
c000dcd8:	5f                   	pop    edi
c000dcd9:	5d                   	pop    ebp
c000dcda:	c3                   	ret    
c000dcdb:	90                   	nop

c000dcdc <ReservedFilename::isAtty()>:
c000dcdc:	83 ec 18             	sub    esp,0x18
c000dcdf:	68 07 15 02 c0       	push   0xc0021507
c000dce4:	e8 1c 15 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000dce9:	83 c4 10             	add    esp,0x10
c000dcec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcf0:	31 c0                	xor    eax,eax
c000dcf2:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dcf9:	75 12                	jne    c000dd0d <ReservedFilename::isAtty()+0x31>
c000dcfb:	83 ec 0c             	sub    esp,0xc
c000dcfe:	68 1d 15 02 c0       	push   0xc002151d
c000dd03:	e8 fd 14 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000dd08:	83 c4 10             	add    esp,0x10
c000dd0b:	b0 01                	mov    al,0x1
c000dd0d:	83 c4 0c             	add    esp,0xc
c000dd10:	c3                   	ret    
c000dd11:	90                   	nop

c000dd12 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd12:	55                   	push   ebp
c000dd13:	57                   	push   edi
c000dd14:	56                   	push   esi
c000dd15:	53                   	push   ebx
c000dd16:	83 ec 0c             	sub    esp,0xc
c000dd19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd21:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd25:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd2c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd30:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd35:	75 08                	jne    c000dd3f <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd3d:	eb 63                	jmp    c000dda2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd3f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd44:	75 3d                	jne    c000dd83 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd46:	83 ec 0c             	sub    esp,0xc
c000dd49:	68 30 15 02 c0       	push   0xc0021530
c000dd4e:	e8 b2 14 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000dd53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd61:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd63:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd67:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd6b:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd6f:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd73:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd77:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd7a:	83 c4 1c             	add    esp,0x1c
c000dd7d:	5b                   	pop    ebx
c000dd7e:	5e                   	pop    esi
c000dd7f:	5f                   	pop    edi
c000dd80:	5d                   	pop    ebp
c000dd81:	ff e0                	jmp    eax
c000dd83:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd88:	75 04                	jne    c000dd8e <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd8a:	89 33                	mov    DWORD PTR [ebx],esi
c000dd8c:	eb 14                	jmp    c000dda2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd8e:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd93:	74 a2                	je     c000dd37 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dd95:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd9a:	83 e0 ef             	and    eax,0xffffffef
c000dd9d:	83 f8 08             	cmp    eax,0x8
c000dda0:	76 95                	jbe    c000dd37 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dda2:	83 c4 0c             	add    esp,0xc
c000dda5:	31 c0                	xor    eax,eax
c000dda7:	5b                   	pop    ebx
c000dda8:	5e                   	pop    esi
c000dda9:	5f                   	pop    edi
c000ddaa:	5d                   	pop    ebp
c000ddab:	c3                   	ret    

c000ddac <UnixFile::getFileDescriptor()>:
c000ddac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddb3:	c3                   	ret    

c000ddb4 <UnixFile::UnixFile(int)>:
c000ddb4:	53                   	push   ebx
c000ddb5:	83 ec 18             	sub    esp,0x18
c000ddb8:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000ddbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc1:	89 10                	mov    DWORD PTR [eax],edx
c000ddc3:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddcb:	0f 8f 4d 01 00 00    	jg     c000df1e <UnixFile::UnixFile(int)+0x16a>
c000ddd1:	a1 20 3c 02 c0       	mov    eax,ds:0xc0023c20
c000ddd6:	8d 50 01             	lea    edx,[eax+0x1]
c000ddd9:	89 15 20 3c 02 c0    	mov    DWORD PTR ds:0xc0023c20,edx
c000dddf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dde3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dde6:	83 ec 08             	sub    esp,0x8
c000dde9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dded:	68 d8 48 02 c0       	push   0xc00248d8
c000ddf2:	e8 53 1a 01 00       	call   c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	a0 d4 48 02 c0       	mov    al,ds:0xc00248d4
c000ddff:	83 f0 01             	xor    eax,0x1
c000de02:	84 c0                	test   al,al
c000de04:	0f 84 15 01 00 00    	je     c000df1f <UnixFile::UnixFile(int)+0x16b>
c000de0a:	c6 05 d4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248d4,0x1
c000de11:	83 ec 0c             	sub    esp,0xc
c000de14:	6a 0c                	push   0xc
c000de16:	e8 b5 12 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	89 c3                	mov    ebx,eax
c000de20:	83 ec 08             	sub    esp,0x8
c000de23:	68 03 ff ff 0f       	push   0xfffff03
c000de28:	53                   	push   ebx
c000de29:	e8 f6 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000de2e:	83 c4 10             	add    esp,0x10
c000de31:	89 1d cc 48 02 c0    	mov    DWORD PTR ds:0xc00248cc,ebx
c000de37:	83 ec 0c             	sub    esp,0xc
c000de3a:	6a 0c                	push   0xc
c000de3c:	e8 8f 12 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000de41:	83 c4 10             	add    esp,0x10
c000de44:	89 c3                	mov    ebx,eax
c000de46:	83 ec 08             	sub    esp,0x8
c000de49:	68 01 ff ff 0f       	push   0xfffff01
c000de4e:	53                   	push   ebx
c000de4f:	e8 d0 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	89 1d d0 48 02 c0    	mov    DWORD PTR ds:0xc00248d0,ebx
c000de5d:	83 ec 0c             	sub    esp,0xc
c000de60:	6a 0c                	push   0xc
c000de62:	e8 69 12 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	89 c3                	mov    ebx,eax
c000de6c:	83 ec 08             	sub    esp,0x8
c000de6f:	68 00 ff ff 0f       	push   0xfffff00
c000de74:	53                   	push   ebx
c000de75:	e8 aa 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000de7a:	83 c4 10             	add    esp,0x10
c000de7d:	89 1d c4 48 02 c0    	mov    DWORD PTR ds:0xc00248c4,ebx
c000de83:	83 ec 0c             	sub    esp,0xc
c000de86:	6a 0c                	push   0xc
c000de88:	e8 43 12 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	89 c3                	mov    ebx,eax
c000de92:	83 ec 08             	sub    esp,0x8
c000de95:	68 02 ff ff 0f       	push   0xfffff02
c000de9a:	53                   	push   ebx
c000de9b:	e8 84 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000dea0:	83 c4 10             	add    esp,0x10
c000dea3:	89 1d c8 48 02 c0    	mov    DWORD PTR ds:0xc00248c8,ebx
c000dea9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000deb1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000deb6:	7f 67                	jg     c000df1f <UnixFile::UnixFile(int)+0x16b>
c000deb8:	83 ec 0c             	sub    esp,0xc
c000debb:	6a 0c                	push   0xc
c000debd:	e8 0e 12 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000dec2:	83 c4 10             	add    esp,0x10
c000dec5:	89 c3                	mov    ebx,eax
c000dec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000decb:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ded0:	83 ec 08             	sub    esp,0x8
c000ded3:	50                   	push   eax
c000ded4:	53                   	push   ebx
c000ded5:	e8 4a 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000deda:	83 c4 10             	add    esp,0x10
c000dedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dee1:	89 1c 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],ebx
c000dee8:	83 ec 0c             	sub    esp,0xc
c000deeb:	6a 0c                	push   0xc
c000deed:	e8 de 11 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	89 c3                	mov    ebx,eax
c000def7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000defb:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df00:	83 ec 08             	sub    esp,0x8
c000df03:	50                   	push   eax
c000df04:	53                   	push   ebx
c000df05:	e8 1a 00 00 00       	call   c000df24 <ReservedFilename::ReservedFilename(int)>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df11:	89 1c 85 60 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7a0],ebx
c000df18:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df1c:	eb 93                	jmp    c000deb1 <UnixFile::UnixFile(int)+0xfd>
c000df1e:	90                   	nop
c000df1f:	83 c4 18             	add    esp,0x18
c000df22:	5b                   	pop    ebx
c000df23:	c3                   	ret    

c000df24 <ReservedFilename::ReservedFilename(int)>:
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2b:	83 ec 08             	sub    esp,0x8
c000df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df32:	50                   	push   eax
c000df33:	e8 7c fe ff ff       	call   c000ddb4 <UnixFile::UnixFile(int)>
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df44:	89 10                	mov    DWORD PTR [eax],edx
c000df46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df4e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df51:	90                   	nop
c000df52:	83 c4 0c             	add    esp,0xc
c000df55:	c3                   	ret    

c000df56 <UnixFile::~UnixFile()>:
c000df56:	83 ec 1c             	sub    esp,0x1c
c000df59:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000df5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df62:	89 10                	mov    DWORD PTR [eax],edx
c000df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df6b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df70:	7f 73                	jg     c000dfe5 <UnixFile::~UnixFile()+0x8f>
c000df72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	68 d8 48 02 c0       	push   0xc00248d8
c000df82:	e8 97 19 01 00       	call   c001f91e <LinkedList<UnixFile>::getFirstElement()>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	68 d8 48 02 c0       	push   0xc00248d8
c000df96:	e8 8b 19 01 00       	call   c001f926 <LinkedList<UnixFile>::removeFirst()>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfa2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfa6:	74 40                	je     c000dfe8 <UnixFile::~UnixFile()+0x92>
c000dfa8:	83 ec 08             	sub    esp,0x8
c000dfab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfaf:	68 d8 48 02 c0       	push   0xc00248d8
c000dfb4:	e8 91 18 01 00       	call   c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfb9:	83 c4 10             	add    esp,0x10
c000dfbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfc0:	8d 50 01             	lea    edx,[eax+0x1]
c000dfc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc7:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfcc:	0f 94 c0             	sete   al
c000dfcf:	84 c0                	test   al,al
c000dfd1:	74 a7                	je     c000df7a <UnixFile::~UnixFile()+0x24>
c000dfd3:	83 ec 0c             	sub    esp,0xc
c000dfd6:	68 24 16 02 c0       	push   0xc0021624
c000dfdb:	e8 54 7a 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	eb 95                	jmp    c000df7a <UnixFile::~UnixFile()+0x24>
c000dfe5:	90                   	nop
c000dfe6:	eb 01                	jmp    c000dfe9 <UnixFile::~UnixFile()+0x93>
c000dfe8:	90                   	nop
c000dfe9:	90                   	nop
c000dfea:	83 c4 1c             	add    esp,0x1c
c000dfed:	c3                   	ret    

c000dfee <UnixFile::~UnixFile()>:
c000dfee:	83 ec 0c             	sub    esp,0xc
c000dff1:	83 ec 0c             	sub    esp,0xc
c000dff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff8:	e8 59 ff ff ff       	call   c000df56 <UnixFile::~UnixFile()>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	83 ec 08             	sub    esp,0x8
c000e003:	6a 0c                	push   0xc
c000e005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e009:	e8 d1 10 00 00       	call   c000f0df <operator delete(void*, unsigned long)>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	83 c4 0c             	add    esp,0xc
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <ReservedFilename::~ReservedFilename()>:
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000e01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e022:	89 10                	mov    DWORD PTR [eax],edx
c000e024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	50                   	push   eax
c000e02c:	e8 25 ff ff ff       	call   c000df56 <UnixFile::~UnixFile()>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	90                   	nop
c000e035:	83 c4 0c             	add    esp,0xc
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <ReservedFilename::~ReservedFilename()>:
c000e03a:	83 ec 0c             	sub    esp,0xc
c000e03d:	83 ec 0c             	sub    esp,0xc
c000e040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e044:	e8 cd ff ff ff       	call   c000e016 <ReservedFilename::~ReservedFilename()>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	83 ec 08             	sub    esp,0x8
c000e04f:	6a 0c                	push   0xc
c000e051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e055:	e8 85 10 00 00       	call   c000f0df <operator delete(void*, unsigned long)>
c000e05a:	83 c4 10             	add    esp,0x10
c000e05d:	83 c4 0c             	add    esp,0xc
c000e060:	c3                   	ret    

c000e061 <getFromFileDescriptor(int)>:
c000e061:	53                   	push   ebx
c000e062:	83 ec 08             	sub    esp,0x8
c000e065:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e069:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e06f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e075:	7f 33                	jg     c000e0aa <getFromFileDescriptor(int)+0x49>
c000e077:	83 ec 0c             	sub    esp,0xc
c000e07a:	68 d8 48 02 c0       	push   0xc00248d8
c000e07f:	e8 9a 18 01 00       	call   c001f91e <LinkedList<UnixFile>::getFirstElement()>
c000e084:	83 c4 10             	add    esp,0x10
c000e087:	85 c0                	test   eax,eax
c000e089:	75 07                	jne    c000e092 <getFromFileDescriptor(int)+0x31>
c000e08b:	31 c0                	xor    eax,eax
c000e08d:	e9 98 00 00 00       	jmp    c000e12a <getFromFileDescriptor(int)+0xc9>
c000e092:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e095:	0f 84 8f 00 00 00    	je     c000e12a <getFromFileDescriptor(int)+0xc9>
c000e09b:	52                   	push   edx
c000e09c:	52                   	push   edx
c000e09d:	50                   	push   eax
c000e09e:	68 d8 48 02 c0       	push   0xc00248d8
c000e0a3:	e8 20 19 01 00       	call   c001f9c8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0a8:	eb da                	jmp    c000e084 <getFromFileDescriptor(int)+0x23>
c000e0aa:	83 ec 0c             	sub    esp,0xc
c000e0ad:	68 3d 15 02 c0       	push   0xc002153d
c000e0b2:	e8 4e 11 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	a1 cc 48 02 c0       	mov    eax,ds:0xc00248cc
c000e0bf:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0c5:	74 63                	je     c000e12a <getFromFileDescriptor(int)+0xc9>
c000e0c7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0cd:	75 17                	jne    c000e0e6 <getFromFileDescriptor(int)+0x85>
c000e0cf:	83 ec 0c             	sub    esp,0xc
c000e0d2:	68 64 15 02 c0       	push   0xc0021564
c000e0d7:	e8 29 11 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e0dc:	a1 d0 48 02 c0       	mov    eax,ds:0xc00248d0
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	eb 44                	jmp    c000e12a <getFromFileDescriptor(int)+0xc9>
c000e0e6:	a1 c8 48 02 c0       	mov    eax,ds:0xc00248c8
c000e0eb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e0f1:	74 37                	je     c000e12a <getFromFileDescriptor(int)+0xc9>
c000e0f3:	a1 c4 48 02 c0       	mov    eax,ds:0xc00248c4
c000e0f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e0fe:	74 2a                	je     c000e12a <getFromFileDescriptor(int)+0xc9>
c000e100:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e106:	83 f8 08             	cmp    eax,0x8
c000e109:	77 09                	ja     c000e114 <getFromFileDescriptor(int)+0xb3>
c000e10b:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c000e112:	eb 16                	jmp    c000e12a <getFromFileDescriptor(int)+0xc9>
c000e114:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e11a:	83 fb 08             	cmp    ebx,0x8
c000e11d:	0f 87 68 ff ff ff    	ja     c000e08b <getFromFileDescriptor(int)+0x2a>
c000e123:	8b 04 9d 60 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7a0]
c000e12a:	83 c4 08             	add    esp,0x8
c000e12d:	5b                   	pop    ebx
c000e12e:	c3                   	ret    

c000e12f <__static_initialization_and_destruction_0(int, int)>:
c000e12f:	83 ec 0c             	sub    esp,0xc
c000e132:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e137:	75 34                	jne    c000e16d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e139:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e141:	75 2a                	jne    c000e16d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e143:	83 ec 0c             	sub    esp,0xc
c000e146:	68 d8 48 02 c0       	push   0xc00248d8
c000e14b:	e8 a2 16 01 00       	call   c001f7f2 <LinkedList<UnixFile>::LinkedList()>
c000e150:	83 c4 10             	add    esp,0x10
c000e153:	83 ec 04             	sub    esp,0x4
c000e156:	68 9c 3b 02 c0       	push   0xc0023b9c
c000e15b:	68 d8 48 02 c0       	push   0xc00248d8
c000e160:	68 f0 f7 01 c0       	push   0xc001f7f0
c000e165:	e8 f1 0e 00 00       	call   c000f05b <__cxa_atexit>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	90                   	nop
c000e16e:	83 c4 0c             	add    esp,0xc
c000e171:	c3                   	ret    

c000e172 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	83 ec 08             	sub    esp,0x8
c000e178:	68 ff ff 00 00       	push   0xffff
c000e17d:	6a 01                	push   0x1
c000e17f:	e8 ab ff ff ff       	call   c000e12f <__static_initialization_and_destruction_0(int, int)>
c000e184:	83 c4 10             	add    esp,0x10
c000e187:	83 c4 0c             	add    esp,0xc
c000e18a:	c3                   	ret    
c000e18b:	90                   	nop

c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e18c:	53                   	push   ebx
c000e18d:	8b 15 28 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c28
c000e193:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e197:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e19b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1a1:	89 c8                	mov    eax,ecx
c000e1a3:	d1 e8                	shr    eax,1
c000e1a5:	01 d0                	add    eax,edx
c000e1a7:	83 e1 01             	and    ecx,0x1
c000e1aa:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1ac:	75 09                	jne    c000e1b7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1ae:	83 e2 f0             	and    edx,0xfffffff0
c000e1b1:	09 da                	or     edx,ebx
c000e1b3:	88 10                	mov    BYTE PTR [eax],dl
c000e1b5:	5b                   	pop    ebx
c000e1b6:	c3                   	ret    
c000e1b7:	c1 e3 04             	shl    ebx,0x4
c000e1ba:	83 e2 0f             	and    edx,0xf
c000e1bd:	09 da                	or     edx,ebx
c000e1bf:	88 10                	mov    BYTE PTR [eax],dl
c000e1c1:	5b                   	pop    ebx
c000e1c2:	c3                   	ret    

c000e1c3 <Virt::getPageState(unsigned long)>:
c000e1c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1c7:	8b 0d 28 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c28
c000e1cd:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1d3:	89 d0                	mov    eax,edx
c000e1d5:	d1 e8                	shr    eax,1
c000e1d7:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1da:	88 c8                	mov    al,cl
c000e1dc:	c0 e8 04             	shr    al,0x4
c000e1df:	83 e2 01             	and    edx,0x1
c000e1e2:	75 05                	jne    c000e1e9 <Virt::getPageState(unsigned long)+0x26>
c000e1e4:	88 c8                	mov    al,cl
c000e1e6:	83 e0 0f             	and    eax,0xf
c000e1e9:	c3                   	ret    

c000e1ea <Virt::allocateKernelVirtualPages(int)>:
c000e1ea:	55                   	push   ebp
c000e1eb:	31 ed                	xor    ebp,ebp
c000e1ed:	57                   	push   edi
c000e1ee:	56                   	push   esi
c000e1ef:	53                   	push   ebx
c000e1f0:	31 db                	xor    ebx,ebx
c000e1f2:	83 ec 1c             	sub    esp,0x1c
c000e1f5:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c000e1fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1ff:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e204:	57                   	push   edi
c000e205:	e8 b9 ff ff ff       	call   c000e1c3 <Virt::getPageState(unsigned long)>
c000e20a:	5a                   	pop    edx
c000e20b:	84 c0                	test   al,al
c000e20d:	75 3a                	jne    c000e249 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e20f:	85 db                	test   ebx,ebx
c000e211:	75 02                	jne    c000e215 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e213:	89 fd                	mov    ebp,edi
c000e215:	43                   	inc    ebx
c000e216:	39 f3                	cmp    ebx,esi
c000e218:	74 5a                	je     c000e274 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e21a:	47                   	inc    edi
c000e21b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e221:	76 31                	jbe    c000e254 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e223:	c7 05 24 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c24,0xc8000
c000e22d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e232:	75 28                	jne    c000e25c <Virt::allocateKernelVirtualPages(int)+0x72>
c000e234:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e239:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e23e:	57                   	push   edi
c000e23f:	e8 7f ff ff ff       	call   c000e1c3 <Virt::getPageState(unsigned long)>
c000e244:	5a                   	pop    edx
c000e245:	84 c0                	test   al,al
c000e247:	74 c6                	je     c000e20f <Virt::allocateKernelVirtualPages(int)+0x25>
c000e249:	47                   	inc    edi
c000e24a:	31 db                	xor    ebx,ebx
c000e24c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e252:	77 cf                	ja     c000e223 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e254:	89 3d 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edi
c000e25a:	eb a8                	jmp    c000e204 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	68 7c 16 02 c0       	push   0xc002167c
c000e264:	e8 cb 77 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e269:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c000e26f:	83 c4 10             	add    esp,0x10
c000e272:	eb 90                	jmp    c000e204 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e274:	89 2d 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,ebp
c000e27a:	4b                   	dec    ebx
c000e27b:	74 5f                	je     c000e2dc <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e27d:	85 f6                	test   esi,esi
c000e27f:	74 3d                	je     c000e2be <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e281:	89 e8                	mov    eax,ebp
c000e283:	31 db                	xor    ebx,ebx
c000e285:	8d 7e ff             	lea    edi,[esi-0x1]
c000e288:	eb 14                	jmp    c000e29e <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e28a:	6a 01                	push   0x1
c000e28c:	43                   	inc    ebx
c000e28d:	50                   	push   eax
c000e28e:	e8 f9 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e293:	58                   	pop    eax
c000e294:	39 f3                	cmp    ebx,esi
c000e296:	5a                   	pop    edx
c000e297:	74 25                	je     c000e2be <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e299:	a1 24 3c 02 c0       	mov    eax,ds:0xc0023c24
c000e29e:	8d 50 01             	lea    edx,[eax+0x1]
c000e2a1:	85 db                	test   ebx,ebx
c000e2a3:	89 15 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edx
c000e2a9:	74 20                	je     c000e2cb <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2ab:	39 df                	cmp    edi,ebx
c000e2ad:	75 db                	jne    c000e28a <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2af:	6a 03                	push   0x3
c000e2b1:	43                   	inc    ebx
c000e2b2:	50                   	push   eax
c000e2b3:	e8 d4 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2b8:	59                   	pop    ecx
c000e2b9:	39 f3                	cmp    ebx,esi
c000e2bb:	58                   	pop    eax
c000e2bc:	75 db                	jne    c000e299 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2be:	83 c4 1c             	add    esp,0x1c
c000e2c1:	89 e8                	mov    eax,ebp
c000e2c3:	c1 e0 0c             	shl    eax,0xc
c000e2c6:	5b                   	pop    ebx
c000e2c7:	5e                   	pop    esi
c000e2c8:	5f                   	pop    edi
c000e2c9:	5d                   	pop    ebp
c000e2ca:	c3                   	ret    
c000e2cb:	6a 02                	push   0x2
c000e2cd:	bb 01 00 00 00       	mov    ebx,0x1
c000e2d2:	50                   	push   eax
c000e2d3:	e8 b4 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2d8:	58                   	pop    eax
c000e2d9:	5a                   	pop    edx
c000e2da:	eb bd                	jmp    c000e299 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2dc:	6a 04                	push   0x4
c000e2de:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2e1:	55                   	push   ebp
c000e2e2:	a3 24 3c 02 c0       	mov    ds:0xc0023c24,eax
c000e2e7:	e8 a0 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2ec:	59                   	pop    ecx
c000e2ed:	5b                   	pop    ebx
c000e2ee:	89 e8                	mov    eax,ebp
c000e2f0:	c1 e0 0c             	shl    eax,0xc
c000e2f3:	83 c4 1c             	add    esp,0x1c
c000e2f6:	5b                   	pop    ebx
c000e2f7:	5e                   	pop    esi
c000e2f8:	5f                   	pop    edi
c000e2f9:	5d                   	pop    ebp
c000e2fa:	c3                   	ret    

c000e2fb <Virt::virtualMemorySetup()>:
c000e2fb:	53                   	push   ebx
c000e2fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e301:	83 ec 08             	sub    esp,0x8
c000e304:	6a 0f                	push   0xf
c000e306:	53                   	push   ebx
c000e307:	43                   	inc    ebx
c000e308:	e8 7f fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e30d:	59                   	pop    ecx
c000e30e:	58                   	pop    eax
c000e30f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e315:	75 ed                	jne    c000e304 <Virt::virtualMemorySetup()+0x9>
c000e317:	50                   	push   eax
c000e318:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e31d:	50                   	push   eax
c000e31e:	68 00 00 00 c8       	push   0xc8000000
c000e323:	68 03 18 02 c0       	push   0xc0021803
c000e328:	e8 d8 0e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e32d:	58                   	pop    eax
c000e32e:	5a                   	pop    edx
c000e32f:	68 00 f0 ff ef       	push   0xeffff000
c000e334:	68 17 18 02 c0       	push   0xc0021817
c000e339:	e8 c7 0e 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e33e:	83 c4 10             	add    esp,0x10
c000e341:	50                   	push   eax
c000e342:	50                   	push   eax
c000e343:	6a 00                	push   0x0
c000e345:	53                   	push   ebx
c000e346:	43                   	inc    ebx
c000e347:	e8 40 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e34c:	83 c4 10             	add    esp,0x10
c000e34f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e355:	75 ea                	jne    c000e341 <Virt::virtualMemorySetup()+0x46>
c000e357:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e35c:	51                   	push   ecx
c000e35d:	51                   	push   ecx
c000e35e:	6a 0f                	push   0xf
c000e360:	53                   	push   ebx
c000e361:	43                   	inc    ebx
c000e362:	e8 25 fe ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e370:	75 ea                	jne    c000e35c <Virt::virtualMemorySetup()+0x61>
c000e372:	83 c4 08             	add    esp,0x8
c000e375:	5b                   	pop    ebx
c000e376:	c3                   	ret    

c000e377 <Virt::getAKernelVAS()>:
c000e377:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e37c:	c3                   	ret    

c000e37d <Virt::setupPageSwapping(int)>:
c000e37d:	57                   	push   edi
c000e37e:	56                   	push   esi
c000e37f:	53                   	push   ebx
c000e380:	83 ec 1c             	sub    esp,0x1c
c000e383:	68 14 01 00 00       	push   0x114
c000e388:	e8 43 0d 00 00       	call   c000f0d0 <operator new(unsigned long)>
c000e38d:	83 c4 0c             	add    esp,0xc
c000e390:	8b 3d d4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bd4
c000e396:	89 c6                	mov    esi,eax
c000e398:	57                   	push   edi
c000e399:	68 2b 18 02 c0       	push   0xc002182b
c000e39e:	50                   	push   eax
c000e39f:	e8 98 13 00 00       	call   c000f73c <File::File(char const*, Process*)>
c000e3a4:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3a7:	e8 6c 15 00 00       	call   c000f918 <File::unlink()>
c000e3ac:	58                   	pop    eax
c000e3ad:	5a                   	pop    edx
c000e3ae:	6a 12                	push   0x12
c000e3b0:	56                   	push   esi
c000e3b1:	e8 ea 13 00 00       	call   c000f7a0 <File::open(FileOpenMode)>
c000e3b6:	83 c4 10             	add    esp,0x10
c000e3b9:	85 c0                	test   eax,eax
c000e3bb:	0f 85 b6 00 00 00    	jne    c000e477 <Virt::setupPageSwapping(int)+0xfa>
c000e3c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3cd:	c1 e3 08             	shl    ebx,0x8
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	c1 fb 04             	sar    ebx,0x4
c000e3d6:	68 00 00 01 00       	push   0x10000
c000e3db:	e8 f3 db ff ff       	call   c000bfd3 <malloc>
c000e3e0:	83 c4 0c             	add    esp,0xc
c000e3e3:	89 c7                	mov    edi,eax
c000e3e5:	68 00 00 01 00       	push   0x10000
c000e3ea:	6a 00                	push   0x0
c000e3ec:	50                   	push   eax
c000e3ed:	e8 c3 22 ff ff       	call   c00006b5 <memset>
c000e3f2:	83 c4 10             	add    esp,0x10
c000e3f5:	4b                   	dec    ebx
c000e3f6:	83 fb ff             	cmp    ebx,0xffffffff
c000e3f9:	74 4a                	je     c000e445 <Virt::setupPageSwapping(int)+0xc8>
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 06                	mov    eax,DWORD PTR [esi]
c000e400:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e404:	52                   	push   edx
c000e405:	57                   	push   edi
c000e406:	6a 00                	push   0x0
c000e408:	68 00 00 01 00       	push   0x10000
c000e40d:	56                   	push   esi
c000e40e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e411:	83 c4 20             	add    esp,0x20
c000e414:	85 c0                	test   eax,eax
c000e416:	75 4d                	jne    c000e465 <Virt::setupPageSwapping(int)+0xe8>
c000e418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e41c:	3d 00 00 01 00       	cmp    eax,0x10000
c000e421:	74 d2                	je     c000e3f5 <Virt::setupPageSwapping(int)+0x78>
c000e423:	52                   	push   edx
c000e424:	4b                   	dec    ebx
c000e425:	52                   	push   edx
c000e426:	50                   	push   eax
c000e427:	68 7e 18 02 c0       	push   0xc002187e
c000e42c:	e8 d4 0d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e431:	c7 04 24 87 18 02 c0 	mov    DWORD PTR [esp],0xc0021887
c000e438:	e8 f7 75 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	83 fb ff             	cmp    ebx,0xffffffff
c000e443:	75 b6                	jne    c000e3fb <Virt::setupPageSwapping(int)+0x7e>
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	56                   	push   esi
c000e449:	e8 b0 13 00 00       	call   c000f7fe <File::close()>
c000e44e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e451:	e8 9d db ff ff       	call   c000bff3 <rfree>
c000e456:	8b 06                	mov    eax,DWORD PTR [esi]
c000e458:	89 34 24             	mov    DWORD PTR [esp],esi
c000e45b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e45e:	83 c4 20             	add    esp,0x20
c000e461:	5b                   	pop    ebx
c000e462:	5e                   	pop    esi
c000e463:	5f                   	pop    edi
c000e464:	c3                   	ret    
c000e465:	51                   	push   ecx
c000e466:	51                   	push   ecx
c000e467:	50                   	push   eax
c000e468:	68 66 18 02 c0       	push   0xc0021866
c000e46d:	e8 93 0d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e472:	83 c4 10             	add    esp,0x10
c000e475:	eb a1                	jmp    c000e418 <Virt::setupPageSwapping(int)+0x9b>
c000e477:	53                   	push   ebx
c000e478:	53                   	push   ebx
c000e479:	50                   	push   eax
c000e47a:	68 42 18 02 c0       	push   0xc0021842
c000e47f:	e8 81 0d 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e484:	c7 04 24 4b 18 02 c0 	mov    DWORD PTR [esp],0xc002184b
c000e48b:	e8 a4 75 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	e9 29 ff ff ff       	jmp    c000e3c1 <Virt::setupPageSwapping(int)+0x44>

c000e498 <VAS::VAS()>:
c000e498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a7:	a3 e4 48 02 c0       	mov    ds:0xc00248e4,eax
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b8:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4bf:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4c6:	90                   	nop
c000e4c7:	c3                   	ret    

c000e4c8 <VAS::VAS(VAS*)>:
c000e4c8:	83 ec 0c             	sub    esp,0xc
c000e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4d6:	83 ec 0c             	sub    esp,0xc
c000e4d9:	68 9c 16 02 c0       	push   0xc002169c
c000e4de:	e8 51 75 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e4e3:	83 c4 10             	add    esp,0x10
c000e4e6:	90                   	nop
c000e4e7:	83 c4 0c             	add    esp,0xc
c000e4ea:	c3                   	ret    
c000e4eb:	90                   	nop

c000e4ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f0:	89 c2                	mov    edx,eax
c000e4f2:	c1 ea 16             	shr    edx,0x16
c000e4f5:	c1 e8 0a             	shr    eax,0xa
c000e4f8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e4fd:	19 c9                	sbb    ecx,ecx
c000e4ff:	25 fc 0f 00 00       	and    eax,0xffc
c000e504:	c1 e2 0c             	shl    edx,0xc
c000e507:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e50d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e514:	01 d0                	add    eax,edx
c000e516:	c3                   	ret    
c000e517:	90                   	nop

c000e518 <VAS::getPageTableEntry(unsigned long)>:
c000e518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e51c:	89 ca                	mov    edx,ecx
c000e51e:	c1 ea 16             	shr    edx,0x16
c000e521:	c1 e9 0a             	shr    ecx,0xa
c000e524:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e52a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e530:	c1 e0 0c             	shl    eax,0xc
c000e533:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e536:	c3                   	ret    

c000e537 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e537:	57                   	push   edi
c000e538:	56                   	push   esi
c000e539:	be 01 00 00 00       	mov    esi,0x1
c000e53e:	53                   	push   ebx
c000e53f:	83 ec 10             	sub    esp,0x10
c000e542:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e546:	c1 eb 0c             	shr    ebx,0xc
c000e549:	eb 3e                	jmp    c000e589 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e54b:	e8 27 fe ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c000e550:	51                   	push   ecx
c000e551:	51                   	push   ecx
c000e552:	57                   	push   edi
c000e553:	50                   	push   eax
c000e554:	e8 bf ff ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e560:	8b 00                	mov    eax,DWORD PTR [eax]
c000e562:	f6 c4 04             	test   ah,0x4
c000e565:	75 5f                	jne    c000e5c6 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e567:	80 fa 04             	cmp    dl,0x4
c000e56a:	74 78                	je     c000e5e4 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e56c:	80 fa 02             	cmp    dl,0x2
c000e56f:	0f 84 88 00 00 00    	je     c000e5fd <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e575:	80 fa 03             	cmp    dl,0x3
c000e578:	0f 84 ac 00 00 00    	je     c000e62a <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e57e:	fe ca                	dec    dl
c000e580:	0f 84 92 00 00 00    	je     c000e618 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e586:	43                   	inc    ebx
c000e587:	31 f6                	xor    esi,esi
c000e589:	53                   	push   ebx
c000e58a:	e8 34 fc ff ff       	call   c000e1c3 <Virt::getPageState(unsigned long)>
c000e58f:	5f                   	pop    edi
c000e590:	89 df                	mov    edi,ebx
c000e592:	c1 e7 0c             	shl    edi,0xc
c000e595:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e599:	84 c0                	test   al,al
c000e59b:	75 ae                	jne    c000e54b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e59d:	83 ec 0c             	sub    esp,0xc
c000e5a0:	68 8d 18 02 c0       	push   0xc002188d
c000e5a5:	e8 8a 74 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e5aa:	e8 c8 fd ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c000e5af:	5a                   	pop    edx
c000e5b0:	59                   	pop    ecx
c000e5b1:	57                   	push   edi
c000e5b2:	50                   	push   eax
c000e5b3:	e8 60 ff ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c000e5b8:	83 c4 10             	add    esp,0x10
c000e5bb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5c1:	f6 c4 04             	test   ah,0x4
c000e5c4:	74 c0                	je     c000e586 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5c6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5ca:	83 ec 0c             	sub    esp,0xc
c000e5cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5d2:	50                   	push   eax
c000e5d3:	e8 44 df ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e5d8:	83 c4 10             	add    esp,0x10
c000e5db:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5df:	80 fa 04             	cmp    dl,0x4
c000e5e2:	75 88                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5e4:	89 f0                	mov    eax,esi
c000e5e6:	84 c0                	test   al,al
c000e5e8:	75 46                	jne    c000e630 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5ea:	c7 44 24 20 c0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216c0
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	5b                   	pop    ebx
c000e5f6:	5e                   	pop    esi
c000e5f7:	5f                   	pop    edi
c000e5f8:	e9 37 74 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c000e5fd:	89 f0                	mov    eax,esi
c000e5ff:	84 c0                	test   al,al
c000e601:	75 15                	jne    c000e618 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e603:	83 ec 0c             	sub    esp,0xc
c000e606:	68 a9 18 02 c0       	push   0xc00218a9
c000e60b:	e8 24 74 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	e9 6e ff ff ff       	jmp    c000e586 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e618:	50                   	push   eax
c000e619:	50                   	push   eax
c000e61a:	6a 00                	push   0x0
c000e61c:	53                   	push   ebx
c000e61d:	e8 6a fb ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	e9 5c ff ff ff       	jmp    c000e586 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e62a:	89 f0                	mov    eax,esi
c000e62c:	84 c0                	test   al,al
c000e62e:	75 14                	jne    c000e644 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e630:	52                   	push   edx
c000e631:	52                   	push   edx
c000e632:	6a 00                	push   0x0
c000e634:	53                   	push   ebx
c000e635:	e8 52 fb ff ff       	call   c000e18c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e63a:	83 c4 10             	add    esp,0x10
c000e63d:	83 c4 10             	add    esp,0x10
c000e640:	5b                   	pop    ebx
c000e641:	5e                   	pop    esi
c000e642:	5f                   	pop    edi
c000e643:	c3                   	ret    
c000e644:	c7 44 24 20 c5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218c5
c000e64c:	83 c4 10             	add    esp,0x10
c000e64f:	5b                   	pop    ebx
c000e650:	5e                   	pop    esi
c000e651:	5f                   	pop    edi
c000e652:	e9 dd 73 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c000e657:	90                   	nop

c000e658 <VAS::freeAllocatedPages(unsigned long)>:
c000e658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e65c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e660:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e664:	74 09                	je     c000e66f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e666:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e66a:	e9 c8 fe ff ff       	jmp    c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c000e66f:	c7 44 24 04 e4 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216e4
c000e677:	e9 89 0b 00 00       	jmp    c000f205 <Dbg::kprintf(char const*, ...)>

c000e67c <VAS::virtualToPhysical(unsigned long)>:
c000e67c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e680:	50                   	push   eax
c000e681:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e685:	52                   	push   edx
c000e686:	e8 8d fe ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c000e68b:	59                   	pop    ecx
c000e68c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e68e:	5a                   	pop    edx
c000e68f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e694:	c3                   	ret    
c000e695:	90                   	nop

c000e696 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e696:	55                   	push   ebp
c000e697:	57                   	push   edi
c000e698:	56                   	push   esi
c000e699:	53                   	push   ebx
c000e69a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e69e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6a2:	89 c3                	mov    ebx,eax
c000e6a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6a8:	c1 e3 0c             	shl    ebx,0xc
c000e6ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6af:	01 f3                	add    ebx,esi
c000e6b1:	85 c0                	test   eax,eax
c000e6b3:	7e 1f                	jle    c000e6d4 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6b5:	56                   	push   esi
c000e6b6:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6bc:	55                   	push   ebp
c000e6bd:	e8 56 fe ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c000e6c2:	5a                   	pop    edx
c000e6c3:	59                   	pop    ecx
c000e6c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6c6:	21 f9                	and    ecx,edi
c000e6c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6cc:	09 d1                	or     ecx,edx
c000e6ce:	39 f3                	cmp    ebx,esi
c000e6d0:	89 08                	mov    DWORD PTR [eax],ecx
c000e6d2:	75 e1                	jne    c000e6b5 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6d4:	5b                   	pop    ebx
c000e6d5:	5e                   	pop    esi
c000e6d6:	5f                   	pop    edi
c000e6d7:	5d                   	pop    ebp
c000e6d8:	c3                   	ret    
c000e6d9:	90                   	nop

c000e6da <VAS::setToWriteCombining(unsigned long, int)>:
c000e6da:	83 ec 0c             	sub    esp,0xc
c000e6dd:	e8 e6 61 00 00       	call   c00148c8 <thisCPU()>
c000e6e2:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6e9:	75 04                	jne    c000e6ef <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6eb:	83 c4 0c             	add    esp,0xc
c000e6ee:	c3                   	ret    
c000e6ef:	83 ec 0c             	sub    esp,0xc
c000e6f2:	68 80 00 00 00       	push   0x80
c000e6f7:	6a ff                	push   0xffffffff
c000e6f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6fd:	50                   	push   eax
c000e6fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e702:	52                   	push   edx
c000e703:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e707:	51                   	push   ecx
c000e708:	e8 89 ff ff ff       	call   c000e696 <VAS::reflagRange(unsigned long, int, int, int)>
c000e70d:	83 c4 20             	add    esp,0x20
c000e710:	83 c4 0c             	add    esp,0xc
c000e713:	c3                   	ret    

c000e714 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e720:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e727:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e72a:	19 c0                	sbb    eax,eax
c000e72c:	83 ca 03             	or     edx,0x3
c000e72f:	83 e0 fc             	and    eax,0xfffffffc
c000e732:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e739:	e8 97 10 01 00       	call   c001f7d5 <CPU::readCR3()>
c000e73e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e742:	83 c4 0c             	add    esp,0xc
c000e745:	e9 9d 10 01 00       	jmp    c001f7e7 <CPU::writeCR3(unsigned long)>

c000e74a <VAS::~VAS()>:
c000e74a:	83 ec 2c             	sub    esp,0x2c
c000e74d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e755:	e8 e3 a2 00 00       	call   c0018a3d <lockScheduler()>
c000e75a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e75f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e761:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e764:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e76a:	83 ec 04             	sub    esp,0x4
c000e76d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e771:	6a 01                	push   0x1
c000e773:	50                   	push   eax
c000e774:	e8 9b ff ff ff       	call   c000e714 <VAS::mapOtherVASIn(bool, VAS*)>
c000e779:	83 c4 10             	add    esp,0x10
c000e77c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e784:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e78c:	0f 8f d7 00 00 00    	jg     c000e869 <VAS::~VAS()+0x11f>
c000e792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e796:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e79d:	c1 e2 02             	shl    edx,0x2
c000e7a0:	01 d0                	add    eax,edx
c000e7a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ac:	83 e0 01             	and    eax,0x1
c000e7af:	0f 84 ab 00 00 00    	je     c000e860 <VAS::~VAS()+0x116>
c000e7b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7bd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7c5:	7f 75                	jg     c000e83c <VAS::~VAS()+0xf2>
c000e7c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7cb:	c1 e0 0a             	shl    eax,0xa
c000e7ce:	89 c2                	mov    edx,eax
c000e7d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7d4:	01 d0                	add    eax,edx
c000e7d6:	c1 e0 0c             	shl    eax,0xc
c000e7d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7e7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7ed:	83 ec 04             	sub    esp,0x4
c000e7f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e7f4:	6a 01                	push   0x1
c000e7f6:	50                   	push   eax
c000e7f7:	e8 f0 fc ff ff       	call   c000e4ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e807:	8b 00                	mov    eax,DWORD PTR [eax]
c000e809:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e811:	25 01 04 00 00       	and    eax,0x401
c000e816:	3d 01 04 00 00       	cmp    eax,0x401
c000e81b:	75 19                	jne    c000e836 <VAS::~VAS()+0xec>
c000e81d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e821:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e826:	83 ec 0c             	sub    esp,0xc
c000e829:	50                   	push   eax
c000e82a:	e8 ed dc ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e82f:	83 c4 10             	add    esp,0x10
c000e832:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e836:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e83a:	eb 81                	jmp    c000e7bd <VAS::~VAS()+0x73>
c000e83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e840:	25 00 04 00 00       	and    eax,0x400
c000e845:	74 19                	je     c000e860 <VAS::~VAS()+0x116>
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	50                   	push   eax
c000e854:	e8 c3 dc ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e859:	83 c4 10             	add    esp,0x10
c000e85c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e860:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e864:	e9 1b ff ff ff       	jmp    c000e784 <VAS::~VAS()+0x3a>
c000e869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e86d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e870:	83 ec 0c             	sub    esp,0xc
c000e873:	50                   	push   eax
c000e874:	e8 be fc ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e880:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e883:	83 ec 0c             	sub    esp,0xc
c000e886:	50                   	push   eax
c000e887:	e8 90 dc ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e897:	c1 e0 02             	shl    eax,0x2
c000e89a:	83 ec 08             	sub    esp,0x8
c000e89d:	50                   	push   eax
c000e89e:	68 08 17 02 c0       	push   0xc0021708
c000e8a3:	e8 5d 09 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e8a8:	83 c4 10             	add    esp,0x10
c000e8ab:	e8 8f a1 00 00       	call   c0018a3f <unlockScheduler()>
c000e8b0:	90                   	nop
c000e8b1:	83 c4 2c             	add    esp,0x2c
c000e8b4:	c3                   	ret    
c000e8b5:	90                   	nop

c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8b6:	55                   	push   ebp
c000e8b7:	57                   	push   edi
c000e8b8:	56                   	push   esi
c000e8b9:	53                   	push   ebx
c000e8ba:	83 ec 1c             	sub    esp,0x1c
c000e8bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8c5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8cb:	77 08                	ja     c000e8d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8cd:	0f 20 d8             	mov    eax,cr3
c000e8d0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8d3:	75 49                	jne    c000e91e <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8d9:	09 d8                	or     eax,ebx
c000e8db:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8e0:	75 59                	jne    c000e93b <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8e2:	89 de                	mov    esi,ebx
c000e8e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8e7:	c1 ee 16             	shr    esi,0x16
c000e8ea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e8f1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e8f5:	74 56                	je     c000e94d <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e8f7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e8fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e901:	c1 eb 0a             	shr    ebx,0xa
c000e904:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e908:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e90e:	09 d0                	or     eax,edx
c000e910:	c1 e6 0c             	shl    esi,0xc
c000e913:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e916:	83 c4 1c             	add    esp,0x1c
c000e919:	5b                   	pop    ebx
c000e91a:	5e                   	pop    esi
c000e91b:	5f                   	pop    edi
c000e91c:	5d                   	pop    ebp
c000e91d:	c3                   	ret    
c000e91e:	83 ec 0c             	sub    esp,0xc
c000e921:	68 28 17 02 c0       	push   0xc0021728
c000e926:	e8 da 08 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e932:	09 d8                	or     eax,ebx
c000e934:	a9 ff 0f 00 00       	test   eax,0xfff
c000e939:	74 a7                	je     c000e8e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e93b:	83 ec 0c             	sub    esp,0xc
c000e93e:	68 90 17 02 c0       	push   0xc0021790
c000e943:	e8 ec 70 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000e948:	83 c4 10             	add    esp,0x10
c000e94b:	eb 95                	jmp    c000e8e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e94d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e951:	e8 53 dc ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000e956:	89 c5                	mov    ebp,eax
c000e958:	e8 1a fa ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c000e95d:	83 ec 0c             	sub    esp,0xc
c000e960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e964:	6a 01                	push   0x1
c000e966:	e8 7f f8 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c000e96b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e972:	6a 01                	push   0x1
c000e974:	50                   	push   eax
c000e975:	55                   	push   ebp
c000e976:	81 cd 07 04 00 00    	or     ebp,0x407
c000e97c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e980:	51                   	push   ecx
c000e981:	e8 22 02 00 00       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e986:	83 c4 1c             	add    esp,0x1c
c000e989:	68 00 10 00 00       	push   0x1000
c000e98e:	6a 00                	push   0x0
c000e990:	50                   	push   eax
c000e991:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e995:	e8 1b 1d ff ff       	call   c00006b5 <memset>
c000e99a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e99e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9a1:	e8 91 fb ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9b3:	e9 3f ff ff ff       	jmp    c000e8f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9b8 <VAS::allocatePages(int, int)>:
c000e9b8:	55                   	push   ebp
c000e9b9:	57                   	push   edi
c000e9ba:	56                   	push   esi
c000e9bb:	53                   	push   ebx
c000e9bc:	83 ec 1c             	sub    esp,0x1c
c000e9bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9c3:	e8 00 5f 00 00       	call   c00148c8 <thisCPU()>
c000e9c8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9ce:	83 e0 01             	and    eax,0x1
c000e9d1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9d5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9d9:	0f 85 d5 00 00 00    	jne    c000eab4 <VAS::allocatePages(int, int)+0xfc>
c000e9df:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9e6:	85 c0                	test   eax,eax
c000e9e8:	0f 84 aa 00 00 00    	je     c000ea98 <VAS::allocatePages(int, int)+0xe0>
c000e9ee:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e9f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9f6:	c1 e6 0c             	shl    esi,0xc
c000e9f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e9fd:	01 de                	add    esi,ebx
c000e9ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea03:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea09:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea0c:	85 c0                	test   eax,eax
c000ea0e:	7e 25                	jle    c000ea35 <VAS::allocatePages(int, int)+0x7d>
c000ea10:	e8 94 db ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ea15:	55                   	push   ebp
c000ea16:	53                   	push   ebx
c000ea17:	50                   	push   eax
c000ea18:	57                   	push   edi
c000ea19:	e8 98 fe ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea26:	74 03                	je     c000ea2b <VAS::allocatePages(int, int)+0x73>
c000ea28:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea31:	39 de                	cmp    esi,ebx
c000ea33:	75 db                	jne    c000ea10 <VAS::allocatePages(int, int)+0x58>
c000ea35:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea3a:	74 3f                	je     c000ea7b <VAS::allocatePages(int, int)+0xc3>
c000ea3c:	c1 ee 0a             	shr    esi,0xa
c000ea3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea43:	c1 eb 0a             	shr    ebx,0xa
c000ea46:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea4c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea52:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea58:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea5e:	39 f3                	cmp    ebx,esi
c000ea60:	77 0d                	ja     c000ea6f <VAS::allocatePages(int, int)+0xb7>
c000ea62:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea65:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea6b:	39 de                	cmp    esi,ebx
c000ea6d:	73 f3                	jae    c000ea62 <VAS::allocatePages(int, int)+0xaa>
c000ea6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea73:	83 c4 1c             	add    esp,0x1c
c000ea76:	5b                   	pop    ebx
c000ea77:	5e                   	pop    esi
c000ea78:	5f                   	pop    edi
c000ea79:	5d                   	pop    ebp
c000ea7a:	c3                   	ret    
c000ea7b:	e8 55 0d 01 00       	call   c001f7d5 <CPU::readCR3()>
c000ea80:	83 ec 0c             	sub    esp,0xc
c000ea83:	50                   	push   eax
c000ea84:	e8 5e 0d 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea90:	83 c4 1c             	add    esp,0x1c
c000ea93:	5b                   	pop    ebx
c000ea94:	5e                   	pop    esi
c000ea95:	5f                   	pop    edi
c000ea96:	5d                   	pop    ebp
c000ea97:	c3                   	ret    
c000ea98:	83 ec 0c             	sub    esp,0xc
c000ea9b:	68 b4 17 02 c0       	push   0xc00217b4
c000eaa0:	e8 8f 6f 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000eaa5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eaa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eaac:	83 c4 10             	add    esp,0x10
c000eaaf:	e9 3a ff ff ff       	jmp    c000e9ee <VAS::allocatePages(int, int)+0x36>
c000eab4:	83 ec 0c             	sub    esp,0xc
c000eab7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eabb:	53                   	push   ebx
c000eabc:	e8 29 f7 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c000eac1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eac5:	83 c4 10             	add    esp,0x10
c000eac8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eacd:	0f 87 94 00 00 00    	ja     c000eb67 <VAS::allocatePages(int, int)+0x1af>
c000ead3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ead7:	85 d2                	test   edx,edx
c000ead9:	7e 3c                	jle    c000eb17 <VAS::allocatePages(int, int)+0x15f>
c000eadb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eadf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eae3:	c1 e5 0c             	shl    ebp,0xc
c000eae6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eaea:	81 ce 00 04 00 00    	or     esi,0x400
c000eaf0:	01 dd                	add    ebp,ebx
c000eaf2:	e8 b2 da ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000eaf7:	56                   	push   esi
c000eaf8:	53                   	push   ebx
c000eaf9:	50                   	push   eax
c000eafa:	57                   	push   edi
c000eafb:	e8 b6 fd ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb08:	74 03                	je     c000eb0d <VAS::allocatePages(int, int)+0x155>
c000eb0a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb0d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb13:	39 dd                	cmp    ebp,ebx
c000eb15:	75 db                	jne    c000eaf2 <VAS::allocatePages(int, int)+0x13a>
c000eb17:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb1c:	0f 84 59 ff ff ff    	je     c000ea7b <VAS::allocatePages(int, int)+0xc3>
c000eb22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb2a:	c1 e0 0c             	shl    eax,0xc
c000eb2d:	89 d3                	mov    ebx,edx
c000eb2f:	c1 eb 0a             	shr    ebx,0xa
c000eb32:	01 d0                	add    eax,edx
c000eb34:	c1 e8 0a             	shr    eax,0xa
c000eb37:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb42:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb48:	2d 00 00 40 00       	sub    eax,0x400000
c000eb4d:	39 c3                	cmp    ebx,eax
c000eb4f:	0f 87 1a ff ff ff    	ja     c000ea6f <VAS::allocatePages(int, int)+0xb7>
c000eb55:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb58:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5e:	39 d8                	cmp    eax,ebx
c000eb60:	73 f3                	jae    c000eb55 <VAS::allocatePages(int, int)+0x19d>
c000eb62:	e9 08 ff ff ff       	jmp    c000ea6f <VAS::allocatePages(int, int)+0xb7>
c000eb67:	e8 5c 5d 00 00       	call   c00148c8 <thisCPU()>
c000eb6c:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb73:	0f 84 5a ff ff ff    	je     c000ead3 <VAS::allocatePages(int, int)+0x11b>
c000eb79:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb7d:	80 cd 01             	or     ch,0x1
c000eb80:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb84:	e9 4a ff ff ff       	jmp    c000ead3 <VAS::allocatePages(int, int)+0x11b>
c000eb89:	90                   	nop

c000eb8a <VAS::setCPUSpecific(unsigned long)>:
c000eb8a:	83 ec 0c             	sub    esp,0xc
c000eb8d:	6a 05                	push   0x5
c000eb8f:	68 00 00 40 c2       	push   0xc2400000
c000eb94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb98:	50                   	push   eax
c000eb99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb9d:	52                   	push   edx
c000eb9e:	e8 13 fd ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eba3:	83 c4 1c             	add    esp,0x1c
c000eba6:	c3                   	ret    
c000eba7:	90                   	nop

c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eba8:	55                   	push   ebp
c000eba9:	57                   	push   edi
c000ebaa:	56                   	push   esi
c000ebab:	53                   	push   ebx
c000ebac:	83 ec 1c             	sub    esp,0x1c
c000ebaf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebb3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebb7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebbb:	e8 08 5d 00 00       	call   c00148c8 <thisCPU()>
c000ebc0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebc6:	83 e0 01             	and    eax,0x1
c000ebc9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd1:	85 c0                	test   eax,eax
c000ebd3:	7e 39                	jle    c000ec0e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd9:	89 f3                	mov    ebx,esi
c000ebdb:	c1 e0 0c             	shl    eax,0xc
c000ebde:	01 f0                	add    eax,esi
c000ebe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebe4:	55                   	push   ebp
c000ebe5:	53                   	push   ebx
c000ebe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebea:	29 f0                	sub    eax,esi
c000ebec:	01 d8                	add    eax,ebx
c000ebee:	50                   	push   eax
c000ebef:	57                   	push   edi
c000ebf0:	e8 c1 fc ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ebfd:	74 03                	je     c000ec02 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ebff:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec02:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec08:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec0c:	75 d6                	jne    c000ebe4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec0e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec13:	74 42                	je     c000ec57 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec19:	89 f3                	mov    ebx,esi
c000ec1b:	c1 e0 0c             	shl    eax,0xc
c000ec1e:	c1 eb 0a             	shr    ebx,0xa
c000ec21:	01 f0                	add    eax,esi
c000ec23:	c1 e8 0a             	shr    eax,0xa
c000ec26:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec31:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec37:	2d 00 00 40 00       	sub    eax,0x400000
c000ec3c:	39 c3                	cmp    ebx,eax
c000ec3e:	77 0d                	ja     c000ec4d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec43:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec49:	39 d8                	cmp    eax,ebx
c000ec4b:	73 f3                	jae    c000ec40 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec4d:	83 c4 1c             	add    esp,0x1c
c000ec50:	89 f0                	mov    eax,esi
c000ec52:	5b                   	pop    ebx
c000ec53:	5e                   	pop    esi
c000ec54:	5f                   	pop    edi
c000ec55:	5d                   	pop    ebp
c000ec56:	c3                   	ret    
c000ec57:	e8 79 0b 01 00       	call   c001f7d5 <CPU::readCR3()>
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	50                   	push   eax
c000ec60:	e8 82 0b 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	89 f0                	mov    eax,esi
c000ec6a:	83 c4 1c             	add    esp,0x1c
c000ec6d:	5b                   	pop    ebx
c000ec6e:	5e                   	pop    esi
c000ec6f:	5f                   	pop    edi
c000ec70:	5d                   	pop    ebp
c000ec71:	c3                   	ret    

c000ec72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec72:	55                   	push   ebp
c000ec73:	57                   	push   edi
c000ec74:	56                   	push   esi
c000ec75:	53                   	push   ebx
c000ec76:	83 ec 1c             	sub    esp,0x1c
c000ec79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec7d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec81:	09 f0                	or     eax,esi
c000ec83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec87:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec8b:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec90:	75 4c                	jne    c000ecde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ec92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec96:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec99:	c1 eb 16             	shr    ebx,0x16
c000ec9c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eca3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eca7:	74 4f                	je     c000ecf8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000eca9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecad:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecb1:	c1 e8 0a             	shr    eax,0xa
c000ecb4:	80 fa 01             	cmp    dl,0x1
c000ecb7:	19 d2                	sbb    edx,edx
c000ecb9:	25 fc 0f 00 00       	and    eax,0xffc
c000ecbe:	c1 e3 0c             	shl    ebx,0xc
c000ecc1:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecc7:	01 d8                	add    eax,ebx
c000ecc9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eccd:	09 d9                	or     ecx,ebx
c000eccf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ecd6:	83 c4 1c             	add    esp,0x1c
c000ecd9:	5b                   	pop    ebx
c000ecda:	5e                   	pop    esi
c000ecdb:	5f                   	pop    edi
c000ecdc:	5d                   	pop    ebp
c000ecdd:	c3                   	ret    
c000ecde:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	68 e0 17 02 c0       	push   0xc00217e0
c000ecea:	e8 45 6d 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000ecef:	83 c4 10             	add    esp,0x10
c000ecf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecf6:	eb 9a                	jmp    c000ec92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ecf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ecfc:	e8 a8 d8 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ed01:	89 c5                	mov    ebp,eax
c000ed03:	e8 6f f6 ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c000ed08:	83 ec 0c             	sub    esp,0xc
c000ed0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed0f:	6a 01                	push   0x1
c000ed11:	e8 d4 f4 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c000ed16:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed1d:	6a 01                	push   0x1
c000ed1f:	50                   	push   eax
c000ed20:	55                   	push   ebp
c000ed21:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed27:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed2b:	51                   	push   ecx
c000ed2c:	e8 77 fe ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed31:	83 c4 1c             	add    esp,0x1c
c000ed34:	68 00 10 00 00       	push   0x1000
c000ed39:	6a 00                	push   0x0
c000ed3b:	50                   	push   eax
c000ed3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed40:	e8 70 19 ff ff       	call   c00006b5 <memset>
c000ed45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed49:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed4c:	e8 e6 f7 ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed51:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed54:	83 c4 10             	add    esp,0x10
c000ed57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed5b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed5e:	e9 46 ff ff ff       	jmp    c000eca9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed63:	90                   	nop

c000ed64 <VAS::VAS(bool)>:
c000ed64:	53                   	push   ebx
c000ed65:	83 ec 28             	sub    esp,0x28
c000ed68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed7f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed83:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed86:	e8 1e d8 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000ed8b:	89 c2                	mov    edx,eax
c000ed8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed91:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ed94:	e8 de f5 ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c000ed99:	89 c3                	mov    ebx,eax
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	6a 01                	push   0x1
c000eda0:	e8 45 f4 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c000eda5:	83 c4 10             	add    esp,0x10
c000eda8:	89 c2                	mov    edx,eax
c000edaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	6a 03                	push   0x3
c000edb6:	6a 01                	push   0x1
c000edb8:	52                   	push   edx
c000edb9:	50                   	push   eax
c000edba:	53                   	push   ebx
c000edbb:	e8 e8 fd ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edc0:	83 c4 20             	add    esp,0x20
c000edc3:	89 c2                	mov    edx,eax
c000edc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edcc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edd4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000eddc:	7f 1c                	jg     c000edfa <VAS::VAS(bool)+0x96>
c000edde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ede5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ede9:	c1 e2 02             	shl    edx,0x2
c000edec:	01 d0                	add    eax,edx
c000edee:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edf4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000edf8:	eb da                	jmp    c000edd4 <VAS::VAS(bool)+0x70>
c000edfa:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee02:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee0a:	7f 71                	jg     c000ee7d <VAS::VAS(bool)+0x119>
c000ee0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee10:	2d 00 02 00 00       	sub    eax,0x200
c000ee15:	c1 e0 0c             	shl    eax,0xc
c000ee18:	83 c8 03             	or     eax,0x3
c000ee1b:	89 c3                	mov    ebx,eax
c000ee1d:	e8 a6 5a 00 00       	call   c00148c8 <thisCPU()>
c000ee22:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee28:	83 e0 10             	and    eax,0x10
c000ee2b:	84 c0                	test   al,al
c000ee2d:	74 07                	je     c000ee36 <VAS::VAS(bool)+0xd2>
c000ee2f:	b8 00 01 00 00       	mov    eax,0x100
c000ee34:	eb 05                	jmp    c000ee3b <VAS::VAS(bool)+0xd7>
c000ee36:	b8 00 00 00 00       	mov    eax,0x0
c000ee3b:	09 d8                	or     eax,ebx
c000ee3d:	89 c1                	mov    ecx,eax
c000ee3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee46:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee4a:	c1 e2 02             	shl    edx,0x2
c000ee4d:	01 d0                	add    eax,edx
c000ee4f:	89 ca                	mov    edx,ecx
c000ee51:	89 10                	mov    DWORD PTR [eax],edx
c000ee53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee57:	2d 40 03 00 00       	sub    eax,0x340
c000ee5c:	83 f8 7f             	cmp    eax,0x7f
c000ee5f:	77 16                	ja     c000ee77 <VAS::VAS(bool)+0x113>
c000ee61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee6c:	c1 e2 02             	shl    edx,0x2
c000ee6f:	01 d0                	add    eax,edx
c000ee71:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee77:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee7b:	eb 85                	jmp    c000ee02 <VAS::VAS(bool)+0x9e>
c000ee7d:	e8 46 5a 00 00       	call   c00148c8 <thisCPU()>
c000ee82:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee88:	83 e0 10             	and    eax,0x10
c000ee8b:	84 c0                	test   al,al
c000ee8d:	74 07                	je     c000ee96 <VAS::VAS(bool)+0x132>
c000ee8f:	b8 03 41 00 00       	mov    eax,0x4103
c000ee94:	eb 05                	jmp    c000ee9b <VAS::VAS(bool)+0x137>
c000ee96:	b8 03 40 00 00       	mov    eax,0x4003
c000ee9b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee9f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eea2:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eea8:	89 02                	mov    DWORD PTR [edx],eax
c000eeaa:	e8 19 5a 00 00       	call   c00148c8 <thisCPU()>
c000eeaf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eeb5:	83 ec 08             	sub    esp,0x8
c000eeb8:	50                   	push   eax
c000eeb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebd:	e8 c8 fc ff ff       	call   c000eb8a <VAS::setCPUSpecific(unsigned long)>
c000eec2:	83 c4 10             	add    esp,0x10
c000eec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eec9:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eecc:	e8 f7 59 00 00       	call   c00148c8 <thisCPU()>
c000eed1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eed7:	83 e0 10             	and    eax,0x10
c000eeda:	84 c0                	test   al,al
c000eedc:	74 07                	je     c000eee5 <VAS::VAS(bool)+0x181>
c000eede:	b8 00 01 00 00       	mov    eax,0x100
c000eee3:	eb 05                	jmp    c000eeea <VAS::VAS(bool)+0x186>
c000eee5:	b8 00 00 00 00       	mov    eax,0x0
c000eeea:	09 d8                	or     eax,ebx
c000eeec:	89 c2                	mov    edx,eax
c000eeee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eef5:	05 fc 0f 00 00       	add    eax,0xffc
c000eefa:	83 ca 03             	or     edx,0x3
c000eefd:	89 10                	mov    DWORD PTR [eax],edx
c000eeff:	e8 c4 59 00 00       	call   c00148c8 <thisCPU()>
c000ef04:	83 ec 0c             	sub    esp,0xc
c000ef07:	50                   	push   eax
c000ef08:	e8 ef 19 00 00       	call   c00108fc <Device::getName()>
c000ef0d:	83 c4 10             	add    esp,0x10
c000ef10:	83 ec 08             	sub    esp,0x8
c000ef13:	68 df 18 02 c0       	push   0xc00218df
c000ef18:	50                   	push   eax
c000ef19:	e8 87 18 ff ff       	call   c00007a5 <strcmp>
c000ef1e:	83 c4 10             	add    esp,0x10
c000ef21:	85 c0                	test   eax,eax
c000ef23:	0f 94 c0             	sete   al
c000ef26:	84 c0                	test   al,al
c000ef28:	74 64                	je     c000ef8e <VAS::VAS(bool)+0x22a>
c000ef2a:	e8 ec 9a 00 00       	call   c0018a1b <disableIRQs()>
c000ef2f:	e8 94 59 00 00       	call   c00148c8 <thisCPU()>
c000ef34:	05 7c 09 00 00       	add    eax,0x97c
c000ef39:	83 ec 0c             	sub    esp,0xc
c000ef3c:	50                   	push   eax
c000ef3d:	e8 04 cb ff ff       	call   c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef4a:	89 c3                	mov    ebx,eax
c000ef4c:	e8 77 59 00 00       	call   c00148c8 <thisCPU()>
c000ef51:	05 7c 09 00 00       	add    eax,0x97c
c000ef56:	83 ec 0c             	sub    esp,0xc
c000ef59:	50                   	push   eax
c000ef5a:	e8 e7 ca ff ff       	call   c000ba46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	83 ec 08             	sub    esp,0x8
c000ef65:	50                   	push   eax
c000ef66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef6a:	e8 a9 f5 ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef74:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef79:	6a 11                	push   0x11
c000ef7b:	53                   	push   ebx
c000ef7c:	50                   	push   eax
c000ef7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef81:	e8 30 f9 ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef86:	83 c4 10             	add    esp,0x10
c000ef89:	e8 a0 9a 00 00       	call   c0018a2e <enableIRQs()>
c000ef8e:	90                   	nop
c000ef8f:	83 c4 28             	add    esp,0x28
c000ef92:	5b                   	pop    ebx
c000ef93:	c3                   	ret    

c000ef94 <mapVASFirstTime>:
c000ef94:	55                   	push   ebp
c000ef95:	57                   	push   edi
c000ef96:	56                   	push   esi
c000ef97:	53                   	push   ebx
c000ef98:	83 ec 0c             	sub    esp,0xc
c000ef9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efa0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efa3:	4a                   	dec    edx
c000efa4:	0f 84 99 00 00 00    	je     c000f043 <mapVASFirstTime+0xaf>
c000efaa:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efad:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efb0:	c1 e5 15             	shl    ebp,0x15
c000efb3:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efb8:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efbd:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efc3:	29 eb                	sub    ebx,ebp
c000efc5:	29 ee                	sub    esi,ebp
c000efc7:	e8 dd d5 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000efcc:	83 ec 0c             	sub    esp,0xc
c000efcf:	68 03 04 00 00       	push   0x403
c000efd4:	6a 01                	push   0x1
c000efd6:	53                   	push   ebx
c000efd7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efdd:	50                   	push   eax
c000efde:	57                   	push   edi
c000efdf:	e8 c4 fb ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efe4:	83 c4 20             	add    esp,0x20
c000efe7:	39 f3                	cmp    ebx,esi
c000efe9:	75 dc                	jne    c000efc7 <mapVASFirstTime+0x33>
c000efeb:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000eff0:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000eff5:	29 e8                	sub    eax,ebp
c000eff7:	29 ee                	sub    esi,ebp
c000eff9:	89 c5                	mov    ebp,eax
c000effb:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000efff:	19 db                	sbb    ebx,ebx
c000f001:	e8 a3 d5 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c000f006:	83 e3 04             	and    ebx,0x4
c000f009:	83 ec 0c             	sub    esp,0xc
c000f00c:	81 c3 03 04 00 00    	add    ebx,0x403
c000f012:	53                   	push   ebx
c000f013:	6a 01                	push   0x1
c000f015:	56                   	push   esi
c000f016:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f01c:	50                   	push   eax
c000f01d:	57                   	push   edi
c000f01e:	e8 85 fb ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f023:	83 c4 20             	add    esp,0x20
c000f026:	39 f5                	cmp    ebp,esi
c000f028:	75 d1                	jne    c000effb <mapVASFirstTime+0x67>
c000f02a:	e8 a6 07 01 00       	call   c001f7d5 <CPU::readCR3()>
c000f02f:	83 ec 0c             	sub    esp,0xc
c000f032:	50                   	push   eax
c000f033:	e8 af 07 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000f038:	83 c4 10             	add    esp,0x10
c000f03b:	83 c4 0c             	add    esp,0xc
c000f03e:	5b                   	pop    ebx
c000f03f:	5e                   	pop    esi
c000f040:	5f                   	pop    edi
c000f041:	5d                   	pop    ebp
c000f042:	c3                   	ret    
c000f043:	83 ec 0c             	sub    esp,0xc
c000f046:	68 ed 18 02 c0       	push   0xc00218ed
c000f04b:	e8 b5 01 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	83 c4 0c             	add    esp,0xc
c000f056:	5b                   	pop    ebx
c000f057:	5e                   	pop    esi
c000f058:	5f                   	pop    edi
c000f059:	5d                   	pop    ebp
c000f05a:	c3                   	ret    

c000f05b <__cxa_atexit>:
c000f05b:	31 c0                	xor    eax,eax
c000f05d:	c3                   	ret    

c000f05e <__cxa_finalize>:
c000f05e:	c3                   	ret    

c000f05f <__stack_chk_fail>:
c000f05f:	55                   	push   ebp
c000f060:	89 e5                	mov    ebp,esp
c000f062:	83 ec 10             	sub    esp,0x10
c000f065:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f068:	68 06 19 02 c0       	push   0xc0021906
c000f06d:	e8 93 01 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000f072:	58                   	pop    eax
c000f073:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f076:	5a                   	pop    edx
c000f077:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f07a:	68 06 19 02 c0       	push   0xc0021906
c000f07f:	e8 81 01 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000f084:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f087:	59                   	pop    ecx
c000f088:	5a                   	pop    edx
c000f089:	8b 00                	mov    eax,DWORD PTR [eax]
c000f08b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f08e:	68 06 19 02 c0       	push   0xc0021906
c000f093:	e8 6d 01 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000f098:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f09b:	59                   	pop    ecx
c000f09c:	5a                   	pop    edx
c000f09d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f09f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0a4:	68 06 19 02 c0       	push   0xc0021906
c000f0a9:	e8 57 01 00 00       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c000f0ae:	c7 04 24 0e 19 02 c0 	mov    DWORD PTR [esp],0xc002190e
c000f0b5:	e8 7a 69 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000f0ba:	83 c4 10             	add    esp,0x10
c000f0bd:	c9                   	leave  
c000f0be:	c3                   	ret    

c000f0bf <__cxa_pure_virtual>:
c000f0bf:	83 ec 18             	sub    esp,0x18
c000f0c2:	68 26 19 02 c0       	push   0xc0021926
c000f0c7:	e8 68 69 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c000f0cc:	83 c4 1c             	add    esp,0x1c
c000f0cf:	c3                   	ret    

c000f0d0 <operator new(unsigned long)>:
c000f0d0:	e9 fe ce ff ff       	jmp    c000bfd3 <malloc>

c000f0d5 <operator new[](unsigned long)>:
c000f0d5:	e9 f9 ce ff ff       	jmp    c000bfd3 <malloc>

c000f0da <operator delete(void*)>:
c000f0da:	e9 14 cf ff ff       	jmp    c000bff3 <rfree>

c000f0df <operator delete(void*, unsigned long)>:
c000f0df:	e9 0f cf ff ff       	jmp    c000bff3 <rfree>

c000f0e4 <operator delete[](void*)>:
c000f0e4:	e9 0a cf ff ff       	jmp    c000bff3 <rfree>

c000f0e9 <operator delete[](void*, unsigned long)>:
c000f0e9:	e9 05 cf ff ff       	jmp    c000bff3 <rfree>

c000f0ee <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0ee:	57                   	push   edi
c000f0ef:	56                   	push   esi
c000f0f0:	be 3d 19 02 c0       	mov    esi,0xc002193d
c000f0f5:	53                   	push   ebx
c000f0f6:	83 ec 40             	sub    esp,0x40
c000f0f9:	a0 3c 19 02 c0       	mov    al,ds:0xc002193c
c000f0fe:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f102:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f106:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f10a:	b8 3e 00 00 00       	mov    eax,0x3e
c000f10f:	f7 c7 02 00 00 00    	test   edi,0x2
c000f115:	75 69                	jne    c000f180 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f117:	89 c1                	mov    ecx,eax
c000f119:	c1 e9 02             	shr    ecx,0x2
c000f11c:	fc                   	cld    
c000f11d:	31 d2                	xor    edx,edx
c000f11f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f121:	a8 02                	test   al,0x2
c000f123:	74 0b                	je     c000f130 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f125:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f128:	66 89 17             	mov    WORD PTR [edi],dx
c000f12b:	ba 02 00 00 00       	mov    edx,0x2
c000f130:	a8 01                	test   al,0x1
c000f132:	74 06                	je     c000f13a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f134:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f137:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f13a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f13e:	83 f9 3e             	cmp    ecx,0x3e
c000f141:	7e 05                	jle    c000f148 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f143:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f148:	89 df                	mov    edi,ebx
c000f14a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f14e:	eb 02                	jmp    c000f152 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f150:	89 c7                	mov    edi,eax
c000f152:	31 d2                	xor    edx,edx
c000f154:	89 f8                	mov    eax,edi
c000f156:	46                   	inc    esi
c000f157:	f7 f1                	div    ecx
c000f159:	39 cf                	cmp    edi,ecx
c000f15b:	73 f3                	jae    c000f150 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f15d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f160:	eb 02                	jmp    c000f164 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f162:	89 c3                	mov    ebx,eax
c000f164:	31 d2                	xor    edx,edx
c000f166:	89 d8                	mov    eax,ebx
c000f168:	f7 f1                	div    ecx
c000f16a:	4e                   	dec    esi
c000f16b:	39 cb                	cmp    ebx,ecx
c000f16d:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f171:	88 16                	mov    BYTE PTR [esi],dl
c000f173:	73 ed                	jae    c000f162 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f175:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f179:	83 c4 40             	add    esp,0x40
c000f17c:	5b                   	pop    ebx
c000f17d:	5e                   	pop    esi
c000f17e:	5f                   	pop    edi
c000f17f:	c3                   	ret    
c000f180:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f183:	83 c7 02             	add    edi,0x2
c000f186:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f18a:	83 c6 02             	add    esi,0x2
c000f18d:	83 e8 02             	sub    eax,0x2
c000f190:	eb 85                	jmp    c000f117 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f192 <Dbg::logc(char)>:
c000f192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f196:	ba fd 03 00 00       	mov    edx,0x3fd
c000f19b:	ec                   	in     al,dx
c000f19c:	a8 20                	test   al,0x20
c000f19e:	74 fb                	je     c000f19b <Dbg::logc(char)+0x9>
c000f1a0:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1a5:	88 c8                	mov    al,cl
c000f1a7:	ee                   	out    dx,al
c000f1a8:	c3                   	ret    

c000f1a9 <Dbg::logs(char*)>:
c000f1a9:	53                   	push   ebx
c000f1aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1b1:	84 c0                	test   al,al
c000f1b3:	74 0f                	je     c000f1c4 <Dbg::logs(char*)+0x1b>
c000f1b5:	43                   	inc    ebx
c000f1b6:	50                   	push   eax
c000f1b7:	e8 d6 ff ff ff       	call   c000f192 <Dbg::logc(char)>
c000f1bc:	5a                   	pop    edx
c000f1bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1c0:	84 c0                	test   al,al
c000f1c2:	75 f1                	jne    c000f1b5 <Dbg::logs(char*)+0xc>
c000f1c4:	5b                   	pop    ebx
c000f1c5:	c3                   	ret    

c000f1c6 <Dbg::logWriteInt(unsigned int)>:
c000f1c6:	83 ec 10             	sub    esp,0x10
c000f1c9:	6a 0a                	push   0xa
c000f1cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1cf:	50                   	push   eax
c000f1d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1d4:	50                   	push   eax
c000f1d5:	e8 14 ff ff ff       	call   c000f0ee <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1da:	50                   	push   eax
c000f1db:	e8 c9 ff ff ff       	call   c000f1a9 <Dbg::logs(char*)>
c000f1e0:	83 c4 20             	add    esp,0x20
c000f1e3:	c3                   	ret    

c000f1e4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1e4:	83 ec 10             	sub    esp,0x10
c000f1e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1eb:	50                   	push   eax
c000f1ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1f0:	50                   	push   eax
c000f1f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1f5:	52                   	push   edx
c000f1f6:	e8 f3 fe ff ff       	call   c000f0ee <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1fb:	50                   	push   eax
c000f1fc:	e8 a8 ff ff ff       	call   c000f1a9 <Dbg::logs(char*)>
c000f201:	83 c4 20             	add    esp,0x20
c000f204:	c3                   	ret    

c000f205 <Dbg::kprintf(char const*, ...)>:
c000f205:	55                   	push   ebp
c000f206:	57                   	push   edi
c000f207:	56                   	push   esi
c000f208:	53                   	push   ebx
c000f209:	83 ec 0c             	sub    esp,0xc
c000f20c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f210:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f218:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f21b:	84 c0                	test   al,al
c000f21d:	74 4d                	je     c000f26c <Dbg::kprintf(char const*, ...)+0x67>
c000f21f:	31 ff                	xor    edi,edi
c000f221:	8d 77 01             	lea    esi,[edi+0x1]
c000f224:	3c 25                	cmp    al,0x25
c000f226:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f229:	0f 85 ec 00 00 00    	jne    c000f31b <Dbg::kprintf(char const*, ...)+0x116>
c000f22f:	83 c7 02             	add    edi,0x2
c000f232:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f235:	83 e8 25             	sub    eax,0x25
c000f238:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f23b:	3c 53                	cmp    al,0x53
c000f23d:	0f 87 c0 00 00 00    	ja     c000f303 <Dbg::kprintf(char const*, ...)+0xfe>
c000f243:	25 ff 00 00 00       	and    eax,0xff
c000f248:	ff 24 85 7c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde684]
c000f24f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f253:	89 c8                	mov    eax,ecx
c000f255:	83 c1 04             	add    ecx,0x4
c000f258:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f25c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f25e:	50                   	push   eax
c000f25f:	e8 45 ff ff ff       	call   c000f1a9 <Dbg::logs(char*)>
c000f264:	58                   	pop    eax
c000f265:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f268:	84 c0                	test   al,al
c000f26a:	75 b5                	jne    c000f221 <Dbg::kprintf(char const*, ...)+0x1c>
c000f26c:	83 c4 0c             	add    esp,0xc
c000f26f:	5b                   	pop    ebx
c000f270:	5e                   	pop    esi
c000f271:	5f                   	pop    edi
c000f272:	5d                   	pop    ebp
c000f273:	c3                   	ret    
c000f274:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f278:	89 d0                	mov    eax,edx
c000f27a:	83 c2 04             	add    edx,0x4
c000f27d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f281:	8b 00                	mov    eax,DWORD PTR [eax]
c000f283:	50                   	push   eax
c000f284:	e8 3d ff ff ff       	call   c000f1c6 <Dbg::logWriteInt(unsigned int)>
c000f289:	58                   	pop    eax
c000f28a:	eb d9                	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f28c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f290:	89 d0                	mov    eax,edx
c000f292:	83 c2 04             	add    edx,0x4
c000f295:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f299:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f29c:	50                   	push   eax
c000f29d:	e8 f0 fe ff ff       	call   c000f192 <Dbg::logc(char)>
c000f2a2:	58                   	pop    eax
c000f2a3:	eb c0                	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f2a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2a9:	89 c8                	mov    eax,ecx
c000f2ab:	83 c1 04             	add    ecx,0x4
c000f2ae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2b2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2b4:	55                   	push   ebp
c000f2b5:	e8 0c ff ff ff       	call   c000f1c6 <Dbg::logWriteInt(unsigned int)>
c000f2ba:	58                   	pop    eax
c000f2bb:	eb a8                	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f2bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2c1:	89 c8                	mov    eax,ecx
c000f2c3:	83 c1 04             	add    ecx,0x4
c000f2c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2ca:	6a 10                	push   0x10
c000f2cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2ce:	51                   	push   ecx
c000f2cf:	e8 10 ff ff ff       	call   c000f1e4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2d4:	5d                   	pop    ebp
c000f2d5:	58                   	pop    eax
c000f2d6:	eb 8d                	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f2d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2dc:	89 d0                	mov    eax,edx
c000f2de:	83 c2 08             	add    edx,0x8
c000f2e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2e5:	6a 10                	push   0x10
c000f2e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2e9:	50                   	push   eax
c000f2ea:	e8 f5 fe ff ff       	call   c000f1e4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2ef:	58                   	pop    eax
c000f2f0:	5a                   	pop    edx
c000f2f1:	e9 6f ff ff ff       	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f2f6:	6a 25                	push   0x25
c000f2f8:	e8 95 fe ff ff       	call   c000f192 <Dbg::logc(char)>
c000f2fd:	5a                   	pop    edx
c000f2fe:	e9 62 ff ff ff       	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f303:	6a 25                	push   0x25
c000f305:	e8 88 fe ff ff       	call   c000f192 <Dbg::logc(char)>
c000f30a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f30e:	50                   	push   eax
c000f30f:	e8 7e fe ff ff       	call   c000f192 <Dbg::logc(char)>
c000f314:	5a                   	pop    edx
c000f315:	59                   	pop    ecx
c000f316:	e9 4a ff ff ff       	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f31b:	50                   	push   eax
c000f31c:	89 f7                	mov    edi,esi
c000f31e:	e8 6f fe ff ff       	call   c000f192 <Dbg::logc(char)>
c000f323:	89 ee                	mov    esi,ebp
c000f325:	58                   	pop    eax
c000f326:	e9 3a ff ff ff       	jmp    c000f265 <Dbg::kprintf(char const*, ...)+0x60>
c000f32b:	90                   	nop

c000f32c <File::read(unsigned long long, void*, int*)>:
c000f32c:	53                   	push   ebx
c000f32d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f331:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f335:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f33c:	3c 19                	cmp    al,0x19
c000f33e:	77 35                	ja     c000f375 <File::read(unsigned long long, void*, int*)+0x49>
c000f340:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f347:	85 c0                	test   eax,eax
c000f349:	74 2a                	je     c000f375 <File::read(unsigned long long, void*, int*)+0x49>
c000f34b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f351:	85 c0                	test   eax,eax
c000f353:	74 20                	je     c000f375 <File::read(unsigned long long, void*, int*)+0x49>
c000f355:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f359:	74 21                	je     c000f37c <File::read(unsigned long long, void*, int*)+0x50>
c000f35b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f35d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f361:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f36b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f36f:	5b                   	pop    ebx
c000f370:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f373:	ff e0                	jmp    eax
c000f375:	b8 0b 00 00 00       	mov    eax,0xb
c000f37a:	eb 05                	jmp    c000f381 <File::read(unsigned long long, void*, int*)+0x55>
c000f37c:	b8 05 00 00 00       	mov    eax,0x5
c000f381:	5b                   	pop    ebx
c000f382:	c3                   	ret    
c000f383:	90                   	nop

c000f384 <File::write(unsigned long long, void*, int*)>:
c000f384:	53                   	push   ebx
c000f385:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f389:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f38d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f394:	3c 19                	cmp    al,0x19
c000f396:	77 35                	ja     c000f3cd <File::write(unsigned long long, void*, int*)+0x49>
c000f398:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f39f:	85 c0                	test   eax,eax
c000f3a1:	74 2a                	je     c000f3cd <File::write(unsigned long long, void*, int*)+0x49>
c000f3a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3a9:	85 c0                	test   eax,eax
c000f3ab:	74 20                	je     c000f3cd <File::write(unsigned long long, void*, int*)+0x49>
c000f3ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3b1:	74 21                	je     c000f3d4 <File::write(unsigned long long, void*, int*)+0x50>
c000f3b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3b9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3c7:	5b                   	pop    ebx
c000f3c8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3cb:	ff e0                	jmp    eax
c000f3cd:	b8 0b 00 00 00       	mov    eax,0xb
c000f3d2:	eb 05                	jmp    c000f3d9 <File::write(unsigned long long, void*, int*)+0x55>
c000f3d4:	b8 05 00 00 00       	mov    eax,0x5
c000f3d9:	5b                   	pop    ebx
c000f3da:	c3                   	ret    
c000f3db:	90                   	nop

c000f3dc <Directory::read(unsigned long long, void*, int*)>:
c000f3dc:	53                   	push   ebx
c000f3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3e5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3ec:	3c 19                	cmp    al,0x19
c000f3ee:	77 35                	ja     c000f425 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3f0:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f3f7:	85 c0                	test   eax,eax
c000f3f9:	74 2a                	je     c000f425 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f401:	85 c0                	test   eax,eax
c000f403:	74 20                	je     c000f425 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f405:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f409:	74 21                	je     c000f42c <Directory::read(unsigned long long, void*, int*)+0x50>
c000f40b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f40d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f411:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f417:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f41b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f41f:	5b                   	pop    ebx
c000f420:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f423:	ff e0                	jmp    eax
c000f425:	b8 0b 00 00 00       	mov    eax,0xb
c000f42a:	eb 05                	jmp    c000f431 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f42c:	b8 05 00 00 00       	mov    eax,0x5
c000f431:	5b                   	pop    ebx
c000f432:	c3                   	ret    
c000f433:	90                   	nop

c000f434 <Directory::write(unsigned long long, void*, int*)>:
c000f434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f438:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f43f:	b8 0b 00 00 00       	mov    eax,0xb
c000f444:	80 fa 19             	cmp    dl,0x19
c000f447:	77 18                	ja     c000f461 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f449:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f450:	85 d2                	test   edx,edx
c000f452:	74 0d                	je     c000f461 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f454:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f45b:	19 c0                	sbb    eax,eax
c000f45d:	83 e0 0a             	and    eax,0xa
c000f460:	40                   	inc    eax
c000f461:	c3                   	ret    

c000f462 <File::isAtty()>:
c000f462:	31 c0                	xor    eax,eax
c000f464:	c3                   	ret    
c000f465:	90                   	nop

c000f466 <Directory::isAtty()>:
c000f466:	31 c0                	xor    eax,eax
c000f468:	c3                   	ret    
c000f469:	90                   	nop

c000f46a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f46a:	b8 0a 00 00 00       	mov    eax,0xa
c000f46f:	c3                   	ret    

c000f470 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f470:	b8 0a 00 00 00       	mov    eax,0xa
c000f475:	c3                   	ret    

c000f476 <File::~File()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f482:	89 10                	mov    DWORD PTR [eax],edx
c000f484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f488:	83 ec 0c             	sub    esp,0xc
c000f48b:	50                   	push   eax
c000f48c:	e8 c5 ea ff ff       	call   c000df56 <UnixFile::~UnixFile()>
c000f491:	83 c4 10             	add    esp,0x10
c000f494:	90                   	nop
c000f495:	83 c4 0c             	add    esp,0xc
c000f498:	c3                   	ret    
c000f499:	90                   	nop

c000f49a <File::~File()>:
c000f49a:	83 ec 0c             	sub    esp,0xc
c000f49d:	83 ec 0c             	sub    esp,0xc
c000f4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4a4:	e8 cd ff ff ff       	call   c000f476 <File::~File()>
c000f4a9:	83 c4 10             	add    esp,0x10
c000f4ac:	83 ec 08             	sub    esp,0x8
c000f4af:	68 14 01 00 00       	push   0x114
c000f4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b8:	e8 22 fc ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c000f4bd:	83 c4 10             	add    esp,0x10
c000f4c0:	83 c4 0c             	add    esp,0xc
c000f4c3:	c3                   	ret    

c000f4c4 <Directory::~Directory()>:
c000f4c4:	83 ec 0c             	sub    esp,0xc
c000f4c7:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000f4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d0:	89 10                	mov    DWORD PTR [eax],edx
c000f4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d6:	83 ec 0c             	sub    esp,0xc
c000f4d9:	50                   	push   eax
c000f4da:	e8 77 ea ff ff       	call   c000df56 <UnixFile::~UnixFile()>
c000f4df:	83 c4 10             	add    esp,0x10
c000f4e2:	90                   	nop
c000f4e3:	83 c4 0c             	add    esp,0xc
c000f4e6:	c3                   	ret    
c000f4e7:	90                   	nop

c000f4e8 <Directory::~Directory()>:
c000f4e8:	83 ec 0c             	sub    esp,0xc
c000f4eb:	83 ec 0c             	sub    esp,0xc
c000f4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f2:	e8 cd ff ff ff       	call   c000f4c4 <Directory::~Directory()>
c000f4f7:	83 c4 10             	add    esp,0x10
c000f4fa:	83 ec 08             	sub    esp,0x8
c000f4fd:	68 14 01 00 00       	push   0x114
c000f502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f506:	e8 d4 fb ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c000f50b:	83 c4 10             	add    esp,0x10
c000f50e:	83 c4 0c             	add    esp,0xc
c000f511:	c3                   	ret    

c000f512 <Filesystem::Filesystem()>:
c000f512:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f51b:	89 10                	mov    DWORD PTR [eax],edx
c000f51d:	8b 15 e8 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248e8
c000f523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f527:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f52e:	a3 e8 48 02 c0       	mov    ds:0xc00248e8,eax
c000f533:	90                   	nop
c000f534:	c3                   	ret    
c000f535:	90                   	nop

c000f536 <Filesystem::~Filesystem()>:
c000f536:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53f:	89 10                	mov    DWORD PTR [eax],edx
c000f541:	90                   	nop
c000f542:	c3                   	ret    
c000f543:	90                   	nop

c000f544 <Filesystem::~Filesystem()>:
c000f544:	83 ec 0c             	sub    esp,0xc
c000f547:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f54b:	e8 e6 ff ff ff       	call   c000f536 <Filesystem::~Filesystem()>
c000f550:	83 c4 04             	add    esp,0x4
c000f553:	83 ec 08             	sub    esp,0x8
c000f556:	6a 08                	push   0x8
c000f558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f55c:	e8 7e fb ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c000f561:	83 c4 10             	add    esp,0x10
c000f564:	83 c4 0c             	add    esp,0xc
c000f567:	c3                   	ret    

c000f568 <initVFS()>:
c000f568:	83 ec 18             	sub    esp,0x18
c000f56b:	6a 08                	push   0x8
c000f56d:	e8 5e fb ff ff       	call   c000f0d0 <operator new(unsigned long)>
c000f572:	89 04 24             	mov    DWORD PTR [esp],eax
c000f575:	e8 da b3 00 00       	call   c001a954 <FAT::FAT()>
c000f57a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f581:	e8 4a fb ff ff       	call   c000f0d0 <operator new(unsigned long)>
c000f586:	89 04 24             	mov    DWORD PTR [esp],eax
c000f589:	e8 66 c6 00 00       	call   c001bbf4 <ISO9660::ISO9660()>
c000f58e:	83 c4 1c             	add    esp,0x1c
c000f591:	c3                   	ret    

c000f592 <standardiseFiles(char*, char const*, char const*)>:
c000f592:	55                   	push   ebp
c000f593:	57                   	push   edi
c000f594:	56                   	push   esi
c000f595:	53                   	push   ebx
c000f596:	81 ec 10 04 00 00    	sub    esp,0x410
c000f59c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5a3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5aa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5b1:	68 00 04 00 00       	push   0x400
c000f5b6:	6a 00                	push   0x0
c000f5b8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5bc:	56                   	push   esi
c000f5bd:	e8 f3 10 ff ff       	call   c00006b5 <memset>
c000f5c2:	83 c4 10             	add    esp,0x10
c000f5c5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5c9:	75 0b                	jne    c000f5d6 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5cb:	50                   	push   eax
c000f5cc:	50                   	push   eax
c000f5cd:	57                   	push   edi
c000f5ce:	56                   	push   esi
c000f5cf:	e8 80 11 ff ff       	call   c0000754 <strcpy>
c000f5d4:	eb 41                	jmp    c000f617 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5d6:	8a 07                	mov    al,BYTE PTR [edi]
c000f5d8:	3c 5c                	cmp    al,0x5c
c000f5da:	74 04                	je     c000f5e0 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5dc:	3c 2f                	cmp    al,0x2f
c000f5de:	75 18                	jne    c000f5f8 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5e0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5e3:	3c 60                	cmp    al,0x60
c000f5e5:	7e 03                	jle    c000f5ea <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5e7:	83 e8 20             	sub    eax,0x20
c000f5ea:	88 04 24             	mov    BYTE PTR [esp],al
c000f5ed:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f5f4:	50                   	push   eax
c000f5f5:	50                   	push   eax
c000f5f6:	eb 18                	jmp    c000f610 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f5f8:	50                   	push   eax
c000f5f9:	50                   	push   eax
c000f5fa:	55                   	push   ebp
c000f5fb:	56                   	push   esi
c000f5fc:	e8 53 11 ff ff       	call   c0000754 <strcpy>
c000f601:	5a                   	pop    edx
c000f602:	59                   	pop    ecx
c000f603:	68 34 2e 02 c0       	push   0xc0022e34
c000f608:	56                   	push   esi
c000f609:	e8 fd 11 ff ff       	call   c000080b <strcat>
c000f60e:	5d                   	pop    ebp
c000f60f:	58                   	pop    eax
c000f610:	57                   	push   edi
c000f611:	56                   	push   esi
c000f612:	e8 f4 11 ff ff       	call   c000080b <strcat>
c000f617:	83 c4 10             	add    esp,0x10
c000f61a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f61d:	3c 60                	cmp    al,0x60
c000f61f:	7e 03                	jle    c000f624 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f621:	83 e8 20             	sub    eax,0x20
c000f624:	88 04 24             	mov    BYTE PTR [esp],al
c000f627:	88 03                	mov    BYTE PTR [ebx],al
c000f629:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f630:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f636:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f63a:	bf 03 00 00 00       	mov    edi,0x3
c000f63f:	b8 03 00 00 00       	mov    eax,0x3
c000f644:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f647:	84 d2                	test   dl,dl
c000f649:	0f 84 91 00 00 00    	je     c000f6e0 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f64f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f652:	80 fa 2f             	cmp    dl,0x2f
c000f655:	74 05                	je     c000f65c <standardiseFiles(char*, char const*, char const*)+0xca>
c000f657:	80 fa 5c             	cmp    dl,0x5c
c000f65a:	75 12                	jne    c000f66e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f65c:	89 c5                	mov    ebp,eax
c000f65e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f663:	74 09                	je     c000f66e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f665:	40                   	inc    eax
c000f666:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f66a:	89 cf                	mov    edi,ecx
c000f66c:	eb d6                	jmp    c000f644 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f66e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f673:	75 5b                	jne    c000f6d0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f675:	80 fa 2e             	cmp    dl,0x2e
c000f678:	75 56                	jne    c000f6d0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f67a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f67e:	74 19                	je     c000f699 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f680:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f685:	74 53                	je     c000f6da <standardiseFiles(char*, char const*, char const*)+0x148>
c000f687:	89 f9                	mov    ecx,edi
c000f689:	41                   	inc    ecx
c000f68a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f68d:	80 fa 5c             	cmp    dl,0x5c
c000f690:	74 f7                	je     c000f689 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f692:	80 fa 2f             	cmp    dl,0x2f
c000f695:	74 f2                	je     c000f689 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f697:	eb d1                	jmp    c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f699:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f69e:	74 3a                	je     c000f6da <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6a0:	83 f8 03             	cmp    eax,0x3
c000f6a3:	74 c5                	je     c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6a5:	41                   	inc    ecx
c000f6a6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6a9:	80 fa 2f             	cmp    dl,0x2f
c000f6ac:	74 f7                	je     c000f6a5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6ae:	80 fa 5c             	cmp    dl,0x5c
c000f6b1:	74 f2                	je     c000f6a5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6b3:	48                   	dec    eax
c000f6b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6b8:	75 06                	jne    c000f6c0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6be:	eb f3                	jmp    c000f6b3 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6c0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6c4:	74 07                	je     c000f6cd <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ca:	48                   	dec    eax
c000f6cb:	eb f3                	jmp    c000f6c0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6cd:	40                   	inc    eax
c000f6ce:	eb 9a                	jmp    c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6d0:	80 fa 2f             	cmp    dl,0x2f
c000f6d3:	74 95                	je     c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6d5:	80 fa 5c             	cmp    dl,0x5c
c000f6d8:	74 90                	je     c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6da:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6dd:	40                   	inc    eax
c000f6de:	eb 8a                	jmp    c000f66a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6e4:	83 ec 0c             	sub    esp,0xc
c000f6e7:	53                   	push   ebx
c000f6e8:	e8 e5 0f ff ff       	call   c00006d2 <strlen>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f6f5:	75 26                	jne    c000f71d <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f6f7:	83 ec 0c             	sub    esp,0xc
c000f6fa:	53                   	push   ebx
c000f6fb:	e8 d2 0f ff ff       	call   c00006d2 <strlen>
c000f700:	83 c4 10             	add    esp,0x10
c000f703:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f708:	74 26                	je     c000f730 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f70a:	83 ec 0c             	sub    esp,0xc
c000f70d:	53                   	push   ebx
c000f70e:	e8 bf 0f ff ff       	call   c00006d2 <strlen>
c000f713:	83 c4 10             	add    esp,0x10
c000f716:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f71b:	eb c7                	jmp    c000f6e4 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f71d:	83 ec 0c             	sub    esp,0xc
c000f720:	53                   	push   ebx
c000f721:	e8 ac 0f ff ff       	call   c00006d2 <strlen>
c000f726:	83 c4 10             	add    esp,0x10
c000f729:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f72e:	74 c7                	je     c000f6f7 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f730:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f736:	5b                   	pop    ebx
c000f737:	5e                   	pop    esi
c000f738:	5f                   	pop    edi
c000f739:	5d                   	pop    ebp
c000f73a:	c3                   	ret    
c000f73b:	90                   	nop

c000f73c <File::File(char const*, Process*)>:
c000f73c:	83 ec 0c             	sub    esp,0xc
c000f73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f743:	83 ec 08             	sub    esp,0x8
c000f746:	6a 00                	push   0x0
c000f748:	50                   	push   eax
c000f749:	e8 66 e6 ff ff       	call   c000ddb4 <UnixFile::UnixFile(int)>
c000f74e:	83 c4 10             	add    esp,0x10
c000f751:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f75a:	89 10                	mov    DWORD PTR [eax],edx
c000f75c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f760:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f76a:	83 c0 0d             	add    eax,0xd
c000f76d:	83 ec 04             	sub    esp,0x4
c000f770:	52                   	push   edx
c000f771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f775:	50                   	push   eax
c000f776:	e8 17 fe ff ff       	call   c000f592 <standardiseFiles(char*, char const*, char const*)>
c000f77b:	83 c4 10             	add    esp,0x10
c000f77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f782:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f785:	8d 50 bf             	lea    edx,[eax-0x41]
c000f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f796:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f79a:	90                   	nop
c000f79b:	83 c4 0c             	add    esp,0xc
c000f79e:	c3                   	ret    
c000f79f:	90                   	nop

c000f7a0 <File::open(FileOpenMode)>:
c000f7a0:	53                   	push   ebx
c000f7a1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7a6:	83 ec 08             	sub    esp,0x8
c000f7a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7ad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7b4:	80 fa 19             	cmp    dl,0x19
c000f7b7:	77 40                	ja     c000f7f9 <File::open(FileOpenMode)+0x59>
c000f7b9:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f7c0:	85 d2                	test   edx,edx
c000f7c2:	74 35                	je     c000f7f9 <File::open(FileOpenMode)+0x59>
c000f7c4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7ca:	85 d2                	test   edx,edx
c000f7cc:	74 2b                	je     c000f7f9 <File::open(FileOpenMode)+0x59>
c000f7ce:	b8 06 00 00 00       	mov    eax,0x6
c000f7d3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7d7:	75 20                	jne    c000f7f9 <File::open(FileOpenMode)+0x59>
c000f7d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7db:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7e5:	51                   	push   ecx
c000f7e6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7e9:	51                   	push   ecx
c000f7ea:	52                   	push   edx
c000f7eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	85 c0                	test   eax,eax
c000f7f3:	75 04                	jne    c000f7f9 <File::open(FileOpenMode)+0x59>
c000f7f5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f7f9:	83 c4 08             	add    esp,0x8
c000f7fc:	5b                   	pop    ebx
c000f7fd:	c3                   	ret    

c000f7fe <File::close()>:
c000f7fe:	53                   	push   ebx
c000f7ff:	b8 0b 00 00 00       	mov    eax,0xb
c000f804:	83 ec 08             	sub    esp,0x8
c000f807:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f80b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f812:	80 fa 19             	cmp    dl,0x19
c000f815:	77 41                	ja     c000f858 <File::close()+0x5a>
c000f817:	8b 1c 95 80 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb280]
c000f81e:	85 db                	test   ebx,ebx
c000f820:	74 36                	je     c000f858 <File::close()+0x5a>
c000f822:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f829:	74 2d                	je     c000f858 <File::close()+0x5a>
c000f82b:	b8 05 00 00 00       	mov    eax,0x5
c000f830:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f834:	74 22                	je     c000f858 <File::close()+0x5a>
c000f836:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f83a:	8b 04 95 80 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb280]
c000f841:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f847:	53                   	push   ebx
c000f848:	53                   	push   ebx
c000f849:	8b 10                	mov    edx,DWORD PTR [eax]
c000f84b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f851:	50                   	push   eax
c000f852:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f855:	83 c4 10             	add    esp,0x10
c000f858:	83 c4 08             	add    esp,0x8
c000f85b:	5b                   	pop    ebx
c000f85c:	c3                   	ret    
c000f85d:	90                   	nop

c000f85e <File::seek(unsigned long long)>:
c000f85e:	56                   	push   esi
c000f85f:	b8 0b 00 00 00       	mov    eax,0xb
c000f864:	53                   	push   ebx
c000f865:	51                   	push   ecx
c000f866:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f86a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f86e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f872:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f879:	80 fa 19             	cmp    dl,0x19
c000f87c:	77 31                	ja     c000f8af <File::seek(unsigned long long)+0x51>
c000f87e:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f885:	85 d2                	test   edx,edx
c000f887:	74 26                	je     c000f8af <File::seek(unsigned long long)+0x51>
c000f889:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f88f:	85 d2                	test   edx,edx
c000f891:	74 1c                	je     c000f8af <File::seek(unsigned long long)+0x51>
c000f893:	b8 05 00 00 00       	mov    eax,0x5
c000f898:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f89c:	74 11                	je     c000f8af <File::seek(unsigned long long)+0x51>
c000f89e:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8a0:	53                   	push   ebx
c000f8a1:	51                   	push   ecx
c000f8a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8a8:	52                   	push   edx
c000f8a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8ac:	83 c4 10             	add    esp,0x10
c000f8af:	5a                   	pop    edx
c000f8b0:	5b                   	pop    ebx
c000f8b1:	5e                   	pop    esi
c000f8b2:	c3                   	ret    
c000f8b3:	90                   	nop

c000f8b4 <File::tell(unsigned long long*)>:
c000f8b4:	83 ec 0c             	sub    esp,0xc
c000f8b7:	b8 0b 00 00 00       	mov    eax,0xb
c000f8bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8c7:	80 fa 19             	cmp    dl,0x19
c000f8ca:	77 34                	ja     c000f900 <File::tell(unsigned long long*)+0x4c>
c000f8cc:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f8d3:	85 d2                	test   edx,edx
c000f8d5:	74 29                	je     c000f900 <File::tell(unsigned long long*)+0x4c>
c000f8d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8dd:	85 d2                	test   edx,edx
c000f8df:	74 1f                	je     c000f900 <File::tell(unsigned long long*)+0x4c>
c000f8e1:	b8 05 00 00 00       	mov    eax,0x5
c000f8e6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8ea:	74 14                	je     c000f900 <File::tell(unsigned long long*)+0x4c>
c000f8ec:	50                   	push   eax
c000f8ed:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f8f9:	52                   	push   edx
c000f8fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f8fd:	83 c4 10             	add    esp,0x10
c000f900:	83 c4 0c             	add    esp,0xc
c000f903:	c3                   	ret    

c000f904 <File::rewind()>:
c000f904:	83 ec 10             	sub    esp,0x10
c000f907:	6a 00                	push   0x0
c000f909:	6a 00                	push   0x0
c000f90b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f90f:	e8 4a ff ff ff       	call   c000f85e <File::seek(unsigned long long)>
c000f914:	83 c4 1c             	add    esp,0x1c
c000f917:	c3                   	ret    

c000f918 <File::unlink()>:
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	b8 0b 00 00 00       	mov    eax,0xb
c000f920:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f924:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f92b:	80 f9 19             	cmp    cl,0x19
c000f92e:	77 2f                	ja     c000f95f <File::unlink()+0x47>
c000f930:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f937:	85 c9                	test   ecx,ecx
c000f939:	74 24                	je     c000f95f <File::unlink()+0x47>
c000f93b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f941:	85 c9                	test   ecx,ecx
c000f943:	74 1a                	je     c000f95f <File::unlink()+0x47>
c000f945:	b8 06 00 00 00       	mov    eax,0x6
c000f94a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f94e:	75 0f                	jne    c000f95f <File::unlink()+0x47>
c000f950:	50                   	push   eax
c000f951:	83 c2 0d             	add    edx,0xd
c000f954:	50                   	push   eax
c000f955:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f957:	52                   	push   edx
c000f958:	51                   	push   ecx
c000f959:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f95c:	83 c4 10             	add    esp,0x10
c000f95f:	83 c4 0c             	add    esp,0xc
c000f962:	c3                   	ret    
c000f963:	90                   	nop

c000f964 <File::rename(char const*)>:
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	b8 0b 00 00 00       	mov    eax,0xb
c000f96c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f970:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f977:	80 f9 19             	cmp    cl,0x19
c000f97a:	77 32                	ja     c000f9ae <File::rename(char const*)+0x4a>
c000f97c:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f983:	85 c9                	test   ecx,ecx
c000f985:	74 27                	je     c000f9ae <File::rename(char const*)+0x4a>
c000f987:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f98d:	85 c9                	test   ecx,ecx
c000f98f:	74 1d                	je     c000f9ae <File::rename(char const*)+0x4a>
c000f991:	b8 06 00 00 00       	mov    eax,0x6
c000f996:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f99a:	75 12                	jne    c000f9ae <File::rename(char const*)+0x4a>
c000f99c:	50                   	push   eax
c000f99d:	83 c2 0d             	add    edx,0xd
c000f9a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9a6:	52                   	push   edx
c000f9a7:	51                   	push   ecx
c000f9a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	83 c4 0c             	add    esp,0xc
c000f9b1:	c3                   	ret    

c000f9b2 <File::chfatattr(unsigned char, unsigned char)>:
c000f9b2:	57                   	push   edi
c000f9b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9b8:	56                   	push   esi
c000f9b9:	53                   	push   ebx
c000f9ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9cd:	80 f9 19             	cmp    cl,0x19
c000f9d0:	77 37                	ja     c000fa09 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9d2:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f9d9:	85 c9                	test   ecx,ecx
c000f9db:	74 2c                	je     c000fa09 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9e3:	85 c9                	test   ecx,ecx
c000f9e5:	74 22                	je     c000fa09 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e7:	b8 06 00 00 00       	mov    eax,0x6
c000f9ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9f0:	75 17                	jne    c000fa09 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f2:	89 f0                	mov    eax,esi
c000f9f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f9f6:	0f b6 f0             	movzx  esi,al
c000f9f9:	56                   	push   esi
c000f9fa:	83 c2 0d             	add    edx,0xd
c000f9fd:	0f b6 db             	movzx  ebx,bl
c000fa00:	53                   	push   ebx
c000fa01:	52                   	push   edx
c000fa02:	51                   	push   ecx
c000fa03:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa06:	83 c4 10             	add    esp,0x10
c000fa09:	5b                   	pop    ebx
c000fa0a:	5e                   	pop    esi
c000fa0b:	5f                   	pop    edi
c000fa0c:	c3                   	ret    
c000fa0d:	90                   	nop

c000fa0e <File::exists()>:
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	31 c0                	xor    eax,eax
c000fa13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa17:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa1e:	80 f9 19             	cmp    cl,0x19
c000fa21:	77 24                	ja     c000fa47 <File::exists()+0x39>
c000fa23:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fa2a:	85 c9                	test   ecx,ecx
c000fa2c:	74 19                	je     c000fa47 <File::exists()+0x39>
c000fa2e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa34:	85 c9                	test   ecx,ecx
c000fa36:	74 0f                	je     c000fa47 <File::exists()+0x39>
c000fa38:	50                   	push   eax
c000fa39:	83 c2 0d             	add    edx,0xd
c000fa3c:	50                   	push   eax
c000fa3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa3f:	52                   	push   edx
c000fa40:	51                   	push   ecx
c000fa41:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	83 c4 0c             	add    esp,0xc
c000fa4a:	c3                   	ret    
c000fa4b:	90                   	nop

c000fa4c <File::stat(unsigned long long*, bool*)>:
c000fa4c:	56                   	push   esi
c000fa4d:	53                   	push   ebx
c000fa4e:	50                   	push   eax
c000fa4f:	b8 0b 00 00 00       	mov    eax,0xb
c000fa54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa58:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa67:	80 f9 19             	cmp    cl,0x19
c000fa6a:	77 3d                	ja     c000faa9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa6c:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fa73:	85 c9                	test   ecx,ecx
c000fa75:	74 32                	je     c000faa9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa77:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa7d:	85 c9                	test   ecx,ecx
c000fa7f:	74 28                	je     c000faa9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa81:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa83:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa87:	74 13                	je     c000fa9c <File::stat(unsigned long long*, bool*)+0x50>
c000fa89:	83 ec 04             	sub    esp,0x4
c000fa8c:	56                   	push   esi
c000fa8d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fa93:	51                   	push   ecx
c000fa94:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000fa97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000fa9a:	eb 0a                	jmp    c000faa6 <File::stat(unsigned long long*, bool*)+0x5a>
c000fa9c:	53                   	push   ebx
c000fa9d:	83 c2 0d             	add    edx,0xd
c000faa0:	56                   	push   esi
c000faa1:	52                   	push   edx
c000faa2:	51                   	push   ecx
c000faa3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000faa6:	83 c4 10             	add    esp,0x10
c000faa9:	5a                   	pop    edx
c000faaa:	5b                   	pop    ebx
c000faab:	5e                   	pop    esi
c000faac:	c3                   	ret    

c000faad <getcwd(Process*, char*, int)>:
c000faad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fab1:	31 c0                	xor    eax,eax
c000fab3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fab6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000faba:	7d 15                	jge    c000fad1 <getcwd(Process*, char*, int)+0x24>
c000fabc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fac0:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fac7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000faca:	84 c9                	test   cl,cl
c000facc:	74 06                	je     c000fad4 <getcwd(Process*, char*, int)+0x27>
c000face:	40                   	inc    eax
c000facf:	eb e2                	jmp    c000fab3 <getcwd(Process*, char*, int)+0x6>
c000fad1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fad4:	31 c0                	xor    eax,eax
c000fad6:	c3                   	ret    

c000fad7 <setcwd(Process*, char*)>:
c000fad7:	55                   	push   ebp
c000fad8:	57                   	push   edi
c000fad9:	56                   	push   esi
c000fada:	53                   	push   ebx
c000fadb:	81 ec 20 02 00 00    	sub    esp,0x220
c000fae1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fae8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000faee:	57                   	push   edi
c000faef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000faf6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fafa:	56                   	push   esi
c000fafb:	e8 92 fa ff ff       	call   c000f592 <standardiseFiles(char*, char const*, char const*)>
c000fb00:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb03:	e8 ca 0b ff ff       	call   c00006d2 <strlen>
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	83 f8 02             	cmp    eax,0x2
c000fb0e:	77 17                	ja     c000fb27 <setcwd(Process*, char*)+0x50>
c000fb10:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb15:	83 e8 41             	sub    eax,0x41
c000fb18:	83 f8 19             	cmp    eax,0x19
c000fb1b:	76 24                	jbe    c000fb41 <setcwd(Process*, char*)+0x6a>
c000fb1d:	b8 03 00 00 00       	mov    eax,0x3
c000fb22:	e9 cb 00 00 00       	jmp    c000fbf2 <setcwd(Process*, char*)+0x11b>
c000fb27:	83 ec 0c             	sub    esp,0xc
c000fb2a:	56                   	push   esi
c000fb2b:	e8 a2 0b ff ff       	call   c00006d2 <strlen>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	83 f8 03             	cmp    eax,0x3
c000fb36:	75 33                	jne    c000fb6b <setcwd(Process*, char*)+0x94>
c000fb38:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb3d:	75 2c                	jne    c000fb6b <setcwd(Process*, char*)+0x94>
c000fb3f:	eb cf                	jmp    c000fb10 <setcwd(Process*, char*)+0x39>
c000fb41:	8b 14 85 80 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb280]
c000fb48:	b8 05 00 00 00       	mov    eax,0x5
c000fb4d:	85 d2                	test   edx,edx
c000fb4f:	0f 84 9d 00 00 00    	je     c000fbf2 <setcwd(Process*, char*)+0x11b>
c000fb55:	b8 06 00 00 00       	mov    eax,0x6
c000fb5a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb61:	0f 84 8b 00 00 00    	je     c000fbf2 <setcwd(Process*, char*)+0x11b>
c000fb67:	51                   	push   ecx
c000fb68:	51                   	push   ecx
c000fb69:	eb 7b                	jmp    c000fbe6 <setcwd(Process*, char*)+0x10f>
c000fb6b:	83 ec 0c             	sub    esp,0xc
c000fb6e:	68 14 01 00 00       	push   0x114
c000fb73:	e8 58 f5 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c000fb78:	83 c4 0c             	add    esp,0xc
c000fb7b:	89 c3                	mov    ebx,eax
c000fb7d:	55                   	push   ebp
c000fb7e:	56                   	push   esi
c000fb7f:	50                   	push   eax
c000fb80:	e8 b7 fb ff ff       	call   c000f73c <File::File(char const*, Process*)>
c000fb85:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb8a:	83 c4 0c             	add    esp,0xc
c000fb8d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb91:	50                   	push   eax
c000fb92:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fb96:	50                   	push   eax
c000fb97:	53                   	push   ebx
c000fb98:	e8 af fe ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fba2:	83 f8 02             	cmp    eax,0x2
c000fba5:	75 09                	jne    c000fbb0 <setcwd(Process*, char*)+0xd9>
c000fba7:	83 ec 0c             	sub    esp,0xc
c000fbaa:	53                   	push   ebx
c000fbab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbae:	eb 0d                	jmp    c000fbbd <setcwd(Process*, char*)+0xe6>
c000fbb0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbb3:	85 c0                	test   eax,eax
c000fbb5:	74 10                	je     c000fbc7 <setcwd(Process*, char*)+0xf0>
c000fbb7:	83 ec 0c             	sub    esp,0xc
c000fbba:	53                   	push   ebx
c000fbbb:	ff d2                	call   edx
c000fbbd:	83 c4 10             	add    esp,0x10
c000fbc0:	b8 01 00 00 00       	mov    eax,0x1
c000fbc5:	eb 2b                	jmp    c000fbf2 <setcwd(Process*, char*)+0x11b>
c000fbc7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbcc:	75 10                	jne    c000fbde <setcwd(Process*, char*)+0x107>
c000fbce:	83 ec 0c             	sub    esp,0xc
c000fbd1:	53                   	push   ebx
c000fbd2:	ff d2                	call   edx
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	b8 02 00 00 00       	mov    eax,0x2
c000fbdc:	eb 14                	jmp    c000fbf2 <setcwd(Process*, char*)+0x11b>
c000fbde:	83 ec 0c             	sub    esp,0xc
c000fbe1:	53                   	push   ebx
c000fbe2:	ff d2                	call   edx
c000fbe4:	58                   	pop    eax
c000fbe5:	5a                   	pop    edx
c000fbe6:	56                   	push   esi
c000fbe7:	57                   	push   edi
c000fbe8:	e8 67 0b ff ff       	call   c0000754 <strcpy>
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	31 c0                	xor    eax,eax
c000fbf2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fbf8:	5b                   	pop    ebx
c000fbf9:	5e                   	pop    esi
c000fbfa:	5f                   	pop    edi
c000fbfb:	5d                   	pop    ebp
c000fbfc:	c3                   	ret    
c000fbfd:	90                   	nop

c000fbfe <Directory::Directory(char const*, Process*)>:
c000fbfe:	83 ec 0c             	sub    esp,0xc
c000fc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc05:	83 ec 08             	sub    esp,0x8
c000fc08:	6a 00                	push   0x0
c000fc0a:	50                   	push   eax
c000fc0b:	e8 a4 e1 ff ff       	call   c000ddb4 <UnixFile::UnixFile(int)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc1c:	89 10                	mov    DWORD PTR [eax],edx
c000fc1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2c:	83 c0 0d             	add    eax,0xd
c000fc2f:	83 ec 04             	sub    esp,0x4
c000fc32:	52                   	push   edx
c000fc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc37:	50                   	push   eax
c000fc38:	e8 55 f9 ff ff       	call   c000f592 <standardiseFiles(char*, char const*, char const*)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc44:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc47:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc58:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc5c:	90                   	nop
c000fc5d:	83 c4 0c             	add    esp,0xc
c000fc60:	c3                   	ret    
c000fc61:	90                   	nop

c000fc62 <Directory::open()>:
c000fc62:	53                   	push   ebx
c000fc63:	b8 0b 00 00 00       	mov    eax,0xb
c000fc68:	83 ec 08             	sub    esp,0x8
c000fc6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc6f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc76:	80 fa 19             	cmp    dl,0x19
c000fc79:	77 3d                	ja     c000fcb8 <Directory::open()+0x56>
c000fc7b:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000fc82:	85 d2                	test   edx,edx
c000fc84:	74 32                	je     c000fcb8 <Directory::open()+0x56>
c000fc86:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc8c:	85 d2                	test   edx,edx
c000fc8e:	74 28                	je     c000fcb8 <Directory::open()+0x56>
c000fc90:	b8 06 00 00 00       	mov    eax,0x6
c000fc95:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fc99:	75 1d                	jne    c000fcb8 <Directory::open()+0x56>
c000fc9b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fca1:	50                   	push   eax
c000fca2:	8b 02                	mov    eax,DWORD PTR [edx]
c000fca4:	51                   	push   ecx
c000fca5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fca8:	51                   	push   ecx
c000fca9:	52                   	push   edx
c000fcaa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	85 c0                	test   eax,eax
c000fcb2:	75 04                	jne    c000fcb8 <Directory::open()+0x56>
c000fcb4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcb8:	83 c4 08             	add    esp,0x8
c000fcbb:	5b                   	pop    ebx
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <Directory::close()>:
c000fcbe:	53                   	push   ebx
c000fcbf:	b8 0b 00 00 00       	mov    eax,0xb
c000fcc4:	83 ec 08             	sub    esp,0x8
c000fcc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fccb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcd2:	80 fa 19             	cmp    dl,0x19
c000fcd5:	77 41                	ja     c000fd18 <Directory::close()+0x5a>
c000fcd7:	8b 1c 95 80 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb280]
c000fcde:	85 db                	test   ebx,ebx
c000fce0:	74 36                	je     c000fd18 <Directory::close()+0x5a>
c000fce2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fce9:	74 2d                	je     c000fd18 <Directory::close()+0x5a>
c000fceb:	b8 05 00 00 00       	mov    eax,0x5
c000fcf0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fcf4:	74 22                	je     c000fd18 <Directory::close()+0x5a>
c000fcf6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fcfa:	8b 04 95 80 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb280]
c000fd01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd07:	53                   	push   ebx
c000fd08:	53                   	push   ebx
c000fd09:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd11:	50                   	push   eax
c000fd12:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	83 c4 08             	add    esp,0x8
c000fd1b:	5b                   	pop    ebx
c000fd1c:	c3                   	ret    
c000fd1d:	90                   	nop

c000fd1e <Directory::unlink()>:
c000fd1e:	83 ec 0c             	sub    esp,0xc
c000fd21:	b8 0b 00 00 00       	mov    eax,0xb
c000fd26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd2a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd31:	80 f9 19             	cmp    cl,0x19
c000fd34:	77 2f                	ja     c000fd65 <Directory::unlink()+0x47>
c000fd36:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	74 24                	je     c000fd65 <Directory::unlink()+0x47>
c000fd41:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd47:	85 c9                	test   ecx,ecx
c000fd49:	74 1a                	je     c000fd65 <Directory::unlink()+0x47>
c000fd4b:	b8 06 00 00 00       	mov    eax,0x6
c000fd50:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd54:	75 0f                	jne    c000fd65 <Directory::unlink()+0x47>
c000fd56:	50                   	push   eax
c000fd57:	83 c2 0d             	add    edx,0xd
c000fd5a:	50                   	push   eax
c000fd5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd5d:	52                   	push   edx
c000fd5e:	51                   	push   ecx
c000fd5f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	83 c4 0c             	add    esp,0xc
c000fd68:	c3                   	ret    
c000fd69:	90                   	nop

c000fd6a <Directory::rename(char const*)>:
c000fd6a:	83 ec 0c             	sub    esp,0xc
c000fd6d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd7d:	80 f9 19             	cmp    cl,0x19
c000fd80:	77 32                	ja     c000fdb4 <Directory::rename(char const*)+0x4a>
c000fd82:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fd89:	85 c9                	test   ecx,ecx
c000fd8b:	74 27                	je     c000fdb4 <Directory::rename(char const*)+0x4a>
c000fd8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd93:	85 c9                	test   ecx,ecx
c000fd95:	74 1d                	je     c000fdb4 <Directory::rename(char const*)+0x4a>
c000fd97:	b8 06 00 00 00       	mov    eax,0x6
c000fd9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fda0:	75 12                	jne    c000fdb4 <Directory::rename(char const*)+0x4a>
c000fda2:	50                   	push   eax
c000fda3:	83 c2 0d             	add    edx,0xd
c000fda6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fda8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdac:	52                   	push   edx
c000fdad:	51                   	push   ecx
c000fdae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	83 c4 0c             	add    esp,0xc
c000fdb7:	c3                   	ret    

c000fdb8 <Directory::exists()>:
c000fdb8:	83 ec 0c             	sub    esp,0xc
c000fdbb:	31 c0                	xor    eax,eax
c000fdbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdc1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdc8:	80 f9 19             	cmp    cl,0x19
c000fdcb:	77 24                	ja     c000fdf1 <Directory::exists()+0x39>
c000fdcd:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fdd4:	85 c9                	test   ecx,ecx
c000fdd6:	74 19                	je     c000fdf1 <Directory::exists()+0x39>
c000fdd8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdde:	85 c9                	test   ecx,ecx
c000fde0:	74 0f                	je     c000fdf1 <Directory::exists()+0x39>
c000fde2:	50                   	push   eax
c000fde3:	83 c2 0d             	add    edx,0xd
c000fde6:	50                   	push   eax
c000fde7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fde9:	52                   	push   edx
c000fdea:	51                   	push   ecx
c000fdeb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	83 c4 0c             	add    esp,0xc
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <Directory::read(dirent*)>:
c000fdf6:	83 ec 1c             	sub    esp,0x1c
c000fdf9:	b8 0b 00 00 00       	mov    eax,0xb
c000fdfe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe02:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe09:	80 fa 19             	cmp    dl,0x19
c000fe0c:	77 30                	ja     c000fe3e <Directory::read(dirent*)+0x48>
c000fe0e:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000fe15:	85 d2                	test   edx,edx
c000fe17:	74 25                	je     c000fe3e <Directory::read(dirent*)+0x48>
c000fe19:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe20:	74 1c                	je     c000fe3e <Directory::read(dirent*)+0x48>
c000fe22:	83 ec 0c             	sub    esp,0xc
c000fe25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe27:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe2b:	52                   	push   edx
c000fe2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe30:	6a 00                	push   0x0
c000fe32:	68 10 01 00 00       	push   0x110
c000fe37:	51                   	push   ecx
c000fe38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe3b:	83 c4 20             	add    esp,0x20
c000fe3e:	83 c4 1c             	add    esp,0x1c
c000fe41:	c3                   	ret    

c000fe42 <Directory::create()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	b8 0b 00 00 00       	mov    eax,0xb
c000fe4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe55:	80 f9 19             	cmp    cl,0x19
c000fe58:	77 2f                	ja     c000fe89 <Directory::create()+0x47>
c000fe5a:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fe61:	85 c9                	test   ecx,ecx
c000fe63:	74 24                	je     c000fe89 <Directory::create()+0x47>
c000fe65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe6b:	85 c9                	test   ecx,ecx
c000fe6d:	74 1a                	je     c000fe89 <Directory::create()+0x47>
c000fe6f:	b8 06 00 00 00       	mov    eax,0x6
c000fe74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe78:	75 0f                	jne    c000fe89 <Directory::create()+0x47>
c000fe7a:	50                   	push   eax
c000fe7b:	83 c2 0d             	add    edx,0xd
c000fe7e:	50                   	push   eax
c000fe7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe81:	52                   	push   edx
c000fe82:	51                   	push   ecx
c000fe83:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	83 c4 0c             	add    esp,0xc
c000fe8c:	c3                   	ret    
c000fe8d:	90                   	nop

c000fe8e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe8e:	b8 0a 00 00 00       	mov    eax,0xa
c000fe93:	c3                   	ret    

c000fe94 <Bus::Bus(char const*)>:
c000fe94:	83 ec 0c             	sub    esp,0xc
c000fe97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9b:	83 ec 08             	sub    esp,0x8
c000fe9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea2:	50                   	push   eax
c000fea3:	e8 62 09 00 00       	call   c001080a <Device::Device(char const*)>
c000fea8:	83 c4 10             	add    esp,0x10
c000feab:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb4:	89 10                	mov    DWORD PTR [eax],edx
c000feb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feba:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fec4:	90                   	nop
c000fec5:	83 c4 0c             	add    esp,0xc
c000fec8:	c3                   	ret    
c000fec9:	90                   	nop

c000feca <Bus::~Bus()>:
c000feca:	83 ec 0c             	sub    esp,0xc
c000fecd:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000fed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed6:	89 10                	mov    DWORD PTR [eax],edx
c000fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	50                   	push   eax
c000fee0:	e8 db 05 00 00       	call   c00104c0 <Device::~Device()>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	90                   	nop
c000fee9:	83 c4 0c             	add    esp,0xc
c000feec:	c3                   	ret    
c000feed:	90                   	nop

c000feee <Bus::~Bus()>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	83 ec 0c             	sub    esp,0xc
c000fef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef8:	e8 cd ff ff ff       	call   c000feca <Bus::~Bus()>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	83 ec 08             	sub    esp,0x8
c000ff03:	68 58 01 00 00       	push   0x158
c000ff08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0c:	e8 ce f1 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	83 c4 0c             	add    esp,0xc
c000ff17:	c3                   	ret    

c000ff18 <Buzzer::Buzzer(char const*)>:
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1f:	83 ec 08             	sub    esp,0x8
c000ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff26:	50                   	push   eax
c000ff27:	e8 de 08 00 00       	call   c001080a <Device::Device(char const*)>
c000ff2c:	83 c4 10             	add    esp,0x10
c000ff2f:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff38:	89 10                	mov    DWORD PTR [eax],edx
c000ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff56:	90                   	nop
c000ff57:	83 c4 0c             	add    esp,0xc
c000ff5a:	c3                   	ret    
c000ff5b:	90                   	nop

c000ff5c <Buzzer::~Buzzer()>:
c000ff5c:	83 ec 0c             	sub    esp,0xc
c000ff5f:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff68:	89 10                	mov    DWORD PTR [eax],edx
c000ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	50                   	push   eax
c000ff72:	e8 49 05 00 00       	call   c00104c0 <Device::~Device()>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	90                   	nop
c000ff7b:	83 c4 0c             	add    esp,0xc
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <Buzzer::~Buzzer()>:
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	83 ec 0c             	sub    esp,0xc
c000ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff8a:	e8 cd ff ff ff       	call   c000ff5c <Buzzer::~Buzzer()>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	83 ec 08             	sub    esp,0x8
c000ff95:	68 5c 01 00 00       	push   0x15c
c000ff9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9e:	e8 3c f1 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c000ffa3:	83 c4 10             	add    esp,0x10
c000ffa6:	83 c4 0c             	add    esp,0xc
c000ffa9:	c3                   	ret    

c000ffaa <Buzzer::stop()>:
c000ffaa:	83 ec 14             	sub    esp,0x14
c000ffad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffb3:	6a 00                	push   0x0
c000ffb5:	50                   	push   eax
c000ffb6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffb9:	83 c4 1c             	add    esp,0x1c
c000ffbc:	c3                   	ret    

c000ffbd <beepThread(void*)>:
c000ffbd:	53                   	push   ebx
c000ffbe:	83 ec 08             	sub    esp,0x8
c000ffc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffc5:	e8 75 8a 00 00       	call   c0018a3f <unlockScheduler()>
c000ffca:	52                   	push   edx
c000ffcb:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffd0:	52                   	push   edx
c000ffd1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffd7:	52                   	push   edx
c000ffd8:	50                   	push   eax
c000ffd9:	e8 bd 8f 00 00       	call   c0018f9b <nanoSleep(unsigned long long)>
c000ffde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe1:	e8 c4 ff ff ff       	call   c000ffaa <Buzzer::stop()>
c000ffe6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ffee:	83 c4 18             	add    esp,0x18
c000fff1:	5b                   	pop    ebx
c000fff2:	e9 e8 8e 00 00       	jmp    c0018edf <blockTask(TaskState)>
c000fff7:	90                   	nop

c000fff8 <Buzzer::beep(int, int, bool)>:
c000fff8:	57                   	push   edi
c000fff9:	56                   	push   esi
c000fffa:	53                   	push   ebx
c000fffb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010003:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010007:	52                   	push   edx
c0010008:	52                   	push   edx
c0010009:	8b 06                	mov    eax,DWORD PTR [esi]
c001000b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000f:	56                   	push   esi
c0010010:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010013:	89 f8                	mov    eax,edi
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	84 c0                	test   al,al
c001001a:	74 1f                	je     c001003b <Buzzer::beep(int, int, bool)+0x43>
c001001c:	50                   	push   eax
c001001d:	50                   	push   eax
c001001e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010024:	99                   	cdq    
c0010025:	52                   	push   edx
c0010026:	50                   	push   eax
c0010027:	e8 6f 8f 00 00       	call   c0018f9b <nanoSleep(unsigned long long)>
c001002c:	83 c4 10             	add    esp,0x10
c001002f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	5f                   	pop    edi
c0010036:	e9 6f ff ff ff       	jmp    c000ffaa <Buzzer::stop()>
c001003b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0010041:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0010046:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001004e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010052:	c7 44 24 14 bd ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffbd
c001005a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005e:	5b                   	pop    ebx
c001005f:	5e                   	pop    esi
c0010060:	5f                   	pop    edi
c0010061:	e9 0c 8b 00 00       	jmp    c0018b72 <Process::createThread(void (*)(void*), void*, int)>

c0010066 <loadClockSettings()>:
c0010066:	c7 05 f4 48 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00248f4,0xa
c0010070:	c6 05 f1 48 02 c0 00 	mov    BYTE PTR ds:0xc00248f1,0x0
c0010077:	c6 05 f0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f0,0x1
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <Clock::Clock(char const*)>:
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010087:	83 ec 08             	sub    esp,0x8
c001008a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001008e:	50                   	push   eax
c001008f:	e8 76 07 00 00       	call   c001080a <Device::Device(char const*)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a0:	89 10                	mov    DWORD PTR [eax],edx
c00100a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100b0:	90                   	nop
c00100b1:	83 c4 0c             	add    esp,0xc
c00100b4:	c3                   	ret    
c00100b5:	90                   	nop

c00100b6 <Clock::~Clock()>:
c00100b6:	83 ec 0c             	sub    esp,0xc
c00100b9:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00100be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c2:	89 10                	mov    DWORD PTR [eax],edx
c00100c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	50                   	push   eax
c00100cc:	e8 ef 03 00 00       	call   c00104c0 <Device::~Device()>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	90                   	nop
c00100d5:	83 c4 0c             	add    esp,0xc
c00100d8:	c3                   	ret    
c00100d9:	90                   	nop

c00100da <Clock::~Clock()>:
c00100da:	83 ec 0c             	sub    esp,0xc
c00100dd:	83 ec 0c             	sub    esp,0xc
c00100e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e4:	e8 cd ff ff ff       	call   c00100b6 <Clock::~Clock()>
c00100e9:	83 c4 10             	add    esp,0x10
c00100ec:	83 ec 08             	sub    esp,0x8
c00100ef:	68 58 01 00 00       	push   0x158
c00100f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f8:	e8 e2 ef ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00100fd:	83 c4 10             	add    esp,0x10
c0010100:	83 c4 0c             	add    esp,0xc
c0010103:	c3                   	ret    

c0010104 <Clock::timeInSecondsLocal()>:
c0010104:	53                   	push   ebx
c0010105:	83 ec 14             	sub    esp,0x14
c0010108:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001010c:	8b 10                	mov    edx,DWORD PTR [eax]
c001010e:	50                   	push   eax
c001010f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010112:	0f b6 0d f0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248f0
c0010119:	03 0d f4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248f4
c001011f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010125:	89 cb                	mov    ebx,ecx
c0010127:	c1 fb 1f             	sar    ebx,0x1f
c001012a:	01 c8                	add    eax,ecx
c001012c:	11 da                	adc    edx,ebx
c001012e:	83 c4 10             	add    esp,0x10
c0010131:	31 c9                	xor    ecx,ecx
c0010133:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c001013a:	74 05                	je     c0010141 <Clock::timeInSecondsLocal()+0x3d>
c001013c:	b9 08 07 00 00       	mov    ecx,0x708
c0010141:	31 db                	xor    ebx,ebx
c0010143:	01 c8                	add    eax,ecx
c0010145:	11 da                	adc    edx,ebx
c0010147:	83 c4 08             	add    esp,0x8
c001014a:	5b                   	pop    ebx
c001014b:	c3                   	ret    

c001014c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001014c:	57                   	push   edi
c001014d:	56                   	push   esi
c001014e:	53                   	push   ebx
c001014f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010153:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010157:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001015b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001015d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010160:	0f b6 05 f0 48 02 c0 	movzx  eax,BYTE PTR ds:0xc00248f0
c0010167:	03 05 f4 48 02 c0    	add    eax,DWORD PTR ds:0xc00248f4
c001016d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010173:	99                   	cdq    
c0010174:	29 c6                	sub    esi,eax
c0010176:	19 d7                	sbb    edi,edx
c0010178:	89 f0                	mov    eax,esi
c001017a:	89 fa                	mov    edx,edi
c001017c:	31 f6                	xor    esi,esi
c001017e:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c0010185:	74 05                	je     c001018c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010187:	be 08 07 00 00       	mov    esi,0x708
c001018c:	31 ff                	xor    edi,edi
c001018e:	29 f0                	sub    eax,esi
c0010190:	19 fa                	sbb    edx,edi
c0010192:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010196:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001019a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001019e:	89 d8                	mov    eax,ebx
c00101a0:	5b                   	pop    ebx
c00101a1:	5e                   	pop    esi
c00101a2:	5f                   	pop    edi
c00101a3:	ff e0                	jmp    eax

c00101a5 <datetimeToSeconds(datetime_t)>:
c00101a5:	55                   	push   ebp
c00101a6:	57                   	push   edi
c00101a7:	56                   	push   esi
c00101a8:	53                   	push   ebx
c00101a9:	83 ec 14             	sub    esp,0x14
c00101ac:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101b4:	0f b6 f5             	movzx  esi,ch
c00101b7:	6b f6 3c             	imul   esi,esi,0x3c
c00101ba:	89 cf                	mov    edi,ecx
c00101bc:	89 d3                	mov    ebx,edx
c00101be:	0f b6 c9             	movzx  ecx,cl
c00101c1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101c7:	0f b6 c6             	movzx  eax,dh
c00101ca:	c1 ef 10             	shr    edi,0x10
c00101cd:	48                   	dec    eax
c00101ce:	c1 eb 10             	shr    ebx,0x10
c00101d1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101d5:	89 f8                	mov    eax,edi
c00101d7:	0f b6 f8             	movzx  edi,al
c00101da:	01 fe                	add    esi,edi
c00101dc:	01 f1                	add    ecx,esi
c00101de:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101e2:	c1 f9 1f             	sar    ecx,0x1f
c00101e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101e9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101ee:	0f b6 d2             	movzx  edx,dl
c00101f1:	66 81 eb 6c 07       	sub    bx,0x76c
c00101f6:	8b 0c 8d 00 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde400]
c00101fd:	0f b7 f3             	movzx  esi,bx
c0010200:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010204:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010209:	76 29                	jbe    c0010234 <datetimeToSeconds(datetime_t)+0x8f>
c001020b:	f6 c3 03             	test   bl,0x3
c001020e:	75 24                	jne    c0010234 <datetimeToSeconds(datetime_t)+0x8f>
c0010210:	31 d2                	xor    edx,edx
c0010212:	bf 64 00 00 00       	mov    edi,0x64
c0010217:	89 d8                	mov    eax,ebx
c0010219:	66 f7 f7             	div    di
c001021c:	66 85 d2             	test   dx,dx
c001021f:	75 12                	jne    c0010233 <datetimeToSeconds(datetime_t)+0x8e>
c0010221:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010227:	bf 90 01 00 00       	mov    edi,0x190
c001022c:	99                   	cdq    
c001022d:	f7 ff                	idiv   edi
c001022f:	85 d2                	test   edx,edx
c0010231:	75 01                	jne    c0010234 <datetimeToSeconds(datetime_t)+0x8f>
c0010233:	41                   	inc    ecx
c0010234:	66 83 fb 46          	cmp    bx,0x46
c0010238:	76 45                	jbe    c001027f <datetimeToSeconds(datetime_t)+0xda>
c001023a:	bb 46 00 00 00       	mov    ebx,0x46
c001023f:	bf 64 00 00 00       	mov    edi,0x64
c0010244:	bd 90 01 00 00       	mov    ebp,0x190
c0010249:	b8 6d 01 00 00       	mov    eax,0x16d
c001024e:	f6 c3 03             	test   bl,0x3
c0010251:	75 23                	jne    c0010276 <datetimeToSeconds(datetime_t)+0xd1>
c0010253:	89 d8                	mov    eax,ebx
c0010255:	99                   	cdq    
c0010256:	f7 ff                	idiv   edi
c0010258:	85 d2                	test   edx,edx
c001025a:	b8 6e 01 00 00       	mov    eax,0x16e
c001025f:	75 15                	jne    c0010276 <datetimeToSeconds(datetime_t)+0xd1>
c0010261:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010267:	99                   	cdq    
c0010268:	f7 fd                	idiv   ebp
c001026a:	31 c0                	xor    eax,eax
c001026c:	85 d2                	test   edx,edx
c001026e:	0f 94 c0             	sete   al
c0010271:	05 6d 01 00 00       	add    eax,0x16d
c0010276:	43                   	inc    ebx
c0010277:	01 c1                	add    ecx,eax
c0010279:	39 f3                	cmp    ebx,esi
c001027b:	7c cc                	jl     c0010249 <datetimeToSeconds(datetime_t)+0xa4>
c001027d:	eb 3b                	jmp    c00102ba <datetimeToSeconds(datetime_t)+0x115>
c001027f:	74 39                	je     c00102ba <datetimeToSeconds(datetime_t)+0x115>
c0010281:	b8 45 00 00 00       	mov    eax,0x45
c0010286:	89 c2                	mov    edx,eax
c0010288:	83 e2 03             	and    edx,0x3
c001028b:	39 f0                	cmp    eax,esi
c001028d:	7e 13                	jle    c00102a2 <datetimeToSeconds(datetime_t)+0xfd>
c001028f:	85 d2                	test   edx,edx
c0010291:	0f 94 c2             	sete   dl
c0010294:	0f b6 d2             	movzx  edx,dl
c0010297:	81 c2 6d 01 00 00    	add    edx,0x16d
c001029d:	48                   	dec    eax
c001029e:	29 d1                	sub    ecx,edx
c00102a0:	eb e4                	jmp    c0010286 <datetimeToSeconds(datetime_t)+0xe1>
c00102a2:	b8 6d 01 00 00       	mov    eax,0x16d
c00102a7:	85 d2                	test   edx,edx
c00102a9:	75 0d                	jne    c00102b8 <datetimeToSeconds(datetime_t)+0x113>
c00102ab:	31 c0                	xor    eax,eax
c00102ad:	66 85 db             	test   bx,bx
c00102b0:	0f 95 c0             	setne  al
c00102b3:	05 6d 01 00 00       	add    eax,0x16d
c00102b8:	29 c1                	sub    ecx,eax
c00102ba:	b8 80 51 01 00       	mov    eax,0x15180
c00102bf:	f7 e9                	imul   ecx
c00102c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102c9:	83 c4 14             	add    esp,0x14
c00102cc:	5b                   	pop    ebx
c00102cd:	5e                   	pop    esi
c00102ce:	5f                   	pop    edi
c00102cf:	5d                   	pop    ebp
c00102d0:	c3                   	ret    
c00102d1:	90                   	nop

c00102d2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102d2:	57                   	push   edi
c00102d3:	56                   	push   esi
c00102d4:	53                   	push   ebx
c00102d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00102db:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102e6:	e8 ba fe ff ff       	call   c00101a5 <datetimeToSeconds(datetime_t)>
c00102eb:	59                   	pop    ecx
c00102ec:	0f b6 0d f0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248f0
c00102f3:	03 0d f4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248f4
c00102f9:	5b                   	pop    ebx
c00102fa:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010300:	89 cb                	mov    ebx,ecx
c0010302:	c1 fb 1f             	sar    ebx,0x1f
c0010305:	29 c8                	sub    eax,ecx
c0010307:	19 da                	sbb    edx,ebx
c0010309:	31 c9                	xor    ecx,ecx
c001030b:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c0010312:	74 05                	je     c0010319 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010314:	b9 08 07 00 00       	mov    ecx,0x708
c0010319:	31 db                	xor    ebx,ebx
c001031b:	29 c8                	sub    eax,ecx
c001031d:	19 da                	sbb    edx,ebx
c001031f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010323:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010327:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001032b:	5b                   	pop    ebx
c001032c:	89 f8                	mov    eax,edi
c001032e:	5e                   	pop    esi
c001032f:	5f                   	pop    edi
c0010330:	ff e0                	jmp    eax

c0010332 <secondsToDatetime(unsigned long long)>:
c0010332:	55                   	push   ebp
c0010333:	57                   	push   edi
c0010334:	56                   	push   esi
c0010335:	53                   	push   ebx
c0010336:	83 ec 1c             	sub    esp,0x1c
c0010339:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001033d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010341:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010345:	6a 00                	push   0x0
c0010347:	68 80 51 01 00       	push   0x15180
c001034c:	55                   	push   ebp
c001034d:	57                   	push   edi
c001034e:	e8 a9 f1 00 00       	call   c001f4fc <__udivdi3>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001035a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010360:	6a 00                	push   0x0
c0010362:	68 80 51 01 00       	push   0x15180
c0010367:	55                   	push   ebp
c0010368:	57                   	push   edi
c0010369:	e8 8e f2 00 00       	call   c001f5fc <__umoddi3>
c001036e:	bf 10 0e 00 00       	mov    edi,0xe10
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	99                   	cdq    
c0010377:	f7 ff                	idiv   edi
c0010379:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001037c:	89 d0                	mov    eax,edx
c001037e:	99                   	cdq    
c001037f:	bf 3c 00 00 00       	mov    edi,0x3c
c0010384:	f7 ff                	idiv   edi
c0010386:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010389:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001038c:	85 db                	test   ebx,ebx
c001038e:	79 11                	jns    c00103a1 <secondsToDatetime(unsigned long long)+0x6f>
c0010390:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010394:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001039a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001039f:	eb 07                	jmp    c00103a8 <secondsToDatetime(unsigned long long)+0x76>
c00103a1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103a6:	89 d8                	mov    eax,ebx
c00103a8:	99                   	cdq    
c00103a9:	f7 f9                	idiv   ecx
c00103ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103af:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103b4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103bc:	01 c3                	add    ebx,eax
c00103be:	31 d2                	xor    edx,edx
c00103c0:	89 d8                	mov    eax,ebx
c00103c2:	bf b4 05 00 00       	mov    edi,0x5b4
c00103c7:	f7 f1                	div    ecx
c00103c9:	31 d2                	xor    edx,edx
c00103cb:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103d0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103d3:	89 d8                	mov    eax,ebx
c00103d5:	f7 f7                	div    edi
c00103d7:	29 c1                	sub    ecx,eax
c00103d9:	31 d2                	xor    edx,edx
c00103db:	89 d8                	mov    eax,ebx
c00103dd:	f7 f5                	div    ebp
c00103df:	29 c1                	sub    ecx,eax
c00103e1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103e6:	89 c8                	mov    eax,ecx
c00103e8:	31 d2                	xor    edx,edx
c00103ea:	f7 f5                	div    ebp
c00103ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00103f5:	89 c8                	mov    eax,ecx
c00103f7:	31 d2                	xor    edx,edx
c00103f9:	f7 f5                	div    ebp
c00103fb:	01 c3                	add    ebx,eax
c00103fd:	31 d2                	xor    edx,edx
c00103ff:	89 c8                	mov    eax,ecx
c0010401:	f7 f7                	div    edi
c0010403:	29 c3                	sub    ebx,eax
c0010405:	bf 99 00 00 00       	mov    edi,0x99
c001040a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010412:	29 c3                	sub    ebx,eax
c0010414:	31 d2                	xor    edx,edx
c0010416:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010419:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001041c:	83 c1 02             	add    ecx,0x2
c001041f:	bb 05 00 00 00       	mov    ebx,0x5
c0010424:	89 c8                	mov    eax,ecx
c0010426:	f7 f7                	div    edi
c0010428:	89 c7                	mov    edi,eax
c001042a:	31 d2                	xor    edx,edx
c001042c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010432:	83 c0 02             	add    eax,0x2
c0010435:	f7 f3                	div    ebx
c0010437:	89 eb                	mov    ebx,ebp
c0010439:	29 c3                	sub    ebx,eax
c001043b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010441:	19 c0                	sbb    eax,eax
c0010443:	31 d2                	xor    edx,edx
c0010445:	83 e0 0c             	and    eax,0xc
c0010448:	88 1e                	mov    BYTE PTR [esi],bl
c001044a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001044e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010456:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001045a:	83 f9 01             	cmp    ecx,0x1
c001045d:	0f 96 c2             	setbe  dl
c0010460:	01 d0                	add    eax,edx
c0010462:	41                   	inc    ecx
c0010463:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010467:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001046a:	83 c4 1c             	add    esp,0x1c
c001046d:	89 f0                	mov    eax,esi
c001046f:	5b                   	pop    ebx
c0010470:	5e                   	pop    esi
c0010471:	5f                   	pop    edi
c0010472:	5d                   	pop    ebp
c0010473:	c2 04 00             	ret    0x4

c0010476 <Clock::timeInDatetimeLocal()>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 14             	sub    esp,0x14
c001047a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001047e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010482:	e8 7d fc ff ff       	call   c0010104 <Clock::timeInSecondsLocal()>
c0010487:	83 c4 0c             	add    esp,0xc
c001048a:	52                   	push   edx
c001048b:	50                   	push   eax
c001048c:	53                   	push   ebx
c001048d:	e8 a0 fe ff ff       	call   c0010332 <secondsToDatetime(unsigned long long)>
c0010492:	83 c4 14             	add    esp,0x14
c0010495:	89 d8                	mov    eax,ebx
c0010497:	5b                   	pop    ebx
c0010498:	c2 04 00             	ret    0x4
c001049b:	90                   	nop

c001049c <Device::hibernate()>:
c001049c:	c3                   	ret    
c001049d:	90                   	nop

c001049e <Device::wake()>:
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Device::detect()>:
c00104a0:	c3                   	ret    
c00104a1:	90                   	nop

c00104a2 <Device::disableLegacy()>:
c00104a2:	c3                   	ret    
c00104a3:	90                   	nop

c00104a4 <Device::powerSaving(PowerSavingLevel)>:
c00104a4:	c3                   	ret    
c00104a5:	90                   	nop

c00104a6 <DriverlessDevice::close(int, int, void*)>:
c00104a6:	31 c0                	xor    eax,eax
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <DriverlessDevice::detect()>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <DriverlessDevice::open(int, int, void*)>:
c00104ac:	83 ec 18             	sub    esp,0x18
c00104af:	68 30 1c 02 c0       	push   0xc0021c30
c00104b4:	e8 7b 55 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c00104b9:	83 c8 ff             	or     eax,0xffffffff
c00104bc:	83 c4 1c             	add    esp,0x1c
c00104bf:	c3                   	ret    

c00104c0 <Device::~Device()>:
c00104c0:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c00104c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c9:	89 10                	mov    DWORD PTR [eax],edx
c00104cb:	90                   	nop
c00104cc:	c3                   	ret    
c00104cd:	90                   	nop

c00104ce <Device::~Device()>:
c00104ce:	83 ec 0c             	sub    esp,0xc
c00104d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104d5:	e8 e6 ff ff ff       	call   c00104c0 <Device::~Device()>
c00104da:	83 c4 04             	add    esp,0x4
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	68 58 01 00 00       	push   0x158
c00104e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e9:	e8 f1 eb ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	83 c4 0c             	add    esp,0xc
c00104f4:	c3                   	ret    
c00104f5:	90                   	nop

c00104f6 <Device::findAndLoadDriver()>:
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00104f8:	57                   	push   edi
c00104f9:	b9 09 00 00 00       	mov    ecx,0x9
c00104fe:	56                   	push   esi
c00104ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010503:	81 c7 18 01 00 00    	add    edi,0x118
c0010509:	8d 74 24 10          	lea    esi,[esp+0x10]
c001050d:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010514:	fc                   	cld    
c0010515:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010517:	5e                   	pop    esi
c0010518:	5f                   	pop    edi
c0010519:	c3                   	ret    

c001051a <Device::preOpenACPI(void*, char*, char*)>:
c001051a:	56                   	push   esi
c001051b:	53                   	push   ebx
c001051c:	83 ec 08             	sub    esp,0x8
c001051f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010527:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001052b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010531:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001053b:	6a 1e                	push   0x1e
c001053d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010543:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010547:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001054d:	50                   	push   eax
c001054e:	e8 2c 01 ff ff       	call   c000067f <memcpy>
c0010553:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010557:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001055b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010563:	83 c4 14             	add    esp,0x14
c0010566:	5b                   	pop    ebx
c0010567:	5e                   	pop    esi
c0010568:	e9 12 01 ff ff       	jmp    c000067f <memcpy>
c001056d:	90                   	nop

c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001056e:	55                   	push   ebp
c001056f:	57                   	push   edi
c0010570:	56                   	push   esi
c0010571:	53                   	push   ebx
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010579:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001057d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010581:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010585:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001058a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010591:	75 0b                	jne    c001059e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010593:	8b 00                	mov    eax,DWORD PTR [eax]
c0010595:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010599:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001059c:	eb 24                	jmp    c00105c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001059e:	e8 25 43 00 00       	call   c00148c8 <thisCPU()>
c00105a3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00105ab:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105af:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105b3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105b7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105bf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105c2:	83 c4 0c             	add    esp,0xc
c00105c5:	5b                   	pop    ebx
c00105c6:	5e                   	pop    esi
c00105c7:	5f                   	pop    edi
c00105c8:	5d                   	pop    ebp
c00105c9:	ff e0                	jmp    eax
c00105cb:	90                   	nop

c00105cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105cc:	57                   	push   edi
c00105cd:	56                   	push   esi
c00105ce:	53                   	push   ebx
c00105cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105db:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105e0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105e7:	75 0b                	jne    c00105f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00105eb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105ef:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00105f2:	eb 20                	jmp    c0010614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00105f4:	e8 cf 42 00 00       	call   c00148c8 <thisCPU()>
c00105f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0010601:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010605:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010609:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001060d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010611:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010614:	5b                   	pop    ebx
c0010615:	5e                   	pop    esi
c0010616:	5f                   	pop    edi
c0010617:	ff e0                	jmp    eax
c0010619:	90                   	nop

c001061a <Device::addChild(Device*)>:
c001061a:	53                   	push   ebx
c001061b:	83 ec 08             	sub    esp,0x8
c001061e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010626:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001062c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010634:	85 d2                	test   edx,edx
c0010636:	74 04                	je     c001063c <Device::addChild(Device*)+0x22>
c0010638:	89 d3                	mov    ebx,edx
c001063a:	eb f6                	jmp    c0010632 <Device::addChild(Device*)+0x18>
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010642:	6a 08                	push   0x8
c0010644:	e8 87 ea ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010649:	89 03                	mov    DWORD PTR [ebx],eax
c001064b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010651:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010658:	83 c4 18             	add    esp,0x18
c001065b:	5b                   	pop    ebx
c001065c:	c3                   	ret    
c001065d:	90                   	nop

c001065e <Device::removeAllChildren()>:
c001065e:	56                   	push   esi
c001065f:	53                   	push   ebx
c0010660:	52                   	push   edx
c0010661:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010665:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001066b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001066e:	74 17                	je     c0010687 <Device::removeAllChildren()+0x29>
c0010670:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010673:	85 c0                	test   eax,eax
c0010675:	74 0c                	je     c0010683 <Device::removeAllChildren()+0x25>
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	8b 10                	mov    edx,DWORD PTR [eax]
c001067c:	50                   	push   eax
c001067d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010685:	eb e4                	jmp    c001066b <Device::removeAllChildren()+0xd>
c0010687:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001068d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010693:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106a0:	58                   	pop    eax
c00106a1:	5b                   	pop    ebx
c00106a2:	5e                   	pop    esi
c00106a3:	c3                   	ret    

c00106a4 <Device::hibernateAll()>:
c00106a4:	53                   	push   ebx
c00106a5:	83 ec 14             	sub    esp,0x14
c00106a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ae:	53                   	push   ebx
c00106af:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106be:	74 0f                	je     c00106cf <Device::hibernateAll()+0x2b>
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106c6:	e8 d9 ff ff ff       	call   c00106a4 <Device::hibernateAll()>
c00106cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106cd:	eb e9                	jmp    c00106b8 <Device::hibernateAll()+0x14>
c00106cf:	83 c4 08             	add    esp,0x8
c00106d2:	5b                   	pop    ebx
c00106d3:	c3                   	ret    

c00106d4 <Device::wakeAll()>:
c00106d4:	53                   	push   ebx
c00106d5:	83 ec 14             	sub    esp,0x14
c00106d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106de:	53                   	push   ebx
c00106df:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106e8:	83 c4 10             	add    esp,0x10
c00106eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ee:	74 0f                	je     c00106ff <Device::wakeAll()+0x2b>
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106f6:	e8 d9 ff ff ff       	call   c00106d4 <Device::wakeAll()>
c00106fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106fd:	eb e9                	jmp    c00106e8 <Device::wakeAll()+0x14>
c00106ff:	83 c4 08             	add    esp,0x8
c0010702:	5b                   	pop    ebx
c0010703:	c3                   	ret    

c0010704 <Device::detectAll()>:
c0010704:	53                   	push   ebx
c0010705:	83 ec 14             	sub    esp,0x14
c0010708:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001070c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001070e:	53                   	push   ebx
c001070f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010712:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010718:	83 c4 10             	add    esp,0x10
c001071b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001071e:	74 0f                	je     c001072f <Device::detectAll()+0x2b>
c0010720:	83 ec 0c             	sub    esp,0xc
c0010723:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010726:	e8 d9 ff ff ff       	call   c0010704 <Device::detectAll()>
c001072b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001072d:	eb e9                	jmp    c0010718 <Device::detectAll()+0x14>
c001072f:	83 c4 08             	add    esp,0x8
c0010732:	5b                   	pop    ebx
c0010733:	c3                   	ret    

c0010734 <Device::disableLegacyAll()>:
c0010734:	53                   	push   ebx
c0010735:	83 ec 14             	sub    esp,0x14
c0010738:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001073c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001073e:	53                   	push   ebx
c001073f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010742:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001074e:	74 0f                	je     c001075f <Device::disableLegacyAll()+0x2b>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010756:	e8 d9 ff ff ff       	call   c0010734 <Device::disableLegacyAll()>
c001075b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001075d:	eb e9                	jmp    c0010748 <Device::disableLegacyAll()+0x14>
c001075f:	83 c4 08             	add    esp,0x8
c0010762:	5b                   	pop    ebx
c0010763:	c3                   	ret    

c0010764 <Device::loadDriversForAll()>:
c0010764:	53                   	push   ebx
c0010765:	83 ec 08             	sub    esp,0x8
c0010768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010772:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010774:	85 db                	test   ebx,ebx
c0010776:	74 12                	je     c001078a <Device::loadDriversForAll()+0x26>
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001077e:	e8 e1 ff ff ff       	call   c0010764 <Device::loadDriversForAll()>
c0010783:	83 c4 10             	add    esp,0x10
c0010786:	89 d8                	mov    eax,ebx
c0010788:	eb e8                	jmp    c0010772 <Device::loadDriversForAll()+0xe>
c001078a:	83 c4 08             	add    esp,0x8
c001078d:	5b                   	pop    ebx
c001078e:	c3                   	ret    
c001078f:	90                   	nop

c0010790 <Device::closeAll()>:
c0010790:	53                   	push   ebx
c0010791:	83 ec 08             	sub    esp,0x8
c0010794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010798:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079a:	6a 00                	push   0x0
c001079c:	6a 00                	push   0x0
c001079e:	6a 00                	push   0x0
c00107a0:	53                   	push   ebx
c00107a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107aa:	83 c4 10             	add    esp,0x10
c00107ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107b0:	74 0f                	je     c00107c1 <Device::closeAll()+0x31>
c00107b2:	83 ec 0c             	sub    esp,0xc
c00107b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107b8:	e8 d3 ff ff ff       	call   c0010790 <Device::closeAll()>
c00107bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107bf:	eb e9                	jmp    c00107aa <Device::closeAll()+0x1a>
c00107c1:	83 c4 08             	add    esp,0x8
c00107c4:	5b                   	pop    ebx
c00107c5:	c3                   	ret    

c00107c6 <Device::powerSavingAll(PowerSavingLevel)>:
c00107c6:	56                   	push   esi
c00107c7:	53                   	push   ebx
c00107c8:	83 ec 0c             	sub    esp,0xc
c00107cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107d5:	56                   	push   esi
c00107d6:	53                   	push   ebx
c00107d7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107e6:	74 0f                	je     c00107f7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107e8:	52                   	push   edx
c00107e9:	52                   	push   edx
c00107ea:	56                   	push   esi
c00107eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107ee:	e8 d3 ff ff ff       	call   c00107c6 <Device::powerSavingAll(PowerSavingLevel)>
c00107f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107f5:	eb e9                	jmp    c00107e0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00107f7:	58                   	pop    eax
c00107f8:	5b                   	pop    ebx
c00107f9:	5e                   	pop    esi
c00107fa:	c3                   	ret    
c00107fb:	90                   	nop

c00107fc <Device::setName(char const*)>:
c00107fc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010804:	e9 4b ff fe ff       	jmp    c0000754 <strcpy>
c0010809:	90                   	nop

c001080a <Device::Device(char const*)>:
c001080a:	83 ec 0c             	sub    esp,0xc
c001080d:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	89 10                	mov    DWORD PTR [eax],edx
c0010818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010838:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010850:	83 ec 08             	sub    esp,0x8
c0010853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001085b:	e8 9c ff ff ff       	call   c00107fc <Device::setName(char const*)>
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	83 ec 0c             	sub    esp,0xc
c0010866:	6a 08                	push   0x8
c0010868:	e8 63 e8 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001086d:	83 c4 10             	add    esp,0x10
c0010870:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010876:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001087d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010881:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010891:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00108f6:	90                   	nop
c00108f7:	83 c4 0c             	add    esp,0xc
c00108fa:	c3                   	ret    
c00108fb:	90                   	nop

c00108fc <Device::getName()>:
c00108fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010900:	05 d0 00 00 00       	add    eax,0xd0
c0010905:	c3                   	ret    

c0010906 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090d:	83 ec 08             	sub    esp,0x8
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	50                   	push   eax
c0010915:	e8 f0 fe ff ff       	call   c001080a <Device::Device(char const*)>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	89 10                	mov    DWORD PTR [eax],edx
c0010928:	90                   	nop
c0010929:	83 c4 0c             	add    esp,0xc
c001092c:	c3                   	ret    
c001092d:	90                   	nop

c001092e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001092e:	57                   	push   edi
c001092f:	56                   	push   esi
c0010930:	53                   	push   ebx
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010939:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001093d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010943:	75 0c                	jne    c0010951 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010945:	52                   	push   edx
c0010946:	52                   	push   edx
c0010947:	53                   	push   ebx
c0010948:	56                   	push   esi
c0010949:	e8 c6 f0 00 00       	call   c001fa14 <LinkedList<Device>::addElement(Device*)>
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010957:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001095a:	74 12                	je     c001096e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001095c:	50                   	push   eax
c001095d:	57                   	push   edi
c001095e:	56                   	push   esi
c001095f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010962:	e8 c7 ff ff ff       	call   c001092e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010967:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	eb e9                	jmp    c0010957 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001096e:	5b                   	pop    ebx
c001096f:	5e                   	pop    esi
c0010970:	5f                   	pop    edi
c0010971:	c3                   	ret    

c0010972 <getDevicesOfType(DeviceType)>:
c0010972:	53                   	push   ebx
c0010973:	83 ec 14             	sub    esp,0x14
c0010976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001097a:	53                   	push   ebx
c001097b:	e8 70 f1 00 00       	call   c001faf0 <LinkedList<Device>::LinkedList()>
c0010980:	83 c4 0c             	add    esp,0xc
c0010983:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010987:	53                   	push   ebx
c0010988:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c001098e:	e8 9b ff ff ff       	call   c001092e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010993:	83 c4 18             	add    esp,0x18
c0010996:	89 d8                	mov    eax,ebx
c0010998:	5b                   	pop    ebx
c0010999:	c2 04 00             	ret    0x4

c001099c <HardDiskController::HardDiskController(char const*)>:
c001099c:	83 ec 0c             	sub    esp,0xc
c001099f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a3:	83 ec 08             	sub    esp,0x8
c00109a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109aa:	50                   	push   eax
c00109ab:	e8 5a fe ff ff       	call   c001080a <Device::Device(char const*)>
c00109b0:	83 c4 10             	add    esp,0x10
c00109b3:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bc:	89 10                	mov    DWORD PTR [eax],edx
c00109be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109cc:	90                   	nop
c00109cd:	83 c4 0c             	add    esp,0xc
c00109d0:	c3                   	ret    
c00109d1:	90                   	nop

c00109d2 <HardDiskController::~HardDiskController()>:
c00109d2:	83 ec 0c             	sub    esp,0xc
c00109d5:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109de:	89 10                	mov    DWORD PTR [eax],edx
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	50                   	push   eax
c00109e8:	e8 d3 fa ff ff       	call   c00104c0 <Device::~Device()>
c00109ed:	83 c4 10             	add    esp,0x10
c00109f0:	90                   	nop
c00109f1:	83 c4 0c             	add    esp,0xc
c00109f4:	c3                   	ret    
c00109f5:	90                   	nop

c00109f6 <HardDiskController::~HardDiskController()>:
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	83 ec 0c             	sub    esp,0xc
c00109fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a00:	e8 cd ff ff ff       	call   c00109d2 <HardDiskController::~HardDiskController()>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	83 ec 08             	sub    esp,0x8
c0010a0b:	68 58 01 00 00       	push   0x158
c0010a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a14:	e8 c6 e6 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	83 c4 0c             	add    esp,0xc
c0010a1f:	c3                   	ret    

c0010a20 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a27:	83 ec 08             	sub    esp,0x8
c0010a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2e:	50                   	push   eax
c0010a2f:	e8 d6 fd ff ff       	call   c001080a <Device::Device(char const*)>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a40:	89 10                	mov    DWORD PTR [eax],edx
c0010a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a46:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a51:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a6e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a82:	90                   	nop
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	c3                   	ret    
c0010a87:	90                   	nop

c0010a88 <PhysicalDisk::startCache()>:
c0010a88:	56                   	push   esi
c0010a89:	53                   	push   ebx
c0010a8a:	83 ec 10             	sub    esp,0x10
c0010a8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a91:	6a 30                	push   0x30
c0010a93:	e8 38 e6 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010a98:	89 c6                	mov    esi,eax
c0010a9a:	58                   	pop    eax
c0010a9b:	5a                   	pop    edx
c0010a9c:	53                   	push   ebx
c0010a9d:	56                   	push   esi
c0010a9e:	e8 3b 25 00 00       	call   c0012fde <VCache::VCache(PhysicalDisk*)>
c0010aa3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010aa9:	83 c4 14             	add    esp,0x14
c0010aac:	5b                   	pop    ebx
c0010aad:	5e                   	pop    esi
c0010aae:	c3                   	ret    
c0010aaf:	90                   	nop

c0010ab0 <PhysicalDisk::~PhysicalDisk()>:
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abc:	89 10                	mov    DWORD PTR [eax],edx
c0010abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac2:	83 ec 0c             	sub    esp,0xc
c0010ac5:	50                   	push   eax
c0010ac6:	e8 f5 f9 ff ff       	call   c00104c0 <Device::~Device()>
c0010acb:	83 c4 10             	add    esp,0x10
c0010ace:	90                   	nop
c0010acf:	83 c4 0c             	add    esp,0xc
c0010ad2:	c3                   	ret    
c0010ad3:	90                   	nop

c0010ad4 <PhysicalDisk::~PhysicalDisk()>:
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	83 ec 0c             	sub    esp,0xc
c0010ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ade:	e8 cd ff ff ff       	call   c0010ab0 <PhysicalDisk::~PhysicalDisk()>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	83 ec 08             	sub    esp,0x8
c0010ae9:	68 6c 01 00 00       	push   0x16c
c0010aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af2:	e8 e8 e5 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	83 c4 0c             	add    esp,0xc
c0010afd:	c3                   	ret    

c0010afe <FPU::FPU(char const*)>:
c0010afe:	83 ec 0c             	sub    esp,0xc
c0010b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b05:	83 ec 08             	sub    esp,0x8
c0010b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0c:	50                   	push   eax
c0010b0d:	e8 f8 fc ff ff       	call   c001080a <Device::Device(char const*)>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1e:	89 10                	mov    DWORD PTR [eax],edx
c0010b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b24:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b2e:	90                   	nop
c0010b2f:	83 c4 0c             	add    esp,0xc
c0010b32:	c3                   	ret    
c0010b33:	90                   	nop

c0010b34 <FPU::~FPU()>:
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b40:	89 10                	mov    DWORD PTR [eax],edx
c0010b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	50                   	push   eax
c0010b4a:	e8 71 f9 ff ff       	call   c00104c0 <Device::~Device()>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	90                   	nop
c0010b53:	83 c4 0c             	add    esp,0xc
c0010b56:	c3                   	ret    
c0010b57:	90                   	nop

c0010b58 <FPU::~FPU()>:
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	83 ec 0c             	sub    esp,0xc
c0010b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b62:	e8 cd ff ff ff       	call   c0010b34 <FPU::~FPU()>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	83 ec 08             	sub    esp,0x8
c0010b6d:	68 58 01 00 00       	push   0x158
c0010b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b76:	e8 64 e5 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0010b7b:	83 c4 10             	add    esp,0x10
c0010b7e:	83 c4 0c             	add    esp,0xc
c0010b81:	c3                   	ret    

c0010b82 <setupFPU()>:
c0010b82:	53                   	push   ebx
c0010b83:	83 ec 08             	sub    esp,0x8
c0010b86:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0010b8b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010b92:	74 19                	je     c0010bad <setupFPU()+0x2b>
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	68 58 01 00 00       	push   0x158
c0010b9c:	e8 2f e5 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010ba1:	89 c3                	mov    ebx,eax
c0010ba3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ba6:	e8 97 d5 00 00       	call   c001e142 <AVX::AVX()>
c0010bab:	eb 5b                	jmp    c0010c08 <setupFPU()+0x86>
c0010bad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bb3:	84 c0                	test   al,al
c0010bb5:	79 19                	jns    c0010bd0 <setupFPU()+0x4e>
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	68 58 01 00 00       	push   0x158
c0010bbf:	e8 0c e5 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010bc4:	89 c3                	mov    ebx,eax
c0010bc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bc9:	e8 9a d6 00 00       	call   c001e268 <SSE::SSE()>
c0010bce:	eb 38                	jmp    c0010c08 <setupFPU()+0x86>
c0010bd0:	a8 20                	test   al,0x20
c0010bd2:	74 19                	je     c0010bed <setupFPU()+0x6b>
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	68 58 01 00 00       	push   0x158
c0010bdc:	e8 ef e4 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010be1:	89 c3                	mov    ebx,eax
c0010be3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be6:	e8 e7 d5 00 00       	call   c001e1d2 <MMX::MMX()>
c0010beb:	eb 1b                	jmp    c0010c08 <setupFPU()+0x86>
c0010bed:	a8 10                	test   al,0x10
c0010bef:	74 1c                	je     c0010c0d <setupFPU()+0x8b>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	68 58 01 00 00       	push   0x158
c0010bf9:	e8 d2 e4 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0010bfe:	89 c3                	mov    ebx,eax
c0010c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c03:	e8 ee d6 00 00       	call   c001e2f6 <x87::x87()>
c0010c08:	83 c4 10             	add    esp,0x10
c0010c0b:	eb 2c                	jmp    c0010c39 <setupFPU()+0xb7>
c0010c0d:	83 ec 0c             	sub    esp,0xc
c0010c10:	31 db                	xor    ebx,ebx
c0010c12:	68 08 1d 02 c0       	push   0xc0021d08
c0010c17:	e8 e9 e5 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0010c1c:	e8 a7 3c 00 00       	call   c00148c8 <thisCPU()>
c0010c21:	e8 a2 3c 00 00       	call   c00148c8 <thisCPU()>
c0010c26:	e8 1d ef 00 00       	call   c001fb48 <CPU::readCR0()>
c0010c2b:	83 c8 04             	or     eax,0x4
c0010c2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c31:	e8 24 ef 00 00       	call   c001fb5a <CPU::writeCR0(unsigned long)>
c0010c36:	83 c4 10             	add    esp,0x10
c0010c39:	83 c4 08             	add    esp,0x8
c0010c3c:	89 d8                	mov    eax,ebx
c0010c3e:	5b                   	pop    ebx
c0010c3f:	c3                   	ret    

c0010c40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c48:	c1 e0 04             	shl    eax,0x4
c0010c4b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c4f:	8d 50 10             	lea    edx,[eax+0x10]
c0010c52:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c58:	74 08                	je     c0010c62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c5a:	83 c0 04             	add    eax,0x4
c0010c5d:	39 d0                	cmp    eax,edx
c0010c5f:	75 f1                	jne    c0010c52 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c61:	c3                   	ret    
c0010c62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c6c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c76:	eb e2                	jmp    c0010c5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c78 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c78:	57                   	push   edi
c0010c79:	31 c0                	xor    eax,eax
c0010c7b:	56                   	push   esi
c0010c7c:	53                   	push   ebx
c0010c7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c89:	89 da                	mov    edx,ebx
c0010c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c8f:	c1 e2 04             	shl    edx,0x4
c0010c92:	01 ca                	add    edx,ecx
c0010c94:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010c9c:	74 16                	je     c0010cb4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010c9e:	40                   	inc    eax
c0010c9f:	83 f8 04             	cmp    eax,0x4
c0010ca2:	75 f0                	jne    c0010c94 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010ca4:	c7 44 24 10 4c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d4c
c0010cac:	5b                   	pop    ebx
c0010cad:	5e                   	pop    esi
c0010cae:	5f                   	pop    edi
c0010caf:	e9 80 4d 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c0010cb4:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cb7:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cba:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cc0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cc6:	5b                   	pop    ebx
c0010cc7:	5e                   	pop    esi
c0010cc8:	5f                   	pop    edi
c0010cc9:	c3                   	ret    

c0010cca <doubleFault(regs*, void*)>:
c0010cca:	55                   	push   ebp
c0010ccb:	89 e5                	mov    ebp,esp
c0010ccd:	83 ec 08             	sub    esp,0x8
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	68 87 1d 02 c0       	push   0xc0021d87
c0010cd8:	e8 57 4d 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0010cdd:	83 c4 10             	add    esp,0x10
c0010ce0:	90                   	nop
c0010ce1:	c9                   	leave  
c0010ce2:	c3                   	ret    
c0010ce3:	90                   	nop

c0010ce4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010ce4:	56                   	push   esi
c0010ce5:	53                   	push   ebx
c0010ce6:	50                   	push   eax
c0010ce7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ceb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010cf4:	75 35                	jne    c0010d2b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010cf6:	8d 43 20             	lea    eax,[ebx+0x20]
c0010cf9:	31 d2                	xor    edx,edx
c0010cfb:	89 c1                	mov    ecx,eax
c0010cfd:	c1 e1 04             	shl    ecx,0x4
c0010d00:	01 f1                	add    ecx,esi
c0010d02:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d0a:	74 3e                	je     c0010d4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d0c:	42                   	inc    edx
c0010d0d:	83 fa 04             	cmp    edx,0x4
c0010d10:	75 f0                	jne    c0010d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d12:	83 ec 0c             	sub    esp,0xc
c0010d15:	68 cc 1d 02 c0       	push   0xc0021dcc
c0010d1a:	e8 15 4d 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0010d1f:	83 c4 10             	add    esp,0x10
c0010d22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d27:	5a                   	pop    edx
c0010d28:	5b                   	pop    ebx
c0010d29:	5e                   	pop    esi
c0010d2a:	c3                   	ret    
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	56                   	push   esi
c0010d2f:	e8 c8 fb ff ff       	call   c00108fc <Device::getName()>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d3a:	75 ba                	jne    c0010cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d3c:	83 fb 0f             	cmp    ebx,0xf
c0010d3f:	7f 29                	jg     c0010d6a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d41:	0f b6 9b e0 3e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc120]
c0010d48:	eb ac                	jmp    c0010cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d4a:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d51:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d54:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d5e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d64:	89 d8                	mov    eax,ebx
c0010d66:	5a                   	pop    edx
c0010d67:	5b                   	pop    ebx
c0010d68:	5e                   	pop    esi
c0010d69:	c3                   	ret    
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	68 94 1d 02 c0       	push   0xc0021d94
c0010d72:	e8 bd 4c 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	e9 77 ff ff ff       	jmp    c0010cf6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d7f:	90                   	nop

c0010d80 <InterruptController::clearAllHandlers(int, bool)>:
c0010d80:	56                   	push   esi
c0010d81:	53                   	push   ebx
c0010d82:	52                   	push   edx
c0010d83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d8b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d90:	75 61                	jne    c0010df3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010d92:	8d 46 20             	lea    eax,[esi+0x20]
c0010d95:	c1 e6 04             	shl    esi,0x4
c0010d98:	c1 e0 04             	shl    eax,0x4
c0010d9b:	01 de                	add    esi,ebx
c0010d9d:	01 d8                	add    eax,ebx
c0010d9f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010da9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010db3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dbd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dc7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010dd1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010ddb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010de5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010def:	58                   	pop    eax
c0010df0:	5b                   	pop    ebx
c0010df1:	5e                   	pop    esi
c0010df2:	c3                   	ret    
c0010df3:	83 ec 0c             	sub    esp,0xc
c0010df6:	53                   	push   ebx
c0010df7:	e8 00 fb ff ff       	call   c00108fc <Device::getName()>
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e02:	75 8e                	jne    c0010d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e04:	83 fe 0f             	cmp    esi,0xf
c0010e07:	7f 09                	jg     c0010e12 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e09:	0f b6 b6 e0 3e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc120]
c0010e10:	eb 80                	jmp    c0010d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	68 08 1e 02 c0       	push   0xc0021e08
c0010e1a:	e8 15 4c 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	e9 6b ff ff ff       	jmp    c0010d92 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e27:	90                   	nop

c0010e28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e28:	56                   	push   esi
c0010e29:	53                   	push   ebx
c0010e2a:	52                   	push   edx
c0010e2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e33:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e38:	75 3a                	jne    c0010e74 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e3e:	8d 50 20             	lea    edx,[eax+0x20]
c0010e41:	c1 e2 04             	shl    edx,0x4
c0010e44:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e47:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e4b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e51:	74 0b                	je     c0010e5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e53:	83 c0 04             	add    eax,0x4
c0010e56:	39 d0                	cmp    eax,edx
c0010e58:	75 f1                	jne    c0010e4b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e5a:	58                   	pop    eax
c0010e5b:	5b                   	pop    ebx
c0010e5c:	5e                   	pop    esi
c0010e5d:	c3                   	ret    
c0010e5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e68:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e72:	eb df                	jmp    c0010e53 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	56                   	push   esi
c0010e78:	e8 7f fa ff ff       	call   c00108fc <Device::getName()>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e83:	75 b5                	jne    c0010e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e85:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e8a:	7f 11                	jg     c0010e9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e90:	0f b6 80 e0 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc120]
c0010e97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010e9b:	eb 9d                	jmp    c0010e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e9d:	83 ec 0c             	sub    esp,0xc
c0010ea0:	68 08 1e 02 c0       	push   0xc0021e08
c0010ea5:	e8 8a 4b 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	eb 8b                	jmp    c0010e3a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010eaf <nmiHandler(regs*, void*)>:
c0010eaf:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0010eb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010eb8:	e9 5b a8 ff ff       	jmp    c000b718 <Computer::handleNMI()>

c0010ebd <int_handler>:
c0010ebd:	55                   	push   ebp
c0010ebe:	57                   	push   edi
c0010ebf:	56                   	push   esi
c0010ec0:	53                   	push   ebx
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ec8:	80 3d d4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251d4,0x0
c0010ecf:	74 0b                	je     c0010edc <int_handler+0x1f>
c0010ed1:	fa                   	cli    
c0010ed2:	f4                   	hlt    
c0010ed3:	80 3d d4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251d4,0x0
c0010eda:	75 f5                	jne    c0010ed1 <int_handler+0x14>
c0010edc:	e8 e7 39 00 00       	call   c00148c8 <thisCPU()>
c0010ee1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010ee4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010eea:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010eed:	83 f8 17             	cmp    eax,0x17
c0010ef0:	77 13                	ja     c0010f05 <int_handler+0x48>
c0010ef2:	83 ec 08             	sub    esp,0x8
c0010ef5:	8b 17                	mov    edx,DWORD PTR [edi]
c0010ef7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010efa:	0f b6 c0             	movzx  eax,al
c0010efd:	50                   	push   eax
c0010efe:	57                   	push   edi
c0010eff:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f02:	83 c4 10             	add    esp,0x10
c0010f05:	83 c3 15             	add    ebx,0x15
c0010f08:	c1 e3 04             	shl    ebx,0x4
c0010f0b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f0f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f16:	31 db                	xor    ebx,ebx
c0010f18:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f1c:	85 c0                	test   eax,eax
c0010f1e:	74 13                	je     c0010f33 <int_handler+0x76>
c0010f20:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f23:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f27:	74 1c                	je     c0010f45 <int_handler+0x88>
c0010f29:	83 ec 08             	sub    esp,0x8
c0010f2c:	52                   	push   edx
c0010f2d:	56                   	push   esi
c0010f2e:	ff d0                	call   eax
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	43                   	inc    ebx
c0010f34:	83 fb 04             	cmp    ebx,0x4
c0010f37:	75 df                	jne    c0010f18 <int_handler+0x5b>
c0010f39:	83 c4 0c             	add    esp,0xc
c0010f3c:	31 c0                	xor    eax,eax
c0010f3e:	5b                   	pop    ebx
c0010f3f:	31 d2                	xor    edx,edx
c0010f41:	5e                   	pop    esi
c0010f42:	5f                   	pop    edi
c0010f43:	5d                   	pop    ebp
c0010f44:	c3                   	ret    
c0010f45:	83 ec 08             	sub    esp,0x8
c0010f48:	52                   	push   edx
c0010f49:	56                   	push   esi
c0010f4a:	ff d0                	call   eax
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	83 c4 0c             	add    esp,0xc
c0010f52:	5b                   	pop    ebx
c0010f53:	5e                   	pop    esi
c0010f54:	5f                   	pop    edi
c0010f55:	5d                   	pop    ebp
c0010f56:	c3                   	ret    
c0010f57:	90                   	nop

c0010f58 <InterruptController::InterruptController(char const*)>:
c0010f58:	83 ec 1c             	sub    esp,0x1c
c0010f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f5f:	83 ec 08             	sub    esp,0x8
c0010f62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f66:	50                   	push   eax
c0010f67:	e8 9e f8 ff ff       	call   c001080a <Device::Device(char const*)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	ba 44 20 02 c0       	mov    edx,0xc0022044
c0010f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f78:	89 10                	mov    DWORD PTR [eax],edx
c0010f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f90:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010f98:	7f 5e                	jg     c0010ff8 <InterruptController::InterruptController(char const*)+0xa0>
c0010f9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fa2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fa7:	7f 49                	jg     c0010ff2 <InterruptController::InterruptController(char const*)+0x9a>
c0010fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fb1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fbc:	01 ca                	add    edx,ecx
c0010fbe:	83 c2 54             	add    edx,0x54
c0010fc1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fd1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fdc:	01 ca                	add    edx,ecx
c0010fde:	81 c2 54 04 00 00    	add    edx,0x454
c0010fe4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ff0:	eb b0                	jmp    c0010fa2 <InterruptController::InterruptController(char const*)+0x4a>
c0010ff2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010ff6:	eb 98                	jmp    c0010f90 <InterruptController::InterruptController(char const*)+0x38>
c0010ff8:	90                   	nop
c0010ff9:	83 c4 1c             	add    esp,0x1c
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <InterruptController::~InterruptController()>:
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	ba 44 20 02 c0       	mov    edx,0xc0022044
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	89 10                	mov    DWORD PTR [eax],edx
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	83 ec 0c             	sub    esp,0xc
c0011013:	50                   	push   eax
c0011014:	e8 a7 f4 ff ff       	call   c00104c0 <Device::~Device()>
c0011019:	83 c4 10             	add    esp,0x10
c001101c:	90                   	nop
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <InterruptController::~InterruptController()>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102c:	e8 cd ff ff ff       	call   c0010ffe <InterruptController::~InterruptController()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	83 ec 08             	sub    esp,0x8
c0011037:	68 58 21 00 00       	push   0x2158
c001103c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011040:	e8 9a e0 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 c4 0c             	add    esp,0xc
c001104b:	c3                   	ret    

c001104c <displayDebugInfo(regs*)>:
c001104c:	55                   	push   ebp
c001104d:	57                   	push   edi
c001104e:	56                   	push   esi
c001104f:	53                   	push   ebx
c0011050:	83 ec 24             	sub    esp,0x24
c0011053:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011057:	0f 20 c2             	mov    edx,cr0
c001105a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001105e:	0f 20 d7             	mov    edi,cr2
c0011061:	0f 20 de             	mov    esi,cr3
c0011064:	0f 20 e5             	mov    ebp,cr4
c0011067:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001106a:	68 42 1e 02 c0       	push   0xc0021e42
c001106f:	e8 91 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011074:	58                   	pop    eax
c0011075:	5a                   	pop    edx
c0011076:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011079:	68 4d 1e 02 c0       	push   0xc0021e4d
c001107e:	e8 82 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011083:	59                   	pop    ecx
c0011084:	58                   	pop    eax
c0011085:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011088:	68 58 1e 02 c0       	push   0xc0021e58
c001108d:	e8 73 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011092:	58                   	pop    eax
c0011093:	5a                   	pop    edx
c0011094:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011097:	68 63 1e 02 c0       	push   0xc0021e63
c001109c:	e8 64 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110a1:	59                   	pop    ecx
c00110a2:	58                   	pop    eax
c00110a3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110a6:	68 6e 1e 02 c0       	push   0xc0021e6e
c00110ab:	e8 55 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110b0:	58                   	pop    eax
c00110b1:	5a                   	pop    edx
c00110b2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110b5:	68 79 1e 02 c0       	push   0xc0021e79
c00110ba:	e8 46 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110bf:	59                   	pop    ecx
c00110c0:	58                   	pop    eax
c00110c1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110c4:	68 84 1e 02 c0       	push   0xc0021e84
c00110c9:	e8 37 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110ce:	58                   	pop    eax
c00110cf:	5a                   	pop    edx
c00110d0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110d3:	68 8f 1e 02 c0       	push   0xc0021e8f
c00110d8:	e8 28 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110dd:	59                   	pop    ecx
c00110de:	58                   	pop    eax
c00110df:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110e2:	68 9a 1e 02 c0       	push   0xc0021e9a
c00110e7:	e8 19 e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110ec:	58                   	pop    eax
c00110ed:	5a                   	pop    edx
c00110ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110f1:	68 a9 1e 02 c0       	push   0xc0021ea9
c00110f6:	e8 0a e1 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00110fb:	59                   	pop    ecx
c00110fc:	58                   	pop    eax
c00110fd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011100:	68 b4 1e 02 c0       	push   0xc0021eb4
c0011105:	e8 fb e0 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001110a:	58                   	pop    eax
c001110b:	5a                   	pop    edx
c001110c:	57                   	push   edi
c001110d:	68 bf 1e 02 c0       	push   0xc0021ebf
c0011112:	e8 ee e0 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011117:	59                   	pop    ecx
c0011118:	58                   	pop    eax
c0011119:	56                   	push   esi
c001111a:	68 ca 1e 02 c0       	push   0xc0021eca
c001111f:	e8 e1 e0 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011124:	58                   	pop    eax
c0011125:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001112a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011130:	e8 00 c2 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c0011135:	58                   	pop    eax
c0011136:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011139:	5a                   	pop    edx
c001113a:	c1 e0 05             	shl    eax,0x5
c001113d:	05 40 3c 02 c0       	add    eax,0xc0023c40
c0011142:	50                   	push   eax
c0011143:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011148:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114e:	e8 03 c6 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011153:	59                   	pop    ecx
c0011154:	58                   	pop    eax
c0011155:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001115a:	68 d5 1e 02 c0       	push   0xc0021ed5
c001115f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011165:	e8 ec c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001116a:	58                   	pop    eax
c001116b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011170:	5a                   	pop    edx
c0011171:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011174:	83 c0 0c             	add    eax,0xc
c0011177:	50                   	push   eax
c0011178:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001117d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011183:	e8 ce c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011188:	59                   	pop    ecx
c0011189:	58                   	pop    eax
c001118a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001118f:	68 de 1e 02 c0       	push   0xc0021ede
c0011194:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119a:	e8 b7 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001119f:	58                   	pop    eax
c00111a0:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111a5:	5a                   	pop    edx
c00111a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111af:	e8 c8 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00111b4:	59                   	pop    ecx
c00111b5:	58                   	pop    eax
c00111b6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111bb:	68 e6 1e 02 c0       	push   0xc0021ee6
c00111c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c6:	e8 8b c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00111cb:	58                   	pop    eax
c00111cc:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111d1:	5a                   	pop    edx
c00111d2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111db:	e8 9c c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00111e0:	59                   	pop    ecx
c00111e1:	58                   	pop    eax
c00111e2:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111e7:	68 ee 1e 02 c0       	push   0xc0021eee
c00111ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f2:	e8 5f c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00111f7:	58                   	pop    eax
c00111f8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111fd:	5a                   	pop    edx
c00111fe:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011201:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011207:	e8 70 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001120c:	59                   	pop    ecx
c001120d:	58                   	pop    eax
c001120e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011213:	68 f6 1e 02 c0       	push   0xc0021ef6
c0011218:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121e:	e8 33 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011223:	58                   	pop    eax
c0011224:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011229:	5a                   	pop    edx
c001122a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001122d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011233:	e8 44 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011238:	59                   	pop    ecx
c0011239:	58                   	pop    eax
c001123a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001123f:	68 fe 1e 02 c0       	push   0xc0021efe
c0011244:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124a:	e8 07 c5 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001124f:	58                   	pop    eax
c0011250:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011255:	5a                   	pop    edx
c0011256:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011259:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001125f:	e8 18 c5 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011264:	59                   	pop    ecx
c0011265:	58                   	pop    eax
c0011266:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001126b:	68 06 1f 02 c0       	push   0xc0021f06
c0011270:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011276:	e8 db c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c001127b:	58                   	pop    eax
c001127c:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011281:	5a                   	pop    edx
c0011282:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011285:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001128b:	e8 ec c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011290:	59                   	pop    ecx
c0011291:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011296:	5b                   	pop    ebx
c0011297:	68 0e 1f 02 c0       	push   0xc0021f0e
c001129c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a2:	e8 af c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00112a7:	58                   	pop    eax
c00112a8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112ad:	5a                   	pop    edx
c00112ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112b2:	52                   	push   edx
c00112b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112b9:	e8 be c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00112be:	59                   	pop    ecx
c00112bf:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112c4:	5b                   	pop    ebx
c00112c5:	68 17 1f 02 c0       	push   0xc0021f17
c00112ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d0:	e8 81 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00112d5:	58                   	pop    eax
c00112d6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112db:	5a                   	pop    edx
c00112dc:	57                   	push   edi
c00112dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112e3:	e8 94 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00112e8:	59                   	pop    ecx
c00112e9:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112ee:	5b                   	pop    ebx
c00112ef:	68 1f 1f 02 c0       	push   0xc0021f1f
c00112f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112fa:	e8 57 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00112ff:	5f                   	pop    edi
c0011300:	58                   	pop    eax
c0011301:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011306:	56                   	push   esi
c0011307:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001130d:	e8 6a c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0011312:	58                   	pop    eax
c0011313:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011318:	5a                   	pop    edx
c0011319:	68 27 1f 02 c0       	push   0xc0021f27
c001131e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011324:	e8 2d c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011329:	59                   	pop    ecx
c001132a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001132f:	5b                   	pop    ebx
c0011330:	55                   	push   ebp
c0011331:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011337:	e8 40 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001133c:	5e                   	pop    esi
c001133d:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011342:	5f                   	pop    edi
c0011343:	68 2f 1f 02 c0       	push   0xc0021f2f
c0011348:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001134e:	e8 03 c4 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011353:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011358:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001135e:	e8 00 e8 00 00       	call   c001fb63 <CPU::readDR0()>
c0011363:	5d                   	pop    ebp
c0011364:	5a                   	pop    edx
c0011365:	50                   	push   eax
c0011366:	53                   	push   ebx
c0011367:	e8 10 c4 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001136c:	59                   	pop    ecx
c001136d:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011372:	5b                   	pop    ebx
c0011373:	68 38 1f 02 c0       	push   0xc0021f38
c0011378:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001137e:	e8 d3 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011383:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011388:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001138e:	e8 e2 e7 00 00       	call   c001fb75 <CPU::readDR1()>
c0011393:	5e                   	pop    esi
c0011394:	5f                   	pop    edi
c0011395:	50                   	push   eax
c0011396:	53                   	push   ebx
c0011397:	e8 e0 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001139c:	5d                   	pop    ebp
c001139d:	58                   	pop    eax
c001139e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113a3:	68 40 1f 02 c0       	push   0xc0021f40
c00113a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113ae:	e8 a3 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00113b3:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113b8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113be:	e8 c4 e7 00 00       	call   c001fb87 <CPU::readDR2()>
c00113c3:	5a                   	pop    edx
c00113c4:	59                   	pop    ecx
c00113c5:	50                   	push   eax
c00113c6:	53                   	push   ebx
c00113c7:	e8 b0 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00113cc:	5b                   	pop    ebx
c00113cd:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113d2:	5e                   	pop    esi
c00113d3:	68 48 1f 02 c0       	push   0xc0021f48
c00113d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113de:	e8 73 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c00113e3:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113e8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113ee:	e8 a6 e7 00 00       	call   c001fb99 <CPU::readDR3()>
c00113f3:	5f                   	pop    edi
c00113f4:	5d                   	pop    ebp
c00113f5:	50                   	push   eax
c00113f6:	53                   	push   ebx
c00113f7:	e8 80 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c00113fc:	58                   	pop    eax
c00113fd:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011402:	5a                   	pop    edx
c0011403:	68 50 1f 02 c0       	push   0xc0021f50
c0011408:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001140e:	e8 43 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011413:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011418:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001141e:	e8 88 e7 00 00       	call   c001fbab <CPU::readDR6()>
c0011423:	59                   	pop    ecx
c0011424:	5e                   	pop    esi
c0011425:	50                   	push   eax
c0011426:	53                   	push   ebx
c0011427:	e8 50 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001142c:	5f                   	pop    edi
c001142d:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011432:	5d                   	pop    ebp
c0011433:	68 58 1f 02 c0       	push   0xc0021f58
c0011438:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001143e:	e8 13 c3 ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0011443:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011448:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001144e:	e8 6a e7 00 00       	call   c001fbbd <CPU::readDR7()>
c0011453:	5a                   	pop    edx
c0011454:	59                   	pop    ecx
c0011455:	50                   	push   eax
c0011456:	53                   	push   ebx
c0011457:	e8 20 c3 ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c001145c:	fa                   	cli    
c001145d:	f4                   	hlt    
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	eb fe                	jmp    c0011461 <displayDebugInfo(regs*)+0x415>

c0011463 <x87EmulHandler(regs*, void*)>:
c0011463:	53                   	push   ebx
c0011464:	83 ec 08             	sub    esp,0x8
c0011467:	a1 14 49 02 c0       	mov    eax,ds:0xc0024914
c001146c:	85 c0                	test   eax,eax
c001146e:	74 15                	je     c0011485 <x87EmulHandler(regs*, void*)+0x22>
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011477:	ff d0                	call   eax
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	84 c0                	test   al,al
c001147e:	74 2f                	je     c00114af <x87EmulHandler(regs*, void*)+0x4c>
c0011480:	83 c4 08             	add    esp,0x8
c0011483:	5b                   	pop    ebx
c0011484:	c3                   	ret    
c0011485:	83 ec 08             	sub    esp,0x8
c0011488:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c001148e:	6a 01                	push   0x1
c0011490:	68 60 1f 02 c0       	push   0xc0021f60
c0011495:	e8 bd 6f 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c001149a:	5a                   	pop    edx
c001149b:	59                   	pop    ecx
c001149c:	53                   	push   ebx
c001149d:	50                   	push   eax
c001149e:	e8 7a 71 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c00114a3:	a1 14 49 02 c0       	mov    eax,ds:0xc0024914
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	85 c0                	test   eax,eax
c00114ad:	75 c1                	jne    c0011470 <x87EmulHandler(regs*, void*)+0xd>
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	68 7d 1f 02 c0       	push   0xc0021f7d
c00114b7:	e8 49 dd ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00114bc:	58                   	pop    eax
c00114bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c1:	e8 86 fb ff ff       	call   c001104c <displayDebugInfo(regs*)>

c00114c6 <gpFault(regs*, void*)>:
c00114c6:	53                   	push   ebx
c00114c7:	83 ec 14             	sub    esp,0x14
c00114ca:	c7 05 10 49 02 c0 cf 98 01 c0 	mov    DWORD PTR ds:0xc0024910,0xc00198cf
c00114d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114d8:	53                   	push   ebx
c00114d9:	e8 f1 83 00 00       	call   c00198cf <Vm::faultHandler(regs*)>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	84 c0                	test   al,al
c00114e3:	74 05                	je     c00114ea <gpFault(regs*, void*)+0x24>
c00114e5:	83 c4 08             	add    esp,0x8
c00114e8:	5b                   	pop    ebx
c00114e9:	c3                   	ret    
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	68 7d 1f 02 c0       	push   0xc0021f7d
c00114f2:	e8 0e dd ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00114f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114fa:	e8 4d fb ff ff       	call   c001104c <displayDebugInfo(regs*)>

c00114ff <pgFault(regs*, void*)>:
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	68 98 1f 02 c0       	push   0xc0021f98
c0011507:	e8 f9 dc ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001150c:	58                   	pop    eax
c001150d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011511:	e8 36 fb ff ff       	call   c001104c <displayDebugInfo(regs*)>

c0011516 <otherISRHandler(regs*, void*)>:
c0011516:	53                   	push   ebx
c0011517:	83 ec 0c             	sub    esp,0xc
c001151a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001151e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011521:	50                   	push   eax
c0011522:	50                   	push   eax
c0011523:	68 a5 1f 02 c0       	push   0xc0021fa5
c0011528:	e8 d8 dc ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001152d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011530:	e8 17 fb ff ff       	call   c001104c <displayDebugInfo(regs*)>

c0011535 <opcodeFault(regs*, void*)>:
c0011535:	55                   	push   ebp
c0011536:	89 e5                	mov    ebp,esp
c0011538:	56                   	push   esi
c0011539:	53                   	push   ebx
c001153a:	83 ec 40             	sub    esp,0x40
c001153d:	e8 86 33 00 00       	call   c00148c8 <thisCPU()>
c0011542:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011548:	84 c0                	test   al,al
c001154a:	74 24                	je     c0011570 <opcodeFault(regs*, void*)+0x3b>
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	68 c4 1f 02 c0       	push   0xc0021fc4
c0011554:	e8 ac dc ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011562:	8d 50 19             	lea    edx,[eax+0x19]
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001156b:	e9 77 05 00 00       	jmp    c0011ae7 <opcodeFault(regs*, void*)+0x5b2>
c0011570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011573:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011576:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011579:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001157d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011587:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001158a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001158d:	8a 00                	mov    al,BYTE PTR [eax]
c001158f:	3c f0                	cmp    al,0xf0
c0011591:	75 17                	jne    c00115aa <opcodeFault(regs*, void*)+0x75>
c0011593:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011599:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001159c:	8d 50 01             	lea    edx,[eax+0x1]
c001159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a5:	e9 da 00 00 00       	jmp    c0011684 <opcodeFault(regs*, void*)+0x14f>
c00115aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ad:	8a 00                	mov    al,BYTE PTR [eax]
c00115af:	3c f2                	cmp    al,0xf2
c00115b1:	74 09                	je     c00115bc <opcodeFault(regs*, void*)+0x87>
c00115b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b6:	8a 00                	mov    al,BYTE PTR [eax]
c00115b8:	3c f3                	cmp    al,0xf3
c00115ba:	75 1b                	jne    c00115d7 <opcodeFault(regs*, void*)+0xa2>
c00115bc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115c0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115c9:	8d 50 01             	lea    edx,[eax+0x1]
c00115cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115d2:	e9 ad 00 00 00       	jmp    c0011684 <opcodeFault(regs*, void*)+0x14f>
c00115d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115da:	8a 00                	mov    al,BYTE PTR [eax]
c00115dc:	3c 66                	cmp    al,0x66
c00115de:	75 1f                	jne    c00115ff <opcodeFault(regs*, void*)+0xca>
c00115e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115e4:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115e8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115f1:	8d 50 01             	lea    edx,[eax+0x1]
c00115f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115fa:	e9 85 00 00 00       	jmp    c0011684 <opcodeFault(regs*, void*)+0x14f>
c00115ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011602:	8a 00                	mov    al,BYTE PTR [eax]
c0011604:	3c 67                	cmp    al,0x67
c0011606:	75 18                	jne    c0011620 <opcodeFault(regs*, void*)+0xeb>
c0011608:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001160c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001160f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011612:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011615:	8d 50 01             	lea    edx,[eax+0x1]
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001161e:	eb 64                	jmp    c0011684 <opcodeFault(regs*, void*)+0x14f>
c0011620:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011623:	8a 00                	mov    al,BYTE PTR [eax]
c0011625:	3c 2e                	cmp    al,0x2e
c0011627:	74 09                	je     c0011632 <opcodeFault(regs*, void*)+0xfd>
c0011629:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001162c:	8a 00                	mov    al,BYTE PTR [eax]
c001162e:	3c 3e                	cmp    al,0x3e
c0011630:	75 18                	jne    c001164a <opcodeFault(regs*, void*)+0x115>
c0011632:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011636:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001163c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001163f:	8d 50 01             	lea    edx,[eax+0x1]
c0011642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011645:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011648:	eb 3a                	jmp    c0011684 <opcodeFault(regs*, void*)+0x14f>
c001164a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001164d:	8a 00                	mov    al,BYTE PTR [eax]
c001164f:	3c 36                	cmp    al,0x36
c0011651:	74 1b                	je     c001166e <opcodeFault(regs*, void*)+0x139>
c0011653:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011656:	8a 00                	mov    al,BYTE PTR [eax]
c0011658:	3c 26                	cmp    al,0x26
c001165a:	74 12                	je     c001166e <opcodeFault(regs*, void*)+0x139>
c001165c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001165f:	8a 00                	mov    al,BYTE PTR [eax]
c0011661:	3c 64                	cmp    al,0x64
c0011663:	74 09                	je     c001166e <opcodeFault(regs*, void*)+0x139>
c0011665:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011668:	8a 00                	mov    al,BYTE PTR [eax]
c001166a:	3c 65                	cmp    al,0x65
c001166c:	75 16                	jne    c0011684 <opcodeFault(regs*, void*)+0x14f>
c001166e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011672:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011678:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001167b:	8d 50 01             	lea    edx,[eax+0x1]
c001167e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011681:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011687:	8a 00                	mov    al,BYTE PTR [eax]
c0011689:	3c 0f                	cmp    al,0xf
c001168b:	0f 85 ad 00 00 00    	jne    c001173e <opcodeFault(regs*, void*)+0x209>
c0011691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011694:	40                   	inc    eax
c0011695:	8a 00                	mov    al,BYTE PTR [eax]
c0011697:	3c c2                	cmp    al,0xc2
c0011699:	74 0e                	je     c00116a9 <opcodeFault(regs*, void*)+0x174>
c001169b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001169e:	40                   	inc    eax
c001169f:	8a 00                	mov    al,BYTE PTR [eax]
c00116a1:	3c c3                	cmp    al,0xc3
c00116a3:	0f 85 95 00 00 00    	jne    c001173e <opcodeFault(regs*, void*)+0x209>
c00116a9:	83 ec 0c             	sub    esp,0xc
c00116ac:	68 e7 1f 02 c0       	push   0xc0021fe7
c00116b1:	e8 4f db ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116bf:	8d 50 01             	lea    edx,[eax+0x1]
c00116c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116c8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ce:	8a 00                	mov    al,BYTE PTR [eax]
c00116d0:	8d 50 fe             	lea    edx,[eax-0x2]
c00116d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116d6:	88 10                	mov    BYTE PTR [eax],dl
c00116d8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116db:	50                   	push   eax
c00116dc:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116df:	50                   	push   eax
c00116e0:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116e3:	50                   	push   eax
c00116e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116e7:	e8 48 41 00 00       	call   c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116f5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00116f8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00116fb:	01 d0                	add    eax,edx
c00116fd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011703:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011706:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011709:	48                   	dec    eax
c001170a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001170d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011710:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011713:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011719:	83 ec 04             	sub    esp,0x4
c001171c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001171f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011722:	50                   	push   eax
c0011723:	e8 28 ea fe ff       	call   c0000150 <voodooXADD>
c0011728:	83 c4 10             	add    esp,0x10
c001172b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001172e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011731:	01 c2                	add    edx,eax
c0011733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011736:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011739:	e9 a9 03 00 00       	jmp    c0011ae7 <opcodeFault(regs*, void*)+0x5b2>
c001173e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011741:	8a 00                	mov    al,BYTE PTR [eax]
c0011743:	3c 0f                	cmp    al,0xf
c0011745:	0f 85 8b 01 00 00    	jne    c00118d6 <opcodeFault(regs*, void*)+0x3a1>
c001174b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001174e:	40                   	inc    eax
c001174f:	8a 00                	mov    al,BYTE PTR [eax]
c0011751:	3c c7                	cmp    al,0xc7
c0011753:	0f 86 7d 01 00 00    	jbe    c00118d6 <opcodeFault(regs*, void*)+0x3a1>
c0011759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175c:	40                   	inc    eax
c001175d:	8a 00                	mov    al,BYTE PTR [eax]
c001175f:	3c cf                	cmp    al,0xcf
c0011761:	0f 87 6f 01 00 00    	ja     c00118d6 <opcodeFault(regs*, void*)+0x3a1>
c0011767:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001176a:	40                   	inc    eax
c001176b:	8a 00                	mov    al,BYTE PTR [eax]
c001176d:	83 c0 38             	add    eax,0x38
c0011770:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011773:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011777:	75 0b                	jne    c0011784 <opcodeFault(regs*, void*)+0x24f>
c0011779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001177f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011782:	eb 75                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c0011784:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011788:	75 0b                	jne    c0011795 <opcodeFault(regs*, void*)+0x260>
c001178a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001178d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011790:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011793:	eb 64                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c0011795:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011799:	75 0b                	jne    c00117a6 <opcodeFault(regs*, void*)+0x271>
c001179b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117a4:	eb 53                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117a6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117aa:	75 0b                	jne    c00117b7 <opcodeFault(regs*, void*)+0x282>
c00117ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117b5:	eb 42                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117b7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117bb:	75 0b                	jne    c00117c8 <opcodeFault(regs*, void*)+0x293>
c00117bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117c6:	eb 31                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117c8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117cc:	75 0b                	jne    c00117d9 <opcodeFault(regs*, void*)+0x2a4>
c00117ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d7:	eb 20                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117d9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117dd:	75 0b                	jne    c00117ea <opcodeFault(regs*, void*)+0x2b5>
c00117df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e8:	eb 0f                	jmp    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117ea:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117ee:	75 09                	jne    c00117f9 <opcodeFault(regs*, void*)+0x2c4>
c00117f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00117f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f9:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00117fd:	74 10                	je     c001180f <opcodeFault(regs*, void*)+0x2da>
c00117ff:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011806:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001180d:	eb 2d                	jmp    c001183c <opcodeFault(regs*, void*)+0x307>
c001180f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011812:	c1 e0 18             	shl    eax,0x18
c0011815:	89 c2                	mov    edx,eax
c0011817:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001181a:	c1 e0 08             	shl    eax,0x8
c001181d:	25 00 00 ff 00       	and    eax,0xff0000
c0011822:	09 c2                	or     edx,eax
c0011824:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011827:	c1 e8 08             	shr    eax,0x8
c001182a:	25 00 ff 00 00       	and    eax,0xff00
c001182f:	09 c2                	or     edx,eax
c0011831:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011834:	c1 e8 18             	shr    eax,0x18
c0011837:	09 d0                	or     eax,edx
c0011839:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001183c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011840:	75 0b                	jne    c001184d <opcodeFault(regs*, void*)+0x318>
c0011842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011845:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011848:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001184b:	eb 75                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c001184d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011851:	75 0b                	jne    c001185e <opcodeFault(regs*, void*)+0x329>
c0011853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011856:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011859:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001185c:	eb 64                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c001185e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011862:	75 0b                	jne    c001186f <opcodeFault(regs*, void*)+0x33a>
c0011864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011867:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001186a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001186d:	eb 53                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c001186f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011873:	75 0b                	jne    c0011880 <opcodeFault(regs*, void*)+0x34b>
c0011875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011878:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001187b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001187e:	eb 42                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c0011880:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0011884:	75 0b                	jne    c0011891 <opcodeFault(regs*, void*)+0x35c>
c0011886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011889:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001188c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001188f:	eb 31                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c0011891:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011895:	75 0b                	jne    c00118a2 <opcodeFault(regs*, void*)+0x36d>
c0011897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001189d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118a0:	eb 20                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c00118a2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118a6:	75 0b                	jne    c00118b3 <opcodeFault(regs*, void*)+0x37e>
c00118a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118ae:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118b1:	eb 0f                	jmp    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c00118b3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118b7:	75 09                	jne    c00118c2 <opcodeFault(regs*, void*)+0x38d>
c00118b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118bf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118c8:	8d 50 02             	lea    edx,[eax+0x2]
c00118cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118d1:	e9 11 02 00 00       	jmp    c0011ae7 <opcodeFault(regs*, void*)+0x5b2>
c00118d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118d9:	8a 00                	mov    al,BYTE PTR [eax]
c00118db:	3c 0f                	cmp    al,0xf
c00118dd:	0f 85 76 01 00 00    	jne    c0011a59 <opcodeFault(regs*, void*)+0x524>
c00118e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118e6:	40                   	inc    eax
c00118e7:	8a 00                	mov    al,BYTE PTR [eax]
c00118e9:	3c c7                	cmp    al,0xc7
c00118eb:	0f 85 68 01 00 00    	jne    c0011a59 <opcodeFault(regs*, void*)+0x524>
c00118f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00118f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118fa:	8d 50 01             	lea    edx,[eax+0x1]
c00118fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011900:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011903:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011906:	50                   	push   eax
c0011907:	8d 45 bb             	lea    eax,[ebp-0x45]
c001190a:	50                   	push   eax
c001190b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001190e:	50                   	push   eax
c001190f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011912:	e8 1d 3f 00 00       	call   c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001191d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011920:	83 f0 01             	xor    eax,0x1
c0011923:	84 c0                	test   al,al
c0011925:	0f 84 2e 01 00 00    	je     c0011a59 <opcodeFault(regs*, void*)+0x524>
c001192b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001192e:	3c 01                	cmp    al,0x1
c0011930:	0f 85 23 01 00 00    	jne    c0011a59 <opcodeFault(regs*, void*)+0x524>
c0011936:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011939:	83 f0 01             	xor    eax,0x1
c001193c:	84 c0                	test   al,al
c001193e:	0f 84 15 01 00 00    	je     c0011a59 <opcodeFault(regs*, void*)+0x524>
c0011944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011947:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001194a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001194d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011954:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011957:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001195a:	89 c2                	mov    edx,eax
c001195c:	b8 00 00 00 00       	mov    eax,0x0
c0011961:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011964:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001196d:	ba 00 00 00 00       	mov    edx,0x0
c0011972:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011975:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001197e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011981:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0011988:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001198b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001198e:	89 c2                	mov    edx,eax
c0011990:	b8 00 00 00 00       	mov    eax,0x0
c0011995:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011998:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001199b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119a1:	ba 00 00 00 00       	mov    edx,0x0
c00119a6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119a9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119ac:	e8 8c 70 00 00       	call   c0018a3d <lockScheduler()>
c00119b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b9:	89 c1                	mov    ecx,eax
c00119bb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119be:	89 cb                	mov    ebx,ecx
c00119c0:	89 d0                	mov    eax,edx
c00119c2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119c5:	89 c6                	mov    esi,eax
c00119c7:	89 f0                	mov    eax,esi
c00119c9:	09 d8                	or     eax,ebx
c00119cb:	85 c0                	test   eax,eax
c00119cd:	75 21                	jne    c00119f0 <opcodeFault(regs*, void*)+0x4bb>
c00119cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119d2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119d5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119d8:	89 01                	mov    DWORD PTR [ecx],eax
c00119da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e3:	83 c8 40             	or     eax,0x40
c00119e6:	89 c2                	mov    edx,eax
c00119e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119eb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119ee:	eb 3e                	jmp    c0011a2e <opcodeFault(regs*, void*)+0x4f9>
c00119f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119f3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119f8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00119fb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00119fe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a04:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a07:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a0a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a0d:	89 d0                	mov    eax,edx
c0011a0f:	31 d2                	xor    edx,edx
c0011a11:	89 c3                	mov    ebx,eax
c0011a13:	89 d6                	mov    esi,edx
c0011a15:	89 da                	mov    edx,ebx
c0011a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a23:	83 e0 bf             	and    eax,0xffffffbf
c0011a26:	89 c2                	mov    edx,eax
c0011a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a2e:	e8 0c 70 00 00       	call   c0018a3f <unlockScheduler()>
c0011a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a39:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a3c:	01 c2                	add    edx,eax
c0011a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a44:	83 ec 0c             	sub    esp,0xc
c0011a47:	68 f6 1f 02 c0       	push   0xc0021ff6
c0011a4c:	e8 b4 d7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	e9 8e 00 00 00       	jmp    c0011ae7 <opcodeFault(regs*, void*)+0x5b2>
c0011a59:	83 ec 0c             	sub    esp,0xc
c0011a5c:	68 09 20 02 c0       	push   0xc0022009
c0011a61:	e8 9f d7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a6c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a75:	c1 e0 04             	shl    eax,0x4
c0011a78:	01 d0                	add    eax,edx
c0011a7a:	83 c0 03             	add    eax,0x3
c0011a7d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a7f:	0f b6 d8             	movzx  ebx,al
c0011a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a85:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a8e:	c1 e0 04             	shl    eax,0x4
c0011a91:	01 d0                	add    eax,edx
c0011a93:	83 c0 02             	add    eax,0x2
c0011a96:	8a 00                	mov    al,BYTE PTR [eax]
c0011a98:	0f b6 c8             	movzx  ecx,al
c0011a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a9e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa7:	c1 e0 04             	shl    eax,0x4
c0011aaa:	01 d0                	add    eax,edx
c0011aac:	40                   	inc    eax
c0011aad:	8a 00                	mov    al,BYTE PTR [eax]
c0011aaf:	0f b6 d0             	movzx  edx,al
c0011ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011abe:	c1 e0 04             	shl    eax,0x4
c0011ac1:	01 f0                	add    eax,esi
c0011ac3:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac5:	0f b6 c0             	movzx  eax,al
c0011ac8:	83 ec 0c             	sub    esp,0xc
c0011acb:	53                   	push   ebx
c0011acc:	51                   	push   ecx
c0011acd:	52                   	push   edx
c0011ace:	50                   	push   eax
c0011acf:	68 1c 20 02 c0       	push   0xc002201c
c0011ad4:	e8 2c d7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011ad9:	83 c4 20             	add    esp,0x20
c0011adc:	83 ec 0c             	sub    esp,0xc
c0011adf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011ae2:	e8 65 f5 ff ff       	call   c001104c <displayDebugInfo(regs*)>
c0011ae7:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011aea:	5b                   	pop    ebx
c0011aeb:	5e                   	pop    esi
c0011aec:	5d                   	pop    ebp
c0011aed:	c3                   	ret    

c0011aee <displayProgramFault(char const*)>:
c0011aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011af6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011afc:	85 c0                	test   eax,eax
c0011afe:	74 15                	je     c0011b15 <displayProgramFault(char const*)+0x27>
c0011b00:	83 ec 0c             	sub    esp,0xc
c0011b03:	6a 04                	push   0x4
c0011b05:	6a 0f                	push   0xf
c0011b07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b0b:	50                   	push   eax
c0011b0c:	e8 05 b9 ff ff       	call   c000d416 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b11:	83 c4 1c             	add    esp,0x1c
c0011b14:	c3                   	ret    
c0011b15:	c3                   	ret    

c0011b16 <setupInterruptController()>:
c0011b16:	55                   	push   ebp
c0011b17:	89 e5                	mov    ebp,esp
c0011b19:	53                   	push   ebx
c0011b1a:	83 ec 14             	sub    esp,0x14
c0011b1d:	e8 a3 2d 00 00       	call   c00148c5 <getCPUNumber()>
c0011b22:	85 c0                	test   eax,eax
c0011b24:	0f 95 c0             	setne  al
c0011b27:	84 c0                	test   al,al
c0011b29:	74 56                	je     c0011b81 <setupInterruptController()+0x6b>
c0011b2b:	83 ec 0c             	sub    esp,0xc
c0011b2e:	68 58 21 00 00       	push   0x2158
c0011b33:	e8 98 d5 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0011b38:	83 c4 10             	add    esp,0x10
c0011b3b:	89 c3                	mov    ebx,eax
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	53                   	push   ebx
c0011b41:	e8 6a c9 00 00       	call   c001e4b0 <APIC::APIC()>
c0011b46:	83 c4 10             	add    esp,0x10
c0011b49:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b4c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b54:	83 c0 08             	add    eax,0x8
c0011b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b59:	6a 00                	push   0x0
c0011b5b:	6a 00                	push   0x0
c0011b5d:	6a 00                	push   0x0
c0011b5f:	52                   	push   edx
c0011b60:	ff d0                	call   eax
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011b6a:	83 ec 08             	sub    esp,0x8
c0011b6d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b70:	50                   	push   eax
c0011b71:	e8 a4 ea ff ff       	call   c001061a <Device::addChild(Device*)>
c0011b76:	83 c4 10             	add    esp,0x10
c0011b79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b7c:	e9 48 03 00 00       	jmp    c0011ec9 <setupInterruptController()+0x3b3>
c0011b81:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011b86:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b8c:	83 e0 01             	and    eax,0x1
c0011b8f:	84 c0                	test   al,al
c0011b91:	0f 95 c0             	setne  al
c0011b94:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	68 58 21 00 00       	push   0x2158
c0011b9f:	e8 2c d5 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	89 c3                	mov    ebx,eax
c0011ba9:	83 ec 0c             	sub    esp,0xc
c0011bac:	53                   	push   ebx
c0011bad:	e8 f8 cd 00 00       	call   c001e9aa <PIC::PIC()>
c0011bb2:	83 c4 10             	add    esp,0x10
c0011bb5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bb8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc0:	83 c0 08             	add    eax,0x8
c0011bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc5:	6a 00                	push   0x0
c0011bc7:	6a 00                	push   0x0
c0011bc9:	6a 00                	push   0x0
c0011bcb:	52                   	push   edx
c0011bcc:	ff d0                	call   eax
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bd5:	74 6e                	je     c0011c45 <setupInterruptController()+0x12f>
c0011bd7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bdf:	83 c0 0c             	add    eax,0xc
c0011be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be4:	6a 00                	push   0x0
c0011be6:	6a 00                	push   0x0
c0011be8:	6a 00                	push   0x0
c0011bea:	52                   	push   edx
c0011beb:	ff d0                	call   eax
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011bf4:	74 15                	je     c0011c0b <setupInterruptController()+0xf5>
c0011bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfb:	83 c0 04             	add    eax,0x4
c0011bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c00:	83 ec 0c             	sub    esp,0xc
c0011c03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c06:	ff d0                	call   eax
c0011c08:	83 c4 10             	add    esp,0x10
c0011c0b:	83 ec 0c             	sub    esp,0xc
c0011c0e:	68 58 21 00 00       	push   0x2158
c0011c13:	e8 b8 d4 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	89 c3                	mov    ebx,eax
c0011c1d:	83 ec 0c             	sub    esp,0xc
c0011c20:	53                   	push   ebx
c0011c21:	e8 8a c8 00 00       	call   c001e4b0 <APIC::APIC()>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c34:	83 c0 08             	add    eax,0x8
c0011c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c39:	6a 00                	push   0x0
c0011c3b:	6a 00                	push   0x0
c0011c3d:	6a 00                	push   0x0
c0011c3f:	52                   	push   edx
c0011c40:	ff d0                	call   eax
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011c4a:	83 ec 08             	sub    esp,0x8
c0011c4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c50:	50                   	push   eax
c0011c51:	e8 c4 e9 ff ff       	call   c001061a <Device::addChild(Device*)>
c0011c56:	83 c4 10             	add    esp,0x10
c0011c59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c5e:	83 c0 24             	add    eax,0x24
c0011c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c63:	6a 00                	push   0x0
c0011c65:	68 16 15 01 c0       	push   0xc0011516
c0011c6a:	6a 00                	push   0x0
c0011c6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c6f:	ff d0                	call   eax
c0011c71:	83 c4 10             	add    esp,0x10
c0011c74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c79:	83 c0 24             	add    eax,0x24
c0011c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7e:	6a 00                	push   0x0
c0011c80:	68 16 15 01 c0       	push   0xc0011516
c0011c85:	6a 01                	push   0x1
c0011c87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c8a:	ff d0                	call   eax
c0011c8c:	83 c4 10             	add    esp,0x10
c0011c8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c94:	83 c0 24             	add    eax,0x24
c0011c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c99:	6a 00                	push   0x0
c0011c9b:	68 af 0e 01 c0       	push   0xc0010eaf
c0011ca0:	6a 02                	push   0x2
c0011ca2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca5:	ff d0                	call   eax
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0011caf:	83 c0 24             	add    eax,0x24
c0011cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb4:	6a 00                	push   0x0
c0011cb6:	68 16 15 01 c0       	push   0xc0011516
c0011cbb:	6a 03                	push   0x3
c0011cbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cc0:	ff d0                	call   eax
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cca:	83 c0 24             	add    eax,0x24
c0011ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccf:	6a 00                	push   0x0
c0011cd1:	68 16 15 01 c0       	push   0xc0011516
c0011cd6:	6a 04                	push   0x4
c0011cd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cdb:	ff d0                	call   eax
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce5:	83 c0 24             	add    eax,0x24
c0011ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cea:	6a 00                	push   0x0
c0011cec:	68 16 15 01 c0       	push   0xc0011516
c0011cf1:	6a 05                	push   0x5
c0011cf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf6:	ff d0                	call   eax
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d00:	83 c0 24             	add    eax,0x24
c0011d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d05:	6a 00                	push   0x0
c0011d07:	68 35 15 01 c0       	push   0xc0011535
c0011d0c:	6a 06                	push   0x6
c0011d0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d11:	ff d0                	call   eax
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1b:	83 c0 24             	add    eax,0x24
c0011d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d20:	6a 00                	push   0x0
c0011d22:	68 63 14 01 c0       	push   0xc0011463
c0011d27:	6a 07                	push   0x7
c0011d29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d2c:	ff d0                	call   eax
c0011d2e:	83 c4 10             	add    esp,0x10
c0011d31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d36:	83 c0 24             	add    eax,0x24
c0011d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3b:	6a 00                	push   0x0
c0011d3d:	68 ca 0c 01 c0       	push   0xc0010cca
c0011d42:	6a 08                	push   0x8
c0011d44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d47:	ff d0                	call   eax
c0011d49:	83 c4 10             	add    esp,0x10
c0011d4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d51:	83 c0 24             	add    eax,0x24
c0011d54:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d56:	6a 00                	push   0x0
c0011d58:	68 16 15 01 c0       	push   0xc0011516
c0011d5d:	6a 09                	push   0x9
c0011d5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d62:	ff d0                	call   eax
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6c:	83 c0 24             	add    eax,0x24
c0011d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d71:	6a 00                	push   0x0
c0011d73:	68 16 15 01 c0       	push   0xc0011516
c0011d78:	6a 0a                	push   0xa
c0011d7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d7d:	ff d0                	call   eax
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d87:	83 c0 24             	add    eax,0x24
c0011d8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8c:	6a 00                	push   0x0
c0011d8e:	68 16 15 01 c0       	push   0xc0011516
c0011d93:	6a 0b                	push   0xb
c0011d95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d98:	ff d0                	call   eax
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da2:	83 c0 24             	add    eax,0x24
c0011da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da7:	6a 00                	push   0x0
c0011da9:	68 16 15 01 c0       	push   0xc0011516
c0011dae:	6a 0c                	push   0xc
c0011db0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db3:	ff d0                	call   eax
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbd:	83 c0 24             	add    eax,0x24
c0011dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc2:	6a 00                	push   0x0
c0011dc4:	68 c6 14 01 c0       	push   0xc00114c6
c0011dc9:	6a 0d                	push   0xd
c0011dcb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dce:	ff d0                	call   eax
c0011dd0:	83 c4 10             	add    esp,0x10
c0011dd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd8:	83 c0 24             	add    eax,0x24
c0011ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddd:	6a 00                	push   0x0
c0011ddf:	68 ff 14 01 c0       	push   0xc00114ff
c0011de4:	6a 0e                	push   0xe
c0011de6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011de9:	ff d0                	call   eax
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df3:	83 c0 24             	add    eax,0x24
c0011df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df8:	6a 00                	push   0x0
c0011dfa:	68 16 15 01 c0       	push   0xc0011516
c0011dff:	6a 0f                	push   0xf
c0011e01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e04:	ff d0                	call   eax
c0011e06:	83 c4 10             	add    esp,0x10
c0011e09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e0e:	83 c0 24             	add    eax,0x24
c0011e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e13:	6a 00                	push   0x0
c0011e15:	68 16 15 01 c0       	push   0xc0011516
c0011e1a:	6a 10                	push   0x10
c0011e1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e1f:	ff d0                	call   eax
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e29:	83 c0 24             	add    eax,0x24
c0011e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2e:	6a 00                	push   0x0
c0011e30:	68 16 15 01 c0       	push   0xc0011516
c0011e35:	6a 11                	push   0x11
c0011e37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e3a:	ff d0                	call   eax
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e44:	83 c0 24             	add    eax,0x24
c0011e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e49:	6a 00                	push   0x0
c0011e4b:	68 16 15 01 c0       	push   0xc0011516
c0011e50:	6a 12                	push   0x12
c0011e52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e55:	ff d0                	call   eax
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5f:	83 c0 24             	add    eax,0x24
c0011e62:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e64:	6a 00                	push   0x0
c0011e66:	68 16 15 01 c0       	push   0xc0011516
c0011e6b:	6a 13                	push   0x13
c0011e6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e70:	ff d0                	call   eax
c0011e72:	83 c4 10             	add    esp,0x10
c0011e75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7a:	83 c0 24             	add    eax,0x24
c0011e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7f:	6a 00                	push   0x0
c0011e81:	68 16 15 01 c0       	push   0xc0011516
c0011e86:	6a 14                	push   0x14
c0011e88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e8b:	ff d0                	call   eax
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e95:	83 c0 24             	add    eax,0x24
c0011e98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9a:	6a 00                	push   0x0
c0011e9c:	68 16 15 01 c0       	push   0xc0011516
c0011ea1:	6a 1e                	push   0x1e
c0011ea3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ea6:	ff d0                	call   eax
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb0:	83 c0 24             	add    eax,0x24
c0011eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb5:	6a 00                	push   0x0
c0011eb7:	68 44 74 01 c0       	push   0xc0017444
c0011ebc:	6a 60                	push   0x60
c0011ebe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ec1:	ff d0                	call   eax
c0011ec3:	83 c4 10             	add    esp,0x10
c0011ec6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ec9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ecc:	c9                   	leave  
c0011ecd:	c3                   	ret    

c0011ece <InterruptController::convertLegacyIRQNumber(int)>:
c0011ece:	55                   	push   ebp
c0011ecf:	89 e5                	mov    ebp,esp
c0011ed1:	83 ec 08             	sub    esp,0x8
c0011ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ed7:	83 ec 0c             	sub    esp,0xc
c0011eda:	50                   	push   eax
c0011edb:	e8 1c ea ff ff       	call   c00108fc <Device::getName()>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8a 00                	mov    al,BYTE PTR [eax]
c0011ee5:	3c 41                	cmp    al,0x41
c0011ee7:	0f 94 c0             	sete   al
c0011eea:	84 c0                	test   al,al
c0011eec:	74 28                	je     c0011f16 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011eee:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011ef2:	7f 12                	jg     c0011f06 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011ef4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011ef7:	05 e0 3e 02 c0       	add    eax,0xc0023ee0
c0011efc:	8a 00                	mov    al,BYTE PTR [eax]
c0011efe:	0f b6 c0             	movzx  eax,al
c0011f01:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f04:	eb 10                	jmp    c0011f16 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f06:	83 ec 0c             	sub    esp,0xc
c0011f09:	68 94 1d 02 c0       	push   0xc0021d94
c0011f0e:	e8 21 3b 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f19:	c9                   	leave  
c0011f1a:	c3                   	ret    
c0011f1b:	90                   	nop

c0011f1c <startGUI(void*)>:
c0011f1c:	55                   	push   ebp
c0011f1d:	89 e5                	mov    ebp,esp
c0011f1f:	53                   	push   ebx
c0011f20:	83 ec 04             	sub    esp,0x4
c0011f23:	e8 17 6b 00 00       	call   c0018a3f <unlockScheduler()>
c0011f28:	e8 fb 6a 00 00       	call   c0018a28 <getIRQNestingLevel()>
c0011f2d:	83 ec 08             	sub    esp,0x8
c0011f30:	50                   	push   eax
c0011f31:	68 84 20 02 c0       	push   0xc0022084
c0011f36:	e8 ca d2 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0011f44:	83 ec 08             	sub    esp,0x8
c0011f47:	6a 01                	push   0x1
c0011f49:	68 9e 20 02 c0       	push   0xc002209e
c0011f4e:	e8 04 65 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	83 ec 08             	sub    esp,0x8
c0011f59:	53                   	push   ebx
c0011f5a:	50                   	push   eax
c0011f5b:	e8 bd 66 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c0011f60:	83 c4 10             	add    esp,0x10
c0011f63:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0011f69:	83 ec 08             	sub    esp,0x8
c0011f6c:	6a 01                	push   0x1
c0011f6e:	68 b8 20 02 c0       	push   0xc00220b8
c0011f73:	e8 df 64 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c0011f78:	83 c4 10             	add    esp,0x10
c0011f7b:	83 ec 08             	sub    esp,0x8
c0011f7e:	53                   	push   ebx
c0011f7f:	50                   	push   eax
c0011f80:	e8 98 66 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	90                   	nop
c0011f89:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f8c:	c9                   	leave  
c0011f8d:	c3                   	ret    

c0011f8e <sendKeyToTerminal(unsigned char)>:
c0011f8e:	55                   	push   ebp
c0011f8f:	89 e5                	mov    ebp,esp
c0011f91:	83 ec 28             	sub    esp,0x28
c0011f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f97:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011f9a:	8b 15 44 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024844
c0011fa0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fa3:	25 ff 00 00 00       	and    eax,0xff
c0011fa8:	83 ec 08             	sub    esp,0x8
c0011fab:	50                   	push   eax
c0011fac:	52                   	push   edx
c0011fad:	e8 a2 b9 ff ff       	call   c000d954 <VgaText::receiveKey(unsigned char)>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fb9:	75 41                	jne    c0011ffc <sendKeyToTerminal(unsigned char)+0x6e>
c0011fbb:	e8 a4 6a 00 00       	call   c0018a64 <lockStuff()>
c0011fc0:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c0011fc5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fc8:	c7 05 20 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024920,0x0
c0011fd2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fd6:	74 1f                	je     c0011ff7 <sendKeyToTerminal(unsigned char)+0x69>
c0011fd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fe1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fe4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fe7:	83 ec 0c             	sub    esp,0xc
c0011fea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011fed:	e8 6f 70 00 00       	call   c0019061 <unblockTask(ThreadControlBlock*)>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	eb db                	jmp    c0011fd2 <sendKeyToTerminal(unsigned char)+0x44>
c0011ff7:	e8 0f 6e 00 00       	call   c0018e0b <unlockStuff()>
c0011ffc:	90                   	nop
c0011ffd:	c9                   	leave  
c0011ffe:	c3                   	ret    

c0011fff <sendKeyboardToken(KeyboardToken)>:
c0011fff:	55                   	push   ebp
c0012000:	89 e5                	mov    ebp,esp
c0012002:	83 ec 18             	sub    esp,0x18
c0012005:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001200b:	25 ff ff 00 00       	and    eax,0xffff
c0012010:	83 f2 01             	xor    edx,0x1
c0012013:	88 90 40 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6c0],dl
c0012019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001201c:	66 3d 03 02          	cmp    ax,0x203
c0012020:	75 07                	jne    c0012029 <sendKeyboardToken(KeyboardToken)+0x2a>
c0012022:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c0012027:	84 c0                	test   al,al
c0012029:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001202d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0012030:	a0 48 4d 02 c0       	mov    al,ds:0xc0024d48
c0012035:	38 c2                	cmp    dl,al
c0012037:	74 1e                	je     c0012057 <sendKeyboardToken(KeyboardToken)+0x58>
c0012039:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001203c:	a2 48 4d 02 c0       	mov    ds:0xc0024d48,al
c0012041:	a0 48 4d 02 c0       	mov    al,ds:0xc0024d48
c0012046:	25 ff 00 00 00       	and    eax,0xff
c001204b:	83 ec 0c             	sub    esp,0xc
c001204e:	50                   	push   eax
c001204f:	e8 6c ab ff ff       	call   c000cbc0 <setTerminalScrollLock(bool)>
c0012054:	83 c4 10             	add    esp,0x10
c0012057:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001205a:	84 c0                	test   al,al
c001205c:	0f 84 ae 00 00 00    	je     c0012110 <sendKeyboardToken(KeyboardToken)+0x111>
c0012062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012065:	66 3d 10 03          	cmp    ax,0x310
c0012069:	75 06                	jne    c0012071 <sendKeyboardToken(KeyboardToken)+0x72>
c001206b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0012071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012074:	66 3d 11 03          	cmp    ax,0x311
c0012078:	75 06                	jne    c0012080 <sendKeyboardToken(KeyboardToken)+0x81>
c001207a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0012080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012083:	66 3d 12 03          	cmp    ax,0x312
c0012087:	75 06                	jne    c001208f <sendKeyboardToken(KeyboardToken)+0x90>
c0012089:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001208f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012092:	66 3d 13 03          	cmp    ax,0x313
c0012096:	75 06                	jne    c001209e <sendKeyboardToken(KeyboardToken)+0x9f>
c0012098:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a1:	66 3d 14 03          	cmp    ax,0x314
c00120a5:	75 06                	jne    c00120ad <sendKeyboardToken(KeyboardToken)+0xae>
c00120a7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b0:	66 3d 15 03          	cmp    ax,0x315
c00120b4:	75 06                	jne    c00120bc <sendKeyboardToken(KeyboardToken)+0xbd>
c00120b6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120bf:	66 3d 16 03          	cmp    ax,0x316
c00120c3:	75 06                	jne    c00120cb <sendKeyboardToken(KeyboardToken)+0xcc>
c00120c5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ce:	66 3d 17 03          	cmp    ax,0x317
c00120d2:	75 06                	jne    c00120da <sendKeyboardToken(KeyboardToken)+0xdb>
c00120d4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120dd:	66 3d 18 03          	cmp    ax,0x318
c00120e1:	75 06                	jne    c00120e9 <sendKeyboardToken(KeyboardToken)+0xea>
c00120e3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ec:	66 3d 19 03          	cmp    ax,0x319
c00120f0:	75 06                	jne    c00120f8 <sendKeyboardToken(KeyboardToken)+0xf9>
c00120f2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00120f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120fb:	66 3d 1a 03          	cmp    ax,0x31a
c00120ff:	0f 85 c9 00 00 00    	jne    c00121ce <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012105:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001210b:	e9 be 00 00 00       	jmp    c00121ce <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012113:	66 3d 10 03          	cmp    ax,0x310
c0012117:	75 0a                	jne    c0012123 <sendKeyboardToken(KeyboardToken)+0x124>
c0012119:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001211f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012126:	66 3d 11 03          	cmp    ax,0x311
c001212a:	75 0a                	jne    c0012136 <sendKeyboardToken(KeyboardToken)+0x137>
c001212c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012132:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012139:	66 3d 12 03          	cmp    ax,0x312
c001213d:	75 0a                	jne    c0012149 <sendKeyboardToken(KeyboardToken)+0x14a>
c001213f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012145:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001214c:	66 3d 13 03          	cmp    ax,0x313
c0012150:	75 0a                	jne    c001215c <sendKeyboardToken(KeyboardToken)+0x15d>
c0012152:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012158:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001215c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001215f:	66 3d 14 03          	cmp    ax,0x314
c0012163:	75 0a                	jne    c001216f <sendKeyboardToken(KeyboardToken)+0x170>
c0012165:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001216b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001216f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012172:	66 3d 15 03          	cmp    ax,0x315
c0012176:	75 0a                	jne    c0012182 <sendKeyboardToken(KeyboardToken)+0x183>
c0012178:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001217e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012185:	66 3d 16 03          	cmp    ax,0x316
c0012189:	75 0a                	jne    c0012195 <sendKeyboardToken(KeyboardToken)+0x196>
c001218b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0012191:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012198:	66 3d 17 03          	cmp    ax,0x317
c001219c:	75 0a                	jne    c00121a8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001219e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ab:	66 3d 18 03          	cmp    ax,0x318
c00121af:	75 0a                	jne    c00121bb <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121b1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121be:	66 3d 19 03          	cmp    ax,0x319
c00121c2:	75 0a                	jne    c00121ce <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121c4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121d1:	66 3d 00 02          	cmp    ax,0x200
c00121d5:	75 2a                	jne    c0012201 <sendKeyboardToken(KeyboardToken)+0x202>
c00121d7:	a0 40 4d 02 c0       	mov    al,ds:0xc0024d40
c00121dc:	83 f0 01             	xor    eax,0x1
c00121df:	84 c0                	test   al,al
c00121e1:	74 1e                	je     c0012201 <sendKeyboardToken(KeyboardToken)+0x202>
c00121e3:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00121e8:	6a 01                	push   0x1
c00121ea:	6a 00                	push   0x0
c00121ec:	68 1c 1f 01 c0       	push   0xc0011f1c
c00121f1:	50                   	push   eax
c00121f2:	e8 7b 69 00 00       	call   c0018b72 <Process::createThread(void (*)(void*), void*, int)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	c6 05 40 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d40,0x1
c0012201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012204:	66 3d 1d 03          	cmp    ax,0x31d
c0012208:	75 06                	jne    c0012210 <sendKeyboardToken(KeyboardToken)+0x211>
c001220a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012213:	66 3d 1c 03          	cmp    ax,0x31c
c0012217:	75 06                	jne    c001221f <sendKeyboardToken(KeyboardToken)+0x220>
c0012219:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001221f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012222:	66 3d 1b 03          	cmp    ax,0x31b
c0012226:	75 06                	jne    c001222e <sendKeyboardToken(KeyboardToken)+0x22f>
c0012228:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001222e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012231:	66 3d 1e 03          	cmp    ax,0x31e
c0012235:	75 06                	jne    c001223d <sendKeyboardToken(KeyboardToken)+0x23e>
c0012237:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001223d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012240:	66 3d 1f 03          	cmp    ax,0x31f
c0012244:	75 06                	jne    c001224c <sendKeyboardToken(KeyboardToken)+0x24d>
c0012246:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001224c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224f:	66 3d 1a 03          	cmp    ax,0x31a
c0012253:	75 06                	jne    c001225b <sendKeyboardToken(KeyboardToken)+0x25c>
c0012255:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001225b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001225f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012262:	83 f0 01             	xor    eax,0x1
c0012265:	84 c0                	test   al,al
c0012267:	74 7b                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012269:	a0 41 4a 02 c0       	mov    al,ds:0xc0024a41
c001226e:	84 c0                	test   al,al
c0012270:	74 43                	je     c00122b5 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012272:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012276:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001227a:	74 2d                	je     c00122a9 <sendKeyboardToken(KeyboardToken)+0x2aa>
c001227c:	8b 15 44 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d44
c0012282:	89 d0                	mov    eax,edx
c0012284:	c1 e0 02             	shl    eax,0x2
c0012287:	01 d0                	add    eax,edx
c0012289:	01 c0                	add    eax,eax
c001228b:	a3 44 4d 02 c0       	mov    ds:0xc0024d44,eax
c0012290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012293:	25 ff ff 00 00       	and    eax,0xffff
c0012298:	8d 50 d0             	lea    edx,[eax-0x30]
c001229b:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122a0:	01 d0                	add    eax,edx
c00122a2:	a3 44 4d 02 c0       	mov    ds:0xc0024d44,eax
c00122a7:	eb 71                	jmp    c001231a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122a9:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c00122b3:	eb 65                	jmp    c001231a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122b5:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122ba:	85 c0                	test   eax,eax
c00122bc:	74 1a                	je     c00122d8 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122be:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122c3:	25 ff 00 00 00       	and    eax,0xff
c00122c8:	83 ec 0c             	sub    esp,0xc
c00122cb:	50                   	push   eax
c00122cc:	e8 bd fc ff ff       	call   c0011f8e <sendKeyToTerminal(unsigned char)>
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122d8:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c00122e2:	eb 36                	jmp    c001231a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e7:	66 3d 01 01          	cmp    ax,0x101
c00122eb:	75 2d                	jne    c001231a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122ed:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122f2:	85 c0                	test   eax,eax
c00122f4:	74 1a                	je     c0012310 <sendKeyboardToken(KeyboardToken)+0x311>
c00122f6:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122fb:	25 ff 00 00 00       	and    eax,0xff
c0012300:	83 ec 0c             	sub    esp,0xc
c0012303:	50                   	push   eax
c0012304:	e8 85 fc ff ff       	call   c0011f8e <sendKeyToTerminal(unsigned char)>
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012310:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c001231a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001231d:	83 f0 01             	xor    eax,0x1
c0012320:	84 c0                	test   al,al
c0012322:	74 4e                	je     c0012372 <sendKeyboardToken(KeyboardToken)+0x373>
c0012324:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012327:	83 f0 01             	xor    eax,0x1
c001232a:	84 c0                	test   al,al
c001232c:	74 44                	je     c0012372 <sendKeyboardToken(KeyboardToken)+0x373>
c001232e:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c0012333:	83 f0 01             	xor    eax,0x1
c0012336:	84 c0                	test   al,al
c0012338:	74 38                	je     c0012372 <sendKeyboardToken(KeyboardToken)+0x373>
c001233a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001233d:	66 83 f8 1f          	cmp    ax,0x1f
c0012341:	76 09                	jbe    c001234c <sendKeyboardToken(KeyboardToken)+0x34d>
c0012343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012346:	66 83 f8 7e          	cmp    ax,0x7e
c001234a:	76 12                	jbe    c001235e <sendKeyboardToken(KeyboardToken)+0x35f>
c001234c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234f:	66 83 f8 0a          	cmp    ax,0xa
c0012353:	74 09                	je     c001235e <sendKeyboardToken(KeyboardToken)+0x35f>
c0012355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012358:	66 83 f8 08          	cmp    ax,0x8
c001235c:	75 14                	jne    c0012372 <sendKeyboardToken(KeyboardToken)+0x373>
c001235e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012361:	25 ff 00 00 00       	and    eax,0xff
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	50                   	push   eax
c001236a:	e8 1f fc ff ff       	call   c0011f8e <sendKeyToTerminal(unsigned char)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012375:	83 f0 01             	xor    eax,0x1
c0012378:	84 c0                	test   al,al
c001237a:	74 51                	je     c00123cd <sendKeyboardToken(KeyboardToken)+0x3ce>
c001237c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001237f:	83 f0 01             	xor    eax,0x1
c0012382:	84 c0                	test   al,al
c0012384:	74 47                	je     c00123cd <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012386:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c001238b:	84 c0                	test   al,al
c001238d:	74 3e                	je     c00123cd <sendKeyboardToken(KeyboardToken)+0x3ce>
c001238f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012392:	66 83 f8 3f          	cmp    ax,0x3f
c0012396:	76 35                	jbe    c00123cd <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239b:	66 83 f8 7f          	cmp    ax,0x7f
c001239f:	77 2c                	ja     c00123cd <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a4:	88 c2                	mov    dl,al
c00123a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a9:	66 83 f8 5f          	cmp    ax,0x5f
c00123ad:	76 04                	jbe    c00123b3 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123af:	b0 20                	mov    al,0x20
c00123b1:	eb 02                	jmp    c00123b5 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123b3:	b0 00                	mov    al,0x0
c00123b5:	29 c2                	sub    edx,eax
c00123b7:	88 d0                	mov    al,dl
c00123b9:	83 e8 40             	sub    eax,0x40
c00123bc:	25 ff 00 00 00       	and    eax,0xff
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	50                   	push   eax
c00123c5:	e8 c4 fb ff ff       	call   c0011f8e <sendKeyToTerminal(unsigned char)>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123d0:	66 3d 00 03          	cmp    ax,0x300
c00123d4:	75 0f                	jne    c00123e5 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123d6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123d9:	83 f0 01             	xor    eax,0x1
c00123dc:	84 c0                	test   al,al
c00123de:	74 05                	je     c00123e5 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123e0:	e8 02 b0 ff ff       	call   c000d3e7 <doTerminalCycle()>
c00123e5:	90                   	nop
c00123e6:	c9                   	leave  
c00123e7:	c3                   	ret    

c00123e8 <clearInternalKeybuffer(VgaText*)>:
c00123e8:	55                   	push   ebp
c00123e9:	89 e5                	mov    ebp,esp
c00123eb:	83 ec 08             	sub    esp,0x8
c00123ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123f1:	05 34 11 00 00       	add    eax,0x1134
c00123f6:	83 ec 0c             	sub    esp,0xc
c00123f9:	50                   	push   eax
c00123fa:	e8 d3 e2 fe ff       	call   c00006d2 <strlen>
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012405:	81 c2 34 11 00 00    	add    edx,0x1134
c001240b:	83 ec 04             	sub    esp,0x4
c001240e:	50                   	push   eax
c001240f:	6a 00                	push   0x0
c0012411:	52                   	push   edx
c0012412:	e8 9e e2 fe ff       	call   c00006b5 <memset>
c0012417:	83 c4 10             	add    esp,0x10
c001241a:	90                   	nop
c001241b:	c9                   	leave  
c001241c:	c3                   	ret    

c001241d <readKeyboard(VgaText*, char*, unsigned long)>:
c001241d:	55                   	push   ebp
c001241e:	89 e5                	mov    ebp,esp
c0012420:	83 ec 18             	sub    esp,0x18
c0012423:	fb                   	sti    
c0012424:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001242b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001242f:	74 77                	je     c00124a8 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012434:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001243a:	84 c0                	test   al,al
c001243c:	75 02                	jne    c0012440 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001243e:	eb f1                	jmp    c0012431 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012440:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012443:	8d 50 01             	lea    edx,[eax+0x1]
c0012446:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012449:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001244c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012452:	88 10                	mov    BYTE PTR [eax],dl
c0012454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012457:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001245d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012463:	05 34 11 00 00       	add    eax,0x1134
c0012468:	83 ec 0c             	sub    esp,0xc
c001246b:	50                   	push   eax
c001246c:	e8 61 e2 fe ff       	call   c00006d2 <strlen>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012477:	81 c2 34 11 00 00    	add    edx,0x1134
c001247d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012483:	81 c2 34 11 00 00    	add    edx,0x1134
c0012489:	83 ec 04             	sub    esp,0x4
c001248c:	50                   	push   eax
c001248d:	51                   	push   ecx
c001248e:	52                   	push   edx
c001248f:	e8 b3 e1 fe ff       	call   c0000647 <memmove>
c0012494:	83 c4 10             	add    esp,0x10
c0012497:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001249a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001249d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124a1:	75 88                	jne    c001242b <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124a6:	eb 03                	jmp    c00124ab <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124ab:	c9                   	leave  
c00124ac:	c3                   	ret    
c00124ad:	90                   	nop

c00124ae <Keyboard::Keyboard(char const*)>:
c00124ae:	83 ec 0c             	sub    esp,0xc
c00124b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b5:	83 ec 08             	sub    esp,0x8
c00124b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124bc:	50                   	push   eax
c00124bd:	e8 48 e3 ff ff       	call   c001080a <Device::Device(char const*)>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c00124ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ce:	89 10                	mov    DWORD PTR [eax],edx
c00124d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124de:	c6 05 24 49 02 c0 01 	mov    BYTE PTR ds:0xc0024924,0x1
c00124e5:	90                   	nop
c00124e6:	83 c4 0c             	add    esp,0xc
c00124e9:	c3                   	ret    

c00124ea <Keyboard::~Keyboard()>:
c00124ea:	83 ec 0c             	sub    esp,0xc
c00124ed:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c00124f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f6:	89 10                	mov    DWORD PTR [eax],edx
c00124f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fc:	83 ec 0c             	sub    esp,0xc
c00124ff:	50                   	push   eax
c0012500:	e8 bb df ff ff       	call   c00104c0 <Device::~Device()>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	90                   	nop
c0012509:	83 c4 0c             	add    esp,0xc
c001250c:	c3                   	ret    
c001250d:	90                   	nop

c001250e <Keyboard::~Keyboard()>:
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	83 ec 0c             	sub    esp,0xc
c0012514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012518:	e8 cd ff ff ff       	call   c00124ea <Keyboard::~Keyboard()>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	83 ec 08             	sub    esp,0x8
c0012523:	68 5c 01 00 00       	push   0x15c
c0012528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252c:	e8 ae cb ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0012531:	83 c4 10             	add    esp,0x10
c0012534:	83 c4 0c             	add    esp,0xc
c0012537:	c3                   	ret    

c0012538 <LogicalDisk::close(int, int, void*)>:
c0012538:	83 c8 ff             	or     eax,0xffffffff
c001253b:	c3                   	ret    

c001253c <LogicalDisk::~LogicalDisk()>:
c001253c:	83 ec 0c             	sub    esp,0xc
c001253f:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c0012544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012548:	89 10                	mov    DWORD PTR [eax],edx
c001254a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	50                   	push   eax
c0012552:	e8 69 df ff ff       	call   c00104c0 <Device::~Device()>
c0012557:	83 c4 10             	add    esp,0x10
c001255a:	90                   	nop
c001255b:	83 c4 0c             	add    esp,0xc
c001255e:	c3                   	ret    
c001255f:	90                   	nop

c0012560 <LogicalDisk::~LogicalDisk()>:
c0012560:	83 ec 0c             	sub    esp,0xc
c0012563:	83 ec 0c             	sub    esp,0xc
c0012566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001256a:	e8 cd ff ff ff       	call   c001253c <LogicalDisk::~LogicalDisk()>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	83 ec 08             	sub    esp,0x8
c0012575:	68 74 01 00 00       	push   0x174
c001257a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257e:	e8 5c cb ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	83 c4 0c             	add    esp,0xc
c0012589:	c3                   	ret    

c001258a <LogicalDisk::open(int, int, void*)>:
c001258a:	83 ec 18             	sub    esp,0x18
c001258d:	68 08 21 02 c0       	push   0xc0022108
c0012592:	e8 9d 34 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0012597:	83 c8 ff             	or     eax,0xffffffff
c001259a:	83 c4 1c             	add    esp,0x1c
c001259d:	c3                   	ret    

c001259e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001259e:	53                   	push   ebx
c001259f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125ab:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125b1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125b7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125bd:	77 10                	ja     c00125cf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125bf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125c5:	89 d3                	mov    ebx,edx
c00125c7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125cd:	72 05                	jb     c00125d4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125cf:	83 c8 ff             	or     eax,0xffffffff
c00125d2:	89 c2                	mov    edx,eax
c00125d4:	5b                   	pop    ebx
c00125d5:	c3                   	ret    

c00125d6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125d6:	56                   	push   esi
c00125d7:	83 c8 ff             	or     eax,0xffffffff
c00125da:	53                   	push   ebx
c00125db:	89 c2                	mov    edx,eax
c00125dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125e1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125ef:	77 27                	ja     c0012618 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125f1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00125f7:	89 d8                	mov    eax,ebx
c00125f9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00125ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012604:	89 c2                	mov    edx,eax
c0012606:	73 10                	jae    c0012618 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012608:	89 c8                	mov    eax,ecx
c001260a:	89 da                	mov    edx,ebx
c001260c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012612:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012618:	5b                   	pop    ebx
c0012619:	5e                   	pop    esi
c001261a:	c3                   	ret    
c001261b:	90                   	nop

c001261c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001261c:	83 ec 1c             	sub    esp,0x1c
c001261f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012627:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001262b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001262f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012633:	89 04 24             	mov    DWORD PTR [esp],eax
c0012636:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001263a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001263e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012642:	83 ec 08             	sub    esp,0x8
c0012645:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012649:	50                   	push   eax
c001264a:	e8 bb e1 ff ff       	call   c001080a <Device::Device(char const*)>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c0012657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001265b:	89 10                	mov    DWORD PTR [eax],edx
c001265d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012661:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012677:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012681:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012689:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001268d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012693:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0012699:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001269d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126a4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126aa:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126b8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126cc:	90                   	nop
c00126cd:	83 c4 1c             	add    esp,0x1c
c00126d0:	c3                   	ret    
c00126d1:	90                   	nop

c00126d2 <LogicalDisk::assignDriveLetter()>:
c00126d2:	55                   	push   ebp
c00126d3:	57                   	push   edi
c00126d4:	56                   	push   esi
c00126d5:	53                   	push   ebx
c00126d6:	83 ec 14             	sub    esp,0x14
c00126d9:	8b 3d 60 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d60
c00126df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126e7:	8b 3d 64 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d64
c00126ed:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00126f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00126f7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00126fd:	3c 01                	cmp    al,0x1
c00126ff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012703:	19 c0                	sbb    eax,eax
c0012705:	83 e0 02             	and    eax,0x2
c0012708:	83 c0 41             	add    eax,0x41
c001270b:	0f be e8             	movsx  ebp,al
c001270e:	3c 43                	cmp    al,0x43
c0012710:	75 10                	jne    c0012722 <LogicalDisk::assignDriveLetter()+0x50>
c0012712:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012719:	75 5d                	jne    c0012778 <LogicalDisk::assignDriveLetter()+0xa6>
c001271b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012720:	75 56                	jne    c0012778 <LogicalDisk::assignDriveLetter()+0xa6>
c0012722:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012725:	ba 01 00 00 00       	mov    edx,0x1
c001272a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001272e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012732:	d3 e2                	shl    edx,cl
c0012734:	89 d7                	mov    edi,edx
c0012736:	89 d6                	mov    esi,edx
c0012738:	c1 ff 1f             	sar    edi,0x1f
c001273b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001273f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012743:	21 f9                	and    ecx,edi
c0012745:	09 d1                	or     ecx,edx
c0012747:	75 2f                	jne    c0012778 <LogicalDisk::assignDriveLetter()+0xa6>
c0012749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001274d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012751:	09 f2                	or     edx,esi
c0012753:	89 15 60 4d 02 c0    	mov    DWORD PTR ds:0xc0024d60,edx
c0012759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001275d:	09 fa                	or     edx,edi
c001275f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012763:	89 15 64 4d 02 c0    	mov    DWORD PTR ds:0xc0024d64,edx
c0012769:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001276f:	89 1c bd 80 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb280],ebx
c0012776:	eb 08                	jmp    c0012780 <LogicalDisk::assignDriveLetter()+0xae>
c0012778:	40                   	inc    eax
c0012779:	45                   	inc    ebp
c001277a:	3c 5b                	cmp    al,0x5b
c001277c:	75 90                	jne    c001270e <LogicalDisk::assignDriveLetter()+0x3c>
c001277e:	31 c0                	xor    eax,eax
c0012780:	83 c4 14             	add    esp,0x14
c0012783:	5b                   	pop    ebx
c0012784:	5e                   	pop    esi
c0012785:	5f                   	pop    edi
c0012786:	5d                   	pop    ebp
c0012787:	c3                   	ret    

c0012788 <LogicalDisk::mount()>:
c0012788:	56                   	push   esi
c0012789:	53                   	push   ebx
c001278a:	51                   	push   ecx
c001278b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001278f:	8b 1d e8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248e8
c0012795:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001279f:	85 db                	test   ebx,ebx
c00127a1:	74 50                	je     c00127f3 <LogicalDisk::mount()+0x6b>
c00127a3:	e8 80 62 00 00       	call   c0018a28 <getIRQNestingLevel()>
c00127a8:	52                   	push   edx
c00127a9:	52                   	push   edx
c00127aa:	50                   	push   eax
c00127ab:	68 2c 21 02 c0       	push   0xc002212c
c00127b0:	e8 50 ca ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00127b5:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127bc:	83 c4 0c             	add    esp,0xc
c00127bf:	83 e8 41             	sub    eax,0x41
c00127c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127c4:	50                   	push   eax
c00127c5:	56                   	push   esi
c00127c6:	53                   	push   ebx
c00127c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127ca:	83 c4 10             	add    esp,0x10
c00127cd:	84 c0                	test   al,al
c00127cf:	74 08                	je     c00127d9 <LogicalDisk::mount()+0x51>
c00127d1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127d7:	eb 1c                	jmp    c00127f5 <LogicalDisk::mount()+0x6d>
c00127d9:	e8 4a 62 00 00       	call   c0018a28 <getIRQNestingLevel()>
c00127de:	51                   	push   ecx
c00127df:	51                   	push   ecx
c00127e0:	50                   	push   eax
c00127e1:	68 47 21 02 c0       	push   0xc0022147
c00127e6:	e8 1a ca ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00127eb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127ee:	83 c4 10             	add    esp,0x10
c00127f1:	eb ac                	jmp    c001279f <LogicalDisk::mount()+0x17>
c00127f3:	31 c0                	xor    eax,eax
c00127f5:	5a                   	pop    edx
c00127f6:	5b                   	pop    ebx
c00127f7:	5e                   	pop    esi
c00127f8:	c3                   	ret    
c00127f9:	90                   	nop

c00127fa <LogicalDisk::unmount()>:
c00127fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127fe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012808:	c3                   	ret    
c0012809:	90                   	nop

c001280a <LogicalDisk::unassignDriveLetter()>:
c001280a:	57                   	push   edi
c001280b:	56                   	push   esi
c001280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012810:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012817:	84 c9                	test   cl,cl
c0012819:	75 0f                	jne    c001282a <LogicalDisk::unassignDriveLetter()+0x20>
c001281b:	c7 44 24 0c 62 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022162
c0012823:	5e                   	pop    esi
c0012824:	5f                   	pop    edi
c0012825:	e9 0a 32 00 00       	jmp    c0015a34 <Krnl::panic(char const*)>
c001282a:	83 e9 41             	sub    ecx,0x41
c001282d:	b8 01 00 00 00       	mov    eax,0x1
c0012832:	d3 e0                	shl    eax,cl
c0012834:	89 c7                	mov    edi,eax
c0012836:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001283d:	c1 ff 1f             	sar    edi,0x1f
c0012840:	c7 04 8d 80 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb280],0x0
c001284b:	89 fe                	mov    esi,edi
c001284d:	f7 d6                	not    esi
c001284f:	f7 d0                	not    eax
c0012851:	21 35 64 4d 02 c0    	and    DWORD PTR ds:0xc0024d64,esi
c0012857:	5e                   	pop    esi
c0012858:	21 05 60 4d 02 c0    	and    DWORD PTR ds:0xc0024d60,eax
c001285e:	5f                   	pop    edi
c001285f:	c3                   	ret    

c0012860 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012860:	57                   	push   edi
c0012861:	56                   	push   esi
c0012862:	53                   	push   ebx
c0012863:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012867:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001286b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001286f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012873:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012879:	77 41                	ja     c00128bc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001287b:	99                   	cdq    
c001287c:	01 c8                	add    eax,ecx
c001287e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012884:	11 da                	adc    edx,ebx
c0012886:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001288c:	19 d7                	sbb    edi,edx
c001288e:	72 33                	jb     c00128c3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012890:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012896:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001289c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128a0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128a4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128b4:	5b                   	pop    ebx
c00128b5:	5e                   	pop    esi
c00128b6:	5f                   	pop    edi
c00128b7:	e9 9a 09 00 00       	jmp    c0013256 <VCache::read(unsigned long long, int, void*)>
c00128bc:	b8 05 00 00 00       	mov    eax,0x5
c00128c1:	eb 05                	jmp    c00128c8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128c3:	b8 07 00 00 00       	mov    eax,0x7
c00128c8:	5b                   	pop    ebx
c00128c9:	5e                   	pop    esi
c00128ca:	5f                   	pop    edi
c00128cb:	c3                   	ret    

c00128cc <LogicalDisk::write(unsigned long long, int, void*)>:
c00128cc:	57                   	push   edi
c00128cd:	56                   	push   esi
c00128ce:	53                   	push   ebx
c00128cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128e5:	77 41                	ja     c0012928 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128e7:	99                   	cdq    
c00128e8:	01 c8                	add    eax,ecx
c00128ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128f0:	11 da                	adc    edx,ebx
c00128f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128f8:	19 d7                	sbb    edi,edx
c00128fa:	72 33                	jb     c001292f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00128fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012902:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012908:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001290c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012910:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012916:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001291c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012920:	5b                   	pop    ebx
c0012921:	5e                   	pop    esi
c0012922:	5f                   	pop    edi
c0012923:	e9 4a 08 00 00       	jmp    c0013172 <VCache::write(unsigned long long, int, void*)>
c0012928:	b8 05 00 00 00       	mov    eax,0x5
c001292d:	eb 05                	jmp    c0012934 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001292f:	b8 07 00 00 00       	mov    eax,0x7
c0012934:	5b                   	pop    ebx
c0012935:	5e                   	pop    esi
c0012936:	5f                   	pop    edi
c0012937:	c3                   	ret    

c0012938 <Mouse::Mouse(char const*)>:
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293f:	83 ec 08             	sub    esp,0x8
c0012942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012946:	50                   	push   eax
c0012947:	e8 be de ff ff       	call   c001080a <Device::Device(char const*)>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c0012954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012958:	89 10                	mov    DWORD PTR [eax],edx
c001295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012968:	90                   	nop
c0012969:	83 c4 0c             	add    esp,0xc
c001296c:	c3                   	ret    
c001296d:	90                   	nop

c001296e <Mouse::~Mouse()>:
c001296e:	83 ec 0c             	sub    esp,0xc
c0012971:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c0012976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297a:	89 10                	mov    DWORD PTR [eax],edx
c001297c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012980:	83 ec 0c             	sub    esp,0xc
c0012983:	50                   	push   eax
c0012984:	e8 37 db ff ff       	call   c00104c0 <Device::~Device()>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	90                   	nop
c001298d:	83 c4 0c             	add    esp,0xc
c0012990:	c3                   	ret    
c0012991:	90                   	nop

c0012992 <Mouse::~Mouse()>:
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	83 ec 0c             	sub    esp,0xc
c0012998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001299c:	e8 cd ff ff ff       	call   c001296e <Mouse::~Mouse()>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	83 ec 08             	sub    esp,0x8
c00129a7:	68 58 01 00 00       	push   0x158
c00129ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b0:	e8 2a c7 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	83 c4 0c             	add    esp,0xc
c00129bb:	c3                   	ret    

c00129bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129bc:	55                   	push   ebp
c00129bd:	57                   	push   edi
c00129be:	56                   	push   esi
c00129bf:	53                   	push   ebx
c00129c0:	81 ec 28 01 00 00    	sub    esp,0x128
c00129c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129ea:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129f1:	e8 06 df ff ff       	call   c00108fc <Device::getName()>
c00129f6:	5a                   	pop    edx
c00129f7:	59                   	pop    ecx
c00129f8:	50                   	push   eax
c00129f9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00129fd:	55                   	push   ebp
c00129fe:	e8 51 dd fe ff       	call   c0000754 <strcpy>
c0012a03:	5b                   	pop    ebx
c0012a04:	58                   	pop    eax
c0012a05:	68 dc 21 02 c0       	push   0xc00221dc
c0012a0a:	55                   	push   ebp
c0012a0b:	e8 fb dd fe ff       	call   c000080b <strcat>
c0012a10:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a17:	e8 b4 c6 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0012a1c:	83 c4 0c             	add    esp,0xc
c0012a1f:	89 c3                	mov    ebx,eax
c0012a21:	57                   	push   edi
c0012a22:	56                   	push   esi
c0012a23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a2b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a32:	55                   	push   ebp
c0012a33:	50                   	push   eax
c0012a34:	e8 e3 fb ff ff       	call   c001261c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a39:	83 c4 14             	add    esp,0x14
c0012a3c:	53                   	push   ebx
c0012a3d:	e8 90 fc ff ff       	call   c00126d2 <LogicalDisk::assignDriveLetter()>
c0012a42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a45:	e8 3e fd ff ff       	call   c0012788 <LogicalDisk::mount()>
c0012a4a:	58                   	pop    eax
c0012a4b:	5a                   	pop    edx
c0012a4c:	53                   	push   ebx
c0012a4d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a54:	e8 c1 db ff ff       	call   c001061a <Device::addChild(Device*)>
c0012a59:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a5f:	5b                   	pop    ebx
c0012a60:	5e                   	pop    esi
c0012a61:	5f                   	pop    edi
c0012a62:	5d                   	pop    ebp
c0012a63:	c3                   	ret    

c0012a64 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a64:	55                   	push   ebp
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a6e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a75:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a7b:	3d 00 02 00 00       	cmp    eax,0x200
c0012a80:	74 27                	je     c0012aa9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a82:	83 ec 10             	sub    esp,0x10
c0012a85:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a8b:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a91:	99                   	cdq    
c0012a92:	52                   	push   edx
c0012a93:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012a97:	50                   	push   eax
c0012a98:	89 fd                	mov    ebp,edi
c0012a9a:	c1 e6 0a             	shl    esi,0xa
c0012a9d:	55                   	push   ebp
c0012a9e:	56                   	push   esi
c0012a9f:	e8 58 ca 00 00       	call   c001f4fc <__udivdi3>
c0012aa4:	e9 b1 00 00 00       	jmp    c0012b5a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012aa9:	83 ec 0c             	sub    esp,0xc
c0012aac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aae:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012ab2:	56                   	push   esi
c0012ab3:	6a 01                	push   0x1
c0012ab5:	6a 00                	push   0x0
c0012ab7:	6a 00                	push   0x0
c0012ab9:	53                   	push   ebx
c0012aba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012abd:	83 c4 20             	add    esp,0x20
c0012ac0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ac8:	75 0a                	jne    c0012ad4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012aca:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012ad2:	74 2c                	je     c0012b00 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ad4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012ada:	83 ec 10             	sub    esp,0x10
c0012add:	89 f7                	mov    edi,esi
c0012adf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012ae5:	c1 ff 1f             	sar    edi,0x1f
c0012ae8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012aee:	57                   	push   edi
c0012aef:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012af3:	c1 e0 0a             	shl    eax,0xa
c0012af6:	56                   	push   esi
c0012af7:	52                   	push   edx
c0012af8:	50                   	push   eax
c0012af9:	e8 fe c9 00 00       	call   c001f4fc <__udivdi3>
c0012afe:	eb 5a                	jmp    c0012b5a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b00:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b07:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b0e:	83 e0 7f             	and    eax,0x7f
c0012b11:	83 e1 7f             	and    ecx,0x7f
c0012b14:	01 c1                	add    ecx,eax
c0012b16:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b1d:	83 e0 7f             	and    eax,0x7f
c0012b20:	01 c1                	add    ecx,eax
c0012b22:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b29:	83 e0 7f             	and    eax,0x7f
c0012b2c:	00 c1                	add    cl,al
c0012b2e:	74 41                	je     c0012b71 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b30:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b36:	83 ec 10             	sub    esp,0x10
c0012b39:	89 f7                	mov    edi,esi
c0012b3b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b41:	c1 ff 1f             	sar    edi,0x1f
c0012b44:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b4a:	57                   	push   edi
c0012b4b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b4f:	c1 e0 0a             	shl    eax,0xa
c0012b52:	56                   	push   esi
c0012b53:	52                   	push   edx
c0012b54:	50                   	push   eax
c0012b55:	e8 a2 c9 00 00       	call   c001f4fc <__udivdi3>
c0012b5a:	83 c4 14             	add    esp,0x14
c0012b5d:	52                   	push   edx
c0012b5e:	50                   	push   eax
c0012b5f:	6a 00                	push   0x0
c0012b61:	6a 00                	push   0x0
c0012b63:	53                   	push   ebx
c0012b64:	e8 53 fe ff ff       	call   c00129bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b69:	83 c4 20             	add    esp,0x20
c0012b6c:	e9 79 01 00 00       	jmp    c0012cea <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b71:	89 f0                	mov    eax,esi
c0012b73:	31 f6                	xor    esi,esi
c0012b75:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b7c:	75 02                	jne    c0012b80 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b7e:	89 f1                	mov    ecx,esi
c0012b80:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b87:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b8e:	c1 e2 08             	shl    edx,0x8
c0012b91:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012b99:	c1 e7 10             	shl    edi,0x10
c0012b9c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012ba4:	09 fa                	or     edx,edi
c0012ba6:	83 c0 10             	add    eax,0x10
c0012ba9:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bb0:	09 fa                	or     edx,edi
c0012bb2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bb9:	c1 e7 18             	shl    edi,0x18
c0012bbc:	09 fa                	or     edx,edi
c0012bbe:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bc2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bc9:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bd0:	c1 e7 10             	shl    edi,0x10
c0012bd3:	c1 e2 08             	shl    edx,0x8
c0012bd6:	09 fa                	or     edx,edi
c0012bd8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bdf:	09 fa                	or     edx,edi
c0012be1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012be8:	c1 e7 18             	shl    edi,0x18
c0012beb:	09 fa                	or     edx,edi
c0012bed:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012bf1:	46                   	inc    esi
c0012bf2:	83 fe 04             	cmp    esi,0x4
c0012bf5:	0f 85 7a ff ff ff    	jne    c0012b75 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bff:	83 f0 01             	xor    eax,0x1
c0012c02:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c06:	75 57                	jne    c0012c5f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c0c:	83 f0 01             	xor    eax,0x1
c0012c0f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c13:	75 4a                	jne    c0012c5f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c15:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c1f:	89 f7                	mov    edi,esi
c0012c21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c29:	c1 ff 1f             	sar    edi,0x1f
c0012c2c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c34:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c3a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c40:	57                   	push   edi
c0012c41:	56                   	push   esi
c0012c42:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c46:	c1 e0 0a             	shl    eax,0xa
c0012c49:	52                   	push   edx
c0012c4a:	50                   	push   eax
c0012c4b:	e8 ac c8 00 00       	call   c001f4fc <__udivdi3>
c0012c50:	83 c4 10             	add    esp,0x10
c0012c53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c5b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c5f:	84 c9                	test   cl,cl
c0012c61:	74 53                	je     c0012cb6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c63:	0f b6 c9             	movzx  ecx,cl
c0012c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c76:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c7a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c8e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c92:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012c96:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012c9a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012c9e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012ca2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012ca6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012caa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cae:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cb2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cb6:	31 ed                	xor    ebp,ebp
c0012cb8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cbc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cc0:	89 f8                	mov    eax,edi
c0012cc2:	09 f0                	or     eax,esi
c0012cc4:	74 1e                	je     c0012ce4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cc6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cca:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cce:	89 d1                	mov    ecx,edx
c0012cd0:	09 c1                	or     ecx,eax
c0012cd2:	74 10                	je     c0012ce4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	57                   	push   edi
c0012cd8:	56                   	push   esi
c0012cd9:	52                   	push   edx
c0012cda:	50                   	push   eax
c0012cdb:	53                   	push   ebx
c0012cdc:	e8 db fc ff ff       	call   c00129bc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012ce1:	83 c4 20             	add    esp,0x20
c0012ce4:	45                   	inc    ebp
c0012ce5:	83 fd 04             	cmp    ebp,0x4
c0012ce8:	75 ce                	jne    c0012cb8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cea:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012cf0:	5b                   	pop    ebx
c0012cf1:	5e                   	pop    esi
c0012cf2:	5f                   	pop    edi
c0012cf3:	5d                   	pop    ebp
c0012cf4:	c3                   	ret    
c0012cf5:	90                   	nop

c0012cf6 <Timer::Timer(char const*)>:
c0012cf6:	83 ec 0c             	sub    esp,0xc
c0012cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d04:	50                   	push   eax
c0012d05:	e8 00 db ff ff       	call   c001080a <Device::Device(char const*)>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	ba f0 21 02 c0       	mov    edx,0xc00221f0
c0012d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d16:	89 10                	mov    DWORD PTR [eax],edx
c0012d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d26:	90                   	nop
c0012d27:	83 c4 0c             	add    esp,0xc
c0012d2a:	c3                   	ret    
c0012d2b:	90                   	nop

c0012d2c <Timer::~Timer()>:
c0012d2c:	83 ec 0c             	sub    esp,0xc
c0012d2f:	ba f0 21 02 c0       	mov    edx,0xc00221f0
c0012d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d38:	89 10                	mov    DWORD PTR [eax],edx
c0012d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	50                   	push   eax
c0012d42:	e8 79 d7 ff ff       	call   c00104c0 <Device::~Device()>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	90                   	nop
c0012d4b:	83 c4 0c             	add    esp,0xc
c0012d4e:	c3                   	ret    
c0012d4f:	90                   	nop

c0012d50 <Timer::~Timer()>:
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d5a:	e8 cd ff ff ff       	call   c0012d2c <Timer::~Timer()>
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	83 ec 08             	sub    esp,0x8
c0012d65:	68 5c 01 00 00       	push   0x15c
c0012d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6e:	e8 6c c3 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0012d73:	83 c4 10             	add    esp,0x10
c0012d76:	83 c4 0c             	add    esp,0xc
c0012d79:	c3                   	ret    

c0012d7a <Timer::read()>:
c0012d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d84:	c3                   	ret    

c0012d85 <timerHandler(unsigned long long)>:
c0012d85:	55                   	push   ebp
c0012d86:	57                   	push   edi
c0012d87:	56                   	push   esi
c0012d88:	53                   	push   ebx
c0012d89:	83 ec 0c             	sub    esp,0xc
c0012d8c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d90:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d94:	01 35 f0 4d 02 c0    	add    DWORD PTR ds:0xc0024df0,esi
c0012d9a:	11 3d f4 4d 02 c0    	adc    DWORD PTR ds:0xc0024df4,edi
c0012da0:	80 3d 8d 47 02 c0 00 	cmp    BYTE PTR ds:0xc002478d,0x0
c0012da7:	0f 84 07 01 00 00    	je     c0012eb4 <timerHandler(unsigned long long)+0x12f>
c0012dad:	e8 b2 5c 00 00       	call   c0018a64 <lockStuff()>
c0012db2:	83 ec 0c             	sub    esp,0xc
c0012db5:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012dba:	e8 11 ce 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dbf:	c7 04 24 bc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bbc
c0012dc6:	89 c3                	mov    ebx,eax
c0012dc8:	e8 0b ce 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012dcd:	83 c4 10             	add    esp,0x10
c0012dd0:	84 c0                	test   al,al
c0012dd2:	74 60                	je     c0012e34 <timerHandler(unsigned long long)+0xaf>
c0012dd4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012dda:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012ddd:	85 c0                	test   eax,eax
c0012ddf:	0f 85 91 00 00 00    	jne    c0012e76 <timerHandler(unsigned long long)+0xf1>
c0012de5:	e9 be 00 00 00       	jmp    c0012ea8 <timerHandler(unsigned long long)+0x123>
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	55                   	push   ebp
c0012dee:	e8 6e 62 00 00       	call   c0019061 <unblockTask(ThreadControlBlock*)>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	39 eb                	cmp    ebx,ebp
c0012df8:	75 12                	jne    c0012e0c <timerHandler(unsigned long long)+0x87>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e02:	e8 c9 cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e07:	89 c3                	mov    ebx,eax
c0012e09:	83 c4 10             	add    esp,0x10
c0012e0c:	83 ec 0c             	sub    esp,0xc
c0012e0f:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e14:	e8 bf cd 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	84 c0                	test   al,al
c0012e1e:	75 b4                	jne    c0012dd4 <timerHandler(unsigned long long)+0x4f>
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e28:	e8 a3 cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	39 d8                	cmp    eax,ebx
c0012e32:	74 a0                	je     c0012dd4 <timerHandler(unsigned long long)+0x4f>
c0012e34:	83 ec 0c             	sub    esp,0xc
c0012e37:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e3c:	e8 8f cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e41:	89 c5                	mov    ebp,eax
c0012e43:	c7 04 24 bc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bbc
c0012e4a:	e8 a5 cd 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e4f:	83 c4 10             	add    esp,0x10
c0012e52:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e55:	a1 f4 4d 02 c0       	mov    eax,ds:0xc0024df4
c0012e5a:	39 15 f0 4d 02 c0    	cmp    DWORD PTR ds:0xc0024df0,edx
c0012e60:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e63:	19 c8                	sbb    eax,ecx
c0012e65:	73 83                	jae    c0012dea <timerHandler(unsigned long long)+0x65>
c0012e67:	50                   	push   eax
c0012e68:	50                   	push   eax
c0012e69:	55                   	push   ebp
c0012e6a:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e6f:	e8 2e ce 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e74:	eb 93                	jmp    c0012e09 <timerHandler(unsigned long long)+0x84>
c0012e76:	80 3d 8c 47 02 c0 00 	cmp    BYTE PTR ds:0xc002478c,0x0
c0012e7d:	74 29                	je     c0012ea8 <timerHandler(unsigned long long)+0x123>
c0012e7f:	39 c6                	cmp    esi,eax
c0012e81:	bb 00 00 00 00       	mov    ebx,0x0
c0012e86:	19 df                	sbb    edi,ebx
c0012e88:	72 19                	jb     c0012ea3 <timerHandler(unsigned long long)+0x11e>
c0012e8a:	e8 ae 5b 00 00       	call   c0018a3d <lockScheduler()>
c0012e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e94:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012e97:	e8 ea 5e 00 00       	call   c0018d86 <schedule()>
c0012e9c:	e8 9e 5b 00 00       	call   c0018a3f <unlockScheduler()>
c0012ea1:	eb 05                	jmp    c0012ea8 <timerHandler(unsigned long long)+0x123>
c0012ea3:	29 f0                	sub    eax,esi
c0012ea5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012ea8:	83 c4 0c             	add    esp,0xc
c0012eab:	5b                   	pop    ebx
c0012eac:	5e                   	pop    esi
c0012ead:	5f                   	pop    edi
c0012eae:	5d                   	pop    ebp
c0012eaf:	e9 57 5f 00 00       	jmp    c0018e0b <unlockStuff()>
c0012eb4:	83 c4 0c             	add    esp,0xc
c0012eb7:	5b                   	pop    ebx
c0012eb8:	5e                   	pop    esi
c0012eb9:	5f                   	pop    edi
c0012eba:	5d                   	pop    ebp
c0012ebb:	c3                   	ret    

c0012ebc <setupTimer(int)>:
c0012ebc:	57                   	push   edi
c0012ebd:	56                   	push   esi
c0012ebe:	53                   	push   ebx
c0012ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ec3:	e8 fd 19 00 00       	call   c00148c5 <getCPUNumber()>
c0012ec8:	85 c0                	test   eax,eax
c0012eca:	74 32                	je     c0012efe <setupTimer(int)+0x42>
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	68 60 01 00 00       	push   0x160
c0012ed4:	e8 f7 c1 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0012ed9:	89 04 24             	mov    DWORD PTR [esp],eax
c0012edc:	89 c3                	mov    ebx,eax
c0012ede:	e8 a7 c0 00 00       	call   c001ef8a <APICTimer::APICTimer()>
c0012ee3:	6a 00                	push   0x0
c0012ee5:	6a 00                	push   0x0
c0012ee7:	56                   	push   esi
c0012ee8:	53                   	push   ebx
c0012ee9:	e8 96 bf 00 00       	call   c001ee84 <APICTimer::open(int, int, void*)>
c0012eee:	83 c4 20             	add    esp,0x20
c0012ef1:	e8 d2 19 00 00       	call   c00148c8 <thisCPU()>
c0012ef6:	56                   	push   esi
c0012ef7:	56                   	push   esi
c0012ef8:	53                   	push   ebx
c0012ef9:	e9 96 00 00 00       	jmp    c0012f94 <setupTimer(int)+0xd8>
c0012efe:	e8 c5 19 00 00       	call   c00148c8 <thisCPU()>
c0012f03:	83 ec 0c             	sub    esp,0xc
c0012f06:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f0c:	e8 eb d9 ff ff       	call   c00108fc <Device::getName()>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f17:	0f 85 87 00 00 00    	jne    c0012fa4 <setupTimer(int)+0xe8>
c0012f1d:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0012f22:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f29:	74 79                	je     c0012fa4 <setupTimer(int)+0xe8>
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	68 5c 01 00 00       	push   0x15c
c0012f33:	e8 98 c1 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0012f38:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f3b:	89 c3                	mov    ebx,eax
c0012f3d:	e8 a4 c1 00 00       	call   c001f0e6 <PIT::PIT()>
c0012f42:	59                   	pop    ecx
c0012f43:	5f                   	pop    edi
c0012f44:	53                   	push   ebx
c0012f45:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0012f4b:	e8 ca d6 ff ff       	call   c001061a <Device::addChild(Device*)>
c0012f50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f52:	6a 00                	push   0x0
c0012f54:	6a 00                	push   0x0
c0012f56:	56                   	push   esi
c0012f57:	53                   	push   ebx
c0012f58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f5b:	83 c4 14             	add    esp,0x14
c0012f5e:	68 60 01 00 00       	push   0x160
c0012f63:	e8 68 c1 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0012f68:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f6b:	89 c7                	mov    edi,eax
c0012f6d:	e8 18 c0 00 00       	call   c001ef8a <APICTimer::APICTimer()>
c0012f72:	6a 00                	push   0x0
c0012f74:	6a 00                	push   0x0
c0012f76:	56                   	push   esi
c0012f77:	57                   	push   edi
c0012f78:	e8 07 bf 00 00       	call   c001ee84 <APICTimer::open(int, int, void*)>
c0012f7d:	83 c4 20             	add    esp,0x20
c0012f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f82:	6a 00                	push   0x0
c0012f84:	6a 00                	push   0x0
c0012f86:	6a 00                	push   0x0
c0012f88:	53                   	push   ebx
c0012f89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f8c:	e8 37 19 00 00       	call   c00148c8 <thisCPU()>
c0012f91:	5a                   	pop    edx
c0012f92:	59                   	pop    ecx
c0012f93:	57                   	push   edi
c0012f94:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f9a:	e8 7b d6 ff ff       	call   c001061a <Device::addChild(Device*)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	eb 33                	jmp    c0012fd7 <setupTimer(int)+0x11b>
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	68 5c 01 00 00       	push   0x15c
c0012fac:	e8 1f c1 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0012fb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fb4:	89 c3                	mov    ebx,eax
c0012fb6:	e8 2b c1 00 00       	call   c001f0e6 <PIT::PIT()>
c0012fbb:	58                   	pop    eax
c0012fbc:	5a                   	pop    edx
c0012fbd:	53                   	push   ebx
c0012fbe:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0012fc4:	e8 51 d6 ff ff       	call   c001061a <Device::addChild(Device*)>
c0012fc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fcb:	6a 00                	push   0x0
c0012fcd:	6a 00                	push   0x0
c0012fcf:	56                   	push   esi
c0012fd0:	53                   	push   ebx
c0012fd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fd4:	83 c4 20             	add    esp,0x20
c0012fd7:	89 d8                	mov    eax,ebx
c0012fd9:	5b                   	pop    ebx
c0012fda:	5e                   	pop    esi
c0012fdb:	5f                   	pop    edi
c0012fdc:	c3                   	ret    
c0012fdd:	90                   	nop

c0012fde <VCache::VCache(PhysicalDisk*)>:
c0012fde:	53                   	push   ebx
c0012fdf:	83 ec 08             	sub    esp,0x8
c0012fe2:	ba 20 22 02 c0       	mov    edx,0xc0022220
c0012fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012feb:	89 10                	mov    DWORD PTR [eax],edx
c0012fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffc:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0013003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013007:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001300e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013019:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0013020:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001302b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013036:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	6a 10                	push   0x10
c001303f:	e8 8c c0 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	89 c3                	mov    ebx,eax
c0013049:	83 ec 0c             	sub    esp,0xc
c001304c:	53                   	push   ebx
c001304d:	e8 0e 5b 00 00       	call   c0018b60 <Mutex::Mutex()>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013059:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001305c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013060:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013064:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013072:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013076:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013080:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013087:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001308d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013093:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013097:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001309a:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001309d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a1:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130af:	c1 e0 06             	shl    eax,0x6
c00130b2:	83 ec 0c             	sub    esp,0xc
c00130b5:	50                   	push   eax
c00130b6:	e8 18 8f ff ff       	call   c000bfd3 <malloc>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	89 c2                	mov    edx,eax
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130c7:	90                   	nop
c00130c8:	83 c4 08             	add    esp,0x8
c00130cb:	5b                   	pop    ebx
c00130cc:	c3                   	ret    
c00130cd:	90                   	nop

c00130ce <VCache::writeWriteBuffer()>:
c00130ce:	53                   	push   ebx
c00130cf:	83 ec 14             	sub    esp,0x14
c00130d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00130db:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130e1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130e4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130e7:	50                   	push   eax
c00130e8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130eb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00130f2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00130f9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00130fd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013104:	83 c4 28             	add    esp,0x28
c0013107:	5b                   	pop    ebx
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <VCache::~VCache()>:
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	ba 20 22 02 c0       	mov    edx,0xc0022220
c0013112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013116:	89 10                	mov    DWORD PTR [eax],edx
c0013118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001311f:	84 c0                	test   al,al
c0013121:	74 0f                	je     c0013132 <VCache::~VCache()+0x28>
c0013123:	83 ec 0c             	sub    esp,0xc
c0013126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312a:	e8 9f ff ff ff       	call   c00130ce <VCache::writeWriteBuffer()>
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013136:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013139:	83 ec 0c             	sub    esp,0xc
c001313c:	50                   	push   eax
c001313d:	e8 a1 8e ff ff       	call   c000bfe3 <free>
c0013142:	83 c4 10             	add    esp,0x10
c0013145:	90                   	nop
c0013146:	83 c4 0c             	add    esp,0xc
c0013149:	c3                   	ret    

c001314a <VCache::~VCache()>:
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	83 ec 0c             	sub    esp,0xc
c0013150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013154:	e8 b1 ff ff ff       	call   c001310a <VCache::~VCache()>
c0013159:	83 c4 10             	add    esp,0x10
c001315c:	83 ec 08             	sub    esp,0x8
c001315f:	6a 30                	push   0x30
c0013161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013165:	e8 75 bf ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001316a:	83 c4 10             	add    esp,0x10
c001316d:	83 c4 0c             	add    esp,0xc
c0013170:	c3                   	ret    
c0013171:	90                   	nop

c0013172 <VCache::write(unsigned long long, int, void*)>:
c0013172:	55                   	push   ebp
c0013173:	57                   	push   edi
c0013174:	56                   	push   esi
c0013175:	53                   	push   ebx
c0013176:	83 ec 28             	sub    esp,0x28
c0013179:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001317d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013181:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013185:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0013189:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001318c:	e8 3d 5e 00 00       	call   c0018fce <Semaphore::acquire()>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013198:	74 66                	je     c0013200 <VCache::write(unsigned long long, int, void*)+0x8e>
c001319a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001319d:	99                   	cdq    
c001319e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131a2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131a5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131a8:	89 c1                	mov    ecx,eax
c00131aa:	31 f1                	xor    ecx,esi
c00131ac:	89 d0                	mov    eax,edx
c00131ae:	31 f8                	xor    eax,edi
c00131b0:	89 ca                	mov    edx,ecx
c00131b2:	09 c2                	or     edx,eax
c00131b4:	75 3e                	jne    c00131f4 <VCache::write(unsigned long long, int, void*)+0x82>
c00131b6:	83 fd 01             	cmp    ebp,0x1
c00131b9:	75 39                	jne    c00131f4 <VCache::write(unsigned long long, int, void*)+0x82>
c00131bb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131c4:	51                   	push   ecx
c00131c5:	50                   	push   eax
c00131c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131ce:	0f af c8             	imul   ecx,eax
c00131d1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131d4:	51                   	push   ecx
c00131d5:	e8 a5 d4 fe ff       	call   c000067f <memcpy>
c00131da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	40                   	inc    eax
c00131e1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131e4:	83 f8 40             	cmp    eax,0x40
c00131e7:	75 57                	jne    c0013240 <VCache::write(unsigned long long, int, void*)+0xce>
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	53                   	push   ebx
c00131ed:	e8 dc fe ff ff       	call   c00130ce <VCache::writeWriteBuffer()>
c00131f2:	eb 34                	jmp    c0013228 <VCache::write(unsigned long long, int, void*)+0xb6>
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	53                   	push   ebx
c00131f8:	e8 d1 fe ff ff       	call   c00130ce <VCache::writeWriteBuffer()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013203:	83 fd 3f             	cmp    ebp,0x3f
c0013206:	7f 25                	jg     c001322d <VCache::write(unsigned long long, int, void*)+0xbb>
c0013208:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001320b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001320e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013211:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013215:	52                   	push   edx
c0013216:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001321c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013220:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013223:	e8 57 d4 fe ff       	call   c000067f <memcpy>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	eb 13                	jmp    c0013240 <VCache::write(unsigned long long, int, void*)+0xce>
c001322d:	83 ec 0c             	sub    esp,0xc
c0013230:	8b 10                	mov    edx,DWORD PTR [eax]
c0013232:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013236:	55                   	push   ebp
c0013237:	57                   	push   edi
c0013238:	56                   	push   esi
c0013239:	50                   	push   eax
c001323a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001323d:	83 c4 20             	add    esp,0x20
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013246:	e8 0f 63 00 00       	call   c001955a <Semaphore::release()>
c001324b:	83 c4 2c             	add    esp,0x2c
c001324e:	5b                   	pop    ebx
c001324f:	31 c0                	xor    eax,eax
c0013251:	5e                   	pop    esi
c0013252:	5f                   	pop    edi
c0013253:	5d                   	pop    ebp
c0013254:	c3                   	ret    
c0013255:	90                   	nop

c0013256 <VCache::read(unsigned long long, int, void*)>:
c0013256:	57                   	push   edi
c0013257:	56                   	push   esi
c0013258:	53                   	push   ebx
c0013259:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001325d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013261:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013265:	83 ec 0c             	sub    esp,0xc
c0013268:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001326b:	e8 5e 5d 00 00       	call   c0018fce <Semaphore::acquire()>
c0013270:	83 c4 10             	add    esp,0x10
c0013273:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013277:	74 0c                	je     c0013285 <VCache::read(unsigned long long, int, void*)+0x2f>
c0013279:	83 ec 0c             	sub    esp,0xc
c001327c:	53                   	push   ebx
c001327d:	e8 4c fe ff ff       	call   c00130ce <VCache::writeWriteBuffer()>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	8b 10                	mov    edx,DWORD PTR [eax]
c001328d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013295:	57                   	push   edi
c0013296:	56                   	push   esi
c0013297:	50                   	push   eax
c0013298:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001329b:	83 c4 14             	add    esp,0x14
c001329e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132a1:	e8 b4 62 00 00       	call   c001955a <Semaphore::release()>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	5b                   	pop    ebx
c00132aa:	31 c0                	xor    eax,eax
c00132ac:	5e                   	pop    esi
c00132ad:	5f                   	pop    edi
c00132ae:	c3                   	ret    
c00132af:	90                   	nop

c00132b0 <Video::putrect(int, int, int, int, unsigned int)>:
c00132b0:	55                   	push   ebp
c00132b1:	57                   	push   edi
c00132b2:	56                   	push   esi
c00132b3:	53                   	push   ebx
c00132b4:	83 ec 1c             	sub    esp,0x1c
c00132b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132c3:	01 e8                	add    eax,ebp
c00132c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132d1:	01 df                	add    edi,ebx
c00132d3:	39 fb                	cmp    ebx,edi
c00132d5:	7d 1b                	jge    c00132f2 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132d7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132db:	7d 12                	jge    c00132ef <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132dd:	8b 16                	mov    edx,DWORD PTR [esi]
c00132df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132e3:	53                   	push   ebx
c00132e4:	55                   	push   ebp
c00132e5:	45                   	inc    ebp
c00132e6:	56                   	push   esi
c00132e7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	eb e8                	jmp    c00132d7 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132ef:	43                   	inc    ebx
c00132f0:	eb e1                	jmp    c00132d3 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00132f2:	83 c4 1c             	add    esp,0x1c
c00132f5:	5b                   	pop    ebx
c00132f6:	5e                   	pop    esi
c00132f7:	5f                   	pop    edi
c00132f8:	5d                   	pop    ebp
c00132f9:	c3                   	ret    

c00132fa <Video::blit(unsigned int*, int, int, int, int)>:
c00132fa:	55                   	push   ebp
c00132fb:	57                   	push   edi
c00132fc:	56                   	push   esi
c00132fd:	53                   	push   ebx
c00132fe:	83 ec 1c             	sub    esp,0x1c
c0013301:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013305:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013309:	85 c0                	test   eax,eax
c001330b:	79 02                	jns    c001330f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001330d:	31 c0                	xor    eax,eax
c001330f:	c1 e0 02             	shl    eax,0x2
c0013312:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013316:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001331a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001331e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013322:	39 d8                	cmp    eax,ebx
c0013324:	7e 49                	jle    c001336f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013326:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001332c:	7c 41                	jl     c001336f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001332e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013332:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013336:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001333a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001333e:	39 f9                	cmp    ecx,edi
c0013340:	7e 22                	jle    c0013364 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013342:	83 c5 04             	add    ebp,0x4
c0013345:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001334b:	7c 14                	jl     c0013361 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001334d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001334f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013352:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013356:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001335a:	56                   	push   esi
c001335b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001335e:	83 c4 10             	add    esp,0x10
c0013361:	47                   	inc    edi
c0013362:	eb d2                	jmp    c0013336 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013368:	43                   	inc    ebx
c0013369:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001336d:	eb ab                	jmp    c001331a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001336f:	83 c4 1c             	add    esp,0x1c
c0013372:	5b                   	pop    ebx
c0013373:	5e                   	pop    esi
c0013374:	5f                   	pop    edi
c0013375:	5d                   	pop    ebp
c0013376:	c3                   	ret    
c0013377:	90                   	nop

c0013378 <Video::clearScreen(unsigned int)>:
c0013378:	57                   	push   edi
c0013379:	56                   	push   esi
c001337a:	53                   	push   ebx
c001337b:	31 db                	xor    ebx,ebx
c001337d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013381:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013387:	7e 1f                	jle    c00133a8 <Video::clearScreen(unsigned int)+0x30>
c0013389:	31 ff                	xor    edi,edi
c001338b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013391:	7e 12                	jle    c00133a5 <Video::clearScreen(unsigned int)+0x2d>
c0013393:	8b 06                	mov    eax,DWORD PTR [esi]
c0013395:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013399:	53                   	push   ebx
c001339a:	57                   	push   edi
c001339b:	47                   	inc    edi
c001339c:	56                   	push   esi
c001339d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133a0:	83 c4 10             	add    esp,0x10
c00133a3:	eb e6                	jmp    c001338b <Video::clearScreen(unsigned int)+0x13>
c00133a5:	43                   	inc    ebx
c00133a6:	eb d9                	jmp    c0013381 <Video::clearScreen(unsigned int)+0x9>
c00133a8:	5b                   	pop    ebx
c00133a9:	5e                   	pop    esi
c00133aa:	5f                   	pop    edi
c00133ab:	c3                   	ret    

c00133ac <Video::putpixel(int, int, unsigned int)>:
c00133ac:	c7 44 24 04 28 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022228
c00133b4:	e9 4c be ff ff       	jmp    c000f205 <Dbg::kprintf(char const*, ...)>
c00133b9:	90                   	nop

c00133ba <Video::Video(char const*)>:
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c1:	83 ec 08             	sub    esp,0x8
c00133c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133c8:	50                   	push   eax
c00133c9:	e8 3c d4 ff ff       	call   c001080a <Device::Device(char const*)>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	ba 40 22 02 c0       	mov    edx,0xc0022240
c00133d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133da:	89 10                	mov    DWORD PTR [eax],edx
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133ea:	90                   	nop
c00133eb:	83 c4 0c             	add    esp,0xc
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <Video::~Video()>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	ba 40 22 02 c0       	mov    edx,0xc0022240
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	89 10                	mov    DWORD PTR [eax],edx
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	50                   	push   eax
c0013406:	e8 b5 d0 ff ff       	call   c00104c0 <Device::~Device()>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	90                   	nop
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Video::~Video()>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	83 ec 0c             	sub    esp,0xc
c001341a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001341e:	e8 cd ff ff ff       	call   c00133f0 <Video::~Video()>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	83 ec 08             	sub    esp,0x8
c0013429:	68 64 01 00 00       	push   0x164
c001342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013432:	e8 a8 bc ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	83 c4 0c             	add    esp,0xc
c001343d:	c3                   	ret    

c001343e <Video::isMonochrome()>:
c001343e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013442:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013448:	c3                   	ret    
c0013449:	90                   	nop

c001344a <Video::getWidth()>:
c001344a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <Video::getHeight()>:
c0013456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001345a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013462:	55                   	push   ebp
c0013463:	57                   	push   edi
c0013464:	56                   	push   esi
c0013465:	53                   	push   ebx
c0013466:	83 ec 2c             	sub    esp,0x2c
c0013469:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001346d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013471:	83 f8 01             	cmp    eax,0x1
c0013474:	19 c9                	sbb    ecx,ecx
c0013476:	31 db                	xor    ebx,ebx
c0013478:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001347c:	89 cd                	mov    ebp,ecx
c001347e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013486:	f7 d5                	not    ebp
c0013488:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001348e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013492:	01 d8                	add    eax,ebx
c0013494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013498:	56                   	push   esi
c0013499:	e8 b8 ff ff ff       	call   c0013456 <Video::getHeight()>
c001349e:	59                   	pop    ecx
c001349f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134a3:	7e 70                	jle    c0013515 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134ad:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134b8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c3:	89 f8                	mov    eax,edi
c00134c5:	83 c0 20             	add    eax,0x20
c00134c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134cc:	56                   	push   esi
c00134cd:	e8 78 ff ff ff       	call   c001344a <Video::getWidth()>
c00134d2:	5a                   	pop    edx
c00134d3:	39 c7                	cmp    edi,eax
c00134d5:	7d 34                	jge    c001350b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134d7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134dc:	74 05                	je     c00134e3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134de:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e0:	55                   	push   ebp
c00134e1:	eb 0d                	jmp    c00134f0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134e3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134e8:	74 12                	je     c00134fc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00134ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134f4:	57                   	push   edi
c00134f5:	56                   	push   esi
c00134f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	47                   	inc    edi
c00134fd:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013501:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013505:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013509:	75 c1                	jne    c00134cc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001350b:	43                   	inc    ebx
c001350c:	83 fb 20             	cmp    ebx,0x20
c001350f:	0f 85 79 ff ff ff    	jne    c001348e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013515:	83 c4 2c             	add    esp,0x2c
c0013518:	5b                   	pop    ebx
c0013519:	5e                   	pop    esi
c001351a:	5f                   	pop    edi
c001351b:	5d                   	pop    ebp
c001351c:	c3                   	ret    
c001351d:	90                   	nop

c001351e <ACPI::close(int, int, void*)>:
c001351e:	83 ec 1c             	sub    esp,0x1c
c0013521:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013529:	74 0a                	je     c0013535 <ACPI::close(int, int, void*)+0x17>
c001352b:	b8 00 00 00 00       	mov    eax,0x0
c0013530:	e9 9e 00 00 00       	jmp    c00135d3 <ACPI::close(int, int, void*)+0xb5>
c0013535:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001353a:	75 37                	jne    c0013573 <ACPI::close(int, int, void*)+0x55>
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	68 78 22 02 c0       	push   0xc0022278
c0013544:	e8 bc bc ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	a1 08 4e 02 c0       	mov    eax,ds:0xc0024e08
c0013551:	85 c0                	test   eax,eax
c0013553:	74 07                	je     c001355c <ACPI::close(int, int, void*)+0x3e>
c0013555:	a1 08 4e 02 c0       	mov    eax,ds:0xc0024e08
c001355a:	ff d0                	call   eax
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	68 4c 23 02 c0       	push   0xc002234c
c0013564:	e8 cb 24 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0013569:	83 c4 10             	add    esp,0x10
c001356c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013571:	eb 60                	jmp    c00135d3 <ACPI::close(int, int, void*)+0xb5>
c0013573:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013578:	75 54                	jne    c00135ce <ACPI::close(int, int, void*)+0xb0>
c001357a:	a1 04 4e 02 c0       	mov    eax,ds:0xc0024e04
c001357f:	85 c0                	test   eax,eax
c0013581:	74 07                	je     c001358a <ACPI::close(int, int, void*)+0x6c>
c0013583:	a1 04 4e 02 c0       	mov    eax,ds:0xc0024e04
c0013588:	ff d0                	call   eax
c001358a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001358f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013593:	25 ff 00 00 00       	and    eax,0xff
c0013598:	83 e0 02             	and    eax,0x2
c001359b:	74 1c                	je     c00135b9 <ACPI::close(int, int, void*)+0x9b>
c001359d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a8:	89 c2                	mov    edx,eax
c00135aa:	ec                   	in     al,dx
c00135ab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135af:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135b7:	eb d6                	jmp    c001358f <ACPI::close(int, int, void*)+0x71>
c00135b9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135c0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135c5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135cd:	ee                   	out    dx,al
c00135ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135d3:	83 c4 1c             	add    esp,0x1c
c00135d6:	c3                   	ret    

c00135d7 <findRSDP()>:
c00135d7:	83 ec 1c             	sub    esp,0x1c
c00135da:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c00135df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135e5:	83 e0 04             	and    eax,0x4
c00135e8:	84 c0                	test   al,al
c00135ea:	75 07                	jne    c00135f3 <findRSDP()+0x1c>
c00135ec:	b8 00 00 00 00       	mov    eax,0x0
c00135f1:	eb 6a                	jmp    c001365d <findRSDP()+0x86>
c00135f3:	a1 d0 47 02 c0       	mov    eax,ds:0xc00247d0
c00135f8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00135fd:	7f 1b                	jg     c001361a <findRSDP()+0x43>
c00135ff:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013604:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001360a:	83 e2 fb             	and    edx,0xfffffffb
c001360d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013613:	b8 00 00 00 00       	mov    eax,0x0
c0013618:	eb 43                	jmp    c001365d <findRSDP()+0x86>
c001361a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013622:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001362a:	77 2c                	ja     c0013658 <findRSDP()+0x81>
c001362c:	83 ec 04             	sub    esp,0x4
c001362f:	6a 08                	push   0x8
c0013631:	68 85 22 02 c0       	push   0xc0022285
c0013636:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001363a:	e8 dd cf fe ff       	call   c000061c <memcmp>
c001363f:	83 c4 10             	add    esp,0x10
c0013642:	85 c0                	test   eax,eax
c0013644:	0f 94 c0             	sete   al
c0013647:	84 c0                	test   al,al
c0013649:	74 06                	je     c0013651 <findRSDP()+0x7a>
c001364b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001364f:	eb 0c                	jmp    c001365d <findRSDP()+0x86>
c0013651:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013656:	eb ca                	jmp    c0013622 <findRSDP()+0x4b>
c0013658:	b8 00 00 00 00       	mov    eax,0x0
c001365d:	83 c4 1c             	add    esp,0x1c
c0013660:	c3                   	ret    

c0013661 <loadACPITables(unsigned char*)>:
c0013661:	56                   	push   esi
c0013662:	53                   	push   ebx
c0013663:	83 ec 44             	sub    esp,0x44
c0013666:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001366b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013671:	83 e0 04             	and    eax,0x4
c0013674:	84 c0                	test   al,al
c0013676:	0f 84 05 02 00 00    	je     c0013881 <loadACPITables(unsigned char*)+0x220>
c001367c:	a0 20 50 02 c0       	mov    al,ds:0xc0025020
c0013681:	84 c0                	test   al,al
c0013683:	74 75                	je     c00136fa <loadACPITables(unsigned char*)+0x99>
c0013685:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013689:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001368d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013691:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013694:	83 e8 24             	sub    eax,0x24
c0013697:	c1 e8 03             	shr    eax,0x3
c001369a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001369e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136aa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136ae:	0f 8d b2 00 00 00    	jge    c0013766 <loadACPITables(unsigned char*)+0x105>
c00136b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136b8:	83 c0 24             	add    eax,0x24
c00136bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136cb:	c1 e0 03             	shl    eax,0x3
c00136ce:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00136db:	89 c1                	mov    ecx,eax
c00136dd:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c00136e2:	8d 50 01             	lea    edx,[eax+0x1]
c00136e5:	89 15 0c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e0c,edx
c00136eb:	89 ca                	mov    edx,ecx
c00136ed:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c00136f4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00136f8:	eb ac                	jmp    c00136a6 <loadACPITables(unsigned char*)+0x45>
c00136fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013709:	83 e8 24             	sub    eax,0x24
c001370c:	c1 e8 02             	shr    eax,0x2
c001370f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013713:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001371b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001371f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013723:	7d 41                	jge    c0013766 <loadACPITables(unsigned char*)+0x105>
c0013725:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013729:	83 c0 24             	add    eax,0x24
c001372c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013730:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013734:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013738:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001373c:	c1 e0 02             	shl    eax,0x2
c001373f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013747:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013749:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c001374e:	8d 50 01             	lea    edx,[eax+0x1]
c0013751:	89 15 0c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e0c,edx
c0013757:	89 ca                	mov    edx,ecx
c0013759:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c0013760:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013764:	eb b5                	jmp    c001371b <loadACPITables(unsigned char*)+0xba>
c0013766:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001376e:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c0013773:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013777:	0f 8d 05 01 00 00    	jge    c0013882 <loadACPITables(unsigned char*)+0x221>
c001377d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013781:	8b 04 c5 24 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1dc]
c0013788:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001378c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013798:	25 ff 0f 00 00       	and    eax,0xfff
c001379d:	89 c6                	mov    esi,eax
c001379f:	e8 d3 ab ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c00137a4:	89 c3                	mov    ebx,eax
c00137a6:	83 ec 0c             	sub    esp,0xc
c00137a9:	6a 01                	push   0x1
c00137ab:	e8 3a aa ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137b7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137bd:	83 ec 0c             	sub    esp,0xc
c00137c0:	6a 01                	push   0x1
c00137c2:	6a 01                	push   0x1
c00137c4:	50                   	push   eax
c00137c5:	52                   	push   edx
c00137c6:	53                   	push   ebx
c00137c7:	e8 dc b3 ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137cc:	83 c4 20             	add    esp,0x20
c00137cf:	09 f0                	or     eax,esi
c00137d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137d9:	c1 e0 03             	shl    eax,0x3
c00137dc:	05 20 4e 02 c0       	add    eax,0xc0024e20
c00137e1:	83 ec 04             	sub    esp,0x4
c00137e4:	6a 04                	push   0x4
c00137e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ea:	50                   	push   eax
c00137eb:	e8 8f ce fe ff       	call   c000067f <memcpy>
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013802:	05 00 10 00 00       	add    eax,0x1000
c0013807:	c1 e8 0c             	shr    eax,0xc
c001380a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001380e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013812:	89 04 24             	mov    DWORD PTR [esp],eax
c0013815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013819:	25 ff 0f 00 00       	and    eax,0xfff
c001381e:	89 c6                	mov    esi,eax
c0013820:	e8 52 ab ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c0013825:	89 c3                	mov    ebx,eax
c0013827:	83 ec 0c             	sub    esp,0xc
c001382a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001382e:	e8 b7 a9 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001383a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013840:	83 ec 0c             	sub    esp,0xc
c0013843:	6a 01                	push   0x1
c0013845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013849:	50                   	push   eax
c001384a:	52                   	push   edx
c001384b:	53                   	push   ebx
c001384c:	e8 57 b3 ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013851:	83 c4 20             	add    esp,0x20
c0013854:	09 f0                	or     eax,esi
c0013856:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001385a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001385d:	83 ec 0c             	sub    esp,0xc
c0013860:	50                   	push   eax
c0013861:	e8 d1 ac ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001386d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013871:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c0013878:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001387c:	e9 ed fe ff ff       	jmp    c001376e <loadACPITables(unsigned char*)+0x10d>
c0013881:	90                   	nop
c0013882:	83 c4 44             	add    esp,0x44
c0013885:	5b                   	pop    ebx
c0013886:	5e                   	pop    esi
c0013887:	c3                   	ret    

c0013888 <findRSDT(unsigned char*)>:
c0013888:	56                   	push   esi
c0013889:	53                   	push   ebx
c001388a:	83 ec 44             	sub    esp,0x44
c001388d:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013892:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013898:	83 e0 04             	and    eax,0x4
c001389b:	84 c0                	test   al,al
c001389d:	75 0a                	jne    c00138a9 <findRSDT(unsigned char*)+0x21>
c001389f:	b8 00 00 00 00       	mov    eax,0x0
c00138a4:	e9 f7 00 00 00       	jmp    c00139a0 <findRSDT(unsigned char*)+0x118>
c00138a9:	83 ec 04             	sub    esp,0x4
c00138ac:	6a 24                	push   0x24
c00138ae:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138b6:	50                   	push   eax
c00138b7:	e8 c3 cd fe ff       	call   c000067f <memcpy>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138c3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138c7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138e7:	25 ff 0f 00 00       	and    eax,0xfff
c00138ec:	89 c6                	mov    esi,eax
c00138ee:	e8 84 aa ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c00138f3:	89 c3                	mov    ebx,eax
c00138f5:	83 ec 0c             	sub    esp,0xc
c00138f8:	6a 02                	push   0x2
c00138fa:	e8 eb a8 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c00138ff:	83 c4 10             	add    esp,0x10
c0013902:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013906:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001390c:	83 ec 0c             	sub    esp,0xc
c001390f:	6a 01                	push   0x1
c0013911:	6a 02                	push   0x2
c0013913:	50                   	push   eax
c0013914:	52                   	push   edx
c0013915:	53                   	push   ebx
c0013916:	e8 8d b2 ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001391b:	83 c4 20             	add    esp,0x20
c001391e:	09 f0                	or     eax,esi
c0013920:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013928:	25 ff 0f 00 00       	and    eax,0xfff
c001392d:	89 c6                	mov    esi,eax
c001392f:	e8 43 aa ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c0013934:	89 c3                	mov    ebx,eax
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	6a 02                	push   0x2
c001393b:	e8 aa a8 ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c0013940:	83 c4 10             	add    esp,0x10
c0013943:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013947:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001394d:	83 ec 0c             	sub    esp,0xc
c0013950:	6a 01                	push   0x1
c0013952:	6a 02                	push   0x2
c0013954:	50                   	push   eax
c0013955:	52                   	push   edx
c0013956:	53                   	push   ebx
c0013957:	e8 4c b2 ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001395c:	83 c4 20             	add    esp,0x20
c001395f:	09 f0                	or     eax,esi
c0013961:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013965:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001396a:	75 11                	jne    c001397d <findRSDT(unsigned char*)+0xf5>
c001396c:	c6 05 20 50 02 c0 00 	mov    BYTE PTR ds:0xc0025020,0x0
c0013973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013977:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001397b:	eb 1f                	jmp    c001399c <findRSDT(unsigned char*)+0x114>
c001397d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013982:	75 11                	jne    c0013995 <findRSDT(unsigned char*)+0x10d>
c0013984:	c6 05 20 50 02 c0 01 	mov    BYTE PTR ds:0xc0025020,0x1
c001398b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001398f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013993:	eb 07                	jmp    c001399c <findRSDT(unsigned char*)+0x114>
c0013995:	b8 00 00 00 00       	mov    eax,0x0
c001399a:	eb 04                	jmp    c00139a0 <findRSDT(unsigned char*)+0x118>
c001399c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139a0:	83 c4 44             	add    esp,0x44
c00139a3:	5b                   	pop    ebx
c00139a4:	5e                   	pop    esi
c00139a5:	c3                   	ret    

c00139a6 <findDataTable(unsigned char*, char*)>:
c00139a6:	83 ec 1c             	sub    esp,0x1c
c00139a9:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c00139ae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139b4:	83 e0 04             	and    eax,0x4
c00139b7:	84 c0                	test   al,al
c00139b9:	75 07                	jne    c00139c2 <findDataTable(unsigned char*, char*)+0x1c>
c00139bb:	b8 00 00 00 00       	mov    eax,0x0
c00139c0:	eb 7c                	jmp    c0013a3e <findDataTable(unsigned char*, char*)+0x98>
c00139c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139ca:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c00139cf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139d3:	7d 3a                	jge    c0013a0f <findDataTable(unsigned char*, char*)+0x69>
c00139d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139d9:	c1 e0 03             	shl    eax,0x3
c00139dc:	05 20 4e 02 c0       	add    eax,0xc0024e20
c00139e1:	83 ec 04             	sub    esp,0x4
c00139e4:	6a 04                	push   0x4
c00139e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ea:	50                   	push   eax
c00139eb:	e8 2c cc fe ff       	call   c000061c <memcmp>
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	85 c0                	test   eax,eax
c00139f5:	0f 94 c0             	sete   al
c00139f8:	84 c0                	test   al,al
c00139fa:	74 0d                	je     c0013a09 <findDataTable(unsigned char*, char*)+0x63>
c00139fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a00:	8b 04 c5 24 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1dc]
c0013a07:	eb 35                	jmp    c0013a3e <findDataTable(unsigned char*, char*)+0x98>
c0013a09:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a0d:	eb bb                	jmp    c00139ca <findDataTable(unsigned char*, char*)+0x24>
c0013a0f:	a0 20 50 02 c0       	mov    al,ds:0xc0025020
c0013a14:	84 c0                	test   al,al
c0013a16:	74 07                	je     c0013a1f <findDataTable(unsigned char*, char*)+0x79>
c0013a18:	b8 58 00 00 00       	mov    eax,0x58
c0013a1d:	eb 05                	jmp    c0013a24 <findDataTable(unsigned char*, char*)+0x7e>
c0013a1f:	b8 52 00 00 00       	mov    eax,0x52
c0013a24:	83 ec 04             	sub    esp,0x4
c0013a27:	50                   	push   eax
c0013a28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a2c:	68 70 23 02 c0       	push   0xc0022370
c0013a31:	e8 cf b7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	b8 00 00 00 00       	mov    eax,0x0
c0013a3e:	83 c4 1c             	add    esp,0x1c
c0013a41:	c3                   	ret    

c0013a42 <scanMADT()>:
c0013a42:	83 ec 2c             	sub    esp,0x2c
c0013a45:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013a4a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a50:	83 e0 04             	and    eax,0x4
c0013a53:	84 c0                	test   al,al
c0013a55:	0f 84 9a 03 00 00    	je     c0013df5 <scanMADT()+0x3b3>
c0013a5b:	e8 77 fb ff ff       	call   c00135d7 <findRSDP()>
c0013a60:	a3 2c 50 02 c0       	mov    ds:0xc002502c,eax
c0013a65:	a1 2c 50 02 c0       	mov    eax,ds:0xc002502c
c0013a6a:	85 c0                	test   eax,eax
c0013a6c:	75 19                	jne    c0013a87 <scanMADT()+0x45>
c0013a6e:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013a73:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a79:	83 e2 fb             	and    edx,0xfffffffb
c0013a7c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a82:	e9 72 03 00 00       	jmp    c0013df9 <scanMADT()+0x3b7>
c0013a87:	a1 2c 50 02 c0       	mov    eax,ds:0xc002502c
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	50                   	push   eax
c0013a90:	e8 f3 fd ff ff       	call   c0013888 <findRSDT(unsigned char*)>
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	a3 28 50 02 c0       	mov    ds:0xc0025028,eax
c0013a9d:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013aa2:	85 c0                	test   eax,eax
c0013aa4:	75 19                	jne    c0013abf <scanMADT()+0x7d>
c0013aa6:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013aab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013ab1:	83 e2 fb             	and    edx,0xfffffffb
c0013ab4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013aba:	e9 3a 03 00 00       	jmp    c0013df9 <scanMADT()+0x3b7>
c0013abf:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	50                   	push   eax
c0013ac8:	e8 94 fb ff ff       	call   c0013661 <loadACPITables(unsigned char*)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013ad5:	83 ec 08             	sub    esp,0x8
c0013ad8:	68 8e 22 02 c0       	push   0xc002228e
c0013add:	50                   	push   eax
c0013ade:	e8 c3 fe ff ff       	call   c00139a6 <findDataTable(unsigned char*, char*)>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013aea:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013aef:	75 19                	jne    c0013b0a <scanMADT()+0xc8>
c0013af1:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013af6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013afc:	83 e2 fe             	and    edx,0xfffffffe
c0013aff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b05:	e9 ef 02 00 00       	jmp    c0013df9 <scanMADT()+0x3b7>
c0013b0a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b19:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b1d:	0f 87 d6 02 00 00    	ja     c0013df9 <scanMADT()+0x3b7>
c0013b23:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b2b:	0f 87 c8 02 00 00    	ja     c0013df9 <scanMADT()+0x3b7>
c0013b31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b3d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b4c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b54:	8d 50 01             	lea    edx,[eax+0x1]
c0013b57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b5f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b63:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b67:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b6c:	0f 86 86 02 00 00    	jbe    c0013df8 <scanMADT()+0x3b6>
c0013b72:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b77:	75 5b                	jne    c0013bd4 <scanMADT()+0x192>
c0013b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b84:	8a 15 60 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025160
c0013b8a:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b94:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b98:	88 82 a0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae60],al
c0013b9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ba2:	8d 42 01             	lea    eax,[edx+0x1]
c0013ba5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ba9:	a0 60 51 02 c0       	mov    al,ds:0xc0025160
c0013bae:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bb1:	88 0d 60 51 02 c0    	mov    BYTE PTR ds:0xc0025160,cl
c0013bb7:	25 ff 00 00 00       	and    eax,0xff
c0013bbc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bc0:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bc4:	88 90 80 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae80],dl
c0013bca:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bcf:	e9 0a 02 00 00       	jmp    c0013dde <scanMADT()+0x39c>
c0013bd4:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bd9:	0f 85 29 01 00 00    	jne    c0013d08 <scanMADT()+0x2c6>
c0013bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be3:	8d 50 01             	lea    edx,[eax+0x1]
c0013be6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bea:	8a 15 30 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025030
c0013bf0:	81 e2 ff 00 00 00    	and    edx,0xff
c0013bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bfa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013bfe:	88 82 40 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafc0],al
c0013c04:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c10:	01 d0                	add    eax,edx
c0013c12:	83 c0 2c             	add    eax,0x2c
c0013c15:	8a 00                	mov    al,BYTE PTR [eax]
c0013c17:	31 d2                	xor    edx,edx
c0013c19:	88 c2                	mov    dl,al
c0013c1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c1f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c26:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c2a:	25 ff 00 00 00       	and    eax,0xff
c0013c2f:	c1 e0 08             	shl    eax,0x8
c0013c32:	89 d1                	mov    ecx,edx
c0013c34:	09 c1                	or     ecx,eax
c0013c36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3a:	8d 50 02             	lea    edx,[eax+0x2]
c0013c3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c41:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c45:	25 ff 00 00 00       	and    eax,0xff
c0013c4a:	c1 e0 10             	shl    eax,0x10
c0013c4d:	09 c1                	or     ecx,eax
c0013c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c53:	8d 50 03             	lea    edx,[eax+0x3]
c0013c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c5e:	25 ff 00 00 00       	and    eax,0xff
c0013c63:	c1 e0 18             	shl    eax,0x18
c0013c66:	09 c1                	or     ecx,eax
c0013c68:	89 ca                	mov    edx,ecx
c0013c6a:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013c6f:	25 ff 00 00 00       	and    eax,0xff
c0013c74:	89 14 85 60 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafa0],edx
c0013c7b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c88:	01 d0                	add    eax,edx
c0013c8a:	83 c0 2c             	add    eax,0x2c
c0013c8d:	8a 00                	mov    al,BYTE PTR [eax]
c0013c8f:	31 d2                	xor    edx,edx
c0013c91:	88 c2                	mov    dl,al
c0013c93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c97:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c9e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013ca2:	25 ff 00 00 00       	and    eax,0xff
c0013ca7:	c1 e0 08             	shl    eax,0x8
c0013caa:	89 d1                	mov    ecx,edx
c0013cac:	09 c1                	or     ecx,eax
c0013cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb2:	8d 50 02             	lea    edx,[eax+0x2]
c0013cb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cbd:	25 ff 00 00 00       	and    eax,0xff
c0013cc2:	c1 e0 10             	shl    eax,0x10
c0013cc5:	09 c1                	or     ecx,eax
c0013cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ccb:	8d 50 03             	lea    edx,[eax+0x3]
c0013cce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cd6:	25 ff 00 00 00       	and    eax,0xff
c0013cdb:	c1 e0 18             	shl    eax,0x18
c0013cde:	09 c1                	or     ecx,eax
c0013ce0:	89 ca                	mov    edx,ecx
c0013ce2:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013ce7:	25 ff 00 00 00       	and    eax,0xff
c0013cec:	89 14 85 e0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf20],edx
c0013cf3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cf8:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013cfd:	40                   	inc    eax
c0013cfe:	a2 30 50 02 c0       	mov    ds:0xc0025030,al
c0013d03:	e9 d6 00 00 00       	jmp    c0013dde <scanMADT()+0x39c>
c0013d08:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d0d:	0f 85 b1 00 00 00    	jne    c0013dc4 <scanMADT()+0x382>
c0013d13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d17:	8d 50 01             	lea    edx,[eax+0x1]
c0013d1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d22:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d26:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d2e:	8d 50 01             	lea    edx,[eax+0x1]
c0013d31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d39:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d3d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d49:	01 d0                	add    eax,edx
c0013d4b:	83 c0 2c             	add    eax,0x2c
c0013d4e:	8a 00                	mov    al,BYTE PTR [eax]
c0013d50:	31 d2                	xor    edx,edx
c0013d52:	88 c2                	mov    dl,al
c0013d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d58:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d5f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d63:	25 ff 00 00 00       	and    eax,0xff
c0013d68:	c1 e0 08             	shl    eax,0x8
c0013d6b:	89 d1                	mov    ecx,edx
c0013d6d:	09 c1                	or     ecx,eax
c0013d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d73:	8d 50 02             	lea    edx,[eax+0x2]
c0013d76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d7a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d7e:	25 ff 00 00 00       	and    eax,0xff
c0013d83:	c1 e0 10             	shl    eax,0x10
c0013d86:	09 c1                	or     ecx,eax
c0013d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d8c:	8d 50 03             	lea    edx,[eax+0x3]
c0013d8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d93:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d97:	25 ff 00 00 00       	and    eax,0xff
c0013d9c:	c1 e0 18             	shl    eax,0x18
c0013d9f:	09 c8                	or     eax,ecx
c0013da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013da5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013daa:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013daf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013db3:	25 ff 00 00 00       	and    eax,0xff
c0013db8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dbc:	88 90 e0 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc120],dl
c0013dc2:	eb 1a                	jmp    c0013dde <scanMADT()+0x39c>
c0013dc4:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dc9:	75 07                	jne    c0013dd2 <scanMADT()+0x390>
c0013dcb:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dd0:	eb 0c                	jmp    c0013dde <scanMADT()+0x39c>
c0013dd2:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013dd7:	75 05                	jne    c0013dde <scanMADT()+0x39c>
c0013dd9:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dde:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013de2:	31 d2                	xor    edx,edx
c0013de4:	88 c2                	mov    dl,al
c0013de6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dea:	01 d0                	add    eax,edx
c0013dec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013df0:	e9 1d fd ff ff       	jmp    c0013b12 <scanMADT()+0xd0>
c0013df5:	90                   	nop
c0013df6:	eb 01                	jmp    c0013df9 <scanMADT()+0x3b7>
c0013df8:	90                   	nop
c0013df9:	83 c4 2c             	add    esp,0x2c
c0013dfc:	c3                   	ret    
c0013dfd:	90                   	nop

c0013dfe <ACPI::ACPI()>:
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e05:	83 ec 08             	sub    esp,0x8
c0013e08:	68 93 22 02 c0       	push   0xc0022293
c0013e0d:	50                   	push   eax
c0013e0e:	e8 f7 c9 ff ff       	call   c001080a <Device::Device(char const*)>
c0013e13:	83 c4 10             	add    esp,0x10
c0013e16:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c0013e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1f:	89 10                	mov    DWORD PTR [eax],edx
c0013e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e25:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e30:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e53:	e8 ea fb ff ff       	call   c0013a42 <scanMADT()>
c0013e58:	90                   	nop
c0013e59:	83 c4 0c             	add    esp,0xc
c0013e5c:	c3                   	ret    
c0013e5d:	90                   	nop

c0013e5e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e5e:	83 ec 2c             	sub    esp,0x2c
c0013e61:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e69:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e6d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e71:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e76:	88 d0                	mov    al,dl
c0013e78:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e81:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e8d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e93:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013e97:	0f 8d 97 00 00 00    	jge    c0013f34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013e9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ea1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ea5:	83 c2 2a             	add    edx,0x2a
c0013ea8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eac:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013eb1:	75 78                	jne    c0013f2b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013eb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ebb:	83 c2 2a             	add    edx,0x2a
c0013ebe:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ec2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ec6:	75 63                	jne    c0013f2b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ec8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ecd:	74 3a                	je     c0013f09 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ecf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ed3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed7:	83 c2 2a             	add    edx,0x2a
c0013eda:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013ede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ee5:	39 c2                	cmp    edx,eax
c0013ee7:	74 10                	je     c0013ef9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013ee9:	83 ec 0c             	sub    esp,0xc
c0013eec:	68 a0 23 02 c0       	push   0xc00223a0
c0013ef1:	e8 3e 1b 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0013ef6:	83 c4 10             	add    esp,0x10
c0013ef9:	83 ec 0c             	sub    esp,0xc
c0013efc:	68 98 22 02 c0       	push   0xc0022298
c0013f01:	e8 2e 1b 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f15:	83 c2 2a             	add    edx,0x2a
c0013f18:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f1c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f1e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f21:	89 01                	mov    DWORD PTR [ecx],eax
c0013f23:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f26:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f2b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f2f:	e9 55 ff ff ff       	jmp    c0013e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f34:	90                   	nop
c0013f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f39:	83 c4 2c             	add    esp,0x2c
c0013f3c:	c2 04 00             	ret    0x4
c0013f3f:	90                   	nop

c0013f40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	83 ec 14             	sub    esp,0x14
c0013f45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f56:	88 c8                	mov    al,cl
c0013f58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f5c:	88 d0                	mov    al,dl
c0013f5e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f66:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f76:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f7a:	31 c9                	xor    ecx,ecx
c0013f7c:	88 c1                	mov    cl,al
c0013f7e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f82:	31 d2                	xor    edx,edx
c0013f84:	88 c2                	mov    dl,al
c0013f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f8a:	25 ff ff 00 00       	and    eax,0xffff
c0013f8f:	83 ec 04             	sub    esp,0x4
c0013f92:	56                   	push   esi
c0013f93:	53                   	push   ebx
c0013f94:	51                   	push   ecx
c0013f95:	52                   	push   edx
c0013f96:	50                   	push   eax
c0013f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f9b:	68 d0 23 02 c0       	push   0xc00223d0
c0013fa0:	e8 60 b2 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0013fa5:	83 c4 20             	add    esp,0x20
c0013fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fac:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fb9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fbd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fcf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fd6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdf:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fe5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013fe9:	8d 48 01             	lea    ecx,[eax+0x1]
c0013fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff0:	83 c2 2a             	add    edx,0x2a
c0013ff3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014005:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014008:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001400c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0014010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014014:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001401a:	8d 50 01             	lea    edx,[eax+0x1]
c001401d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014021:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014031:	3d 00 08 00 00       	cmp    eax,0x800
c0014036:	75 10                	jne    c0014048 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	68 a7 22 02 c0       	push   0xc00222a7
c0014040:	e8 ef 19 00 00       	call   c0015a34 <Krnl::panic(char const*)>
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	90                   	nop
c0014049:	83 c4 14             	add    esp,0x14
c001404c:	5b                   	pop    ebx
c001404d:	5e                   	pop    esi
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0014050:	b8 00 00 00 00       	mov    eax,0x0
c0014055:	c3                   	ret    

c0014056 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014056:	83 ec 1c             	sub    esp,0x1c
c0014059:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001405d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0014060:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014064:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001406a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001406e:	25 ff 00 00 00       	and    eax,0xff
c0014073:	83 ec 08             	sub    esp,0x8
c0014076:	50                   	push   eax
c0014077:	52                   	push   edx
c0014078:	e8 63 75 ff ff       	call   c000b5e0 <Computer::readCMOS(unsigned char)>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0014084:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001408a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001408e:	25 ff 00 00 00       	and    eax,0xff
c0014093:	83 ec 04             	sub    esp,0x4
c0014096:	6a 01                	push   0x1
c0014098:	50                   	push   eax
c0014099:	52                   	push   edx
c001409a:	e8 59 76 ff ff       	call   c000b6f8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	90                   	nop
c00140a3:	83 c4 1c             	add    esp,0x1c
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <ACPI::open(int, int, void*)>:
c00140a8:	53                   	push   ebx
c00140a9:	83 ec 18             	sub    esp,0x18
c00140ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b0:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140bb:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140c1:	84 c0                	test   al,al
c00140c3:	74 60                	je     c0014125 <ACPI::open(int, int, void*)+0x7d>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	68 58 01 00 00       	push   0x158
c00140cd:	e8 fe af ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	89 c3                	mov    ebx,eax
c00140d7:	83 ec 0c             	sub    esp,0xc
c00140da:	53                   	push   ebx
c00140db:	e8 a8 80 00 00       	call   c001c188 <PCI::PCI()>
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140eb:	83 ec 08             	sub    esp,0x8
c00140ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140f2:	50                   	push   eax
c00140f3:	e8 22 c5 ff ff       	call   c001061a <Device::addChild(Device*)>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00140ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014101:	83 c0 08             	add    eax,0x8
c0014104:	8b 00                	mov    eax,DWORD PTR [eax]
c0014106:	6a 00                	push   0x0
c0014108:	6a 00                	push   0x0
c001410a:	6a 00                	push   0x0
c001410c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014110:	ff d0                	call   eax
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	83 ec 0c             	sub    esp,0xc
c0014118:	68 c4 22 02 c0       	push   0xc00222c4
c001411d:	e8 e3 b0 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	83 ec 0c             	sub    esp,0xc
c0014128:	68 cf 22 02 c0       	push   0xc00222cf
c001412d:	e8 43 38 00 00       	call   c0017975 <Thr::loadKernelSymbolTable(char const*)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c001413b:	83 ec 08             	sub    esp,0x8
c001413e:	6a 01                	push   0x1
c0014140:	68 ed 22 02 c0       	push   0xc00222ed
c0014145:	e8 0d 43 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c001414a:	83 c4 10             	add    esp,0x10
c001414d:	83 ec 08             	sub    esp,0x8
c0014150:	53                   	push   ebx
c0014151:	50                   	push   eax
c0014152:	e8 c6 44 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0014160:	83 ec 08             	sub    esp,0x8
c0014163:	6a 01                	push   0x1
c0014165:	68 0a 23 02 c0       	push   0xc002230a
c001416a:	e8 e8 42 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	83 ec 08             	sub    esp,0x8
c0014175:	53                   	push   ebx
c0014176:	50                   	push   eax
c0014177:	e8 a1 44 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0014184:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001418a:	83 e0 04             	and    eax,0x4
c001418d:	84 c0                	test   al,al
c001418f:	0f 84 cf 00 00 00    	je     c0014264 <ACPI::open(int, int, void*)+0x1bc>
c0014195:	83 ec 0c             	sub    esp,0xc
c0014198:	68 14 01 00 00       	push   0x114
c001419d:	e8 2e af ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00141a2:	83 c4 10             	add    esp,0x10
c00141a5:	89 c3                	mov    ebx,eax
c00141a7:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00141ac:	83 ec 04             	sub    esp,0x4
c00141af:	50                   	push   eax
c00141b0:	68 27 23 02 c0       	push   0xc0022327
c00141b5:	53                   	push   ebx
c00141b6:	e8 81 b5 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c00141bb:	83 c4 10             	add    esp,0x10
c00141be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141c7:	74 17                	je     c00141e0 <ACPI::open(int, int, void*)+0x138>
c00141c9:	83 ec 0c             	sub    esp,0xc
c00141cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141d0:	e8 39 b8 ff ff       	call   c000fa0e <File::exists()>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	84 c0                	test   al,al
c00141da:	74 04                	je     c00141e0 <ACPI::open(int, int, void*)+0x138>
c00141dc:	b0 01                	mov    al,0x1
c00141de:	eb 02                	jmp    c00141e2 <ACPI::open(int, int, void*)+0x13a>
c00141e0:	b0 00                	mov    al,0x0
c00141e2:	84 c0                	test   al,al
c00141e4:	74 25                	je     c001420b <ACPI::open(int, int, void*)+0x163>
c00141e6:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c00141ec:	83 ec 08             	sub    esp,0x8
c00141ef:	6a 01                	push   0x1
c00141f1:	68 27 23 02 c0       	push   0xc0022327
c00141f6:	e8 5c 42 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c00141fb:	83 c4 10             	add    esp,0x10
c00141fe:	83 ec 08             	sub    esp,0x8
c0014201:	53                   	push   ebx
c0014202:	50                   	push   eax
c0014203:	e8 15 44 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014210:	74 1e                	je     c0014230 <ACPI::open(int, int, void*)+0x188>
c0014212:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014217:	74 17                	je     c0014230 <ACPI::open(int, int, void*)+0x188>
c0014219:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001421d:	8b 00                	mov    eax,DWORD PTR [eax]
c001421f:	83 c0 08             	add    eax,0x8
c0014222:	8b 00                	mov    eax,DWORD PTR [eax]
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001422b:	ff d0                	call   eax
c001422d:	83 c4 10             	add    esp,0x10
c0014230:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0014235:	83 ec 08             	sub    esp,0x8
c0014238:	68 44 23 02 c0       	push   0xc0022344
c001423d:	50                   	push   eax
c001423e:	e8 63 f7 ff ff       	call   c00139a6 <findDataTable(unsigned char*, char*)>
c0014243:	83 c4 10             	add    esp,0x10
c0014246:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001424a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001424f:	74 13                	je     c0014264 <ACPI::open(int, int, void*)+0x1bc>
c0014251:	83 ec 08             	sub    esp,0x8
c0014254:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014258:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001425c:	e8 f5 fd ff ff       	call   c0014056 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	b8 00 00 00 00       	mov    eax,0x0
c0014269:	83 c4 18             	add    esp,0x18
c001426c:	5b                   	pop    ebx
c001426d:	c3                   	ret    

c001426e <ACPI::sleep()>:
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c0014276:	85 c0                	test   eax,eax
c0014278:	74 07                	je     c0014281 <ACPI::sleep()+0x13>
c001427a:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c001427f:	ff d0                	call   eax
c0014281:	90                   	nop
c0014282:	83 c4 0c             	add    esp,0xc
c0014285:	c3                   	ret    

c0014286 <CPU::close(int, int, void*)>:
c0014286:	31 c0                	xor    eax,eax
c0014288:	c3                   	ret    

c0014289 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014289:	55                   	push   ebp
c001428a:	57                   	push   edi
c001428b:	56                   	push   esi
c001428c:	53                   	push   ebx
c001428d:	51                   	push   ecx
c001428e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014292:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014296:	89 d6                	mov    esi,edx
c0014298:	89 cd                	mov    ebp,ecx
c001429a:	80 fa 04             	cmp    dl,0x4
c001429d:	75 28                	jne    c00142c7 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c001429f:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142a2:	3c 03                	cmp    al,0x3
c00142a4:	0f 86 64 01 00 00    	jbe    c001440e <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142aa:	80 f9 03             	cmp    cl,0x3
c00142ad:	0f 84 5b 01 00 00    	je     c001440e <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142b3:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142b6:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00142bb:	89 fb                	mov    ebx,edi
c00142bd:	80 fb 01             	cmp    bl,0x1
c00142c0:	77 4e                	ja     c0014310 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142c2:	e9 61 01 00 00       	jmp    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142c7:	80 fa 05             	cmp    dl,0x5
c00142ca:	75 4d                	jne    c0014319 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142cc:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c00142d1:	80 f9 03             	cmp    cl,0x3
c00142d4:	0f 86 4e 01 00 00    	jbe    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142da:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142dd:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142e2:	89 fb                	mov    ebx,edi
c00142e4:	80 fb 01             	cmp    bl,0x1
c00142e7:	0f 86 3b 01 00 00    	jbe    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ed:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142f2:	80 f9 08             	cmp    cl,0x8
c00142f5:	0f 84 2d 01 00 00    	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142fb:	89 cf                	mov    edi,ecx
c00142fd:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c0014302:	83 e7 fb             	and    edi,0xfffffffb
c0014305:	89 fb                	mov    ebx,edi
c0014307:	80 fb 09             	cmp    bl,0x9
c001430a:	0f 84 18 01 00 00    	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014310:	31 c0                	xor    eax,eax
c0014312:	89 eb                	mov    ebx,ebp
c0014314:	0f b6 fb             	movzx  edi,bl
c0014317:	eb 30                	jmp    c0014349 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014319:	31 c0                	xor    eax,eax
c001431b:	80 fa 06             	cmp    dl,0x6
c001431e:	75 f2                	jne    c0014312 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014320:	80 f9 0a             	cmp    cl,0xa
c0014323:	77 ed                	ja     c0014312 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014325:	bf de 05 00 00       	mov    edi,0x5de
c001432a:	0f a3 cf             	bt     edi,ecx
c001432d:	73 e3                	jae    c0014312 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001432f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014334:	e9 ef 00 00 00       	jmp    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014339:	39 c7                	cmp    edi,eax
c001433b:	0f 84 d4 00 00 00    	je     c0014415 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014341:	40                   	inc    eax
c0014342:	3d d0 00 00 00       	cmp    eax,0xd0
c0014347:	74 09                	je     c0014352 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014349:	89 f3                	mov    ebx,esi
c001434b:	80 fb 0f             	cmp    bl,0xf
c001434e:	75 f1                	jne    c0014341 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014350:	eb e7                	jmp    c0014339 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014352:	80 fa 10             	cmp    dl,0x10
c0014355:	75 19                	jne    c0014370 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014357:	8d 41 fc             	lea    eax,[ecx-0x4]
c001435a:	83 e0 fb             	and    eax,0xfffffffb
c001435d:	3c 02                	cmp    al,0x2
c001435f:	0f 86 b7 00 00 00    	jbe    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014365:	80 f9 02             	cmp    cl,0x2
c0014368:	0f 84 ae 00 00 00    	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001436e:	eb 13                	jmp    c0014383 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014370:	80 fa 11             	cmp    dl,0x11
c0014373:	75 0e                	jne    c0014383 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014375:	b8 10 41 02 c0       	mov    eax,0xc0024110
c001437a:	80 f9 03             	cmp    cl,0x3
c001437d:	0f 84 a5 00 00 00    	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014383:	80 fa 12             	cmp    dl,0x12
c0014386:	75 0e                	jne    c0014396 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014388:	b8 20 41 02 c0       	mov    eax,0xc0024120
c001438d:	80 f9 01             	cmp    cl,0x1
c0014390:	0f 84 92 00 00 00    	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014396:	80 fa 14             	cmp    dl,0x14
c0014399:	be 01 00 00 00       	mov    esi,0x1
c001439e:	0f 94 c3             	sete   bl
c00143a1:	80 f9 13             	cmp    cl,0x13
c00143a4:	77 0c                	ja     c00143b2 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143a6:	be 04 00 09 00       	mov    esi,0x90004
c00143ab:	d3 ee                	shr    esi,cl
c00143ad:	f7 d6                	not    esi
c00143af:	83 e6 01             	and    esi,0x1
c00143b2:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143b5:	3c 01                	cmp    al,0x1
c00143b7:	b8 30 41 02 c0       	mov    eax,0xc0024130
c00143bc:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143c1:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143c5:	75 61                	jne    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143c7:	80 fa 15             	cmp    dl,0x15
c00143ca:	75 1f                	jne    c00143eb <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143cc:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143d1:	80 f9 01             	cmp    cl,0x1
c00143d4:	74 52                	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143d6:	89 f3                	mov    ebx,esi
c00143d8:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143dd:	84 db                	test   bl,bl
c00143df:	74 47                	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e1:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143e6:	80 f9 30             	cmp    cl,0x30
c00143e9:	74 3d                	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143eb:	80 fa 16             	cmp    dl,0x16
c00143ee:	0f 94 c2             	sete   dl
c00143f1:	84 c9                	test   cl,cl
c00143f3:	75 09                	jne    c00143fe <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c00143f5:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143fa:	84 d2                	test   dl,dl
c00143fc:	75 2a                	jne    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143fe:	80 f9 30             	cmp    cl,0x30
c0014401:	75 20                	jne    c0014423 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014403:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0014408:	84 d2                	test   dl,dl
c001440a:	75 1c                	jne    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001440c:	eb 15                	jmp    c0014423 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001440e:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c0014413:	eb 13                	jmp    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014415:	b8 10 41 02 c0       	mov    eax,0xc0024110
c001441a:	eb 0c                	jmp    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441c:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014421:	eb 05                	jmp    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014423:	b8 52 27 02 c0       	mov    eax,0xc0022752
c0014428:	5a                   	pop    edx
c0014429:	5b                   	pop    ebx
c001442a:	5e                   	pop    esi
c001442b:	5f                   	pop    edi
c001442c:	5d                   	pop    ebp
c001442d:	c3                   	ret    

c001442e <lookupIntelCPUName(unsigned char, unsigned char)>:
c001442e:	53                   	push   ebx
c001442f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014437:	80 f9 04             	cmp    cl,0x4
c001443a:	75 6a                	jne    c00144a6 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001443c:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014441:	80 fa 01             	cmp    dl,0x1
c0014444:	0f 86 9b 02 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001444a:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c001444f:	80 fa 02             	cmp    dl,0x2
c0014452:	0f 84 8d 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014458:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001445d:	80 fa 03             	cmp    dl,0x3
c0014460:	0f 84 7f 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014466:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001446b:	80 fa 04             	cmp    dl,0x4
c001446e:	0f 84 71 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014474:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014479:	80 fa 05             	cmp    dl,0x5
c001447c:	0f 84 63 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014482:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014487:	80 fa 07             	cmp    dl,0x7
c001448a:	0f 84 55 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014490:	8d 5a f8             	lea    ebx,[edx-0x8]
c0014493:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014498:	80 fb 01             	cmp    bl,0x1
c001449b:	0f 87 e0 01 00 00    	ja     c0014681 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144a1:	e9 3f 02 00 00       	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a6:	80 f9 05             	cmp    cl,0x5
c00144a9:	75 3e                	jne    c00144e9 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144ab:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144ae:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00144b3:	80 fb 02             	cmp    bl,0x2
c00144b6:	0f 86 29 02 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144bc:	80 fa 04             	cmp    dl,0x4
c00144bf:	0f 84 f1 01 00 00    	je     c00146b6 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144c5:	80 fa 07             	cmp    dl,0x7
c00144c8:	0f 84 17 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ce:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144d3:	80 fa 08             	cmp    dl,0x8
c00144d6:	0f 84 09 02 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144dc:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144e1:	80 fa 09             	cmp    dl,0x9
c00144e4:	e9 96 01 00 00       	jmp    c001467f <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144e9:	80 f9 06             	cmp    cl,0x6
c00144ec:	0f 85 80 01 00 00    	jne    c0014672 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00144f2:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144f7:	80 fa 01             	cmp    dl,0x1
c00144fa:	0f 84 e5 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014500:	8d 42 fb             	lea    eax,[edx-0x5]
c0014503:	3c 01                	cmp    al,0x1
c0014505:	0f 86 b2 01 00 00    	jbe    c00146bd <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001450b:	80 fa 03             	cmp    dl,0x3
c001450e:	0f 84 a9 01 00 00    	je     c00146bd <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014514:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014517:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c001451c:	80 fb 01             	cmp    bl,0x1
c001451f:	0f 86 c0 01 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014525:	80 fa 09             	cmp    dl,0x9
c0014528:	0f 84 96 01 00 00    	je     c00146c4 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001452e:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014531:	80 fb 01             	cmp    bl,0x1
c0014534:	0f 86 ab 01 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001453a:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c001453f:	80 fa 0d             	cmp    dl,0xd
c0014542:	0f 84 9d 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014548:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c001454d:	80 fa 0e             	cmp    dl,0xe
c0014550:	0f 84 8f 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014556:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001455b:	80 fa 0f             	cmp    dl,0xf
c001455e:	0f 84 81 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014564:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0014569:	80 fa 15             	cmp    dl,0x15
c001456c:	0f 84 73 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014572:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014575:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001457a:	80 fb 01             	cmp    bl,0x1
c001457d:	0f 86 62 01 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014583:	80 fa 1a             	cmp    dl,0x1a
c0014586:	0f 84 3f 01 00 00    	je     c00146cb <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c001458c:	80 fa 1c             	cmp    dl,0x1c
c001458f:	0f 84 3d 01 00 00    	je     c00146d2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c0014595:	80 fa 1d             	cmp    dl,0x1d
c0014598:	0f 84 47 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001459e:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145a3:	80 fa 25             	cmp    dl,0x25
c00145a6:	0f 84 39 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ac:	8d 5a da             	lea    ebx,[edx-0x26]
c00145af:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00145b4:	80 fb 01             	cmp    bl,0x1
c00145b7:	0f 86 28 01 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bd:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145c2:	80 fa 2a             	cmp    dl,0x2a
c00145c5:	0f 84 1a 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145cb:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145d0:	80 fa 2c             	cmp    dl,0x2c
c00145d3:	0f 84 0c 01 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d9:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145de:	80 fa 2d             	cmp    dl,0x2d
c00145e1:	0f 84 fe 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e7:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00145ec:	80 fa 2e             	cmp    dl,0x2e
c00145ef:	0f 84 f0 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f5:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145fa:	80 fa 2f             	cmp    dl,0x2f
c00145fd:	0f 84 e2 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014603:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014606:	b8 00 40 02 c0       	mov    eax,0xc0024000
c001460b:	80 fb 01             	cmp    bl,0x1
c001460e:	0f 86 d1 00 00 00    	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014614:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014619:	80 fa 37             	cmp    dl,0x37
c001461c:	0f 84 c3 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014622:	b8 40 40 02 c0       	mov    eax,0xc0024040
c0014627:	80 fa 3a             	cmp    dl,0x3a
c001462a:	0f 84 b5 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014630:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014635:	80 fa 3c             	cmp    dl,0x3c
c0014638:	0f 84 a7 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001463e:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014643:	80 fa 3d             	cmp    dl,0x3d
c0014646:	0f 84 99 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464c:	b8 40 40 02 c0       	mov    eax,0xc0024040
c0014651:	80 fa 3e             	cmp    dl,0x3e
c0014654:	0f 84 8b 00 00 00    	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001465a:	8d 42 bb             	lea    eax,[edx-0x45]
c001465d:	3c 01                	cmp    al,0x1
c001465f:	76 78                	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014661:	80 fa 3f             	cmp    dl,0x3f
c0014664:	74 73                	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014666:	80 fa 4a             	cmp    dl,0x4a
c0014669:	74 75                	je     c00146e0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001466b:	80 fa 4d             	cmp    dl,0x4d
c001466e:	75 11                	jne    c0014681 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014670:	eb 6e                	jmp    c00146e0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014672:	80 f9 0b             	cmp    cl,0xb
c0014675:	75 0a                	jne    c0014681 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014677:	b8 70 40 02 c0       	mov    eax,0xc0024070
c001467c:	80 fa 01             	cmp    dl,0x1
c001467f:	74 64                	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014681:	80 f9 0f             	cmp    cl,0xf
c0014684:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0014689:	0f 94 c1             	sete   cl
c001468c:	80 fa 02             	cmp    dl,0x2
c001468f:	0f 96 c3             	setbe  bl
c0014692:	84 cb                	test   bl,cl
c0014694:	75 4f                	jne    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014696:	8d 42 fd             	lea    eax,[edx-0x3]
c0014699:	3c 01                	cmp    al,0x1
c001469b:	0f 96 c0             	setbe  al
c001469e:	80 fa 06             	cmp    dl,0x6
c00146a1:	0f 94 c2             	sete   dl
c00146a4:	09 c2                	or     edx,eax
c00146a6:	b8 52 27 02 c0       	mov    eax,0xc0022752
c00146ab:	84 ca                	test   dl,cl
c00146ad:	74 36                	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146af:	b8 90 40 02 c0       	mov    eax,0xc0024090
c00146b4:	eb 2f                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b6:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00146bb:	eb 28                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146bd:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00146c2:	eb 21                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c4:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146c9:	eb 1a                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146cb:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00146d0:	eb 13                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d2:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00146d7:	eb 0c                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d9:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146de:	eb 05                	jmp    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e0:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00146e5:	5b                   	pop    ebx
c00146e6:	c3                   	ret    

c00146e7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146e7:	60                   	pusha  
c00146e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146f4:	9c                   	pushf  
c00146f5:	fa                   	cli    
c00146f6:	0f 09                	wbinvd 
c00146f8:	0f 30                	wrmsr  
c00146fa:	9d                   	popf   
c00146fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00146ff:	89 02                	mov    DWORD PTR [edx],eax
c0014701:	61                   	popa   
c0014702:	c3                   	ret    

c0014703 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014703:	60                   	pusha  
c0014704:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014708:	9c                   	pushf  
c0014709:	fa                   	cli    
c001470a:	0f 09                	wbinvd 
c001470c:	31 c0                	xor    eax,eax
c001470e:	31 d2                	xor    edx,edx
c0014710:	0f 32                	rdmsr  
c0014712:	9d                   	popf   
c0014713:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014717:	89 02                	mov    DWORD PTR [edx],eax
c0014719:	61                   	popa   
c001471a:	c3                   	ret    

c001471b <AMD_K6_writeback(int, int, int)>:
c001471b:	56                   	push   esi
c001471c:	53                   	push   ebx
c001471d:	83 ec 10             	sub    esp,0x10
c0014720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014724:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014729:	75 5d                	jne    c0014788 <AMD_K6_writeback(int, int, int)+0x6d>
c001472b:	83 f8 08             	cmp    eax,0x8
c001472e:	75 09                	jne    c0014739 <AMD_K6_writeback(int, int, int)+0x1e>
c0014730:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014735:	7e 13                	jle    c001474a <AMD_K6_writeback(int, int, int)+0x2f>
c0014737:	eb 30                	jmp    c0014769 <AMD_K6_writeback(int, int, int)+0x4e>
c0014739:	83 f8 06             	cmp    eax,0x6
c001473c:	7c 4a                	jl     c0014788 <AMD_K6_writeback(int, int, int)+0x6d>
c001473e:	83 f8 07             	cmp    eax,0x7
c0014741:	7e 07                	jle    c001474a <AMD_K6_writeback(int, int, int)+0x2f>
c0014743:	83 f8 09             	cmp    eax,0x9
c0014746:	74 21                	je     c0014769 <AMD_K6_writeback(int, int, int)+0x4e>
c0014748:	eb 3e                	jmp    c0014788 <AMD_K6_writeback(int, int, int)+0x6d>
c001474a:	89 e6                	mov    esi,esp
c001474c:	8b 1d c4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247c4
c0014752:	c1 eb 15             	shr    ebx,0x15
c0014755:	56                   	push   esi
c0014756:	68 82 00 00 c0       	push   0xc0000082
c001475b:	e8 a3 ff ff ff       	call   c0014703 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014760:	56                   	push   esi
c0014761:	83 e3 7e             	and    ebx,0x7e
c0014764:	6a 00                	push   0x0
c0014766:	53                   	push   ebx
c0014767:	eb 12                	jmp    c001477b <AMD_K6_writeback(int, int, int)+0x60>
c0014769:	89 e3                	mov    ebx,esp
c001476b:	53                   	push   ebx
c001476c:	68 82 00 00 c0       	push   0xc0000082
c0014771:	e8 8d ff ff ff       	call   c0014703 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014776:	53                   	push   ebx
c0014777:	6a 00                	push   0x0
c0014779:	6a 00                	push   0x0
c001477b:	68 82 00 00 c0       	push   0xc0000082
c0014780:	e8 62 ff ff ff       	call   c00146e7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014785:	83 c4 18             	add    esp,0x18
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	5b                   	pop    ebx
c001478c:	5e                   	pop    esi
c001478d:	c3                   	ret    

c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001478e:	55                   	push   ebp
c001478f:	57                   	push   edi
c0014790:	56                   	push   esi
c0014791:	53                   	push   ebx
c0014792:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014796:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001479a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001479e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147a2:	39 05 a0 41 02 c0    	cmp    DWORD PTR ds:0xc00241a0,eax
c00147a8:	75 23                	jne    c00147cd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147aa:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00147af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147b3:	89 06                	mov    DWORD PTR [esi],eax
c00147b5:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00147ba:	89 07                	mov    DWORD PTR [edi],eax
c00147bc:	a1 c4 51 02 c0       	mov    eax,ds:0xc00251c4
c00147c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147c4:	a1 c0 51 02 c0       	mov    eax,ds:0xc00251c0
c00147c9:	89 02                	mov    DWORD PTR [edx],eax
c00147cb:	eb 3f                	jmp    c001480c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147cd:	31 c9                	xor    ecx,ecx
c00147cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147d3:	0f a2                	cpuid  
c00147d5:	89 06                	mov    DWORD PTR [esi],eax
c00147d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147db:	89 1f                	mov    DWORD PTR [edi],ebx
c00147dd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147e0:	89 10                	mov    DWORD PTR [eax],edx
c00147e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147e6:	a3 a0 41 02 c0       	mov    ds:0xc00241a0,eax
c00147eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00147ed:	a3 cc 51 02 c0       	mov    ds:0xc00251cc,eax
c00147f2:	8b 07                	mov    eax,DWORD PTR [edi]
c00147f4:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00147f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00147fc:	a3 c4 51 02 c0       	mov    ds:0xc00251c4,eax
c0014801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014805:	8b 00                	mov    eax,DWORD PTR [eax]
c0014807:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c001480c:	5b                   	pop    ebx
c001480d:	5e                   	pop    esi
c001480e:	5f                   	pop    edi
c001480f:	5d                   	pop    ebp
c0014810:	c3                   	ret    

c0014811 <cpuidCheckEDX(unsigned int)>:
c0014811:	83 ec 10             	sub    esp,0x10
c0014814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014818:	50                   	push   eax
c0014819:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001481d:	50                   	push   eax
c001481e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014822:	50                   	push   eax
c0014823:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014827:	50                   	push   eax
c0014828:	6a 01                	push   0x1
c001482a:	e8 5f ff ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001482f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014833:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014837:	0f 95 c0             	setne  al
c001483a:	83 c4 24             	add    esp,0x24
c001483d:	c3                   	ret    

c001483e <cpuidCheckECX(unsigned int)>:
c001483e:	83 ec 10             	sub    esp,0x10
c0014841:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014845:	50                   	push   eax
c0014846:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001484a:	50                   	push   eax
c001484b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001484f:	50                   	push   eax
c0014850:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014854:	50                   	push   eax
c0014855:	6a 01                	push   0x1
c0014857:	e8 32 ff ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001485c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014860:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014864:	0f 95 c0             	setne  al
c0014867:	83 c4 24             	add    esp,0x24
c001486a:	c3                   	ret    

c001486b <cpuidCheckExtendedEBX(unsigned int)>:
c001486b:	83 ec 10             	sub    esp,0x10
c001486e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014872:	50                   	push   eax
c0014873:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014877:	50                   	push   eax
c0014878:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001487c:	50                   	push   eax
c001487d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014881:	50                   	push   eax
c0014882:	6a 07                	push   0x7
c0014884:	e8 05 ff ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014889:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001488d:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014891:	0f 95 c0             	setne  al
c0014894:	83 c4 24             	add    esp,0x24
c0014897:	c3                   	ret    

c0014898 <cpuidCheckExtendedECX(unsigned int)>:
c0014898:	83 ec 10             	sub    esp,0x10
c001489b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489f:	50                   	push   eax
c00148a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148a4:	50                   	push   eax
c00148a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148a9:	50                   	push   eax
c00148aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148ae:	50                   	push   eax
c00148af:	6a 07                	push   0x7
c00148b1:	e8 d8 fe ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148ba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148be:	0f 95 c0             	setne  al
c00148c1:	83 c4 24             	add    esp,0x24
c00148c4:	c3                   	ret    

c00148c5 <getCPUNumber()>:
c00148c5:	31 c0                	xor    eax,eax
c00148c7:	c3                   	ret    

c00148c8 <thisCPU()>:
c00148c8:	e8 f8 ff ff ff       	call   c00148c5 <getCPUNumber()>
c00148cd:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c00148d3:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <CPU::CPU()>:
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e3:	83 ec 08             	sub    esp,0x8
c00148e6:	68 52 27 02 c0       	push   0xc0022752
c00148eb:	50                   	push   eax
c00148ec:	e8 19 bf ff ff       	call   c001080a <Device::Device(char const*)>
c00148f1:	83 c4 10             	add    esp,0x10
c00148f4:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c00148f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148fd:	89 10                	mov    DWORD PTR [eax],edx
c00148ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014903:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001490d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014911:	05 78 01 00 00       	add    eax,0x178
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	50                   	push   eax
c001491a:	e8 c5 6e ff ff       	call   c000b7e4 <GDT::GDT()>
c001491f:	83 c4 10             	add    esp,0x10
c0014922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014926:	05 7c 09 00 00       	add    eax,0x97c
c001492b:	83 ec 0c             	sub    esp,0xc
c001492e:	50                   	push   eax
c001492f:	e8 10 71 ff ff       	call   c000ba44 <IDT::IDT()>
c0014934:	83 c4 10             	add    esp,0x10
c0014937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001493b:	05 7c 11 00 00       	add    eax,0x117c
c0014940:	83 ec 0c             	sub    esp,0xc
c0014943:	50                   	push   eax
c0014944:	e8 6d 91 ff ff       	call   c000dab6 <TSS::TSS()>
c0014949:	83 c4 10             	add    esp,0x10
c001494c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014950:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014965:	90                   	nop
c0014966:	83 c4 0c             	add    esp,0xc
c0014969:	c3                   	ret    

c001496a <CPU::displayFeatures()>:
c001496a:	53                   	push   ebx
c001496b:	83 ec 10             	sub    esp,0x10
c001496e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014972:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014978:	68 60 24 02 c0       	push   0xc0022460
c001497d:	e8 83 a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014982:	59                   	pop    ecx
c0014983:	58                   	pop    eax
c0014984:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001498a:	50                   	push   eax
c001498b:	68 71 24 02 c0       	push   0xc0022471
c0014990:	e8 70 a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014995:	58                   	pop    eax
c0014996:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001499c:	c1 e8 0e             	shr    eax,0xe
c001499f:	5a                   	pop    edx
c00149a0:	0f b6 c0             	movzx  eax,al
c00149a3:	50                   	push   eax
c00149a4:	68 82 24 02 c0       	push   0xc0022482
c00149a9:	e8 57 a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149b6:	66 c1 e8 06          	shr    ax,0x6
c00149ba:	0f b6 c0             	movzx  eax,al
c00149bd:	50                   	push   eax
c00149be:	68 93 24 02 c0       	push   0xc0022493
c00149c3:	e8 3d a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00149c8:	c7 04 24 a6 28 02 c0 	mov    DWORD PTR [esp],0xc00228a6
c00149cf:	e8 31 a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00149d4:	83 c4 10             	add    esp,0x10
c00149d7:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c00149dc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149e3:	74 05                	je     c00149ea <CPU::displayFeatures()+0x80>
c00149e5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c00149ea:	52                   	push   edx
c00149eb:	52                   	push   edx
c00149ec:	50                   	push   eax
c00149ed:	68 a4 24 02 c0       	push   0xc00224a4
c00149f2:	e8 0e a8 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c00149ff:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a06:	78 05                	js     c0014a0d <CPU::displayFeatures()+0xa3>
c0014a08:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a0d:	51                   	push   ecx
c0014a0e:	51                   	push   ecx
c0014a0f:	50                   	push   eax
c0014a10:	68 bb 24 02 c0       	push   0xc00224bb
c0014a15:	e8 eb a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a22:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a29:	75 05                	jne    c0014a30 <CPU::displayFeatures()+0xc6>
c0014a2b:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a30:	52                   	push   edx
c0014a31:	52                   	push   edx
c0014a32:	50                   	push   eax
c0014a33:	68 d2 24 02 c0       	push   0xc00224d2
c0014a38:	e8 c8 a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a45:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a4c:	75 05                	jne    c0014a53 <CPU::displayFeatures()+0xe9>
c0014a4e:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a53:	51                   	push   ecx
c0014a54:	51                   	push   ecx
c0014a55:	50                   	push   eax
c0014a56:	68 e9 24 02 c0       	push   0xc00224e9
c0014a5b:	e8 a5 a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a68:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a6f:	75 05                	jne    c0014a76 <CPU::displayFeatures()+0x10c>
c0014a71:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a76:	52                   	push   edx
c0014a77:	52                   	push   edx
c0014a78:	50                   	push   eax
c0014a79:	68 00 25 02 c0       	push   0xc0022500
c0014a7e:	e8 82 a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014a83:	83 c4 10             	add    esp,0x10
c0014a86:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a8b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a92:	75 05                	jne    c0014a99 <CPU::displayFeatures()+0x12f>
c0014a94:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a99:	51                   	push   ecx
c0014a9a:	51                   	push   ecx
c0014a9b:	50                   	push   eax
c0014a9c:	68 17 25 02 c0       	push   0xc0022517
c0014aa1:	e8 5f a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014aae:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014ab5:	75 05                	jne    c0014abc <CPU::displayFeatures()+0x152>
c0014ab7:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014abc:	52                   	push   edx
c0014abd:	52                   	push   edx
c0014abe:	50                   	push   eax
c0014abf:	68 2e 25 02 c0       	push   0xc002252e
c0014ac4:	e8 3c a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ad1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ad8:	75 05                	jne    c0014adf <CPU::displayFeatures()+0x175>
c0014ada:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014adf:	51                   	push   ecx
c0014ae0:	51                   	push   ecx
c0014ae1:	50                   	push   eax
c0014ae2:	68 45 25 02 c0       	push   0xc0022545
c0014ae7:	e8 19 a7 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014aec:	83 c4 10             	add    esp,0x10
c0014aef:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014af4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014afb:	75 05                	jne    c0014b02 <CPU::displayFeatures()+0x198>
c0014afd:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b02:	52                   	push   edx
c0014b03:	52                   	push   edx
c0014b04:	50                   	push   eax
c0014b05:	68 5c 25 02 c0       	push   0xc002255c
c0014b0a:	e8 f6 a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014b0f:	83 c4 10             	add    esp,0x10
c0014b12:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b17:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b1e:	75 05                	jne    c0014b25 <CPU::displayFeatures()+0x1bb>
c0014b20:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b25:	51                   	push   ecx
c0014b26:	51                   	push   ecx
c0014b27:	50                   	push   eax
c0014b28:	68 73 25 02 c0       	push   0xc0022573
c0014b2d:	e8 d3 a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b3a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b41:	75 05                	jne    c0014b48 <CPU::displayFeatures()+0x1de>
c0014b43:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b48:	52                   	push   edx
c0014b49:	52                   	push   edx
c0014b4a:	50                   	push   eax
c0014b4b:	68 8a 25 02 c0       	push   0xc002258a
c0014b50:	e8 b0 a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014b55:	83 c4 10             	add    esp,0x10
c0014b58:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b5d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b64:	75 05                	jne    c0014b6b <CPU::displayFeatures()+0x201>
c0014b66:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b6b:	51                   	push   ecx
c0014b6c:	51                   	push   ecx
c0014b6d:	50                   	push   eax
c0014b6e:	68 a1 25 02 c0       	push   0xc00225a1
c0014b73:	e8 8d a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b80:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b87:	75 05                	jne    c0014b8e <CPU::displayFeatures()+0x224>
c0014b89:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b8e:	52                   	push   edx
c0014b8f:	52                   	push   edx
c0014b90:	50                   	push   eax
c0014b91:	68 b8 25 02 c0       	push   0xc00225b8
c0014b96:	e8 6a a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ba3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014baa:	78 05                	js     c0014bb1 <CPU::displayFeatures()+0x247>
c0014bac:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014bb1:	51                   	push   ecx
c0014bb2:	51                   	push   ecx
c0014bb3:	50                   	push   eax
c0014bb4:	68 cf 25 02 c0       	push   0xc00225cf
c0014bb9:	e8 47 a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014bc6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bcd:	75 05                	jne    c0014bd4 <CPU::displayFeatures()+0x26a>
c0014bcf:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014bd4:	52                   	push   edx
c0014bd5:	52                   	push   edx
c0014bd6:	50                   	push   eax
c0014bd7:	68 e6 25 02 c0       	push   0xc00225e6
c0014bdc:	e8 24 a6 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0014be1:	83 c4 18             	add    esp,0x18
c0014be4:	5b                   	pop    ebx
c0014be5:	c3                   	ret    

c0014be6 <CPU::detectFeatures()>:
c0014be6:	55                   	push   ebp
c0014be7:	57                   	push   edi
c0014be8:	56                   	push   esi
c0014be9:	53                   	push   ebx
c0014bea:	83 ec 50             	sub    esp,0x50
c0014bed:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014bf1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014bfb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c02:	6a 0d                	push   0xd
c0014c04:	6a 00                	push   0x0
c0014c06:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c0c:	57                   	push   edi
c0014c0d:	e8 a3 ba fe ff       	call   c00006b5 <memset>
c0014c12:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c21:	0f 84 04 09 00 00    	je     c001552b <CPU::detectFeatures()+0x945>
c0014c27:	83 ec 0c             	sub    esp,0xc
c0014c2a:	6a 10                	push   0x10
c0014c2c:	e8 e0 fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014c31:	83 e0 01             	and    eax,0x1
c0014c34:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c3d:	83 e0 fd             	and    eax,0xfffffffd
c0014c40:	09 d0                	or     eax,edx
c0014c42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c48:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c4f:	e8 bd fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014c54:	83 e0 01             	and    eax,0x1
c0014c57:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c5e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c64:	83 e0 fb             	and    eax,0xfffffffb
c0014c67:	09 d0                	or     eax,edx
c0014c69:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c6f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c76:	e8 96 fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014c7b:	83 e0 01             	and    eax,0x1
c0014c7e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c8b:	83 e0 f7             	and    eax,0xfffffff7
c0014c8e:	09 d0                	or     eax,edx
c0014c90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c96:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014c9d:	e8 6f fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014ca2:	83 e0 01             	and    eax,0x1
c0014ca5:	c1 e0 04             	shl    eax,0x4
c0014ca8:	88 c2                	mov    dl,al
c0014caa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cb0:	83 e0 ef             	and    eax,0xffffffef
c0014cb3:	09 d0                	or     eax,edx
c0014cb5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cbb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cc2:	e8 4a fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014cc7:	83 e0 01             	and    eax,0x1
c0014cca:	c1 e0 05             	shl    eax,0x5
c0014ccd:	88 c2                	mov    dl,al
c0014ccf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cd5:	83 e0 df             	and    eax,0xffffffdf
c0014cd8:	09 d0                	or     eax,edx
c0014cda:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ce0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014ce7:	e8 25 fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014cec:	83 e0 01             	and    eax,0x1
c0014cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0014cf2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014cf8:	83 e0 fd             	and    eax,0xfffffffd
c0014cfb:	09 d0                	or     eax,edx
c0014cfd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d03:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d0a:	e8 02 fb ff ff       	call   c0014811 <cpuidCheckEDX(unsigned int)>
c0014d0f:	83 e0 01             	and    eax,0x1
c0014d12:	c1 e0 06             	shl    eax,0x6
c0014d15:	88 c2                	mov    dl,al
c0014d17:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d1d:	83 e0 bf             	and    eax,0xffffffbf
c0014d20:	09 d0                	or     eax,edx
c0014d22:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d28:	58                   	pop    eax
c0014d29:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d2d:	56                   	push   esi
c0014d2e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d32:	55                   	push   ebp
c0014d33:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d37:	50                   	push   eax
c0014d38:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d3c:	52                   	push   edx
c0014d3d:	6a 00                	push   0x0
c0014d3f:	e8 4a fa ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d44:	83 c4 1c             	add    esp,0x1c
c0014d47:	6a 04                	push   0x4
c0014d49:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d4d:	50                   	push   eax
c0014d4e:	57                   	push   edi
c0014d4f:	e8 2b b9 fe ff       	call   c000067f <memcpy>
c0014d54:	83 c4 0c             	add    esp,0xc
c0014d57:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d5d:	6a 04                	push   0x4
c0014d5f:	56                   	push   esi
c0014d60:	50                   	push   eax
c0014d61:	e8 19 b9 fe ff       	call   c000067f <memcpy>
c0014d66:	83 c4 0c             	add    esp,0xc
c0014d69:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d6f:	6a 04                	push   0x4
c0014d71:	55                   	push   ebp
c0014d72:	50                   	push   eax
c0014d73:	e8 07 b9 fe ff       	call   c000067f <memcpy>
c0014d78:	58                   	pop    eax
c0014d79:	5a                   	pop    edx
c0014d7a:	68 fd 25 02 c0       	push   0xc00225fd
c0014d7f:	57                   	push   edi
c0014d80:	e8 20 ba fe ff       	call   c00007a5 <strcmp>
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	85 c0                	test   eax,eax
c0014d8a:	75 0f                	jne    c0014d9b <CPU::detectFeatures()+0x1b5>
c0014d8c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014d96:	e9 22 02 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014d9b:	50                   	push   eax
c0014d9c:	50                   	push   eax
c0014d9d:	68 0a 26 02 c0       	push   0xc002260a
c0014da2:	57                   	push   edi
c0014da3:	e8 fd b9 fe ff       	call   c00007a5 <strcmp>
c0014da8:	83 c4 10             	add    esp,0x10
c0014dab:	85 c0                	test   eax,eax
c0014dad:	74 dd                	je     c0014d8c <CPU::detectFeatures()+0x1a6>
c0014daf:	51                   	push   ecx
c0014db0:	51                   	push   ecx
c0014db1:	68 17 26 02 c0       	push   0xc0022617
c0014db6:	57                   	push   edi
c0014db7:	e8 e9 b9 fe ff       	call   c00007a5 <strcmp>
c0014dbc:	83 c4 10             	add    esp,0x10
c0014dbf:	85 c0                	test   eax,eax
c0014dc1:	74 2a                	je     c0014ded <CPU::detectFeatures()+0x207>
c0014dc3:	52                   	push   edx
c0014dc4:	52                   	push   edx
c0014dc5:	68 24 26 02 c0       	push   0xc0022624
c0014dca:	57                   	push   edi
c0014dcb:	e8 d5 b9 fe ff       	call   c00007a5 <strcmp>
c0014dd0:	83 c4 10             	add    esp,0x10
c0014dd3:	85 c0                	test   eax,eax
c0014dd5:	74 16                	je     c0014ded <CPU::detectFeatures()+0x207>
c0014dd7:	50                   	push   eax
c0014dd8:	50                   	push   eax
c0014dd9:	68 31 26 02 c0       	push   0xc0022631
c0014dde:	57                   	push   edi
c0014ddf:	e8 c1 b9 fe ff       	call   c00007a5 <strcmp>
c0014de4:	83 c4 10             	add    esp,0x10
c0014de7:	85 c0                	test   eax,eax
c0014de9:	74 48                	je     c0014e33 <CPU::detectFeatures()+0x24d>
c0014deb:	eb 0f                	jmp    c0014dfc <CPU::detectFeatures()+0x216>
c0014ded:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014df7:	e9 c1 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014dfc:	50                   	push   eax
c0014dfd:	50                   	push   eax
c0014dfe:	68 3e 26 02 c0       	push   0xc002263e
c0014e03:	57                   	push   edi
c0014e04:	e8 9c b9 fe ff       	call   c00007a5 <strcmp>
c0014e09:	83 c4 10             	add    esp,0x10
c0014e0c:	85 c0                	test   eax,eax
c0014e0e:	74 23                	je     c0014e33 <CPU::detectFeatures()+0x24d>
c0014e10:	50                   	push   eax
c0014e11:	50                   	push   eax
c0014e12:	68 4b 26 02 c0       	push   0xc002264b
c0014e17:	57                   	push   edi
c0014e18:	e8 88 b9 fe ff       	call   c00007a5 <strcmp>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	85 c0                	test   eax,eax
c0014e22:	75 1e                	jne    c0014e42 <CPU::detectFeatures()+0x25c>
c0014e24:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e2e:	e9 8a 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014e33:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e3d:	e9 7b 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014e42:	50                   	push   eax
c0014e43:	50                   	push   eax
c0014e44:	68 58 26 02 c0       	push   0xc0022658
c0014e49:	57                   	push   edi
c0014e4a:	e8 56 b9 fe ff       	call   c00007a5 <strcmp>
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	85 c0                	test   eax,eax
c0014e54:	75 0f                	jne    c0014e65 <CPU::detectFeatures()+0x27f>
c0014e56:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e60:	e9 58 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014e65:	50                   	push   eax
c0014e66:	50                   	push   eax
c0014e67:	68 17 26 02 c0       	push   0xc0022617
c0014e6c:	57                   	push   edi
c0014e6d:	e8 33 b9 fe ff       	call   c00007a5 <strcmp>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	85 c0                	test   eax,eax
c0014e77:	75 0f                	jne    c0014e88 <CPU::detectFeatures()+0x2a2>
c0014e79:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e83:	e9 35 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014e88:	50                   	push   eax
c0014e89:	50                   	push   eax
c0014e8a:	68 65 26 02 c0       	push   0xc0022665
c0014e8f:	57                   	push   edi
c0014e90:	e8 10 b9 fe ff       	call   c00007a5 <strcmp>
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	85 c0                	test   eax,eax
c0014e9a:	75 0f                	jne    c0014eab <CPU::detectFeatures()+0x2c5>
c0014e9c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014ea6:	e9 12 01 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014eab:	51                   	push   ecx
c0014eac:	51                   	push   ecx
c0014ead:	68 72 26 02 c0       	push   0xc0022672
c0014eb2:	57                   	push   edi
c0014eb3:	e8 ed b8 fe ff       	call   c00007a5 <strcmp>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	85 c0                	test   eax,eax
c0014ebd:	75 0f                	jne    c0014ece <CPU::detectFeatures()+0x2e8>
c0014ebf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ec9:	e9 ef 00 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014ece:	52                   	push   edx
c0014ecf:	52                   	push   edx
c0014ed0:	68 7f 26 02 c0       	push   0xc002267f
c0014ed5:	57                   	push   edi
c0014ed6:	e8 ca b8 fe ff       	call   c00007a5 <strcmp>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	85 c0                	test   eax,eax
c0014ee0:	75 0f                	jne    c0014ef1 <CPU::detectFeatures()+0x30b>
c0014ee2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014eec:	e9 cc 00 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014ef1:	50                   	push   eax
c0014ef2:	50                   	push   eax
c0014ef3:	68 8c 26 02 c0       	push   0xc002268c
c0014ef8:	57                   	push   edi
c0014ef9:	e8 a7 b8 fe ff       	call   c00007a5 <strcmp>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	85 c0                	test   eax,eax
c0014f03:	75 0f                	jne    c0014f14 <CPU::detectFeatures()+0x32e>
c0014f05:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f0f:	e9 a9 00 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014f14:	50                   	push   eax
c0014f15:	50                   	push   eax
c0014f16:	68 99 26 02 c0       	push   0xc0022699
c0014f1b:	57                   	push   edi
c0014f1c:	e8 84 b8 fe ff       	call   c00007a5 <strcmp>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	85 c0                	test   eax,eax
c0014f26:	75 0f                	jne    c0014f37 <CPU::detectFeatures()+0x351>
c0014f28:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f32:	e9 86 00 00 00       	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014f37:	50                   	push   eax
c0014f38:	50                   	push   eax
c0014f39:	68 a6 26 02 c0       	push   0xc00226a6
c0014f3e:	57                   	push   edi
c0014f3f:	e8 61 b8 fe ff       	call   c00007a5 <strcmp>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	85 c0                	test   eax,eax
c0014f49:	75 0c                	jne    c0014f57 <CPU::detectFeatures()+0x371>
c0014f4b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f55:	eb 66                	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014f57:	50                   	push   eax
c0014f58:	50                   	push   eax
c0014f59:	68 b3 26 02 c0       	push   0xc00226b3
c0014f5e:	57                   	push   edi
c0014f5f:	e8 41 b8 fe ff       	call   c00007a5 <strcmp>
c0014f64:	83 c4 10             	add    esp,0x10
c0014f67:	85 c0                	test   eax,eax
c0014f69:	75 0c                	jne    c0014f77 <CPU::detectFeatures()+0x391>
c0014f6b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f75:	eb 46                	jmp    c0014fbd <CPU::detectFeatures()+0x3d7>
c0014f77:	50                   	push   eax
c0014f78:	50                   	push   eax
c0014f79:	68 c0 26 02 c0       	push   0xc00226c0
c0014f7e:	57                   	push   edi
c0014f7f:	e8 21 b8 fe ff       	call   c00007a5 <strcmp>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	85 c0                	test   eax,eax
c0014f89:	74 e0                	je     c0014f6b <CPU::detectFeatures()+0x385>
c0014f8b:	50                   	push   eax
c0014f8c:	50                   	push   eax
c0014f8d:	68 cd 26 02 c0       	push   0xc00226cd
c0014f92:	57                   	push   edi
c0014f93:	e8 0d b8 fe ff       	call   c00007a5 <strcmp>
c0014f98:	83 c4 10             	add    esp,0x10
c0014f9b:	85 c0                	test   eax,eax
c0014f9d:	74 cc                	je     c0014f6b <CPU::detectFeatures()+0x385>
c0014f9f:	51                   	push   ecx
c0014fa0:	51                   	push   ecx
c0014fa1:	68 da 26 02 c0       	push   0xc00226da
c0014fa6:	57                   	push   edi
c0014fa7:	e8 f9 b7 fe ff       	call   c00007a5 <strcmp>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	85 c0                	test   eax,eax
c0014fb1:	74 b8                	je     c0014f6b <CPU::detectFeatures()+0x385>
c0014fb3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fbd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fc2:	0f 86 be 00 00 00    	jbe    c0015086 <CPU::detectFeatures()+0x4a0>
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	68 80 00 00 00       	push   0x80
c0014fd0:	e8 96 f8 ff ff       	call   c001486b <cpuidCheckExtendedEBX(unsigned int)>
c0014fd5:	83 e0 01             	and    eax,0x1
c0014fd8:	c1 e0 06             	shl    eax,0x6
c0014fdb:	88 c2                	mov    dl,al
c0014fdd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014fe3:	83 e0 bf             	and    eax,0xffffffbf
c0014fe6:	09 d0                	or     eax,edx
c0014fe8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014fee:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014ff5:	e8 71 f8 ff ff       	call   c001486b <cpuidCheckExtendedEBX(unsigned int)>
c0014ffa:	83 e0 01             	and    eax,0x1
c0014ffd:	c1 e0 04             	shl    eax,0x4
c0015000:	88 c2                	mov    dl,al
c0015002:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015008:	83 e0 ef             	and    eax,0xffffffef
c001500b:	09 d0                	or     eax,edx
c001500d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015013:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001501a:	e8 4c f8 ff ff       	call   c001486b <cpuidCheckExtendedEBX(unsigned int)>
c001501f:	c1 e0 07             	shl    eax,0x7
c0015022:	88 c2                	mov    dl,al
c0015024:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001502a:	83 e0 7f             	and    eax,0x7f
c001502d:	09 d0                	or     eax,edx
c001502f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015035:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001503c:	e8 57 f8 ff ff       	call   c0014898 <cpuidCheckExtendedECX(unsigned int)>
c0015041:	83 e0 01             	and    eax,0x1
c0015044:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001504b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015051:	83 e0 f7             	and    eax,0xfffffff7
c0015054:	09 d0                	or     eax,edx
c0015056:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001505c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015063:	e8 30 f8 ff ff       	call   c0014898 <cpuidCheckExtendedECX(unsigned int)>
c0015068:	83 c4 10             	add    esp,0x10
c001506b:	83 e0 01             	and    eax,0x1
c001506e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015075:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001507b:	83 e0 fb             	and    eax,0xfffffffb
c001507e:	09 d0                	or     eax,edx
c0015080:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	56                   	push   esi
c001508a:	55                   	push   ebp
c001508b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001508f:	57                   	push   edi
c0015090:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015094:	50                   	push   eax
c0015095:	6a 01                	push   0x1
c0015097:	e8 f2 f6 ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001509c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150a6:	88 c1                	mov    cl,al
c00150a8:	83 e2 f0             	and    edx,0xfffffff0
c00150ab:	83 e1 0f             	and    ecx,0xf
c00150ae:	09 ca                	or     edx,ecx
c00150b0:	88 c1                	mov    cl,al
c00150b2:	c0 e9 04             	shr    cl,0x4
c00150b5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150bb:	0f b6 d1             	movzx  edx,cl
c00150be:	c1 e2 06             	shl    edx,0x6
c00150c1:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150c5:	89 d5                	mov    ebp,edx
c00150c7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150cd:	66 81 e2 3f c0       	and    dx,0xc03f
c00150d2:	83 c4 20             	add    esp,0x20
c00150d5:	09 ea                	or     edx,ebp
c00150d7:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150de:	89 c2                	mov    edx,eax
c00150e0:	c1 ea 08             	shr    edx,0x8
c00150e3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150e9:	83 e2 0f             	and    edx,0xf
c00150ec:	83 e1 3f             	and    ecx,0x3f
c00150ef:	89 d5                	mov    ebp,edx
c00150f1:	c1 e5 06             	shl    ebp,0x6
c00150f4:	09 cd                	or     ebp,ecx
c00150f6:	89 e9                	mov    ecx,ebp
c00150f8:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00150fe:	88 d1                	mov    cl,dl
c0015100:	c0 e9 02             	shr    cl,0x2
c0015103:	89 cd                	mov    ebp,ecx
c0015105:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001510b:	83 e1 c0             	and    ecx,0xffffffc0
c001510e:	09 cd                	or     ebp,ecx
c0015110:	89 e9                	mov    ecx,ebp
c0015112:	89 c5                	mov    ebp,eax
c0015114:	c1 ed 0c             	shr    ebp,0xc
c0015117:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001511d:	83 e5 03             	and    ebp,0x3
c0015120:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015126:	c1 e5 04             	shl    ebp,0x4
c0015129:	83 e1 cf             	and    ecx,0xffffffcf
c001512c:	09 cd                	or     ebp,ecx
c001512e:	80 fa 06             	cmp    dl,0x6
c0015131:	89 e9                	mov    ecx,ebp
c0015133:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015139:	74 05                	je     c0015140 <CPU::detectFeatures()+0x55a>
c001513b:	80 fa 0f             	cmp    dl,0xf
c001513e:	75 5d                	jne    c001519d <CPU::detectFeatures()+0x5b7>
c0015140:	89 c5                	mov    ebp,eax
c0015142:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015146:	c1 ed 10             	shr    ebp,0x10
c0015149:	c1 e5 04             	shl    ebp,0x4
c001514c:	09 e9                	or     ecx,ebp
c001514e:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015154:	0f b6 c9             	movzx  ecx,cl
c0015157:	c1 e1 06             	shl    ecx,0x6
c001515a:	66 81 e5 3f c0       	and    bp,0xc03f
c001515f:	09 e9                	or     ecx,ebp
c0015161:	80 fa 0f             	cmp    dl,0xf
c0015164:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001516b:	75 30                	jne    c001519d <CPU::detectFeatures()+0x5b7>
c001516d:	c1 e8 14             	shr    eax,0x14
c0015170:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015176:	83 c0 0f             	add    eax,0xf
c0015179:	83 e2 3f             	and    edx,0x3f
c001517c:	88 c1                	mov    cl,al
c001517e:	c1 e1 06             	shl    ecx,0x6
c0015181:	c0 e8 02             	shr    al,0x2
c0015184:	09 ca                	or     edx,ecx
c0015186:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001518c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0015192:	83 e2 c0             	and    edx,0xffffffc0
c0015195:	09 d0                	or     eax,edx
c0015197:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001519d:	83 ec 0c             	sub    esp,0xc
c00151a0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151a7:	56                   	push   esi
c00151a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151ac:	50                   	push   eax
c00151ad:	57                   	push   edi
c00151ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151b2:	55                   	push   ebp
c00151b3:	68 00 00 00 80       	push   0x80000000
c00151b8:	e8 d1 f5 ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151bd:	83 c4 20             	add    esp,0x20
c00151c0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151cc:	76 1e                	jbe    c00151ec <CPU::detectFeatures()+0x606>
c00151ce:	83 ec 0c             	sub    esp,0xc
c00151d1:	56                   	push   esi
c00151d2:	50                   	push   eax
c00151d3:	57                   	push   edi
c00151d4:	55                   	push   ebp
c00151d5:	68 01 00 00 80       	push   0x80000001
c00151da:	e8 af f5 ff ff       	call   c001478e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151df:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151e9:	83 c4 20             	add    esp,0x20
c00151ec:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00151f2:	83 f8 01             	cmp    eax,0x1
c00151f5:	75 6f                	jne    c0015266 <CPU::detectFeatures()+0x680>
c00151f7:	51                   	push   ecx
c00151f8:	51                   	push   ecx
c00151f9:	68 e6 26 02 c0       	push   0xc00226e6
c00151fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015202:	56                   	push   esi
c0015203:	e8 4c b5 fe ff       	call   c0000754 <strcpy>
c0015208:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001520e:	5f                   	pop    edi
c001520f:	66 c1 e8 06          	shr    ax,0x6
c0015213:	5d                   	pop    ebp
c0015214:	0f b6 c0             	movzx  eax,al
c0015217:	50                   	push   eax
c0015218:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001521e:	c1 e8 0e             	shr    eax,0xe
c0015221:	0f b6 c0             	movzx  eax,al
c0015224:	50                   	push   eax
c0015225:	e8 04 f2 ff ff       	call   c001442e <lookupIntelCPUName(unsigned char, unsigned char)>
c001522a:	5a                   	pop    edx
c001522b:	59                   	pop    ecx
c001522c:	50                   	push   eax
c001522d:	56                   	push   esi
c001522e:	e8 d8 b5 fe ff       	call   c000080b <strcat>
c0015233:	5f                   	pop    edi
c0015234:	5d                   	pop    ebp
c0015235:	56                   	push   esi
c0015236:	53                   	push   ebx
c0015237:	e8 c0 b5 ff ff       	call   c00107fc <Device::setName(char const*)>
c001523c:	58                   	pop    eax
c001523d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015243:	5a                   	pop    edx
c0015244:	68 ed 26 02 c0       	push   0xc00226ed
c0015249:	50                   	push   eax
c001524a:	e8 56 b5 fe ff       	call   c00007a5 <strcmp>
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	85 c0                	test   eax,eax
c0015254:	0f 85 53 03 00 00    	jne    c00155ad <CPU::detectFeatures()+0x9c7>
c001525a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015261:	e9 47 03 00 00       	jmp    c00155ad <CPU::detectFeatures()+0x9c7>
c0015266:	83 f8 02             	cmp    eax,0x2
c0015269:	0f 85 b5 00 00 00    	jne    c0015324 <CPU::detectFeatures()+0x73e>
c001526f:	57                   	push   edi
c0015270:	57                   	push   edi
c0015271:	68 ff 26 02 c0       	push   0xc00226ff
c0015276:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001527a:	56                   	push   esi
c001527b:	e8 d4 b4 fe ff       	call   c0000754 <strcpy>
c0015280:	5d                   	pop    ebp
c0015281:	58                   	pop    eax
c0015282:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015288:	66 c1 e8 06          	shr    ax,0x6
c001528c:	0f b6 c0             	movzx  eax,al
c001528f:	50                   	push   eax
c0015290:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015296:	c1 e8 0e             	shr    eax,0xe
c0015299:	0f b6 c0             	movzx  eax,al
c001529c:	50                   	push   eax
c001529d:	e8 e7 ef ff ff       	call   c0014289 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152a2:	5a                   	pop    edx
c00152a3:	59                   	pop    ecx
c00152a4:	50                   	push   eax
c00152a5:	56                   	push   esi
c00152a6:	e8 60 b5 fe ff       	call   c000080b <strcat>
c00152ab:	5f                   	pop    edi
c00152ac:	5d                   	pop    ebp
c00152ad:	56                   	push   esi
c00152ae:	53                   	push   ebx
c00152af:	e8 48 b5 ff ff       	call   c00107fc <Device::setName(char const*)>
c00152b4:	58                   	pop    eax
c00152b5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152bb:	5a                   	pop    edx
c00152bc:	68 04 27 02 c0       	push   0xc0022704
c00152c1:	50                   	push   eax
c00152c2:	e8 de b4 fe ff       	call   c00007a5 <strcmp>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	85 c0                	test   eax,eax
c00152cc:	75 20                	jne    c00152ee <CPU::detectFeatures()+0x708>
c00152ce:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c00152d4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152da:	a8 01                	test   al,0x1
c00152dc:	74 10                	je     c00152ee <CPU::detectFeatures()+0x708>
c00152de:	83 e0 fe             	and    eax,0xfffffffe
c00152e1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152e7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152f4:	c1 e8 0e             	shr    eax,0xe
c00152f7:	3c 05                	cmp    al,0x5
c00152f9:	0f 85 ae 02 00 00    	jne    c00155ad <CPU::detectFeatures()+0x9c7>
c00152ff:	56                   	push   esi
c0015300:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015306:	83 e0 0f             	and    eax,0xf
c0015309:	50                   	push   eax
c001530a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015310:	66 c1 e8 06          	shr    ax,0x6
c0015314:	0f b6 c0             	movzx  eax,al
c0015317:	50                   	push   eax
c0015318:	6a 05                	push   0x5
c001531a:	e8 fc f3 ff ff       	call   c001471b <AMD_K6_writeback(int, int, int)>
c001531f:	e9 ff 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x93d>
c0015324:	89 c1                	mov    ecx,eax
c0015326:	83 e1 fd             	and    ecx,0xfffffffd
c0015329:	83 f9 04             	cmp    ecx,0x4
c001532c:	74 09                	je     c0015337 <CPU::detectFeatures()+0x751>
c001532e:	83 f8 03             	cmp    eax,0x3
c0015331:	0f 85 6f 01 00 00    	jne    c00154a6 <CPU::detectFeatures()+0x8c0>
c0015337:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001533d:	c1 ea 0e             	shr    edx,0xe
c0015340:	80 fa 05             	cmp    dl,0x5
c0015343:	75 62                	jne    c00153a7 <CPU::detectFeatures()+0x7c1>
c0015345:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001534b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015350:	66 81 fa 00 01       	cmp    dx,0x100
c0015355:	75 0c                	jne    c0015363 <CPU::detectFeatures()+0x77d>
c0015357:	51                   	push   ecx
c0015358:	51                   	push   ecx
c0015359:	68 0b 27 02 c0       	push   0xc002270b
c001535e:	e9 ba 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015363:	66 81 fa 00 02       	cmp    dx,0x200
c0015368:	75 0c                	jne    c0015376 <CPU::detectFeatures()+0x790>
c001536a:	52                   	push   edx
c001536b:	52                   	push   edx
c001536c:	68 1e 27 02 c0       	push   0xc002271e
c0015371:	e9 a7 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015376:	66 81 fa 40 02       	cmp    dx,0x240
c001537b:	75 0c                	jne    c0015389 <CPU::detectFeatures()+0x7a3>
c001537d:	50                   	push   eax
c001537e:	50                   	push   eax
c001537f:	68 30 27 02 c0       	push   0xc0022730
c0015384:	e9 94 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015389:	83 f8 06             	cmp    eax,0x6
c001538c:	0f 84 ee 00 00 00    	je     c0015480 <CPU::detectFeatures()+0x89a>
c0015392:	83 f9 04             	cmp    ecx,0x4
c0015395:	0f 84 f6 00 00 00    	je     c0015491 <CPU::detectFeatures()+0x8ab>
c001539b:	50                   	push   eax
c001539c:	50                   	push   eax
c001539d:	68 56 27 02 c0       	push   0xc0022756
c00153a2:	e9 76 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c00153a7:	80 fa 06             	cmp    dl,0x6
c00153aa:	0f 85 cb 00 00 00    	jne    c001547b <CPU::detectFeatures()+0x895>
c00153b0:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153b6:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153bb:	66 81 fa 80 01       	cmp    dx,0x180
c00153c0:	75 0c                	jne    c00153ce <CPU::detectFeatures()+0x7e8>
c00153c2:	50                   	push   eax
c00153c3:	50                   	push   eax
c00153c4:	68 61 27 02 c0       	push   0xc0022761
c00153c9:	e9 4f 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c00153ce:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153d3:	74 07                	je     c00153dc <CPU::detectFeatures()+0x7f6>
c00153d5:	66 81 fa 00 02       	cmp    dx,0x200
c00153da:	75 0c                	jne    c00153e8 <CPU::detectFeatures()+0x802>
c00153dc:	50                   	push   eax
c00153dd:	50                   	push   eax
c00153de:	68 71 27 02 c0       	push   0xc0022771
c00153e3:	e9 35 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c00153e8:	66 81 fa 40 02       	cmp    dx,0x240
c00153ed:	75 0c                	jne    c00153fb <CPU::detectFeatures()+0x815>
c00153ef:	50                   	push   eax
c00153f0:	50                   	push   eax
c00153f1:	68 78 27 02 c0       	push   0xc0022778
c00153f6:	e9 22 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c00153fb:	66 81 fa 80 02       	cmp    dx,0x280
c0015400:	74 07                	je     c0015409 <CPU::detectFeatures()+0x823>
c0015402:	66 81 fa 40 03       	cmp    dx,0x340
c0015407:	75 0c                	jne    c0015415 <CPU::detectFeatures()+0x82f>
c0015409:	50                   	push   eax
c001540a:	50                   	push   eax
c001540b:	68 81 27 02 c0       	push   0xc0022781
c0015410:	e9 08 01 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015415:	66 81 fa c0 03       	cmp    dx,0x3c0
c001541a:	75 0c                	jne    c0015428 <CPU::detectFeatures()+0x842>
c001541c:	55                   	push   ebp
c001541d:	55                   	push   ebp
c001541e:	68 88 27 02 c0       	push   0xc0022788
c0015423:	e9 f5 00 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015428:	83 f8 06             	cmp    eax,0x6
c001542b:	74 53                	je     c0015480 <CPU::detectFeatures()+0x89a>
c001542d:	83 f9 04             	cmp    ecx,0x4
c0015430:	74 5f                	je     c0015491 <CPU::detectFeatures()+0x8ab>
c0015432:	57                   	push   edi
c0015433:	57                   	push   edi
c0015434:	68 91 27 02 c0       	push   0xc0022791
c0015439:	53                   	push   ebx
c001543a:	e8 bd b3 ff ff       	call   c00107fc <Device::setName(char const*)>
c001543f:	b1 c1                	mov    cl,0xc1
c0015441:	88 c8                	mov    al,cl
c0015443:	e6 22                	out    0x22,al
c0015445:	e4 23                	in     al,0x23
c0015447:	88 c2                	mov    dl,al
c0015449:	88 c8                	mov    al,cl
c001544b:	e6 22                	out    0x22,al
c001544d:	88 d0                	mov    al,dl
c001544f:	83 c8 10             	or     eax,0x10
c0015452:	e6 23                	out    0x23,al
c0015454:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001545b:	89 d0                	mov    eax,edx
c001545d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015460:	40                   	inc    eax
c0015461:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015467:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001546b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015471:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015476:	e9 a8 00 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x93d>
c001547b:	83 f8 06             	cmp    eax,0x6
c001547e:	75 0c                	jne    c001548c <CPU::detectFeatures()+0x8a6>
c0015480:	56                   	push   esi
c0015481:	56                   	push   esi
c0015482:	68 42 27 02 c0       	push   0xc0022742
c0015487:	e9 91 00 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c001548c:	83 f9 04             	cmp    ecx,0x4
c001548f:	75 0c                	jne    c001549d <CPU::detectFeatures()+0x8b7>
c0015491:	51                   	push   ecx
c0015492:	51                   	push   ecx
c0015493:	68 4e 27 02 c0       	push   0xc002274e
c0015498:	e9 80 00 00 00       	jmp    c001551d <CPU::detectFeatures()+0x937>
c001549d:	52                   	push   edx
c001549e:	52                   	push   edx
c001549f:	68 9c 27 02 c0       	push   0xc002279c
c00154a4:	eb 77                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154a6:	83 f8 07             	cmp    eax,0x7
c00154a9:	75 09                	jne    c00154b4 <CPU::detectFeatures()+0x8ce>
c00154ab:	50                   	push   eax
c00154ac:	50                   	push   eax
c00154ad:	68 a6 27 02 c0       	push   0xc00227a6
c00154b2:	eb 69                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154b4:	83 f8 0a             	cmp    eax,0xa
c00154b7:	75 09                	jne    c00154c2 <CPU::detectFeatures()+0x8dc>
c00154b9:	50                   	push   eax
c00154ba:	50                   	push   eax
c00154bb:	68 b1 27 02 c0       	push   0xc00227b1
c00154c0:	eb 5b                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154c2:	83 f8 0b             	cmp    eax,0xb
c00154c5:	75 09                	jne    c00154d0 <CPU::detectFeatures()+0x8ea>
c00154c7:	50                   	push   eax
c00154c8:	50                   	push   eax
c00154c9:	68 b9 27 02 c0       	push   0xc00227b9
c00154ce:	eb 4d                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154d0:	83 f8 08             	cmp    eax,0x8
c00154d3:	75 09                	jne    c00154de <CPU::detectFeatures()+0x8f8>
c00154d5:	50                   	push   eax
c00154d6:	50                   	push   eax
c00154d7:	68 c2 27 02 c0       	push   0xc00227c2
c00154dc:	eb 3f                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154de:	83 f8 09             	cmp    eax,0x9
c00154e1:	75 09                	jne    c00154ec <CPU::detectFeatures()+0x906>
c00154e3:	50                   	push   eax
c00154e4:	50                   	push   eax
c00154e5:	68 ca 27 02 c0       	push   0xc00227ca
c00154ea:	eb 31                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154ec:	83 f8 05             	cmp    eax,0x5
c00154ef:	75 09                	jne    c00154fa <CPU::detectFeatures()+0x914>
c00154f1:	50                   	push   eax
c00154f2:	50                   	push   eax
c00154f3:	68 d2 27 02 c0       	push   0xc00227d2
c00154f8:	eb 23                	jmp    c001551d <CPU::detectFeatures()+0x937>
c00154fa:	83 f8 0c             	cmp    eax,0xc
c00154fd:	75 09                	jne    c0015508 <CPU::detectFeatures()+0x922>
c00154ff:	55                   	push   ebp
c0015500:	55                   	push   ebp
c0015501:	68 e0 27 02 c0       	push   0xc00227e0
c0015506:	eb 15                	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015508:	83 f8 0d             	cmp    eax,0xd
c001550b:	75 09                	jne    c0015516 <CPU::detectFeatures()+0x930>
c001550d:	57                   	push   edi
c001550e:	57                   	push   edi
c001550f:	68 eb 27 02 c0       	push   0xc00227eb
c0015514:	eb 07                	jmp    c001551d <CPU::detectFeatures()+0x937>
c0015516:	56                   	push   esi
c0015517:	56                   	push   esi
c0015518:	68 ff 27 02 c0       	push   0xc00227ff
c001551d:	53                   	push   ebx
c001551e:	e8 d9 b2 ff ff       	call   c00107fc <Device::setName(char const*)>
c0015523:	83 c4 10             	add    esp,0x10
c0015526:	e9 82 00 00 00       	jmp    c00155ad <CPU::detectFeatures()+0x9c7>
c001552b:	51                   	push   ecx
c001552c:	51                   	push   ecx
c001552d:	68 4b 26 02 c0       	push   0xc002264b
c0015532:	57                   	push   edi
c0015533:	e8 1c b2 fe ff       	call   c0000754 <strcpy>
c0015538:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015542:	e8 e0 ac fe ff       	call   c0000227 <is486>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	85 c0                	test   eax,eax
c001554c:	74 2d                	je     c001557b <CPU::detectFeatures()+0x995>
c001554e:	52                   	push   edx
c001554f:	52                   	push   edx
c0015550:	68 0b 28 02 c0       	push   0xc002280b
c0015555:	53                   	push   ebx
c0015556:	e8 a1 b2 ff ff       	call   c00107fc <Device::setName(char const*)>
c001555b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015562:	e8 e1 a5 00 00       	call   c001fb48 <CPU::readCR0()>
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	83 e0 14             	and    eax,0x14
c001556d:	83 f8 04             	cmp    eax,0x4
c0015570:	75 1f                	jne    c0015591 <CPU::detectFeatures()+0x9ab>
c0015572:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015579:	eb 32                	jmp    c00155ad <CPU::detectFeatures()+0x9c7>
c001557b:	50                   	push   eax
c001557c:	50                   	push   eax
c001557d:	68 16 28 02 c0       	push   0xc0022816
c0015582:	53                   	push   ebx
c0015583:	e8 74 b2 ff ff       	call   c00107fc <Device::setName(char const*)>
c0015588:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001558f:	eb d1                	jmp    c0015562 <CPU::detectFeatures()+0x97c>
c0015591:	e8 6c ac fe ff       	call   c0000202 <hasLegacyFPU>
c0015596:	83 e0 01             	and    eax,0x1
c0015599:	8d 14 00             	lea    edx,[eax+eax*1]
c001559c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155a2:	83 e0 fd             	and    eax,0xfffffffd
c00155a5:	09 d0                	or     eax,edx
c00155a7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155ad:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155b4:	83 c4 4c             	add    esp,0x4c
c00155b7:	5b                   	pop    ebx
c00155b8:	5e                   	pop    esi
c00155b9:	5f                   	pop    edi
c00155ba:	5d                   	pop    ebp
c00155bb:	c3                   	ret    

c00155bc <CPU::setupSMEP()>:
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	e8 4e a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155c4:	0d 00 00 10 00       	or     eax,0x100000
c00155c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155cd:	83 c4 0c             	add    esp,0xc
c00155d0:	e9 58 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c00155d5:	90                   	nop

c00155d6 <CPU::setupUMIP()>:
c00155d6:	83 ec 0c             	sub    esp,0xc
c00155d9:	e8 34 a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155de:	80 cc 08             	or     ah,0x8
c00155e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155e5:	83 c4 0c             	add    esp,0xc
c00155e8:	e9 40 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c00155ed:	90                   	nop

c00155ee <CPU::setupTSC()>:
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	e8 1c a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155f6:	83 c8 04             	or     eax,0x4
c00155f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155fd:	83 c4 0c             	add    esp,0xc
c0015600:	e9 28 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c0015605:	90                   	nop

c0015606 <CPU::setupLargePages()>:
c0015606:	83 ec 0c             	sub    esp,0xc
c0015609:	e8 04 a8 00 00       	call   c001fe12 <CPU::readCR4()>
c001560e:	83 c8 10             	or     eax,0x10
c0015611:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015615:	83 c4 0c             	add    esp,0xc
c0015618:	e9 10 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c001561d:	90                   	nop

c001561e <CPU::setupPAT()>:
c001561e:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0015623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001562a:	74 2c                	je     c0015658 <CPU::setupPAT()+0x3a>
c001562c:	53                   	push   ebx
c001562d:	83 ec 10             	sub    esp,0x10
c0015630:	68 77 02 00 00       	push   0x277
c0015635:	50                   	push   eax
c0015636:	e8 35 5f ff ff       	call   c000b570 <Computer::rdmsr(unsigned int)>
c001563b:	83 e2 f8             	and    edx,0xfffffff8
c001563e:	83 ca 01             	or     edx,0x1
c0015641:	52                   	push   edx
c0015642:	50                   	push   eax
c0015643:	68 77 02 00 00       	push   0x277
c0015648:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c001564e:	e8 49 5f ff ff       	call   c000b59c <Computer::wrmsr(unsigned int, unsigned long long)>
c0015653:	83 c4 28             	add    esp,0x28
c0015656:	5b                   	pop    ebx
c0015657:	c3                   	ret    
c0015658:	c3                   	ret    
c0015659:	90                   	nop

c001565a <CPU::setupMTRR()>:
c001565a:	c3                   	ret    
c001565b:	90                   	nop

c001565c <CPU::setupGlobalPages()>:
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	e8 ae a7 00 00       	call   c001fe12 <CPU::readCR4()>
c0015664:	0c 80                	or     al,0x80
c0015666:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001566a:	83 c4 0c             	add    esp,0xc
c001566d:	e9 bb a7 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>

c0015672 <CPU::allowUsermodeDataAccess()>:
c0015672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015676:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001567d:	74 03                	je     c0015682 <CPU::allowUsermodeDataAccess()+0x10>
c001567f:	0f 01 cb             	stac   
c0015682:	c3                   	ret    
c0015683:	90                   	nop

c0015684 <CPU::prohibitUsermodeDataAccess()>:
c0015684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015688:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001568f:	74 03                	je     c0015694 <CPU::prohibitUsermodeDataAccess()+0x10>
c0015691:	0f 01 ca             	clac   
c0015694:	c3                   	ret    
c0015695:	90                   	nop

c0015696 <CPU::setupSMAP()>:
c0015696:	53                   	push   ebx
c0015697:	83 ec 08             	sub    esp,0x8
c001569a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001569e:	e8 6f a7 00 00       	call   c001fe12 <CPU::readCR4()>
c00156a3:	83 ec 0c             	sub    esp,0xc
c00156a6:	0d 00 00 20 00       	or     eax,0x200000
c00156ab:	50                   	push   eax
c00156ac:	e8 7c a7 00 00       	call   c001fe2d <CPU::writeCR4(unsigned long)>
c00156b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156b5:	83 c4 18             	add    esp,0x18
c00156b8:	5b                   	pop    ebx
c00156b9:	eb c9                	jmp    c0015684 <CPU::prohibitUsermodeDataAccess()>
c00156bb:	90                   	nop

c00156bc <CPU::setupFeatures()>:
c00156bc:	53                   	push   ebx
c00156bd:	83 ec 08             	sub    esp,0x8
c00156c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156c4:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156cb:	74 0c                	je     c00156d9 <CPU::setupFeatures()+0x1d>
c00156cd:	83 ec 0c             	sub    esp,0xc
c00156d0:	53                   	push   ebx
c00156d1:	e8 e6 fe ff ff       	call   c00155bc <CPU::setupSMEP()>
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156e0:	74 0c                	je     c00156ee <CPU::setupFeatures()+0x32>
c00156e2:	83 ec 0c             	sub    esp,0xc
c00156e5:	53                   	push   ebx
c00156e6:	e8 ab ff ff ff       	call   c0015696 <CPU::setupSMAP()>
c00156eb:	83 c4 10             	add    esp,0x10
c00156ee:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00156f5:	74 0c                	je     c0015703 <CPU::setupFeatures()+0x47>
c00156f7:	83 ec 0c             	sub    esp,0xc
c00156fa:	53                   	push   ebx
c00156fb:	e8 d6 fe ff ff       	call   c00155d6 <CPU::setupUMIP()>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001570a:	74 0c                	je     c0015718 <CPU::setupFeatures()+0x5c>
c001570c:	83 ec 0c             	sub    esp,0xc
c001570f:	53                   	push   ebx
c0015710:	e8 d9 fe ff ff       	call   c00155ee <CPU::setupTSC()>
c0015715:	83 c4 10             	add    esp,0x10
c0015718:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001571f:	74 0c                	je     c001572d <CPU::setupFeatures()+0x71>
c0015721:	83 ec 0c             	sub    esp,0xc
c0015724:	53                   	push   ebx
c0015725:	e8 dc fe ff ff       	call   c0015606 <CPU::setupLargePages()>
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015734:	74 0c                	je     c0015742 <CPU::setupFeatures()+0x86>
c0015736:	83 ec 0c             	sub    esp,0xc
c0015739:	53                   	push   ebx
c001573a:	e8 1d ff ff ff       	call   c001565c <CPU::setupGlobalPages()>
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015749:	74 0d                	je     c0015758 <CPU::setupFeatures()+0x9c>
c001574b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001574f:	83 c4 08             	add    esp,0x8
c0015752:	5b                   	pop    ebx
c0015753:	e9 c6 fe ff ff       	jmp    c001561e <CPU::setupPAT()>
c0015758:	83 c4 08             	add    esp,0x8
c001575b:	5b                   	pop    ebx
c001575c:	c3                   	ret    
c001575d:	90                   	nop

c001575e <CPU::open(int, int, void*)>:
c001575e:	57                   	push   edi
c001575f:	56                   	push   esi
c0015760:	53                   	push   ebx
c0015761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015765:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015769:	83 ec 0c             	sub    esp,0xc
c001576c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015772:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015778:	50                   	push   eax
c0015779:	e8 e2 60 ff ff       	call   c000b860 <GDT::setup()>
c001577e:	83 c4 0c             	add    esp,0xc
c0015781:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015787:	6a 00                	push   0x0
c0015789:	68 ef be ad de       	push   0xdeadbeef
c001578e:	57                   	push   edi
c001578f:	e8 62 83 ff ff       	call   c000daf6 <TSS::setup(unsigned long, unsigned long)>
c0015794:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015797:	e8 3a 83 ff ff       	call   c000dad6 <TSS::flush()>
c001579c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00157a5:	e8 10 63 ff ff       	call   c000baba <IDT::setup()>
c00157aa:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157b1:	e8 6e a6 00 00       	call   c001fe24 <CPU::writeDR7(unsigned long)>
c00157b6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157c0:	e8 e4 6d ff ff       	call   c000c5a9 <Phys::allocatePage()>
c00157c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157cb:	89 30                	mov    DWORD PTR [eax],esi
c00157cd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157d6:	58                   	pop    eax
c00157d7:	5a                   	pop    edx
c00157d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157e2:	e8 a3 93 ff ff       	call   c000eb8a <VAS::setCPUSpecific(unsigned long)>
c00157e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157ea:	e8 f7 f3 ff ff       	call   c0014be6 <CPU::detectFeatures()>
c00157ef:	e8 22 c3 ff ff       	call   c0011b16 <setupInterruptController()>
c00157f4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00157fa:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c00157ff:	83 e0 10             	and    eax,0x10
c0015802:	83 f8 01             	cmp    eax,0x1
c0015805:	19 c0                	sbb    eax,eax
c0015807:	83 e0 46             	and    eax,0x46
c001580a:	83 c0 1e             	add    eax,0x1e
c001580d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015810:	e8 a7 d6 ff ff       	call   c0012ebc <setupTimer(int)>
c0015815:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001581b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001581e:	e8 99 fe ff ff       	call   c00156bc <CPU::setupFeatures()>
c0015823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015826:	e8 3f f1 ff ff       	call   c001496a <CPU::displayFeatures()>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	5b                   	pop    ebx
c001582f:	31 c0                	xor    eax,eax
c0015831:	5e                   	pop    esi
c0015832:	5f                   	pop    edi
c0015833:	c3                   	ret    

c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015834:	56                   	push   esi
c0015835:	53                   	push   ebx
c0015836:	51                   	push   ecx
c0015837:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001583b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001583f:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015842:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015845:	88 c1                	mov    cl,al
c0015847:	c0 e9 06             	shr    cl,0x6
c001584a:	88 0c 24             	mov    BYTE PTR [esp],cl
c001584d:	88 c1                	mov    cl,al
c001584f:	66 c1 e8 03          	shr    ax,0x3
c0015853:	83 e1 07             	and    ecx,0x7
c0015856:	83 e0 07             	and    eax,0x7
c0015859:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001585d:	88 06                	mov    BYTE PTR [esi],al
c001585f:	74 7f                	je     c00158e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015861:	80 f9 04             	cmp    cl,0x4
c0015864:	74 7a                	je     c00158e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015866:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001586a:	75 05                	jne    c0015871 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001586c:	80 f9 05             	cmp    cl,0x5
c001586f:	74 6f                	je     c00158e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015871:	84 c9                	test   cl,cl
c0015873:	75 05                	jne    c001587a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015875:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015878:	eb 3c                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001587a:	80 f9 01             	cmp    cl,0x1
c001587d:	75 05                	jne    c0015884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001587f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015882:	eb 32                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015884:	80 f9 02             	cmp    cl,0x2
c0015887:	75 05                	jne    c001588e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015889:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001588c:	eb 28                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001588e:	31 c0                	xor    eax,eax
c0015890:	80 f9 03             	cmp    cl,0x3
c0015893:	75 05                	jne    c001589a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c0015895:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015898:	eb 1c                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001589a:	80 f9 05             	cmp    cl,0x5
c001589d:	75 05                	jne    c00158a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c001589f:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158a2:	eb 12                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a4:	80 f9 06             	cmp    cl,0x6
c00158a7:	75 05                	jne    c00158ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158a9:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158ac:	eb 08                	jmp    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158ae:	80 f9 07             	cmp    cl,0x7
c00158b1:	75 03                	jne    c00158b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158b6:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158ba:	75 10                	jne    c00158cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158bc:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158c0:	b9 03 00 00 00       	mov    ecx,0x3
c00158c5:	01 d0                	add    eax,edx
c00158c7:	e9 42 01 00 00       	jmp    c0015a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158cc:	b9 02 00 00 00       	mov    ecx,0x2
c00158d1:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158d5:	0f 85 33 01 00 00    	jne    c0015a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158db:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158de:	eb 18                	jmp    c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158e0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158e4:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158e9:	80 f9 05             	cmp    cl,0x5
c00158ec:	0f 94 c0             	sete   al
c00158ef:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00158f3:	74 0d                	je     c0015902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00158f5:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00158f8:	b9 06 00 00 00       	mov    ecx,0x6
c00158fd:	e9 0c 01 00 00       	jmp    c0015a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015902:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015906:	0f 84 06 01 00 00    	je     c0015a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001590c:	80 f9 04             	cmp    cl,0x4
c001590f:	0f 85 06 01 00 00    	jne    c0015a1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015915:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015918:	89 c6                	mov    esi,eax
c001591a:	88 c1                	mov    cl,al
c001591c:	66 c1 ee 03          	shr    si,0x3
c0015920:	c0 e9 06             	shr    cl,0x6
c0015923:	83 e6 07             	and    esi,0x7
c0015926:	24 07                	and    al,0x7
c0015928:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001592c:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015930:	89 f1                	mov    ecx,esi
c0015932:	75 05                	jne    c0015939 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015934:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015937:	eb 4b                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015939:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001593e:	75 05                	jne    c0015945 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015940:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015943:	eb 3f                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015945:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001594a:	75 05                	jne    c0015951 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001594c:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001594f:	eb 33                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015951:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015956:	75 05                	jne    c001595d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015958:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001595b:	eb 27                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001595d:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015962:	75 05                	jne    c0015969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015964:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015967:	eb 1b                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015969:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001596e:	75 05                	jne    c0015975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015970:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015973:	eb 0f                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015975:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c001597a:	75 05                	jne    c0015981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001597c:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001597f:	eb 03                	jmp    c0015984 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015981:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015984:	84 c9                	test   cl,cl
c0015986:	75 05                	jne    c001598d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015988:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001598b:	eb 3c                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001598d:	80 f9 01             	cmp    cl,0x1
c0015990:	75 05                	jne    c0015997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0015992:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015995:	eb 32                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015997:	80 f9 02             	cmp    cl,0x2
c001599a:	75 05                	jne    c00159a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001599c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001599f:	eb 28                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a1:	80 f9 03             	cmp    cl,0x3
c00159a4:	75 05                	jne    c00159ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159a6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159a9:	eb 1e                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ab:	31 c0                	xor    eax,eax
c00159ad:	80 f9 04             	cmp    cl,0x4
c00159b0:	74 17                	je     c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b2:	80 f9 05             	cmp    cl,0x5
c00159b5:	75 05                	jne    c00159bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159b7:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159ba:	eb 0d                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159bc:	80 f9 06             	cmp    cl,0x6
c00159bf:	75 05                	jne    c00159c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159c1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159c4:	eb 03                	jmp    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c6:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159c9:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159ce:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159d2:	0f 94 c2             	sete   dl
c00159d5:	d3 e0                	shl    eax,cl
c00159d7:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159db:	74 07                	je     c00159e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159dd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159e0:	31 d2                	xor    edx,edx
c00159e2:	eb 23                	jmp    c0015a07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159e4:	01 f0                	add    eax,esi
c00159e6:	b9 03 00 00 00       	mov    ecx,0x3
c00159eb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159ef:	74 33                	je     c0015a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159f1:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00159f5:	75 0d                	jne    c0015a04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00159f7:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00159fb:	01 c8                	add    eax,ecx
c00159fd:	b9 04 00 00 00       	mov    ecx,0x4
c0015a02:	eb 20                	jmp    c0015a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a04:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a07:	b9 07 00 00 00       	mov    ecx,0x7
c0015a0c:	eb 16                	jmp    c0015a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a0e:	31 d2                	xor    edx,edx
c0015a10:	eb 12                	jmp    c0015a24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a12:	b9 02 00 00 00       	mov    ecx,0x2
c0015a17:	b2 01                	mov    dl,0x1
c0015a19:	eb 07                	jmp    c0015a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a1b:	31 d2                	xor    edx,edx
c0015a1d:	b9 02 00 00 00       	mov    ecx,0x2
c0015a22:	31 c0                	xor    eax,eax
c0015a24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a28:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a2a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a2e:	88 11                	mov    BYTE PTR [ecx],dl
c0015a30:	5a                   	pop    edx
c0015a31:	5b                   	pop    ebx
c0015a32:	5e                   	pop    esi
c0015a33:	c3                   	ret    

c0015a34 <Krnl::panic(char const*)>:
c0015a34:	55                   	push   ebp
c0015a35:	89 e5                	mov    ebp,esp
c0015a37:	53                   	push   ebx
c0015a38:	51                   	push   ecx
c0015a39:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015a3e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a41:	85 c0                	test   eax,eax
c0015a43:	74 02                	je     c0015a47 <Krnl::panic(char const*)+0x13>
c0015a45:	ff d0                	call   eax
c0015a47:	fa                   	cli    
c0015a48:	50                   	push   eax
c0015a49:	c6 05 d4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251d4,0x1
c0015a50:	50                   	push   eax
c0015a51:	c6 05 c0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023bc0,0x0
c0015a58:	53                   	push   ebx
c0015a59:	68 50 28 02 c0       	push   0xc0022850
c0015a5e:	e8 a2 97 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0015a63:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a68:	5a                   	pop    edx
c0015a69:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a6f:	51                   	push   ecx
c0015a70:	e8 c0 78 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c0015a75:	83 c4 0c             	add    esp,0xc
c0015a78:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a7d:	6a 01                	push   0x1
c0015a7f:	6a 0f                	push   0xf
c0015a81:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a87:	50                   	push   eax
c0015a88:	e8 e7 72 ff ff       	call   c000cd74 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a8d:	58                   	pop    eax
c0015a8e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a93:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a99:	50                   	push   eax
c0015a9a:	e8 39 7b ff ff       	call   c000d5d8 <VgaText::clearScreen()>
c0015a9f:	58                   	pop    eax
c0015aa0:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015aa5:	5a                   	pop    edx
c0015aa6:	68 69 28 02 c0       	push   0xc0022869
c0015aab:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ab1:	51                   	push   ecx
c0015ab2:	e8 9f 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015ab7:	58                   	pop    eax
c0015ab8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015abd:	5a                   	pop    edx
c0015abe:	68 10 29 02 c0       	push   0xc0022910
c0015ac3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ac9:	51                   	push   ecx
c0015aca:	e8 87 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015acf:	58                   	pop    eax
c0015ad0:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015ad5:	5a                   	pop    edx
c0015ad6:	68 85 28 02 c0       	push   0xc0022885
c0015adb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae1:	51                   	push   ecx
c0015ae2:	e8 6f 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015ae7:	58                   	pop    eax
c0015ae8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015aed:	5a                   	pop    edx
c0015aee:	53                   	push   ebx
c0015aef:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015af5:	51                   	push   ecx
c0015af6:	e8 5b 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015afb:	5b                   	pop    ebx
c0015afc:	58                   	pop    eax
c0015afd:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b02:	68 a5 28 02 c0       	push   0xc00228a5
c0015b07:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b0d:	50                   	push   eax
c0015b0e:	e8 43 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b13:	58                   	pop    eax
c0015b14:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b19:	5a                   	pop    edx
c0015b1a:	68 4c 29 02 c0       	push   0xc002294c
c0015b1f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b25:	51                   	push   ecx
c0015b26:	e8 2b 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b2b:	5b                   	pop    ebx
c0015b2c:	58                   	pop    eax
c0015b2d:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b32:	68 85 28 02 c0       	push   0xc0022885
c0015b37:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b3d:	50                   	push   eax
c0015b3e:	e8 13 7c ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b43:	58                   	pop    eax
c0015b44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b49:	5a                   	pop    edx
c0015b4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b4d:	83 c0 0c             	add    eax,0xc
c0015b50:	50                   	push   eax
c0015b51:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b56:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b5c:	51                   	push   ecx
c0015b5d:	e8 f4 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b62:	5b                   	pop    ebx
c0015b63:	58                   	pop    eax
c0015b64:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b69:	68 a4 28 02 c0       	push   0xc00228a4
c0015b6e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b74:	50                   	push   eax
c0015b75:	e8 dc 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b7a:	58                   	pop    eax
c0015b7b:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b80:	5a                   	pop    edx
c0015b81:	68 78 29 02 c0       	push   0xc0022978
c0015b86:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b8c:	51                   	push   ecx
c0015b8d:	e8 c4 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015b92:	5b                   	pop    ebx
c0015b93:	58                   	pop    eax
c0015b94:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b99:	68 b8 29 02 c0       	push   0xc00229b8
c0015b9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ba4:	50                   	push   eax
c0015ba5:	e8 ac 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015baa:	58                   	pop    eax
c0015bab:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015bb0:	5a                   	pop    edx
c0015bb1:	68 90 28 02 c0       	push   0xc0022890
c0015bb6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bbc:	51                   	push   ecx
c0015bbd:	e8 94 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015bc2:	5b                   	pop    ebx
c0015bc3:	58                   	pop    eax
c0015bc4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bc7:	50                   	push   eax
c0015bc8:	68 a8 28 02 c0       	push   0xc00228a8
c0015bcd:	e8 33 96 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0015bd2:	58                   	pop    eax
c0015bd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bd6:	5a                   	pop    edx
c0015bd7:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bda:	51                   	push   ecx
c0015bdb:	68 b1 28 02 c0       	push   0xc00228b1
c0015be0:	e8 20 96 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0015be5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015be8:	5b                   	pop    ebx
c0015be9:	5a                   	pop    edx
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bef:	51                   	push   ecx
c0015bf0:	68 ba 28 02 c0       	push   0xc00228ba
c0015bf5:	e8 0b 96 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0015bfa:	5b                   	pop    ebx
c0015bfb:	58                   	pop    eax
c0015bfc:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c01:	68 fc 29 02 c0       	push   0xc00229fc
c0015c06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c0c:	50                   	push   eax
c0015c0d:	e8 44 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015c12:	58                   	pop    eax
c0015c13:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c18:	5a                   	pop    edx
c0015c19:	68 c3 28 02 c0       	push   0xc00228c3
c0015c1e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c24:	51                   	push   ecx
c0015c25:	e8 2c 7b ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015c2a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c2f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c35:	e8 0e 9f 00 00       	call   c001fb48 <CPU::readCR0()>
c0015c3a:	5a                   	pop    edx
c0015c3b:	59                   	pop    ecx
c0015c3c:	50                   	push   eax
c0015c3d:	53                   	push   ebx
c0015c3e:	e8 39 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015c43:	5b                   	pop    ebx
c0015c44:	58                   	pop    eax
c0015c45:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c4a:	68 cd 28 02 c0       	push   0xc00228cd
c0015c4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c55:	50                   	push   eax
c0015c56:	e8 fb 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015c5b:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c60:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c66:	e8 cb a1 00 00       	call   c001fe36 <CPU::readCR2()>
c0015c6b:	5a                   	pop    edx
c0015c6c:	59                   	pop    ecx
c0015c6d:	50                   	push   eax
c0015c6e:	53                   	push   ebx
c0015c6f:	e8 08 7b ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015c74:	5b                   	pop    ebx
c0015c75:	58                   	pop    eax
c0015c76:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c7b:	68 d7 28 02 c0       	push   0xc00228d7
c0015c80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c86:	50                   	push   eax
c0015c87:	e8 ca 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015c8c:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c91:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c97:	e8 39 9b 00 00       	call   c001f7d5 <CPU::readCR3()>
c0015c9c:	5a                   	pop    edx
c0015c9d:	59                   	pop    ecx
c0015c9e:	50                   	push   eax
c0015c9f:	53                   	push   ebx
c0015ca0:	e8 d7 7a ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015ca5:	5b                   	pop    ebx
c0015ca6:	58                   	pop    eax
c0015ca7:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cac:	68 ea 28 02 c0       	push   0xc00228ea
c0015cb1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cb7:	50                   	push   eax
c0015cb8:	e8 99 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015cbd:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cc2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cc8:	e8 45 a1 00 00       	call   c001fe12 <CPU::readCR4()>
c0015ccd:	5a                   	pop    edx
c0015cce:	59                   	pop    ecx
c0015ccf:	50                   	push   eax
c0015cd0:	53                   	push   ebx
c0015cd1:	e8 a6 7a ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015cd6:	5b                   	pop    ebx
c0015cd7:	58                   	pop    eax
c0015cd8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cdd:	68 f4 28 02 c0       	push   0xc00228f4
c0015ce2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ce8:	50                   	push   eax
c0015ce9:	e8 68 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015cee:	5a                   	pop    edx
c0015cef:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cf4:	59                   	pop    ecx
c0015cf5:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015cf8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cfe:	53                   	push   ebx
c0015cff:	50                   	push   eax
c0015d00:	e8 77 7a ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015d05:	58                   	pop    eax
c0015d06:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d0b:	5a                   	pop    edx
c0015d0c:	68 0b 29 02 c0       	push   0xc002290b
c0015d11:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d17:	51                   	push   ecx
c0015d18:	e8 39 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015d1d:	5b                   	pop    ebx
c0015d1e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d23:	5a                   	pop    edx
c0015d24:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d27:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d2d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d30:	51                   	push   ecx
c0015d31:	50                   	push   eax
c0015d32:	e8 45 7a ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015d37:	5b                   	pop    ebx
c0015d38:	58                   	pop    eax
c0015d39:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d3e:	68 0b 29 02 c0       	push   0xc002290b
c0015d43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d49:	50                   	push   eax
c0015d4a:	e8 07 7a ff ff       	call   c000d756 <VgaText::puts(char const*)>
c0015d4f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d52:	59                   	pop    ecx
c0015d53:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d58:	5b                   	pop    ebx
c0015d59:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d61:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d64:	52                   	push   edx
c0015d65:	50                   	push   eax
c0015d66:	e8 11 7a ff ff       	call   c000d77c <VgaText::putx(unsigned int)>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	b2 fe                	mov    dl,0xfe
c0015d70:	e4 60                	in     al,0x60
c0015d72:	3c 1c                	cmp    al,0x1c
c0015d74:	74 04                	je     c0015d7a <Krnl::panic(char const*)+0x346>
c0015d76:	3c 5a                	cmp    al,0x5a
c0015d78:	75 f6                	jne    c0015d70 <Krnl::panic(char const*)+0x33c>
c0015d7a:	e4 64                	in     al,0x64
c0015d7c:	a8 02                	test   al,0x2
c0015d7e:	75 fa                	jne    c0015d7a <Krnl::panic(char const*)+0x346>
c0015d80:	88 d0                	mov    al,dl
c0015d82:	e6 64                	out    0x64,al
c0015d84:	fa                   	cli    
c0015d85:	f4                   	hlt    
c0015d86:	eb e8                	jmp    c0015d70 <Krnl::panic(char const*)+0x33c>

c0015d88 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d88:	55                   	push   ebp
c0015d89:	57                   	push   edi
c0015d8a:	56                   	push   esi
c0015d8b:	53                   	push   ebx
c0015d8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d92:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015d99:	8d 46 01             	lea    eax,[esi+0x1]
c0015d9c:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015d9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015da2:	80 fb 40             	cmp    bl,0x40
c0015da5:	75 19                	jne    c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015da7:	8a 06                	mov    al,BYTE PTR [esi]
c0015da9:	84 c0                	test   al,al
c0015dab:	74 07                	je     c0015db4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dad:	3c 3a                	cmp    al,0x3a
c0015daf:	74 03                	je     c0015db4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015db1:	46                   	inc    esi
c0015db2:	eb f3                	jmp    c0015da7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015db4:	84 c0                	test   al,al
c0015db6:	0f 84 1f 01 00 00    	je     c0015edb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dbc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dbf:	46                   	inc    esi
c0015dc0:	50                   	push   eax
c0015dc1:	6a 40                	push   0x40
c0015dc3:	6a 00                	push   0x0
c0015dc5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dc9:	50                   	push   eax
c0015dca:	e8 e6 a8 fe ff       	call   c00006b5 <memset>
c0015dcf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015dd6:	31 d2                	xor    edx,edx
c0015dd8:	83 c4 10             	add    esp,0x10
c0015ddb:	8a 07                	mov    al,BYTE PTR [edi]
c0015ddd:	84 c0                	test   al,al
c0015ddf:	0f 84 f6 00 00 00    	je     c0015edb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015de5:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015deb:	0f 8f ea 00 00 00    	jg     c0015edb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015df1:	3c 0a                	cmp    al,0xa
c0015df3:	0f 85 d3 00 00 00    	jne    c0015ecc <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015df9:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015dfe:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e02:	f6 c1 df             	test   cl,0xdf
c0015e05:	0f 94 c2             	sete   dl
c0015e08:	80 f9 23             	cmp    cl,0x23
c0015e0b:	0f 94 c0             	sete   al
c0015e0e:	08 c2                	or     dl,al
c0015e10:	75 47                	jne    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e12:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e15:	3c 01                	cmp    al,0x1
c0015e17:	76 40                	jbe    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e19:	80 f9 5b             	cmp    cl,0x5b
c0015e1c:	75 3f                	jne    c0015e5d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e1e:	80 fb 40             	cmp    bl,0x40
c0015e21:	75 36                	jne    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e23:	83 ec 0c             	sub    esp,0xc
c0015e26:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e2a:	55                   	push   ebp
c0015e2b:	e8 a2 a8 fe ff       	call   c00006d2 <strlen>
c0015e30:	83 c4 10             	add    esp,0x10
c0015e33:	83 f8 3f             	cmp    eax,0x3f
c0015e36:	0f 87 9f 00 00 00    	ja     c0015edb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e3c:	50                   	push   eax
c0015e3d:	50                   	push   eax
c0015e3e:	55                   	push   ebp
c0015e3f:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e43:	55                   	push   ebp
c0015e44:	e8 0b a9 fe ff       	call   c0000754 <strcpy>
c0015e49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e4c:	e8 81 a8 fe ff       	call   c00006d2 <strlen>
c0015e51:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	31 c9                	xor    ecx,ecx
c0015e5b:	eb 76                	jmp    c0015ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e5d:	80 fb 40             	cmp    bl,0x40
c0015e60:	74 06                	je     c0015e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e62:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e66:	eb 19                	jmp    c0015e81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e68:	51                   	push   ecx
c0015e69:	51                   	push   ecx
c0015e6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e72:	50                   	push   eax
c0015e73:	e8 2d a9 fe ff       	call   c00007a5 <strcmp>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	85 c0                	test   eax,eax
c0015e7d:	75 da                	jne    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e7f:	eb e1                	jmp    c0015e62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e81:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e84:	84 c0                	test   al,al
c0015e86:	0f 94 c1             	sete   cl
c0015e89:	3c 3d                	cmp    al,0x3d
c0015e8b:	0f 94 c2             	sete   dl
c0015e8e:	08 d1                	or     cl,dl
c0015e90:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015e94:	75 03                	jne    c0015e99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015e96:	45                   	inc    ebp
c0015e97:	eb e8                	jmp    c0015e81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e99:	84 c0                	test   al,al
c0015e9b:	74 3e                	je     c0015edb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e9d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015ea1:	52                   	push   edx
c0015ea2:	52                   	push   edx
c0015ea3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ea7:	50                   	push   eax
c0015ea8:	56                   	push   esi
c0015ea9:	e8 f7 a8 fe ff       	call   c00007a5 <strcmp>
c0015eae:	83 c4 10             	add    esp,0x10
c0015eb1:	85 c0                	test   eax,eax
c0015eb3:	75 a4                	jne    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015eb5:	50                   	push   eax
c0015eb6:	8d 55 01             	lea    edx,[ebp+0x1]
c0015eb9:	50                   	push   eax
c0015eba:	52                   	push   edx
c0015ebb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ec2:	e8 8d a8 fe ff       	call   c0000754 <strcpy>
c0015ec7:	83 c4 10             	add    esp,0x10
c0015eca:	eb 14                	jmp    c0015ee0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ecc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ecf:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ed3:	47                   	inc    edi
c0015ed4:	89 ca                	mov    edx,ecx
c0015ed6:	e9 00 ff ff ff       	jmp    c0015ddb <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015edb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ee0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015ee4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015eea:	5b                   	pop    ebx
c0015eeb:	5e                   	pop    esi
c0015eec:	5f                   	pop    edi
c0015eed:	5d                   	pop    ebp
c0015eee:	c3                   	ret    

c0015eef <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015eef:	57                   	push   edi
c0015ef0:	56                   	push   esi
c0015ef1:	53                   	push   ebx
c0015ef2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015ef8:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015eff:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f06:	53                   	push   ebx
c0015f07:	e8 c6 a7 fe ff       	call   c00006d2 <strlen>
c0015f0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f0f:	89 c7                	mov    edi,eax
c0015f11:	e8 bc a7 fe ff       	call   c00006d2 <strlen>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f1d:	31 ff                	xor    edi,edi
c0015f1f:	3d ff 00 00 00       	cmp    eax,0xff
c0015f24:	0f 87 18 01 00 00    	ja     c0016042 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f2a:	51                   	push   ecx
c0015f2b:	51                   	push   ecx
c0015f2c:	56                   	push   esi
c0015f2d:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f31:	56                   	push   esi
c0015f32:	e8 1d a8 fe ff       	call   c0000754 <strcpy>
c0015f37:	58                   	pop    eax
c0015f38:	5a                   	pop    edx
c0015f39:	68 34 2e 02 c0       	push   0xc0022e34
c0015f3e:	56                   	push   esi
c0015f3f:	e8 c7 a8 fe ff       	call   c000080b <strcat>
c0015f44:	59                   	pop    ecx
c0015f45:	58                   	pop    eax
c0015f46:	53                   	push   ebx
c0015f47:	56                   	push   esi
c0015f48:	e8 be a8 fe ff       	call   c000080b <strcat>
c0015f4d:	58                   	pop    eax
c0015f4e:	5a                   	pop    edx
c0015f4f:	68 22 2a 02 c0       	push   0xc0022a22
c0015f54:	56                   	push   esi
c0015f55:	e8 b1 a8 fe ff       	call   c000080b <strcat>
c0015f5a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f61:	e8 6a 91 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0015f66:	83 c4 0c             	add    esp,0xc
c0015f69:	89 c3                	mov    ebx,eax
c0015f6b:	ff 35 d4 5b 02 c0    	push   DWORD PTR ds:0xc0025bd4
c0015f71:	56                   	push   esi
c0015f72:	50                   	push   eax
c0015f73:	e8 c4 97 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0015f78:	59                   	pop    ecx
c0015f79:	5e                   	pop    esi
c0015f7a:	6a 01                	push   0x1
c0015f7c:	53                   	push   ebx
c0015f7d:	e8 1e 98 ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	85 c0                	test   eax,eax
c0015f87:	74 08                	je     c0015f91 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f89:	83 ec 0c             	sub    esp,0xc
c0015f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f8e:	53                   	push   ebx
c0015f8f:	eb 2e                	jmp    c0015fbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015f91:	52                   	push   edx
c0015f92:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015f96:	50                   	push   eax
c0015f97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015f9b:	50                   	push   eax
c0015f9c:	53                   	push   ebx
c0015f9d:	e8 aa 9a ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c0015fa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	89 c1                	mov    ecx,eax
c0015fab:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015faf:	75 13                	jne    c0015fc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fb1:	83 ec 0c             	sub    esp,0xc
c0015fb4:	53                   	push   ebx
c0015fb5:	e8 44 98 ff ff       	call   c000f7fe <File::close()>
c0015fba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fc2:	eb 7b                	jmp    c001603f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fc4:	83 ec 0c             	sub    esp,0xc
c0015fc7:	50                   	push   eax
c0015fc8:	e8 06 60 ff ff       	call   c000bfd3 <malloc>
c0015fcd:	89 c6                	mov    esi,eax
c0015fcf:	58                   	pop    eax
c0015fd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fd2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fd6:	52                   	push   edx
c0015fd7:	56                   	push   esi
c0015fd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe0:	53                   	push   ebx
c0015fe1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fe4:	83 c4 20             	add    esp,0x20
c0015fe7:	85 c0                	test   eax,eax
c0015fe9:	75 0a                	jne    c0015ff5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015feb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fef:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015ff3:	74 18                	je     c001600d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015ff5:	83 ec 0c             	sub    esp,0xc
c0015ff8:	31 ff                	xor    edi,edi
c0015ffa:	53                   	push   ebx
c0015ffb:	e8 fe 97 ff ff       	call   c000f7fe <File::close()>
c0016000:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016002:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016005:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016008:	83 c4 10             	add    esp,0x10
c001600b:	eb 35                	jmp    c0016042 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001600d:	83 ec 0c             	sub    esp,0xc
c0016010:	53                   	push   ebx
c0016011:	e8 e8 97 ff ff       	call   c000f7fe <File::close()>
c0016016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001601b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001601e:	83 c4 0c             	add    esp,0xc
c0016021:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016028:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001602f:	56                   	push   esi
c0016030:	e8 53 fd ff ff       	call   c0015d88 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016035:	89 34 24             	mov    DWORD PTR [esp],esi
c0016038:	89 c7                	mov    edi,eax
c001603a:	e8 a4 5f ff ff       	call   c000bfe3 <free>
c001603f:	83 c4 10             	add    esp,0x10
c0016042:	81 c4 10 01 00 00    	add    esp,0x110
c0016048:	89 f8                	mov    eax,edi
c001604a:	5b                   	pop    ebx
c001604b:	5e                   	pop    esi
c001604c:	5f                   	pop    edi
c001604d:	c3                   	ret    

c001604e <Reg::getLine(char*, char*, char*)>:
c001604e:	57                   	push   edi
c001604f:	56                   	push   esi
c0016050:	53                   	push   ebx
c0016051:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016059:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001605d:	57                   	push   edi
c001605e:	56                   	push   esi
c001605f:	53                   	push   ebx
c0016060:	68 27 2a 02 c0       	push   0xc0022a27
c0016065:	e8 85 fe ff ff       	call   c0015eef <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001606a:	83 c4 10             	add    esp,0x10
c001606d:	84 c0                	test   al,al
c001606f:	75 10                	jne    c0016081 <Reg::getLine(char*, char*, char*)+0x33>
c0016071:	57                   	push   edi
c0016072:	56                   	push   esi
c0016073:	53                   	push   ebx
c0016074:	68 4c 2a 02 c0       	push   0xc0022a4c
c0016079:	e8 71 fe ff ff       	call   c0015eef <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	5b                   	pop    ebx
c0016082:	5e                   	pop    esi
c0016083:	5f                   	pop    edi
c0016084:	c3                   	ret    

c0016085 <Reg::readInt(char*, char*, int*)>:
c0016085:	55                   	push   ebp
c0016086:	57                   	push   edi
c0016087:	56                   	push   esi
c0016088:	53                   	push   ebx
c0016089:	81 ec f0 00 00 00    	sub    esp,0xf0
c001608f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016093:	57                   	push   edi
c0016094:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001609b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160a2:	e8 a7 ff ff ff       	call   c001604e <Reg::getLine(char*, char*, char*)>
c00160a7:	83 c4 10             	add    esp,0x10
c00160aa:	84 c0                	test   al,al
c00160ac:	0f 84 b2 00 00 00    	je     c0016164 <Reg::readInt(char*, char*, int*)+0xdf>
c00160b2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160b6:	80 fa 2b             	cmp    dl,0x2b
c00160b9:	74 0c                	je     c00160c7 <Reg::readInt(char*, char*, int*)+0x42>
c00160bb:	80 fa 2d             	cmp    dl,0x2d
c00160be:	75 0e                	jne    c00160ce <Reg::readInt(char*, char*, int*)+0x49>
c00160c0:	ba 01 00 00 00       	mov    edx,0x1
c00160c5:	eb 0b                	jmp    c00160d2 <Reg::readInt(char*, char*, int*)+0x4d>
c00160c7:	ba 01 00 00 00       	mov    edx,0x1
c00160cc:	eb 02                	jmp    c00160d0 <Reg::readInt(char*, char*, int*)+0x4b>
c00160ce:	31 d2                	xor    edx,edx
c00160d0:	31 c0                	xor    eax,eax
c00160d2:	be 0a 00 00 00       	mov    esi,0xa
c00160d7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160dc:	75 20                	jne    c00160fe <Reg::readInt(char*, char*, int*)+0x79>
c00160de:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160e2:	80 f9 78             	cmp    cl,0x78
c00160e5:	75 0a                	jne    c00160f1 <Reg::readInt(char*, char*, int*)+0x6c>
c00160e7:	83 c2 02             	add    edx,0x2
c00160ea:	be 10 00 00 00       	mov    esi,0x10
c00160ef:	eb 0d                	jmp    c00160fe <Reg::readInt(char*, char*, int*)+0x79>
c00160f1:	80 f9 62             	cmp    cl,0x62
c00160f4:	75 08                	jne    c00160fe <Reg::readInt(char*, char*, int*)+0x79>
c00160f6:	83 c2 02             	add    edx,0x2
c00160f9:	be 02 00 00 00       	mov    esi,0x2
c00160fe:	01 d7                	add    edi,edx
c0016100:	31 d2                	xor    edx,edx
c0016102:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016104:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016108:	84 db                	test   bl,bl
c001610a:	0f 94 c3             	sete   bl
c001610d:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016112:	0f 94 c1             	sete   cl
c0016115:	08 cb                	or     bl,cl
c0016117:	75 3a                	jne    c0016153 <Reg::readInt(char*, char*, int*)+0xce>
c0016119:	0f af d6             	imul   edx,esi
c001611c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016121:	83 fe 10             	cmp    esi,0x10
c0016124:	75 26                	jne    c001614c <Reg::readInt(char*, char*, int*)+0xc7>
c0016126:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001612a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001612d:	89 e9                	mov    ecx,ebp
c001612f:	80 f9 05             	cmp    cl,0x5
c0016132:	77 06                	ja     c001613a <Reg::readInt(char*, char*, int*)+0xb5>
c0016134:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016138:	eb 16                	jmp    c0016150 <Reg::readInt(char*, char*, int*)+0xcb>
c001613a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001613e:	83 e9 61             	sub    ecx,0x61
c0016141:	80 f9 05             	cmp    cl,0x5
c0016144:	77 06                	ja     c001614c <Reg::readInt(char*, char*, int*)+0xc7>
c0016146:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001614a:	eb 04                	jmp    c0016150 <Reg::readInt(char*, char*, int*)+0xcb>
c001614c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016150:	47                   	inc    edi
c0016151:	eb af                	jmp    c0016102 <Reg::readInt(char*, char*, int*)+0x7d>
c0016153:	84 c0                	test   al,al
c0016155:	74 02                	je     c0016159 <Reg::readInt(char*, char*, int*)+0xd4>
c0016157:	f7 da                	neg    edx
c0016159:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016160:	89 10                	mov    DWORD PTR [eax],edx
c0016162:	88 d8                	mov    al,bl
c0016164:	81 c4 ec 00 00 00    	add    esp,0xec
c001616a:	5b                   	pop    ebx
c001616b:	5e                   	pop    esi
c001616c:	5f                   	pop    edi
c001616d:	5d                   	pop    ebp
c001616e:	c3                   	ret    

c001616f <Reg::readString(char*, char*, char*, int)>:
c001616f:	57                   	push   edi
c0016170:	56                   	push   esi
c0016171:	53                   	push   ebx
c0016172:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016178:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001617c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016183:	57                   	push   edi
c0016184:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001618b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016192:	e8 b7 fe ff ff       	call   c001604e <Reg::getLine(char*, char*, char*)>
c0016197:	83 c4 10             	add    esp,0x10
c001619a:	89 c6                	mov    esi,eax
c001619c:	84 c0                	test   al,al
c001619e:	74 44                	je     c00161e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00161a0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161a7:	31 c0                	xor    eax,eax
c00161a9:	4a                   	dec    edx
c00161aa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161ad:	84 c9                	test   cl,cl
c00161af:	74 0f                	je     c00161c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00161b1:	39 c2                	cmp    edx,eax
c00161b3:	7e 0b                	jle    c00161c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00161b5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161b8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161bd:	40                   	inc    eax
c00161be:	eb ea                	jmp    c00161aa <Reg::readString(char*, char*, char*, int)+0x3b>
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	53                   	push   ebx
c00161c4:	e8 09 a5 fe ff       	call   c00006d2 <strlen>
c00161c9:	83 c4 10             	add    esp,0x10
c00161cc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161d1:	75 11                	jne    c00161e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00161d3:	83 ec 0c             	sub    esp,0xc
c00161d6:	53                   	push   ebx
c00161d7:	e8 f6 a4 fe ff       	call   c00006d2 <strlen>
c00161dc:	83 c4 10             	add    esp,0x10
c00161df:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161e4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161ea:	89 f0                	mov    eax,esi
c00161ec:	5b                   	pop    ebx
c00161ed:	5e                   	pop    esi
c00161ee:	5f                   	pop    edi
c00161ef:	c3                   	ret    

c00161f0 <Reg::readBool(char*, char*, bool*)>:
c00161f0:	83 ec 20             	sub    esp,0x20
c00161f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00161f7:	50                   	push   eax
c00161f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016200:	e8 80 fe ff ff       	call   c0016085 <Reg::readInt(char*, char*, int*)>
c0016205:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016209:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001620e:	0f 95 02             	setne  BYTE PTR [edx]
c0016211:	83 c4 2c             	add    esp,0x2c
c0016214:	c3                   	ret    

c0016215 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016215:	53                   	push   ebx
c0016216:	83 ec 1c             	sub    esp,0x1c
c0016219:	8d 44 24 13          	lea    eax,[esp+0x13]
c001621d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016221:	50                   	push   eax
c0016222:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016226:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001622a:	e8 c1 ff ff ff       	call   c00161f0 <Reg::readBool(char*, char*, bool*)>
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	84 c0                	test   al,al
c0016234:	74 04                	je     c001623a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016236:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001623a:	83 c4 18             	add    esp,0x18
c001623d:	88 d8                	mov    al,bl
c001623f:	5b                   	pop    ebx
c0016240:	c3                   	ret    

c0016241 <Reg::readIntWithDefault(char*, char*, int)>:
c0016241:	53                   	push   ebx
c0016242:	83 ec 1c             	sub    esp,0x1c
c0016245:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016249:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001624d:	50                   	push   eax
c001624e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016252:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016256:	e8 2a fe ff ff       	call   c0016085 <Reg::readInt(char*, char*, int*)>
c001625b:	83 c4 10             	add    esp,0x10
c001625e:	84 c0                	test   al,al
c0016260:	74 04                	je     c0016266 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016262:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016266:	83 c4 18             	add    esp,0x18
c0016269:	89 d8                	mov    eax,ebx
c001626b:	5b                   	pop    ebx
c001626c:	c3                   	ret    

c001626d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001626d:	56                   	push   esi
c001626e:	53                   	push   ebx
c001626f:	51                   	push   ecx
c0016270:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016274:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001627c:	56                   	push   esi
c001627d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016285:	e8 e5 fe ff ff       	call   c001616f <Reg::readString(char*, char*, char*, int)>
c001628a:	83 c4 10             	add    esp,0x10
c001628d:	84 c0                	test   al,al
c001628f:	74 02                	je     c0016293 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016291:	89 f3                	mov    ebx,esi
c0016293:	5a                   	pop    edx
c0016294:	89 d8                	mov    eax,ebx
c0016296:	5b                   	pop    ebx
c0016297:	5e                   	pop    esi
c0016298:	c3                   	ret    

c0016299 <Sys::exit(regs*)>:
c0016299:	83 ec 18             	sub    esp,0x18
c001629c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162a3:	e8 c2 31 00 00       	call   c001946a <terminateTask(int)>
c00162a8:	83 c8 ff             	or     eax,0xffffffff
c00162ab:	89 c2                	mov    edx,eax
c00162ad:	83 c4 1c             	add    esp,0x1c
c00162b0:	c3                   	ret    

c00162b1 <Sys::loadDLL(regs*)>:
c00162b1:	56                   	push   esi
c00162b2:	31 d2                	xor    edx,edx
c00162b4:	53                   	push   ebx
c00162b5:	b8 01 00 00 00       	mov    eax,0x1
c00162ba:	51                   	push   ecx
c00162bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162bf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162c3:	74 7d                	je     c0016342 <Sys::loadDLL(regs*)+0x91>
c00162c5:	83 ec 0c             	sub    esp,0xc
c00162c8:	68 14 01 00 00       	push   0x114
c00162cd:	e8 fe 8d ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00162d2:	89 c3                	mov    ebx,eax
c00162d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d9:	83 c4 0c             	add    esp,0xc
c00162dc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162df:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162e2:	53                   	push   ebx
c00162e3:	e8 54 94 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c00162e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162eb:	e8 1e 97 ff ff       	call   c000fa0e <File::exists()>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	84 c0                	test   al,al
c00162f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162f7:	75 11                	jne    c001630a <Sys::loadDLL(regs*)+0x59>
c00162f9:	83 ec 0c             	sub    esp,0xc
c00162fc:	53                   	push   ebx
c00162fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	b8 03 00 00 00       	mov    eax,0x3
c0016308:	eb 36                	jmp    c0016340 <Sys::loadDLL(regs*)+0x8f>
c001630a:	83 ec 0c             	sub    esp,0xc
c001630d:	53                   	push   ebx
c001630e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016311:	58                   	pop    eax
c0016312:	5a                   	pop    edx
c0016313:	6a 00                	push   0x0
c0016315:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016318:	e8 3a 21 00 00       	call   c0018457 <Thr::loadDLL(char const*, bool)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	89 c1                	mov    ecx,eax
c0016322:	31 d2                	xor    edx,edx
c0016324:	b8 04 00 00 00       	mov    eax,0x4
c0016329:	85 c9                	test   ecx,ecx
c001632b:	74 15                	je     c0016342 <Sys::loadDLL(regs*)+0x91>
c001632d:	53                   	push   ebx
c001632e:	53                   	push   ebx
c001632f:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0016335:	51                   	push   ecx
c0016336:	e8 e2 22 00 00       	call   c001861d <Thr::executeDLL(unsigned long, void*)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	31 c0                	xor    eax,eax
c0016340:	31 d2                	xor    edx,edx
c0016342:	59                   	pop    ecx
c0016343:	5b                   	pop    ebx
c0016344:	5e                   	pop    esi
c0016345:	c3                   	ret    

c0016346 <Sys::read(regs*)>:
c0016346:	57                   	push   edi
c0016347:	56                   	push   esi
c0016348:	53                   	push   ebx
c0016349:	83 ec 10             	sub    esp,0x10
c001634c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016350:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016353:	83 f8 02             	cmp    eax,0x2
c0016356:	77 10                	ja     c0016368 <Sys::read(regs*)+0x22>
c0016358:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016360:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016366:	eb 0e                	jmp    c0016376 <Sys::read(regs*)+0x30>
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	50                   	push   eax
c001636c:	e8 f0 7c ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	89 c1                	mov    ecx,eax
c0016376:	83 c8 ff             	or     eax,0xffffffff
c0016379:	85 c9                	test   ecx,ecx
c001637b:	89 c2                	mov    edx,eax
c001637d:	74 28                	je     c00163a7 <Sys::read(regs*)+0x61>
c001637f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016387:	83 ec 0c             	sub    esp,0xc
c001638a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001638c:	31 ff                	xor    edi,edi
c001638e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016392:	52                   	push   edx
c0016393:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016396:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016399:	57                   	push   edi
c001639a:	56                   	push   esi
c001639b:	51                   	push   ecx
c001639c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001639f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163a3:	83 c4 20             	add    esp,0x20
c00163a6:	99                   	cdq    
c00163a7:	83 c4 10             	add    esp,0x10
c00163aa:	5b                   	pop    ebx
c00163ab:	5e                   	pop    esi
c00163ac:	5f                   	pop    edi
c00163ad:	c3                   	ret    

c00163ae <Sys::sbrk(regs*)>:
c00163ae:	56                   	push   esi
c00163af:	53                   	push   ebx
c00163b0:	50                   	push   eax
c00163b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163bd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163c0:	85 db                	test   ebx,ebx
c00163c2:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163c8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163cb:	74 02                	je     c00163cf <Sys::sbrk(regs*)+0x21>
c00163cd:	79 06                	jns    c00163d5 <Sys::sbrk(regs*)+0x27>
c00163cf:	89 f0                	mov    eax,esi
c00163d1:	31 d2                	xor    edx,edx
c00163d3:	eb 2a                	jmp    c00163ff <Sys::sbrk(regs*)+0x51>
c00163d5:	83 c8 ff             	or     eax,0xffffffff
c00163d8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163de:	89 c2                	mov    edx,eax
c00163e0:	77 1d                	ja     c00163ff <Sys::sbrk(regs*)+0x51>
c00163e2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163e8:	50                   	push   eax
c00163e9:	c1 ea 0c             	shr    edx,0xc
c00163ec:	68 07 04 00 00       	push   0x407
c00163f1:	52                   	push   edx
c00163f2:	51                   	push   ecx
c00163f3:	e8 c0 85 ff ff       	call   c000e9b8 <VAS::allocatePages(int, int)>
c00163f8:	89 f0                	mov    eax,esi
c00163fa:	31 d2                	xor    edx,edx
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	59                   	pop    ecx
c0016400:	5b                   	pop    ebx
c0016401:	5e                   	pop    esi
c0016402:	c3                   	ret    

c0016403 <Sys::write(regs*)>:
c0016403:	57                   	push   edi
c0016404:	56                   	push   esi
c0016405:	53                   	push   ebx
c0016406:	83 ec 18             	sub    esp,0x18
c0016409:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001640d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016410:	68 67 2a 02 c0       	push   0xc0022a67
c0016415:	e8 eb 8d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001641a:	83 c4 10             	add    esp,0x10
c001641d:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0016421:	77 10                	ja     c0016433 <Sys::write(regs*)+0x30>
c0016423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016428:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001642b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016431:	eb 1b                	jmp    c001644e <Sys::write(regs*)+0x4b>
c0016433:	83 ec 0c             	sub    esp,0xc
c0016436:	68 86 2a 02 c0       	push   0xc0022a86
c001643b:	e8 c5 8d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016440:	58                   	pop    eax
c0016441:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016444:	e8 18 7c ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	89 c1                	mov    ecx,eax
c001644e:	83 c8 ff             	or     eax,0xffffffff
c0016451:	85 c9                	test   ecx,ecx
c0016453:	89 c2                	mov    edx,eax
c0016455:	74 28                	je     c001647f <Sys::write(regs*)+0x7c>
c0016457:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001645f:	83 ec 0c             	sub    esp,0xc
c0016462:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016464:	31 ff                	xor    edi,edi
c0016466:	8d 54 24 18          	lea    edx,[esp+0x18]
c001646a:	52                   	push   edx
c001646b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001646e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016471:	57                   	push   edi
c0016472:	56                   	push   esi
c0016473:	51                   	push   ecx
c0016474:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016477:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001647b:	83 c4 20             	add    esp,0x20
c001647e:	99                   	cdq    
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	5b                   	pop    ebx
c0016483:	5e                   	pop    esi
c0016484:	5f                   	pop    edi
c0016485:	c3                   	ret    

c0016486 <Sys::yield(regs*)>:
c0016486:	83 ec 0c             	sub    esp,0xc
c0016489:	e8 af 25 00 00       	call   c0018a3d <lockScheduler()>
c001648e:	e8 f3 28 00 00       	call   c0018d86 <schedule()>
c0016493:	e8 a7 25 00 00       	call   c0018a3f <unlockScheduler()>
c0016498:	31 c0                	xor    eax,eax
c001649a:	31 d2                	xor    edx,edx
c001649c:	83 c4 0c             	add    esp,0xc
c001649f:	c3                   	ret    

c00164a0 <sysCallGetPID(regs*)>:
c00164a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00164aa:	89 c2                	mov    edx,eax
c00164ac:	c1 fa 1f             	sar    edx,0x1f
c00164af:	c3                   	ret    

c00164b0 <sysCallSeekDir(regs*)>:
c00164b0:	31 c0                	xor    eax,eax
c00164b2:	31 d2                	xor    edx,edx
c00164b4:	c3                   	ret    

c00164b5 <sysCallTellDir(regs*)>:
c00164b5:	31 c0                	xor    eax,eax
c00164b7:	31 d2                	xor    edx,edx
c00164b9:	c3                   	ret    

c00164ba <sysCallVerify(regs*)>:
c00164ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164be:	31 d2                	xor    edx,edx
c00164c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164c3:	c3                   	ret    

c00164c4 <sysCallFork(regs*)>:
c00164c4:	83 c8 ff             	or     eax,0xffffffff
c00164c7:	83 ca ff             	or     edx,0xffffffff
c00164ca:	c3                   	ret    

c00164cb <sysCallExecve(regs*)>:
c00164cb:	83 c8 ff             	or     eax,0xffffffff
c00164ce:	83 ca ff             	or     edx,0xffffffff
c00164d1:	c3                   	ret    

c00164d2 <sysCallGetArgc(regs*)>:
c00164d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164da:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164e0:	89 c2                	mov    edx,eax
c00164e2:	c1 fa 1f             	sar    edx,0x1f
c00164e5:	c3                   	ret    

c00164e6 <sysFormatDisk(regs*)>:
c00164e6:	56                   	push   esi
c00164e7:	53                   	push   ebx
c00164e8:	50                   	push   eax
c00164e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164ed:	8b 1d e8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248e8
c00164f3:	eb 2a                	jmp    c001651f <sysFormatDisk(regs*)+0x39>
c00164f5:	83 ec 0c             	sub    esp,0xc
c00164f8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00164fb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00164fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016500:	51                   	push   ecx
c0016501:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0016504:	51                   	push   ecx
c0016505:	50                   	push   eax
c0016506:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001650d:	50                   	push   eax
c001650e:	53                   	push   ebx
c001650f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016512:	83 c4 20             	add    esp,0x20
c0016515:	89 c1                	mov    ecx,eax
c0016517:	83 f8 08             	cmp    eax,0x8
c001651a:	75 12                	jne    c001652e <sysFormatDisk(regs*)+0x48>
c001651c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001651f:	85 db                	test   ebx,ebx
c0016521:	75 d2                	jne    c00164f5 <sysFormatDisk(regs*)+0xf>
c0016523:	b8 03 00 00 00       	mov    eax,0x3
c0016528:	31 d2                	xor    edx,edx
c001652a:	59                   	pop    ecx
c001652b:	5b                   	pop    ebx
c001652c:	5e                   	pop    esi
c001652d:	c3                   	ret    
c001652e:	85 c0                	test   eax,eax
c0016530:	74 13                	je     c0016545 <sysFormatDisk(regs*)+0x5f>
c0016532:	31 d2                	xor    edx,edx
c0016534:	b8 01 00 00 00       	mov    eax,0x1
c0016539:	83 f9 09             	cmp    ecx,0x9
c001653c:	74 ec                	je     c001652a <sysFormatDisk(regs*)+0x44>
c001653e:	b8 02 00 00 00       	mov    eax,0x2
c0016543:	eb e3                	jmp    c0016528 <sysFormatDisk(regs*)+0x42>
c0016545:	31 c0                	xor    eax,eax
c0016547:	eb df                	jmp    c0016528 <sysFormatDisk(regs*)+0x42>

c0016549 <sysSetDiskVolumeLabel(regs*)>:
c0016549:	56                   	push   esi
c001654a:	53                   	push   ebx
c001654b:	53                   	push   ebx
c001654c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016550:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016553:	83 f8 19             	cmp    eax,0x19
c0016556:	77 2d                	ja     c0016585 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016558:	8b 0c 85 80 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb280]
c001655f:	85 c9                	test   ecx,ecx
c0016561:	74 22                	je     c0016585 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016563:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016566:	85 d2                	test   edx,edx
c0016568:	74 1b                	je     c0016585 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001656a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016570:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016572:	52                   	push   edx
c0016573:	50                   	push   eax
c0016574:	51                   	push   ecx
c0016575:	53                   	push   ebx
c0016576:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	89 c2                	mov    edx,eax
c001657e:	c1 fa 1f             	sar    edx,0x1f
c0016581:	59                   	pop    ecx
c0016582:	5b                   	pop    ebx
c0016583:	5e                   	pop    esi
c0016584:	c3                   	ret    
c0016585:	59                   	pop    ecx
c0016586:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001658b:	5b                   	pop    ebx
c001658c:	83 ca ff             	or     edx,0xffffffff
c001658f:	5e                   	pop    esi
c0016590:	c3                   	ret    

c0016591 <sysGetDiskVolumeLabel(regs*)>:
c0016591:	57                   	push   edi
c0016592:	56                   	push   esi
c0016593:	53                   	push   ebx
c0016594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016598:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001659b:	83 fa 19             	cmp    edx,0x19
c001659e:	77 38                	ja     c00165d8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165a0:	8b 0c 95 80 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb280]
c00165a7:	85 c9                	test   ecx,ecx
c00165a9:	74 2d                	je     c00165d8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165ab:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165ae:	85 db                	test   ebx,ebx
c00165b0:	74 26                	je     c00165d8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165b5:	85 c0                	test   eax,eax
c00165b7:	74 1f                	je     c00165d8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165bf:	83 ec 0c             	sub    esp,0xc
c00165c2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165c4:	50                   	push   eax
c00165c5:	53                   	push   ebx
c00165c6:	52                   	push   edx
c00165c7:	51                   	push   ecx
c00165c8:	56                   	push   esi
c00165c9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165cc:	83 c4 20             	add    esp,0x20
c00165cf:	89 c2                	mov    edx,eax
c00165d1:	c1 fa 1f             	sar    edx,0x1f
c00165d4:	5b                   	pop    ebx
c00165d5:	5e                   	pop    esi
c00165d6:	5f                   	pop    edi
c00165d7:	c3                   	ret    
c00165d8:	5b                   	pop    ebx
c00165d9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165de:	5e                   	pop    esi
c00165df:	83 ca ff             	or     edx,0xffffffff
c00165e2:	5f                   	pop    edi
c00165e3:	c3                   	ret    

c00165e4 <sysShutdown(regs*)>:
c00165e4:	57                   	push   edi
c00165e5:	56                   	push   esi
c00165e6:	56                   	push   esi
c00165e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165ee:	85 c0                	test   eax,eax
c00165f0:	74 18                	je     c001660a <sysShutdown(regs*)+0x26>
c00165f2:	83 f8 01             	cmp    eax,0x1
c00165f5:	74 51                	je     c0016648 <sysShutdown(regs*)+0x64>
c00165f7:	83 ce ff             	or     esi,0xffffffff
c00165fa:	83 cf ff             	or     edi,0xffffffff
c00165fd:	83 f8 02             	cmp    eax,0x2
c0016600:	74 2a                	je     c001662c <sysShutdown(regs*)+0x48>
c0016602:	59                   	pop    ecx
c0016603:	89 f0                	mov    eax,esi
c0016605:	5e                   	pop    esi
c0016606:	89 fa                	mov    edx,edi
c0016608:	5f                   	pop    edi
c0016609:	c3                   	ret    
c001660a:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001660f:	83 ce ff             	or     esi,0xffffffff
c0016612:	83 cf ff             	or     edi,0xffffffff
c0016615:	8b 10                	mov    edx,DWORD PTR [eax]
c0016617:	6a 00                	push   0x0
c0016619:	6a 00                	push   0x0
c001661b:	6a 00                	push   0x0
c001661d:	50                   	push   eax
c001661e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016621:	83 c4 10             	add    esp,0x10
c0016624:	89 f0                	mov    eax,esi
c0016626:	89 fa                	mov    edx,edi
c0016628:	59                   	pop    ecx
c0016629:	5e                   	pop    esi
c001662a:	5f                   	pop    edi
c001662b:	c3                   	ret    
c001662c:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0016631:	8b 10                	mov    edx,DWORD PTR [eax]
c0016633:	6a 00                	push   0x0
c0016635:	6a 00                	push   0x0
c0016637:	6a 01                	push   0x1
c0016639:	50                   	push   eax
c001663a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	89 f0                	mov    eax,esi
c0016642:	89 fa                	mov    edx,edi
c0016644:	59                   	pop    ecx
c0016645:	5e                   	pop    esi
c0016646:	5f                   	pop    edi
c0016647:	c3                   	ret    
c0016648:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c001664d:	85 c0                	test   eax,eax
c001664f:	74 02                	je     c0016653 <sysShutdown(regs*)+0x6f>
c0016651:	ff d0                	call   eax
c0016653:	31 f6                	xor    esi,esi
c0016655:	59                   	pop    ecx
c0016656:	31 ff                	xor    edi,edi
c0016658:	89 f0                	mov    eax,esi
c001665a:	5e                   	pop    esi
c001665b:	89 fa                	mov    edx,edi
c001665d:	5f                   	pop    edi
c001665e:	c3                   	ret    

c001665f <sysCallGetCwd(regs*)>:
c001665f:	83 ec 10             	sub    esp,0x10
c0016662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016666:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016669:	52                   	push   edx
c001666a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001666d:	51                   	push   ecx
c001666e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016673:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016676:	50                   	push   eax
c0016677:	e8 31 94 ff ff       	call   c000faad <getcwd(Process*, char*, int)>
c001667c:	89 c2                	mov    edx,eax
c001667e:	83 c4 1c             	add    esp,0x1c
c0016681:	c1 fa 1f             	sar    edx,0x1f
c0016684:	c3                   	ret    

c0016685 <sysCallSetCwd(regs*)>:
c0016685:	83 ec 14             	sub    esp,0x14
c0016688:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001668c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001668f:	50                   	push   eax
c0016690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016695:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0016698:	52                   	push   edx
c0016699:	e8 39 94 ff ff       	call   c000fad7 <setcwd(Process*, char*)>
c001669e:	89 c2                	mov    edx,eax
c00166a0:	83 c4 1c             	add    esp,0x1c
c00166a3:	c1 fa 1f             	sar    edx,0x1f
c00166a6:	c3                   	ret    

c00166a7 <sysCallRealpath(regs*)>:
c00166a7:	53                   	push   ebx
c00166a8:	83 ec 08             	sub    esp,0x8
c00166ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166af:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166b2:	85 c9                	test   ecx,ecx
c00166b4:	74 35                	je     c00166eb <sysCallRealpath(regs*)+0x44>
c00166b6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166b9:	31 d2                	xor    edx,edx
c00166bb:	b8 01 00 00 00       	mov    eax,0x1
c00166c0:	85 db                	test   ebx,ebx
c00166c2:	75 05                	jne    c00166c9 <sysCallRealpath(regs*)+0x22>
c00166c4:	83 c4 08             	add    esp,0x8
c00166c7:	5b                   	pop    ebx
c00166c8:	c3                   	ret    
c00166c9:	50                   	push   eax
c00166ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166d2:	05 0c 01 00 00       	add    eax,0x10c
c00166d7:	50                   	push   eax
c00166d8:	51                   	push   ecx
c00166d9:	53                   	push   ebx
c00166da:	e8 b3 8e ff ff       	call   c000f592 <standardiseFiles(char*, char const*, char const*)>
c00166df:	83 c4 10             	add    esp,0x10
c00166e2:	31 c0                	xor    eax,eax
c00166e4:	31 d2                	xor    edx,edx
c00166e6:	83 c4 08             	add    esp,0x8
c00166e9:	5b                   	pop    ebx
c00166ea:	c3                   	ret    
c00166eb:	b8 01 00 00 00       	mov    eax,0x1
c00166f0:	31 d2                	xor    edx,edx
c00166f2:	eb f2                	jmp    c00166e6 <sysCallRealpath(regs*)+0x3f>

c00166f4 <sysCallReadDir(regs*)>:
c00166f4:	53                   	push   ebx
c00166f5:	83 ec 18             	sub    esp,0x18
c00166f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00166fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166ff:	83 f8 02             	cmp    eax,0x2
c0016702:	76 56                	jbe    c001675a <sysCallReadDir(regs*)+0x66>
c0016704:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016707:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001670d:	77 57                	ja     c0016766 <sysCallReadDir(regs*)+0x72>
c001670f:	83 ec 0c             	sub    esp,0xc
c0016712:	50                   	push   eax
c0016713:	e8 49 79 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016718:	83 c4 10             	add    esp,0x10
c001671b:	85 c0                	test   eax,eax
c001671d:	74 57                	je     c0016776 <sysCallReadDir(regs*)+0x82>
c001671f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016727:	83 ec 0c             	sub    esp,0xc
c001672a:	8b 10                	mov    edx,DWORD PTR [eax]
c001672c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016730:	51                   	push   ecx
c0016731:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016734:	51                   	push   ecx
c0016735:	6a 00                	push   0x0
c0016737:	68 10 01 00 00       	push   0x110
c001673c:	50                   	push   eax
c001673d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016740:	83 c4 20             	add    esp,0x20
c0016743:	89 c1                	mov    ecx,eax
c0016745:	85 c0                	test   eax,eax
c0016747:	74 38                	je     c0016781 <sysCallReadDir(regs*)+0x8d>
c0016749:	31 d2                	xor    edx,edx
c001674b:	b8 02 00 00 00       	mov    eax,0x2
c0016750:	83 f9 07             	cmp    ecx,0x7
c0016753:	74 05                	je     c001675a <sysCallReadDir(regs*)+0x66>
c0016755:	83 c4 18             	add    esp,0x18
c0016758:	5b                   	pop    ebx
c0016759:	c3                   	ret    
c001675a:	b8 01 00 00 00       	mov    eax,0x1
c001675f:	31 d2                	xor    edx,edx
c0016761:	83 c4 18             	add    esp,0x18
c0016764:	5b                   	pop    ebx
c0016765:	c3                   	ret    
c0016766:	53                   	push   ebx
c0016767:	53                   	push   ebx
c0016768:	52                   	push   edx
c0016769:	68 a8 2a 02 c0       	push   0xc0022aa8
c001676e:	e8 92 8a ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	83 c4 18             	add    esp,0x18
c0016779:	83 c8 ff             	or     eax,0xffffffff
c001677c:	83 ca ff             	or     edx,0xffffffff
c001677f:	5b                   	pop    ebx
c0016780:	c3                   	ret    
c0016781:	31 c0                	xor    eax,eax
c0016783:	31 d2                	xor    edx,edx
c0016785:	eb da                	jmp    c0016761 <sysCallReadDir(regs*)+0x6d>

c0016787 <sysCallIsATTY(regs*)>:
c0016787:	83 ec 0c             	sub    esp,0xc
c001678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016791:	83 f8 02             	cmp    eax,0x2
c0016794:	76 07                	jbe    c001679d <sysCallIsATTY(regs*)+0x16>
c0016796:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001679b:	75 28                	jne    c00167c5 <sysCallIsATTY(regs*)+0x3e>
c001679d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167ab:	85 c0                	test   eax,eax
c00167ad:	74 26                	je     c00167d5 <sysCallIsATTY(regs*)+0x4e>
c00167af:	83 ec 0c             	sub    esp,0xc
c00167b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b4:	50                   	push   eax
c00167b5:	ff 12                	call   DWORD PTR [edx]
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	25 ff 00 00 00       	and    eax,0xff
c00167bf:	31 d2                	xor    edx,edx
c00167c1:	83 c4 0c             	add    esp,0xc
c00167c4:	c3                   	ret    
c00167c5:	83 ec 0c             	sub    esp,0xc
c00167c8:	50                   	push   eax
c00167c9:	e8 93 78 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	85 c0                	test   eax,eax
c00167d3:	75 da                	jne    c00167af <sysCallIsATTY(regs*)+0x28>
c00167d5:	83 c8 ff             	or     eax,0xffffffff
c00167d8:	83 ca ff             	or     edx,0xffffffff
c00167db:	83 c4 0c             	add    esp,0xc
c00167de:	c3                   	ret    

c00167df <sysCallSeek(regs*)>:
c00167df:	53                   	push   ebx
c00167e0:	83 ec 08             	sub    esp,0x8
c00167e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167ea:	83 f8 02             	cmp    eax,0x2
c00167ed:	76 4b                	jbe    c001683a <sysCallSeek(regs*)+0x5b>
c00167ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167f4:	77 34                	ja     c001682a <sysCallSeek(regs*)+0x4b>
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	50                   	push   eax
c00167fa:	e8 62 78 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c00167ff:	83 c4 0c             	add    esp,0xc
c0016802:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016805:	31 db                	xor    ebx,ebx
c0016807:	53                   	push   ebx
c0016808:	51                   	push   ecx
c0016809:	50                   	push   eax
c001680a:	e8 4f 90 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	85 c0                	test   eax,eax
c0016814:	0f 95 c0             	setne  al
c0016817:	25 ff 00 00 00       	and    eax,0xff
c001681c:	31 d2                	xor    edx,edx
c001681e:	f7 d8                	neg    eax
c0016820:	83 d2 00             	adc    edx,0x0
c0016823:	83 c4 08             	add    esp,0x8
c0016826:	f7 da                	neg    edx
c0016828:	5b                   	pop    ebx
c0016829:	c3                   	ret    
c001682a:	52                   	push   edx
c001682b:	52                   	push   edx
c001682c:	50                   	push   eax
c001682d:	68 64 2b 02 c0       	push   0xc0022b64
c0016832:	e8 ce 89 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	83 c4 08             	add    esp,0x8
c001683d:	83 c8 ff             	or     eax,0xffffffff
c0016840:	83 ca ff             	or     edx,0xffffffff
c0016843:	5b                   	pop    ebx
c0016844:	c3                   	ret    

c0016845 <sysCallTell(regs*)>:
c0016845:	53                   	push   ebx
c0016846:	83 ec 08             	sub    esp,0x8
c0016849:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001684d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016850:	83 f8 02             	cmp    eax,0x2
c0016853:	76 60                	jbe    c00168b5 <sysCallTell(regs*)+0x70>
c0016855:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001685a:	77 30                	ja     c001688c <sysCallTell(regs*)+0x47>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	50                   	push   eax
c0016860:	e8 fc 77 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016865:	5a                   	pop    edx
c0016866:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016869:	59                   	pop    ecx
c001686a:	53                   	push   ebx
c001686b:	50                   	push   eax
c001686c:	e8 43 90 ff ff       	call   c000f8b4 <File::tell(unsigned long long*)>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	85 c0                	test   eax,eax
c0016876:	0f 95 c0             	setne  al
c0016879:	25 ff 00 00 00       	and    eax,0xff
c001687e:	31 d2                	xor    edx,edx
c0016880:	f7 d8                	neg    eax
c0016882:	83 d2 00             	adc    edx,0x0
c0016885:	83 c4 08             	add    esp,0x8
c0016888:	f7 da                	neg    edx
c001688a:	5b                   	pop    ebx
c001688b:	c3                   	ret    
c001688c:	52                   	push   edx
c001688d:	52                   	push   edx
c001688e:	50                   	push   eax
c001688f:	68 7e 2b 02 c0       	push   0xc0022b7e
c0016894:	e8 6c 89 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016899:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001689c:	83 c4 10             	add    esp,0x10
c001689f:	31 d2                	xor    edx,edx
c00168a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168ae:	83 c4 08             	add    esp,0x8
c00168b1:	31 c0                	xor    eax,eax
c00168b3:	5b                   	pop    ebx
c00168b4:	c3                   	ret    
c00168b5:	83 c4 08             	add    esp,0x8
c00168b8:	83 c8 ff             	or     eax,0xffffffff
c00168bb:	83 ca ff             	or     edx,0xffffffff
c00168be:	5b                   	pop    ebx
c00168bf:	c3                   	ret    

c00168c0 <sysCallSizeFromFilename(regs*)>:
c00168c0:	57                   	push   edi
c00168c1:	56                   	push   esi
c00168c2:	53                   	push   ebx
c00168c3:	83 ec 10             	sub    esp,0x10
c00168c6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168ca:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168cd:	83 fb 02             	cmp    ebx,0x2
c00168d0:	0f 86 8b 00 00 00    	jbe    c0016961 <sysCallSizeFromFilename(regs*)+0xa1>
c00168d6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168dc:	77 58                	ja     c0016936 <sysCallSizeFromFilename(regs*)+0x76>
c00168de:	83 ec 0c             	sub    esp,0xc
c00168e1:	68 14 01 00 00       	push   0x114
c00168e6:	e8 e5 87 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00168eb:	89 c7                	mov    edi,eax
c00168ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168f2:	83 c4 0c             	add    esp,0xc
c00168f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168f8:	50                   	push   eax
c00168f9:	53                   	push   ebx
c00168fa:	57                   	push   edi
c00168fb:	e8 3c 8e ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0016900:	83 c4 0c             	add    esp,0xc
c0016903:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016907:	50                   	push   eax
c0016908:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001690b:	52                   	push   edx
c001690c:	57                   	push   edi
c001690d:	e8 3a 91 ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c0016912:	89 c3                	mov    ebx,eax
c0016914:	8b 07                	mov    eax,DWORD PTR [edi]
c0016916:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016919:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001691c:	31 c0                	xor    eax,eax
c001691e:	83 c4 10             	add    esp,0x10
c0016921:	85 db                	test   ebx,ebx
c0016923:	0f 95 c0             	setne  al
c0016926:	31 d2                	xor    edx,edx
c0016928:	f7 d8                	neg    eax
c001692a:	83 d2 00             	adc    edx,0x0
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	f7 da                	neg    edx
c0016932:	5b                   	pop    ebx
c0016933:	5e                   	pop    esi
c0016934:	5f                   	pop    edi
c0016935:	c3                   	ret    
c0016936:	51                   	push   ecx
c0016937:	51                   	push   ecx
c0016938:	53                   	push   ebx
c0016939:	68 98 2b 02 c0       	push   0xc0022b98
c001693e:	e8 c2 88 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016943:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016946:	83 c4 10             	add    esp,0x10
c0016949:	31 d2                	xor    edx,edx
c001694b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016951:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	31 c0                	xor    eax,eax
c001695d:	5b                   	pop    ebx
c001695e:	5e                   	pop    esi
c001695f:	5f                   	pop    edi
c0016960:	c3                   	ret    
c0016961:	83 c4 10             	add    esp,0x10
c0016964:	83 c8 ff             	or     eax,0xffffffff
c0016967:	83 ca ff             	or     edx,0xffffffff
c001696a:	5b                   	pop    ebx
c001696b:	5e                   	pop    esi
c001696c:	5f                   	pop    edi
c001696d:	c3                   	ret    

c001696e <sysCallSize(regs*)>:
c001696e:	53                   	push   ebx
c001696f:	83 ec 18             	sub    esp,0x18
c0016972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016976:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016979:	83 f8 02             	cmp    eax,0x2
c001697c:	76 66                	jbe    c00169e4 <sysCallSize(regs*)+0x76>
c001697e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016983:	77 36                	ja     c00169bb <sysCallSize(regs*)+0x4d>
c0016985:	83 ec 0c             	sub    esp,0xc
c0016988:	50                   	push   eax
c0016989:	e8 d3 76 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c001698e:	83 c4 0c             	add    esp,0xc
c0016991:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016995:	52                   	push   edx
c0016996:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016999:	52                   	push   edx
c001699a:	50                   	push   eax
c001699b:	e8 ac 90 ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c00169a0:	83 c4 10             	add    esp,0x10
c00169a3:	85 c0                	test   eax,eax
c00169a5:	0f 95 c0             	setne  al
c00169a8:	25 ff 00 00 00       	and    eax,0xff
c00169ad:	31 d2                	xor    edx,edx
c00169af:	f7 d8                	neg    eax
c00169b1:	83 d2 00             	adc    edx,0x0
c00169b4:	83 c4 18             	add    esp,0x18
c00169b7:	f7 da                	neg    edx
c00169b9:	5b                   	pop    ebx
c00169ba:	c3                   	ret    
c00169bb:	51                   	push   ecx
c00169bc:	51                   	push   ecx
c00169bd:	50                   	push   eax
c00169be:	68 98 2b 02 c0       	push   0xc0022b98
c00169c3:	e8 3d 88 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00169c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169cb:	83 c4 10             	add    esp,0x10
c00169ce:	31 d2                	xor    edx,edx
c00169d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169dd:	83 c4 18             	add    esp,0x18
c00169e0:	31 c0                	xor    eax,eax
c00169e2:	5b                   	pop    ebx
c00169e3:	c3                   	ret    
c00169e4:	83 c4 18             	add    esp,0x18
c00169e7:	83 c8 ff             	or     eax,0xffffffff
c00169ea:	83 ca ff             	or     edx,0xffffffff
c00169ed:	5b                   	pop    ebx
c00169ee:	c3                   	ret    

c00169ef <sysCallClose(regs*)>:
c00169ef:	53                   	push   ebx
c00169f0:	83 ec 08             	sub    esp,0x8
c00169f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00169fa:	83 f8 02             	cmp    eax,0x2
c00169fd:	76 4f                	jbe    c0016a4e <sysCallClose(regs*)+0x5f>
c00169ff:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a04:	74 53                	je     c0016a59 <sysCallClose(regs*)+0x6a>
c0016a06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a0b:	74 5b                	je     c0016a68 <sysCallClose(regs*)+0x79>
c0016a0d:	77 2f                	ja     c0016a3e <sysCallClose(regs*)+0x4f>
c0016a0f:	83 ec 0c             	sub    esp,0xc
c0016a12:	50                   	push   eax
c0016a13:	e8 49 76 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016a18:	89 c3                	mov    ebx,eax
c0016a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a1d:	e8 dc 8d ff ff       	call   c000f7fe <File::close()>
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	85 db                	test   ebx,ebx
c0016a27:	74 0c                	je     c0016a35 <sysCallClose(regs*)+0x46>
c0016a29:	83 ec 0c             	sub    esp,0xc
c0016a2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a2e:	53                   	push   ebx
c0016a2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	83 c4 08             	add    esp,0x8
c0016a38:	31 c0                	xor    eax,eax
c0016a3a:	31 d2                	xor    edx,edx
c0016a3c:	5b                   	pop    ebx
c0016a3d:	c3                   	ret    
c0016a3e:	52                   	push   edx
c0016a3f:	52                   	push   edx
c0016a40:	50                   	push   eax
c0016a41:	68 cc 2a 02 c0       	push   0xc0022acc
c0016a46:	e8 ba 87 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	83 c4 08             	add    esp,0x8
c0016a51:	83 c8 ff             	or     eax,0xffffffff
c0016a54:	83 ca ff             	or     edx,0xffffffff
c0016a57:	5b                   	pop    ebx
c0016a58:	c3                   	ret    
c0016a59:	83 ec 0c             	sub    esp,0xc
c0016a5c:	68 b3 2b 02 c0       	push   0xc0022bb3
c0016a61:	e8 9f 87 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016a66:	eb ca                	jmp    c0016a32 <sysCallClose(regs*)+0x43>
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	68 c1 2b 02 c0       	push   0xc0022bc1
c0016a70:	eb ef                	jmp    c0016a61 <sysCallClose(regs*)+0x72>

c0016a72 <sysCallOpenDir(regs*)>:
c0016a72:	56                   	push   esi
c0016a73:	53                   	push   ebx
c0016a74:	50                   	push   eax
c0016a75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a7c:	85 c0                	test   eax,eax
c0016a7e:	74 53                	je     c0016ad3 <sysCallOpenDir(regs*)+0x61>
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	68 14 01 00 00       	push   0x114
c0016a88:	e8 43 86 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016a8d:	89 c6                	mov    esi,eax
c0016a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a94:	83 c4 0c             	add    esp,0xc
c0016a97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a9a:	50                   	push   eax
c0016a9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a9e:	50                   	push   eax
c0016a9f:	56                   	push   esi
c0016aa0:	e8 59 91 ff ff       	call   c000fbfe <Directory::Directory(char const*, Process*)>
c0016aa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0016aa8:	e8 b5 91 ff ff       	call   c000fc62 <Directory::open()>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	85 c0                	test   eax,eax
c0016ab2:	75 1f                	jne    c0016ad3 <sysCallOpenDir(regs*)+0x61>
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	56                   	push   esi
c0016ab8:	e8 ef 72 ff ff       	call   c000ddac <UnixFile::getFileDescriptor()>
c0016abd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ac0:	83 c4 10             	add    esp,0x10
c0016ac3:	89 02                	mov    DWORD PTR [edx],eax
c0016ac5:	c1 f8 1f             	sar    eax,0x1f
c0016ac8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016acb:	31 c0                	xor    eax,eax
c0016acd:	59                   	pop    ecx
c0016ace:	31 d2                	xor    edx,edx
c0016ad0:	5b                   	pop    ebx
c0016ad1:	5e                   	pop    esi
c0016ad2:	c3                   	ret    
c0016ad3:	59                   	pop    ecx
c0016ad4:	83 c8 ff             	or     eax,0xffffffff
c0016ad7:	5b                   	pop    ebx
c0016ad8:	83 ca ff             	or     edx,0xffffffff
c0016adb:	5e                   	pop    esi
c0016adc:	c3                   	ret    

c0016add <sysCallMakeDir(regs*)>:
c0016add:	56                   	push   esi
c0016ade:	53                   	push   ebx
c0016adf:	83 ec 10             	sub    esp,0x10
c0016ae2:	68 14 01 00 00       	push   0x114
c0016ae7:	e8 e4 85 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016aec:	89 c3                	mov    ebx,eax
c0016aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af3:	83 c4 0c             	add    esp,0xc
c0016af6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016af9:	50                   	push   eax
c0016afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016afe:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b01:	52                   	push   edx
c0016b02:	53                   	push   ebx
c0016b03:	e8 f6 90 ff ff       	call   c000fbfe <Directory::Directory(char const*, Process*)>
c0016b08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b0b:	e8 32 93 ff ff       	call   c000fe42 <Directory::create()>
c0016b10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b13:	89 c6                	mov    esi,eax
c0016b15:	e8 a4 91 ff ff       	call   c000fcbe <Directory::close()>
c0016b1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b22:	31 c0                	xor    eax,eax
c0016b24:	85 f6                	test   esi,esi
c0016b26:	0f 95 c0             	setne  al
c0016b29:	31 d2                	xor    edx,edx
c0016b2b:	f7 d8                	neg    eax
c0016b2d:	83 d2 00             	adc    edx,0x0
c0016b30:	83 c4 14             	add    esp,0x14
c0016b33:	f7 da                	neg    edx
c0016b35:	5b                   	pop    ebx
c0016b36:	5e                   	pop    esi
c0016b37:	c3                   	ret    

c0016b38 <sysCallCloseDir(regs*)>:
c0016b38:	53                   	push   ebx
c0016b39:	83 ec 08             	sub    esp,0x8
c0016b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b43:	83 f8 02             	cmp    eax,0x2
c0016b46:	76 46                	jbe    c0016b8e <sysCallCloseDir(regs*)+0x56>
c0016b48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b4d:	77 2f                	ja     c0016b7e <sysCallCloseDir(regs*)+0x46>
c0016b4f:	83 ec 0c             	sub    esp,0xc
c0016b52:	50                   	push   eax
c0016b53:	e8 09 75 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016b58:	89 c3                	mov    ebx,eax
c0016b5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b5d:	e8 5c 91 ff ff       	call   c000fcbe <Directory::close()>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	85 db                	test   ebx,ebx
c0016b67:	74 0c                	je     c0016b75 <sysCallCloseDir(regs*)+0x3d>
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b6e:	53                   	push   ebx
c0016b6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	83 c4 08             	add    esp,0x8
c0016b78:	31 c0                	xor    eax,eax
c0016b7a:	31 d2                	xor    edx,edx
c0016b7c:	5b                   	pop    ebx
c0016b7d:	c3                   	ret    
c0016b7e:	52                   	push   edx
c0016b7f:	52                   	push   edx
c0016b80:	50                   	push   eax
c0016b81:	68 f4 2a 02 c0       	push   0xc0022af4
c0016b86:	e8 7a 86 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0016b8b:	83 c4 10             	add    esp,0x10
c0016b8e:	83 c4 08             	add    esp,0x8
c0016b91:	83 c8 ff             	or     eax,0xffffffff
c0016b94:	83 ca ff             	or     edx,0xffffffff
c0016b97:	5b                   	pop    ebx
c0016b98:	c3                   	ret    

c0016b99 <sysCallWait(regs*)>:
c0016b99:	83 ec 10             	sub    esp,0x10
c0016b9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ba0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016ba3:	52                   	push   edx
c0016ba4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016ba7:	51                   	push   ecx
c0016ba8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bab:	50                   	push   eax
c0016bac:	e8 4f 23 00 00       	call   c0018f00 <waitTask(int, int*, int)>
c0016bb1:	89 c2                	mov    edx,eax
c0016bb3:	83 c4 1c             	add    esp,0x1c
c0016bb6:	c1 fa 1f             	sar    edx,0x1f
c0016bb9:	c3                   	ret    

c0016bba <sysCallRmdir(regs*)>:
c0016bba:	56                   	push   esi
c0016bbb:	53                   	push   ebx
c0016bbc:	83 ec 10             	sub    esp,0x10
c0016bbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bc3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bc6:	68 14 01 00 00       	push   0x114
c0016bcb:	e8 00 85 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016bd0:	83 c4 0c             	add    esp,0xc
c0016bd3:	89 c3                	mov    ebx,eax
c0016bd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bdd:	50                   	push   eax
c0016bde:	56                   	push   esi
c0016bdf:	53                   	push   ebx
c0016be0:	e8 57 8b ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0016be5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016be8:	e8 2b 8d ff ff       	call   c000f918 <File::unlink()>
c0016bed:	89 c6                	mov    esi,eax
c0016bef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bf7:	31 c0                	xor    eax,eax
c0016bf9:	85 f6                	test   esi,esi
c0016bfb:	0f 95 c0             	setne  al
c0016bfe:	31 d2                	xor    edx,edx
c0016c00:	f7 d8                	neg    eax
c0016c02:	83 d2 00             	adc    edx,0x0
c0016c05:	83 c4 14             	add    esp,0x14
c0016c08:	f7 da                	neg    edx
c0016c0a:	5b                   	pop    ebx
c0016c0b:	5e                   	pop    esi
c0016c0c:	c3                   	ret    

c0016c0d <sysCallUnlink(regs*)>:
c0016c0d:	56                   	push   esi
c0016c0e:	53                   	push   ebx
c0016c0f:	83 ec 10             	sub    esp,0x10
c0016c12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c16:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c19:	68 14 01 00 00       	push   0x114
c0016c1e:	e8 ad 84 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016c23:	83 c4 0c             	add    esp,0xc
c0016c26:	89 c3                	mov    ebx,eax
c0016c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c30:	50                   	push   eax
c0016c31:	56                   	push   esi
c0016c32:	53                   	push   ebx
c0016c33:	e8 04 8b ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0016c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c3b:	e8 d8 8c ff ff       	call   c000f918 <File::unlink()>
c0016c40:	89 c6                	mov    esi,eax
c0016c42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c4a:	31 c0                	xor    eax,eax
c0016c4c:	85 f6                	test   esi,esi
c0016c4e:	0f 95 c0             	setne  al
c0016c51:	31 d2                	xor    edx,edx
c0016c53:	f7 d8                	neg    eax
c0016c55:	83 d2 00             	adc    edx,0x0
c0016c58:	83 c4 14             	add    esp,0x14
c0016c5b:	f7 da                	neg    edx
c0016c5d:	5b                   	pop    ebx
c0016c5e:	5e                   	pop    esi
c0016c5f:	c3                   	ret    

c0016c60 <sysCallGetArgv(regs*)>:
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c67:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c6a:	85 c0                	test   eax,eax
c0016c6c:	78 2b                	js     c0016c99 <sysCallGetArgv(regs*)+0x39>
c0016c6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c74:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c77:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c7d:	7d 1a                	jge    c0016c99 <sysCallGetArgv(regs*)+0x39>
c0016c7f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c86:	85 c0                	test   eax,eax
c0016c88:	74 17                	je     c0016ca1 <sysCallGetArgv(regs*)+0x41>
c0016c8a:	51                   	push   ecx
c0016c8b:	51                   	push   ecx
c0016c8c:	50                   	push   eax
c0016c8d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016c90:	50                   	push   eax
c0016c91:	e8 be 9a fe ff       	call   c0000754 <strcpy>
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	31 c0                	xor    eax,eax
c0016c9b:	31 d2                	xor    edx,edx
c0016c9d:	83 c4 0c             	add    esp,0xc
c0016ca0:	c3                   	ret    
c0016ca1:	b8 01 00 00 00       	mov    eax,0x1
c0016ca6:	31 d2                	xor    edx,edx
c0016ca8:	83 c4 0c             	add    esp,0xc
c0016cab:	c3                   	ret    

c0016cac <sysCallTTYName(regs*)>:
c0016cac:	56                   	push   esi
c0016cad:	53                   	push   ebx
c0016cae:	50                   	push   eax
c0016caf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cb3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cb6:	85 c0                	test   eax,eax
c0016cb8:	74 4d                	je     c0016d07 <sysCallTTYName(regs*)+0x5b>
c0016cba:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cbd:	83 f8 02             	cmp    eax,0x2
c0016cc0:	76 07                	jbe    c0016cc9 <sysCallTTYName(regs*)+0x1d>
c0016cc2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cc7:	75 54                	jne    c0016d1d <sysCallTTYName(regs*)+0x71>
c0016cc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cd1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016cd7:	85 db                	test   ebx,ebx
c0016cd9:	74 2c                	je     c0016d07 <sysCallTTYName(regs*)+0x5b>
c0016cdb:	83 ec 0c             	sub    esp,0xc
c0016cde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ce0:	53                   	push   ebx
c0016ce1:	ff 10                	call   DWORD PTR [eax]
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	84 c0                	test   al,al
c0016ce8:	74 28                	je     c0016d12 <sysCallTTYName(regs*)+0x66>
c0016cea:	50                   	push   eax
c0016ceb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016cf1:	50                   	push   eax
c0016cf2:	53                   	push   ebx
c0016cf3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cf6:	50                   	push   eax
c0016cf7:	e8 58 9a fe ff       	call   c0000754 <strcpy>
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	31 c0                	xor    eax,eax
c0016d01:	31 d2                	xor    edx,edx
c0016d03:	59                   	pop    ecx
c0016d04:	5b                   	pop    ebx
c0016d05:	5e                   	pop    esi
c0016d06:	c3                   	ret    
c0016d07:	59                   	pop    ecx
c0016d08:	b8 01 00 00 00       	mov    eax,0x1
c0016d0d:	5b                   	pop    ebx
c0016d0e:	31 d2                	xor    edx,edx
c0016d10:	5e                   	pop    esi
c0016d11:	c3                   	ret    
c0016d12:	59                   	pop    ecx
c0016d13:	b8 02 00 00 00       	mov    eax,0x2
c0016d18:	5b                   	pop    ebx
c0016d19:	31 d2                	xor    edx,edx
c0016d1b:	5e                   	pop    esi
c0016d1c:	c3                   	ret    
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	50                   	push   eax
c0016d21:	e8 3b 73 ff ff       	call   c000e061 <getFromFileDescriptor(int)>
c0016d26:	83 c4 10             	add    esp,0x10
c0016d29:	89 c3                	mov    ebx,eax
c0016d2b:	eb aa                	jmp    c0016cd7 <sysCallTTYName(regs*)+0x2b>

c0016d2d <sysCallGetEnv(regs*)>:
c0016d2d:	83 ec 0c             	sub    esp,0xc
c0016d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d34:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d37:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d3a:	85 d2                	test   edx,edx
c0016d3c:	75 22                	jne    c0016d60 <sysCallGetEnv(regs*)+0x33>
c0016d3e:	31 c0                	xor    eax,eax
c0016d40:	31 d2                	xor    edx,edx
c0016d42:	85 c9                	test   ecx,ecx
c0016d44:	74 04                	je     c0016d4a <sysCallGetEnv(regs*)+0x1d>
c0016d46:	83 c4 0c             	add    esp,0xc
c0016d49:	c3                   	ret    
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	68 18 2b 02 c0       	push   0xc0022b18
c0016d52:	e8 7b 99 fe ff       	call   c00006d2 <strlen>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	31 d2                	xor    edx,edx
c0016d5c:	83 c4 0c             	add    esp,0xc
c0016d5f:	c3                   	ret    
c0016d60:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d63:	85 c9                	test   ecx,ecx
c0016d65:	74 0b                	je     c0016d72 <sysCallGetEnv(regs*)+0x45>
c0016d67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d6a:	31 c0                	xor    eax,eax
c0016d6c:	31 d2                	xor    edx,edx
c0016d6e:	83 c4 0c             	add    esp,0xc
c0016d71:	c3                   	ret    
c0016d72:	52                   	push   edx
c0016d73:	52                   	push   edx
c0016d74:	68 18 2b 02 c0       	push   0xc0022b18
c0016d79:	50                   	push   eax
c0016d7a:	e8 d5 99 fe ff       	call   c0000754 <strcpy>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	eb e6                	jmp    c0016d6a <sysCallGetEnv(regs*)+0x3d>

c0016d84 <sysCallUSleep(regs*)>:
c0016d84:	57                   	push   edi
c0016d85:	56                   	push   esi
c0016d86:	53                   	push   ebx
c0016d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8b:	52                   	push   edx
c0016d8c:	52                   	push   edx
c0016d8d:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016d90:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d93:	89 c8                	mov    eax,ecx
c0016d95:	89 da                	mov    edx,ebx
c0016d97:	0f a4 c2 05          	shld   edx,eax,0x5
c0016d9b:	c1 e0 05             	shl    eax,0x5
c0016d9e:	29 c8                	sub    eax,ecx
c0016da0:	19 da                	sbb    edx,ebx
c0016da2:	0f a4 c2 02          	shld   edx,eax,0x2
c0016da6:	c1 e0 02             	shl    eax,0x2
c0016da9:	01 c8                	add    eax,ecx
c0016dab:	11 da                	adc    edx,ebx
c0016dad:	0f a4 c2 03          	shld   edx,eax,0x3
c0016db1:	c1 e0 03             	shl    eax,0x3
c0016db4:	52                   	push   edx
c0016db5:	50                   	push   eax
c0016db6:	e8 e0 21 00 00       	call   c0018f9b <nanoSleep(unsigned long long)>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	31 c0                	xor    eax,eax
c0016dc0:	31 d2                	xor    edx,edx
c0016dc2:	5b                   	pop    ebx
c0016dc3:	5e                   	pop    esi
c0016dc4:	5f                   	pop    edi
c0016dc5:	c3                   	ret    

c0016dc6 <sysCallSpawn(regs*)>:
c0016dc6:	56                   	push   esi
c0016dc7:	53                   	push   ebx
c0016dc8:	50                   	push   eax
c0016dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dcd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dd0:	85 c0                	test   eax,eax
c0016dd2:	75 08                	jne    c0016ddc <sysCallSpawn(regs*)+0x16>
c0016dd4:	59                   	pop    ecx
c0016dd5:	31 c0                	xor    eax,eax
c0016dd7:	5b                   	pop    ebx
c0016dd8:	31 d2                	xor    edx,edx
c0016dda:	5e                   	pop    esi
c0016ddb:	c3                   	ret    
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	68 3b 07 00 00       	push   0x73b
c0016de4:	e8 e7 82 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016de9:	89 c6                	mov    esi,eax
c0016deb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016dee:	50                   	push   eax
c0016def:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016df7:	50                   	push   eax
c0016df8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dfb:	50                   	push   eax
c0016dfc:	56                   	push   esi
c0016dfd:	e8 d6 18 00 00       	call   c00186d8 <Process::Process(char const*, Process*, char**)>
c0016e02:	83 c4 20             	add    esp,0x20
c0016e05:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e0c:	75 c6                	jne    c0016dd4 <sysCallSpawn(regs*)+0xe>
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	56                   	push   esi
c0016e12:	e8 3d 1e 00 00       	call   c0018c54 <Process::createUserThread()>
c0016e17:	83 c4 10             	add    esp,0x10
c0016e1a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e1c:	89 c2                	mov    edx,eax
c0016e1e:	c1 fa 1f             	sar    edx,0x1f
c0016e21:	59                   	pop    ecx
c0016e22:	5b                   	pop    ebx
c0016e23:	5e                   	pop    esi
c0016e24:	c3                   	ret    

c0016e25 <sysAppSettings(regs*)>:
c0016e25:	53                   	push   ebx
c0016e26:	31 d2                	xor    edx,edx
c0016e28:	83 ec 08             	sub    esp,0x8
c0016e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e32:	b8 01 00 00 00       	mov    eax,0x1
c0016e37:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e3d:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e43:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e48:	75 30                	jne    c0016e7a <sysAppSettings(regs*)+0x55>
c0016e4a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e50:	83 e0 1f             	and    eax,0x1f
c0016e53:	3c 01                	cmp    al,0x1
c0016e55:	74 28                	je     c0016e7f <sysAppSettings(regs*)+0x5a>
c0016e57:	3c 07                	cmp    al,0x7
c0016e59:	0f 84 be 00 00 00    	je     c0016f1d <sysAppSettings(regs*)+0xf8>
c0016e5f:	84 c0                	test   al,al
c0016e61:	0f 84 da 00 00 00    	je     c0016f41 <sysAppSettings(regs*)+0x11c>
c0016e67:	3c 08                	cmp    al,0x8
c0016e69:	74 6d                	je     c0016ed8 <sysAppSettings(regs*)+0xb3>
c0016e6b:	25 ff 00 00 00       	and    eax,0xff
c0016e70:	05 e8 03 00 00       	add    eax,0x3e8
c0016e75:	89 c2                	mov    edx,eax
c0016e77:	c1 fa 1f             	sar    edx,0x1f
c0016e7a:	83 c4 08             	add    esp,0x8
c0016e7d:	5b                   	pop    ebx
c0016e7e:	c3                   	ret    
c0016e7f:	50                   	push   eax
c0016e80:	68 00 01 00 00       	push   0x100
c0016e85:	6a 00                	push   0x0
c0016e87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e8f:	83 c0 0c             	add    eax,0xc
c0016e92:	50                   	push   eax
c0016e93:	e8 1d 98 fe ff       	call   c00006b5 <memset>
c0016e98:	83 c4 0c             	add    esp,0xc
c0016e9b:	68 ff 00 00 00       	push   0xff
c0016ea0:	53                   	push   ebx
c0016ea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ea9:	83 c0 0c             	add    eax,0xc
c0016eac:	50                   	push   eax
c0016ead:	e8 cd 97 fe ff       	call   c000067f <memcpy>
c0016eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb7:	5a                   	pop    edx
c0016eb8:	59                   	pop    ecx
c0016eb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ebc:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ebf:	52                   	push   edx
c0016ec0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ec6:	53                   	push   ebx
c0016ec7:	e8 dc 62 ff ff       	call   c000d1a8 <VgaText::setTitle(char*)>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	31 c0                	xor    eax,eax
c0016ed1:	31 d2                	xor    edx,edx
c0016ed3:	83 c4 08             	add    esp,0x8
c0016ed6:	5b                   	pop    ebx
c0016ed7:	c3                   	ret    
c0016ed8:	50                   	push   eax
c0016ed9:	50                   	push   eax
c0016eda:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ee0:	83 e0 0f             	and    eax,0xf
c0016ee3:	50                   	push   eax
c0016ee4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016ef2:	50                   	push   eax
c0016ef3:	e8 a0 62 ff ff       	call   c000d198 <VgaText::setTitleColour(VgaColour)>
c0016ef8:	58                   	pop    eax
c0016ef9:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016eff:	c1 e8 04             	shr    eax,0x4
c0016f02:	5a                   	pop    edx
c0016f03:	83 e0 0f             	and    eax,0xf
c0016f06:	50                   	push   eax
c0016f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f0f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f15:	51                   	push   ecx
c0016f16:	e8 6d 62 ff ff       	call   c000d188 <VgaText::setTitleTextColour(VgaColour)>
c0016f1b:	eb af                	jmp    c0016ecc <sysAppSettings(regs*)+0xa7>
c0016f1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f25:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f2b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f31:	c0 e8 06             	shr    al,0x6
c0016f34:	83 e0 01             	and    eax,0x1
c0016f37:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f3d:	31 c0                	xor    eax,eax
c0016f3f:	eb 90                	jmp    c0016ed1 <sysAppSettings(regs*)+0xac>
c0016f41:	b8 02 00 00 00       	mov    eax,0x2
c0016f46:	31 d2                	xor    edx,edx
c0016f48:	eb 89                	jmp    c0016ed3 <sysAppSettings(regs*)+0xae>

c0016f4a <sysSetFatAttrib(regs*)>:
c0016f4a:	57                   	push   edi
c0016f4b:	56                   	push   esi
c0016f4c:	53                   	push   ebx
c0016f4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f51:	83 ec 0c             	sub    esp,0xc
c0016f54:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f57:	68 14 01 00 00       	push   0x114
c0016f5c:	e8 6f 81 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016f61:	83 c4 0c             	add    esp,0xc
c0016f64:	89 c3                	mov    ebx,eax
c0016f66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f6e:	50                   	push   eax
c0016f6f:	57                   	push   edi
c0016f70:	53                   	push   ebx
c0016f71:	e8 c6 87 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0016f76:	83 c4 0c             	add    esp,0xc
c0016f79:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f7c:	0f b6 d4             	movzx  edx,ah
c0016f7f:	52                   	push   edx
c0016f80:	25 ff 00 00 00       	and    eax,0xff
c0016f85:	50                   	push   eax
c0016f86:	53                   	push   ebx
c0016f87:	e8 26 8a ff ff       	call   c000f9b2 <File::chfatattr(unsigned char, unsigned char)>
c0016f8c:	89 c6                	mov    esi,eax
c0016f8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	31 c0                	xor    eax,eax
c0016f9b:	85 f6                	test   esi,esi
c0016f9d:	0f 95 c0             	setne  al
c0016fa0:	5b                   	pop    ebx
c0016fa1:	31 d2                	xor    edx,edx
c0016fa3:	f7 d8                	neg    eax
c0016fa5:	83 d2 00             	adc    edx,0x0
c0016fa8:	5e                   	pop    esi
c0016fa9:	f7 da                	neg    edx
c0016fab:	5f                   	pop    edi
c0016fac:	c3                   	ret    

c0016fad <sysPanic(regs*)>:
c0016fad:	83 ec 18             	sub    esp,0x18
c0016fb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fb4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fb7:	50                   	push   eax
c0016fb8:	e8 77 ea ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0016fbd:	c7 04 24 cf 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bcf
c0016fc4:	e8 6b ea ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0016fc9:	b8 01 00 00 00       	mov    eax,0x1
c0016fce:	31 d2                	xor    edx,edx
c0016fd0:	83 c4 1c             	add    esp,0x1c
c0016fd3:	c3                   	ret    

c0016fd4 <sysPipe(regs*)>:
c0016fd4:	57                   	push   edi
c0016fd5:	56                   	push   esi
c0016fd6:	53                   	push   ebx
c0016fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fdb:	83 ec 0c             	sub    esp,0xc
c0016fde:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fe1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016fe4:	6a 20                	push   0x20
c0016fe6:	e8 e5 80 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0016feb:	89 c3                	mov    ebx,eax
c0016fed:	58                   	pop    eax
c0016fee:	5a                   	pop    edx
c0016fef:	68 00 50 00 00       	push   0x5000
c0016ff4:	53                   	push   ebx
c0016ff5:	e8 ec 5a ff ff       	call   c000cae6 <Pipe::Pipe(int)>
c0016ffa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ffd:	e8 aa 6d ff ff       	call   c000ddac <UnixFile::getFileDescriptor()>
c0017002:	89 07                	mov    DWORD PTR [edi],eax
c0017004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017007:	e8 a0 6d ff ff       	call   c000ddac <UnixFile::getFileDescriptor()>
c001700c:	83 c4 10             	add    esp,0x10
c001700f:	89 06                	mov    DWORD PTR [esi],eax
c0017011:	31 d2                	xor    edx,edx
c0017013:	5b                   	pop    ebx
c0017014:	31 c0                	xor    eax,eax
c0017016:	5e                   	pop    esi
c0017017:	5f                   	pop    edi
c0017018:	c3                   	ret    

c0017019 <sysGetUnixTime(regs*)>:
c0017019:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001701e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017024:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017028:	e9 d7 90 ff ff       	jmp    c0010104 <Clock::timeInSecondsLocal()>

c001702d <string_ends_with(char const*, char const*)>:
c001702d:	57                   	push   edi
c001702e:	56                   	push   esi
c001702f:	53                   	push   ebx
c0017030:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017034:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017038:	83 ec 0c             	sub    esp,0xc
c001703b:	53                   	push   ebx
c001703c:	e8 91 96 fe ff       	call   c00006d2 <strlen>
c0017041:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017044:	89 c6                	mov    esi,eax
c0017046:	e8 87 96 fe ff       	call   c00006d2 <strlen>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	31 d2                	xor    edx,edx
c0017050:	39 c6                	cmp    esi,eax
c0017052:	7d 06                	jge    c001705a <string_ends_with(char const*, char const*)+0x2d>
c0017054:	5b                   	pop    ebx
c0017055:	89 d0                	mov    eax,edx
c0017057:	5e                   	pop    esi
c0017058:	5f                   	pop    edi
c0017059:	c3                   	ret    
c001705a:	52                   	push   edx
c001705b:	29 c6                	sub    esi,eax
c001705d:	52                   	push   edx
c001705e:	01 f3                	add    ebx,esi
c0017060:	57                   	push   edi
c0017061:	53                   	push   ebx
c0017062:	e8 3e 97 fe ff       	call   c00007a5 <strcmp>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	31 d2                	xor    edx,edx
c001706c:	85 c0                	test   eax,eax
c001706e:	5b                   	pop    ebx
c001706f:	0f 94 c2             	sete   dl
c0017072:	5e                   	pop    esi
c0017073:	89 d0                	mov    eax,edx
c0017075:	5f                   	pop    edi
c0017076:	c3                   	ret    

c0017077 <sysCallOpen(regs*)>:
c0017077:	56                   	push   esi
c0017078:	53                   	push   ebx
c0017079:	81 ec 04 01 00 00    	sub    esp,0x104
c001707f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017086:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017089:	85 c9                	test   ecx,ecx
c001708b:	0f 84 bb 00 00 00    	je     c001714c <sysCallOpen(regs*)+0xd5>
c0017091:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017094:	85 c0                	test   eax,eax
c0017096:	0f 84 b0 00 00 00    	je     c001714c <sysCallOpen(regs*)+0xd5>
c001709c:	52                   	push   edx
c001709d:	68 de 2b 02 c0       	push   0xc0022bde
c00170a2:	50                   	push   eax
c00170a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170a7:	56                   	push   esi
c00170a8:	e8 e5 84 ff ff       	call   c000f592 <standardiseFiles(char*, char const*, char const*)>
c00170ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00170b0:	e8 1d 96 fe ff       	call   c00006d2 <strlen>
c00170b5:	83 c4 10             	add    esp,0x10
c00170b8:	48                   	dec    eax
c00170b9:	74 25                	je     c00170e0 <sysCallOpen(regs*)+0x69>
c00170bb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170be:	80 fa 2e             	cmp    dl,0x2e
c00170c1:	74 19                	je     c00170dc <sysCallOpen(regs*)+0x65>
c00170c3:	80 fa 3a             	cmp    dl,0x3a
c00170c6:	74 14                	je     c00170dc <sysCallOpen(regs*)+0x65>
c00170c8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170cc:	48                   	dec    eax
c00170cd:	74 11                	je     c00170e0 <sysCallOpen(regs*)+0x69>
c00170cf:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170d2:	80 fa 3a             	cmp    dl,0x3a
c00170d5:	74 05                	je     c00170dc <sysCallOpen(regs*)+0x65>
c00170d7:	80 fa 2e             	cmp    dl,0x2e
c00170da:	75 ec                	jne    c00170c8 <sysCallOpen(regs*)+0x51>
c00170dc:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170e0:	51                   	push   ecx
c00170e1:	51                   	push   ecx
c00170e2:	68 e2 2b 02 c0       	push   0xc0022be2
c00170e7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ea:	50                   	push   eax
c00170eb:	e8 3d ff ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c00170f0:	83 c4 10             	add    esp,0x10
c00170f3:	85 c0                	test   eax,eax
c00170f5:	75 17                	jne    c001710e <sysCallOpen(regs*)+0x97>
c00170f7:	50                   	push   eax
c00170f8:	50                   	push   eax
c00170f9:	68 03 2c 02 c0       	push   0xc0022c03
c00170fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017101:	50                   	push   eax
c0017102:	e8 26 ff ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	85 c0                	test   eax,eax
c001710c:	74 4d                	je     c001715b <sysCallOpen(regs*)+0xe4>
c001710e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017111:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017117:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001711e:	50                   	push   eax
c001711f:	50                   	push   eax
c0017120:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017123:	8b 10                	mov    edx,DWORD PTR [eax]
c0017125:	52                   	push   edx
c0017126:	68 e7 2b 02 c0       	push   0xc0022be7
c001712b:	e8 d5 80 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017130:	c7 04 24 f6 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bf6
c0017137:	e8 c9 80 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	81 c4 04 01 00 00    	add    esp,0x104
c0017145:	31 c0                	xor    eax,eax
c0017147:	31 d2                	xor    edx,edx
c0017149:	5b                   	pop    ebx
c001714a:	5e                   	pop    esi
c001714b:	c3                   	ret    
c001714c:	81 c4 04 01 00 00    	add    esp,0x104
c0017152:	83 c8 ff             	or     eax,0xffffffff
c0017155:	83 ca ff             	or     edx,0xffffffff
c0017158:	5b                   	pop    ebx
c0017159:	5e                   	pop    esi
c001715a:	c3                   	ret    
c001715b:	50                   	push   eax
c001715c:	50                   	push   eax
c001715d:	68 e3 2b 02 c0       	push   0xc0022be3
c0017162:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017165:	50                   	push   eax
c0017166:	e8 3a 96 fe ff       	call   c00007a5 <strcmp>
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	85 c0                	test   eax,eax
c0017170:	74 9c                	je     c001710e <sysCallOpen(regs*)+0x97>
c0017172:	50                   	push   eax
c0017173:	50                   	push   eax
c0017174:	68 e2 2b 02 c0       	push   0xc0022be2
c0017179:	56                   	push   esi
c001717a:	e8 ae fe ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c001717f:	83 c4 10             	add    esp,0x10
c0017182:	85 c0                	test   eax,eax
c0017184:	75 88                	jne    c001710e <sysCallOpen(regs*)+0x97>
c0017186:	52                   	push   edx
c0017187:	52                   	push   edx
c0017188:	68 08 2c 02 c0       	push   0xc0022c08
c001718d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0017190:	51                   	push   ecx
c0017191:	e8 97 fe ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	85 c0                	test   eax,eax
c001719b:	0f 85 d5 00 00 00    	jne    c0017276 <sysCallOpen(regs*)+0x1ff>
c00171a1:	50                   	push   eax
c00171a2:	50                   	push   eax
c00171a3:	68 0d 2c 02 c0       	push   0xc0022c0d
c00171a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171ab:	50                   	push   eax
c00171ac:	e8 7c fe ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	85 c0                	test   eax,eax
c00171b6:	0f 85 ba 00 00 00    	jne    c0017276 <sysCallOpen(regs*)+0x1ff>
c00171bc:	50                   	push   eax
c00171bd:	50                   	push   eax
c00171be:	68 09 2c 02 c0       	push   0xc0022c09
c00171c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c6:	50                   	push   eax
c00171c7:	e8 d9 95 fe ff       	call   c00007a5 <strcmp>
c00171cc:	83 c4 10             	add    esp,0x10
c00171cf:	85 c0                	test   eax,eax
c00171d1:	0f 84 9f 00 00 00    	je     c0017276 <sysCallOpen(regs*)+0x1ff>
c00171d7:	50                   	push   eax
c00171d8:	50                   	push   eax
c00171d9:	68 08 2c 02 c0       	push   0xc0022c08
c00171de:	56                   	push   esi
c00171df:	e8 49 fe ff ff       	call   c001702d <string_ends_with(char const*, char const*)>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	85 c0                	test   eax,eax
c00171e9:	0f 85 87 00 00 00    	jne    c0017276 <sysCallOpen(regs*)+0x1ff>
c00171ef:	83 ec 0c             	sub    esp,0xc
c00171f2:	68 14 01 00 00       	push   0x114
c00171f7:	e8 d4 7e ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00171fc:	89 c6                	mov    esi,eax
c00171fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017203:	83 c4 0c             	add    esp,0xc
c0017206:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017209:	51                   	push   ecx
c001720a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001720d:	50                   	push   eax
c001720e:	56                   	push   esi
c001720f:	e8 28 85 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0017214:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017217:	83 c4 10             	add    esp,0x10
c001721a:	89 d0                	mov    eax,edx
c001721c:	25 ff 00 00 00       	and    eax,0xff
c0017221:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017224:	89 d0                	mov    eax,edx
c0017226:	83 e0 01             	and    eax,0x1
c0017229:	f6 c2 02             	test   dl,0x2
c001722c:	74 03                	je     c0017231 <sysCallOpen(regs*)+0x1ba>
c001722e:	83 c8 02             	or     eax,0x2
c0017231:	f6 c2 04             	test   dl,0x4
c0017234:	74 03                	je     c0017239 <sysCallOpen(regs*)+0x1c2>
c0017236:	83 c8 04             	or     eax,0x4
c0017239:	f6 c2 08             	test   dl,0x8
c001723c:	74 03                	je     c0017241 <sysCallOpen(regs*)+0x1ca>
c001723e:	83 c8 0a             	or     eax,0xa
c0017241:	83 e2 10             	and    edx,0x10
c0017244:	74 03                	je     c0017249 <sysCallOpen(regs*)+0x1d2>
c0017246:	83 c8 12             	or     eax,0x12
c0017249:	52                   	push   edx
c001724a:	52                   	push   edx
c001724b:	50                   	push   eax
c001724c:	56                   	push   esi
c001724d:	e8 4e 85 ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	85 c0                	test   eax,eax
c0017257:	0f 85 ef fe ff ff    	jne    c001714c <sysCallOpen(regs*)+0xd5>
c001725d:	83 ec 0c             	sub    esp,0xc
c0017260:	56                   	push   esi
c0017261:	e8 46 6b ff ff       	call   c000ddac <UnixFile::getFileDescriptor()>
c0017266:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017269:	89 02                	mov    DWORD PTR [edx],eax
c001726b:	c1 f8 1f             	sar    eax,0x1f
c001726e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017271:	e9 c6 fe ff ff       	jmp    c001713c <sysCallOpen(regs*)+0xc5>
c0017276:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017279:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001727f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017286:	e9 b4 fe ff ff       	jmp    c001713f <sysCallOpen(regs*)+0xc8>

c001728b <setupSystemCalls()>:
c001728b:	c7 05 e0 51 02 c0 86 64 01 c0 	mov    DWORD PTR ds:0xc00251e0,0xc0016486
c0017295:	c7 05 e4 51 02 c0 99 62 01 c0 	mov    DWORD PTR ds:0xc00251e4,0xc0016299
c001729f:	c7 05 e8 51 02 c0 ae 63 01 c0 	mov    DWORD PTR ds:0xc00251e8,0xc00163ae
c00172a9:	c7 05 ec 51 02 c0 03 64 01 c0 	mov    DWORD PTR ds:0xc00251ec,0xc0016403
c00172b3:	c7 05 f0 51 02 c0 46 63 01 c0 	mov    DWORD PTR ds:0xc00251f0,0xc0016346
c00172bd:	c7 05 f4 51 02 c0 a0 64 01 c0 	mov    DWORD PTR ds:0xc00251f4,0xc00164a0
c00172c7:	c7 05 f8 51 02 c0 5f 66 01 c0 	mov    DWORD PTR ds:0xc00251f8,0xc001665f
c00172d1:	c7 05 fc 51 02 c0 85 66 01 c0 	mov    DWORD PTR ds:0xc00251fc,0xc0016685
c00172db:	c7 05 04 52 02 c0 ef 69 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00169ef
c00172e5:	c7 05 00 52 02 c0 77 70 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc0017077
c00172ef:	c7 05 08 52 02 c0 72 6a 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0016a72
c00172f9:	c7 05 0c 52 02 c0 f4 66 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc00166f4
c0017303:	c7 05 10 52 02 c0 b0 64 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00164b0
c001730d:	c7 05 14 52 02 c0 b5 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164b5
c0017317:	c7 05 18 52 02 c0 dd 6a 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc0016add
c0017321:	c7 05 1c 52 02 c0 38 6b 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc0016b38
c001732b:	c7 05 20 52 02 c0 df 67 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc00167df
c0017335:	c7 05 24 52 02 c0 45 68 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc0016845
c001733f:	c7 05 28 52 02 c0 6e 69 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc001696e
c0017349:	c7 05 2c 52 02 c0 ba 64 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc00164ba
c0017353:	c7 05 30 52 02 c0 99 6b 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc0016b99
c001735d:	c7 05 34 52 02 c0 c4 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164c4
c0017367:	c7 05 38 52 02 c0 cb 64 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc00164cb
c0017371:	c7 05 3c 52 02 c0 ba 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016bba
c001737b:	c7 05 40 52 02 c0 0d 6c 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc0016c0d
c0017385:	c7 05 44 52 02 c0 d2 64 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc00164d2
c001738f:	c7 05 48 52 02 c0 60 6c 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0016c60
c0017399:	c7 05 4c 52 02 c0 a7 66 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00166a7
c00173a3:	c7 05 50 52 02 c0 ac 6c 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016cac
c00173ad:	c7 05 54 52 02 c0 87 67 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc0016787
c00173b7:	c7 05 58 52 02 c0 84 6d 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc0016d84
c00173c1:	c7 05 5c 52 02 c0 c0 68 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc00168c0
c00173cb:	c7 05 60 52 02 c0 c6 6d 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016dc6
c00173d5:	c7 05 64 52 02 c0 2d 6d 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc0016d2d
c00173df:	c7 05 68 52 02 c0 25 6e 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016e25
c00173e9:	c7 05 6c 52 02 c0 e6 64 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00164e6
c00173f3:	c7 05 70 52 02 c0 49 65 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016549
c00173fd:	c7 05 74 52 02 c0 91 65 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc0016591
c0017407:	c7 05 78 52 02 c0 4a 6f 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016f4a
c0017411:	c7 05 7c 52 02 c0 ad 6f 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc0016fad
c001741b:	c7 05 80 52 02 c0 e4 65 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc00165e4
c0017425:	c7 05 84 52 02 c0 d4 6f 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016fd4
c001742f:	c7 05 88 52 02 c0 19 70 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0017019
c0017439:	c7 05 8c 52 02 c0 b1 62 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00162b1
c0017443:	c3                   	ret    

c0017444 <systemCall(regs*, void*)>:
c0017444:	53                   	push   ebx
c0017445:	83 ec 08             	sub    esp,0x8
c0017448:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001744c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001744f:	83 f8 7f             	cmp    eax,0x7f
c0017452:	77 16                	ja     c001746a <systemCall(regs*, void*)+0x26>
c0017454:	8b 14 85 e0 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae20]
c001745b:	85 d2                	test   edx,edx
c001745d:	74 0b                	je     c001746a <systemCall(regs*, void*)+0x26>
c001745f:	83 ec 0c             	sub    esp,0xc
c0017462:	53                   	push   ebx
c0017463:	ff d2                	call   edx
c0017465:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017468:	eb 0d                	jmp    c0017477 <systemCall(regs*, void*)+0x33>
c001746a:	52                   	push   edx
c001746b:	52                   	push   edx
c001746c:	50                   	push   eax
c001746d:	68 12 2c 02 c0       	push   0xc0022c12
c0017472:	e8 8e 7d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017477:	83 c4 10             	add    esp,0x10
c001747a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001747f:	83 c4 08             	add    esp,0x8
c0017482:	31 d2                	xor    edx,edx
c0017484:	5b                   	pop    ebx
c0017485:	c3                   	ret    

c0017486 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017486:	55                   	push   ebp
c0017487:	89 e5                	mov    ebp,esp
c0017489:	57                   	push   edi
c001748a:	56                   	push   esi
c001748b:	53                   	push   ebx
c001748c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017492:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017495:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017498:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001749f:	74 27                	je     c00174c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174a1:	85 c0                	test   eax,eax
c00174a3:	74 23                	je     c00174c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174a5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174a9:	75 1d                	jne    c00174c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174ab:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174ae:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174b4:	89 d1                	mov    ecx,edx
c00174b6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174bc:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174c2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174c5:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174c8:	83 ec 0c             	sub    esp,0xc
c00174cb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174ce:	05 ff 0f 00 00       	add    eax,0xfff
c00174d3:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174d9:	6a 01                	push   0x1
c00174db:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174e1:	e8 04 6d ff ff       	call   c000e1ea <Virt::allocateKernelVirtualPages(int)>
c00174e6:	83 c4 10             	add    esp,0x10
c00174e9:	89 c6                	mov    esi,eax
c00174eb:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00174f1:	0f 86 21 01 00 00    	jbe    c0017618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00174f7:	c1 eb 0c             	shr    ebx,0xc
c00174fa:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017504:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001750a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001750d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017510:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017516:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017519:	29 d8                	sub    eax,ebx
c001751b:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017521:	0f 83 f4 00 00 00    	jae    c001761b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017527:	83 ec 0c             	sub    esp,0xc
c001752a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001752d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017533:	3d 00 10 00 00       	cmp    eax,0x1000
c0017538:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001753a:	52                   	push   edx
c001753b:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017541:	52                   	push   edx
c0017542:	76 05                	jbe    c0017549 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017544:	b8 00 10 00 00       	mov    eax,0x1000
c0017549:	31 d2                	xor    edx,edx
c001754b:	52                   	push   edx
c001754c:	50                   	push   eax
c001754d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017550:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017553:	83 c4 20             	add    esp,0x20
c0017556:	85 c0                	test   eax,eax
c0017558:	74 1f                	je     c0017579 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c001755a:	51                   	push   ecx
c001755b:	51                   	push   ecx
c001755c:	50                   	push   eax
c001755d:	68 26 2c 02 c0       	push   0xc0022c26
c0017562:	e8 9e 7c ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017567:	89 34 24             	mov    DWORD PTR [esp],esi
c001756a:	e8 c8 6f ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	31 c0                	xor    eax,eax
c0017574:	e9 7c 01 00 00       	jmp    c00176f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017579:	e8 bf 14 00 00       	call   c0018a3d <lockScheduler()>
c001757e:	e8 26 50 ff ff       	call   c000c5a9 <Phys::allocatePage()>
c0017583:	6a 07                	push   0x7
c0017585:	56                   	push   esi
c0017586:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001758c:	50                   	push   eax
c001758d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017593:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017596:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001759c:	e8 15 73 ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175a1:	83 c4 0c             	add    esp,0xc
c00175a4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175aa:	6a 00                	push   0x0
c00175ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175b5:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175bb:	e8 54 71 ff ff       	call   c000e714 <VAS::mapOtherVASIn(bool, VAS*)>
c00175c0:	58                   	pop    eax
c00175c1:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175c7:	5a                   	pop    edx
c00175c8:	68 07 04 00 00       	push   0x407
c00175cd:	53                   	push   ebx
c00175ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175d4:	50                   	push   eax
c00175d5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175db:	6a 00                	push   0x0
c00175dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175e5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175eb:	e8 82 76 ff ff       	call   c000ec72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175f0:	83 c4 1c             	add    esp,0x1c
c00175f3:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00175f9:	68 00 10 00 00       	push   0x1000
c00175fe:	50                   	push   eax
c00175ff:	56                   	push   esi
c0017600:	e8 7a 90 fe ff       	call   c000067f <memcpy>
c0017605:	e8 35 14 00 00       	call   c0018a3f <unlockScheduler()>
c001760a:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	e9 f5 fe ff ff       	jmp    c001750d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017618:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001761b:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017625:	0f 86 bc 00 00 00    	jbe    c00176e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c001762b:	e8 0d 14 00 00       	call   c0018a3d <lockScheduler()>
c0017630:	51                   	push   ecx
c0017631:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017637:	6a 00                	push   0x0
c0017639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001763e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017641:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017647:	e8 c8 70 ff ff       	call   c000e714 <VAS::mapOtherVASIn(bool, VAS*)>
c001764c:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017652:	c1 e8 0c             	shr    eax,0xc
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001765e:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017668:	e8 3c 4f ff ff       	call   c000c5a9 <Phys::allocatePage()>
c001766d:	6a 07                	push   0x7
c001766f:	56                   	push   esi
c0017670:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017676:	50                   	push   eax
c0017677:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001767d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017680:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017686:	e8 2b 72 ff ff       	call   c000e8b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001768b:	58                   	pop    eax
c001768c:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017692:	5a                   	pop    edx
c0017693:	68 07 04 00 00       	push   0x407
c0017698:	53                   	push   ebx
c0017699:	81 c3 00 10 00 00    	add    ebx,0x1000
c001769f:	50                   	push   eax
c00176a0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176a6:	6a 00                	push   0x0
c00176a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176b0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176b6:	e8 b7 75 ff ff       	call   c000ec72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176bb:	83 c4 1c             	add    esp,0x1c
c00176be:	68 00 10 00 00       	push   0x1000
c00176c3:	6a 00                	push   0x0
c00176c5:	56                   	push   esi
c00176c6:	e8 ea 8f fe ff       	call   c00006b5 <memset>
c00176cb:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176da:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176e0:	77 86                	ja     c0017668 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176e2:	e8 58 13 00 00       	call   c0018a3f <unlockScheduler()>
c00176e7:	83 ec 0c             	sub    esp,0xc
c00176ea:	56                   	push   esi
c00176eb:	e8 47 6e ff ff       	call   c000e537 <Virt::freeKernelVirtualPages(unsigned long)>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	b0 01                	mov    al,0x1
c00176f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00176f8:	5b                   	pop    ebx
c00176f9:	5e                   	pop    esi
c00176fa:	5f                   	pop    edi
c00176fb:	5d                   	pop    ebp
c00176fc:	c3                   	ret    

c00176fd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00176fd:	55                   	push   ebp
c00176fe:	57                   	push   edi
c00176ff:	56                   	push   esi
c0017700:	53                   	push   ebx
c0017701:	83 ec 48             	sub    esp,0x48
c0017704:	68 14 01 00 00       	push   0x114
c0017709:	e8 c2 79 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001770e:	83 c4 0c             	add    esp,0xc
c0017711:	89 c6                	mov    esi,eax
c0017713:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017717:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001771b:	50                   	push   eax
c001771c:	e8 1b 80 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0017721:	58                   	pop    eax
c0017722:	5a                   	pop    edx
c0017723:	6a 01                	push   0x1
c0017725:	56                   	push   esi
c0017726:	e8 75 80 ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	85 c0                	test   eax,eax
c0017730:	0f 85 47 01 00 00    	jne    c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017736:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001773e:	83 ec 0c             	sub    esp,0xc
c0017741:	6a 34                	push   0x34
c0017743:	e8 8b 48 ff ff       	call   c000bfd3 <malloc>
c0017748:	89 c3                	mov    ebx,eax
c001774a:	58                   	pop    eax
c001774b:	8b 06                	mov    eax,DWORD PTR [esi]
c001774d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017751:	57                   	push   edi
c0017752:	53                   	push   ebx
c0017753:	6a 00                	push   0x0
c0017755:	6a 34                	push   0x34
c0017757:	56                   	push   esi
c0017758:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001775b:	83 c4 20             	add    esp,0x20
c001775e:	85 c0                	test   eax,eax
c0017760:	0f 85 17 01 00 00    	jne    c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017766:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001776c:	0f 85 0b 01 00 00    	jne    c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017772:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017775:	85 c0                	test   eax,eax
c0017777:	0f 84 00 01 00 00    	je     c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001777d:	31 d2                	xor    edx,edx
c001777f:	55                   	push   ebp
c0017780:	52                   	push   edx
c0017781:	50                   	push   eax
c0017782:	56                   	push   esi
c0017783:	e8 d6 80 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	85 c0                	test   eax,eax
c001778d:	0f 85 ea 00 00 00    	jne    c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017793:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017796:	83 ec 0c             	sub    esp,0xc
c0017799:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001779d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177a1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177a5:	0f af c2             	imul   eax,edx
c00177a8:	50                   	push   eax
c00177a9:	e8 25 48 ff ff       	call   c000bfd3 <malloc>
c00177ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177b9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177bd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177c1:	0f af c2             	imul   eax,edx
c00177c4:	99                   	cdq    
c00177c5:	52                   	push   edx
c00177c6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177c8:	50                   	push   eax
c00177c9:	56                   	push   esi
c00177ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177cd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177d0:	83 c4 20             	add    esp,0x20
c00177d3:	85 c0                	test   eax,eax
c00177d5:	0f 84 a2 00 00 00    	je     c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177db:	31 d2                	xor    edx,edx
c00177dd:	51                   	push   ecx
c00177de:	52                   	push   edx
c00177df:	50                   	push   eax
c00177e0:	56                   	push   esi
c00177e1:	e8 78 80 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c00177e6:	83 c4 10             	add    esp,0x10
c00177e9:	85 c0                	test   eax,eax
c00177eb:	0f 85 8c 00 00 00    	jne    c001787d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177f1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00177f5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00177f9:	0f af c2             	imul   eax,edx
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	31 ed                	xor    ebp,ebp
c0017801:	50                   	push   eax
c0017802:	e8 cc 47 ff ff       	call   c000bfd3 <malloc>
c0017807:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001780b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001780e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017812:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017816:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001781a:	0f af c2             	imul   eax,edx
c001781d:	99                   	cdq    
c001781e:	52                   	push   edx
c001781f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017821:	50                   	push   eax
c0017822:	56                   	push   esi
c0017823:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017826:	83 c4 20             	add    esp,0x20
c0017829:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017831:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017835:	0f 86 80 00 00 00    	jbe    c00178bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001783b:	0f b7 fd             	movzx  edi,bp
c001783e:	c1 e7 05             	shl    edi,0x5
c0017841:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017845:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017848:	75 6b                	jne    c00178b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001784a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001784d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017851:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017854:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017858:	52                   	push   edx
c0017859:	31 d2                	xor    edx,edx
c001785b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001785e:	52                   	push   edx
c001785f:	50                   	push   eax
c0017860:	56                   	push   esi
c0017861:	e8 f8 7f ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	85 c0                	test   eax,eax
c001786b:	74 17                	je     c0017884 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	68 51 2c 02 c0       	push   0xc0022c51
c0017875:	e8 8b 79 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	31 c0                	xor    eax,eax
c001787f:	e9 87 00 00 00       	jmp    c001790b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017884:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017887:	83 ec 0c             	sub    esp,0xc
c001788a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001788d:	50                   	push   eax
c001788e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017892:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017896:	56                   	push   esi
c0017897:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001789b:	e8 e6 fb ff ff       	call   c0017486 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178a4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178a8:	83 c4 20             	add    esp,0x20
c00178ab:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178af:	73 04                	jae    c00178b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b5:	45                   	inc    ebp
c00178b6:	e9 76 ff ff ff       	jmp    c0017831 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178c7:	83 ec 0c             	sub    esp,0xc
c00178ca:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178d5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178db:	05 00 10 00 00       	add    eax,0x1000
c00178e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178e7:	e8 f7 46 ff ff       	call   c000bfe3 <free>
c00178ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178ef:	e8 ef 46 ff ff       	call   c000bfe3 <free>
c00178f4:	58                   	pop    eax
c00178f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178f9:	e8 e5 46 ff ff       	call   c000bfe3 <free>
c00178fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0017901:	e8 f8 7e ff ff       	call   c000f7fe <File::close()>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	b0 01                	mov    al,0x1
c001790b:	83 c4 3c             	add    esp,0x3c
c001790e:	5b                   	pop    ebx
c001790f:	5e                   	pop    esi
c0017910:	5f                   	pop    edi
c0017911:	5d                   	pop    ebp
c0017912:	c3                   	ret    

c0017913 <Thr::runtimeReferenceHelper()>:
c0017913:	83 ec 18             	sub    esp,0x18
c0017916:	68 59 2c 02 c0       	push   0xc0022c59
c001791b:	e8 e5 78 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017920:	fa                   	cli    
c0017921:	83 c4 10             	add    esp,0x10
c0017924:	eb fe                	jmp    c0017924 <Thr::runtimeReferenceHelper()+0x11>

c0017926 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017926:	57                   	push   edi
c0017927:	56                   	push   esi
c0017928:	53                   	push   ebx
c0017929:	31 db                	xor    ebx,ebx
c001792b:	39 1d 80 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b80,ebx
c0017931:	7e 3c                	jle    c001796f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017933:	8b 34 9d 00 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda500]
c001793a:	31 ff                	xor    edi,edi
c001793c:	39 3c 9d 00 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda600],edi
c0017943:	7e 27                	jle    c001796c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017945:	50                   	push   eax
c0017946:	50                   	push   eax
c0017947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001794b:	8b 06                	mov    eax,DWORD PTR [esi]
c001794d:	03 04 9d 80 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda580]
c0017954:	50                   	push   eax
c0017955:	e8 4b 8e fe ff       	call   c00007a5 <strcmp>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	85 c0                	test   eax,eax
c001795f:	75 05                	jne    c0017966 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017961:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017964:	eb 0b                	jmp    c0017971 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017966:	83 c6 10             	add    esi,0x10
c0017969:	47                   	inc    edi
c001796a:	eb d0                	jmp    c001793c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001796c:	43                   	inc    ebx
c001796d:	eb bc                	jmp    c001792b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001796f:	31 c0                	xor    eax,eax
c0017971:	5b                   	pop    ebx
c0017972:	5e                   	pop    esi
c0017973:	5f                   	pop    edi
c0017974:	c3                   	ret    

c0017975 <Thr::loadKernelSymbolTable(char const*)>:
c0017975:	55                   	push   ebp
c0017976:	57                   	push   edi
c0017977:	56                   	push   esi
c0017978:	53                   	push   ebx
c0017979:	83 ec 68             	sub    esp,0x68
c001797c:	8b 35 d4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bd4
c0017982:	68 14 01 00 00       	push   0x114
c0017987:	e8 44 77 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001798c:	83 c4 0c             	add    esp,0xc
c001798f:	89 c3                	mov    ebx,eax
c0017991:	56                   	push   esi
c0017992:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017996:	50                   	push   eax
c0017997:	e8 a0 7d ff ff       	call   c000f73c <File::File(char const*, Process*)>
c001799c:	5e                   	pop    esi
c001799d:	5f                   	pop    edi
c001799e:	6a 01                	push   0x1
c00179a0:	53                   	push   ebx
c00179a1:	e8 fa 7d ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c00179a6:	83 c4 10             	add    esp,0x10
c00179a9:	31 d2                	xor    edx,edx
c00179ab:	85 c0                	test   eax,eax
c00179ad:	0f 85 79 02 00 00    	jne    c0017c2c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179b3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179bb:	83 ec 0c             	sub    esp,0xc
c00179be:	6a 34                	push   0x34
c00179c0:	e8 0e 46 ff ff       	call   c000bfd3 <malloc>
c00179c5:	59                   	pop    ecx
c00179c6:	89 c7                	mov    edi,eax
c00179c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179ca:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179ce:	56                   	push   esi
c00179cf:	57                   	push   edi
c00179d0:	6a 00                	push   0x0
c00179d2:	6a 34                	push   0x34
c00179d4:	53                   	push   ebx
c00179d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179d8:	83 c4 20             	add    esp,0x20
c00179db:	85 c0                	test   eax,eax
c00179dd:	74 17                	je     c00179f6 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179df:	83 ec 0c             	sub    esp,0xc
c00179e2:	68 7b 2c 02 c0       	push   0xc0022c7b
c00179e7:	e8 48 e0 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c00179ec:	83 c4 10             	add    esp,0x10
c00179ef:	31 d2                	xor    edx,edx
c00179f1:	e9 36 02 00 00       	jmp    c0017c2c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179f6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00179fc:	75 e1                	jne    c00179df <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00179fe:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a01:	85 c0                	test   eax,eax
c0017a03:	74 da                	je     c00179df <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a05:	52                   	push   edx
c0017a06:	31 d2                	xor    edx,edx
c0017a08:	52                   	push   edx
c0017a09:	50                   	push   eax
c0017a0a:	53                   	push   ebx
c0017a0b:	e8 4e 7e ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017a10:	83 c4 10             	add    esp,0x10
c0017a13:	85 c0                	test   eax,eax
c0017a15:	75 c8                	jne    c00179df <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a17:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a1b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a1f:	0f af c2             	imul   eax,edx
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	31 ed                	xor    ebp,ebp
c0017a27:	50                   	push   eax
c0017a28:	e8 a6 45 ff ff       	call   c000bfd3 <malloc>
c0017a2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a31:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a38:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a3c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a40:	0f af c2             	imul   eax,edx
c0017a43:	99                   	cdq    
c0017a44:	52                   	push   edx
c0017a45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a47:	50                   	push   eax
c0017a48:	53                   	push   ebx
c0017a49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a4c:	83 c4 20             	add    esp,0x20
c0017a4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a5f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a67:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a6f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a73:	0f 86 aa 00 00 00    	jbe    c0017b23 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a79:	0f b7 f5             	movzx  esi,bp
c0017a7c:	6b f6 28             	imul   esi,esi,0x28
c0017a7f:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a83:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a8a:	50                   	push   eax
c0017a8b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a8f:	6b c0 28             	imul   eax,eax,0x28
c0017a92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017a96:	8b 16                	mov    edx,DWORD PTR [esi]
c0017a98:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017a9c:	89 d0                	mov    eax,edx
c0017a9e:	31 d2                	xor    edx,edx
c0017aa0:	52                   	push   edx
c0017aa1:	50                   	push   eax
c0017aa2:	53                   	push   ebx
c0017aa3:	e8 b6 7d ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017aa8:	83 c4 0c             	add    esp,0xc
c0017aab:	6a 20                	push   0x20
c0017aad:	6a 00                	push   0x0
c0017aaf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ab3:	52                   	push   edx
c0017ab4:	e8 fc 8b fe ff       	call   c00006b5 <memset>
c0017ab9:	58                   	pop    eax
c0017aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017abc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ac0:	51                   	push   ecx
c0017ac1:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ac5:	52                   	push   edx
c0017ac6:	6a 00                	push   0x0
c0017ac8:	6a 1f                	push   0x1f
c0017aca:	53                   	push   ebx
c0017acb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ace:	83 c4 18             	add    esp,0x18
c0017ad1:	68 92 2c 02 c0       	push   0xc0022c92
c0017ad6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ada:	52                   	push   edx
c0017adb:	e8 c5 8c fe ff       	call   c00007a5 <strcmp>
c0017ae0:	83 c4 10             	add    esp,0x10
c0017ae3:	85 c0                	test   eax,eax
c0017ae5:	75 0f                	jne    c0017af6 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017ae7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017aea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017af2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017af6:	50                   	push   eax
c0017af7:	50                   	push   eax
c0017af8:	68 9a 2c 02 c0       	push   0xc0022c9a
c0017afd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b01:	50                   	push   eax
c0017b02:	e8 9e 8c fe ff       	call   c00007a5 <strcmp>
c0017b07:	83 c4 10             	add    esp,0x10
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	75 0f                	jne    c0017b1d <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b1d:	45                   	inc    ebp
c0017b1e:	e9 4c ff ff ff       	jmp    c0017a6f <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b23:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b28:	75 10                	jne    c0017b3a <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	68 a2 2c 02 c0       	push   0xc0022ca2
c0017b32:	e8 fd de ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b3f:	75 10                	jne    c0017b51 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b41:	83 ec 0c             	sub    esp,0xc
c0017b44:	68 a2 2c 02 c0       	push   0xc0022ca2
c0017b49:	e8 e6 de ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	31 d2                	xor    edx,edx
c0017b53:	50                   	push   eax
c0017b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b58:	52                   	push   edx
c0017b59:	50                   	push   eax
c0017b5a:	53                   	push   ebx
c0017b5b:	e8 fe 7c ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017b60:	5a                   	pop    edx
c0017b61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b65:	e8 69 44 ff ff       	call   c000bfd3 <malloc>
c0017b6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b72:	89 c1                	mov    ecx,eax
c0017b74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b7c:	5e                   	pop    esi
c0017b7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b7f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b83:	55                   	push   ebp
c0017b84:	51                   	push   ecx
c0017b85:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b91:	53                   	push   ebx
c0017b92:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b95:	83 c4 14             	add    esp,0x14
c0017b98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b9c:	e8 32 44 ff ff       	call   c000bfd3 <malloc>
c0017ba1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ba4:	89 c6                	mov    esi,eax
c0017ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ba8:	56                   	push   esi
c0017ba9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bb1:	53                   	push   ebx
c0017bb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bb9:	8b 15 80 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b80
c0017bbf:	c1 e8 04             	shr    eax,0x4
c0017bc2:	83 c4 1c             	add    esp,0x1c
c0017bc5:	89 04 95 00 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda600],eax
c0017bcc:	31 d2                	xor    edx,edx
c0017bce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bd2:	52                   	push   edx
c0017bd3:	50                   	push   eax
c0017bd4:	53                   	push   ebx
c0017bd5:	e8 84 7c ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017bda:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bdd:	31 d2                	xor    edx,edx
c0017bdf:	56                   	push   esi
c0017be0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be4:	52                   	push   edx
c0017be5:	50                   	push   eax
c0017be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017be8:	53                   	push   ebx
c0017be9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bec:	83 c4 14             	add    esp,0x14
c0017bef:	53                   	push   ebx
c0017bf0:	e8 09 7c ff ff       	call   c000f7fe <File::close()>
c0017bf5:	5d                   	pop    ebp
c0017bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bfa:	e8 e4 43 ff ff       	call   c000bfe3 <free>
c0017bff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c02:	e8 dc 43 ff ff       	call   c000bfe3 <free>
c0017c07:	a1 80 5b 02 c0       	mov    eax,ds:0xc0025b80
c0017c0c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c10:	8d 50 01             	lea    edx,[eax+0x1]
c0017c13:	89 15 80 5b 02 c0    	mov    DWORD PTR ds:0xc0025b80,edx
c0017c19:	89 0c 85 00 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda500],ecx
c0017c20:	89 34 85 80 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda580],esi
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	b2 01                	mov    dl,0x1
c0017c2c:	83 c4 5c             	add    esp,0x5c
c0017c2f:	88 d0                	mov    al,dl
c0017c31:	5b                   	pop    ebx
c0017c32:	5e                   	pop    esi
c0017c33:	5f                   	pop    edi
c0017c34:	5d                   	pop    ebp
c0017c35:	c3                   	ret    

c0017c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c36:	55                   	push   ebp
c0017c37:	57                   	push   edi
c0017c38:	56                   	push   esi
c0017c39:	53                   	push   ebx
c0017c3a:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c40:	8b 1d d4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bd4
c0017c46:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c4d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c51:	68 14 01 00 00       	push   0x114
c0017c56:	e8 75 74 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0017c5b:	83 c4 0c             	add    esp,0xc
c0017c5e:	53                   	push   ebx
c0017c5f:	89 c7                	mov    edi,eax
c0017c61:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c68:	50                   	push   eax
c0017c69:	e8 ce 7a ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0017c6e:	5e                   	pop    esi
c0017c6f:	5d                   	pop    ebp
c0017c70:	6a 01                	push   0x1
c0017c72:	57                   	push   edi
c0017c73:	e8 28 7b ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c0017c78:	83 c4 10             	add    esp,0x10
c0017c7b:	85 c0                	test   eax,eax
c0017c7d:	0f 85 10 07 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c83:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	6a 34                	push   0x34
c0017c90:	e8 3e 43 ff ff       	call   c000bfd3 <malloc>
c0017c95:	5b                   	pop    ebx
c0017c96:	89 c5                	mov    ebp,eax
c0017c98:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c9a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017c9e:	53                   	push   ebx
c0017c9f:	55                   	push   ebp
c0017ca0:	6a 00                	push   0x0
c0017ca2:	6a 34                	push   0x34
c0017ca4:	57                   	push   edi
c0017ca5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ca8:	83 c4 20             	add    esp,0x20
c0017cab:	85 c0                	test   eax,eax
c0017cad:	0f 85 e0 06 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cb3:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cba:	0f 85 d3 06 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cc0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017cc3:	85 c0                	test   eax,eax
c0017cc5:	0f 84 c8 06 00 00    	je     c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ccb:	31 d2                	xor    edx,edx
c0017ccd:	51                   	push   ecx
c0017cce:	52                   	push   edx
c0017ccf:	50                   	push   eax
c0017cd0:	57                   	push   edi
c0017cd1:	e8 88 7b ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	85 c0                	test   eax,eax
c0017cdb:	0f 85 b2 06 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017ceb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cef:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017cf3:	0f af c2             	imul   eax,edx
c0017cf6:	50                   	push   eax
c0017cf7:	e8 d7 42 ff ff       	call   c000bfd3 <malloc>
c0017cfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d07:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d0b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d0f:	0f af c2             	imul   eax,edx
c0017d12:	99                   	cdq    
c0017d13:	52                   	push   edx
c0017d14:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d16:	50                   	push   eax
c0017d17:	57                   	push   edi
c0017d18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d1b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d1e:	83 c4 20             	add    esp,0x20
c0017d21:	85 c0                	test   eax,eax
c0017d23:	0f 84 6a 06 00 00    	je     c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d29:	52                   	push   edx
c0017d2a:	31 d2                	xor    edx,edx
c0017d2c:	52                   	push   edx
c0017d2d:	50                   	push   eax
c0017d2e:	57                   	push   edi
c0017d2f:	e8 2a 7b ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	85 c0                	test   eax,eax
c0017d39:	0f 85 54 06 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d3f:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d43:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d47:	0f af c2             	imul   eax,edx
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	31 f6                	xor    esi,esi
c0017d4f:	50                   	push   eax
c0017d50:	e8 7e 42 ff ff       	call   c000bfd3 <malloc>
c0017d55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d60:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d64:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d68:	0f af c2             	imul   eax,edx
c0017d6b:	99                   	cdq    
c0017d6c:	52                   	push   edx
c0017d6d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d6f:	50                   	push   eax
c0017d70:	57                   	push   edi
c0017d71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d74:	83 c4 20             	add    esp,0x20
c0017d77:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d7b:	0f 86 af 00 00 00    	jbe    c0017e30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d81:	0f b7 de             	movzx  ebx,si
c0017d84:	c1 e3 05             	shl    ebx,0x5
c0017d87:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d8b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d8e:	0f 85 96 00 00 00    	jne    c0017e2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017d94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017d97:	31 d2                	xor    edx,edx
c0017d99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d9d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017da4:	50                   	push   eax
c0017da5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017da8:	52                   	push   edx
c0017da9:	50                   	push   eax
c0017daa:	57                   	push   edi
c0017dab:	e8 ae 7a ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	85 c0                	test   eax,eax
c0017db5:	0f 85 d8 05 00 00    	jne    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dbb:	52                   	push   edx
c0017dbc:	52                   	push   edx
c0017dbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dc1:	68 bc 2c 02 c0       	push   0xc0022cbc
c0017dc6:	e8 3a 74 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017dcb:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017dd2:	31 d2                	xor    edx,edx
c0017dd4:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017dd8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017ddc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017de0:	59                   	pop    ecx
c0017de1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017de3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017dea:	50                   	push   eax
c0017deb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017df3:	52                   	push   edx
c0017df4:	50                   	push   eax
c0017df5:	57                   	push   edi
c0017df6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017df9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017dfc:	83 c4 18             	add    esp,0x18
c0017dff:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e02:	50                   	push   eax
c0017e03:	68 e0 2c 02 c0       	push   0xc0022ce0
c0017e08:	e8 f8 73 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0017e0d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e10:	83 c4 0c             	add    esp,0xc
c0017e13:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e16:	50                   	push   eax
c0017e17:	6a 00                	push   0x0
c0017e19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e1d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e21:	50                   	push   eax
c0017e22:	e8 8e 88 fe ff       	call   c00006b5 <memset>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	46                   	inc    esi
c0017e2b:	e9 47 ff ff ff       	jmp    c0017d77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e30:	50                   	push   eax
c0017e31:	31 db                	xor    ebx,ebx
c0017e33:	68 00 01 00 00       	push   0x100
c0017e38:	6a 00                	push   0x0
c0017e3a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e3e:	50                   	push   eax
c0017e3f:	e8 71 88 fe ff       	call   c00006b5 <memset>
c0017e44:	83 c4 0c             	add    esp,0xc
c0017e47:	68 00 01 00 00       	push   0x100
c0017e4c:	6a 00                	push   0x0
c0017e4e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e55:	50                   	push   eax
c0017e56:	e8 5a 88 fe ff       	call   c00006b5 <memset>
c0017e5b:	83 c4 10             	add    esp,0x10
c0017e5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e66:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e76:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e7e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e86:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e8a:	0f 86 2f 01 00 00    	jbe    c0017fbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017e90:	0f b7 f3             	movzx  esi,bx
c0017e93:	6b f6 28             	imul   esi,esi,0x28
c0017e96:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017e9a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ea1:	50                   	push   eax
c0017ea2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017ea6:	6b d2 28             	imul   edx,edx,0x28
c0017ea9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ead:	8b 06                	mov    eax,DWORD PTR [esi]
c0017eaf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017eb3:	31 d2                	xor    edx,edx
c0017eb5:	52                   	push   edx
c0017eb6:	50                   	push   eax
c0017eb7:	57                   	push   edi
c0017eb8:	e8 a1 79 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017ebd:	83 c4 0c             	add    esp,0xc
c0017ec0:	6a 20                	push   0x20
c0017ec2:	6a 00                	push   0x0
c0017ec4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ecb:	51                   	push   ecx
c0017ecc:	e8 e4 87 fe ff       	call   c00006b5 <memset>
c0017ed1:	58                   	pop    eax
c0017ed2:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ed4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ed8:	52                   	push   edx
c0017ed9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ee0:	51                   	push   ecx
c0017ee1:	6a 00                	push   0x0
c0017ee3:	6a 1f                	push   0x1f
c0017ee5:	57                   	push   edi
c0017ee6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ee9:	83 c4 1c             	add    esp,0x1c
c0017eec:	6a 09                	push   0x9
c0017eee:	68 fd 2c 02 c0       	push   0xc0022cfd
c0017ef3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017efa:	51                   	push   ecx
c0017efb:	e8 1c 87 fe ff       	call   c000061c <memcmp>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	85 c0                	test   eax,eax
c0017f05:	75 21                	jne    c0017f28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f13:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f17:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f1a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f21:	89 c8                	mov    eax,ecx
c0017f23:	40                   	inc    eax
c0017f24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f28:	50                   	push   eax
c0017f29:	6a 09                	push   0x9
c0017f2b:	68 07 2d 02 c0       	push   0xc0022d07
c0017f30:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f37:	50                   	push   eax
c0017f38:	e8 df 86 fe ff       	call   c000061c <memcmp>
c0017f3d:	83 c4 10             	add    esp,0x10
c0017f40:	85 c0                	test   eax,eax
c0017f42:	75 21                	jne    c0017f65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f50:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f54:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f57:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f5e:	89 c8                	mov    eax,ecx
c0017f60:	40                   	inc    eax
c0017f61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f65:	50                   	push   eax
c0017f66:	50                   	push   eax
c0017f67:	68 92 2c 02 c0       	push   0xc0022c92
c0017f6c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f73:	50                   	push   eax
c0017f74:	e8 2c 88 fe ff       	call   c00007a5 <strcmp>
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	85 c0                	test   eax,eax
c0017f7e:	75 0f                	jne    c0017f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f80:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f8f:	50                   	push   eax
c0017f90:	50                   	push   eax
c0017f91:	68 9a 2c 02 c0       	push   0xc0022c9a
c0017f96:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f9d:	50                   	push   eax
c0017f9e:	e8 02 88 fe ff       	call   c00007a5 <strcmp>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	85 c0                	test   eax,eax
c0017fa8:	75 0f                	jne    c0017fb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017faa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fb9:	43                   	inc    ebx
c0017fba:	e9 c7 fe ff ff       	jmp    c0017e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fbf:	31 d2                	xor    edx,edx
c0017fc1:	50                   	push   eax
c0017fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fc6:	52                   	push   edx
c0017fc7:	50                   	push   eax
c0017fc8:	57                   	push   edi
c0017fc9:	e8 90 78 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0017fce:	5a                   	pop    edx
c0017fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fd3:	e8 fb 3f ff ff       	call   c000bfd3 <malloc>
c0017fd8:	31 d2                	xor    edx,edx
c0017fda:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fde:	59                   	pop    ecx
c0017fdf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fe1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017fe5:	53                   	push   ebx
c0017fe6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fee:	52                   	push   edx
c0017fef:	50                   	push   eax
c0017ff0:	57                   	push   edi
c0017ff1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ff4:	83 c4 14             	add    esp,0x14
c0017ff7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ffb:	e8 d3 3f ff ff       	call   c000bfd3 <malloc>
c0018000:	31 d2                	xor    edx,edx
c0018002:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018006:	83 c4 0c             	add    esp,0xc
c0018009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001800d:	52                   	push   edx
c001800e:	50                   	push   eax
c001800f:	57                   	push   edi
c0018010:	e8 49 78 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0018015:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018018:	31 d2                	xor    edx,edx
c001801a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001801e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018022:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018024:	52                   	push   edx
c0018025:	50                   	push   eax
c0018026:	57                   	push   edi
c0018027:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001802a:	83 c4 20             	add    esp,0x20
c001802d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018035:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018039:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001803d:	0f 84 54 03 00 00    	je     c0018397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018043:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001804a:	31 d2                	xor    edx,edx
c001804c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018050:	c1 e8 03             	shr    eax,0x3
c0018053:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018057:	50                   	push   eax
c0018058:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001805c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018060:	52                   	push   edx
c0018061:	50                   	push   eax
c0018062:	57                   	push   edi
c0018063:	e8 f6 77 ff ff       	call   c000f85e <File::seek(unsigned long long)>
c0018068:	58                   	pop    eax
c0018069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018074:	e8 5a 3f ff ff       	call   c000bfd3 <malloc>
c0018079:	31 d2                	xor    edx,edx
c001807b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001807f:	58                   	pop    eax
c0018080:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018082:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018086:	50                   	push   eax
c0018087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001808b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001808f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0018096:	52                   	push   edx
c0018097:	50                   	push   eax
c0018098:	57                   	push   edi
c0018099:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001809c:	83 c4 20             	add    esp,0x20
c001809f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180a7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180ab:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180af:	0f 8d c6 02 00 00    	jge    c001837b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180bd:	31 db                	xor    ebx,ebx
c00180bf:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180ca:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180d2:	c1 e8 08             	shr    eax,0x8
c00180d5:	89 c6                	mov    esi,eax
c00180d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180db:	c1 e6 04             	shl    esi,0x4
c00180de:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180e9:	85 c0                	test   eax,eax
c00180eb:	0f 85 17 01 00 00    	jne    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	b3 01                	mov    bl,0x1
c00180f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180fa:	03 06                	add    eax,DWORD PTR [esi]
c00180fc:	50                   	push   eax
c00180fd:	e8 24 f8 ff ff       	call   c0017926 <Thr::getAddressOfKernelSymbol(char const*)>
c0018102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001810e:	0f 85 f4 00 00 00    	jne    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018114:	50                   	push   eax
c0018115:	50                   	push   eax
c0018116:	68 11 2d 02 c0       	push   0xc0022d11
c001811b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001811f:	03 06                	add    eax,DWORD PTR [esi]
c0018121:	50                   	push   eax
c0018122:	e8 7e 86 fe ff       	call   c00007a5 <strcmp>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	85 c0                	test   eax,eax
c001812c:	75 0a                	jne    c0018138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001812e:	b8 fc f4 01 c0       	mov    eax,0xc001f4fc
c0018133:	e9 ca 00 00 00       	jmp    c0018202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018138:	50                   	push   eax
c0018139:	50                   	push   eax
c001813a:	68 1b 2d 02 c0       	push   0xc0022d1b
c001813f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018143:	03 06                	add    eax,DWORD PTR [esi]
c0018145:	50                   	push   eax
c0018146:	e8 5a 86 fe ff       	call   c00007a5 <strcmp>
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	85 c0                	test   eax,eax
c0018150:	75 0a                	jne    c001815c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018152:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c0018157:	e9 a6 00 00 00       	jmp    c0018202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001815c:	53                   	push   ebx
c001815d:	53                   	push   ebx
c001815e:	68 24 2d 02 c0       	push   0xc0022d24
c0018163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018167:	03 06                	add    eax,DWORD PTR [esi]
c0018169:	50                   	push   eax
c001816a:	e8 36 86 fe ff       	call   c00007a5 <strcmp>
c001816f:	83 c4 10             	add    esp,0x10
c0018172:	85 c0                	test   eax,eax
c0018174:	75 0a                	jne    c0018180 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018176:	b8 fc f5 01 c0       	mov    eax,0xc001f5fc
c001817b:	e9 82 00 00 00       	jmp    c0018202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018180:	51                   	push   ecx
c0018181:	51                   	push   ecx
c0018182:	68 2e 2d 02 c0       	push   0xc0022d2e
c0018187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001818b:	03 06                	add    eax,DWORD PTR [esi]
c001818d:	50                   	push   eax
c001818e:	e8 12 86 fe ff       	call   c00007a5 <strcmp>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	85 c0                	test   eax,eax
c0018198:	74 63                	je     c00181fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001819a:	50                   	push   eax
c001819b:	50                   	push   eax
c001819c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181a0:	03 06                	add    eax,DWORD PTR [esi]
c00181a2:	50                   	push   eax
c00181a3:	68 37 2d 02 c0       	push   0xc0022d37
c00181a8:	e8 58 70 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00181ad:	58                   	pop    eax
c00181ae:	5a                   	pop    edx
c00181af:	68 51 2d 02 c0       	push   0xc0022d51
c00181b4:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181bb:	53                   	push   ebx
c00181bc:	e8 93 85 fe ff       	call   c0000754 <strcpy>
c00181c1:	59                   	pop    ecx
c00181c2:	58                   	pop    eax
c00181c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181c7:	03 06                	add    eax,DWORD PTR [esi]
c00181c9:	50                   	push   eax
c00181ca:	53                   	push   ebx
c00181cb:	e8 3b 86 fe ff       	call   c000080b <strcat>
c00181d0:	58                   	pop    eax
c00181d1:	5a                   	pop    edx
c00181d2:	68 e7 2d 02 c0       	push   0xc0022de7
c00181d7:	53                   	push   ebx
c00181d8:	e8 2e 86 fe ff       	call   c000080b <strcat>
c00181dd:	83 c4 10             	add    esp,0x10
c00181e0:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181e5:	0f 84 4b 01 00 00    	je     c0018336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181eb:	83 ec 0c             	sub    esp,0xc
c00181ee:	53                   	push   ebx
c00181ef:	e8 40 d8 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c00181f4:	83 c4 10             	add    esp,0x10
c00181f7:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00181fb:	eb 0b                	jmp    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00181fd:	b8 7c f3 01 c0       	mov    eax,0xc001f37c
c0018202:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018206:	b3 01                	mov    bl,0x1
c0018208:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001820d:	0f 85 80 00 00 00    	jne    c0018293 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018213:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001821a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001821e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018222:	01 ce                	add    esi,ecx
c0018224:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001822c:	0f 94 c2             	sete   dl
c001822f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018231:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018239:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001823e:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018242:	84 db                	test   bl,bl
c0018244:	74 31                	je     c0018277 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018246:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001824a:	01 c3                	add    ebx,eax
c001824c:	84 d2                	test   dl,dl
c001824e:	75 0a                	jne    c001825a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018250:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018254:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018258:	76 32                	jbe    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001825a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001825f:	0f 84 d1 00 00 00    	je     c0018336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018265:	83 ec 0c             	sub    esp,0xc
c0018268:	68 68 2d 02 c0       	push   0xc0022d68
c001826d:	e8 c2 d7 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0018272:	83 c4 10             	add    esp,0x10
c0018275:	eb 15                	jmp    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018277:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c001827a:	84 d2                	test   dl,dl
c001827c:	75 0e                	jne    c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001827e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018282:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018286:	77 04                	ja     c001828c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018288:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001828c:	89 1e                	mov    DWORD PTR [esi],ebx
c001828e:	e9 df 00 00 00       	jmp    c0018372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018293:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0018298:	75 6e                	jne    c0018308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001829a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182a1:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182a5:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182a9:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182b1:	74 17                	je     c00182ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182b3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182bb:	74 0d                	je     c00182ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182bd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182c1:	83 e8 04             	sub    eax,0x4
c00182c4:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182c8:	76 17                	jbe    c00182e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182ca:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182cf:	74 65                	je     c0018336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182d1:	83 ec 0c             	sub    esp,0xc
c00182d4:	68 84 2d 02 c0       	push   0xc0022d84
c00182d9:	e8 56 d7 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c00182de:	83 c4 10             	add    esp,0x10
c00182e1:	8b 16                	mov    edx,DWORD PTR [esi]
c00182e3:	84 db                	test   bl,bl
c00182e5:	74 13                	je     c00182fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182eb:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00182f2:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00182f6:	01 d0                	add    eax,edx
c00182f8:	eb 06                	jmp    c0018300 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00182fa:	89 d0                	mov    eax,edx
c00182fc:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018300:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018304:	89 06                	mov    DWORD PTR [esi],eax
c0018306:	eb 6a                	jmp    c0018372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018308:	50                   	push   eax
c0018309:	50                   	push   eax
c001830a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001830f:	50                   	push   eax
c0018310:	68 a0 2d 02 c0       	push   0xc0022da0
c0018315:	e8 eb 6e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018322:	74 12                	je     c0018336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018324:	83 ec 0c             	sub    esp,0xc
c0018327:	68 ab 2d 02 c0       	push   0xc0022dab
c001832c:	e8 03 d7 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0018331:	83 c4 10             	add    esp,0x10
c0018334:	eb 3c                	jmp    c0018372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018336:	83 ec 0c             	sub    esp,0xc
c0018339:	57                   	push   edi
c001833a:	e8 bf 74 ff ff       	call   c000f7fe <File::close()>
c001833f:	8b 07                	mov    eax,DWORD PTR [edi]
c0018341:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018344:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018347:	59                   	pop    ecx
c0018348:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001834c:	e8 92 3c ff ff       	call   c000bfe3 <free>
c0018351:	5b                   	pop    ebx
c0018352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018356:	e8 88 3c ff ff       	call   c000bfe3 <free>
c001835b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001835e:	e8 80 3c ff ff       	call   c000bfe3 <free>
c0018363:	5e                   	pop    esi
c0018364:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018368:	e8 76 3c ff ff       	call   c000bfe3 <free>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	eb 21                	jmp    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018372:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018376:	e9 2c fd ff ff       	jmp    c00180a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001837b:	83 ec 0c             	sub    esp,0xc
c001837e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018382:	e8 5c 3c ff ff       	call   c000bfe3 <free>
c0018387:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	e9 a2 fc ff ff       	jmp    c0018035 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018393:	31 c0                	xor    eax,eax
c0018395:	eb 32                	jmp    c00183c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0018397:	83 ec 0c             	sub    esp,0xc
c001839a:	57                   	push   edi
c001839b:	e8 5e 74 ff ff       	call   c000f7fe <File::close()>
c00183a0:	8b 07                	mov    eax,DWORD PTR [edi]
c00183a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183a8:	58                   	pop    eax
c00183a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183ad:	e8 31 3c ff ff       	call   c000bfe3 <free>
c00183b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183b5:	e8 29 3c ff ff       	call   c000bfe3 <free>
c00183ba:	5a                   	pop    edx
c00183bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183bf:	e8 1f 3c ff ff       	call   c000bfe3 <free>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	b0 01                	mov    al,0x1
c00183c9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183cf:	5b                   	pop    ebx
c00183d0:	5e                   	pop    esi
c00183d1:	5f                   	pop    edi
c00183d2:	5d                   	pop    ebp
c00183d3:	c3                   	ret    

c00183d4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183d4:	56                   	push   esi
c00183d5:	31 d2                	xor    edx,edx
c00183d7:	53                   	push   ebx
c00183d8:	8b 1d e0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253e0
c00183de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183e2:	39 d3                	cmp    ebx,edx
c00183e4:	7e 1b                	jle    c0018401 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183e6:	8b 04 95 00 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaa00]
c00183ed:	39 c8                	cmp    eax,ecx
c00183ef:	77 0d                	ja     c00183fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00183f1:	8b 34 95 00 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdac00]
c00183f8:	01 c6                	add    esi,eax
c00183fa:	39 ce                	cmp    esi,ecx
c00183fc:	77 05                	ja     c0018403 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00183fe:	42                   	inc    edx
c00183ff:	eb e1                	jmp    c00183e2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018401:	31 c0                	xor    eax,eax
c0018403:	5b                   	pop    ebx
c0018404:	5e                   	pop    esi
c0018405:	c3                   	ret    

c0018406 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018406:	53                   	push   ebx
c0018407:	31 c0                	xor    eax,eax
c0018409:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001840d:	8b 1d e0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253e0
c0018413:	39 c3                	cmp    ebx,eax
c0018415:	7e 22                	jle    c0018439 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018417:	8b 14 85 00 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaa00]
c001841e:	39 ca                	cmp    edx,ecx
c0018420:	77 14                	ja     c0018436 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018422:	03 14 85 00 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdac00]
c0018429:	39 ca                	cmp    edx,ecx
c001842b:	76 09                	jbe    c0018436 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001842d:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c0018434:	eb 05                	jmp    c001843b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018436:	40                   	inc    eax
c0018437:	eb da                	jmp    c0018413 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018439:	31 c0                	xor    eax,eax
c001843b:	5b                   	pop    ebx
c001843c:	c3                   	ret    

c001843d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001843d:	53                   	push   ebx
c001843e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018442:	53                   	push   ebx
c0018443:	e8 8c ff ff ff       	call   c00183d4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018448:	5a                   	pop    edx
c0018449:	31 d2                	xor    edx,edx
c001844b:	85 c0                	test   eax,eax
c001844d:	74 04                	je     c0018453 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001844f:	89 da                	mov    edx,ebx
c0018451:	29 c2                	sub    edx,eax
c0018453:	89 d0                	mov    eax,edx
c0018455:	5b                   	pop    ebx
c0018456:	c3                   	ret    

c0018457 <Thr::loadDLL(char const*, bool)>:
c0018457:	55                   	push   ebp
c0018458:	57                   	push   edi
c0018459:	56                   	push   esi
c001845a:	53                   	push   ebx
c001845b:	81 ec 34 01 00 00    	sub    esp,0x134
c0018461:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018468:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001846f:	56                   	push   esi
c0018470:	68 c3 2d 02 c0       	push   0xc0022dc3
c0018475:	e8 8b 6d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001847a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018481:	e8 4a 6c ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0018486:	83 c4 0c             	add    esp,0xc
c0018489:	89 c3                	mov    ebx,eax
c001848b:	ff 35 d4 5b 02 c0    	push   DWORD PTR ds:0xc0025bd4
c0018491:	56                   	push   esi
c0018492:	50                   	push   eax
c0018493:	e8 a4 72 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c0018498:	83 c4 0c             	add    esp,0xc
c001849b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001849f:	50                   	push   eax
c00184a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184a4:	50                   	push   eax
c00184a5:	53                   	push   ebx
c00184a6:	e8 a1 75 ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c00184ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184bb:	75 0a                	jne    c00184c7 <Thr::loadDLL(char const*, bool)+0x70>
c00184bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184c1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184c5:	75 3c                	jne    c0018503 <Thr::loadDLL(char const*, bool)+0xac>
c00184c7:	89 e8                	mov    eax,ebp
c00184c9:	84 c0                	test   al,al
c00184cb:	0f 84 3d 01 00 00    	je     c001860e <Thr::loadDLL(char const*, bool)+0x1b7>
c00184d1:	50                   	push   eax
c00184d2:	50                   	push   eax
c00184d3:	68 d4 2d 02 c0       	push   0xc0022dd4
c00184d8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184dc:	53                   	push   ebx
c00184dd:	e8 72 82 fe ff       	call   c0000754 <strcpy>
c00184e2:	58                   	pop    eax
c00184e3:	5a                   	pop    edx
c00184e4:	56                   	push   esi
c00184e5:	53                   	push   ebx
c00184e6:	e8 20 83 fe ff       	call   c000080b <strcat>
c00184eb:	59                   	pop    ecx
c00184ec:	5f                   	pop    edi
c00184ed:	68 e7 2d 02 c0       	push   0xc0022de7
c00184f2:	53                   	push   ebx
c00184f3:	e8 13 83 fe ff       	call   c000080b <strcat>
c00184f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184fb:	e8 34 d5 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0018500:	83 c4 10             	add    esp,0x10
c0018503:	e8 6f 5e ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c0018508:	51                   	push   ecx
c0018509:	6a 03                	push   0x3
c001850b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001850f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018513:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018519:	83 d3 00             	adc    ebx,0x0
c001851c:	89 ca                	mov    edx,ecx
c001851e:	89 d1                	mov    ecx,edx
c0018520:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018524:	51                   	push   ecx
c0018525:	50                   	push   eax
c0018526:	e8 8d 64 ff ff       	call   c000e9b8 <VAS::allocatePages(int, int)>
c001852b:	89 34 24             	mov    DWORD PTR [esp],esi
c001852e:	89 c3                	mov    ebx,eax
c0018530:	e8 9d 81 fe ff       	call   c00006d2 <strlen>
c0018535:	8b 3d e0 53 02 c0    	mov    edi,DWORD PTR ds:0xc00253e0
c001853b:	40                   	inc    eax
c001853c:	89 04 24             	mov    DWORD PTR [esp],eax
c001853f:	e8 8f 3a ff ff       	call   c000bfd3 <malloc>
c0018544:	89 04 bd 00 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda800],eax
c001854b:	5f                   	pop    edi
c001854c:	58                   	pop    eax
c001854d:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c0018552:	56                   	push   esi
c0018553:	ff 34 85 00 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda800]
c001855a:	e8 f5 81 fe ff       	call   c0000754 <strcpy>
c001855f:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c0018564:	8d 50 01             	lea    edx,[eax+0x1]
c0018567:	89 1c 85 00 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa00],ebx
c001856e:	89 15 e0 53 02 c0    	mov    DWORD PTR ds:0xc00253e0,edx
c0018574:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018578:	83 c4 0c             	add    esp,0xc
c001857b:	89 14 85 00 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac00],edx
c0018582:	6a 01                	push   0x1
c0018584:	53                   	push   ebx
c0018585:	56                   	push   esi
c0018586:	e8 ab f6 ff ff       	call   c0017c36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	89 c7                	mov    edi,eax
c0018590:	fe c8                	dec    al
c0018592:	74 16                	je     c00185aa <Thr::loadDLL(char const*, bool)+0x153>
c0018594:	89 e8                	mov    eax,ebp
c0018596:	84 c0                	test   al,al
c0018598:	74 10                	je     c00185aa <Thr::loadDLL(char const*, bool)+0x153>
c001859a:	83 ec 0c             	sub    esp,0xc
c001859d:	68 e9 2d 02 c0       	push   0xc0022de9
c00185a2:	e8 8d d4 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	31 f6                	xor    esi,esi
c00185ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185b4:	05 ff 0f 00 00       	add    eax,0xfff
c00185b9:	83 d2 00             	adc    edx,0x0
c00185bc:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185c0:	c1 ea 0c             	shr    edx,0xc
c00185c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185cb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185cf:	ba 00 00 00 00       	mov    edx,0x0
c00185d4:	89 d0                	mov    eax,edx
c00185d6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185da:	73 2c                	jae    c0018608 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185dc:	e8 96 5d ff ff       	call   c000e377 <Virt::getAKernelVAS()>
c00185e1:	89 f5                	mov    ebp,esi
c00185e3:	c1 e5 0c             	shl    ebp,0xc
c00185e6:	52                   	push   edx
c00185e7:	52                   	push   edx
c00185e8:	01 dd                	add    ebp,ebx
c00185ea:	55                   	push   ebp
c00185eb:	50                   	push   eax
c00185ec:	e8 27 5f ff ff       	call   c000e518 <VAS::getPageTableEntry(unsigned long)>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	f6 00 60             	test   BYTE PTR [eax],0x60
c00185f7:	75 0c                	jne    c0018605 <Thr::loadDLL(char const*, bool)+0x1ae>
c00185f9:	83 ec 0c             	sub    esp,0xc
c00185fc:	55                   	push   ebp
c00185fd:	e8 1a 3f ff ff       	call   c000c51c <Phys::freePage(unsigned long)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	46                   	inc    esi
c0018606:	eb a4                	jmp    c00185ac <Thr::loadDLL(char const*, bool)+0x155>
c0018608:	89 f8                	mov    eax,edi
c001860a:	84 c0                	test   al,al
c001860c:	75 02                	jne    c0018610 <Thr::loadDLL(char const*, bool)+0x1b9>
c001860e:	31 db                	xor    ebx,ebx
c0018610:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018616:	89 d8                	mov    eax,ebx
c0018618:	5b                   	pop    ebx
c0018619:	5e                   	pop    esi
c001861a:	5f                   	pop    edi
c001861b:	5d                   	pop    ebp
c001861c:	c3                   	ret    

c001861d <Thr::executeDLL(unsigned long, void*)>:
c001861d:	56                   	push   esi
c001861e:	53                   	push   ebx
c001861f:	51                   	push   ecx
c0018620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018624:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018628:	85 db                	test   ebx,ebx
c001862a:	75 10                	jne    c001863c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001862c:	83 ec 0c             	sub    esp,0xc
c001862f:	68 08 2e 02 c0       	push   0xc0022e08
c0018634:	e8 fb d3 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018640:	5a                   	pop    edx
c0018641:	89 d8                	mov    eax,ebx
c0018643:	5b                   	pop    ebx
c0018644:	5e                   	pop    esi
c0018645:	ff e0                	jmp    eax
c0018647:	90                   	nop

c0018648 <changeTSS>:
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	e8 78 c2 ff ff       	call   c00148c8 <thisCPU()>
c0018650:	52                   	push   edx
c0018651:	05 7c 11 00 00       	add    eax,0x117c
c0018656:	52                   	push   edx
c0018657:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001865d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018660:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018665:	c1 e1 15             	shl    ecx,0x15
c0018668:	29 ca                	sub    edx,ecx
c001866a:	52                   	push   edx
c001866b:	50                   	push   eax
c001866c:	e8 53 54 ff ff       	call   c000dac4 <TSS::setESP(unsigned long)>
c0018671:	83 c4 1c             	add    esp,0x1c
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <Process::addArgs(char**)>:
c0018676:	57                   	push   edi
c0018677:	56                   	push   esi
c0018678:	53                   	push   ebx
c0018679:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001867d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018681:	85 ff                	test   edi,edi
c0018683:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001868d:	74 45                	je     c00186d4 <Process::addArgs(char**)+0x5e>
c001868f:	8b 07                	mov    eax,DWORD PTR [edi]
c0018691:	85 c0                	test   eax,eax
c0018693:	74 3f                	je     c00186d4 <Process::addArgs(char**)+0x5e>
c0018695:	31 db                	xor    ebx,ebx
c0018697:	83 ec 0c             	sub    esp,0xc
c001869a:	50                   	push   eax
c001869b:	e8 32 80 fe ff       	call   c00006d2 <strlen>
c00186a0:	40                   	inc    eax
c00186a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00186a4:	e8 2a 39 ff ff       	call   c000bfd3 <malloc>
c00186a9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186b0:	5a                   	pop    edx
c00186b1:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186b4:	59                   	pop    ecx
c00186b5:	43                   	inc    ebx
c00186b6:	52                   	push   edx
c00186b7:	50                   	push   eax
c00186b8:	e8 97 80 fe ff       	call   c0000754 <strcpy>
c00186bd:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	41                   	inc    ecx
c00186c7:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186cd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186d0:	85 c0                	test   eax,eax
c00186d2:	75 c3                	jne    c0018697 <Process::addArgs(char**)+0x21>
c00186d4:	5b                   	pop    ebx
c00186d5:	5e                   	pop    esi
c00186d6:	5f                   	pop    edi
c00186d7:	c3                   	ret    

c00186d8 <Process::Process(char const*, Process*, char**)>:
c00186d8:	56                   	push   esi
c00186d9:	53                   	push   ebx
c00186da:	83 ec 14             	sub    esp,0x14
c00186dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e1:	05 0c 02 00 00       	add    eax,0x20c
c00186e6:	bb 07 00 00 00       	mov    ebx,0x7
c00186eb:	89 c6                	mov    esi,eax
c00186ed:	85 db                	test   ebx,ebx
c00186ef:	78 12                	js     c0018703 <Process::Process(char const*, Process*, char**)+0x2b>
c00186f1:	83 ec 0c             	sub    esp,0xc
c00186f4:	56                   	push   esi
c00186f5:	e8 50 77 00 00       	call   c001fe4a <ThreadControlBlock::ThreadControlBlock()>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	83 c6 63             	add    esi,0x63
c0018700:	4b                   	dec    ebx
c0018701:	eb ea                	jmp    c00186ed <Process::Process(char const*, Process*, char**)+0x15>
c0018703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018707:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001870e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018712:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001871b:	a1 a4 41 02 c0       	mov    eax,ds:0xc00241a4
c0018720:	8d 50 01             	lea    edx,[eax+0x1]
c0018723:	89 15 a4 41 02 c0    	mov    DWORD PTR ds:0xc00241a4,edx
c0018729:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001872d:	89 02                	mov    DWORD PTR [edx],eax
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	6a 10                	push   0x10
c0018734:	e8 97 69 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	89 c3                	mov    ebx,eax
c001873e:	83 ec 08             	sub    esp,0x8
c0018741:	6a 00                	push   0x0
c0018743:	53                   	push   ebx
c0018744:	e8 1b 66 ff ff       	call   c000ed64 <VAS::VAS(bool)>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018750:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018768:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001876c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018776:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001877c:	85 c0                	test   eax,eax
c001877e:	74 42                	je     c00187c2 <Process::Process(char const*, Process*, char**)+0xea>
c0018780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018784:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001878a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018794:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001879a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ae:	05 0c 01 00 00       	add    eax,0x10c
c00187b3:	83 ec 08             	sub    esp,0x8
c00187b6:	52                   	push   edx
c00187b7:	50                   	push   eax
c00187b8:	e8 97 7f fe ff       	call   c0000754 <strcpy>
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	eb 5c                	jmp    c001881e <Process::Process(char const*, Process*, char**)+0x146>
c00187c2:	83 ec 0c             	sub    esp,0xc
c00187c5:	68 60 12 00 00       	push   0x1260
c00187ca:	e8 01 69 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	89 c3                	mov    ebx,eax
c00187d4:	83 ec 08             	sub    esp,0x8
c00187d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187db:	53                   	push   ebx
c00187dc:	e8 e1 4f ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187e8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	50                   	push   eax
c00187fc:	e8 c0 43 ff ff       	call   c000cbc1 <addToTerminalCycle(VgaText*)>
c0018801:	83 c4 10             	add    esp,0x10
c0018804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018808:	05 0c 01 00 00       	add    eax,0x10c
c001880d:	83 ec 08             	sub    esp,0x8
c0018810:	68 32 2e 02 c0       	push   0xc0022e32
c0018815:	50                   	push   eax
c0018816:	e8 39 7f fe ff       	call   c0000754 <strcpy>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018822:	83 c0 0c             	add    eax,0xc
c0018825:	83 ec 08             	sub    esp,0x8
c0018828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882c:	50                   	push   eax
c001882d:	e8 22 7f fe ff       	call   c0000754 <strcpy>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	83 ec 08             	sub    esp,0x8
c0018838:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001883c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018840:	e8 31 fe ff ff       	call   c0018676 <Process::addArgs(char**)>
c0018845:	83 c4 10             	add    esp,0x10
c0018848:	83 ec 08             	sub    esp,0x8
c001884b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018853:	e8 a5 ee ff ff       	call   c00176fd <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018858:	83 c4 10             	add    esp,0x10
c001885b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001885f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018863:	83 f0 01             	xor    eax,0x1
c0018866:	88 c2                	mov    dl,al
c0018868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001886c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018872:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018876:	25 ff 00 00 00       	and    eax,0xff
c001887b:	83 ec 08             	sub    esp,0x8
c001887e:	50                   	push   eax
c001887f:	68 30 2f 02 c0       	push   0xc0022f30
c0018884:	e8 7c 69 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0018889:	83 c4 10             	add    esp,0x10
c001888c:	90                   	nop
c001888d:	83 c4 14             	add    esp,0x14
c0018890:	5b                   	pop    ebx
c0018891:	5e                   	pop    esi
c0018892:	c3                   	ret    
c0018893:	90                   	nop

c0018894 <Process::Process(bool, char const*, Process*, char**)>:
c0018894:	56                   	push   esi
c0018895:	53                   	push   ebx
c0018896:	83 ec 14             	sub    esp,0x14
c0018899:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001889d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a5:	05 0c 02 00 00       	add    eax,0x20c
c00188aa:	bb 07 00 00 00       	mov    ebx,0x7
c00188af:	89 c6                	mov    esi,eax
c00188b1:	85 db                	test   ebx,ebx
c00188b3:	78 12                	js     c00188c7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188b5:	83 ec 0c             	sub    esp,0xc
c00188b8:	56                   	push   esi
c00188b9:	e8 8c 75 00 00       	call   c001fe4a <ThreadControlBlock::ThreadControlBlock()>
c00188be:	83 c4 10             	add    esp,0x10
c00188c1:	83 c6 63             	add    esi,0x63
c00188c4:	4b                   	dec    ebx
c00188c5:	eb ea                	jmp    c00188b1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188cb:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188df:	a1 a4 41 02 c0       	mov    eax,ds:0xc00241a4
c00188e4:	8d 50 01             	lea    edx,[eax+0x1]
c00188e7:	89 15 a4 41 02 c0    	mov    DWORD PTR ds:0xc00241a4,edx
c00188ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188f1:	89 02                	mov    DWORD PTR [edx],eax
c00188f3:	83 ec 0c             	sub    esp,0xc
c00188f6:	6a 10                	push   0x10
c00188f8:	e8 d3 67 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00188fd:	83 c4 10             	add    esp,0x10
c0018900:	89 c3                	mov    ebx,eax
c0018902:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018906:	25 ff 00 00 00       	and    eax,0xff
c001890b:	83 ec 08             	sub    esp,0x8
c001890e:	50                   	push   eax
c001890f:	53                   	push   ebx
c0018910:	e8 4f 64 ff ff       	call   c000ed64 <VAS::VAS(bool)>
c0018915:	83 c4 10             	add    esp,0x10
c0018918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001891c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018926:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018934:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018938:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001893e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018942:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018948:	85 c0                	test   eax,eax
c001894a:	74 42                	je     c001898e <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001894c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018950:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018956:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001895c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018960:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018970:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897a:	05 0c 01 00 00       	add    eax,0x10c
c001897f:	83 ec 08             	sub    esp,0x8
c0018982:	52                   	push   edx
c0018983:	50                   	push   eax
c0018984:	e8 cb 7d fe ff       	call   c0000754 <strcpy>
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	eb 5c                	jmp    c00189ea <Process::Process(bool, char const*, Process*, char**)+0x156>
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	68 60 12 00 00       	push   0x1260
c0018996:	e8 35 67 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	89 c3                	mov    ebx,eax
c00189a0:	83 ec 08             	sub    esp,0x8
c00189a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189a7:	53                   	push   ebx
c00189a8:	e8 15 4e ff ff       	call   c000d7c2 <VgaText::VgaText(char const*)>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189b4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189be:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189c4:	83 ec 0c             	sub    esp,0xc
c00189c7:	50                   	push   eax
c00189c8:	e8 f4 41 ff ff       	call   c000cbc1 <addToTerminalCycle(VgaText*)>
c00189cd:	83 c4 10             	add    esp,0x10
c00189d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d4:	05 0c 01 00 00       	add    eax,0x10c
c00189d9:	83 ec 08             	sub    esp,0x8
c00189dc:	68 32 2e 02 c0       	push   0xc0022e32
c00189e1:	50                   	push   eax
c00189e2:	e8 6d 7d fe ff       	call   c0000754 <strcpy>
c00189e7:	83 c4 10             	add    esp,0x10
c00189ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ee:	83 c0 0c             	add    eax,0xc
c00189f1:	83 ec 08             	sub    esp,0x8
c00189f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189f8:	50                   	push   eax
c00189f9:	e8 56 7d fe ff       	call   c0000754 <strcpy>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	83 ec 08             	sub    esp,0x8
c0018a04:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a0c:	e8 65 fc ff ff       	call   c0018676 <Process::addArgs(char**)>
c0018a11:	83 c4 10             	add    esp,0x10
c0018a14:	90                   	nop
c0018a15:	83 c4 14             	add    esp,0x14
c0018a18:	5b                   	pop    ebx
c0018a19:	5e                   	pop    esi
c0018a1a:	c3                   	ret    

c0018a1b <disableIRQs()>:
c0018a1b:	fa                   	cli    
c0018a1c:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a21:	40                   	inc    eax
c0018a22:	a3 ac 5b 02 c0       	mov    ds:0xc0025bac,eax
c0018a27:	c3                   	ret    

c0018a28 <getIRQNestingLevel()>:
c0018a28:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a2d:	c3                   	ret    

c0018a2e <enableIRQs()>:
c0018a2e:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a33:	48                   	dec    eax
c0018a34:	a3 ac 5b 02 c0       	mov    ds:0xc0025bac,eax
c0018a39:	75 01                	jne    c0018a3c <enableIRQs()+0xe>
c0018a3b:	fb                   	sti    
c0018a3c:	c3                   	ret    

c0018a3d <lockScheduler()>:
c0018a3d:	eb dc                	jmp    c0018a1b <disableIRQs()>

c0018a3f <unlockScheduler()>:
c0018a3f:	eb ed                	jmp    c0018a2e <enableIRQs()>

c0018a41 <userModeEntryPoint(void*)>:
c0018a41:	83 ec 0c             	sub    esp,0xc
c0018a44:	e8 f6 ff ff ff       	call   c0018a3f <unlockScheduler()>
c0018a49:	fb                   	sti    
c0018a4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a52:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a5c:	83 c4 0c             	add    esp,0xc
c0018a5f:	e9 2a 78 fe ff       	jmp    c000028e <goToUsermode>

c0018a64 <lockStuff()>:
c0018a64:	e8 b2 ff ff ff       	call   c0018a1b <disableIRQs()>
c0018a69:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018a6e:	40                   	inc    eax
c0018a6f:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c0018a74:	c3                   	ret    

c0018a75 <taskStartupFunction>:
c0018a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a7a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a7d:	c3                   	ret    

c0018a7e <updateTimeUsed()>:
c0018a7e:	57                   	push   edi
c0018a7f:	56                   	push   esi
c0018a80:	53                   	push   ebx
c0018a81:	e8 42 be ff ff       	call   c00148c8 <thisCPU()>
c0018a86:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a8d:	74 49                	je     c0018ad8 <updateTimeUsed()+0x5a>
c0018a8f:	0f 31                	rdtsc  
c0018a91:	89 c1                	mov    ecx,eax
c0018a93:	a3 e8 5b 02 c0       	mov    ds:0xc0025be8,eax
c0018a98:	2b 0d d8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bd8
c0018a9e:	a3 d8 5b 02 c0       	mov    ds:0xc0025bd8,eax
c0018aa3:	89 0d e0 5b 02 c0    	mov    DWORD PTR ds:0xc0025be0,ecx
c0018aa9:	89 d3                	mov    ebx,edx
c0018aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab0:	89 15 ec 5b 02 c0    	mov    DWORD PTR ds:0xc0025bec,edx
c0018ab6:	1b 1d dc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bdc
c0018abc:	89 15 dc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bdc,edx
c0018ac2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ac5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ac8:	01 f1                	add    ecx,esi
c0018aca:	89 1d e4 5b 02 c0    	mov    DWORD PTR ds:0xc0025be4,ebx
c0018ad0:	11 fb                	adc    ebx,edi
c0018ad2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018ad5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018ad8:	5b                   	pop    ebx
c0018ad9:	5e                   	pop    esi
c0018ada:	5f                   	pop    edi
c0018adb:	c3                   	ret    

c0018adc <switchToThread(ThreadControlBlock*)>:
c0018adc:	53                   	push   ebx
c0018add:	83 ec 08             	sub    esp,0x8
c0018ae0:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018ae5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ae9:	85 c0                	test   eax,eax
c0018aeb:	75 36                	jne    c0018b23 <switchToThread(ThreadControlBlock*)+0x47>
c0018aed:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018af0:	80 fa ff             	cmp    dl,0xff
c0018af3:	74 2a                	je     c0018b1f <switchToThread(ThreadControlBlock*)+0x43>
c0018af5:	81 e2 ff 00 00 00    	and    edx,0xff
c0018afb:	b8 84 03 00 00       	mov    eax,0x384
c0018b00:	29 d0                	sub    eax,edx
c0018b02:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b05:	c1 e0 10             	shl    eax,0x10
c0018b08:	01 c8                	add    eax,ecx
c0018b0a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b0d:	e8 6c ff ff ff       	call   c0018a7e <updateTimeUsed()>
c0018b12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b16:	83 c4 08             	add    esp,0x8
c0018b19:	5b                   	pop    ebx
c0018b1a:	e9 ad 77 fe ff       	jmp    c00002cc <switchToThreadASM>
c0018b1f:	31 c0                	xor    eax,eax
c0018b21:	eb e7                	jmp    c0018b0a <switchToThread(ThreadControlBlock*)+0x2e>
c0018b23:	c7 05 a4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x1
c0018b2d:	83 c4 08             	add    esp,0x8
c0018b30:	5b                   	pop    ebx
c0018b31:	c3                   	ret    

c0018b32 <Semaphore::Semaphore(int)>:
c0018b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b3a:	89 10                	mov    DWORD PTR [eax],edx
c0018b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b40:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b56:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b5d:	90                   	nop
c0018b5e:	c3                   	ret    
c0018b5f:	90                   	nop

c0018b60 <Mutex::Mutex()>:
c0018b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b64:	6a 01                	push   0x1
c0018b66:	50                   	push   eax
c0018b67:	e8 c6 ff ff ff       	call   c0018b32 <Semaphore::Semaphore(int)>
c0018b6c:	83 c4 08             	add    esp,0x8
c0018b6f:	90                   	nop
c0018b70:	c3                   	ret    
c0018b71:	90                   	nop

c0018b72 <Process::createThread(void (*)(void*), void*, int)>:
c0018b72:	55                   	push   ebp
c0018b73:	31 c9                	xor    ecx,ecx
c0018b75:	57                   	push   edi
c0018b76:	56                   	push   esi
c0018b77:	53                   	push   ebx
c0018b78:	83 ec 1c             	sub    esp,0x1c
c0018b7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b7f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b86:	89 f2                	mov    edx,esi
c0018b88:	31 c0                	xor    eax,eax
c0018b8a:	66 89 d0             	mov    ax,dx
c0018b8d:	83 e2 01             	and    edx,0x1
c0018b90:	74 14                	je     c0018ba6 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018b92:	d1 f8                	sar    eax,1
c0018b94:	41                   	inc    ecx
c0018b95:	89 c2                	mov    edx,eax
c0018b97:	83 f9 10             	cmp    ecx,0x10
c0018b9a:	75 ec                	jne    c0018b88 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018b9c:	83 c4 1c             	add    esp,0x1c
c0018b9f:	31 c0                	xor    eax,eax
c0018ba1:	5b                   	pop    ebx
c0018ba2:	5e                   	pop    esi
c0018ba3:	5f                   	pop    edi
c0018ba4:	5d                   	pop    ebp
c0018ba5:	c3                   	ret    
c0018ba6:	b8 01 00 00 00       	mov    eax,0x1
c0018bab:	d3 e0                	shl    eax,cl
c0018bad:	09 c6                	or     esi,eax
c0018baf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bb5:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bbc:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bbf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bc2:	89 f0                	mov    eax,esi
c0018bc4:	c1 e0 05             	shl    eax,0x5
c0018bc7:	01 c6                	add    esi,eax
c0018bc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bcc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bd2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bd6:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bdc:	89 ca                	mov    edx,ecx
c0018bde:	f7 da                	neg    edx
c0018be0:	c1 e2 15             	shl    edx,0x15
c0018be3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018be9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bef:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018bf5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018bfb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bff:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c09:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c13:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c19:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c23:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c2d:	52                   	push   edx
c0018c2e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c35:	52                   	push   edx
c0018c36:	50                   	push   eax
c0018c37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c3b:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c40:	e8 5d 70 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c4c:	83 c4 1c             	add    esp,0x1c
c0018c4f:	5b                   	pop    ebx
c0018c50:	5e                   	pop    esi
c0018c51:	5f                   	pop    edi
c0018c52:	5d                   	pop    ebp
c0018c53:	c3                   	ret    

c0018c54 <Process::createUserThread()>:
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	68 80 00 00 00       	push   0x80
c0018c5c:	6a 00                	push   0x0
c0018c5e:	68 41 8a 01 c0       	push   0xc0018a41
c0018c63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c67:	50                   	push   eax
c0018c68:	e8 05 ff ff ff       	call   c0018b72 <Process::createThread(void (*)(void*), void*, int)>
c0018c6d:	83 c4 1c             	add    esp,0x1c
c0018c70:	c3                   	ret    

c0018c71 <setupMultitasking(void (*)())>:
c0018c71:	56                   	push   esi
c0018c72:	53                   	push   ebx
c0018c73:	51                   	push   ecx
c0018c74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c78:	eb 10                	jmp    c0018c8a <setupMultitasking(void (*)())+0x19>
c0018c7a:	83 ec 0c             	sub    esp,0xc
c0018c7d:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c82:	e8 6d 6f 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	83 ec 0c             	sub    esp,0xc
c0018c8d:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c92:	e8 41 6f 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	84 c0                	test   al,al
c0018c9c:	74 dc                	je     c0018c7a <setupMultitasking(void (*)())+0x9>
c0018c9e:	83 ec 0c             	sub    esp,0xc
c0018ca1:	68 3b 07 00 00       	push   0x73b
c0018ca6:	e8 25 64 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c0018cab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cb2:	6a 00                	push   0x0
c0018cb4:	68 36 2e 02 c0       	push   0xc0022e36
c0018cb9:	89 c3                	mov    ebx,eax
c0018cbb:	6a 01                	push   0x1
c0018cbd:	50                   	push   eax
c0018cbe:	e8 d1 fb ff ff       	call   c0018894 <Process::Process(bool, char const*, Process*, char**)>
c0018cc3:	83 c4 18             	add    esp,0x18
c0018cc6:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018ccc:	89 1d d4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bd4,ebx
c0018cd2:	50                   	push   eax
c0018cd3:	68 58 2f 02 c0       	push   0xc0022f58
c0018cd8:	e8 28 65 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0018cdd:	5a                   	pop    edx
c0018cde:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018ce4:	51                   	push   ecx
c0018ce5:	e8 4b 46 ff ff       	call   c000d335 <setActiveTerminal(VgaText*)>
c0018cea:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018cf1:	83 c8 01             	or     eax,0x1
c0018cf4:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018cfb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d04:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d0e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d14:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d1e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d28:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d2e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d34:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d3e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d44:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d4e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d58:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d5e:	58                   	pop    eax
c0018d5f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d65:	5a                   	pop    edx
c0018d66:	68 32 2e 02 c0       	push   0xc0022e32
c0018d6b:	50                   	push   eax
c0018d6c:	e8 e3 79 fe ff       	call   c0000754 <strcpy>
c0018d71:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d78:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d7c:	83 c4 14             	add    esp,0x14
c0018d7f:	5b                   	pop    ebx
c0018d80:	5e                   	pop    esi
c0018d81:	e9 38 75 fe ff       	jmp    c00002be <switchToThreadASMFirstTime>

c0018d86 <schedule()>:
c0018d86:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018d8b:	85 c0                	test   eax,eax
c0018d8d:	74 0b                	je     c0018d9a <schedule()+0x14>
c0018d8f:	c7 05 a4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x1
c0018d99:	c3                   	ret    
c0018d9a:	53                   	push   ebx
c0018d9b:	83 ec 14             	sub    esp,0x14
c0018d9e:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018da3:	e8 30 6e 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018da8:	83 c4 10             	add    esp,0x10
c0018dab:	84 c0                	test   al,al
c0018dad:	75 38                	jne    c0018de7 <schedule()+0x61>
c0018daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018db4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018db7:	4a                   	dec    edx
c0018db8:	74 32                	je     c0018dec <schedule()+0x66>
c0018dba:	83 ec 0c             	sub    esp,0xc
c0018dbd:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018dc2:	e8 09 6e 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dc7:	89 c3                	mov    ebx,eax
c0018dc9:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c0018dd0:	e8 1f 6e 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018dd5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018ddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ddf:	e8 f8 fc ff ff       	call   c0018adc <switchToThread(ThreadControlBlock*)>
c0018de4:	83 c4 10             	add    esp,0x10
c0018de7:	83 c4 08             	add    esp,0x8
c0018dea:	5b                   	pop    ebx
c0018deb:	c3                   	ret    
c0018dec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018df3:	51                   	push   ecx
c0018df4:	51                   	push   ecx
c0018df5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018dfb:	53                   	push   ebx
c0018dfc:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018e01:	e8 9c 6e 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	eb af                	jmp    c0018dba <schedule()+0x34>

c0018e0b <unlockStuff()>:
c0018e0b:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018e10:	48                   	dec    eax
c0018e11:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c0018e16:	75 09                	jne    c0018e21 <unlockStuff()+0x16>
c0018e18:	a1 a4 5b 02 c0       	mov    eax,ds:0xc0025ba4
c0018e1d:	85 c0                	test   eax,eax
c0018e1f:	75 05                	jne    c0018e26 <unlockStuff()+0x1b>
c0018e21:	e9 08 fc ff ff       	jmp    c0018a2e <enableIRQs()>
c0018e26:	83 ec 0c             	sub    esp,0xc
c0018e29:	c7 05 a4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x0
c0018e33:	e8 4e ff ff ff       	call   c0018d86 <schedule()>
c0018e38:	83 c4 0c             	add    esp,0xc
c0018e3b:	e9 ee fb ff ff       	jmp    c0018a2e <enableIRQs()>

c0018e40 <Semaphore::tryAcquire()>:
c0018e40:	83 ec 0c             	sub    esp,0xc
c0018e43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e47:	e8 18 fc ff ff       	call   c0018a64 <lockStuff()>
c0018e4c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e4f:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e51:	7c 0b                	jl     c0018e5e <Semaphore::tryAcquire()+0x1e>
c0018e53:	e8 b3 ff ff ff       	call   c0018e0b <unlockStuff()>
c0018e58:	31 c0                	xor    eax,eax
c0018e5a:	83 c4 0c             	add    esp,0xc
c0018e5d:	c3                   	ret    
c0018e5e:	40                   	inc    eax
c0018e5f:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e62:	e8 a4 ff ff ff       	call   c0018e0b <unlockStuff()>
c0018e67:	b0 01                	mov    al,0x1
c0018e69:	83 c4 0c             	add    esp,0xc
c0018e6c:	c3                   	ret    
c0018e6d:	90                   	nop

c0018e6e <Semaphore::assertLocked(char const*)>:
c0018e6e:	83 ec 0c             	sub    esp,0xc
c0018e71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e79:	e8 e6 fb ff ff       	call   c0018a64 <lockStuff()>
c0018e7e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e80:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e83:	7c 05                	jl     c0018e8a <Semaphore::assertLocked(char const*)+0x1c>
c0018e85:	83 c4 0c             	add    esp,0xc
c0018e88:	eb 81                	jmp    c0018e0b <unlockStuff()>
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	51                   	push   ecx
c0018e8e:	e8 a1 cb ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	83 c4 0c             	add    esp,0xc
c0018e99:	e9 6d ff ff ff       	jmp    c0018e0b <unlockStuff()>

c0018e9e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018e9e:	83 ec 0c             	sub    esp,0xc
c0018ea1:	e8 82 fb ff ff       	call   c0018a28 <getIRQNestingLevel()>
c0018ea6:	52                   	push   edx
c0018ea7:	52                   	push   edx
c0018ea8:	50                   	push   eax
c0018ea9:	68 8c 2f 02 c0       	push   0xc0022f8c
c0018eae:	e8 52 63 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0018eb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018eb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ebc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ebf:	e8 c2 fe ff ff       	call   c0018d86 <schedule()>
c0018ec4:	e8 76 fb ff ff       	call   c0018a3f <unlockScheduler()>
c0018ec9:	e8 5a fb ff ff       	call   c0018a28 <getIRQNestingLevel()>
c0018ece:	59                   	pop    ecx
c0018ecf:	5a                   	pop    edx
c0018ed0:	50                   	push   eax
c0018ed1:	68 c0 2f 02 c0       	push   0xc0022fc0
c0018ed6:	e8 2a 63 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0018edb:	83 c4 1c             	add    esp,0x1c
c0018ede:	c3                   	ret    

c0018edf <blockTask(TaskState)>:
c0018edf:	83 ec 0c             	sub    esp,0xc
c0018ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ee6:	e8 52 fb ff ff       	call   c0018a3d <lockScheduler()>
c0018eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ef0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ef3:	e8 8e fe ff ff       	call   c0018d86 <schedule()>
c0018ef8:	83 c4 0c             	add    esp,0xc
c0018efb:	e9 3f fb ff ff       	jmp    c0018a3f <unlockScheduler()>

c0018f00 <waitTask(int, int*, int)>:
c0018f00:	83 ec 18             	sub    esp,0x18
c0018f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f0c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f18:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f1b:	6a 07                	push   0x7
c0018f1d:	e8 bd ff ff ff       	call   c0018edf <blockTask(TaskState)>
c0018f22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f27:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f2a:	83 c4 10             	add    esp,0x10
c0018f2d:	85 d2                	test   edx,edx
c0018f2f:	74 0a                	je     c0018f3b <waitTask(int, int*, int)+0x3b>
c0018f31:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f34:	89 02                	mov    DWORD PTR [edx],eax
c0018f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f3e:	83 c4 0c             	add    esp,0xc
c0018f41:	c3                   	ret    

c0018f42 <nanoSleepUntil(unsigned long long)>:
c0018f42:	53                   	push   ebx
c0018f43:	83 ec 08             	sub    esp,0x8
c0018f46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f4e:	3b 0d f0 4d 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024df0
c0018f54:	89 d8                	mov    eax,ebx
c0018f56:	1b 05 f4 4d 02 c0    	sbb    eax,DWORD PTR ds:0xc0024df4
c0018f5c:	73 05                	jae    c0018f63 <nanoSleepUntil(unsigned long long)+0x21>
c0018f5e:	83 c4 08             	add    esp,0x8
c0018f61:	5b                   	pop    ebx
c0018f62:	c3                   	ret    
c0018f63:	e8 fc fa ff ff       	call   c0018a64 <lockStuff()>
c0018f68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f6d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f70:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f73:	51                   	push   ecx
c0018f74:	51                   	push   ecx
c0018f75:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f7b:	53                   	push   ebx
c0018f7c:	68 bc 5b 02 c0       	push   0xc0025bbc
c0018f81:	e8 1c 6d 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f86:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f8d:	e8 4d ff ff ff       	call   c0018edf <blockTask(TaskState)>
c0018f92:	83 c4 18             	add    esp,0x18
c0018f95:	5b                   	pop    ebx
c0018f96:	e9 70 fe ff ff       	jmp    c0018e0b <unlockStuff()>

c0018f9b <nanoSleep(unsigned long long)>:
c0018f9b:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c0018fa0:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c0018fa6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018faa:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fae:	eb 92                	jmp    c0018f42 <nanoSleepUntil(unsigned long long)>

c0018fb0 <sleep(unsigned long long)>:
c0018fb0:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fb5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fbd:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fc1:	01 ca                	add    edx,ecx
c0018fc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fc7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fcb:	eb ce                	jmp    c0018f9b <nanoSleep(unsigned long long)>
c0018fcd:	90                   	nop

c0018fce <Semaphore::acquire()>:
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fd5:	e8 8a fa ff ff       	call   c0018a64 <lockStuff()>
c0018fda:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fdd:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018fdf:	7d 0c                	jge    c0018fed <Semaphore::acquire()+0x1f>
c0018fe1:	40                   	inc    eax
c0018fe2:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018fe5:	83 c4 0c             	add    esp,0xc
c0018fe8:	e9 1e fe ff ff       	jmp    c0018e0b <unlockStuff()>
c0018fed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ff2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018ff9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018ffc:	85 c0                	test   eax,eax
c0018ffe:	74 29                	je     c0019029 <Semaphore::acquire()+0x5b>
c0019000:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019003:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019009:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001900c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019011:	83 ec 0c             	sub    esp,0xc
c0019014:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019017:	6a 05                	push   0x5
c0019019:	e8 c1 fe ff ff       	call   c0018edf <blockTask(TaskState)>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	83 c4 0c             	add    esp,0xc
c0019024:	e9 e2 fd ff ff       	jmp    c0018e0b <unlockStuff()>
c0019029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001902e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019031:	eb d9                	jmp    c001900c <Semaphore::acquire()+0x3e>

c0019033 <taskReturned>:
c0019033:	83 ec 18             	sub    esp,0x18
c0019036:	68 f4 2f 02 c0       	push   0xc0022ff4
c001903b:	e8 f4 c9 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	83 ec 0c             	sub    esp,0xc
c0019046:	6a 02                	push   0x2
c0019048:	e8 92 fe ff ff       	call   c0018edf <blockTask(TaskState)>
c001904d:	e8 eb f9 ff ff       	call   c0018a3d <lockScheduler()>
c0019052:	e8 2f fd ff ff       	call   c0018d86 <schedule()>
c0019057:	e8 e3 f9 ff ff       	call   c0018a3f <unlockScheduler()>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	eb e2                	jmp    c0019043 <taskReturned+0x10>

c0019061 <unblockTask(ThreadControlBlock*)>:
c0019061:	53                   	push   ebx
c0019062:	83 ec 08             	sub    esp,0x8
c0019065:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019069:	e8 cf f9 ff ff       	call   c0018a3d <lockScheduler()>
c001906e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019071:	85 c0                	test   eax,eax
c0019073:	74 5b                	je     c00190d0 <unblockTask(ThreadControlBlock*)+0x6f>
c0019075:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019078:	48                   	dec    eax
c0019079:	74 30                	je     c00190ab <unblockTask(ThreadControlBlock*)+0x4a>
c001907b:	83 ec 0c             	sub    esp,0xc
c001907e:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019083:	e8 48 6b 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	85 c0                	test   eax,eax
c001908d:	75 16                	jne    c00190a5 <unblockTask(ThreadControlBlock*)+0x44>
c001908f:	eb 64                	jmp    c00190f5 <unblockTask(ThreadControlBlock*)+0x94>
c0019091:	52                   	push   edx
c0019092:	52                   	push   edx
c0019093:	50                   	push   eax
c0019094:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019099:	e8 42 6e 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001909e:	83 c4 10             	add    esp,0x10
c00190a1:	85 c0                	test   eax,eax
c00190a3:	74 50                	je     c00190f5 <unblockTask(ThreadControlBlock*)+0x94>
c00190a5:	39 c3                	cmp    ebx,eax
c00190a7:	75 e8                	jne    c0019091 <unblockTask(ThreadControlBlock*)+0x30>
c00190a9:	eb 1c                	jmp    c00190c7 <unblockTask(ThreadControlBlock*)+0x66>
c00190ab:	83 ec 0c             	sub    esp,0xc
c00190ae:	68 e4 30 02 c0       	push   0xc00230e4
c00190b3:	e8 4d 61 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00190b8:	c7 04 24 70 30 02 c0 	mov    DWORD PTR [esp],0xc0023070
c00190bf:	e8 41 61 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00190c4:	83 c4 10             	add    esp,0x10
c00190c7:	83 c4 08             	add    esp,0x8
c00190ca:	5b                   	pop    ebx
c00190cb:	e9 6f f9 ff ff       	jmp    c0018a3f <unlockScheduler()>
c00190d0:	83 ec 0c             	sub    esp,0xc
c00190d3:	68 28 30 02 c0       	push   0xc0023028
c00190d8:	e8 28 61 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00190dd:	c7 04 24 70 30 02 c0 	mov    DWORD PTR [esp],0xc0023070
c00190e4:	e8 1c 61 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	83 c4 08             	add    esp,0x8
c00190ef:	5b                   	pop    ebx
c00190f0:	e9 4a f9 ff ff       	jmp    c0018a3f <unlockScheduler()>
c00190f5:	50                   	push   eax
c00190f6:	50                   	push   eax
c00190f7:	53                   	push   ebx
c00190f8:	68 c8 5b 02 c0       	push   0xc0025bc8
c00190fd:	e8 a0 6b 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019102:	83 c4 10             	add    esp,0x10
c0019105:	83 c4 08             	add    esp,0x8
c0019108:	5b                   	pop    ebx
c0019109:	e9 31 f9 ff ff       	jmp    c0018a3f <unlockScheduler()>

c001910e <cleanupTerminatedTask(ThreadControlBlock*)>:
c001910e:	55                   	push   ebp
c001910f:	57                   	push   edi
c0019110:	56                   	push   esi
c0019111:	53                   	push   ebx
c0019112:	83 ec 1c             	sub    esp,0x1c
c0019115:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019119:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001911c:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019122:	85 ed                	test   ebp,ebp
c0019124:	7e 21                	jle    c0019147 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019126:	31 f6                	xor    esi,esi
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019132:	46                   	inc    esi
c0019133:	57                   	push   edi
c0019134:	e8 aa 2e ff ff       	call   c000bfe3 <free>
c0019139:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019145:	7f e1                	jg     c0019128 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019147:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019151:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019156:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019159:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001915c:	d3 c0                	rol    eax,cl
c001915e:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019165:	21 c1                	and    ecx,eax
c0019167:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001916e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019171:	89 f7                	mov    edi,esi
c0019173:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001917b:	0f 85 4f 01 00 00    	jne    c00192d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019181:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019187:	85 c0                	test   eax,eax
c0019189:	0f 84 aa 00 00 00    	je     c0019239 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c001918f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0019192:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019196:	31 c9                	xor    ecx,ecx
c0019198:	eb 10                	jmp    c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c001919a:	41                   	inc    ecx
c001919b:	83 f9 10             	cmp    ecx,0x10
c001919e:	0f 84 95 00 00 00    	je     c0019239 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191a4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191aa:	31 d2                	xor    edx,edx
c00191ac:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191b3:	d3 fa                	sar    edx,cl
c00191b5:	83 e2 01             	and    edx,0x1
c00191b8:	74 e0                	je     c001919a <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191ba:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191bd:	89 d5                	mov    ebp,edx
c00191bf:	c1 e5 05             	shl    ebp,0x5
c00191c2:	01 ea                	add    edx,ebp
c00191c4:	01 d0                	add    eax,edx
c00191c6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191cc:	83 fd 07             	cmp    ebp,0x7
c00191cf:	75 c9                	jne    c001919a <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191d1:	05 40 02 00 00       	add    eax,0x240
c00191d6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191d9:	83 fd ff             	cmp    ebp,0xffffffff
c00191dc:	0f 8c 07 01 00 00    	jl     c00192e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191e2:	0f 84 b4 01 00 00    	je     c001939c <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191e8:	85 ed                	test   ebp,ebp
c00191ea:	0f 84 9b 01 00 00    	je     c001938b <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00191f0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00191f2:	75 a6                	jne    c001919a <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191f4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191fe:	01 d0                	add    eax,edx
c0019200:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019204:	83 ec 0c             	sub    esp,0xc
c0019207:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001920d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019210:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019216:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001921d:	50                   	push   eax
c001921e:	e8 3e fe ff ff       	call   c0019061 <unblockTask(ThreadControlBlock*)>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001922a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001922d:	41                   	inc    ecx
c001922e:	89 f7                	mov    edi,esi
c0019230:	83 f9 10             	cmp    ecx,0x10
c0019233:	0f 85 6b ff ff ff    	jne    c00191a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019239:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001923f:	85 c0                	test   eax,eax
c0019241:	74 5d                	je     c00192a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019243:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019249:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001924f:	74 4f                	je     c00192a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019251:	83 ec 0c             	sub    esp,0xc
c0019254:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019259:	e8 72 69 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001925e:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c0019265:	89 c7                	mov    edi,eax
c0019267:	e8 6c 69 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	84 c0                	test   al,al
c0019271:	0f 84 e2 00 00 00    	je     c0019359 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019277:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001927a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019280:	85 d2                	test   edx,edx
c0019282:	74 0f                	je     c0019293 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019284:	83 ec 0c             	sub    esp,0xc
c0019287:	8b 02                	mov    eax,DWORD PTR [edx]
c0019289:	52                   	push   edx
c001928a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001928d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019290:	83 c4 10             	add    esp,0x10
c0019293:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001929d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192a0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192a6:	85 db                	test   ebx,ebx
c00192a8:	74 16                	je     c00192c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192aa:	83 ec 0c             	sub    esp,0xc
c00192ad:	53                   	push   ebx
c00192ae:	e8 97 54 ff ff       	call   c000e74a <VAS::~VAS()>
c00192b3:	5a                   	pop    edx
c00192b4:	59                   	pop    ecx
c00192b5:	6a 10                	push   0x10
c00192b7:	53                   	push   ebx
c00192b8:	e8 22 5e ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	68 3d 2e 02 c0       	push   0xc0022e3d
c00192c8:	e8 38 5f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	50                   	push   eax
c00192d1:	50                   	push   eax
c00192d2:	68 3b 07 00 00       	push   0x73b
c00192d7:	68 4b 2e 02 c0       	push   0xc0022e4b
c00192dc:	e8 24 5f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00192e1:	83 c4 2c             	add    esp,0x2c
c00192e4:	5b                   	pop    ebx
c00192e5:	5e                   	pop    esi
c00192e6:	5f                   	pop    edi
c00192e7:	5d                   	pop    ebp
c00192e8:	c3                   	ret    
c00192e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192ed:	83 ec 0c             	sub    esp,0xc
c00192f0:	68 28 31 02 c0       	push   0xc0023128
c00192f5:	e8 3a c7 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019300:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019304:	89 f7                	mov    edi,esi
c0019306:	e9 8f fe ff ff       	jmp    c001919a <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001930b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019311:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019317:	75 1c                	jne    c0019335 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019319:	83 ec 0c             	sub    esp,0xc
c001931c:	68 90 31 02 c0       	push   0xc0023190
c0019321:	e8 df 5e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019326:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001932d:	e8 ad fb ff ff       	call   c0018edf <blockTask(TaskState)>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	55                   	push   ebp
c0019336:	55                   	push   ebp
c0019337:	56                   	push   esi
c0019338:	68 c8 5b 02 c0       	push   0xc0025bc8
c001933d:	e8 60 69 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019342:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c0019349:	e8 82 68 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001934e:	83 c4 10             	add    esp,0x10
c0019351:	39 f8                	cmp    eax,edi
c0019353:	0f 84 1e ff ff ff    	je     c0019277 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019359:	83 ec 0c             	sub    esp,0xc
c001935c:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019361:	e8 6a 68 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019366:	89 c6                	mov    esi,eax
c0019368:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c001936f:	e8 80 68 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	39 f3                	cmp    ebx,esi
c0019379:	74 ba                	je     c0019335 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001937b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001937e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019381:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019387:	75 ac                	jne    c0019335 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019389:	eb 80                	jmp    c001930b <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c001938b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001938f:	83 ec 0c             	sub    esp,0xc
c0019392:	68 5c 31 02 c0       	push   0xc002315c
c0019397:	e9 59 ff ff ff       	jmp    c00192f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c001939c:	8b 36                	mov    esi,DWORD PTR [esi]
c001939e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193a2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193a8:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193ae:	01 d7                	add    edi,edx
c00193b0:	89 f8                	mov    eax,edi
c00193b2:	e9 49 fe ff ff       	jmp    c0019200 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193b7 <cleanerTaskFunction(void*)>:
c00193b7:	53                   	push   ebx
c00193b8:	83 ec 08             	sub    esp,0x8
c00193bb:	e8 7f f6 ff ff       	call   c0018a3f <unlockScheduler()>
c00193c0:	e8 78 f6 ff ff       	call   c0018a3d <lockScheduler()>
c00193c5:	80 3d 8c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b8c,0x0
c00193cc:	0f 85 8e 00 00 00    	jne    c0019460 <cleanerTaskFunction(void*)+0xa9>
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	6a 02                	push   0x2
c00193d7:	e8 c2 fa ff ff       	call   c0018e9e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193dc:	83 c4 10             	add    esp,0x10
c00193df:	c6 05 8c 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025b8c,0x0
c00193e6:	e8 79 f6 ff ff       	call   c0018a64 <lockStuff()>
c00193eb:	e8 4d f6 ff ff       	call   c0018a3d <lockScheduler()>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 b0 5b 02 c0       	push   0xc0025bb0
c00193f8:	e8 db 67 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	84 c0                	test   al,al
c0019402:	75 40                	jne    c0019444 <cleanerTaskFunction(void*)+0x8d>
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	68 b0 5b 02 c0       	push   0xc0025bb0
c001940c:	e8 bf 67 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019411:	89 c3                	mov    ebx,eax
c0019413:	c7 04 24 b0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bb0
c001941a:	e8 d5 67 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001941f:	c7 04 24 61 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e61
c0019426:	e8 da 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001942b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001942e:	e8 db fc ff ff       	call   c001910e <cleanupTerminatedTask(ThreadControlBlock*)>
c0019433:	c7 04 24 7a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e7a
c001943a:	e8 c6 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	eb ac                	jmp    c00193f0 <cleanerTaskFunction(void*)+0x39>
c0019444:	e8 f6 f5 ff ff       	call   c0018a3f <unlockScheduler()>
c0019449:	e8 bd f9 ff ff       	call   c0018e0b <unlockStuff()>
c001944e:	e8 ea f5 ff ff       	call   c0018a3d <lockScheduler()>
c0019453:	80 3d 8c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b8c,0x0
c001945a:	0f 84 72 ff ff ff    	je     c00193d2 <cleanerTaskFunction(void*)+0x1b>
c0019460:	e8 da f5 ff ff       	call   c0018a3f <unlockScheduler()>
c0019465:	e9 75 ff ff ff       	jmp    c00193df <cleanerTaskFunction(void*)+0x28>

c001946a <terminateTask(int)>:
c001946a:	83 ec 14             	sub    esp,0x14
c001946d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019472:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019475:	83 c0 0c             	add    eax,0xc
c0019478:	50                   	push   eax
c0019479:	68 b8 31 02 c0       	push   0xc00231b8
c001947e:	e8 82 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019483:	e8 dc f5 ff ff       	call   c0018a64 <lockStuff()>
c0019488:	e8 b0 f5 ff ff       	call   c0018a3d <lockScheduler()>
c001948d:	c7 04 24 8d 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e8d
c0019494:	e8 6c 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001949e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194a2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194aa:	59                   	pop    ecx
c00194ab:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194ae:	5a                   	pop    edx
c00194af:	50                   	push   eax
c00194b0:	68 b0 5b 02 c0       	push   0xc0025bb0
c00194b5:	e8 e8 67 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194bf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194c6:	c7 04 24 a7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea7
c00194cd:	e8 33 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00194d2:	8b 0d 88 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b88
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	85 c9                	test   ecx,ecx
c00194dd:	74 5b                	je     c001953a <terminateTask(int)+0xd0>
c00194df:	83 ec 0c             	sub    esp,0xc
c00194e2:	68 c1 2e 02 c0       	push   0xc0022ec1
c00194e7:	e8 19 5d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c00194ec:	58                   	pop    eax
c00194ed:	8b 15 88 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b88
c00194f3:	52                   	push   edx
c00194f4:	c6 05 8c 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025b8c,0x1
c00194fb:	e8 61 fb ff ff       	call   c0019061 <unblockTask(ThreadControlBlock*)>
c0019500:	c7 04 24 db 2e 02 c0 	mov    DWORD PTR [esp],0xc0022edb
c0019507:	e8 f9 5c ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	e8 2b f5 ff ff       	call   c0018a3f <unlockScheduler()>
c0019514:	e8 f2 f8 ff ff       	call   c0018e0b <unlockStuff()>
c0019519:	83 ec 0c             	sub    esp,0xc
c001951c:	68 13 2f 02 c0       	push   0xc0022f13
c0019521:	e8 df 5c ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	e8 0f f5 ff ff       	call   c0018a3d <lockScheduler()>
c001952e:	e8 53 f8 ff ff       	call   c0018d86 <schedule()>
c0019533:	e8 07 f5 ff ff       	call   c0018a3f <unlockScheduler()>
c0019538:	eb ef                	jmp    c0019529 <terminateTask(int)+0xbf>
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	68 f5 2e 02 c0       	push   0xc0022ef5
c0019542:	e8 be 5c ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	eb c3                	jmp    c001950f <terminateTask(int)+0xa5>

c001954c <Thr::terminateFromIRQ(int)>:
c001954c:	83 ec 18             	sub    esp,0x18
c001954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019553:	50                   	push   eax
c0019554:	e8 11 ff ff ff       	call   c001946a <terminateTask(int)>
c0019559:	90                   	nop

c001955a <Semaphore::release()>:
c001955a:	83 ec 0c             	sub    esp,0xc
c001955d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019561:	e8 fe f4 ff ff       	call   c0018a64 <lockStuff()>
c0019566:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019569:	85 c0                	test   eax,eax
c001956b:	74 1a                	je     c0019587 <Semaphore::release()+0x2d>
c001956d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019576:	50                   	push   eax
c0019577:	e8 e5 fa ff ff       	call   c0019061 <unblockTask(ThreadControlBlock*)>
c001957c:	83 c4 10             	add    esp,0x10
c001957f:	83 c4 0c             	add    esp,0xc
c0019582:	e9 84 f8 ff ff       	jmp    c0018e0b <unlockStuff()>
c0019587:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001958a:	48                   	dec    eax
c001958b:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001958e:	83 c4 0c             	add    esp,0xc
c0019591:	e9 75 f8 ff ff       	jmp    c0018e0b <unlockStuff()>

c0019596 <__static_initialization_and_destruction_0(int, int)>:
c0019596:	83 ec 0c             	sub    esp,0xc
c0019599:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001959e:	0f 85 88 00 00 00    	jne    c001962c <__static_initialization_and_destruction_0(int, int)+0x96>
c00195a4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195ac:	75 7e                	jne    c001962c <__static_initialization_and_destruction_0(int, int)+0x96>
c00195ae:	83 ec 0c             	sub    esp,0xc
c00195b1:	68 c8 5b 02 c0       	push   0xc0025bc8
c00195b6:	e8 cd 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	83 ec 04             	sub    esp,0x4
c00195c1:	68 9c 3b 02 c0       	push   0xc0023b9c
c00195c6:	68 c8 5b 02 c0       	push   0xc0025bc8
c00195cb:	68 48 fe 01 c0       	push   0xc001fe48
c00195d0:	e8 86 5a ff ff       	call   c000f05b <__cxa_atexit>
c00195d5:	83 c4 10             	add    esp,0x10
c00195d8:	83 ec 0c             	sub    esp,0xc
c00195db:	68 bc 5b 02 c0       	push   0xc0025bbc
c00195e0:	e8 a3 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195e5:	83 c4 10             	add    esp,0x10
c00195e8:	83 ec 04             	sub    esp,0x4
c00195eb:	68 9c 3b 02 c0       	push   0xc0023b9c
c00195f0:	68 bc 5b 02 c0       	push   0xc0025bbc
c00195f5:	68 48 fe 01 c0       	push   0xc001fe48
c00195fa:	e8 5c 5a ff ff       	call   c000f05b <__cxa_atexit>
c00195ff:	83 c4 10             	add    esp,0x10
c0019602:	83 ec 0c             	sub    esp,0xc
c0019605:	68 b0 5b 02 c0       	push   0xc0025bb0
c001960a:	e8 79 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	83 ec 04             	sub    esp,0x4
c0019615:	68 9c 3b 02 c0       	push   0xc0023b9c
c001961a:	68 b0 5b 02 c0       	push   0xc0025bb0
c001961f:	68 48 fe 01 c0       	push   0xc001fe48
c0019624:	e8 32 5a ff ff       	call   c000f05b <__cxa_atexit>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	90                   	nop
c001962d:	83 c4 0c             	add    esp,0xc
c0019630:	c3                   	ret    

c0019631 <_GLOBAL__sub_I_kernelProcess>:
c0019631:	83 ec 0c             	sub    esp,0xc
c0019634:	83 ec 08             	sub    esp,0x8
c0019637:	68 ff ff 00 00       	push   0xffff
c001963c:	6a 01                	push   0x1
c001963e:	e8 53 ff ff ff       	call   c0019596 <__static_initialization_and_destruction_0(int, int)>
c0019643:	83 c4 10             	add    esp,0x10
c0019646:	83 c4 0c             	add    esp,0xc
c0019649:	c3                   	ret    

c001964a <Vm::vm8086EntryPoint(void*)>:
c001964a:	83 ec 0c             	sub    esp,0xc
c001964d:	e8 ed f3 ff ff       	call   c0018a3f <unlockScheduler()>
c0019652:	fb                   	sti    
c0019653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019658:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001965c:	52                   	push   edx
c001965d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019661:	52                   	push   edx
c0019662:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019666:	52                   	push   edx
c0019667:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001966b:	50                   	push   eax
c001966c:	e8 ec 6b fe ff       	call   c000025d <goToVM86>
c0019671:	83 c4 1c             	add    esp,0x1c
c0019674:	c3                   	ret    

c0019675 <Vm::inbv(unsigned short)>:
c0019675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019679:	ec                   	in     al,dx
c001967a:	c3                   	ret    

c001967b <Vm::outbv(unsigned short, unsigned char)>:
c001967b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001967f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019683:	ee                   	out    dx,al
c0019684:	c3                   	ret    

c0019685 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019685:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001968a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001968f:	c1 e0 04             	shl    eax,0x4
c0019692:	01 d0                	add    eax,edx
c0019694:	c3                   	ret    

c0019695 <Vm::getSegment(unsigned int)>:
c0019695:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019699:	c1 e8 10             	shr    eax,0x10
c001969c:	c3                   	ret    

c001969d <Vm::getOffset(unsigned int)>:
c001969d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a1:	c3                   	ret    

c00196a2 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196a2:	55                   	push   ebp
c00196a3:	57                   	push   edi
c00196a4:	56                   	push   esi
c00196a5:	53                   	push   ebx
c00196a6:	83 ec 2c             	sub    esp,0x2c
c00196a9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196ad:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196b5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196b9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196bd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196c1:	e8 77 f3 ff ff       	call   c0018a3d <lockScheduler()>
c00196c6:	68 80 00 00 00       	push   0x80
c00196cb:	6a 00                	push   0x0
c00196cd:	68 4a 96 01 c0       	push   0xc001964a
c00196d2:	55                   	push   ebp
c00196d3:	e8 9a f4 ff ff       	call   c0018b72 <Process::createThread(void (*)(void*), void*, int)>
c00196d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196dc:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196e0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196e4:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196e8:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196ec:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00196f0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00196f7:	e8 d4 59 ff ff       	call   c000f0d0 <operator new(unsigned long)>
c00196fc:	83 c4 0c             	add    esp,0xc
c00196ff:	55                   	push   ebp
c0019700:	89 c3                	mov    ebx,eax
c0019702:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019706:	50                   	push   eax
c0019707:	e8 30 60 ff ff       	call   c000f73c <File::File(char const*, Process*)>
c001970c:	83 c4 0c             	add    esp,0xc
c001970f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019713:	50                   	push   eax
c0019714:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019718:	50                   	push   eax
c0019719:	53                   	push   ebx
c001971a:	e8 2d 63 ff ff       	call   c000fa4c <File::stat(unsigned long long*, bool*)>
c001971f:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	84 d2                	test   dl,dl
c0019728:	74 1c                	je     c0019746 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001972a:	83 ec 0c             	sub    esp,0xc
c001972d:	68 d7 31 02 c0       	push   0xc00231d7
c0019732:	e8 fd c2 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0019737:	e8 03 f3 ff ff       	call   c0018a3f <unlockScheduler()>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	31 d2                	xor    edx,edx
c0019741:	e9 81 00 00 00       	jmp    c00197c7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019746:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001974a:	51                   	push   ecx
c001974b:	51                   	push   ecx
c001974c:	6a 01                	push   0x1
c001974e:	53                   	push   ebx
c001974f:	e8 4c 60 ff ff       	call   c000f7a0 <File::open(FileOpenMode)>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	85 c0                	test   eax,eax
c0019759:	74 1b                	je     c0019776 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001975b:	83 ec 0c             	sub    esp,0xc
c001975e:	68 f0 31 02 c0       	push   0xc00231f0
c0019763:	e8 cc c2 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c0019768:	e8 d2 f2 ff ff       	call   c0018a3f <unlockScheduler()>
c001976d:	83 c4 10             	add    esp,0x10
c0019770:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019774:	eb 51                	jmp    c00197c7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019776:	83 ec 0c             	sub    esp,0xc
c0019779:	0f b7 ff             	movzx  edi,di
c001977c:	6a 07                	push   0x7
c001977e:	68 00 01 00 00       	push   0x100
c0019783:	6a 00                	push   0x0
c0019785:	6a 00                	push   0x0
c0019787:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001978d:	e8 16 54 ff ff       	call   c000eba8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019792:	83 c4 18             	add    esp,0x18
c0019795:	0f b7 f6             	movzx  esi,si
c0019798:	57                   	push   edi
c0019799:	56                   	push   esi
c001979a:	e8 e6 fe ff ff       	call   c0019685 <Vm::realToLinear(unsigned short, unsigned short)>
c001979f:	5a                   	pop    edx
c00197a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197a2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197a6:	51                   	push   ecx
c00197a7:	50                   	push   eax
c00197a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b0:	53                   	push   ebx
c00197b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197b4:	83 c4 14             	add    esp,0x14
c00197b7:	53                   	push   ebx
c00197b8:	e8 41 60 ff ff       	call   c000f7fe <File::close()>
c00197bd:	e8 7d f2 ff ff       	call   c0018a3f <unlockScheduler()>
c00197c2:	83 c4 10             	add    esp,0x10
c00197c5:	b2 01                	mov    dl,0x1
c00197c7:	83 c4 2c             	add    esp,0x2c
c00197ca:	88 d0                	mov    al,dl
c00197cc:	5b                   	pop    ebx
c00197cd:	5e                   	pop    esi
c00197ce:	5f                   	pop    edi
c00197cf:	5d                   	pop    ebp
c00197d0:	c3                   	ret    

c00197d1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197d1:	57                   	push   edi
c00197d2:	56                   	push   esi
c00197d3:	53                   	push   ebx
c00197d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197dc:	83 e8 06             	sub    eax,0x6
c00197df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197e3:	0f b7 c0             	movzx  eax,ax
c00197e6:	50                   	push   eax
c00197e7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197ec:	50                   	push   eax
c00197ed:	e8 93 fe ff ff       	call   c0019685 <Vm::realToLinear(unsigned short, unsigned short)>
c00197f2:	5a                   	pop    edx
c00197f3:	5e                   	pop    esi
c00197f4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00197f7:	8d 56 fa             	lea    edx,[esi-0x6]
c00197fa:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019800:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019803:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019806:	83 c2 02             	add    edx,0x2
c0019809:	66 89 10             	mov    WORD PTR [eax],dx
c001980c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001980f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019813:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019816:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001981a:	89 d6                	mov    esi,edx
c001981c:	66 81 e6 ff fd       	and    si,0xfdff
c0019821:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019827:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001982b:	74 07                	je     c0019834 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001982d:	89 d6                	mov    esi,edx
c001982f:	66 81 ce 00 02       	or     si,0x200
c0019834:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001983d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019841:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019849:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001984c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019854:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019857:	5b                   	pop    ebx
c0019858:	5e                   	pop    esi
c0019859:	5f                   	pop    edi
c001985a:	c3                   	ret    

c001985b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001985b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019860:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019865:	c1 e0 04             	shl    eax,0x4
c0019868:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001986b:	c3                   	ret    

c001986c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001986c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019871:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019876:	c1 e0 04             	shl    eax,0x4
c0019879:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001987d:	c3                   	ret    

c001987e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001987e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019883:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019888:	c1 e0 04             	shl    eax,0x4
c001988b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001988e:	c3                   	ret    

c001988f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001988f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019894:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019899:	c1 e0 04             	shl    eax,0x4
c001989c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198a0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198a3:	c3                   	ret    

c00198a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198ae:	c1 e0 04             	shl    eax,0x4
c00198b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198b5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198b9:	c3                   	ret    

c00198ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198c4:	c1 e0 04             	shl    eax,0x4
c00198c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198cb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198ce:	c3                   	ret    

c00198cf <Vm::faultHandler(regs*)>:
c00198cf:	55                   	push   ebp
c00198d0:	57                   	push   edi
c00198d1:	56                   	push   esi
c00198d2:	53                   	push   ebx
c00198d3:	83 ec 1c             	sub    esp,0x1c
c00198d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198da:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198de:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198e1:	52                   	push   edx
c00198e2:	0f b7 f0             	movzx  esi,ax
c00198e5:	0f b7 c0             	movzx  eax,ax
c00198e8:	50                   	push   eax
c00198e9:	e8 97 fd ff ff       	call   c0019685 <Vm::realToLinear(unsigned short, unsigned short)>
c00198ee:	5a                   	pop    edx
c00198ef:	89 c7                	mov    edi,eax
c00198f1:	59                   	pop    ecx
c00198f2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198f9:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00198fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019901:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019905:	0f b7 c5             	movzx  eax,bp
c0019908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001990c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019910:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019914:	e8 6c fd ff ff       	call   c0019685 <Vm::realToLinear(unsigned short, unsigned short)>
c0019919:	5a                   	pop    edx
c001991a:	59                   	pop    ecx
c001991b:	b1 06                	mov    cl,0x6
c001991d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019922:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019927:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001992a:	80 fa 9d             	cmp    dl,0x9d
c001992d:	0f 84 1d 02 00 00    	je     c0019b50 <Vm::faultHandler(regs*)+0x281>
c0019933:	0f 87 8e 00 00 00    	ja     c00199c7 <Vm::faultHandler(regs*)+0xf8>
c0019939:	80 fa 66             	cmp    dl,0x66
c001993c:	0f 84 89 01 00 00    	je     c0019acb <Vm::faultHandler(regs*)+0x1fc>
c0019942:	77 44                	ja     c0019988 <Vm::faultHandler(regs*)+0xb9>
c0019944:	80 fa 36             	cmp    dl,0x36
c0019947:	0f 84 74 01 00 00    	je     c0019ac1 <Vm::faultHandler(regs*)+0x1f2>
c001994d:	77 1a                	ja     c0019969 <Vm::faultHandler(regs*)+0x9a>
c001994f:	80 fa 26             	cmp    dl,0x26
c0019952:	0f 84 4b 01 00 00    	je     c0019aa3 <Vm::faultHandler(regs*)+0x1d4>
c0019958:	80 fa 2e             	cmp    dl,0x2e
c001995b:	0f 85 4a 05 00 00    	jne    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c0019961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019964:	31 c9                	xor    ecx,ecx
c0019966:	47                   	inc    edi
c0019967:	eb be                	jmp    c0019927 <Vm::faultHandler(regs*)+0x58>
c0019969:	80 fa 64             	cmp    dl,0x64
c001996c:	0f 84 3b 01 00 00    	je     c0019aad <Vm::faultHandler(regs*)+0x1de>
c0019972:	0f 87 3f 01 00 00    	ja     c0019ab7 <Vm::faultHandler(regs*)+0x1e8>
c0019978:	80 fa 3e             	cmp    dl,0x3e
c001997b:	0f 85 2a 05 00 00    	jne    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c0019981:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019984:	b1 01                	mov    cl,0x1
c0019986:	eb de                	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019988:	80 fa 6d             	cmp    dl,0x6d
c001998b:	0f 84 bf 02 00 00    	je     c0019c50 <Vm::faultHandler(regs*)+0x381>
c0019991:	77 17                	ja     c00199aa <Vm::faultHandler(regs*)+0xdb>
c0019993:	80 fa 67             	cmp    dl,0x67
c0019996:	0f 84 3c 01 00 00    	je     c0019ad8 <Vm::faultHandler(regs*)+0x209>
c001999c:	80 fa 6c             	cmp    dl,0x6c
c001999f:	0f 84 5d 02 00 00    	je     c0019c02 <Vm::faultHandler(regs*)+0x333>
c00199a5:	e9 01 05 00 00       	jmp    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c00199aa:	80 fa 6f             	cmp    dl,0x6f
c00199ad:	0f 84 8b 03 00 00    	je     c0019d3e <Vm::faultHandler(regs*)+0x46f>
c00199b3:	0f 82 0f 03 00 00    	jb     c0019cc8 <Vm::faultHandler(regs*)+0x3f9>
c00199b9:	80 fa 9c             	cmp    dl,0x9c
c00199bc:	0f 84 23 01 00 00    	je     c0019ae5 <Vm::faultHandler(regs*)+0x216>
c00199c2:	e9 e4 04 00 00       	jmp    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c00199c7:	80 fa ec             	cmp    dl,0xec
c00199ca:	0f 84 7f 04 00 00    	je     c0019e4f <Vm::faultHandler(regs*)+0x580>
c00199d0:	77 7b                	ja     c0019a4d <Vm::faultHandler(regs*)+0x17e>
c00199d2:	80 fa e4             	cmp    dl,0xe4
c00199d5:	0f 84 fe 03 00 00    	je     c0019dd9 <Vm::faultHandler(regs*)+0x50a>
c00199db:	77 53                	ja     c0019a30 <Vm::faultHandler(regs*)+0x161>
c00199dd:	80 fa cd             	cmp    dl,0xcd
c00199e0:	0f 84 cd 01 00 00    	je     c0019bb3 <Vm::faultHandler(regs*)+0x2e4>
c00199e6:	80 fa cf             	cmp    dl,0xcf
c00199e9:	0f 85 bc 04 00 00    	jne    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c00199ef:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00199f2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00199f5:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00199f9:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00199fc:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a00:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a06:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a09:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a13:	66 c1 e8 09          	shr    ax,0x9
c0019a17:	83 e0 01             	and    eax,0x1
c0019a1a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a1d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a20:	83 c0 06             	add    eax,0x6
c0019a23:	25 ff ff 00 00       	and    eax,0xffff
c0019a28:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a2b:	e9 77 04 00 00       	jmp    c0019ea7 <Vm::faultHandler(regs*)+0x5d8>
c0019a30:	80 fa e6             	cmp    dl,0xe6
c0019a33:	0f 84 ea 03 00 00    	je     c0019e23 <Vm::faultHandler(regs*)+0x554>
c0019a39:	0f 82 b6 03 00 00    	jb     c0019df5 <Vm::faultHandler(regs*)+0x526>
c0019a3f:	80 fa e7             	cmp    dl,0xe7
c0019a42:	0f 84 f2 03 00 00    	je     c0019e3a <Vm::faultHandler(regs*)+0x56b>
c0019a48:	e9 5e 04 00 00       	jmp    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c0019a4d:	80 fa ef             	cmp    dl,0xef
c0019a50:	0f 84 3c 04 00 00    	je     c0019e92 <Vm::faultHandler(regs*)+0x5c3>
c0019a56:	77 28                	ja     c0019a80 <Vm::faultHandler(regs*)+0x1b1>
c0019a58:	80 fa ed             	cmp    dl,0xed
c0019a5b:	0f 84 0a 04 00 00    	je     c0019e6b <Vm::faultHandler(regs*)+0x59c>
c0019a61:	80 fa ee             	cmp    dl,0xee
c0019a64:	0f 85 41 04 00 00    	jne    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c0019a6a:	50                   	push   eax
c0019a6b:	50                   	push   eax
c0019a6c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a70:	50                   	push   eax
c0019a71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a75:	50                   	push   eax
c0019a76:	e8 00 fc ff ff       	call   c001967b <Vm::outbv(unsigned short, unsigned char)>
c0019a7b:	e9 0a 04 00 00       	jmp    c0019e8a <Vm::faultHandler(regs*)+0x5bb>
c0019a80:	80 fa fa             	cmp    dl,0xfa
c0019a83:	0f 84 5d 01 00 00    	je     c0019be6 <Vm::faultHandler(regs*)+0x317>
c0019a89:	80 fa fb             	cmp    dl,0xfb
c0019a8c:	0f 84 62 01 00 00    	je     c0019bf4 <Vm::faultHandler(regs*)+0x325>
c0019a92:	80 fa f3             	cmp    dl,0xf3
c0019a95:	0f 85 10 04 00 00    	jne    c0019eab <Vm::faultHandler(regs*)+0x5dc>
c0019a9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a9e:	e9 c3 fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019aa3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aa6:	b1 02                	mov    cl,0x2
c0019aa8:	e9 b9 fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019aad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab0:	b1 03                	mov    cl,0x3
c0019ab2:	e9 af fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019ab7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aba:	b1 04                	mov    cl,0x4
c0019abc:	e9 a5 fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019ac1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac4:	b1 05                	mov    cl,0x5
c0019ac6:	e9 9b fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019acb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ace:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019ad3:	e9 8e fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019ad8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019adb:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019ae0:	e9 81 fe ff ff       	jmp    c0019966 <Vm::faultHandler(regs*)+0x97>
c0019ae5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019ae8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019aec:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019af1:	74 30                	je     c0019b23 <Vm::faultHandler(regs*)+0x254>
c0019af3:	83 e9 04             	sub    ecx,0x4
c0019af6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019afc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b02:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b05:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b08:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b0e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b12:	0f 84 8c 03 00 00    	je     c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019b18:	80 ce 02             	or     dh,0x2
c0019b1b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b1e:	e9 81 03 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019b23:	83 e9 02             	sub    ecx,0x2
c0019b26:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b2c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b2f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b33:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b39:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b3d:	74 05                	je     c0019b44 <Vm::faultHandler(regs*)+0x275>
c0019b3f:	80 ce 02             	or     dh,0x2
c0019b42:	eb 03                	jmp    c0019b47 <Vm::faultHandler(regs*)+0x278>
c0019b44:	80 e6 fd             	and    dh,0xfd
c0019b47:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b4b:	e9 54 03 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019b50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b55:	74 2a                	je     c0019b81 <Vm::faultHandler(regs*)+0x2b2>
c0019b57:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b59:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b5f:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b65:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b70:	c1 e8 09             	shr    eax,0x9
c0019b73:	83 e0 01             	and    eax,0x1
c0019b76:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b79:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b7c:	83 c0 04             	add    eax,0x4
c0019b7f:	eb 25                	jmp    c0019ba6 <Vm::faultHandler(regs*)+0x2d7>
c0019b81:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b84:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b8a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019b90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b96:	66 c1 e8 09          	shr    ax,0x9
c0019b9a:	83 e0 01             	and    eax,0x1
c0019b9d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019ba0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ba3:	83 c0 02             	add    eax,0x2
c0019ba6:	25 ff ff 00 00       	and    eax,0xffff
c0019bab:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bae:	e9 f1 02 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019bb3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bb7:	3c ff                	cmp    al,0xff
c0019bb9:	75 10                	jne    c0019bcb <Vm::faultHandler(regs*)+0x2fc>
c0019bbb:	83 ec 0c             	sub    esp,0xc
c0019bbe:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bc1:	e8 86 f9 ff ff       	call   c001954c <Thr::terminateFromIRQ(int)>
c0019bc6:	e9 c2 02 00 00       	jmp    c0019e8d <Vm::faultHandler(regs*)+0x5be>
c0019bcb:	83 ec 0c             	sub    esp,0xc
c0019bce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bd6:	57                   	push   edi
c0019bd7:	50                   	push   eax
c0019bd8:	53                   	push   ebx
c0019bd9:	e8 f3 fb ff ff       	call   c00197d1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bde:	83 c4 20             	add    esp,0x20
c0019be1:	e9 c1 02 00 00       	jmp    c0019ea7 <Vm::faultHandler(regs*)+0x5d8>
c0019be6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019beb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019bef:	e9 b0 02 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019bf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bf9:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019bfd:	e9 a2 02 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019c02:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c07:	74 0d                	je     c0019c16 <Vm::faultHandler(regs*)+0x347>
c0019c09:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c10:	0f 87 e9 02 00 00    	ja     c0019eff <Vm::faultHandler(regs*)+0x630>
c0019c16:	83 ec 0c             	sub    esp,0xc
c0019c19:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c1c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c20:	50                   	push   eax
c0019c21:	e8 4f fa ff ff       	call   c0019675 <Vm::inbv(unsigned short)>
c0019c26:	83 c4 0c             	add    esp,0xc
c0019c29:	0f b6 c0             	movzx  eax,al
c0019c2c:	50                   	push   eax
c0019c2d:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c31:	0f b7 c9             	movzx  ecx,cx
c0019c34:	50                   	push   eax
c0019c35:	51                   	push   ecx
c0019c36:	e8 54 fc ff ff       	call   c001988f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c45:	74 03                	je     c0019c4a <Vm::faultHandler(regs*)+0x37b>
c0019c47:	48                   	dec    eax
c0019c48:	eb 01                	jmp    c0019c4b <Vm::faultHandler(regs*)+0x37c>
c0019c4a:	40                   	inc    eax
c0019c4b:	0f b7 c0             	movzx  eax,ax
c0019c4e:	eb 70                	jmp    c0019cc0 <Vm::faultHandler(regs*)+0x3f1>
c0019c50:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c56:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c5b:	74 0c                	je     c0019c69 <Vm::faultHandler(regs*)+0x39a>
c0019c5d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c63:	0f 87 96 02 00 00    	ja     c0019eff <Vm::faultHandler(regs*)+0x630>
c0019c69:	0f b7 c9             	movzx  ecx,cx
c0019c6c:	0f b7 f6             	movzx  esi,si
c0019c6f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c77:	74 20                	je     c0019c99 <Vm::faultHandler(regs*)+0x3ca>
c0019c79:	ed                   	in     eax,dx
c0019c7a:	55                   	push   ebp
c0019c7b:	50                   	push   eax
c0019c7c:	51                   	push   ecx
c0019c7d:	56                   	push   esi
c0019c7e:	e8 37 fc ff ff       	call   c00198ba <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c83:	83 c4 10             	add    esp,0x10
c0019c86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c8d:	74 05                	je     c0019c94 <Vm::faultHandler(regs*)+0x3c5>
c0019c8f:	83 e8 04             	sub    eax,0x4
c0019c92:	eb 27                	jmp    c0019cbb <Vm::faultHandler(regs*)+0x3ec>
c0019c94:	83 c0 04             	add    eax,0x4
c0019c97:	eb 22                	jmp    c0019cbb <Vm::faultHandler(regs*)+0x3ec>
c0019c99:	66 ed                	in     ax,dx
c0019c9b:	0f b7 c0             	movzx  eax,ax
c0019c9e:	57                   	push   edi
c0019c9f:	50                   	push   eax
c0019ca0:	51                   	push   ecx
c0019ca1:	56                   	push   esi
c0019ca2:	e8 fd fb ff ff       	call   c00198a4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019ca7:	83 c4 10             	add    esp,0x10
c0019caa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cb1:	74 05                	je     c0019cb8 <Vm::faultHandler(regs*)+0x3e9>
c0019cb3:	83 e8 02             	sub    eax,0x2
c0019cb6:	eb 03                	jmp    c0019cbb <Vm::faultHandler(regs*)+0x3ec>
c0019cb8:	83 c0 02             	add    eax,0x2
c0019cbb:	25 ff ff 00 00       	and    eax,0xffff
c0019cc0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019cc3:	e9 dc 01 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019cc8:	49                   	dec    ecx
c0019cc9:	80 f9 05             	cmp    cl,0x5
c0019ccc:	77 24                	ja     c0019cf2 <Vm::faultHandler(regs*)+0x423>
c0019cce:	0f b6 c9             	movzx  ecx,cl
c0019cd1:	ff 24 8d 38 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdc8]
c0019cd8:	0f b7 f5             	movzx  esi,bp
c0019cdb:	eb 15                	jmp    c0019cf2 <Vm::faultHandler(regs*)+0x423>
c0019cdd:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ce1:	eb 0f                	jmp    c0019cf2 <Vm::faultHandler(regs*)+0x423>
c0019ce3:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019ce7:	eb 09                	jmp    c0019cf2 <Vm::faultHandler(regs*)+0x423>
c0019ce9:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019ced:	eb 03                	jmp    c0019cf2 <Vm::faultHandler(regs*)+0x423>
c0019cef:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019cf2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019cf5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019cfa:	74 0b                	je     c0019d07 <Vm::faultHandler(regs*)+0x438>
c0019cfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d01:	0f 87 f8 01 00 00    	ja     c0019eff <Vm::faultHandler(regs*)+0x630>
c0019d07:	52                   	push   edx
c0019d08:	52                   	push   edx
c0019d09:	0f b7 c0             	movzx  eax,ax
c0019d0c:	50                   	push   eax
c0019d0d:	56                   	push   esi
c0019d0e:	e8 48 fb ff ff       	call   c001985b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d13:	59                   	pop    ecx
c0019d14:	5e                   	pop    esi
c0019d15:	0f b6 c0             	movzx  eax,al
c0019d18:	50                   	push   eax
c0019d19:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d1d:	50                   	push   eax
c0019d1e:	e8 58 f9 ff ff       	call   c001967b <Vm::outbv(unsigned short, unsigned char)>
c0019d23:	83 c4 10             	add    esp,0x10
c0019d26:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d2d:	74 03                	je     c0019d32 <Vm::faultHandler(regs*)+0x463>
c0019d2f:	48                   	dec    eax
c0019d30:	eb 01                	jmp    c0019d33 <Vm::faultHandler(regs*)+0x464>
c0019d32:	40                   	inc    eax
c0019d33:	0f b7 c0             	movzx  eax,ax
c0019d36:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d39:	e9 66 01 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019d3e:	49                   	dec    ecx
c0019d3f:	80 f9 05             	cmp    cl,0x5
c0019d42:	77 1f                	ja     c0019d63 <Vm::faultHandler(regs*)+0x494>
c0019d44:	0f b6 c9             	movzx  ecx,cl
c0019d47:	ff 24 8d 50 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdb0]
c0019d4e:	89 ee                	mov    esi,ebp
c0019d50:	eb 11                	jmp    c0019d63 <Vm::faultHandler(regs*)+0x494>
c0019d52:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d55:	eb 0c                	jmp    c0019d63 <Vm::faultHandler(regs*)+0x494>
c0019d57:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d5a:	eb 07                	jmp    c0019d63 <Vm::faultHandler(regs*)+0x494>
c0019d5c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d5f:	eb 02                	jmp    c0019d63 <Vm::faultHandler(regs*)+0x494>
c0019d61:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d63:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d66:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d6b:	74 0c                	je     c0019d79 <Vm::faultHandler(regs*)+0x4aa>
c0019d6d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d73:	0f 87 86 01 00 00    	ja     c0019eff <Vm::faultHandler(regs*)+0x630>
c0019d79:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d7c:	0f b7 d6             	movzx  edx,si
c0019d7f:	81 e7 00 04 00 00    	and    edi,0x400
c0019d85:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d88:	0f b7 c1             	movzx  eax,cx
c0019d8b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d90:	74 1d                	je     c0019daf <Vm::faultHandler(regs*)+0x4e0>
c0019d92:	55                   	push   ebp
c0019d93:	55                   	push   ebp
c0019d94:	50                   	push   eax
c0019d95:	52                   	push   edx
c0019d96:	e8 e3 fa ff ff       	call   c001987e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	89 f2                	mov    edx,esi
c0019da0:	ef                   	out    dx,eax
c0019da1:	85 ff                	test   edi,edi
c0019da3:	74 05                	je     c0019daa <Vm::faultHandler(regs*)+0x4db>
c0019da5:	83 e9 04             	sub    ecx,0x4
c0019da8:	eb 21                	jmp    c0019dcb <Vm::faultHandler(regs*)+0x4fc>
c0019daa:	83 c1 04             	add    ecx,0x4
c0019dad:	eb 1c                	jmp    c0019dcb <Vm::faultHandler(regs*)+0x4fc>
c0019daf:	55                   	push   ebp
c0019db0:	55                   	push   ebp
c0019db1:	50                   	push   eax
c0019db2:	52                   	push   edx
c0019db3:	e8 b4 fa ff ff       	call   c001986c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019db8:	83 c4 10             	add    esp,0x10
c0019dbb:	89 f2                	mov    edx,esi
c0019dbd:	66 ef                	out    dx,ax
c0019dbf:	85 ff                	test   edi,edi
c0019dc1:	74 05                	je     c0019dc8 <Vm::faultHandler(regs*)+0x4f9>
c0019dc3:	83 e9 02             	sub    ecx,0x2
c0019dc6:	eb 03                	jmp    c0019dcb <Vm::faultHandler(regs*)+0x4fc>
c0019dc8:	83 c1 02             	add    ecx,0x2
c0019dcb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019dd1:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019dd4:	e9 cb 00 00 00       	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019dd9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019de0:	83 ec 0c             	sub    esp,0xc
c0019de3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019de7:	50                   	push   eax
c0019de8:	e8 88 f8 ff ff       	call   c0019675 <Vm::inbv(unsigned short)>
c0019ded:	0f b6 c0             	movzx  eax,al
c0019df0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019df3:	eb 3f                	jmp    c0019e34 <Vm::faultHandler(regs*)+0x565>
c0019df5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dfa:	74 07                	je     c0019e03 <Vm::faultHandler(regs*)+0x534>
c0019dfc:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e00:	ed                   	in     eax,dx
c0019e01:	eb 14                	jmp    c0019e17 <Vm::faultHandler(regs*)+0x548>
c0019e03:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e06:	66 31 c9             	xor    cx,cx
c0019e09:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e0c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e10:	66 ed                	in     ax,dx
c0019e12:	0f b7 c0             	movzx  eax,ax
c0019e15:	09 c8                	or     eax,ecx
c0019e17:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e1e:	e9 84 00 00 00       	jmp    c0019ea7 <Vm::faultHandler(regs*)+0x5d8>
c0019e23:	52                   	push   edx
c0019e24:	52                   	push   edx
c0019e25:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e29:	50                   	push   eax
c0019e2a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e2e:	50                   	push   eax
c0019e2f:	e8 47 f8 ff ff       	call   c001967b <Vm::outbv(unsigned short, unsigned char)>
c0019e34:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e38:	eb 53                	jmp    c0019e8d <Vm::faultHandler(regs*)+0x5be>
c0019e3a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e3d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e41:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e46:	74 03                	je     c0019e4b <Vm::faultHandler(regs*)+0x57c>
c0019e48:	ef                   	out    dx,eax
c0019e49:	eb cf                	jmp    c0019e1a <Vm::faultHandler(regs*)+0x54b>
c0019e4b:	66 ef                	out    dx,ax
c0019e4d:	eb cb                	jmp    c0019e1a <Vm::faultHandler(regs*)+0x54b>
c0019e4f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e5d:	50                   	push   eax
c0019e5e:	e8 12 f8 ff ff       	call   c0019675 <Vm::inbv(unsigned short)>
c0019e63:	0f b6 c0             	movzx  eax,al
c0019e66:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e69:	eb 1f                	jmp    c0019e8a <Vm::faultHandler(regs*)+0x5bb>
c0019e6b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e73:	74 03                	je     c0019e78 <Vm::faultHandler(regs*)+0x5a9>
c0019e75:	ed                   	in     eax,dx
c0019e76:	eb 0d                	jmp    c0019e85 <Vm::faultHandler(regs*)+0x5b6>
c0019e78:	66 ed                	in     ax,dx
c0019e7a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e7d:	66 31 d2             	xor    dx,dx
c0019e80:	0f b7 c0             	movzx  eax,ax
c0019e83:	09 d0                	or     eax,edx
c0019e85:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e88:	eb 1a                	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019e8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e8d:	83 c4 10             	add    esp,0x10
c0019e90:	eb 15                	jmp    c0019ea7 <Vm::faultHandler(regs*)+0x5d8>
c0019e92:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e95:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e9d:	74 03                	je     c0019ea2 <Vm::faultHandler(regs*)+0x5d3>
c0019e9f:	ef                   	out    dx,eax
c0019ea0:	eb 02                	jmp    c0019ea4 <Vm::faultHandler(regs*)+0x5d5>
c0019ea2:	66 ef                	out    dx,ax
c0019ea4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ea7:	b0 01                	mov    al,0x1
c0019ea9:	eb 56                	jmp    c0019f01 <Vm::faultHandler(regs*)+0x632>
c0019eab:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019eaf:	50                   	push   eax
c0019eb0:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019eb4:	50                   	push   eax
c0019eb5:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019eb9:	50                   	push   eax
c0019eba:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ebe:	50                   	push   eax
c0019ebf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ec3:	50                   	push   eax
c0019ec4:	52                   	push   edx
c0019ec5:	52                   	push   edx
c0019ec6:	68 09 32 02 c0       	push   0xc0023209
c0019ecb:	e8 35 53 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c0019ed0:	83 c4 20             	add    esp,0x20
c0019ed3:	83 ec 0c             	sub    esp,0xc
c0019ed6:	6a 60                	push   0x60
c0019ed8:	e8 98 f7 ff ff       	call   c0019675 <Vm::inbv(unsigned short)>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	3c 1c                	cmp    al,0x1c
c0019ee2:	74 04                	je     c0019ee8 <Vm::faultHandler(regs*)+0x619>
c0019ee4:	3c 5a                	cmp    al,0x5a
c0019ee6:	75 eb                	jne    c0019ed3 <Vm::faultHandler(regs*)+0x604>
c0019ee8:	3c 1c                	cmp    al,0x1c
c0019eea:	74 04                	je     c0019ef0 <Vm::faultHandler(regs*)+0x621>
c0019eec:	3c 5a                	cmp    al,0x5a
c0019eee:	75 0f                	jne    c0019eff <Vm::faultHandler(regs*)+0x630>
c0019ef0:	83 ec 0c             	sub    esp,0xc
c0019ef3:	6a 60                	push   0x60
c0019ef5:	e8 7b f7 ff ff       	call   c0019675 <Vm::inbv(unsigned short)>
c0019efa:	83 c4 10             	add    esp,0x10
c0019efd:	eb e9                	jmp    c0019ee8 <Vm::faultHandler(regs*)+0x619>
c0019eff:	31 c0                	xor    eax,eax
c0019f01:	83 c4 1c             	add    esp,0x1c
c0019f04:	5b                   	pop    ebx
c0019f05:	5e                   	pop    esi
c0019f06:	5f                   	pop    edi
c0019f07:	5d                   	pop    ebp
c0019f08:	c3                   	ret    
c0019f09:	90                   	nop

c0019f0a <FAT::getName()>:
c0019f0a:	b8 68 32 02 c0       	mov    eax,0xc0023268
c0019f0f:	c3                   	ret    

c0019f10 <FAT::tell(void*, unsigned long long*)>:
c0019f10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f15:	75 06                	jne    c0019f1d <FAT::tell(void*, unsigned long long*)+0xd>
c0019f17:	b8 04 00 00 00       	mov    eax,0x4
c0019f1c:	c3                   	ret    
c0019f1d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f22:	75 06                	jne    c0019f2a <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f24:	b8 04 00 00 00       	mov    eax,0x4
c0019f29:	c3                   	ret    
c0019f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f2e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f31:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f38:	89 01                	mov    DWORD PTR [ecx],eax
c0019f3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f3d:	b8 00 00 00 00       	mov    eax,0x0
c0019f42:	c3                   	ret    
c0019f43:	90                   	nop

c0019f44 <FAT::stat(void*, unsigned long long*)>:
c0019f44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f49:	75 06                	jne    c0019f51 <FAT::stat(void*, unsigned long long*)+0xd>
c0019f4b:	b8 04 00 00 00       	mov    eax,0x4
c0019f50:	c3                   	ret    
c0019f51:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f56:	75 06                	jne    c0019f5e <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f58:	b8 04 00 00 00       	mov    eax,0x4
c0019f5d:	c3                   	ret    
c0019f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f62:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f6c:	89 01                	mov    DWORD PTR [ecx],eax
c0019f6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f71:	b8 00 00 00 00       	mov    eax,0x0
c0019f76:	c3                   	ret    
c0019f77:	90                   	nop

c0019f78 <FAT::~FAT()>:
c0019f78:	83 ec 0c             	sub    esp,0xc
c0019f7b:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c0019f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f84:	89 10                	mov    DWORD PTR [eax],edx
c0019f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8a:	83 ec 0c             	sub    esp,0xc
c0019f8d:	50                   	push   eax
c0019f8e:	e8 a3 55 ff ff       	call   c000f536 <Filesystem::~Filesystem()>
c0019f93:	83 c4 10             	add    esp,0x10
c0019f96:	90                   	nop
c0019f97:	83 c4 0c             	add    esp,0xc
c0019f9a:	c3                   	ret    
c0019f9b:	90                   	nop

c0019f9c <FAT::~FAT()>:
c0019f9c:	83 ec 0c             	sub    esp,0xc
c0019f9f:	83 ec 0c             	sub    esp,0xc
c0019fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fa6:	e8 cd ff ff ff       	call   c0019f78 <FAT::~FAT()>
c0019fab:	83 c4 10             	add    esp,0x10
c0019fae:	83 ec 08             	sub    esp,0x8
c0019fb1:	6a 08                	push   0x8
c0019fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fb7:	e8 23 51 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0019fbc:	83 c4 10             	add    esp,0x10
c0019fbf:	83 c4 0c             	add    esp,0xc
c0019fc2:	c3                   	ret    
c0019fc3:	90                   	nop

c0019fc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fc4:	83 ec 1c             	sub    esp,0x1c
c0019fc7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fce:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fd7:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c0019fde:	83 f8 ff             	cmp    eax,0xffffffff
c0019fe1:	75 34                	jne    c001a017 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019fe3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019fe7:	88 c2                	mov    dl,al
c0019fe9:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c0019fee:	01 d0                	add    eax,edx
c0019ff0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ff4:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c0019ffa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ffe:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a005:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a00a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a00e:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a015:	eb 17                	jmp    c001a02e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a017:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a01b:	88 c2                	mov    dl,al
c001a01d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a021:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a028:	01 d0                	add    eax,edx
c001a02a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a02e:	83 ec 04             	sub    esp,0x4
c001a031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a039:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a03d:	50                   	push   eax
c001a03e:	e8 85 ca fe ff       	call   c0006ac8 <f_getlabel>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a04a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a04f:	75 07                	jne    c001a058 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a051:	b8 00 00 00 00       	mov    eax,0x0
c001a056:	eb 05                	jmp    c001a05d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a058:	b8 01 00 00 00       	mov    eax,0x1
c001a05d:	83 c4 1c             	add    esp,0x1c
c001a060:	c3                   	ret    
c001a061:	90                   	nop

c001a062 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a062:	57                   	push   edi
c001a063:	83 ec 58             	sub    esp,0x58
c001a066:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a06e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a072:	b8 00 00 00 00       	mov    eax,0x0
c001a077:	b9 0f 00 00 00       	mov    ecx,0xf
c001a07c:	fc                   	cld    
c001a07d:	89 d7                	mov    edi,edx
c001a07f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a081:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a085:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a08c:	83 f8 ff             	cmp    eax,0xffffffff
c001a08f:	75 34                	jne    c001a0c5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a091:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a095:	88 c2                	mov    dl,al
c001a097:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a09c:	01 d0                	add    eax,edx
c001a09e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0a2:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a0a8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0ac:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a0b3:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a0b8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0bc:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a0c3:	eb 17                	jmp    c001a0dc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0c5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0c9:	88 c2                	mov    dl,al
c001a0cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0cf:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a0d6:	01 d0                	add    eax,edx
c001a0d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0dc:	83 ec 08             	sub    esp,0x8
c001a0df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0e7:	50                   	push   eax
c001a0e8:	e8 1e 67 fe ff       	call   c000080b <strcat>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f7:	50                   	push   eax
c001a0f8:	e8 bf cb fe ff       	call   c0006cbc <f_setlabel>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a104:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a109:	75 07                	jne    c001a112 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a10b:	b8 00 00 00 00       	mov    eax,0x0
c001a110:	eb 05                	jmp    c001a117 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a112:	b8 01 00 00 00       	mov    eax,0x1
c001a117:	83 c4 58             	add    esp,0x58
c001a11a:	5f                   	pop    edi
c001a11b:	c3                   	ret    

c001a11c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a11c:	83 ec 2c             	sub    esp,0x2c
c001a11f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a127:	83 ec 08             	sub    esp,0x8
c001a12a:	68 8c 32 02 c0       	push   0xc002328c
c001a12f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a133:	e8 6d 66 fe ff       	call   c00007a5 <strcmp>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	85 c0                	test   eax,eax
c001a13d:	0f 94 c0             	sete   al
c001a140:	84 c0                	test   al,al
c001a142:	74 0d                	je     c001a151 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a144:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a14c:	e9 a6 00 00 00       	jmp    c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a151:	83 ec 08             	sub    esp,0x8
c001a154:	68 7e 32 02 c0       	push   0xc002327e
c001a159:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a15d:	e8 43 66 fe ff       	call   c00007a5 <strcmp>
c001a162:	83 c4 10             	add    esp,0x10
c001a165:	85 c0                	test   eax,eax
c001a167:	0f 94 c0             	sete   al
c001a16a:	84 c0                	test   al,al
c001a16c:	74 0a                	je     c001a178 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a16e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a176:	eb 7f                	jmp    c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a178:	83 ec 08             	sub    esp,0x8
c001a17b:	68 84 32 02 c0       	push   0xc0023284
c001a180:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a184:	e8 1c 66 fe ff       	call   c00007a5 <strcmp>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	85 c0                	test   eax,eax
c001a18e:	0f 94 c0             	sete   al
c001a191:	84 c0                	test   al,al
c001a193:	74 0a                	je     c001a19f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a195:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a19d:	eb 58                	jmp    c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a19f:	83 ec 08             	sub    esp,0x8
c001a1a2:	68 4c 05 02 c0       	push   0xc002054c
c001a1a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1ab:	e8 f5 65 fe ff       	call   c00007a5 <strcmp>
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	85 c0                	test   eax,eax
c001a1b5:	0f 94 c0             	sete   al
c001a1b8:	84 c0                	test   al,al
c001a1ba:	74 0a                	je     c001a1c6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1bc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1c4:	eb 31                	jmp    c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1c6:	83 ec 08             	sub    esp,0x8
c001a1c9:	68 8a 32 02 c0       	push   0xc002328a
c001a1ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1d2:	e8 ce 65 fe ff       	call   c00007a5 <strcmp>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	85 c0                	test   eax,eax
c001a1dc:	0f 94 c0             	sete   al
c001a1df:	84 c0                	test   al,al
c001a1e1:	74 0a                	je     c001a1ed <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1e3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1eb:	eb 0a                	jmp    c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1ed:	b8 08 00 00 00       	mov    eax,0x8
c001a1f2:	e9 04 01 00 00       	jmp    c001a2fb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1f7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a1fe:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a207:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a20e:	83 f8 ff             	cmp    eax,0xffffffff
c001a211:	75 34                	jne    c001a247 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a213:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a217:	88 c2                	mov    dl,al
c001a219:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a21e:	01 d0                	add    eax,edx
c001a220:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a224:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a22a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a22e:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a235:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a23a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a23e:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a245:	eb 17                	jmp    c001a25e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a247:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a24b:	88 c2                	mov    dl,al
c001a24d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a251:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a258:	01 d0                	add    eax,edx
c001a25a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a25e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a262:	88 04 24             	mov    BYTE PTR [esp],al
c001a265:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a269:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a26d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a275:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a27a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a282:	83 ec 0c             	sub    esp,0xc
c001a285:	68 00 20 00 00       	push   0x2000
c001a28a:	e8 44 1d ff ff       	call   c000bfd3 <malloc>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a296:	68 00 20 00 00       	push   0x2000
c001a29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a29f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2a3:	50                   	push   eax
c001a2a4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2a8:	50                   	push   eax
c001a2a9:	e8 59 ce fe ff       	call   c0007107 <f_mkfs>
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2ba:	75 07                	jne    c001a2c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2bc:	b8 00 00 00 00       	mov    eax,0x0
c001a2c1:	eb 38                	jmp    c001a2fb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2c3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2c8:	75 17                	jne    c001a2e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2ca:	83 ec 0c             	sub    esp,0xc
c001a2cd:	68 bc 32 02 c0       	push   0xc00232bc
c001a2d2:	e8 2e 4f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001a2d7:	83 c4 10             	add    esp,0x10
c001a2da:	b8 09 00 00 00       	mov    eax,0x9
c001a2df:	eb 1a                	jmp    c001a2fb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2e5:	83 ec 08             	sub    esp,0x8
c001a2e8:	50                   	push   eax
c001a2e9:	68 90 32 02 c0       	push   0xc0023290
c001a2ee:	e8 12 4f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	b8 01 00 00 00       	mov    eax,0x1
c001a2fb:	83 c4 2c             	add    esp,0x2c
c001a2fe:	c3                   	ret    
c001a2ff:	90                   	nop

c001a300 <FAT::tryMount(LogicalDisk*, int)>:
c001a300:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a306:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a30b:	83 f8 14             	cmp    eax,0x14
c001a30e:	75 17                	jne    c001a327 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a310:	83 ec 0c             	sub    esp,0xc
c001a313:	68 a2 32 02 c0       	push   0xc00232a2
c001a318:	e8 17 b7 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	b0 00                	mov    al,0x0
c001a322:	e9 d7 01 00 00       	jmp    c001a4fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a327:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a32e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a334:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a33a:	3d 00 02 00 00       	cmp    eax,0x200
c001a33f:	74 07                	je     c001a348 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a341:	b0 00                	mov    al,0x0
c001a343:	e9 b6 01 00 00       	jmp    c001a4fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a348:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a350:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a357:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a35e:	83 f8 ff             	cmp    eax,0xffffffff
c001a361:	74 07                	je     c001a36a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a363:	b0 01                	mov    al,0x1
c001a365:	e9 94 01 00 00       	jmp    c001a4fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a36a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a374:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a37c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a383:	88 c2                	mov    dl,al
c001a385:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a38a:	01 d0                	add    eax,edx
c001a38c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a393:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a399:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3a0:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a3a7:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a3ac:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3b3:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a3ba:	83 ec 0c             	sub    esp,0xc
c001a3bd:	68 54 02 00 00       	push   0x254
c001a3c2:	e8 0c 1c ff ff       	call   c000bfd3 <malloc>
c001a3c7:	83 c4 10             	add    esp,0x10
c001a3ca:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3d1:	83 ec 04             	sub    esp,0x4
c001a3d4:	6a 00                	push   0x0
c001a3d6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3dd:	50                   	push   eax
c001a3de:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3e5:	e8 0c a9 fe ff       	call   c0004cf6 <f_mount>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3f4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a3fc:	74 19                	je     c001a417 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a3fe:	83 ec 0c             	sub    esp,0xc
c001a401:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a408:	e8 e6 1b ff ff       	call   c000bff3 <rfree>
c001a40d:	83 c4 10             	add    esp,0x10
c001a410:	b0 00                	mov    al,0x0
c001a412:	e9 e7 00 00 00       	jmp    c001a4fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a417:	83 ec 04             	sub    esp,0x4
c001a41a:	68 00 01 00 00       	push   0x100
c001a41f:	6a 00                	push   0x0
c001a421:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a428:	50                   	push   eax
c001a429:	e8 87 62 fe ff       	call   c00006b5 <memset>
c001a42e:	83 c4 10             	add    esp,0x10
c001a431:	83 ec 08             	sub    esp,0x8
c001a434:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a43b:	50                   	push   eax
c001a43c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a443:	50                   	push   eax
c001a444:	e8 c2 63 fe ff       	call   c000080b <strcat>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	83 ec 08             	sub    esp,0x8
c001a44f:	68 b0 32 02 c0       	push   0xc00232b0
c001a454:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a45b:	50                   	push   eax
c001a45c:	e8 aa 63 fe ff       	call   c000080b <strcat>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	83 ec 04             	sub    esp,0x4
c001a467:	6a 01                	push   0x1
c001a469:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a470:	50                   	push   eax
c001a471:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a475:	50                   	push   eax
c001a476:	e8 dd a8 fe ff       	call   c0004d58 <f_open>
c001a47b:	83 c4 10             	add    esp,0x10
c001a47e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a485:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a48c:	85 c0                	test   eax,eax
c001a48e:	74 0a                	je     c001a49a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a490:	78 2d                	js     c001a4bf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a492:	83 e8 04             	sub    eax,0x4
c001a495:	83 f8 01             	cmp    eax,0x1
c001a498:	77 25                	ja     c001a4bf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a49a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4a2:	83 ec 0c             	sub    esp,0xc
c001a4a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4a9:	50                   	push   eax
c001a4aa:	e8 fb b3 fe ff       	call   c00058aa <f_close>
c001a4af:	83 c4 10             	add    esp,0x10
c001a4b2:	90                   	nop
c001a4b3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4bb:	74 3a                	je     c001a4f7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4bd:	eb 2d                	jmp    c001a4ec <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4bf:	83 ec 0c             	sub    esp,0xc
c001a4c2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4c9:	e8 25 1b ff ff       	call   c000bff3 <rfree>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	83 ec 04             	sub    esp,0x4
c001a4d4:	6a 00                	push   0x0
c001a4d6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4dd:	50                   	push   eax
c001a4de:	6a 00                	push   0x0
c001a4e0:	e8 11 a8 fe ff       	call   c0004cf6 <f_mount>
c001a4e5:	83 c4 10             	add    esp,0x10
c001a4e8:	b0 00                	mov    al,0x0
c001a4ea:	eb 12                	jmp    c001a4fe <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4ec:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a4f1:	40                   	inc    eax
c001a4f2:	a3 00 5c 02 c0       	mov    ds:0xc0025c00,eax
c001a4f7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a4fe:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a504:	c3                   	ret    
c001a505:	90                   	nop

c001a506 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a506:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a50c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a514:	74 0a                	je     c001a520 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a516:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a51e:	75 0a                	jne    c001a52a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a520:	b8 04 00 00 00       	mov    eax,0x4
c001a525:	e9 dd 00 00 00       	jmp    c001a607 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a52a:	83 ec 08             	sub    esp,0x8
c001a52d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a534:	50                   	push   eax
c001a535:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a53c:	e8 21 b9 fe ff       	call   c0005e62 <f_readdir>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a54b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a551:	83 ec 0c             	sub    esp,0xc
c001a554:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a55b:	83 c0 1a             	add    eax,0x1a
c001a55e:	50                   	push   eax
c001a55f:	e8 6e 61 fe ff       	call   c00006d2 <strlen>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	ba 00 00 00 00       	mov    edx,0x0
c001a56c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a570:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a574:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a57b:	25 ff 00 00 00       	and    eax,0xff
c001a580:	83 e0 10             	and    eax,0x10
c001a583:	74 07                	je     c001a58c <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a585:	b8 02 00 00 00       	mov    eax,0x2
c001a58a:	eb 05                	jmp    c001a591 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a58c:	b8 01 00 00 00       	mov    eax,0x1
c001a591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a595:	83 ec 08             	sub    esp,0x8
c001a598:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a59f:	83 c0 1a             	add    eax,0x1a
c001a5a2:	50                   	push   eax
c001a5a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5a7:	83 c0 10             	add    eax,0x10
c001a5aa:	50                   	push   eax
c001a5ab:	e8 a4 61 fe ff       	call   c0000754 <strcpy>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	83 ec 04             	sub    esp,0x4
c001a5b6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5c1:	50                   	push   eax
c001a5c2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5c9:	e8 b1 60 fe ff       	call   c000067f <memcpy>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5de:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5e5:	84 c0                	test   al,al
c001a5e7:	75 07                	jne    c001a5f0 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5e9:	b8 07 00 00 00       	mov    eax,0x7
c001a5ee:	eb 17                	jmp    c001a607 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5f0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a5f7:	85 c0                	test   eax,eax
c001a5f9:	75 07                	jne    c001a602 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a5fb:	b8 00 00 00 00       	mov    eax,0x0
c001a600:	eb 05                	jmp    c001a607 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a602:	b8 01 00 00 00       	mov    eax,0x1
c001a607:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a60d:	c3                   	ret    

c001a60e <FAT::read(void*, unsigned long, void*, int*)>:
c001a60e:	83 ec 1c             	sub    esp,0x1c
c001a611:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a616:	74 07                	je     c001a61f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a618:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a61d:	75 07                	jne    c001a626 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a61f:	b8 04 00 00 00       	mov    eax,0x4
c001a624:	eb 3d                	jmp    c001a663 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a626:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a62a:	50                   	push   eax
c001a62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a62f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a633:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a637:	e8 58 ab fe ff       	call   c0005194 <f_read>
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a643:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a647:	89 c2                	mov    edx,eax
c001a649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a64d:	89 10                	mov    DWORD PTR [eax],edx
c001a64f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a653:	85 c0                	test   eax,eax
c001a655:	75 07                	jne    c001a65e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a657:	b8 00 00 00 00       	mov    eax,0x0
c001a65c:	eb 05                	jmp    c001a663 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a65e:	b8 01 00 00 00       	mov    eax,0x1
c001a663:	83 c4 1c             	add    esp,0x1c
c001a666:	c3                   	ret    
c001a667:	90                   	nop

c001a668 <FAT::write(void*, unsigned long, void*, int*)>:
c001a668:	83 ec 1c             	sub    esp,0x1c
c001a66b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a670:	74 07                	je     c001a679 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a672:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a677:	75 07                	jne    c001a680 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a679:	b8 04 00 00 00       	mov    eax,0x4
c001a67e:	eb 3d                	jmp    c001a6bd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a680:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a684:	50                   	push   eax
c001a685:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a689:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a68d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a691:	e8 7e ad fe ff       	call   c0005414 <f_write>
c001a696:	83 c4 10             	add    esp,0x10
c001a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6a1:	89 c2                	mov    edx,eax
c001a6a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6a7:	89 10                	mov    DWORD PTR [eax],edx
c001a6a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6ad:	85 c0                	test   eax,eax
c001a6af:	75 07                	jne    c001a6b8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6b1:	b8 00 00 00 00       	mov    eax,0x0
c001a6b6:	eb 05                	jmp    c001a6bd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6b8:	b8 01 00 00 00       	mov    eax,0x1
c001a6bd:	83 c4 1c             	add    esp,0x1c
c001a6c0:	c3                   	ret    
c001a6c1:	90                   	nop

c001a6c2 <FAT::close(void*)>:
c001a6c2:	83 ec 1c             	sub    esp,0x1c
c001a6c5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6ca:	75 07                	jne    c001a6d3 <FAT::close(void*)+0x11>
c001a6cc:	b8 04 00 00 00       	mov    eax,0x4
c001a6d1:	eb 36                	jmp    c001a709 <FAT::close(void*)+0x47>
c001a6d3:	83 ec 0c             	sub    esp,0xc
c001a6d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6da:	e8 cb b1 fe ff       	call   c00058aa <f_close>
c001a6df:	83 c4 10             	add    esp,0x10
c001a6e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6e6:	83 ec 0c             	sub    esp,0xc
c001a6e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6ed:	e8 f1 18 ff ff       	call   c000bfe3 <free>
c001a6f2:	83 c4 10             	add    esp,0x10
c001a6f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6f9:	85 c0                	test   eax,eax
c001a6fb:	75 07                	jne    c001a704 <FAT::close(void*)+0x42>
c001a6fd:	b8 00 00 00 00       	mov    eax,0x0
c001a702:	eb 05                	jmp    c001a709 <FAT::close(void*)+0x47>
c001a704:	b8 01 00 00 00       	mov    eax,0x1
c001a709:	83 c4 1c             	add    esp,0x1c
c001a70c:	c3                   	ret    
c001a70d:	90                   	nop

c001a70e <FAT::closeDir(void*)>:
c001a70e:	83 ec 1c             	sub    esp,0x1c
c001a711:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a716:	75 07                	jne    c001a71f <FAT::closeDir(void*)+0x11>
c001a718:	b8 04 00 00 00       	mov    eax,0x4
c001a71d:	eb 36                	jmp    c001a755 <FAT::closeDir(void*)+0x47>
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a726:	e8 15 b7 fe ff       	call   c0005e40 <f_closedir>
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a739:	e8 a5 18 ff ff       	call   c000bfe3 <free>
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a745:	85 c0                	test   eax,eax
c001a747:	75 07                	jne    c001a750 <FAT::closeDir(void*)+0x42>
c001a749:	b8 00 00 00 00       	mov    eax,0x0
c001a74e:	eb 05                	jmp    c001a755 <FAT::closeDir(void*)+0x47>
c001a750:	b8 01 00 00 00       	mov    eax,0x1
c001a755:	83 c4 1c             	add    esp,0x1c
c001a758:	c3                   	ret    
c001a759:	90                   	nop

c001a75a <FAT::seek(void*, unsigned long long)>:
c001a75a:	83 ec 2c             	sub    esp,0x2c
c001a75d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a765:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a769:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a76d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a772:	75 07                	jne    c001a77b <FAT::seek(void*, unsigned long long)+0x21>
c001a774:	b8 04 00 00 00       	mov    eax,0x4
c001a779:	eb 2f                	jmp    c001a7aa <FAT::seek(void*, unsigned long long)+0x50>
c001a77b:	83 ec 04             	sub    esp,0x4
c001a77e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a782:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a786:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a78a:	e8 4a b1 fe ff       	call   c00058d9 <f_lseek>
c001a78f:	83 c4 10             	add    esp,0x10
c001a792:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a796:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a79a:	85 c0                	test   eax,eax
c001a79c:	75 07                	jne    c001a7a5 <FAT::seek(void*, unsigned long long)+0x4b>
c001a79e:	b8 00 00 00 00       	mov    eax,0x0
c001a7a3:	eb 05                	jmp    c001a7aa <FAT::seek(void*, unsigned long long)+0x50>
c001a7a5:	b8 01 00 00 00       	mov    eax,0x1
c001a7aa:	83 c4 2c             	add    esp,0x2c
c001a7ad:	c3                   	ret    

c001a7ae <fatWrapperReadDisk>:
c001a7ae:	83 ec 1c             	sub    esp,0x1c
c001a7b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7cc:	25 ff 00 00 00       	and    eax,0xff
c001a7d1:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a7d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e3:	52                   	push   edx
c001a7e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ec:	50                   	push   eax
c001a7ed:	e8 6e 80 ff ff       	call   c0012860 <LogicalDisk::read(unsigned long long, int, void*)>
c001a7f2:	83 c4 20             	add    esp,0x20
c001a7f5:	83 c4 1c             	add    esp,0x1c
c001a7f8:	c3                   	ret    

c001a7f9 <fatWrapperWriteDisk>:
c001a7f9:	83 ec 1c             	sub    esp,0x1c
c001a7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a800:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a808:	89 04 24             	mov    DWORD PTR [esp],eax
c001a80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a80f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a813:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a817:	25 ff 00 00 00       	and    eax,0xff
c001a81c:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a823:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a827:	83 ec 0c             	sub    esp,0xc
c001a82a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a82e:	52                   	push   edx
c001a82f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a837:	50                   	push   eax
c001a838:	e8 8f 80 ff ff       	call   c00128cc <LogicalDisk::write(unsigned long long, int, void*)>
c001a83d:	83 c4 20             	add    esp,0x20
c001a840:	83 c4 1c             	add    esp,0x1c
c001a843:	c3                   	ret    

c001a844 <fatWrapperIoctl>:
c001a844:	53                   	push   ebx
c001a845:	83 ec 28             	sub    esp,0x28
c001a848:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a84c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a850:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a854:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a858:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a85d:	75 35                	jne    c001a894 <fatWrapperIoctl+0x50>
c001a85f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a863:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a867:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a86b:	25 ff 00 00 00       	and    eax,0xff
c001a870:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a877:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a87d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a883:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a887:	66 89 02             	mov    WORD PTR [edx],ax
c001a88a:	b8 00 00 00 00       	mov    eax,0x0
c001a88f:	e9 bb 00 00 00       	jmp    c001a94f <fatWrapperIoctl+0x10b>
c001a894:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a899:	75 73                	jne    c001a90e <fatWrapperIoctl+0xca>
c001a89b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a89f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8a7:	25 ff 00 00 00       	and    eax,0xff
c001a8ac:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a8b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8b9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8bf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8c5:	89 c8                	mov    eax,ecx
c001a8c7:	89 da                	mov    edx,ebx
c001a8c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8cd:	c1 e0 0a             	shl    eax,0xa
c001a8d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8d4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8da:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c001a8e1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8e7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8ed:	89 cb                	mov    ebx,ecx
c001a8ef:	c1 fb 1f             	sar    ebx,0x1f
c001a8f2:	53                   	push   ebx
c001a8f3:	51                   	push   ecx
c001a8f4:	52                   	push   edx
c001a8f5:	50                   	push   eax
c001a8f6:	e8 01 4c 00 00       	call   c001f4fc <__udivdi3>
c001a8fb:	83 c4 10             	add    esp,0x10
c001a8fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a902:	89 01                	mov    DWORD PTR [ecx],eax
c001a904:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a907:	b8 00 00 00 00       	mov    eax,0x0
c001a90c:	eb 41                	jmp    c001a94f <fatWrapperIoctl+0x10b>
c001a90e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a913:	75 07                	jne    c001a91c <fatWrapperIoctl+0xd8>
c001a915:	b8 00 00 00 00       	mov    eax,0x0
c001a91a:	eb 33                	jmp    c001a94f <fatWrapperIoctl+0x10b>
c001a91c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a921:	75 19                	jne    c001a93c <fatWrapperIoctl+0xf8>
c001a923:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a927:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a92b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a92f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a935:	b8 00 00 00 00       	mov    eax,0x0
c001a93a:	eb 13                	jmp    c001a94f <fatWrapperIoctl+0x10b>
c001a93c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a941:	75 07                	jne    c001a94a <fatWrapperIoctl+0x106>
c001a943:	b8 00 00 00 00       	mov    eax,0x0
c001a948:	eb 05                	jmp    c001a94f <fatWrapperIoctl+0x10b>
c001a94a:	b8 04 00 00 00       	mov    eax,0x4
c001a94f:	83 c4 28             	add    esp,0x28
c001a952:	5b                   	pop    ebx
c001a953:	c3                   	ret    

c001a954 <FAT::FAT()>:
c001a954:	83 ec 1c             	sub    esp,0x1c
c001a957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95b:	83 ec 0c             	sub    esp,0xc
c001a95e:	50                   	push   eax
c001a95f:	e8 ae 4b ff ff       	call   c000f512 <Filesystem::Filesystem()>
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001a96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a970:	89 10                	mov    DWORD PTR [eax],edx
c001a972:	c7 05 00 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c00,0x0
c001a97c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a984:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a989:	7f 15                	jg     c001a9a0 <FAT::FAT()+0x4c>
c001a98b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a98f:	c7 04 85 20 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3e0],0xffffffff
c001a99a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a99e:	eb e4                	jmp    c001a984 <FAT::FAT()+0x30>
c001a9a0:	90                   	nop
c001a9a1:	83 c4 1c             	add    esp,0x1c
c001a9a4:	c3                   	ret    
c001a9a5:	90                   	nop

c001a9a6 <FAT::fixFilepath(char*)>:
c001a9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ac:	3c 40                	cmp    al,0x40
c001a9ae:	7e 2c                	jle    c001a9dc <FAT::fixFilepath(char*)+0x36>
c001a9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a9b6:	83 e8 41             	sub    eax,0x41
c001a9b9:	88 c2                	mov    dl,al
c001a9bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9bf:	88 10                	mov    BYTE PTR [eax],dl
c001a9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c5:	8a 00                	mov    al,BYTE PTR [eax]
c001a9c7:	0f be c0             	movsx  eax,al
c001a9ca:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a9d1:	83 c0 30             	add    eax,0x30
c001a9d4:	88 c2                	mov    dl,al
c001a9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9da:	88 10                	mov    BYTE PTR [eax],dl
c001a9dc:	90                   	nop
c001a9dd:	c3                   	ret    

c001a9de <FAT::open(char const*, void**, FileOpenMode)>:
c001a9de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9e4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9ec:	74 0a                	je     c001a9f8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9ee:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a9f6:	75 0a                	jne    c001aa02 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a9f8:	b8 04 00 00 00       	mov    eax,0x4
c001a9fd:	e9 00 01 00 00       	jmp    c001ab02 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa02:	83 ec 08             	sub    esp,0x8
c001aa05:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa10:	50                   	push   eax
c001aa11:	e8 3e 5d fe ff       	call   c0000754 <strcpy>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	83 ec 08             	sub    esp,0x8
c001aa1c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa20:	50                   	push   eax
c001aa21:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa28:	e8 79 ff ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa3f:	83 e0 01             	and    eax,0x1
c001aa42:	74 08                	je     c001aa4c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa44:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa4c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa53:	83 e0 04             	and    eax,0x4
c001aa56:	74 10                	je     c001aa68 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa58:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa60:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa6f:	83 e0 02             	and    eax,0x2
c001aa72:	74 08                	je     c001aa7c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa74:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa83:	83 e0 08             	and    eax,0x8
c001aa86:	74 08                	je     c001aa90 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa88:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aa90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa97:	83 e0 10             	and    eax,0x10
c001aa9a:	74 08                	je     c001aaa4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aa9c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	68 50 02 00 00       	push   0x250
c001aaac:	e8 22 15 ff ff       	call   c000bfd3 <malloc>
c001aab1:	83 c4 10             	add    esp,0x10
c001aab4:	89 c2                	mov    edx,eax
c001aab6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aabd:	89 10                	mov    DWORD PTR [eax],edx
c001aabf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aac6:	31 d2                	xor    edx,edx
c001aac8:	88 c2                	mov    dl,al
c001aaca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aad1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aad3:	83 ec 04             	sub    esp,0x4
c001aad6:	52                   	push   edx
c001aad7:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aadb:	52                   	push   edx
c001aadc:	50                   	push   eax
c001aadd:	e8 76 a2 fe ff       	call   c0004d58 <f_open>
c001aae2:	83 c4 10             	add    esp,0x10
c001aae5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aaec:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aaf4:	74 07                	je     c001aafd <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001aaf6:	b8 01 00 00 00       	mov    eax,0x1
c001aafb:	eb 05                	jmp    c001ab02 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aafd:	b8 00 00 00 00       	mov    eax,0x0
c001ab02:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab08:	c3                   	ret    
c001ab09:	90                   	nop

c001ab0a <FAT::openDir(char const*, void**)>:
c001ab0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab10:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab18:	74 0a                	je     c001ab24 <FAT::openDir(char const*, void**)+0x1a>
c001ab1a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab22:	75 07                	jne    c001ab2b <FAT::openDir(char const*, void**)+0x21>
c001ab24:	b8 04 00 00 00       	mov    eax,0x4
c001ab29:	eb 7d                	jmp    c001aba8 <FAT::openDir(char const*, void**)+0x9e>
c001ab2b:	83 ec 08             	sub    esp,0x8
c001ab2e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab35:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab39:	50                   	push   eax
c001ab3a:	e8 15 5c fe ff       	call   c0000754 <strcpy>
c001ab3f:	83 c4 10             	add    esp,0x10
c001ab42:	83 ec 08             	sub    esp,0x8
c001ab45:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab49:	50                   	push   eax
c001ab4a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab51:	e8 50 fe ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	83 ec 0c             	sub    esp,0xc
c001ab5c:	6a 4c                	push   0x4c
c001ab5e:	e8 70 14 ff ff       	call   c000bfd3 <malloc>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	89 c2                	mov    edx,eax
c001ab68:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab6f:	89 10                	mov    DWORD PTR [eax],edx
c001ab71:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab78:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab7a:	83 ec 08             	sub    esp,0x8
c001ab7d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab81:	52                   	push   edx
c001ab82:	50                   	push   eax
c001ab83:	e8 b6 b1 fe ff       	call   c0005d3e <f_opendir>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab92:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ab9a:	74 07                	je     c001aba3 <FAT::openDir(char const*, void**)+0x99>
c001ab9c:	b8 01 00 00 00       	mov    eax,0x1
c001aba1:	eb 05                	jmp    c001aba8 <FAT::openDir(char const*, void**)+0x9e>
c001aba3:	b8 00 00 00 00       	mov    eax,0x0
c001aba8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abae:	c3                   	ret    
c001abaf:	90                   	nop

c001abb0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abb0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abb6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abbe:	75 0a                	jne    c001abca <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abc0:	b8 04 00 00 00       	mov    eax,0x4
c001abc5:	e9 cb 00 00 00       	jmp    c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abca:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abd2:	75 0a                	jne    c001abde <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abd4:	b8 04 00 00 00       	mov    eax,0x4
c001abd9:	e9 b7 00 00 00       	jmp    c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abde:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abe6:	75 0a                	jne    c001abf2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abe8:	b8 04 00 00 00       	mov    eax,0x4
c001abed:	e9 a3 00 00 00       	jmp    c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abf2:	83 ec 08             	sub    esp,0x8
c001abf5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001abfc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac03:	50                   	push   eax
c001ac04:	e8 4b 5b fe ff       	call   c0000754 <strcpy>
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	83 ec 08             	sub    esp,0x8
c001ac0f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac16:	50                   	push   eax
c001ac17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac1e:	e8 83 fd ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	83 ec 08             	sub    esp,0x8
c001ac29:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac2d:	50                   	push   eax
c001ac2e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac35:	50                   	push   eax
c001ac36:	e8 c2 b2 fe ff       	call   c0005efd <f_stat>
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac45:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac4c:	85 c0                	test   eax,eax
c001ac4e:	74 07                	je     c001ac57 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac50:	83 f8 04             	cmp    eax,0x4
c001ac53:	74 34                	je     c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac55:	eb 39                	jmp    c001ac90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac57:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac5b:	25 ff 00 00 00       	and    eax,0xff
c001ac60:	83 e0 10             	and    eax,0x10
c001ac63:	0f 95 c2             	setne  dl
c001ac66:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac6d:	88 10                	mov    BYTE PTR [eax],dl
c001ac6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac76:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac7d:	89 01                	mov    DWORD PTR [ecx],eax
c001ac7f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac82:	b8 00 00 00 00       	mov    eax,0x0
c001ac87:	eb 0c                	jmp    c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac89:	b8 02 00 00 00       	mov    eax,0x2
c001ac8e:	eb 05                	jmp    c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac90:	b8 01 00 00 00       	mov    eax,0x1
c001ac95:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ac9b:	c3                   	ret    

c001ac9c <FAT::unlink(char const*)>:
c001ac9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aca2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acaa:	75 07                	jne    c001acb3 <FAT::unlink(char const*)+0x17>
c001acac:	b8 04 00 00 00       	mov    eax,0x4
c001acb1:	eb 5c                	jmp    c001ad0f <FAT::unlink(char const*)+0x73>
c001acb3:	83 ec 08             	sub    esp,0x8
c001acb6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acc1:	50                   	push   eax
c001acc2:	e8 8d 5a fe ff       	call   c0000754 <strcpy>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	83 ec 08             	sub    esp,0x8
c001accd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acd1:	50                   	push   eax
c001acd2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acd9:	e8 c8 fc ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001acde:	83 c4 10             	add    esp,0x10
c001ace1:	83 ec 0c             	sub    esp,0xc
c001ace4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ace8:	50                   	push   eax
c001ace9:	e8 7e b5 fe ff       	call   c000626c <f_unlink>
c001acee:	83 c4 10             	add    esp,0x10
c001acf1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001acf8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001acff:	85 c0                	test   eax,eax
c001ad01:	75 07                	jne    c001ad0a <FAT::unlink(char const*)+0x6e>
c001ad03:	b8 00 00 00 00       	mov    eax,0x0
c001ad08:	eb 05                	jmp    c001ad0f <FAT::unlink(char const*)+0x73>
c001ad0a:	b8 01 00 00 00       	mov    eax,0x1
c001ad0f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad15:	c3                   	ret    

c001ad16 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad16:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad1c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad23:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad2a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad2e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad32:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad3a:	75 0a                	jne    c001ad46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad3c:	b8 04 00 00 00       	mov    eax,0x4
c001ad41:	e9 43 01 00 00       	jmp    c001ae89 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad46:	83 ec 08             	sub    esp,0x8
c001ad49:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad50:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad54:	50                   	push   eax
c001ad55:	e8 fa 59 fe ff       	call   c0000754 <strcpy>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	83 ec 08             	sub    esp,0x8
c001ad60:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad64:	50                   	push   eax
c001ad65:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad6c:	e8 35 fc ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001ad71:	83 c4 10             	add    esp,0x10
c001ad74:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad7c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad84:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad88:	25 ff 00 00 00       	and    eax,0xff
c001ad8d:	83 e0 01             	and    eax,0x1
c001ad90:	74 08                	je     c001ad9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ad92:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ad9a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad9e:	25 ff 00 00 00       	and    eax,0xff
c001ada3:	83 e0 02             	and    eax,0x2
c001ada6:	74 08                	je     c001adb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001ada8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adb0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adb4:	25 ff 00 00 00       	and    eax,0xff
c001adb9:	83 e0 04             	and    eax,0x4
c001adbc:	74 08                	je     c001adc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adbe:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001adc6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adca:	25 ff 00 00 00       	and    eax,0xff
c001adcf:	83 e0 08             	and    eax,0x8
c001add2:	74 08                	je     c001addc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001add4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001addc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ade0:	25 ff 00 00 00       	and    eax,0xff
c001ade5:	83 e0 01             	and    eax,0x1
c001ade8:	74 08                	je     c001adf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001adf2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adf6:	25 ff 00 00 00       	and    eax,0xff
c001adfb:	83 e0 02             	and    eax,0x2
c001adfe:	74 08                	je     c001ae08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae00:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae0c:	25 ff 00 00 00       	and    eax,0xff
c001ae11:	83 e0 04             	and    eax,0x4
c001ae14:	74 08                	je     c001ae1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae16:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae1e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae22:	25 ff 00 00 00       	and    eax,0xff
c001ae27:	83 e0 08             	and    eax,0x8
c001ae2a:	74 08                	je     c001ae34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae2c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae34:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae3b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae49:	31 d2                	xor    edx,edx
c001ae4b:	88 c2                	mov    dl,al
c001ae4d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae54:	25 ff 00 00 00       	and    eax,0xff
c001ae59:	83 ec 04             	sub    esp,0x4
c001ae5c:	52                   	push   edx
c001ae5d:	50                   	push   eax
c001ae5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae62:	50                   	push   eax
c001ae63:	e8 a4 ba fe ff       	call   c000690c <f_chmod>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae72:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae79:	85 c0                	test   eax,eax
c001ae7b:	75 07                	jne    c001ae84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae7d:	b8 00 00 00 00       	mov    eax,0x0
c001ae82:	eb 05                	jmp    c001ae89 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae84:	b8 01 00 00 00       	mov    eax,0x1
c001ae89:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae8f:	c3                   	ret    

c001ae90 <FAT::rename(char const*, char const*)>:
c001ae90:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ae96:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ae9e:	74 0a                	je     c001aeaa <FAT::rename(char const*, char const*)+0x1a>
c001aea0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aea8:	75 0a                	jne    c001aeb4 <FAT::rename(char const*, char const*)+0x24>
c001aeaa:	b8 04 00 00 00       	mov    eax,0x4
c001aeaf:	e9 98 00 00 00       	jmp    c001af4c <FAT::rename(char const*, char const*)+0xbc>
c001aeb4:	83 ec 08             	sub    esp,0x8
c001aeb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aebe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aec5:	50                   	push   eax
c001aec6:	e8 89 58 fe ff       	call   c0000754 <strcpy>
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	83 ec 08             	sub    esp,0x8
c001aed1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aed8:	50                   	push   eax
c001aed9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aee0:	e8 c1 fa ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001aee5:	83 c4 10             	add    esp,0x10
c001aee8:	83 ec 08             	sub    esp,0x8
c001aeeb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aef2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aef6:	50                   	push   eax
c001aef7:	e8 58 58 fe ff       	call   c0000754 <strcpy>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	83 ec 08             	sub    esp,0x8
c001af02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af06:	50                   	push   eax
c001af07:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af0e:	e8 93 fa ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	83 ec 08             	sub    esp,0x8
c001af19:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af1d:	50                   	push   eax
c001af1e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af25:	50                   	push   eax
c001af26:	e8 ee b6 fe ff       	call   c0006619 <f_rename>
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af35:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af3c:	85 c0                	test   eax,eax
c001af3e:	75 07                	jne    c001af47 <FAT::rename(char const*, char const*)+0xb7>
c001af40:	b8 00 00 00 00       	mov    eax,0x0
c001af45:	eb 05                	jmp    c001af4c <FAT::rename(char const*, char const*)+0xbc>
c001af47:	b8 01 00 00 00       	mov    eax,0x1
c001af4c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af52:	c3                   	ret    
c001af53:	90                   	nop

c001af54 <FAT::mkdir(char const*)>:
c001af54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af62:	75 07                	jne    c001af6b <FAT::mkdir(char const*)+0x17>
c001af64:	b8 04 00 00 00       	mov    eax,0x4
c001af69:	eb 5c                	jmp    c001afc7 <FAT::mkdir(char const*)+0x73>
c001af6b:	83 ec 08             	sub    esp,0x8
c001af6e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af75:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af79:	50                   	push   eax
c001af7a:	e8 d5 57 fe ff       	call   c0000754 <strcpy>
c001af7f:	83 c4 10             	add    esp,0x10
c001af82:	83 ec 08             	sub    esp,0x8
c001af85:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af89:	50                   	push   eax
c001af8a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af91:	e8 10 fa ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afa0:	50                   	push   eax
c001afa1:	e8 47 b4 fe ff       	call   c00063ed <f_mkdir>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afb0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afb7:	85 c0                	test   eax,eax
c001afb9:	75 07                	jne    c001afc2 <FAT::mkdir(char const*)+0x6e>
c001afbb:	b8 00 00 00 00       	mov    eax,0x0
c001afc0:	eb 05                	jmp    c001afc7 <FAT::mkdir(char const*)+0x73>
c001afc2:	b8 01 00 00 00       	mov    eax,0x1
c001afc7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afcd:	c3                   	ret    

c001afce <FAT::exists(char const*)>:
c001afce:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afd4:	83 ec 08             	sub    esp,0x8
c001afd7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afe2:	50                   	push   eax
c001afe3:	e8 6c 57 fe ff       	call   c0000754 <strcpy>
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	83 ec 08             	sub    esp,0x8
c001afee:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aff2:	50                   	push   eax
c001aff3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001affa:	e8 a7 f9 ff ff       	call   c001a9a6 <FAT::fixFilepath(char*)>
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	83 ec 08             	sub    esp,0x8
c001b005:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b00c:	50                   	push   eax
c001b00d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b011:	50                   	push   eax
c001b012:	e8 e6 ae fe ff       	call   c0005efd <f_stat>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b021:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b028:	85 c0                	test   eax,eax
c001b02a:	75 04                	jne    c001b030 <FAT::exists(char const*)+0x62>
c001b02c:	b0 01                	mov    al,0x1
c001b02e:	eb 02                	jmp    c001b032 <FAT::exists(char const*)+0x64>
c001b030:	b0 00                	mov    al,0x0
c001b032:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b038:	c3                   	ret    
c001b039:	90                   	nop

c001b03a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b03a:	b8 08 00 00 00       	mov    eax,0x8
c001b03f:	c3                   	ret    

c001b040 <ISO9660::seek(void*, unsigned long long)>:
c001b040:	53                   	push   ebx
c001b041:	b8 04 00 00 00       	mov    eax,0x4
c001b046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b04a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b04e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b052:	85 d2                	test   edx,edx
c001b054:	74 17                	je     c001b06d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b056:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b059:	89 c8                	mov    eax,ecx
c001b05b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b05e:	b8 01 00 00 00       	mov    eax,0x1
c001b063:	73 08                	jae    c001b06d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b065:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b068:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b06b:	31 c0                	xor    eax,eax
c001b06d:	5b                   	pop    ebx
c001b06e:	c3                   	ret    
c001b06f:	90                   	nop

c001b070 <ISO9660::tell(void*, unsigned long long*)>:
c001b070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b078:	85 d2                	test   edx,edx
c001b07a:	74 12                	je     c001b08e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b07c:	85 c0                	test   eax,eax
c001b07e:	74 0e                	je     c001b08e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b080:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b083:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b086:	89 10                	mov    DWORD PTR [eax],edx
c001b088:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b08b:	31 c0                	xor    eax,eax
c001b08d:	c3                   	ret    
c001b08e:	b8 04 00 00 00       	mov    eax,0x4
c001b093:	c3                   	ret    

c001b094 <ISO9660::getName()>:
c001b094:	b8 48 33 02 c0       	mov    eax,0xc0023348
c001b099:	c3                   	ret    

c001b09a <ISO9660::stat(void*, unsigned long long*)>:
c001b09a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0a2:	85 d2                	test   edx,edx
c001b0a4:	74 12                	je     c001b0b8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0a6:	85 c0                	test   eax,eax
c001b0a8:	74 0e                	je     c001b0b8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0aa:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0b0:	89 10                	mov    DWORD PTR [eax],edx
c001b0b2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0b5:	31 c0                	xor    eax,eax
c001b0b7:	c3                   	ret    
c001b0b8:	b8 04 00 00 00       	mov    eax,0x4
c001b0bd:	c3                   	ret    

c001b0be <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0be:	b8 01 00 00 00       	mov    eax,0x1
c001b0c3:	c3                   	ret    

c001b0c4 <ISO9660::unlink(char const*)>:
c001b0c4:	b8 01 00 00 00       	mov    eax,0x1
c001b0c9:	c3                   	ret    

c001b0ca <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0ca:	b8 01 00 00 00       	mov    eax,0x1
c001b0cf:	c3                   	ret    

c001b0d0 <ISO9660::rename(char const*, char const*)>:
c001b0d0:	b8 01 00 00 00       	mov    eax,0x1
c001b0d5:	c3                   	ret    

c001b0d6 <ISO9660::mkdir(char const*)>:
c001b0d6:	b8 01 00 00 00       	mov    eax,0x1
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::close(void*)>:
c001b0dc:	83 ec 0c             	sub    esp,0xc
c001b0df:	b8 04 00 00 00       	mov    eax,0x4
c001b0e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0e8:	85 d2                	test   edx,edx
c001b0ea:	74 0e                	je     c001b0fa <ISO9660::close(void*)+0x1e>
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	52                   	push   edx
c001b0f0:	e8 ee 0e ff ff       	call   c000bfe3 <free>
c001b0f5:	83 c4 10             	add    esp,0x10
c001b0f8:	31 c0                	xor    eax,eax
c001b0fa:	83 c4 0c             	add    esp,0xc
c001b0fd:	c3                   	ret    

c001b0fe <ISO9660::closeDir(void*)>:
c001b0fe:	83 ec 0c             	sub    esp,0xc
c001b101:	b8 04 00 00 00       	mov    eax,0x4
c001b106:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b10a:	85 d2                	test   edx,edx
c001b10c:	74 0e                	je     c001b11c <ISO9660::closeDir(void*)+0x1e>
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	52                   	push   edx
c001b112:	e8 cc 0e ff ff       	call   c000bfe3 <free>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	31 c0                	xor    eax,eax
c001b11c:	83 c4 0c             	add    esp,0xc
c001b11f:	c3                   	ret    

c001b120 <ISO9660::~ISO9660()>:
c001b120:	83 ec 0c             	sub    esp,0xc
c001b123:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001b128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12c:	89 10                	mov    DWORD PTR [eax],edx
c001b12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b132:	83 ec 0c             	sub    esp,0xc
c001b135:	50                   	push   eax
c001b136:	e8 fb 43 ff ff       	call   c000f536 <Filesystem::~Filesystem()>
c001b13b:	83 c4 10             	add    esp,0x10
c001b13e:	90                   	nop
c001b13f:	83 c4 0c             	add    esp,0xc
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <ISO9660::~ISO9660()>:
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b14e:	e8 cd ff ff ff       	call   c001b120 <ISO9660::~ISO9660()>
c001b153:	83 c4 10             	add    esp,0x10
c001b156:	83 ec 08             	sub    esp,0x8
c001b159:	6a 08                	push   0x8
c001b15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15f:	e8 7b 3f ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	83 c4 0c             	add    esp,0xc
c001b16a:	c3                   	ret    

c001b16b <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b16b:	55                   	push   ebp
c001b16c:	31 c9                	xor    ecx,ecx
c001b16e:	57                   	push   edi
c001b16f:	56                   	push   esi
c001b170:	53                   	push   ebx
c001b171:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b175:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b179:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b17d:	89 eb                	mov    ebx,ebp
c001b17f:	39 ce                	cmp    esi,ecx
c001b181:	7e 17                	jle    c001b19a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b183:	31 d2                	xor    edx,edx
c001b185:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b189:	7d 13                	jge    c001b19e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b18b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b18f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b192:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b195:	75 0d                	jne    c001b1a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b197:	42                   	inc    edx
c001b198:	eb eb                	jmp    c001b185 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b19a:	31 c0                	xor    eax,eax
c001b19c:	eb 0a                	jmp    c001b1a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b19e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1a2:	eb 04                	jmp    c001b1a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1a4:	41                   	inc    ecx
c001b1a5:	43                   	inc    ebx
c001b1a6:	eb d7                	jmp    c001b17f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1a8:	5b                   	pop    ebx
c001b1a9:	5e                   	pop    esi
c001b1aa:	5f                   	pop    edi
c001b1ab:	5d                   	pop    ebp
c001b1ac:	c3                   	ret    

c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1ad:	56                   	push   esi
c001b1ae:	53                   	push   ebx
c001b1af:	52                   	push   edx
c001b1b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1bc:	39 0d 00 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d00,ecx
c001b1c2:	75 08                	jne    c001b1cc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1c4:	38 05 a8 41 02 c0    	cmp    BYTE PTR ds:0xc00241a8,al
c001b1ca:	74 2b                	je     c001b1f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1cc:	83 ec 0c             	sub    esp,0xc
c001b1cf:	31 db                	xor    ebx,ebx
c001b1d1:	a2 a8 41 02 c0       	mov    ds:0xc00241a8,al
c001b1d6:	89 0d 00 5d 02 c0    	mov    DWORD PTR ds:0xc0025d00,ecx
c001b1dc:	68 20 5d 02 c0       	push   0xc0025d20
c001b1e1:	6a 01                	push   0x1
c001b1e3:	53                   	push   ebx
c001b1e4:	0f be c0             	movsx  eax,al
c001b1e7:	51                   	push   ecx
c001b1e8:	ff 34 85 7c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb384]
c001b1ef:	e8 6c 76 ff ff       	call   c0012860 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1f4:	83 c4 20             	add    esp,0x20
c001b1f7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b1ff:	c7 44 24 14 20 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d20
c001b207:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b20b:	58                   	pop    eax
c001b20c:	5b                   	pop    ebx
c001b20d:	5e                   	pop    esi
c001b20e:	e9 6c 54 fe ff       	jmp    c000067f <memcpy>
c001b213:	90                   	nop

c001b214 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b214:	81 ec 10 08 00 00    	sub    esp,0x810
c001b21a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b221:	83 c0 41             	add    eax,0x41
c001b224:	0f be c0             	movsx  eax,al
c001b227:	50                   	push   eax
c001b228:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b22c:	50                   	push   eax
c001b22d:	6a 10                	push   0x10
c001b22f:	e8 79 ff ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	31 c0                	xor    eax,eax
c001b239:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b23e:	75 1d                	jne    c001b25d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b240:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b245:	75 16                	jne    c001b25d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b247:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b24c:	75 0f                	jne    c001b25d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b24e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b253:	75 08                	jne    c001b25d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b255:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b25a:	0f 94 c0             	sete   al
c001b25d:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b263:	c3                   	ret    

c001b264 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b264:	55                   	push   ebp
c001b265:	57                   	push   edi
c001b266:	56                   	push   esi
c001b267:	53                   	push   ebx
c001b268:	81 ec 34 08 00 00    	sub    esp,0x834
c001b26e:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b275:	55                   	push   ebp
c001b276:	68 63 33 02 c0       	push   0xc0023363
c001b27b:	e8 85 3f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001b280:	83 c4 10             	add    esp,0x10
c001b283:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b28b:	0f 84 06 02 00 00    	je     c001b497 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b291:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b299:	0f 84 f8 01 00 00    	je     c001b497 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b29f:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2a6:	b8 01 00 00 00       	mov    eax,0x1
c001b2ab:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2af:	0f 85 e7 01 00 00    	jne    c001b49c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2b5:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2b8:	31 d2                	xor    edx,edx
c001b2ba:	89 e9                	mov    ecx,ebp
c001b2bc:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2bf:	01 f1                	add    ecx,esi
c001b2c1:	89 d3                	mov    ebx,edx
c001b2c3:	11 fb                	adc    ebx,edi
c001b2c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2c9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2cd:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2d4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2d7:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2ea:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2ee:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b2f2:	72 19                	jb     c001b30d <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b2f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b300:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b307:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b30b:	eb 13                	jmp    c001b320 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b30d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b311:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b315:	29 f0                	sub    eax,esi
c001b317:	19 fa                	sbb    edx,edi
c001b319:	89 04 24             	mov    DWORD PTR [esp],eax
c001b31c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b320:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b327:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b32a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b32c:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b330:	c1 e0 0b             	shl    eax,0xb
c001b333:	53                   	push   ebx
c001b334:	01 c6                	add    esi,eax
c001b336:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b33d:	11 d7                	adc    edi,edx
c001b33f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b343:	50                   	push   eax
c001b344:	89 fa                	mov    edx,edi
c001b346:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b34a:	50                   	push   eax
c001b34b:	89 f0                	mov    eax,esi
c001b34d:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b351:	50                   	push   eax
c001b352:	e8 56 fe ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b357:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b35e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b362:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b366:	83 c4 10             	add    esp,0x10
c001b369:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b36c:	b8 00 08 00 00       	mov    eax,0x800
c001b371:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b377:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b37b:	29 d0                	sub    eax,edx
c001b37d:	39 c1                	cmp    ecx,eax
c001b37f:	83 db 00             	sbb    ebx,0x0
c001b382:	7d 19                	jge    c001b39d <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b384:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b389:	75 16                	jne    c001b3a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b38b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b392:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b398:	e9 f6 00 00 00       	jmp    c001b493 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b39d:	89 c5                	mov    ebp,eax
c001b39f:	eb 03                	jmp    c001b3a4 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3a1:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3a4:	51                   	push   ecx
c001b3a5:	55                   	push   ebp
c001b3a6:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3aa:	50                   	push   eax
c001b3ab:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3b2:	e8 c8 52 fe ff       	call   c000067f <memcpy>
c001b3b7:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3be:	01 e8                	add    eax,ebp
c001b3c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3c8:	89 e8                	mov    eax,ebp
c001b3ca:	99                   	cdq    
c001b3cb:	01 ee                	add    esi,ebp
c001b3cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3d1:	11 d7                	adc    edi,edx
c001b3d3:	29 e9                	sub    ecx,ebp
c001b3d5:	19 d3                	sbb    ebx,edx
c001b3d7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3db:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3ea:	b8 00 00 00 00       	mov    eax,0x0
c001b3ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b3f3:	7d 3f                	jge    c001b434 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b3f5:	52                   	push   edx
c001b3f6:	89 fa                	mov    edx,edi
c001b3f8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b3ff:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b403:	50                   	push   eax
c001b404:	89 f0                	mov    eax,esi
c001b406:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b40a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b40e:	50                   	push   eax
c001b40f:	e8 99 fd ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b414:	81 c6 00 08 00 00    	add    esi,0x800
c001b41a:	83 d7 00             	adc    edi,0x0
c001b41d:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b425:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b42d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b432:	eb ab                	jmp    c001b3df <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b438:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b43b:	74 34                	je     c001b471 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b43d:	50                   	push   eax
c001b43e:	89 fa                	mov    edx,edi
c001b440:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b447:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b44b:	50                   	push   eax
c001b44c:	89 f0                	mov    eax,esi
c001b44e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b452:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b456:	55                   	push   ebp
c001b457:	50                   	push   eax
c001b458:	e8 50 fd ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b45d:	83 c4 0c             	add    esp,0xc
c001b460:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b464:	55                   	push   ebp
c001b465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b469:	e8 11 52 fe ff       	call   c000067f <memcpy>
c001b46e:	83 c4 10             	add    esp,0x10
c001b471:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b478:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b47c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b480:	89 38                	mov    DWORD PTR [eax],edi
c001b482:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b489:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b48d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b490:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b493:	31 c0                	xor    eax,eax
c001b495:	eb 05                	jmp    c001b49c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b497:	b8 04 00 00 00       	mov    eax,0x4
c001b49c:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4a2:	5b                   	pop    ebx
c001b4a3:	5e                   	pop    esi
c001b4a4:	5f                   	pop    edi
c001b4a5:	5d                   	pop    ebp
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4a8:	55                   	push   ebp
c001b4a9:	57                   	push   edi
c001b4aa:	56                   	push   esi
c001b4ab:	53                   	push   ebx
c001b4ac:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4b2:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4b9:	85 f6                	test   esi,esi
c001b4bb:	0f 84 62 02 00 00    	je     c001b723 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4c1:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4c9:	0f 84 54 02 00 00    	je     c001b723 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4d2:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4d5:	75 0a                	jne    c001b4e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4d7:	b8 07 00 00 00       	mov    eax,0x7
c001b4dc:	e9 47 02 00 00       	jmp    c001b728 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4e1:	50                   	push   eax
c001b4e2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4e6:	50                   	push   eax
c001b4e7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4ee:	53                   	push   ebx
c001b4ef:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4f1:	c1 e0 0b             	shl    eax,0xb
c001b4f4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b4f7:	c1 e8 0b             	shr    eax,0xb
c001b4fa:	50                   	push   eax
c001b4fb:	e8 ad fc ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b500:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	89 c1                	mov    ecx,eax
c001b508:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b50b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b511:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b514:	84 db                	test   bl,bl
c001b516:	0f 85 90 00 00 00    	jne    c001b5ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b51c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b522:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b528:	29 c7                	sub    edi,eax
c001b52a:	89 fb                	mov    ebx,edi
c001b52c:	c1 fb 1f             	sar    ebx,0x1f
c001b52f:	01 f8                	add    eax,edi
c001b531:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b535:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b538:	11 da                	adc    edx,ebx
c001b53a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b53d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b540:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b544:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b547:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b54a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b54d:	89 d8                	mov    eax,ebx
c001b54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b553:	ba 00 00 00 00       	mov    edx,0x0
c001b558:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b55c:	b8 00 00 00 00       	mov    eax,0x0
c001b561:	73 0b                	jae    c001b56e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b563:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b566:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b56a:	29 f8                	sub    eax,edi
c001b56c:	19 da                	sbb    edx,ebx
c001b56e:	89 d3                	mov    ebx,edx
c001b570:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b573:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b576:	09 c3                	or     ebx,eax
c001b578:	0f 84 59 ff ff ff    	je     c001b4d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b57e:	55                   	push   ebp
c001b57f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b583:	50                   	push   eax
c001b584:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b58b:	53                   	push   ebx
c001b58c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b58e:	c1 e0 0b             	shl    eax,0xb
c001b591:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b595:	c1 e8 0b             	shr    eax,0xb
c001b598:	50                   	push   eax
c001b599:	e8 0f fc ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b59e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5a1:	83 c4 10             	add    esp,0x10
c001b5a4:	25 ff 07 00 00       	and    eax,0x7ff
c001b5a9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5ac:	57                   	push   edi
c001b5ad:	6a 28                	push   0x28
c001b5af:	6a 00                	push   0x0
c001b5b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5b5:	50                   	push   eax
c001b5b6:	e8 fa 50 fe ff       	call   c00006b5 <memset>
c001b5bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5be:	31 d2                	xor    edx,edx
c001b5c0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5c6:	89 f8                	mov    eax,edi
c001b5c8:	83 c0 21             	add    eax,0x21
c001b5cb:	83 d2 00             	adc    edx,0x0
c001b5ce:	89 c7                	mov    edi,eax
c001b5d0:	89 d5                	mov    ebp,edx
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	31 c9                	xor    ecx,ecx
c001b5d7:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5de:	83 f9 28             	cmp    ecx,0x28
c001b5e1:	0f 94 c2             	sete   dl
c001b5e4:	88 04 24             	mov    BYTE PTR [esp],al
c001b5e7:	88 d0                	mov    al,dl
c001b5e9:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5ee:	39 fa                	cmp    edx,edi
c001b5f0:	ba 00 00 00 00       	mov    edx,0x0
c001b5f5:	19 ea                	sbb    edx,ebp
c001b5f7:	0f 92 c2             	setb   dl
c001b5fa:	09 c2                	or     edx,eax
c001b5fc:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b600:	0f 94 c0             	sete   al
c001b603:	08 d0                	or     al,dl
c001b605:	75 16                	jne    c001b61d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b607:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b60b:	74 10                	je     c001b61d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b60d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b610:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b614:	41                   	inc    ecx
c001b615:	83 c7 01             	add    edi,0x1
c001b618:	83 d5 00             	adc    ebp,0x0
c001b61b:	eb ba                	jmp    c001b5d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b61d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b624:	83 ec 0c             	sub    esp,0xc
c001b627:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b62b:	57                   	push   edi
c001b62c:	e8 a1 50 fe ff       	call   c00006d2 <strlen>
c001b631:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b635:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b638:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b63f:	25 ff 07 00 00       	and    eax,0x7ff
c001b644:	01 c8                	add    eax,ecx
c001b646:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b64e:	5a                   	pop    edx
c001b64f:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b656:	59                   	pop    ecx
c001b657:	0f 95 c0             	setne  al
c001b65a:	0f b6 c0             	movzx  eax,al
c001b65d:	40                   	inc    eax
c001b65e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b662:	57                   	push   edi
c001b663:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b667:	50                   	push   eax
c001b668:	e8 e7 50 fe ff       	call   c0000754 <strcpy>
c001b66d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b671:	83 c4 10             	add    esp,0x10
c001b674:	84 c0                	test   al,al
c001b676:	75 21                	jne    c001b699 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b678:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b680:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b688:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b690:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b697:	eb 28                	jmp    c001b6c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b699:	fe c8                	dec    al
c001b69b:	75 24                	jne    c001b6c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b69d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6a5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6ad:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6b5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6bc:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6c1:	50                   	push   eax
c001b6c2:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6c9:	0f b6 fb             	movzx  edi,bl
c001b6cc:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6d0:	31 db                	xor    ebx,ebx
c001b6d2:	50                   	push   eax
c001b6d3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6da:	e8 a0 4f fe ff       	call   c000067f <memcpy>
c001b6df:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6e6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6ec:	89 f9                	mov    ecx,edi
c001b6ee:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b6f1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b6f4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b6f7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b6fa:	83 c4 10             	add    esp,0x10
c001b6fd:	39 c7                	cmp    edi,eax
c001b6ff:	89 df                	mov    edi,ebx
c001b701:	19 d7                	sbb    edi,edx
c001b703:	72 10                	jb     c001b715 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b705:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b70c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b713:	eb 0a                	jmp    c001b71f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b715:	29 c8                	sub    eax,ecx
c001b717:	19 da                	sbb    edx,ebx
c001b719:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b71c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b71f:	31 c0                	xor    eax,eax
c001b721:	eb 05                	jmp    c001b728 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b723:	b8 04 00 00 00       	mov    eax,0x4
c001b728:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b72e:	5b                   	pop    ebx
c001b72f:	5e                   	pop    esi
c001b730:	5f                   	pop    edi
c001b731:	5d                   	pop    ebp
c001b732:	c3                   	ret    

c001b733 <readRoot(unsigned int*, unsigned int*, char)>:
c001b733:	81 ec 40 08 00 00    	sub    esp,0x840
c001b739:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b741:	50                   	push   eax
c001b742:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b746:	50                   	push   eax
c001b747:	6a 10                	push   0x10
c001b749:	e8 5f fa ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b74e:	83 c4 0c             	add    esp,0xc
c001b751:	6a 22                	push   0x22
c001b753:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b75a:	50                   	push   eax
c001b75b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b75f:	50                   	push   eax
c001b760:	e8 1a 4f fe ff       	call   c000067f <memcpy>
c001b765:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b76c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b770:	89 10                	mov    DWORD PTR [eax],edx
c001b772:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b779:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b77d:	89 10                	mov    DWORD PTR [eax],edx
c001b77f:	b0 01                	mov    al,0x1
c001b781:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b787:	c3                   	ret    

c001b788 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b788:	55                   	push   ebp
c001b789:	57                   	push   edi
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b792:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b799:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7a4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7ac:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7b0:	75 03                	jne    c001b7b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7b2:	83 c3 02             	add    ebx,0x2
c001b7b5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7b8:	75 03                	jne    c001b7bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7ba:	43                   	inc    ebx
c001b7bb:	eb f8                	jmp    c001b7b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7bd:	51                   	push   ecx
c001b7be:	68 00 01 00 00       	push   0x100
c001b7c3:	6a 00                	push   0x0
c001b7c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7c9:	50                   	push   eax
c001b7ca:	e8 e6 4e fe ff       	call   c00006b5 <memset>
c001b7cf:	83 c4 10             	add    esp,0x10
c001b7d2:	31 d2                	xor    edx,edx
c001b7d4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7d7:	84 c0                	test   al,al
c001b7d9:	74 21                	je     c001b7fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7db:	3c 2f                	cmp    al,0x2f
c001b7dd:	75 0b                	jne    c001b7ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7df:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7e3:	bd 01 00 00 00       	mov    ebp,0x1
c001b7e8:	eb 14                	jmp    c001b7fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7ea:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7ed:	80 f9 19             	cmp    cl,0x19
c001b7f0:	77 03                	ja     c001b7f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b7f2:	83 e8 20             	sub    eax,0x20
c001b7f5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b7f9:	42                   	inc    edx
c001b7fa:	eb d8                	jmp    c001b7d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b7fc:	31 ed                	xor    ebp,ebp
c001b7fe:	83 ec 0c             	sub    esp,0xc
c001b801:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b808:	e8 c6 07 ff ff       	call   c000bfd3 <malloc>
c001b80d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b814:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b81a:	89 c6                	mov    esi,eax
c001b81c:	c1 ef 0b             	shr    edi,0xb
c001b81f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b826:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b82a:	83 c4 10             	add    esp,0x10
c001b82d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b832:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b836:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b83d:	74 28                	je     c001b867 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b83f:	52                   	push   edx
c001b840:	57                   	push   edi
c001b841:	50                   	push   eax
c001b842:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b846:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b84d:	e8 5b f9 ff ff       	call   c001b1ad <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b856:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b85d:	05 00 08 00 00       	add    eax,0x800
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	eb cb                	jmp    c001b832 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b867:	83 ec 0c             	sub    esp,0xc
c001b86a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b86e:	57                   	push   edi
c001b86f:	e8 5e 4e fe ff       	call   c00006d2 <strlen>
c001b874:	50                   	push   eax
c001b875:	57                   	push   edi
c001b876:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b87d:	56                   	push   esi
c001b87e:	e8 e8 f8 ff ff       	call   c001b16b <__memmem(unsigned char*, int, unsigned char*, int)>
c001b883:	83 c4 20             	add    esp,0x20
c001b886:	85 c0                	test   eax,eax
c001b888:	75 13                	jne    c001b89d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b88a:	83 ec 0c             	sub    esp,0xc
c001b88d:	56                   	push   esi
c001b88e:	e8 50 07 ff ff       	call   c000bfe3 <free>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	31 c0                	xor    eax,eax
c001b898:	e9 b3 00 00 00       	jmp    c001b950 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b89d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8a1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8a5:	c1 e7 08             	shl    edi,0x8
c001b8a8:	c1 e2 10             	shl    edx,0x10
c001b8ab:	09 d7                	or     edi,edx
c001b8ad:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8b1:	09 d7                	or     edi,edx
c001b8b3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8b7:	c1 e2 18             	shl    edx,0x18
c001b8ba:	09 d7                	or     edi,edx
c001b8bc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8c0:	89 d1                	mov    ecx,edx
c001b8c2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8c6:	c1 e1 08             	shl    ecx,0x8
c001b8c9:	c1 e2 10             	shl    edx,0x10
c001b8cc:	09 ca                	or     edx,ecx
c001b8ce:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8d2:	09 ca                	or     edx,ecx
c001b8d4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8d8:	c1 e1 18             	shl    ecx,0x18
c001b8db:	09 ca                	or     edx,ecx
c001b8dd:	89 e9                	mov    ecx,ebp
c001b8df:	84 c9                	test   cl,cl
c001b8e1:	74 3c                	je     c001b91f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8e7:	83 ec 0c             	sub    esp,0xc
c001b8ea:	56                   	push   esi
c001b8eb:	e8 f3 06 ff ff       	call   c000bfe3 <free>
c001b8f0:	83 c4 0c             	add    esp,0xc
c001b8f3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b8fa:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b8ff:	50                   	push   eax
c001b900:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b907:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b90e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b912:	52                   	push   edx
c001b913:	57                   	push   edi
c001b914:	53                   	push   ebx
c001b915:	e8 6e fe ff ff       	call   c001b788 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b91a:	83 c4 20             	add    esp,0x20
c001b91d:	eb 31                	jmp    c001b950 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b91f:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b926:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b929:	d0 e8                	shr    al,1
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	89 3b                	mov    DWORD PTR [ebx],edi
c001b930:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b937:	83 e0 01             	and    eax,0x1
c001b93a:	89 13                	mov    DWORD PTR [ebx],edx
c001b93c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b943:	89 03                	mov    DWORD PTR [ebx],eax
c001b945:	56                   	push   esi
c001b946:	e8 98 06 ff ff       	call   c000bfe3 <free>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	b0 01                	mov    al,0x1
c001b950:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b956:	5b                   	pop    ebx
c001b957:	5e                   	pop    esi
c001b958:	5f                   	pop    edi
c001b959:	5d                   	pop    ebp
c001b95a:	c3                   	ret    

c001b95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b95b:	55                   	push   ebp
c001b95c:	57                   	push   edi
c001b95d:	56                   	push   esi
c001b95e:	53                   	push   ebx
c001b95f:	83 ec 20             	sub    esp,0x20
c001b962:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b966:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b96a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b96f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b973:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b97b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b983:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b989:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b98f:	57                   	push   edi
c001b990:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b994:	50                   	push   eax
c001b995:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b999:	50                   	push   eax
c001b99a:	e8 94 fd ff ff       	call   c001b733 <readRoot(unsigned int*, unsigned int*, char)>
c001b99f:	5a                   	pop    edx
c001b9a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9a4:	e8 29 4d fe ff       	call   c00006d2 <strlen>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	83 f8 03             	cmp    eax,0x3
c001b9af:	77 17                	ja     c001b9c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9b5:	89 03                	mov    DWORD PTR [ebx],eax
c001b9b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9bb:	89 06                	mov    DWORD PTR [esi],eax
c001b9bd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9c4:	b0 01                	mov    al,0x1
c001b9c6:	eb 19                	jmp    c001b9e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9c8:	50                   	push   eax
c001b9c9:	55                   	push   ebp
c001b9ca:	57                   	push   edi
c001b9cb:	56                   	push   esi
c001b9cc:	53                   	push   ebx
c001b9cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9d9:	e8 aa fd ff ff       	call   c001b788 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9de:	83 c4 20             	add    esp,0x20
c001b9e1:	83 c4 1c             	add    esp,0x1c
c001b9e4:	5b                   	pop    ebx
c001b9e5:	5e                   	pop    esi
c001b9e6:	5f                   	pop    edi
c001b9e7:	5d                   	pop    ebp
c001b9e8:	c3                   	ret    
c001b9e9:	90                   	nop

c001b9ea <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9ea:	57                   	push   edi
c001b9eb:	56                   	push   esi
c001b9ec:	53                   	push   ebx
c001b9ed:	83 ec 10             	sub    esp,0x10
c001b9f0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b9f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b9f8:	85 f6                	test   esi,esi
c001b9fa:	74 7b                	je     c001ba77 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b9fc:	85 ff                	test   edi,edi
c001b9fe:	74 77                	je     c001ba77 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	6a 1c                	push   0x1c
c001ba05:	e8 c9 05 ff ff       	call   c000bfd3 <malloc>
c001ba0a:	89 07                	mov    DWORD PTR [edi],eax
c001ba0c:	89 c3                	mov    ebx,eax
c001ba0e:	58                   	pop    eax
c001ba0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba13:	50                   	push   eax
c001ba14:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba17:	50                   	push   eax
c001ba18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba1c:	50                   	push   eax
c001ba1d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba21:	50                   	push   eax
c001ba22:	56                   	push   esi
c001ba23:	e8 33 ff ff ff       	call   c001b95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba28:	83 c4 20             	add    esp,0x20
c001ba2b:	84 c0                	test   al,al
c001ba2d:	74 07                	je     c001ba36 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba34:	74 0b                	je     c001ba41 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba36:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba3a:	b8 01 00 00 00       	mov    eax,0x1
c001ba3f:	eb 3b                	jmp    c001ba7c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba45:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba49:	89 03                	mov    DWORD PTR [ebx],eax
c001ba4b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba56:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba64:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba67:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba6e:	8a 06                	mov    al,BYTE PTR [esi]
c001ba70:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba73:	31 c0                	xor    eax,eax
c001ba75:	eb 05                	jmp    c001ba7c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba77:	b8 04 00 00 00       	mov    eax,0x4
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	5b                   	pop    ebx
c001ba80:	5e                   	pop    esi
c001ba81:	5f                   	pop    edi
c001ba82:	c3                   	ret    
c001ba83:	90                   	nop

c001ba84 <ISO9660::exists(char const*)>:
c001ba84:	83 ec 28             	sub    esp,0x28
c001ba87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba8b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba8f:	52                   	push   edx
c001ba90:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ba93:	52                   	push   edx
c001ba94:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ba98:	52                   	push   edx
c001ba99:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ba9d:	52                   	push   edx
c001ba9e:	50                   	push   eax
c001ba9f:	e8 b7 fe ff ff       	call   c001b95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baa4:	83 c4 3c             	add    esp,0x3c
c001baa7:	c3                   	ret    

c001baa8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001baa8:	56                   	push   esi
c001baa9:	53                   	push   ebx
c001baaa:	83 ec 14             	sub    esp,0x14
c001baad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bab1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bab5:	85 db                	test   ebx,ebx
c001bab7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001babb:	0f 94 c2             	sete   dl
c001babe:	85 f6                	test   esi,esi
c001bac0:	0f 94 c0             	sete   al
c001bac3:	08 c2                	or     dl,al
c001bac5:	75 68                	jne    c001bb2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bac7:	85 c9                	test   ecx,ecx
c001bac9:	74 64                	je     c001bb2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bacb:	83 ec 0c             	sub    esp,0xc
c001bace:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bad1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bad7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bade:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bae2:	50                   	push   eax
c001bae3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001bae6:	50                   	push   eax
c001bae7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baeb:	50                   	push   eax
c001baec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf0:	50                   	push   eax
c001baf1:	51                   	push   ecx
c001baf2:	e8 64 fe ff ff       	call   c001b95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baf7:	83 c4 20             	add    esp,0x20
c001bafa:	ba 01 00 00 00       	mov    edx,0x1
c001baff:	84 c0                	test   al,al
c001bb01:	74 31                	je     c001bb34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb0e:	89 03                	mov    DWORD PTR [ebx],eax
c001bb10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb14:	85 c0                	test   eax,eax
c001bb16:	ba 00 00 00 00       	mov    edx,0x0
c001bb1b:	0f 95 06             	setne  BYTE PTR [esi]
c001bb1e:	74 14                	je     c001bb34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb20:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb26:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb2d:	eb 05                	jmp    c001bb34 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb2f:	ba 04 00 00 00       	mov    edx,0x4
c001bb34:	83 c4 14             	add    esp,0x14
c001bb37:	89 d0                	mov    eax,edx
c001bb39:	5b                   	pop    ebx
c001bb3a:	5e                   	pop    esi
c001bb3b:	c3                   	ret    

c001bb3c <ISO9660::openDir(char const*, void**)>:
c001bb3c:	57                   	push   edi
c001bb3d:	56                   	push   esi
c001bb3e:	53                   	push   ebx
c001bb3f:	83 ec 10             	sub    esp,0x10
c001bb42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb4a:	85 f6                	test   esi,esi
c001bb4c:	0f 84 95 00 00 00    	je     c001bbe7 <ISO9660::openDir(char const*, void**)+0xab>
c001bb52:	85 ff                	test   edi,edi
c001bb54:	0f 84 8d 00 00 00    	je     c001bbe7 <ISO9660::openDir(char const*, void**)+0xab>
c001bb5a:	83 ec 0c             	sub    esp,0xc
c001bb5d:	6a 1c                	push   0x1c
c001bb5f:	e8 6f 04 ff ff       	call   c000bfd3 <malloc>
c001bb64:	89 07                	mov    DWORD PTR [edi],eax
c001bb66:	89 c3                	mov    ebx,eax
c001bb68:	59                   	pop    ecx
c001bb69:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb6d:	50                   	push   eax
c001bb6e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb71:	50                   	push   eax
c001bb72:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb76:	50                   	push   eax
c001bb77:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb7b:	50                   	push   eax
c001bb7c:	56                   	push   esi
c001bb7d:	e8 d9 fd ff ff       	call   c001b95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb82:	83 c4 20             	add    esp,0x20
c001bb85:	84 c0                	test   al,al
c001bb87:	74 07                	je     c001bb90 <ISO9660::openDir(char const*, void**)+0x54>
c001bb89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb8e:	75 21                	jne    c001bbb1 <ISO9660::openDir(char const*, void**)+0x75>
c001bb90:	52                   	push   edx
c001bb91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb95:	0f b6 c0             	movzx  eax,al
c001bb98:	50                   	push   eax
c001bb99:	68 76 33 02 c0       	push   0xc0023376
c001bb9e:	e8 62 36 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001bba3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bba7:	83 c4 10             	add    esp,0x10
c001bbaa:	b8 01 00 00 00       	mov    eax,0x1
c001bbaf:	eb 3b                	jmp    c001bbec <ISO9660::openDir(char const*, void**)+0xb0>
c001bbb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbb5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbb9:	89 03                	mov    DWORD PTR [ebx],eax
c001bbbb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbcd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbd4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbd7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbde:	8a 06                	mov    al,BYTE PTR [esi]
c001bbe0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbe3:	31 c0                	xor    eax,eax
c001bbe5:	eb 05                	jmp    c001bbec <ISO9660::openDir(char const*, void**)+0xb0>
c001bbe7:	b8 04 00 00 00       	mov    eax,0x4
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	5b                   	pop    ebx
c001bbf0:	5e                   	pop    esi
c001bbf1:	5f                   	pop    edi
c001bbf2:	c3                   	ret    
c001bbf3:	90                   	nop

c001bbf4 <ISO9660::ISO9660()>:
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbfb:	83 ec 0c             	sub    esp,0xc
c001bbfe:	50                   	push   eax
c001bbff:	e8 0e 39 ff ff       	call   c000f512 <Filesystem::Filesystem()>
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001bc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc10:	89 10                	mov    DWORD PTR [eax],edx
c001bc12:	90                   	nop
c001bc13:	83 c4 0c             	add    esp,0xc
c001bc16:	c3                   	ret    
c001bc17:	90                   	nop

c001bc18 <SoundChannel::~SoundChannel()>:
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc22:	83 ec 0c             	sub    esp,0xc
c001bc25:	50                   	push   eax
c001bc26:	e8 b8 03 ff ff       	call   c000bfe3 <free>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	90                   	nop
c001bc2f:	83 c4 0c             	add    esp,0xc
c001bc32:	c3                   	ret    
c001bc33:	90                   	nop

c001bc34 <SoundChannel::setSpeed(float)>:
c001bc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc38:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc3c:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc3f:	c3                   	ret    

c001bc40 <SoundChannel::getSpeed()>:
c001bc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc44:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc47:	c3                   	ret    

c001bc48 <SoundChannel::setVolume(int)>:
c001bc48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc4c:	83 f8 64             	cmp    eax,0x64
c001bc4f:	7e 05                	jle    c001bc56 <SoundChannel::setVolume(int)+0xe>
c001bc51:	b8 64 00 00 00       	mov    eax,0x64
c001bc56:	85 c0                	test   eax,eax
c001bc58:	79 02                	jns    c001bc5c <SoundChannel::setVolume(int)+0x14>
c001bc5a:	31 c0                	xor    eax,eax
c001bc5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc60:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc63:	c3                   	ret    

c001bc64 <SoundChannel::getVolume()>:
c001bc64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc68:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc6b:	c3                   	ret    

c001bc6c <SoundChannel::pause()>:
c001bc6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc70:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc74:	c3                   	ret    
c001bc75:	90                   	nop

c001bc76 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc76:	83 ec 1c             	sub    esp,0x1c
c001bc79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc7d:	e8 ea ff ff ff       	call   c001bc6c <SoundChannel::pause()>
c001bc82:	83 c4 04             	add    esp,0x4
c001bc85:	6a 50                	push   0x50
c001bc87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc8b:	e8 b8 ff ff ff       	call   c001bc48 <SoundChannel::setVolume(int)>
c001bc90:	83 c4 08             	add    esp,0x8
c001bc93:	d9 e8                	fld1   
c001bc95:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bc99:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bca0:	e8 8f ff ff ff       	call   c001bc34 <SoundChannel::setSpeed(float)>
c001bca5:	83 c4 08             	add    esp,0x8
c001bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcb0:	89 10                	mov    DWORD PTR [eax],edx
c001bcb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcc5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcc8:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bccd:	75 26                	jne    c001bcf5 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd3:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcdc:	0f af c2             	imul   eax,edx
c001bcdf:	89 c2                	mov    edx,eax
c001bce1:	c1 fa 1f             	sar    edx,0x1f
c001bce4:	83 e2 03             	and    edx,0x3
c001bce7:	01 d0                	add    eax,edx
c001bce9:	c1 f8 02             	sar    eax,0x2
c001bcec:	05 a0 0f 00 00       	add    eax,0xfa0
c001bcf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bcf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bcfd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd0f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd1a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd1d:	c1 e0 02             	shl    eax,0x2
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	50                   	push   eax
c001bd24:	e8 aa 02 ff ff       	call   c000bfd3 <malloc>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	89 c2                	mov    edx,eax
c001bd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd35:	83 ec 04             	sub    esp,0x4
c001bd38:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd3c:	50                   	push   eax
c001bd3d:	6a 01                	push   0x1
c001bd3f:	6a 04                	push   0x4
c001bd41:	e8 97 cb fe ff       	call   c00088dd <src_new>
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	89 c2                	mov    edx,eax
c001bd4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd56:	85 c0                	test   eax,eax
c001bd58:	74 10                	je     c001bd6a <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	68 f8 33 02 c0       	push   0xc00233f8
c001bd62:	e8 cd 9c ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	90                   	nop
c001bd6b:	83 c4 1c             	add    esp,0x1c
c001bd6e:	c3                   	ret    
c001bd6f:	90                   	nop

c001bd70 <SoundChannel::play()>:
c001bd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd74:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd78:	c3                   	ret    
c001bd79:	90                   	nop

c001bd7a <SoundChannel::paused()>:
c001bd7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd81:	c3                   	ret    

c001bd82 <SoundChannel::getSampleRate()>:
c001bd82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd86:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd88:	c3                   	ret    
c001bd89:	90                   	nop

c001bd8a <SoundChannel::getBits()>:
c001bd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd91:	c3                   	ret    

c001bd92 <SoundChannel::getBufferUsed()>:
c001bd92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd96:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bd99:	c3                   	ret    

c001bd9a <SoundChannel::getBufferSize()>:
c001bd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bda1:	c3                   	ret    

c001bda2 <SoundChannel::unbuffer(float*, int, int)>:
c001bda2:	53                   	push   ebx
c001bda3:	83 ec 40             	sub    esp,0x40
c001bda6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdaa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdb2:	db 03                	fild   DWORD PTR [ebx]
c001bdb4:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdb8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdbf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdc6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdda:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bddd:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bde1:	50                   	push   eax
c001bde2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bde5:	e8 ad c7 fe ff       	call   c0008597 <src_process>
c001bdea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bdf1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bdf4:	83 c4 0c             	add    esp,0xc
c001bdf7:	29 d0                	sub    eax,edx
c001bdf9:	c1 e0 02             	shl    eax,0x2
c001bdfc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bdff:	50                   	push   eax
c001be00:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be03:	50                   	push   eax
c001be04:	51                   	push   ecx
c001be05:	e8 3d 48 fe ff       	call   c0000647 <memmove>
c001be0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be0e:	83 c4 48             	add    esp,0x48
c001be11:	5b                   	pop    ebx
c001be12:	c3                   	ret    
c001be13:	90                   	nop

c001be14 <SoundChannel::buffer8(unsigned char*, int)>:
c001be14:	53                   	push   ebx
c001be15:	31 c0                	xor    eax,eax
c001be17:	83 ec 08             	sub    esp,0x8
c001be1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be1e:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be21:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be24:	74 35                	je     c001be5b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be26:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be2a:	7d 2f                	jge    c001be5b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be30:	d9 05 14 34 02 c0    	fld    DWORD PTR ds:0xc0023414
c001be36:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be3a:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be3f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be42:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be46:	40                   	inc    eax
c001be47:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be4a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be4d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be50:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be53:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be56:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be59:	eb c9                	jmp    c001be24 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be5b:	83 c4 08             	add    esp,0x8
c001be5e:	5b                   	pop    ebx
c001be5f:	c3                   	ret    

c001be60 <SoundDevice::SoundDevice(char const*)>:
c001be60:	83 ec 1c             	sub    esp,0x1c
c001be63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be67:	83 ec 08             	sub    esp,0x8
c001be6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be6e:	50                   	push   eax
c001be6f:	e8 96 49 ff ff       	call   c001080a <Device::Device(char const*)>
c001be74:	83 c4 10             	add    esp,0x10
c001be77:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001be7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be80:	89 10                	mov    DWORD PTR [eax],edx
c001be82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be86:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001be90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be94:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001be9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bea6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001beab:	7f 19                	jg     c001bec6 <SoundDevice::SoundDevice(char const*)+0x66>
c001bead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001beb5:	83 c2 54             	add    edx,0x54
c001beb8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bec0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bec4:	eb e0                	jmp    c001bea6 <SoundDevice::SoundDevice(char const*)+0x46>
c001bec6:	90                   	nop
c001bec7:	83 c4 1c             	add    esp,0x1c
c001beca:	c3                   	ret    
c001becb:	90                   	nop

c001becc <SoundDevice::~SoundDevice()>:
c001becc:	53                   	push   ebx
c001becd:	83 ec 18             	sub    esp,0x18
c001bed0:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001bed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bed9:	89 10                	mov    DWORD PTR [eax],edx
c001bedb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bee3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bee8:	7f 46                	jg     c001bf30 <SoundDevice::~SoundDevice()+0x64>
c001beea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bef2:	83 c2 54             	add    edx,0x54
c001bef5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bef9:	85 c0                	test   eax,eax
c001befb:	74 2d                	je     c001bf2a <SoundDevice::~SoundDevice()+0x5e>
c001befd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf05:	83 c2 54             	add    edx,0x54
c001bf08:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf0c:	85 db                	test   ebx,ebx
c001bf0e:	74 1a                	je     c001bf2a <SoundDevice::~SoundDevice()+0x5e>
c001bf10:	83 ec 0c             	sub    esp,0xc
c001bf13:	53                   	push   ebx
c001bf14:	e8 ff fc ff ff       	call   c001bc18 <SoundChannel::~SoundChannel()>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	83 ec 08             	sub    esp,0x8
c001bf1f:	6a 2c                	push   0x2c
c001bf21:	53                   	push   ebx
c001bf22:	e8 b8 31 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001bf27:	83 c4 10             	add    esp,0x10
c001bf2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf2e:	eb b3                	jmp    c001bee3 <SoundDevice::~SoundDevice()+0x17>
c001bf30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf34:	83 ec 0c             	sub    esp,0xc
c001bf37:	50                   	push   eax
c001bf38:	e8 83 45 ff ff       	call   c00104c0 <Device::~Device()>
c001bf3d:	83 c4 10             	add    esp,0x10
c001bf40:	90                   	nop
c001bf41:	83 c4 18             	add    esp,0x18
c001bf44:	5b                   	pop    ebx
c001bf45:	c3                   	ret    

c001bf46 <SoundDevice::~SoundDevice()>:
c001bf46:	83 ec 0c             	sub    esp,0xc
c001bf49:	83 ec 0c             	sub    esp,0xc
c001bf4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf50:	e8 77 ff ff ff       	call   c001becc <SoundDevice::~SoundDevice()>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	83 ec 08             	sub    esp,0x8
c001bf5b:	68 e4 01 00 00       	push   0x1e4
c001bf60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf64:	e8 76 31 ff ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	83 c4 0c             	add    esp,0xc
c001bf6f:	c3                   	ret    

c001bf70 <SoundDevice::getFreeChannelNum()>:
c001bf70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf74:	31 c0                	xor    eax,eax
c001bf76:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf7e:	74 09                	je     c001bf89 <SoundDevice::getFreeChannelNum()+0x19>
c001bf80:	40                   	inc    eax
c001bf81:	83 f8 20             	cmp    eax,0x20
c001bf84:	75 f0                	jne    c001bf76 <SoundDevice::getFreeChannelNum()+0x6>
c001bf86:	83 c8 ff             	or     eax,0xffffffff
c001bf89:	c3                   	ret    

c001bf8a <SoundDevice::addChannel(SoundChannel*)>:
c001bf8a:	56                   	push   esi
c001bf8b:	53                   	push   ebx
c001bf8c:	51                   	push   ecx
c001bf8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bf95:	53                   	push   ebx
c001bf96:	e8 d5 ff ff ff       	call   c001bf70 <SoundDevice::getFreeChannelNum()>
c001bf9b:	5a                   	pop    edx
c001bf9c:	83 f8 ff             	cmp    eax,0xffffffff
c001bf9f:	74 51                	je     c001bff2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfa1:	85 f6                	test   esi,esi
c001bfa3:	74 4d                	je     c001bff2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfa5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfac:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfb3:	75 30                	jne    c001bfe5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfb5:	83 ec 0c             	sub    esp,0xc
c001bfb8:	56                   	push   esi
c001bfb9:	e8 c4 fd ff ff       	call   c001bd82 <SoundChannel::getSampleRate()>
c001bfbe:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfc4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfc7:	e8 be fd ff ff       	call   c001bd8a <SoundChannel::getBits()>
c001bfcc:	83 c4 0c             	add    esp,0xc
c001bfcf:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfd5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfd7:	50                   	push   eax
c001bfd8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfde:	53                   	push   ebx
c001bfdf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bfeb:	b8 01 00 00 00       	mov    eax,0x1
c001bff0:	eb 03                	jmp    c001bff5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bff2:	83 c8 ff             	or     eax,0xffffffff
c001bff5:	5a                   	pop    edx
c001bff6:	5b                   	pop    ebx
c001bff7:	5e                   	pop    esi
c001bff8:	c3                   	ret    
c001bff9:	90                   	nop

c001bffa <SoundDevice::removeChannel(int)>:
c001bffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c002:	83 fa 1f             	cmp    edx,0x1f
c001c005:	77 23                	ja     c001c02a <SoundDevice::removeChannel(int)+0x30>
c001c007:	8d 14 90             	lea    edx,[eax+edx*4]
c001c00a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c011:	74 17                	je     c001c02a <SoundDevice::removeChannel(int)+0x30>
c001c013:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c01d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c023:	75 05                	jne    c001c02a <SoundDevice::removeChannel(int)+0x30>
c001c025:	8b 00                	mov    eax,DWORD PTR [eax]
c001c027:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c02a:	c3                   	ret    
c001c02b:	90                   	nop

c001c02c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c02c:	56                   	push   esi
c001c02d:	53                   	push   ebx
c001c02e:	31 db                	xor    ebx,ebx
c001c030:	83 ec 14             	sub    esp,0x14
c001c033:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c037:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c03b:	7d 55                	jge    c001c092 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c03d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c041:	d9 e8                	fld1   
c001c043:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c046:	d8 0d 50 34 02 c0    	fmul   DWORD PTR ds:0xc0023450
c001c04c:	d8 0d 54 34 02 c0    	fmul   DWORD PTR ds:0xc0023454
c001c052:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c056:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c05a:	d8 15 58 34 02 c0    	fcom   DWORD PTR ds:0xc0023458
c001c060:	df e0                	fnstsw ax
c001c062:	9e                   	sahf   
c001c063:	72 08                	jb     c001c06d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c065:	dd d8                	fstp   st(0)
c001c067:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c06b:	eb 22                	jmp    c001c08f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c06d:	d9 ee                	fldz   
c001c06f:	d8 d9                	fcomp  st(1)
c001c071:	df e0                	fnstsw ax
c001c073:	9e                   	sahf   
c001c074:	72 08                	jb     c001c07e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c076:	dd d8                	fstp   st(0)
c001c078:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c07c:	eb 11                	jmp    c001c08f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c07e:	83 ec 10             	sub    esp,0x10
c001c081:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c084:	e8 c3 36 00 00       	call   c001f74c <lrintf>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c08f:	43                   	inc    ebx
c001c090:	eb a5                	jmp    c001c037 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c092:	83 c4 14             	add    esp,0x14
c001c095:	5b                   	pop    ebx
c001c096:	5e                   	pop    esi
c001c097:	c3                   	ret    

c001c098 <SoundDevice::getAudio(int, float*, float*)>:
c001c098:	55                   	push   ebp
c001c099:	57                   	push   edi
c001c09a:	56                   	push   esi
c001c09b:	53                   	push   ebx
c001c09c:	31 db                	xor    ebx,ebx
c001c09e:	83 ec 20             	sub    esp,0x20
c001c0a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0a5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0a9:	c1 e0 02             	shl    eax,0x2
c001c0ac:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0b0:	50                   	push   eax
c001c0b1:	6a 00                	push   0x0
c001c0b3:	55                   	push   ebp
c001c0b4:	e8 fc 45 fe ff       	call   c00006b5 <memset>
c001c0b9:	83 c4 10             	add    esp,0x10
c001c0bc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0c0:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0c7:	85 c0                	test   eax,eax
c001c0c9:	0f 84 8c 00 00 00    	je     c001c15b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0cf:	83 ec 0c             	sub    esp,0xc
c001c0d2:	50                   	push   eax
c001c0d3:	e8 a2 fc ff ff       	call   c001bd7a <SoundChannel::paused()>
c001c0d8:	83 c4 10             	add    esp,0x10
c001c0db:	84 c0                	test   al,al
c001c0dd:	75 7c                	jne    c001c15b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0e9:	e8 76 fb ff ff       	call   c001bc64 <SoundChannel::getVolume()>
c001c0ee:	83 c4 10             	add    esp,0x10
c001c0f1:	85 c0                	test   eax,eax
c001c0f3:	74 66                	je     c001c15b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0f5:	83 ec 0c             	sub    esp,0xc
c001c0f8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0ff:	e8 60 fb ff ff       	call   c001bc64 <SoundChannel::getVolume()>
c001c104:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c108:	d9 05 5c 34 02 c0    	fld    DWORD PTR ds:0xc002345c
c001c10e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c112:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c116:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c11a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c120:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c124:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c12b:	e8 72 fc ff ff       	call   c001bda2 <SoundChannel::unbuffer(float*, int, int)>
c001c130:	83 c4 20             	add    esp,0x20
c001c133:	31 d2                	xor    edx,edx
c001c135:	39 c2                	cmp    edx,eax
c001c137:	7d 1c                	jge    c001c155 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c139:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c13d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c141:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c144:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c14a:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c14e:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c152:	42                   	inc    edx
c001c153:	eb e0                	jmp    c001c135 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c155:	39 c7                	cmp    edi,eax
c001c157:	7e 02                	jle    c001c15b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c159:	89 c7                	mov    edi,eax
c001c15b:	43                   	inc    ebx
c001c15c:	83 fb 20             	cmp    ebx,0x20
c001c15f:	0f 85 5b ff ff ff    	jne    c001c0c0 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c165:	83 c4 1c             	add    esp,0x1c
c001c168:	89 f8                	mov    eax,edi
c001c16a:	5b                   	pop    ebx
c001c16b:	5e                   	pop    esi
c001c16c:	5f                   	pop    edi
c001c16d:	5d                   	pop    ebp
c001c16e:	c3                   	ret    
c001c16f:	90                   	nop

c001c170 <PCI::open(int, int, void*)>:
c001c170:	83 ec 18             	sub    esp,0x18
c001c173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c177:	8b 10                	mov    edx,DWORD PTR [eax]
c001c179:	50                   	push   eax
c001c17a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c17d:	31 c0                	xor    eax,eax
c001c17f:	83 c4 1c             	add    esp,0x1c
c001c182:	c3                   	ret    
c001c183:	90                   	nop

c001c184 <PCI::close(int, int, void*)>:
c001c184:	31 c0                	xor    eax,eax
c001c186:	c3                   	ret    
c001c187:	90                   	nop

c001c188 <PCI::PCI()>:
c001c188:	83 ec 0c             	sub    esp,0xc
c001c18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18f:	83 ec 08             	sub    esp,0x8
c001c192:	68 60 34 02 c0       	push   0xc0023460
c001c197:	50                   	push   eax
c001c198:	e8 f7 3c ff ff       	call   c000fe94 <Bus::Bus(char const*)>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001c1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a9:	89 10                	mov    DWORD PTR [eax],edx
c001c1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1b5:	31 d2                	xor    edx,edx
c001c1b7:	88 c2                	mov    dl,al
c001c1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1ce:	31 d2                	xor    edx,edx
c001c1d0:	88 c2                	mov    dl,al
c001c1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1e5:	8d 50 01             	lea    edx,[eax+0x1]
c001c1e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1ec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c1f2:	31 d2                	xor    edx,edx
c001c1f4:	88 c2                	mov    dl,al
c001c1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c1fe:	83 c9 c0             	or     ecx,0xffffffc0
c001c201:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c205:	90                   	nop
c001c206:	83 c4 0c             	add    esp,0xc
c001c209:	c3                   	ret    

c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c20e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c213:	c1 e0 10             	shl    eax,0x10
c001c216:	89 ca                	mov    edx,ecx
c001c218:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c21e:	09 d0                	or     eax,edx
c001c220:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c225:	c1 e2 08             	shl    edx,0x8
c001c228:	09 d0                	or     eax,edx
c001c22a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c22f:	c1 e2 0b             	shl    edx,0xb
c001c232:	09 d0                	or     eax,edx
c001c234:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c239:	0d 00 00 00 80       	or     eax,0x80000000
c001c23e:	ef                   	out    dx,eax
c001c23f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c244:	ed                   	in     eax,dx
c001c245:	83 e1 02             	and    ecx,0x2
c001c248:	0f b6 c9             	movzx  ecx,cl
c001c24b:	c1 e1 03             	shl    ecx,0x3
c001c24e:	d3 e8                	shr    eax,cl
c001c250:	c3                   	ret    
c001c251:	90                   	nop

c001c252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c252:	6a 00                	push   0x0
c001c254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c259:	50                   	push   eax
c001c25a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c25f:	50                   	push   eax
c001c260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c265:	50                   	push   eax
c001c266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c26a:	e8 9b ff ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c26f:	83 c4 14             	add    esp,0x14
c001c272:	c3                   	ret    
c001c273:	90                   	nop

c001c274 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c274:	6a 0e                	push   0xe
c001c276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27b:	50                   	push   eax
c001c27c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c281:	50                   	push   eax
c001c282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c287:	50                   	push   eax
c001c288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c28c:	e8 79 ff ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c291:	83 c4 14             	add    esp,0x14
c001c294:	0f b6 c0             	movzx  eax,al
c001c297:	c3                   	ret    

c001c298 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c298:	55                   	push   ebp
c001c299:	57                   	push   edi
c001c29a:	56                   	push   esi
c001c29b:	53                   	push   ebx
c001c29c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2a1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2a6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2ab:	6a 0a                	push   0xa
c001c2ad:	56                   	push   esi
c001c2ae:	55                   	push   ebp
c001c2af:	57                   	push   edi
c001c2b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2b4:	e8 51 ff ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2b9:	6a 0a                	push   0xa
c001c2bb:	89 c3                	mov    ebx,eax
c001c2bd:	56                   	push   esi
c001c2be:	55                   	push   ebp
c001c2bf:	57                   	push   edi
c001c2c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2c4:	e8 41 ff ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c9:	83 c4 28             	add    esp,0x28
c001c2cc:	0f b6 db             	movzx  ebx,bl
c001c2cf:	25 00 ff 00 00       	and    eax,0xff00
c001c2d4:	09 d8                	or     eax,ebx
c001c2d6:	5b                   	pop    ebx
c001c2d7:	5e                   	pop    esi
c001c2d8:	5f                   	pop    edi
c001c2d9:	5d                   	pop    ebp
c001c2da:	c3                   	ret    
c001c2db:	90                   	nop

c001c2dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2dc:	6a 08                	push   0x8
c001c2de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2e3:	50                   	push   eax
c001c2e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2e9:	50                   	push   eax
c001c2ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2ef:	50                   	push   eax
c001c2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2f4:	e8 11 ff ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2f9:	83 c4 14             	add    esp,0x14
c001c2fc:	0f b6 c4             	movzx  eax,ah
c001c2ff:	c3                   	ret    

c001c300 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c300:	6a 08                	push   0x8
c001c302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c307:	50                   	push   eax
c001c308:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c30d:	50                   	push   eax
c001c30e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c313:	50                   	push   eax
c001c314:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c318:	e8 ed fe ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c31d:	83 c4 14             	add    esp,0x14
c001c320:	c3                   	ret    
c001c321:	90                   	nop

c001c322 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c322:	6a 3c                	push   0x3c
c001c324:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c329:	50                   	push   eax
c001c32a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c32f:	50                   	push   eax
c001c330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c335:	50                   	push   eax
c001c336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c33a:	e8 cb fe ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c33f:	83 c4 14             	add    esp,0x14
c001c342:	c3                   	ret    
c001c343:	90                   	nop

c001c344 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c344:	6a 18                	push   0x18
c001c346:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c34b:	50                   	push   eax
c001c34c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c351:	50                   	push   eax
c001c352:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c357:	50                   	push   eax
c001c358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c35c:	e8 a9 fe ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c361:	83 c4 14             	add    esp,0x14
c001c364:	0f b6 c4             	movzx  eax,ah
c001c367:	c3                   	ret    

c001c368 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c368:	55                   	push   ebp
c001c369:	57                   	push   edi
c001c36a:	56                   	push   esi
c001c36b:	53                   	push   ebx
c001c36c:	50                   	push   eax
c001c36d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c371:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c376:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c37d:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c382:	8d 43 12             	lea    eax,[ebx+0x12]
c001c385:	83 c3 10             	add    ebx,0x10
c001c388:	0f b6 c0             	movzx  eax,al
c001c38b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c390:	50                   	push   eax
c001c391:	51                   	push   ecx
c001c392:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c396:	57                   	push   edi
c001c397:	55                   	push   ebp
c001c398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c39c:	e8 69 fe ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3a1:	0f b6 db             	movzx  ebx,bl
c001c3a4:	53                   	push   ebx
c001c3a5:	89 c6                	mov    esi,eax
c001c3a7:	c1 e6 10             	shl    esi,0x10
c001c3aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3ae:	51                   	push   ecx
c001c3af:	57                   	push   edi
c001c3b0:	55                   	push   ebp
c001c3b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3b5:	e8 50 fe ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3ba:	83 c4 2c             	add    esp,0x2c
c001c3bd:	0f b7 c0             	movzx  eax,ax
c001c3c0:	5b                   	pop    ebx
c001c3c1:	09 f0                	or     eax,esi
c001c3c3:	5e                   	pop    esi
c001c3c4:	5f                   	pop    edi
c001c3c5:	5d                   	pop    ebp
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3c8:	53                   	push   ebx
c001c3c9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3ce:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3d3:	c1 e1 10             	shl    ecx,0x10
c001c3d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3da:	25 fc 00 00 00       	and    eax,0xfc
c001c3df:	09 c1                	or     ecx,eax
c001c3e1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3e6:	c1 e0 08             	shl    eax,0x8
c001c3e9:	09 c1                	or     ecx,eax
c001c3eb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c3f0:	c1 e0 0b             	shl    eax,0xb
c001c3f3:	09 c1                	or     ecx,eax
c001c3f5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c3fb:	89 c8                	mov    eax,ecx
c001c3fd:	ef                   	out    dx,eax
c001c3fe:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c403:	ed                   	in     eax,dx
c001c404:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c409:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c40e:	74 0a                	je     c001c41a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c410:	0f b7 d8             	movzx  ebx,ax
c001c413:	89 d0                	mov    eax,edx
c001c415:	c1 e0 10             	shl    eax,0x10
c001c418:	eb 05                	jmp    c001c41f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c41a:	66 31 c0             	xor    ax,ax
c001c41d:	89 d3                	mov    ebx,edx
c001c41f:	09 c3                	or     ebx,eax
c001c421:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c426:	89 c8                	mov    eax,ecx
c001c428:	ef                   	out    dx,eax
c001c429:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c42e:	89 d8                	mov    eax,ebx
c001c430:	ef                   	out    dx,eax
c001c431:	5b                   	pop    ebx
c001c432:	c3                   	ret    
c001c433:	90                   	nop

c001c434 <PCI::checkBus(unsigned char)>:
c001c434:	56                   	push   esi
c001c435:	31 f6                	xor    esi,esi
c001c437:	53                   	push   ebx
c001c438:	51                   	push   ecx
c001c439:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c43d:	52                   	push   edx
c001c43e:	56                   	push   esi
c001c43f:	46                   	inc    esi
c001c440:	0f b6 c3             	movzx  eax,bl
c001c443:	50                   	push   eax
c001c444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c448:	e8 4d 03 00 00       	call   c001c79a <PCI::checkDevice(unsigned char, unsigned char)>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	83 fe 20             	cmp    esi,0x20
c001c453:	75 e8                	jne    c001c43d <PCI::checkBus(unsigned char)+0x9>
c001c455:	58                   	pop    eax
c001c456:	5b                   	pop    ebx
c001c457:	5e                   	pop    esi
c001c458:	c3                   	ret    
c001c459:	90                   	nop

c001c45a <PCI::foundDevice(PCIDeviceInfo)>:
c001c45a:	55                   	push   ebp
c001c45b:	57                   	push   edi
c001c45c:	56                   	push   esi
c001c45d:	53                   	push   ebx
c001c45e:	83 ec 1c             	sub    esp,0x1c
c001c461:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c465:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c46b:	0f 84 51 01 00 00    	je     c001c5c2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c471:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c475:	66 81 f9 06 04       	cmp    cx,0x406
c001c47a:	75 2c                	jne    c001c4a8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c47c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c481:	50                   	push   eax
c001c482:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c487:	50                   	push   eax
c001c488:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c48d:	50                   	push   eax
c001c48e:	56                   	push   esi
c001c48f:	e8 b0 fe ff ff       	call   c001c344 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c494:	0f b6 c0             	movzx  eax,al
c001c497:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c49b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c49f:	83 c4 2c             	add    esp,0x2c
c001c4a2:	5b                   	pop    ebx
c001c4a3:	5e                   	pop    esi
c001c4a4:	5f                   	pop    edi
c001c4a5:	5d                   	pop    ebp
c001c4a6:	eb 8c                	jmp    c001c434 <PCI::checkBus(unsigned char)>
c001c4a8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4ac:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4b6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4ba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4be:	88 d3                	mov    bl,dl
c001c4c0:	85 c0                	test   eax,eax
c001c4c2:	74 33                	je     c001c4f7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4c7:	85 d2                	test   edx,edx
c001c4c9:	74 28                	je     c001c4f3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4cb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4d1:	31 ef                	xor    edi,ebp
c001c4d3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4d9:	75 18                	jne    c001c4f3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4df:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4e5:	75 0c                	jne    c001c4f3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4ed:	0f 84 cf 00 00 00    	je     c001c5c2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c4f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f5:	eb c9                	jmp    c001c4c0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c4f7:	66 81 f9 01 06       	cmp    cx,0x601
c001c4fc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c500:	75 18                	jne    c001c51a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	68 58 01 00 00       	push   0x158
c001c50a:	e8 c1 2b ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001c50f:	59                   	pop    ecx
c001c510:	89 c5                	mov    ebp,eax
c001c512:	5f                   	pop    edi
c001c513:	68 68 34 02 c0       	push   0xc0023468
c001c518:	eb 7d                	jmp    c001c597 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c51a:	66 81 f9 01 01       	cmp    cx,0x101
c001c51f:	75 60                	jne    c001c581 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c521:	83 ec 0c             	sub    esp,0xc
c001c524:	68 70 02 00 00       	push   0x270
c001c529:	e8 a2 2b ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001c52e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c531:	89 c5                	mov    ebp,eax
c001c533:	e8 26 03 00 00       	call   c001c85e <IDE::IDE()>
c001c538:	58                   	pop    eax
c001c539:	5a                   	pop    edx
c001c53a:	55                   	push   ebp
c001c53b:	56                   	push   esi
c001c53c:	e8 d9 40 ff ff       	call   c001061a <Device::addChild(Device*)>
c001c541:	83 ec 1c             	sub    esp,0x1c
c001c544:	b9 09 00 00 00       	mov    ecx,0x9
c001c549:	fc                   	cld    
c001c54a:	89 e7                	mov    edi,esp
c001c54c:	89 de                	mov    esi,ebx
c001c54e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c550:	55                   	push   ebp
c001c551:	e8 a2 3f ff ff       	call   c00104f8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c556:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c559:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c55d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c565:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c56d:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c575:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c578:	83 c4 4c             	add    esp,0x4c
c001c57b:	5b                   	pop    ebx
c001c57c:	5e                   	pop    esi
c001c57d:	5f                   	pop    edi
c001c57e:	5d                   	pop    ebp
c001c57f:	ff e0                	jmp    eax
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	68 58 01 00 00       	push   0x158
c001c589:	e8 42 2b ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001c58e:	59                   	pop    ecx
c001c58f:	89 c5                	mov    ebp,eax
c001c591:	5f                   	pop    edi
c001c592:	68 87 34 02 c0       	push   0xc0023487
c001c597:	55                   	push   ebp
c001c598:	e8 69 43 ff ff       	call   c0010906 <DriverlessDevice::DriverlessDevice(char const*)>
c001c59d:	58                   	pop    eax
c001c59e:	5a                   	pop    edx
c001c59f:	55                   	push   ebp
c001c5a0:	56                   	push   esi
c001c5a1:	e8 74 40 ff ff       	call   c001061a <Device::addChild(Device*)>
c001c5a6:	b9 09 00 00 00       	mov    ecx,0x9
c001c5ab:	fc                   	cld    
c001c5ac:	89 df                	mov    edi,ebx
c001c5ae:	89 de                	mov    esi,ebx
c001c5b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5b2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5b6:	83 c4 2c             	add    esp,0x2c
c001c5b9:	5b                   	pop    ebx
c001c5ba:	5e                   	pop    esi
c001c5bb:	5f                   	pop    edi
c001c5bc:	5d                   	pop    ebp
c001c5bd:	e9 36 3f ff ff       	jmp    c00104f8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5c2:	83 c4 1c             	add    esp,0x1c
c001c5c5:	5b                   	pop    ebx
c001c5c6:	5e                   	pop    esi
c001c5c7:	5f                   	pop    edi
c001c5c8:	5d                   	pop    ebp
c001c5c9:	c3                   	ret    

c001c5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5ca:	55                   	push   ebp
c001c5cb:	57                   	push   edi
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	83 ec 5c             	sub    esp,0x5c
c001c5d1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5d9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5e9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5ee:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c5f3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c5f8:	6a 0c                	push   0xc
c001c5fa:	55                   	push   ebp
c001c5fb:	53                   	push   ebx
c001c5fc:	57                   	push   edi
c001c5fd:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c604:	e8 01 fc ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c609:	83 c4 0c             	add    esp,0xc
c001c60c:	6a 00                	push   0x0
c001c60e:	68 a1 34 02 c0       	push   0xc00234a1
c001c613:	e8 ed 2b ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001c618:	55                   	push   ebp
c001c619:	53                   	push   ebx
c001c61a:	57                   	push   edi
c001c61b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c622:	e8 71 fc ff ff       	call   c001c298 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c627:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c62c:	83 c4 20             	add    esp,0x20
c001c62f:	55                   	push   ebp
c001c630:	53                   	push   ebx
c001c631:	57                   	push   edi
c001c632:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c636:	e8 e7 fc ff ff       	call   c001c322 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c63b:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c642:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c646:	55                   	push   ebp
c001c647:	53                   	push   ebx
c001c648:	57                   	push   edi
c001c649:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c650:	e8 b5 fb ff ff       	call   c001c20a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c655:	0f b6 c4             	movzx  eax,ah
c001c658:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c65c:	83 c4 18             	add    esp,0x18
c001c65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c663:	68 b5 34 02 c0       	push   0xc00234b5
c001c668:	e8 98 2b ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001c66d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c671:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c675:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c683:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c68a:	74 6c                	je     c001c6f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c68c:	31 f6                	xor    esi,esi
c001c68e:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001c694:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c69a:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6a0:	7e 56                	jle    c001c6f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6a2:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6a5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6ac:	39 cb                	cmp    ebx,ecx
c001c6ae:	75 45                	jne    c001c6f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6b0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6b7:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6bb:	75 38                	jne    c001c6f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6bd:	83 ec 0c             	sub    esp,0xc
c001c6c0:	68 c4 34 02 c0       	push   0xc00234c4
c001c6c5:	e8 3b 2b ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001c6ca:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001c6d0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6d6:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6de:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6e2:	52                   	push   edx
c001c6e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6e7:	53                   	push   ebx
c001c6e8:	68 e9 34 02 c0       	push   0xc00234e9
c001c6ed:	e8 13 2b ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001c6f2:	83 c4 20             	add    esp,0x20
c001c6f5:	46                   	inc    esi
c001c6f6:	eb 96                	jmp    c001c68e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c6f8:	31 d2                	xor    edx,edx
c001c6fa:	83 ec 0c             	sub    esp,0xc
c001c6fd:	55                   	push   ebp
c001c6fe:	53                   	push   ebx
c001c6ff:	57                   	push   edi
c001c700:	52                   	push   edx
c001c701:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c705:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c70c:	e8 57 fc ff ff       	call   c001c368 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c711:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c715:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c719:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c71d:	42                   	inc    edx
c001c71e:	83 c4 20             	add    esp,0x20
c001c721:	83 fa 06             	cmp    edx,0x6
c001c724:	75 d4                	jne    c001c6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c726:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c72a:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c72e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c732:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c736:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c73a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c73e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c743:	86 e0                	xchg   al,ah
c001c745:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c74a:	55                   	push   ebp
c001c74b:	53                   	push   ebx
c001c74c:	57                   	push   edi
c001c74d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c751:	e8 86 fb ff ff       	call   c001c2dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c756:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c75a:	55                   	push   ebp
c001c75b:	53                   	push   ebx
c001c75c:	57                   	push   edi
c001c75d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c764:	e8 e9 fa ff ff       	call   c001c252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c769:	83 ec 0c             	sub    esp,0xc
c001c76c:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c771:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c775:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c779:	b9 09 00 00 00       	mov    ecx,0x9
c001c77e:	fc                   	cld    
c001c77f:	89 e7                	mov    edi,esp
c001c781:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c783:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c78a:	e8 cb fc ff ff       	call   c001c45a <PCI::foundDevice(PCIDeviceInfo)>
c001c78f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c795:	5b                   	pop    ebx
c001c796:	5e                   	pop    esi
c001c797:	5f                   	pop    edi
c001c798:	5d                   	pop    ebp
c001c799:	c3                   	ret    

c001c79a <PCI::checkDevice(unsigned char, unsigned char)>:
c001c79a:	55                   	push   ebp
c001c79b:	57                   	push   edi
c001c79c:	56                   	push   esi
c001c79d:	53                   	push   ebx
c001c79e:	83 ec 0c             	sub    esp,0xc
c001c7a1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7a6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7aa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7af:	6a 00                	push   0x0
c001c7b1:	56                   	push   esi
c001c7b2:	57                   	push   edi
c001c7b3:	55                   	push   ebp
c001c7b4:	e8 99 fa ff ff       	call   c001c252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7b9:	6a 00                	push   0x0
c001c7bb:	56                   	push   esi
c001c7bc:	57                   	push   edi
c001c7bd:	55                   	push   ebp
c001c7be:	e8 07 fe ff ff       	call   c001c5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7c3:	83 c4 20             	add    esp,0x20
c001c7c6:	6a 00                	push   0x0
c001c7c8:	56                   	push   esi
c001c7c9:	57                   	push   edi
c001c7ca:	55                   	push   ebp
c001c7cb:	e8 a4 fa ff ff       	call   c001c274 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7d0:	83 c4 10             	add    esp,0x10
c001c7d3:	84 c0                	test   al,al
c001c7d5:	79 27                	jns    c001c7fe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7d7:	bb 01 00 00 00       	mov    ebx,0x1
c001c7dc:	53                   	push   ebx
c001c7dd:	56                   	push   esi
c001c7de:	57                   	push   edi
c001c7df:	55                   	push   ebp
c001c7e0:	e8 6d fa ff ff       	call   c001c252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7e5:	83 c4 10             	add    esp,0x10
c001c7e8:	66 40                	inc    ax
c001c7ea:	74 0c                	je     c001c7f8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7ec:	53                   	push   ebx
c001c7ed:	56                   	push   esi
c001c7ee:	57                   	push   edi
c001c7ef:	55                   	push   ebp
c001c7f0:	e8 d5 fd ff ff       	call   c001c5ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	43                   	inc    ebx
c001c7f9:	83 fb 08             	cmp    ebx,0x8
c001c7fc:	75 de                	jne    c001c7dc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c7fe:	83 c4 0c             	add    esp,0xc
c001c801:	5b                   	pop    ebx
c001c802:	5e                   	pop    esi
c001c803:	5f                   	pop    edi
c001c804:	5d                   	pop    ebp
c001c805:	c3                   	ret    

c001c806 <PCI::detect()>:
c001c806:	56                   	push   esi
c001c807:	53                   	push   ebx
c001c808:	53                   	push   ebx
c001c809:	31 db                	xor    ebx,ebx
c001c80b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c80f:	6a 00                	push   0x0
c001c811:	6a 00                	push   0x0
c001c813:	6a 00                	push   0x0
c001c815:	56                   	push   esi
c001c816:	e8 59 fa ff ff       	call   c001c274 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	a8 80                	test   al,0x80
c001c820:	75 21                	jne    c001c843 <PCI::detect()+0x3d>
c001c822:	51                   	push   ecx
c001c823:	51                   	push   ecx
c001c824:	6a 00                	push   0x0
c001c826:	56                   	push   esi
c001c827:	e8 08 fc ff ff       	call   c001c434 <PCI::checkBus(unsigned char)>
c001c82c:	83 c4 10             	add    esp,0x10
c001c82f:	eb 24                	jmp    c001c855 <PCI::detect()+0x4f>
c001c831:	52                   	push   edx
c001c832:	52                   	push   edx
c001c833:	53                   	push   ebx
c001c834:	43                   	inc    ebx
c001c835:	56                   	push   esi
c001c836:	e8 f9 fb ff ff       	call   c001c434 <PCI::checkBus(unsigned char)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	83 fb 08             	cmp    ebx,0x8
c001c841:	74 12                	je     c001c855 <PCI::detect()+0x4f>
c001c843:	53                   	push   ebx
c001c844:	6a 00                	push   0x0
c001c846:	6a 00                	push   0x0
c001c848:	56                   	push   esi
c001c849:	e8 04 fa ff ff       	call   c001c252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	66 40                	inc    ax
c001c853:	74 dc                	je     c001c831 <PCI::detect()+0x2b>
c001c855:	58                   	pop    eax
c001c856:	5b                   	pop    ebx
c001c857:	5e                   	pop    esi
c001c858:	c3                   	ret    
c001c859:	90                   	nop

c001c85a <IDE::close(int, int, void*)>:
c001c85a:	83 c8 ff             	or     eax,0xffffffff
c001c85d:	c3                   	ret    

c001c85e <IDE::IDE()>:
c001c85e:	83 ec 0c             	sub    esp,0xc
c001c861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c865:	83 ec 08             	sub    esp,0x8
c001c868:	68 30 35 02 c0       	push   0xc0023530
c001c86d:	50                   	push   eax
c001c86e:	e8 29 41 ff ff       	call   c001099c <HardDiskController::HardDiskController(char const*)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001c87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87f:	89 10                	mov    DWORD PTR [eax],edx
c001c881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c885:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c88c:	90                   	nop
c001c88d:	83 c4 0c             	add    esp,0xc
c001c890:	c3                   	ret    
c001c891:	90                   	nop

c001c892 <IDE::prepareInterrupt(unsigned char)>:
c001c892:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c897:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c89b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8a3:	c3                   	ret    

c001c8a4 <selectDrive(unsigned char, unsigned char)>:
c001c8a4:	c3                   	ret    
c001c8a5:	90                   	nop

c001c8a6 <IDE::getBase(unsigned char)>:
c001c8a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8af:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8b7:	c3                   	ret    

c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8b8:	55                   	push   ebp
c001c8b9:	57                   	push   edi
c001c8ba:	56                   	push   esi
c001c8bb:	53                   	push   ebx
c001c8bc:	83 ec 1c             	sub    esp,0x1c
c001c8bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8d2:	80 f9 03             	cmp    cl,0x3
c001c8d5:	77 51                	ja     c001c928 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8d7:	0f b6 f2             	movzx  esi,dl
c001c8da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8de:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8e1:	0f b6 db             	movzx  ebx,bl
c001c8e4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8e8:	83 ca 80             	or     edx,0xffffff80
c001c8eb:	0f b6 d2             	movzx  edx,dl
c001c8ee:	52                   	push   edx
c001c8ef:	6a 0c                	push   0xc
c001c8f1:	56                   	push   esi
c001c8f2:	57                   	push   edi
c001c8f3:	e8 c0 ff ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c8fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c901:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c905:	ee                   	out    dx,al
c001c906:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c90b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c90f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c913:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c917:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c91f:	83 c4 2c             	add    esp,0x2c
c001c922:	5b                   	pop    ebx
c001c923:	5e                   	pop    esi
c001c924:	5f                   	pop    edi
c001c925:	5d                   	pop    ebp
c001c926:	eb 90                	jmp    c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c928:	80 fb 07             	cmp    bl,0x7
c001c92b:	77 12                	ja     c001c93f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c92d:	0f b6 d2             	movzx  edx,dl
c001c930:	0f b6 db             	movzx  ebx,bl
c001c933:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c93b:	89 da                	mov    edx,ebx
c001c93d:	eb 2f                	jmp    c001c96e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c93f:	80 fb 0d             	cmp    bl,0xd
c001c942:	77 13                	ja     c001c957 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c944:	0f b6 d2             	movzx  edx,dl
c001c947:	0f b6 db             	movzx  ebx,bl
c001c94a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c951:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c955:	eb 17                	jmp    c001c96e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c957:	80 fb 15             	cmp    bl,0x15
c001c95a:	77 13                	ja     c001c96f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c95c:	0f b6 d2             	movzx  edx,dl
c001c95f:	0f b6 db             	movzx  ebx,bl
c001c962:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c96a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c96e:	ee                   	out    dx,al
c001c96f:	83 c4 1c             	add    esp,0x1c
c001c972:	5b                   	pop    ebx
c001c973:	5e                   	pop    esi
c001c974:	5f                   	pop    edi
c001c975:	5d                   	pop    ebp
c001c976:	c3                   	ret    
c001c977:	90                   	nop

c001c978 <IDE::read(unsigned char, unsigned char)>:
c001c978:	55                   	push   ebp
c001c979:	57                   	push   edi
c001c97a:	56                   	push   esi
c001c97b:	53                   	push   ebx
c001c97c:	83 ec 1c             	sub    esp,0x1c
c001c97f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c987:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c98b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c98e:	3c 03                	cmp    al,0x3
c001c990:	77 43                	ja     c001c9d5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c992:	0f b6 f2             	movzx  esi,dl
c001c995:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c998:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c99c:	83 c8 80             	or     eax,0xffffff80
c001c99f:	0f b6 c0             	movzx  eax,al
c001c9a2:	50                   	push   eax
c001c9a3:	6a 0c                	push   0xc
c001c9a5:	56                   	push   esi
c001c9a6:	57                   	push   edi
c001c9a7:	e8 0c ff ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ac:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9b1:	0f b6 c3             	movzx  eax,bl
c001c9b4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9b8:	ec                   	in     al,dx
c001c9b9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9c2:	52                   	push   edx
c001c9c3:	6a 0c                	push   0xc
c001c9c5:	56                   	push   esi
c001c9c6:	57                   	push   edi
c001c9c7:	e8 ec fe ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9cc:	83 c4 20             	add    esp,0x20
c001c9cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9d3:	eb 49                	jmp    c001ca1e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9d5:	80 fb 07             	cmp    bl,0x7
c001c9d8:	77 12                	ja     c001c9ec <IDE::read(unsigned char, unsigned char)+0x74>
c001c9da:	0f b6 d2             	movzx  edx,dl
c001c9dd:	0f b6 c3             	movzx  eax,bl
c001c9e0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9e8:	89 c2                	mov    edx,eax
c001c9ea:	eb 31                	jmp    c001ca1d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9ec:	80 fb 0d             	cmp    bl,0xd
c001c9ef:	77 13                	ja     c001ca04 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9f1:	0f b6 d2             	movzx  edx,dl
c001c9f4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c9fb:	0f b6 d3             	movzx  edx,bl
c001c9fe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca02:	eb 19                	jmp    c001ca1d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca04:	31 c0                	xor    eax,eax
c001ca06:	80 fb 15             	cmp    bl,0x15
c001ca09:	77 13                	ja     c001ca1e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca0b:	0f b6 d2             	movzx  edx,dl
c001ca0e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca16:	0f b6 d3             	movzx  edx,bl
c001ca19:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca1d:	ec                   	in     al,dx
c001ca1e:	83 c4 1c             	add    esp,0x1c
c001ca21:	5b                   	pop    ebx
c001ca22:	5e                   	pop    esi
c001ca23:	5f                   	pop    edi
c001ca24:	5d                   	pop    ebp
c001ca25:	c3                   	ret    

c001ca26 <IDE::waitInterrupt(unsigned char)>:
c001ca26:	57                   	push   edi
c001ca27:	56                   	push   esi
c001ca28:	31 f6                	xor    esi,esi
c001ca2a:	53                   	push   ebx
c001ca2b:	83 ec 10             	sub    esp,0x10
c001ca2e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca32:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca36:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca3a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca3f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca46:	84 db                	test   bl,bl
c001ca48:	75 37                	jne    c001ca81 <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca4a:	52                   	push   edx
c001ca4b:	6a 0c                	push   0xc
c001ca4d:	50                   	push   eax
c001ca4e:	57                   	push   edi
c001ca4f:	e8 24 ff ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	a8 01                	test   al,0x1
c001ca59:	75 2e                	jne    c001ca89 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca5b:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca61:	75 16                	jne    c001ca79 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca63:	83 fe 32             	cmp    esi,0x32
c001ca66:	7e 11                	jle    c001ca79 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca68:	50                   	push   eax
c001ca69:	50                   	push   eax
c001ca6a:	6a 00                	push   0x0
c001ca6c:	68 80 96 98 00       	push   0x989680
c001ca71:	e8 25 c5 ff ff       	call   c0018f9b <nanoSleep(unsigned long long)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	83 fe 3c             	cmp    esi,0x3c
c001ca7c:	74 0b                	je     c001ca89 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca7e:	46                   	inc    esi
c001ca7f:	eb b9                	jmp    c001ca3a <IDE::waitInterrupt(unsigned char)+0x14>
c001ca81:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	88 d8                	mov    al,bl
c001ca8e:	5b                   	pop    ebx
c001ca8f:	5e                   	pop    esi
c001ca90:	5f                   	pop    edi
c001ca91:	c3                   	ret    

c001ca92 <ideChannel0IRQHandler(regs*, void*)>:
c001ca92:	83 ec 10             	sub    esp,0x10
c001ca95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca99:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001caa0:	6a 07                	push   0x7
c001caa2:	6a 00                	push   0x0
c001caa4:	50                   	push   eax
c001caa5:	e8 ce fe ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001caaa:	83 c4 1c             	add    esp,0x1c
c001caad:	c3                   	ret    

c001caae <ideChannel1IRQHandler(regs*, void*)>:
c001caae:	83 ec 10             	sub    esp,0x10
c001cab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cabc:	6a 07                	push   0x7
c001cabe:	6a 01                	push   0x1
c001cac0:	50                   	push   eax
c001cac1:	e8 b2 fe ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001cac6:	83 c4 1c             	add    esp,0x1c
c001cac9:	c3                   	ret    

c001caca <IDE::enableIRQs(unsigned char, bool)>:
c001caca:	57                   	push   edi
c001cacb:	56                   	push   esi
c001cacc:	be 04 00 00 00       	mov    esi,0x4
c001cad1:	53                   	push   ebx
c001cad2:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cad7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cadc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cae0:	0f 94 c0             	sete   al
c001cae3:	01 c0                	add    eax,eax
c001cae5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001caec:	0f b6 c0             	movzx  eax,al
c001caef:	50                   	push   eax
c001caf0:	6a 0c                	push   0xc
c001caf2:	57                   	push   edi
c001caf3:	53                   	push   ebx
c001caf4:	e8 bf fd ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	50                   	push   eax
c001cafd:	6a 0c                	push   0xc
c001caff:	57                   	push   edi
c001cb00:	53                   	push   ebx
c001cb01:	e8 72 fe ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	4e                   	dec    esi
c001cb0a:	75 f0                	jne    c001cafc <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb0c:	5b                   	pop    ebx
c001cb0d:	5e                   	pop    esi
c001cb0e:	5f                   	pop    edi
c001cb0f:	c3                   	ret    

c001cb10 <IDE::open(int, int, void*)>:
c001cb10:	55                   	push   ebp
c001cb11:	57                   	push   edi
c001cb12:	56                   	push   esi
c001cb13:	53                   	push   ebx
c001cb14:	83 ec 1c             	sub    esp,0x1c
c001cb17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb1b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb24:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb2d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb34:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb3b:	0f 85 b2 02 00 00    	jne    c001cdf3 <IDE::open(int, int, void*)+0x2e3>
c001cb41:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb47:	88 04 24             	mov    BYTE PTR [esp],al
c001cb4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb4d:	83 e0 7f             	and    eax,0x7f
c001cb50:	83 f8 05             	cmp    eax,0x5
c001cb53:	74 05                	je     c001cb5a <IDE::open(int, int, void*)+0x4a>
c001cb55:	83 f8 0f             	cmp    eax,0xf
c001cb58:	75 32                	jne    c001cb8c <IDE::open(int, int, void*)+0x7c>
c001cb5a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb60:	83 e0 fc             	and    eax,0xfffffffc
c001cb63:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb6a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb70:	83 e0 fc             	and    eax,0xfffffffc
c001cb73:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb7a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb80:	83 e0 fc             	and    eax,0xfffffffc
c001cb83:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb8a:	eb 14                	jmp    c001cba0 <IDE::open(int, int, void*)+0x90>
c001cb8c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb96:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cba0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cba7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbb2:	89 c6                	mov    esi,eax
c001cbb4:	89 e8                	mov    eax,ebp
c001cbb6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbbb:	c1 e6 10             	shl    esi,0x10
c001cbbe:	89 fa                	mov    edx,edi
c001cbc0:	c1 e0 0b             	shl    eax,0xb
c001cbc3:	09 f0                	or     eax,esi
c001cbc5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbcc:	c1 e6 08             	shl    esi,0x8
c001cbcf:	09 c6                	or     esi,eax
c001cbd1:	89 f0                	mov    eax,esi
c001cbd3:	0d 08 00 00 80       	or     eax,0x80000008
c001cbd8:	ef                   	out    dx,eax
c001cbd9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbde:	89 ca                	mov    edx,ecx
c001cbe0:	ed                   	in     eax,dx
c001cbe1:	c1 e8 10             	shr    eax,0x10
c001cbe4:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbe9:	0f 84 f3 00 00 00    	je     c001cce2 <IDE::open(int, int, void*)+0x1d2>
c001cbef:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cbf5:	89 fa                	mov    edx,edi
c001cbf7:	89 f0                	mov    eax,esi
c001cbf9:	ef                   	out    dx,eax
c001cbfa:	b0 fe                	mov    al,0xfe
c001cbfc:	89 ca                	mov    edx,ecx
c001cbfe:	ee                   	out    dx,al
c001cbff:	89 f0                	mov    eax,esi
c001cc01:	89 fa                	mov    edx,edi
c001cc03:	ef                   	out    dx,eax
c001cc04:	89 ca                	mov    edx,ecx
c001cc06:	ed                   	in     eax,dx
c001cc07:	3c fe                	cmp    al,0xfe
c001cc09:	0f 85 a9 00 00 00    	jne    c001ccb8 <IDE::open(int, int, void*)+0x1a8>
c001cc0f:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001cc15:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc1c:	74 33                	je     c001cc51 <IDE::open(int, int, void*)+0x141>
c001cc1e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc24:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc28:	40                   	inc    eax
c001cc29:	83 ec 0c             	sub    esp,0xc
c001cc2c:	0f b6 c0             	movzx  eax,al
c001cc2f:	50                   	push   eax
c001cc30:	55                   	push   ebp
c001cc31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc35:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc3b:	51                   	push   ecx
c001cc3c:	e8 1d 72 ff ff       	call   c0013e5e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc41:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc46:	83 c4 1c             	add    esp,0x1c
c001cc49:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc4f:	eb 0a                	jmp    c001cc5b <IDE::open(int, int, void*)+0x14b>
c001cc51:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc5b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc62:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc69:	c1 e1 10             	shl    ecx,0x10
c001cc6c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc71:	c1 e0 08             	shl    eax,0x8
c001cc74:	89 fa                	mov    edx,edi
c001cc76:	09 c1                	or     ecx,eax
c001cc78:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc7f:	c1 e0 0b             	shl    eax,0xb
c001cc82:	09 c1                	or     ecx,eax
c001cc84:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc8a:	89 c8                	mov    eax,ecx
c001cc8c:	ef                   	out    dx,eax
c001cc8d:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc92:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cc98:	89 f2                	mov    edx,esi
c001cc9a:	ee                   	out    dx,al
c001cc9b:	89 c8                	mov    eax,ecx
c001cc9d:	89 fa                	mov    edx,edi
c001cc9f:	ef                   	out    dx,eax
c001cca0:	89 f2                	mov    edx,esi
c001cca2:	ed                   	in     eax,dx
c001cca3:	0f b6 c0             	movzx  eax,al
c001cca6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccac:	74 44                	je     c001ccf2 <IDE::open(int, int, void*)+0x1e2>
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	68 48 35 02 c0       	push   0xc0023548
c001ccb6:	eb 32                	jmp    c001ccea <IDE::open(int, int, void*)+0x1da>
c001ccb8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccc1:	75 15                	jne    c001ccd8 <IDE::open(int, int, void*)+0x1c8>
c001ccc3:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccc7:	74 06                	je     c001cccf <IDE::open(int, int, void*)+0x1bf>
c001ccc9:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cccd:	75 09                	jne    c001ccd8 <IDE::open(int, int, void*)+0x1c8>
c001cccf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccd6:	eb 1a                	jmp    c001ccf2 <IDE::open(int, int, void*)+0x1e2>
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	68 50 35 02 c0       	push   0xc0023550
c001cce0:	eb 08                	jmp    c001ccea <IDE::open(int, int, void*)+0x1da>
c001cce2:	83 ec 0c             	sub    esp,0xc
c001cce5:	68 81 35 02 c0       	push   0xc0023581
c001ccea:	e8 45 8d ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ccf9:	79 1a                	jns    c001cd15 <IDE::open(int, int, void*)+0x205>
c001ccfb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd01:	83 e0 fc             	and    eax,0xfffffffc
c001cd04:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd0b:	83 c0 08             	add    eax,0x8
c001cd0e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd15:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd1b:	89 c2                	mov    edx,eax
c001cd1d:	83 e2 0f             	and    edx,0xf
c001cd20:	66 83 fa 08          	cmp    dx,0x8
c001cd24:	75 0a                	jne    c001cd30 <IDE::open(int, int, void*)+0x220>
c001cd26:	83 e8 02             	sub    eax,0x2
c001cd29:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd30:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd36:	89 c2                	mov    edx,eax
c001cd38:	83 e2 0f             	and    edx,0xf
c001cd3b:	66 83 fa 08          	cmp    dx,0x8
c001cd3f:	75 0a                	jne    c001cd4b <IDE::open(int, int, void*)+0x23b>
c001cd41:	83 e8 02             	sub    eax,0x2
c001cd44:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd52:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd59:	89 d0                	mov    eax,edx
c001cd5b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd62:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd66:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd69:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd6e:	0f b6 c9             	movzx  ecx,cl
c001cd71:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd78:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd7b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd7f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd83:	8d 50 02             	lea    edx,[eax+0x2]
c001cd86:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd8b:	0f b6 d2             	movzx  edx,dl
c001cd8e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd94:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd97:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd9b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cd9f:	8d 48 03             	lea    ecx,[eax+0x3]
c001cda2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cda7:	0f b6 c9             	movzx  ecx,cl
c001cdaa:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdb0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdb3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdb7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdbb:	8d 50 04             	lea    edx,[eax+0x4]
c001cdbe:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdc4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdc9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdd0:	66 85 f6             	test   si,si
c001cdd3:	74 3e                	je     c001ce13 <IDE::open(int, int, void*)+0x303>
c001cdd5:	0f b6 d2             	movzx  edx,dl
c001cdd8:	83 c0 05             	add    eax,0x5
c001cddb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdde:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cde2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cde6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdf1:	eb 20                	jmp    c001ce13 <IDE::open(int, int, void*)+0x303>
c001cdf3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cdfd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce0e:	e9 02 ff ff ff       	jmp    c001cd15 <IDE::open(int, int, void*)+0x205>
c001ce13:	52                   	push   edx
c001ce14:	52                   	push   edx
c001ce15:	6a 00                	push   0x0
c001ce17:	53                   	push   ebx
c001ce18:	e8 75 fa ff ff       	call   c001c892 <IDE::prepareInterrupt(unsigned char)>
c001ce1d:	59                   	pop    ecx
c001ce1e:	5e                   	pop    esi
c001ce1f:	6a 01                	push   0x1
c001ce21:	53                   	push   ebx
c001ce22:	e8 6b fa ff ff       	call   c001c892 <IDE::prepareInterrupt(unsigned char)>
c001ce27:	83 c4 0c             	add    esp,0xc
c001ce2a:	6a 00                	push   0x0
c001ce2c:	6a 00                	push   0x0
c001ce2e:	53                   	push   ebx
c001ce2f:	e8 96 fc ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001ce34:	83 c4 0c             	add    esp,0xc
c001ce37:	6a 00                	push   0x0
c001ce39:	6a 01                	push   0x1
c001ce3b:	53                   	push   ebx
c001ce3c:	e8 89 fc ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001ce41:	83 c4 10             	add    esp,0x10
c001ce44:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce4b:	74 40                	je     c001ce8d <IDE::open(int, int, void*)+0x37d>
c001ce4d:	83 ec 0c             	sub    esp,0xc
c001ce50:	68 ab 35 02 c0       	push   0xc00235ab
c001ce55:	e8 ab 23 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001ce5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce5d:	6a 01                	push   0x1
c001ce5f:	68 92 ca 01 c0       	push   0xc001ca92
c001ce64:	6a 0e                	push   0xe
c001ce66:	53                   	push   ebx
c001ce67:	e8 02 37 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce6c:	83 c4 14             	add    esp,0x14
c001ce6f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce75:	53                   	push   ebx
c001ce76:	6a 01                	push   0x1
c001ce78:	68 ae ca 01 c0       	push   0xc001caae
c001ce7d:	6a 0f                	push   0xf
c001ce7f:	53                   	push   ebx
c001ce80:	e8 e9 36 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce85:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce8b:	eb 4a                	jmp    c001ced7 <IDE::open(int, int, void*)+0x3c7>
c001ce8d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ce97:	50                   	push   eax
c001ce98:	6a 0f                	push   0xf
c001ce9a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cea0:	68 c7 35 02 c0       	push   0xc00235c7
c001cea5:	e8 5b 23 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001ceaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cead:	6a 00                	push   0x0
c001ceaf:	68 92 ca 01 c0       	push   0xc001ca92
c001ceb4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceba:	53                   	push   ebx
c001cebb:	e8 ae 36 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cec0:	83 c4 14             	add    esp,0x14
c001cec3:	53                   	push   ebx
c001cec4:	6a 00                	push   0x0
c001cec6:	68 ae ca 01 c0       	push   0xc001caae
c001cecb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ced1:	53                   	push   ebx
c001ced2:	e8 97 36 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ced7:	83 c4 20             	add    esp,0x20
c001ceda:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cedc:	83 ec 0c             	sub    esp,0xc
c001cedf:	53                   	push   ebx
c001cee0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cee3:	83 c4 0c             	add    esp,0xc
c001cee6:	6a 07                	push   0x7
c001cee8:	6a 00                	push   0x0
c001ceea:	53                   	push   ebx
c001ceeb:	e8 88 fa ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001cef0:	83 c4 0c             	add    esp,0xc
c001cef3:	6a 07                	push   0x7
c001cef5:	6a 01                	push   0x1
c001cef7:	53                   	push   ebx
c001cef8:	e8 7b fa ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001cefd:	83 c4 0c             	add    esp,0xc
c001cf00:	6a 01                	push   0x1
c001cf02:	6a 00                	push   0x0
c001cf04:	53                   	push   ebx
c001cf05:	e8 c0 fb ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001cf0a:	83 c4 0c             	add    esp,0xc
c001cf0d:	6a 01                	push   0x1
c001cf0f:	6a 01                	push   0x1
c001cf11:	53                   	push   ebx
c001cf12:	e8 b3 fb ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001cf17:	83 c4 2c             	add    esp,0x2c
c001cf1a:	31 c0                	xor    eax,eax
c001cf1c:	5b                   	pop    ebx
c001cf1d:	5e                   	pop    esi
c001cf1e:	5f                   	pop    edi
c001cf1f:	5d                   	pop    ebp
c001cf20:	c3                   	ret    
c001cf21:	90                   	nop

c001cf22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf22:	55                   	push   ebp
c001cf23:	57                   	push   edi
c001cf24:	56                   	push   esi
c001cf25:	53                   	push   ebx
c001cf26:	83 ec 1c             	sub    esp,0x1c
c001cf29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf35:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf39:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf3c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf40:	80 fa 03             	cmp    dl,0x3
c001cf43:	77 5d                	ja     c001cfa2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf45:	0f b6 db             	movzx  ebx,bl
c001cf48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf50:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf53:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf57:	83 ca 80             	or     edx,0xffffff80
c001cf5a:	0f b6 d2             	movzx  edx,dl
c001cf5d:	52                   	push   edx
c001cf5e:	6a 0c                	push   0xc
c001cf60:	53                   	push   ebx
c001cf61:	56                   	push   esi
c001cf62:	e8 51 f9 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf6b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf70:	0f b6 c0             	movzx  eax,al
c001cf73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf77:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf7b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf7d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf82:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf8a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf8e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cf96:	83 c4 2c             	add    esp,0x2c
c001cf99:	5b                   	pop    ebx
c001cf9a:	5e                   	pop    esi
c001cf9b:	5f                   	pop    edi
c001cf9c:	5d                   	pop    ebp
c001cf9d:	e9 16 f9 ff ff       	jmp    c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfa2:	3c 07                	cmp    al,0x7
c001cfa4:	77 10                	ja     c001cfb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfa6:	0f b6 db             	movzx  ebx,bl
c001cfa9:	0f b6 d0             	movzx  edx,al
c001cfac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfb4:	eb 2d                	jmp    c001cfe3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfb6:	3c 0d                	cmp    al,0xd
c001cfb8:	77 13                	ja     c001cfcd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfba:	0f b6 db             	movzx  ebx,bl
c001cfbd:	0f b6 c0             	movzx  eax,al
c001cfc0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfc7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfcb:	eb 16                	jmp    c001cfe3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfcd:	3c 15                	cmp    al,0x15
c001cfcf:	77 14                	ja     c001cfe5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfd1:	0f b6 db             	movzx  ebx,bl
c001cfd4:	0f b6 c0             	movzx  eax,al
c001cfd7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfdf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfe3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cfe5:	83 c4 1c             	add    esp,0x1c
c001cfe8:	5b                   	pop    ebx
c001cfe9:	5e                   	pop    esi
c001cfea:	5f                   	pop    edi
c001cfeb:	5d                   	pop    ebp
c001cfec:	c3                   	ret    
c001cfed:	90                   	nop

c001cfee <IDE::detect()>:
c001cfee:	55                   	push   ebp
c001cfef:	57                   	push   edi
c001cff0:	56                   	push   esi
c001cff1:	53                   	push   ebx
c001cff2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cff8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cfff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d006:	0f 85 c0 02 00 00    	jne    c001d2cc <IDE::detect()+0x2de>
c001d00c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d013:	31 f6                	xor    esi,esi
c001d015:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d01d:	31 ed                	xor    ebp,ebp
c001d01f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d023:	c1 e0 06             	shl    eax,0x6
c001d026:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d02e:	89 e8                	mov    eax,ebp
c001d030:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d034:	c1 e0 04             	shl    eax,0x4
c001d037:	83 c8 a0             	or     eax,0xffffffa0
c001d03a:	0f b6 c0             	movzx  eax,al
c001d03d:	50                   	push   eax
c001d03e:	6a 06                	push   0x6
c001d040:	56                   	push   esi
c001d041:	53                   	push   ebx
c001d042:	e8 71 f8 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	6a 0c                	push   0xc
c001d04c:	56                   	push   esi
c001d04d:	53                   	push   ebx
c001d04e:	e8 25 f9 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d053:	83 c4 0c             	add    esp,0xc
c001d056:	6a 0c                	push   0xc
c001d058:	56                   	push   esi
c001d059:	53                   	push   ebx
c001d05a:	e8 19 f9 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	6a 0c                	push   0xc
c001d064:	56                   	push   esi
c001d065:	53                   	push   ebx
c001d066:	e8 0d f9 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	6a 0c                	push   0xc
c001d070:	56                   	push   esi
c001d071:	53                   	push   ebx
c001d072:	e8 01 f9 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d077:	68 ec 00 00 00       	push   0xec
c001d07c:	6a 07                	push   0x7
c001d07e:	56                   	push   esi
c001d07f:	53                   	push   ebx
c001d080:	e8 33 f8 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d085:	83 c4 1c             	add    esp,0x1c
c001d088:	6a 0c                	push   0xc
c001d08a:	56                   	push   esi
c001d08b:	53                   	push   ebx
c001d08c:	e8 e7 f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d091:	83 c4 0c             	add    esp,0xc
c001d094:	6a 0c                	push   0xc
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	e8 db f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d09d:	83 c4 0c             	add    esp,0xc
c001d0a0:	6a 0c                	push   0xc
c001d0a2:	56                   	push   esi
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 cf f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	6a 0c                	push   0xc
c001d0ae:	56                   	push   esi
c001d0af:	53                   	push   ebx
c001d0b0:	e8 c3 f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d0b5:	83 c4 0c             	add    esp,0xc
c001d0b8:	6a 0c                	push   0xc
c001d0ba:	56                   	push   esi
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 b7 f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	84 c0                	test   al,al
c001d0c6:	0f 84 8b 01 00 00    	je     c001d257 <IDE::detect()+0x269>
c001d0cc:	31 ff                	xor    edi,edi
c001d0ce:	50                   	push   eax
c001d0cf:	6a 0c                	push   0xc
c001d0d1:	56                   	push   esi
c001d0d2:	53                   	push   ebx
c001d0d3:	e8 a0 f8 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	a8 01                	test   al,0x1
c001d0dd:	0f 85 8e 01 00 00    	jne    c001d271 <IDE::detect()+0x283>
c001d0e3:	84 c0                	test   al,al
c001d0e5:	78 04                	js     c001d0eb <IDE::detect()+0xfd>
c001d0e7:	a8 08                	test   al,0x8
c001d0e9:	75 27                	jne    c001d112 <IDE::detect()+0x124>
c001d0eb:	47                   	inc    edi
c001d0ec:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0f2:	7e da                	jle    c001d0ce <IDE::detect()+0xe0>
c001d0f4:	50                   	push   eax
c001d0f5:	50                   	push   eax
c001d0f6:	6a 00                	push   0x0
c001d0f8:	68 40 4b 4c 00       	push   0x4c4b40
c001d0fd:	e8 99 be ff ff       	call   c0018f9b <nanoSleep(unsigned long long)>
c001d102:	83 c4 10             	add    esp,0x10
c001d105:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d10b:	75 c1                	jne    c001d0ce <IDE::detect()+0xe0>
c001d10d:	e9 5f 01 00 00       	jmp    c001d271 <IDE::detect()+0x283>
c001d112:	31 c9                	xor    ecx,ecx
c001d114:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d118:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d11c:	83 ec 0c             	sub    esp,0xc
c001d11f:	68 80 00 00 00       	push   0x80
c001d124:	57                   	push   edi
c001d125:	6a 00                	push   0x0
c001d127:	56                   	push   esi
c001d128:	53                   	push   ebx
c001d129:	e8 f4 fd ff ff       	call   c001cf22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d12e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d132:	c1 e0 06             	shl    eax,0x6
c001d135:	01 d8                	add    eax,ebx
c001d137:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d13c:	89 d1                	mov    ecx,edx
c001d13e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d145:	89 f2                	mov    edx,esi
c001d147:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d14e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d154:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d158:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d15e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d162:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d169:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d171:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d178:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d180:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d186:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d18d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d193:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d197:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d19b:	83 c4 20             	add    esp,0x20
c001d19e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1a1:	83 c7 02             	add    edi,0x2
c001d1a4:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1aa:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1ad:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1b3:	83 c0 02             	add    eax,0x2
c001d1b6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1ba:	75 e2                	jne    c001d19e <IDE::detect()+0x1b0>
c001d1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1c0:	c1 e0 06             	shl    eax,0x6
c001d1c3:	01 d8                	add    eax,ebx
c001d1c5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1cb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1d2:	66 c1 ea 09          	shr    dx,0x9
c001d1d6:	83 e2 01             	and    edx,0x1
c001d1d9:	84 c9                	test   cl,cl
c001d1db:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1e1:	75 2f                	jne    c001d212 <IDE::detect()+0x224>
c001d1e3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1e9:	85 c0                	test   eax,eax
c001d1eb:	74 66                	je     c001d253 <IDE::detect()+0x265>
c001d1ed:	50                   	push   eax
c001d1ee:	55                   	push   ebp
c001d1ef:	56                   	push   esi
c001d1f0:	68 e3 35 02 c0       	push   0xc00235e3
c001d1f5:	e8 0b 20 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d1fa:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d201:	e8 ca 1e ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001d206:	89 c7                	mov    edi,eax
c001d208:	89 04 24             	mov    DWORD PTR [esp],eax
c001d20b:	e8 f4 02 00 00       	call   c001d504 <ATA::ATA()>
c001d210:	eb 28                	jmp    c001d23a <IDE::detect()+0x24c>
c001d212:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d218:	55                   	push   ebp
c001d219:	56                   	push   esi
c001d21a:	68 12 36 02 c0       	push   0xc0023612
c001d21f:	e8 e1 1f ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d224:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d22b:	e8 a0 1e ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001d230:	89 c7                	mov    edi,eax
c001d232:	89 04 24             	mov    DWORD PTR [esp],eax
c001d235:	e8 1e 09 00 00       	call   c001db58 <ATAPI::ATAPI()>
c001d23a:	5a                   	pop    edx
c001d23b:	59                   	pop    ecx
c001d23c:	57                   	push   edi
c001d23d:	53                   	push   ebx
c001d23e:	e8 d7 33 ff ff       	call   c001061a <Device::addChild(Device*)>
c001d243:	8b 07                	mov    eax,DWORD PTR [edi]
c001d245:	53                   	push   ebx
c001d246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d24a:	6a 00                	push   0x0
c001d24c:	57                   	push   edi
c001d24d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d250:	83 c4 20             	add    esp,0x20
c001d253:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d257:	4d                   	dec    ebp
c001d258:	74 0a                	je     c001d264 <IDE::detect()+0x276>
c001d25a:	bd 01 00 00 00       	mov    ebp,0x1
c001d25f:	e9 bb fd ff ff       	jmp    c001d01f <IDE::detect()+0x31>
c001d264:	4e                   	dec    esi
c001d265:	74 65                	je     c001d2cc <IDE::detect()+0x2de>
c001d267:	be 01 00 00 00       	mov    esi,0x1
c001d26c:	e9 ac fd ff ff       	jmp    c001d01d <IDE::detect()+0x2f>
c001d271:	50                   	push   eax
c001d272:	6a 04                	push   0x4
c001d274:	56                   	push   esi
c001d275:	53                   	push   ebx
c001d276:	e8 fd f6 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d27b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d27f:	83 c4 0c             	add    esp,0xc
c001d282:	6a 05                	push   0x5
c001d284:	56                   	push   esi
c001d285:	53                   	push   ebx
c001d286:	e8 ed f6 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d28b:	83 c4 10             	add    esp,0x10
c001d28e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d292:	80 fa 14             	cmp    dl,0x14
c001d295:	74 2f                	je     c001d2c6 <IDE::detect()+0x2d8>
c001d297:	80 fa 69             	cmp    dl,0x69
c001d29a:	75 bb                	jne    c001d257 <IDE::detect()+0x269>
c001d29c:	3c 96                	cmp    al,0x96
c001d29e:	75 b7                	jne    c001d257 <IDE::detect()+0x269>
c001d2a0:	68 a1 00 00 00       	push   0xa1
c001d2a5:	6a 07                	push   0x7
c001d2a7:	56                   	push   esi
c001d2a8:	53                   	push   ebx
c001d2a9:	e8 0a f6 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ae:	5f                   	pop    edi
c001d2af:	58                   	pop    eax
c001d2b0:	6a 00                	push   0x0
c001d2b2:	68 40 42 0f 00       	push   0xf4240
c001d2b7:	e8 df bc ff ff       	call   c0018f9b <nanoSleep(unsigned long long)>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	b1 01                	mov    cl,0x1
c001d2c1:	e9 4e fe ff ff       	jmp    c001d114 <IDE::detect()+0x126>
c001d2c6:	3c eb                	cmp    al,0xeb
c001d2c8:	75 cd                	jne    c001d297 <IDE::detect()+0x2a9>
c001d2ca:	eb d4                	jmp    c001d2a0 <IDE::detect()+0x2b2>
c001d2cc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2d2:	5b                   	pop    ebx
c001d2d3:	5e                   	pop    esi
c001d2d4:	5f                   	pop    edi
c001d2d5:	5d                   	pop    ebp
c001d2d6:	c3                   	ret    
c001d2d7:	90                   	nop

c001d2d8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2d8:	55                   	push   ebp
c001d2d9:	57                   	push   edi
c001d2da:	56                   	push   esi
c001d2db:	53                   	push   ebx
c001d2dc:	83 ec 1c             	sub    esp,0x1c
c001d2df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2eb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2ef:	88 c3                	mov    bl,al
c001d2f1:	84 c0                	test   al,al
c001d2f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2f7:	0f 84 67 01 00 00    	je     c001d464 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d2fd:	83 ec 0c             	sub    esp,0xc
c001d300:	68 43 36 02 c0       	push   0xc0023643
c001d305:	e8 fb 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d30a:	83 c4 10             	add    esp,0x10
c001d30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d311:	3c 01                	cmp    al,0x1
c001d313:	75 17                	jne    c001d32c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d315:	83 ec 0c             	sub    esp,0xc
c001d318:	b3 13                	mov    bl,0x13
c001d31a:	68 4f 36 02 c0       	push   0xc002364f
c001d31f:	e8 e1 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	e9 25 01 00 00       	jmp    c001d451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d32c:	3c 02                	cmp    al,0x2
c001d32e:	0f 85 ef 00 00 00    	jne    c001d423 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d334:	01 f6                	add    esi,esi
c001d336:	52                   	push   edx
c001d337:	09 ee                	or     esi,ebp
c001d339:	6a 01                	push   0x1
c001d33b:	89 f0                	mov    eax,esi
c001d33d:	0f b6 f0             	movzx  esi,al
c001d340:	c1 e6 06             	shl    esi,0x6
c001d343:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d34b:	50                   	push   eax
c001d34c:	57                   	push   edi
c001d34d:	e8 26 f6 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d352:	83 c4 10             	add    esp,0x10
c001d355:	89 c6                	mov    esi,eax
c001d357:	a8 01                	test   al,0x1
c001d359:	74 12                	je     c001d36d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d35b:	83 ec 0c             	sub    esp,0xc
c001d35e:	b3 07                	mov    bl,0x7
c001d360:	68 64 36 02 c0       	push   0xc0023664
c001d365:	e8 9b 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d36a:	83 c4 10             	add    esp,0x10
c001d36d:	f7 c6 02 00 00 00    	test   esi,0x2
c001d373:	74 12                	je     c001d387 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	b3 03                	mov    bl,0x3
c001d37a:	68 82 36 02 c0       	push   0xc0023682
c001d37f:	e8 81 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d384:	83 c4 10             	add    esp,0x10
c001d387:	f7 c6 04 00 00 00    	test   esi,0x4
c001d38d:	74 12                	je     c001d3a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d38f:	83 ec 0c             	sub    esp,0xc
c001d392:	b3 14                	mov    bl,0x14
c001d394:	68 a2 36 02 c0       	push   0xc00236a2
c001d399:	e8 67 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d39e:	83 c4 10             	add    esp,0x10
c001d3a1:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3a7:	74 12                	je     c001d3bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3a9:	83 ec 0c             	sub    esp,0xc
c001d3ac:	b3 03                	mov    bl,0x3
c001d3ae:	68 82 36 02 c0       	push   0xc0023682
c001d3b3:	e8 4d 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d3b8:	83 c4 10             	add    esp,0x10
c001d3bb:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3c1:	74 12                	je     c001d3d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3c3:	83 ec 0c             	sub    esp,0xc
c001d3c6:	b3 15                	mov    bl,0x15
c001d3c8:	68 ba 36 02 c0       	push   0xc00236ba
c001d3cd:	e8 33 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3db:	74 12                	je     c001d3ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3dd:	83 ec 0c             	sub    esp,0xc
c001d3e0:	b3 03                	mov    bl,0x3
c001d3e2:	68 82 36 02 c0       	push   0xc0023682
c001d3e7:	e8 19 1e ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d3ec:	83 c4 10             	add    esp,0x10
c001d3ef:	f7 c6 40 00 00 00    	test   esi,0x40
c001d3f5:	74 12                	je     c001d409 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d3f7:	83 ec 0c             	sub    esp,0xc
c001d3fa:	b3 16                	mov    bl,0x16
c001d3fc:	68 d4 36 02 c0       	push   0xc00236d4
c001d401:	e8 ff 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d406:	83 c4 10             	add    esp,0x10
c001d409:	89 f0                	mov    eax,esi
c001d40b:	84 c0                	test   al,al
c001d40d:	79 42                	jns    c001d451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d40f:	83 ec 0c             	sub    esp,0xc
c001d412:	b3 0d                	mov    bl,0xd
c001d414:	68 f5 36 02 c0       	push   0xc00236f5
c001d419:	e8 e7 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d41e:	83 c4 10             	add    esp,0x10
c001d421:	eb 2e                	jmp    c001d451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d423:	3c 03                	cmp    al,0x3
c001d425:	75 14                	jne    c001d43b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d427:	83 ec 0c             	sub    esp,0xc
c001d42a:	b3 17                	mov    bl,0x17
c001d42c:	68 09 37 02 c0       	push   0xc0023709
c001d431:	e8 cf 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	eb 16                	jmp    c001d451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d43b:	3c 04                	cmp    al,0x4
c001d43d:	75 12                	jne    c001d451 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d43f:	83 ec 0c             	sub    esp,0xc
c001d442:	b3 08                	mov    bl,0x8
c001d444:	68 1f 37 02 c0       	push   0xc002371f
c001d449:	e8 b7 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	50                   	push   eax
c001d452:	50                   	push   eax
c001d453:	0f b6 c3             	movzx  eax,bl
c001d456:	50                   	push   eax
c001d457:	68 37 37 02 c0       	push   0xc0023737
c001d45c:	e8 a4 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d461:	83 c4 10             	add    esp,0x10
c001d464:	83 c4 1c             	add    esp,0x1c
c001d467:	88 d8                	mov    al,bl
c001d469:	5b                   	pop    ebx
c001d46a:	5e                   	pop    esi
c001d46b:	5f                   	pop    edi
c001d46c:	5d                   	pop    ebp
c001d46d:	c3                   	ret    

c001d46e <IDE::polling(unsigned char, unsigned int)>:
c001d46e:	55                   	push   ebp
c001d46f:	bd 04 00 00 00       	mov    ebp,0x4
c001d474:	57                   	push   edi
c001d475:	56                   	push   esi
c001d476:	53                   	push   ebx
c001d477:	83 ec 0c             	sub    esp,0xc
c001d47a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d47e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d482:	52                   	push   edx
c001d483:	6a 0c                	push   0xc
c001d485:	0f b6 f3             	movzx  esi,bl
c001d488:	56                   	push   esi
c001d489:	57                   	push   edi
c001d48a:	e8 e9 f4 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d48f:	83 c4 10             	add    esp,0x10
c001d492:	4d                   	dec    ebp
c001d493:	75 ed                	jne    c001d482 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d495:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d49a:	50                   	push   eax
c001d49b:	6a 0c                	push   0xc
c001d49d:	56                   	push   esi
c001d49e:	57                   	push   edi
c001d49f:	e8 d4 f4 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	a8 01                	test   al,0x1
c001d4a9:	74 12                	je     c001d4bd <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	68 51 37 02 c0       	push   0xc0023751
c001d4b3:	e8 4d 1d ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001d4b8:	83 c4 10             	add    esp,0x10
c001d4bb:	eb 17                	jmp    c001d4d4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4bd:	a8 20                	test   al,0x20
c001d4bf:	75 0f                	jne    c001d4d0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4c1:	4b                   	dec    ebx
c001d4c2:	74 10                	je     c001d4d4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4c4:	84 c0                	test   al,al
c001d4c6:	78 d2                	js     c001d49a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4c8:	a8 08                	test   al,0x8
c001d4ca:	74 ce                	je     c001d49a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4cc:	31 c0                	xor    eax,eax
c001d4ce:	eb 06                	jmp    c001d4d6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4d0:	b0 01                	mov    al,0x1
c001d4d2:	eb 02                	jmp    c001d4d6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4d4:	b0 02                	mov    al,0x2
c001d4d6:	83 c4 0c             	add    esp,0xc
c001d4d9:	5b                   	pop    ebx
c001d4da:	5e                   	pop    esi
c001d4db:	5f                   	pop    edi
c001d4dc:	5d                   	pop    ebp
c001d4dd:	c3                   	ret    

c001d4de <ATA::close(int, int, void*)>:
c001d4de:	83 ec 0c             	sub    esp,0xc
c001d4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4eb:	85 c0                	test   eax,eax
c001d4ed:	74 0c                	je     c001d4fb <ATA::close(int, int, void*)+0x1d>
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4f4:	50                   	push   eax
c001d4f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	31 c0                	xor    eax,eax
c001d4fd:	83 c4 0c             	add    esp,0xc
c001d500:	c3                   	ret    
c001d501:	90                   	nop

c001d502 <ATA::powerSaving(PowerSavingLevel)>:
c001d502:	c3                   	ret    
c001d503:	90                   	nop

c001d504 <ATA::ATA()>:
c001d504:	83 ec 0c             	sub    esp,0xc
c001d507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50b:	83 ec 04             	sub    esp,0x4
c001d50e:	68 00 02 00 00       	push   0x200
c001d513:	68 94 37 02 c0       	push   0xc0023794
c001d518:	50                   	push   eax
c001d519:	e8 02 35 ff ff       	call   c0010a20 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d51e:	83 c4 10             	add    esp,0x10
c001d521:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001d526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52a:	89 10                	mov    DWORD PTR [eax],edx
c001d52c:	90                   	nop
c001d52d:	83 c4 0c             	add    esp,0xc
c001d530:	c3                   	ret    
c001d531:	90                   	nop

c001d532 <ATA::flush(bool)>:
c001d532:	53                   	push   ebx
c001d533:	83 ec 08             	sub    esp,0x8
c001d536:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d53b:	19 c0                	sbb    eax,eax
c001d53d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d541:	83 e0 fd             	and    eax,0xfffffffd
c001d544:	05 ea 00 00 00       	add    eax,0xea
c001d549:	50                   	push   eax
c001d54a:	6a 07                	push   0x7
c001d54c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d553:	50                   	push   eax
c001d554:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d55a:	e8 59 f3 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d55f:	83 c4 0c             	add    esp,0xc
c001d562:	6a 00                	push   0x0
c001d564:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d56b:	50                   	push   eax
c001d56c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d572:	e8 f7 fe ff ff       	call   c001d46e <IDE::polling(unsigned char, unsigned int)>
c001d577:	83 c4 18             	add    esp,0x18
c001d57a:	5b                   	pop    ebx
c001d57b:	c3                   	ret    

c001d57c <ATA::readyForCommand()>:
c001d57c:	56                   	push   esi
c001d57d:	53                   	push   ebx
c001d57e:	31 db                	xor    ebx,ebx
c001d580:	50                   	push   eax
c001d581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d585:	50                   	push   eax
c001d586:	6a 0c                	push   0xc
c001d588:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d58f:	50                   	push   eax
c001d590:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d596:	e8 dd f3 ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	a8 88                	test   al,0x88
c001d5a0:	74 23                	je     c001d5c5 <ATA::readyForCommand()+0x49>
c001d5a2:	43                   	inc    ebx
c001d5a3:	83 fb 63             	cmp    ebx,0x63
c001d5a6:	7e dd                	jle    c001d585 <ATA::readyForCommand()+0x9>
c001d5a8:	51                   	push   ecx
c001d5a9:	51                   	push   ecx
c001d5aa:	6a 00                	push   0x0
c001d5ac:	68 40 42 0f 00       	push   0xf4240
c001d5b1:	e8 e5 b9 ff ff       	call   c0018f9b <nanoSleep(unsigned long long)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5bf:	75 c4                	jne    c001d585 <ATA::readyForCommand()+0x9>
c001d5c1:	31 c0                	xor    eax,eax
c001d5c3:	eb 02                	jmp    c001d5c7 <ATA::readyForCommand()+0x4b>
c001d5c5:	b0 01                	mov    al,0x1
c001d5c7:	5a                   	pop    edx
c001d5c8:	5b                   	pop    ebx
c001d5c9:	5e                   	pop    esi
c001d5ca:	c3                   	ret    
c001d5cb:	90                   	nop

c001d5cc <ATA::access(unsigned long long, int, void*, bool)>:
c001d5cc:	55                   	push   ebp
c001d5cd:	57                   	push   edi
c001d5ce:	56                   	push   esi
c001d5cf:	53                   	push   ebx
c001d5d0:	83 ec 2c             	sub    esp,0x2c
c001d5d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5de:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5e2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5ed:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d5f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5f7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d5fd:	c1 e0 06             	shl    eax,0x6
c001d600:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d604:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d60c:	74 5d                	je     c001d66b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d60e:	89 fa                	mov    edx,edi
c001d610:	89 f0                	mov    eax,esi
c001d612:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d616:	c1 ea 1c             	shr    edx,0x1c
c001d619:	89 d1                	mov    ecx,edx
c001d61b:	09 c1                	or     ecx,eax
c001d61d:	74 25                	je     c001d644 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d61f:	31 ed                	xor    ebp,ebp
c001d621:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d628:	89 fa                	mov    edx,edi
c001d62a:	89 f0                	mov    eax,esi
c001d62c:	0f ad d0             	shrd   eax,edx,cl
c001d62f:	d3 ea                	shr    edx,cl
c001d631:	f6 c1 20             	test   cl,0x20
c001d634:	74 02                	je     c001d638 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d636:	89 d0                	mov    eax,edx
c001d638:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d63c:	45                   	inc    ebp
c001d63d:	83 fd 06             	cmp    ebp,0x6
c001d640:	75 df                	jne    c001d621 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d642:	eb 73                	jmp    c001d6b7 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d644:	89 f0                	mov    eax,esi
c001d646:	89 fa                	mov    edx,edi
c001d648:	0f ac d0 10          	shrd   eax,edx,0x10
c001d64c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d651:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d655:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d65c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d661:	c1 ee 18             	shr    esi,0x18
c001d664:	bf 01 00 00 00       	mov    edi,0x1
c001d669:	eb 53                	jmp    c001d6be <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d66b:	6a 00                	push   0x0
c001d66d:	6a 3f                	push   0x3f
c001d66f:	57                   	push   edi
c001d670:	56                   	push   esi
c001d671:	e8 86 1f 00 00       	call   c001f5fc <__umoddi3>
c001d676:	83 c4 10             	add    esp,0x10
c001d679:	40                   	inc    eax
c001d67a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d67e:	6a 00                	push   0x0
c001d680:	68 f0 03 00 00       	push   0x3f0
c001d685:	57                   	push   edi
c001d686:	56                   	push   esi
c001d687:	e8 70 1e 00 00       	call   c001f4fc <__udivdi3>
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d694:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d69b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6a0:	6a 00                	push   0x0
c001d6a2:	6a 3f                	push   0x3f
c001d6a4:	57                   	push   edi
c001d6a5:	31 ff                	xor    edi,edi
c001d6a7:	56                   	push   esi
c001d6a8:	e8 4f 1e 00 00       	call   c001f4fc <__udivdi3>
c001d6ad:	89 c6                	mov    esi,eax
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	83 e6 0f             	and    esi,0xf
c001d6b5:	eb 07                	jmp    c001d6be <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6b7:	31 f6                	xor    esi,esi
c001d6b9:	bf 02 00 00 00       	mov    edi,0x2
c001d6be:	50                   	push   eax
c001d6bf:	6a 00                	push   0x0
c001d6c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6c8:	50                   	push   eax
c001d6c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6cd:	e8 f8 f3 ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001d6d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6d5:	e8 a2 fe ff ff       	call   c001d57c <ATA::readyForCommand()>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	84 c0                	test   al,al
c001d6df:	75 0a                	jne    c001d6eb <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6e1:	be 01 00 00 00       	mov    esi,0x1
c001d6e6:	e9 79 02 00 00       	jmp    c001d964 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6eb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d6f1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6f7:	c1 e0 04             	shl    eax,0x4
c001d6fa:	09 c6                	or     esi,eax
c001d6fc:	89 f8                	mov    eax,edi
c001d6fe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d705:	84 c0                	test   al,al
c001d707:	75 05                	jne    c001d70e <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d709:	83 ce a0             	or     esi,0xffffffa0
c001d70c:	eb 03                	jmp    c001d711 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d70e:	83 ce e0             	or     esi,0xffffffe0
c001d711:	89 f0                	mov    eax,esi
c001d713:	0f b6 f0             	movzx  esi,al
c001d716:	56                   	push   esi
c001d717:	6a 06                	push   0x6
c001d719:	51                   	push   ecx
c001d71a:	52                   	push   edx
c001d71b:	e8 98 f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d720:	83 c4 10             	add    esp,0x10
c001d723:	6a 00                	push   0x0
c001d725:	6a 01                	push   0x1
c001d727:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d72e:	50                   	push   eax
c001d72f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d735:	e8 7e f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d73a:	89 f8                	mov    eax,edi
c001d73c:	83 c4 10             	add    esp,0x10
c001d73f:	3c 02                	cmp    al,0x2
c001d741:	75 6e                	jne    c001d7b1 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d743:	6a 00                	push   0x0
c001d745:	6a 08                	push   0x8
c001d747:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d74e:	50                   	push   eax
c001d74f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d755:	e8 5e f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d75a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d75f:	50                   	push   eax
c001d760:	6a 09                	push   0x9
c001d762:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d769:	50                   	push   eax
c001d76a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d770:	e8 43 f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d775:	83 c4 20             	add    esp,0x20
c001d778:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d77d:	50                   	push   eax
c001d77e:	6a 0a                	push   0xa
c001d780:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d787:	50                   	push   eax
c001d788:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d78e:	e8 25 f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d793:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d798:	50                   	push   eax
c001d799:	6a 0b                	push   0xb
c001d79b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7a2:	50                   	push   eax
c001d7a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7a9:	e8 0a f1 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ae:	83 c4 20             	add    esp,0x20
c001d7b1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7b6:	50                   	push   eax
c001d7b7:	6a 02                	push   0x2
c001d7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7c0:	50                   	push   eax
c001d7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7c7:	e8 ec f0 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7cc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7d1:	50                   	push   eax
c001d7d2:	6a 03                	push   0x3
c001d7d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7db:	50                   	push   eax
c001d7dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7e2:	e8 d1 f0 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e7:	83 c4 20             	add    esp,0x20
c001d7ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7ef:	50                   	push   eax
c001d7f0:	6a 04                	push   0x4
c001d7f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7f9:	50                   	push   eax
c001d7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d800:	e8 b3 f0 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d80a:	50                   	push   eax
c001d80b:	6a 05                	push   0x5
c001d80d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d814:	50                   	push   eax
c001d815:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d81b:	e8 98 f0 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d820:	83 c4 20             	add    esp,0x20
c001d823:	89 f8                	mov    eax,edi
c001d825:	3c 02                	cmp    al,0x2
c001d827:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d82c:	75 06                	jne    c001d834 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d82e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d832:	75 40                	jne    c001d874 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d834:	89 f8                	mov    eax,edi
c001d836:	3c 02                	cmp    al,0x2
c001d838:	0f 95 c1             	setne  cl
c001d83b:	74 0b                	je     c001d848 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d83d:	b8 30 00 00 00       	mov    eax,0x30
c001d842:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d846:	75 31                	jne    c001d879 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d848:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d84b:	83 f2 01             	xor    edx,0x1
c001d84e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d853:	74 09                	je     c001d85e <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d855:	b8 24 00 00 00       	mov    eax,0x24
c001d85a:	84 d2                	test   dl,dl
c001d85c:	75 1b                	jne    c001d879 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d85e:	84 c9                	test   cl,cl
c001d860:	0f 84 7b fe ff ff    	je     c001d6e1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d866:	b8 20 00 00 00       	mov    eax,0x20
c001d86b:	84 d2                	test   dl,dl
c001d86d:	75 0a                	jne    c001d879 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d86f:	e9 6d fe ff ff       	jmp    c001d6e1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d874:	b8 34 00 00 00       	mov    eax,0x34
c001d879:	50                   	push   eax
c001d87a:	6a 07                	push   0x7
c001d87c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d883:	50                   	push   eax
c001d884:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d88a:	e8 29 f0 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d88f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d893:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	85 f6                	test   esi,esi
c001d89c:	0f 84 a9 00 00 00    	je     c001d94b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8a2:	50                   	push   eax
c001d8a3:	6a 01                	push   0x1
c001d8a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ac:	50                   	push   eax
c001d8ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b3:	e8 b6 fb ff ff       	call   c001d46e <IDE::polling(unsigned char, unsigned int)>
c001d8b8:	83 c4 10             	add    esp,0x10
c001d8bb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8c1:	84 c0                	test   al,al
c001d8c3:	74 1d                	je     c001d8e2 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8c5:	0f b6 f0             	movzx  esi,al
c001d8c8:	56                   	push   esi
c001d8c9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8d0:	0f b6 d2             	movzx  edx,dl
c001d8d3:	50                   	push   eax
c001d8d4:	52                   	push   edx
c001d8d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8db:	e8 f8 f9 ff ff       	call   c001d2d8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8e0:	eb 7f                	jmp    c001d961 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8e7:	74 41                	je     c001d92a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8e9:	31 c9                	xor    ecx,ecx
c001d8eb:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8f3:	50                   	push   eax
c001d8f4:	50                   	push   eax
c001d8f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8fc:	50                   	push   eax
c001d8fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d903:	e8 9e ef ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001d908:	89 c2                	mov    edx,eax
c001d90a:	89 e8                	mov    eax,ebp
c001d90c:	66 ef                	out    dx,ax
c001d90e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d912:	83 c4 10             	add    esp,0x10
c001d915:	41                   	inc    ecx
c001d916:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d91c:	75 cd                	jne    c001d8eb <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d91e:	4e                   	dec    esi
c001d91f:	81 c7 00 02 00 00    	add    edi,0x200
c001d925:	e9 70 ff ff ff       	jmp    c001d89a <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d92a:	51                   	push   ecx
c001d92b:	51                   	push   ecx
c001d92c:	0f b6 d2             	movzx  edx,dl
c001d92f:	52                   	push   edx
c001d930:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d936:	e8 6b ef ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001d93b:	b9 00 01 00 00       	mov    ecx,0x100
c001d940:	89 c2                	mov    edx,eax
c001d942:	fc                   	cld    
c001d943:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d946:	83 c4 10             	add    esp,0x10
c001d949:	eb d3                	jmp    c001d91e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d94b:	31 f6                	xor    esi,esi
c001d94d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d951:	74 11                	je     c001d964 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d953:	50                   	push   eax
c001d954:	50                   	push   eax
c001d955:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d95a:	50                   	push   eax
c001d95b:	53                   	push   ebx
c001d95c:	e8 d1 fb ff ff       	call   c001d532 <ATA::flush(bool)>
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	83 c4 2c             	add    esp,0x2c
c001d967:	89 f0                	mov    eax,esi
c001d969:	5b                   	pop    ebx
c001d96a:	5e                   	pop    esi
c001d96b:	5f                   	pop    edi
c001d96c:	5d                   	pop    ebp
c001d96d:	c3                   	ret    

c001d96e <ATA::read(unsigned long long, int, void*)>:
c001d96e:	57                   	push   edi
c001d96f:	b8 04 00 00 00       	mov    eax,0x4
c001d974:	56                   	push   esi
c001d975:	53                   	push   ebx
c001d976:	83 ec 10             	sub    esp,0x10
c001d979:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d97d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d981:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d985:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d989:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d98c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d992:	77 3b                	ja     c001d9cf <ATA::read(unsigned long long, int, void*)+0x61>
c001d994:	b8 06 00 00 00       	mov    eax,0x6
c001d999:	85 d2                	test   edx,edx
c001d99b:	74 32                	je     c001d9cf <ATA::read(unsigned long long, int, void*)+0x61>
c001d99d:	50                   	push   eax
c001d99e:	50                   	push   eax
c001d99f:	6a 00                	push   0x0
c001d9a1:	52                   	push   edx
c001d9a2:	53                   	push   ebx
c001d9a3:	57                   	push   edi
c001d9a4:	56                   	push   esi
c001d9a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9a9:	e8 1e fc ff ff       	call   c001d5cc <ATA::access(unsigned long long, int, void*, bool)>
c001d9ae:	83 c4 20             	add    esp,0x20
c001d9b1:	85 c0                	test   eax,eax
c001d9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9b7:	75 11                	jne    c001d9ca <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9b9:	01 1d 24 65 02 c0    	add    DWORD PTR ds:0xc0026524,ebx
c001d9bf:	e8 18 f6 fe ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c001d9c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9c8:	eb 05                	jmp    c001d9cf <ATA::read(unsigned long long, int, void*)+0x61>
c001d9ca:	b8 01 00 00 00       	mov    eax,0x1
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	5b                   	pop    ebx
c001d9d3:	5e                   	pop    esi
c001d9d4:	5f                   	pop    edi
c001d9d5:	c3                   	ret    

c001d9d6 <ATA::write(unsigned long long, int, void*)>:
c001d9d6:	57                   	push   edi
c001d9d7:	b8 04 00 00 00       	mov    eax,0x4
c001d9dc:	56                   	push   esi
c001d9dd:	53                   	push   ebx
c001d9de:	83 ec 10             	sub    esp,0x10
c001d9e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9e9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9f1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9f4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9fa:	77 3b                	ja     c001da37 <ATA::write(unsigned long long, int, void*)+0x61>
c001d9fc:	b8 06 00 00 00       	mov    eax,0x6
c001da01:	85 d2                	test   edx,edx
c001da03:	74 32                	je     c001da37 <ATA::write(unsigned long long, int, void*)+0x61>
c001da05:	50                   	push   eax
c001da06:	50                   	push   eax
c001da07:	6a 01                	push   0x1
c001da09:	52                   	push   edx
c001da0a:	53                   	push   ebx
c001da0b:	57                   	push   edi
c001da0c:	56                   	push   esi
c001da0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da11:	e8 b6 fb ff ff       	call   c001d5cc <ATA::access(unsigned long long, int, void*, bool)>
c001da16:	83 c4 20             	add    esp,0x20
c001da19:	85 c0                	test   eax,eax
c001da1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da1f:	75 11                	jne    c001da32 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da21:	01 1d 20 65 02 c0    	add    DWORD PTR ds:0xc0026520,ebx
c001da27:	e8 b0 f5 fe ff       	call   c000cfdc <VgaText::updateDiskUsage()>
c001da2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da30:	eb 05                	jmp    c001da37 <ATA::write(unsigned long long, int, void*)+0x61>
c001da32:	b8 01 00 00 00       	mov    eax,0x1
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	5b                   	pop    ebx
c001da3b:	5e                   	pop    esi
c001da3c:	5f                   	pop    edi
c001da3d:	c3                   	ret    

c001da3e <ATA::detectCHS()>:
c001da3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da42:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da48:	c1 e0 06             	shl    eax,0x6
c001da4b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da51:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da5b:	c7 44 24 04 a3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237a3
c001da63:	e9 cc 7f ff ff       	jmp    c0015a34 <Krnl::panic(char const*)>

c001da68 <ATA::open(int, int, void*)>:
c001da68:	53                   	push   ebx
c001da69:	83 ec 08             	sub    esp,0x8
c001da6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da78:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da7e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da84:	c1 e0 06             	shl    eax,0x6
c001da87:	01 d0                	add    eax,edx
c001da89:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001da90:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001da96:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001da9d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001daa7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001daad:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dab4:	75 0c                	jne    c001dac2 <ATA::open(int, int, void*)+0x5a>
c001dab6:	83 ec 0c             	sub    esp,0xc
c001dab9:	53                   	push   ebx
c001daba:	e8 7f ff ff ff       	call   c001da3e <ATA::detectCHS()>
c001dabf:	83 c4 10             	add    esp,0x10
c001dac2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dac8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dace:	c1 e0 06             	shl    eax,0x6
c001dad1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dad8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dae2:	d1 e8                	shr    eax,1
c001dae4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001daea:	6a 04                	push   0x4
c001daec:	6a 0c                	push   0xc
c001daee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daf5:	50                   	push   eax
c001daf6:	52                   	push   edx
c001daf7:	e8 bc ed ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dafc:	90                   	nop
c001dafd:	90                   	nop
c001dafe:	6a 00                	push   0x0
c001db00:	6a 0c                	push   0xc
c001db02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db09:	50                   	push   eax
c001db0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db10:	e8 a3 ed ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db15:	83 c4 14             	add    esp,0x14
c001db18:	53                   	push   ebx
c001db19:	e8 6a 2f ff ff       	call   c0010a88 <PhysicalDisk::startCache()>
c001db1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db21:	e8 3e 4f ff ff       	call   c0012a64 <createPartitionsForDisk(PhysicalDisk*)>
c001db26:	83 c4 18             	add    esp,0x18
c001db29:	31 c0                	xor    eax,eax
c001db2b:	5b                   	pop    ebx
c001db2c:	c3                   	ret    
c001db2d:	90                   	nop

c001db2e <ATAPI::write(unsigned long long, int, void*)>:
c001db2e:	b8 03 00 00 00       	mov    eax,0x3
c001db33:	c3                   	ret    

c001db34 <ATAPI::close(int, int, void*)>:
c001db34:	83 ec 0c             	sub    esp,0xc
c001db37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db41:	85 c0                	test   eax,eax
c001db43:	74 0c                	je     c001db51 <ATAPI::close(int, int, void*)+0x1d>
c001db45:	83 ec 0c             	sub    esp,0xc
c001db48:	8b 10                	mov    edx,DWORD PTR [eax]
c001db4a:	50                   	push   eax
c001db4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db4e:	83 c4 10             	add    esp,0x10
c001db51:	31 c0                	xor    eax,eax
c001db53:	83 c4 0c             	add    esp,0xc
c001db56:	c3                   	ret    
c001db57:	90                   	nop

c001db58 <ATAPI::ATAPI()>:
c001db58:	83 ec 0c             	sub    esp,0xc
c001db5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5f:	83 ec 04             	sub    esp,0x4
c001db62:	68 00 08 00 00       	push   0x800
c001db67:	68 ec 37 02 c0       	push   0xc00237ec
c001db6c:	50                   	push   eax
c001db6d:	e8 ae 2e ff ff       	call   c0010a20 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db72:	83 c4 10             	add    esp,0x10
c001db75:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c001db7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7e:	89 10                	mov    DWORD PTR [eax],edx
c001db80:	90                   	nop
c001db81:	83 c4 0c             	add    esp,0xc
c001db84:	c3                   	ret    
c001db85:	90                   	nop

c001db86 <ATAPI::readyForCommand()>:
c001db86:	56                   	push   esi
c001db87:	53                   	push   ebx
c001db88:	31 db                	xor    ebx,ebx
c001db8a:	50                   	push   eax
c001db8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db8f:	50                   	push   eax
c001db90:	6a 0c                	push   0xc
c001db92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001db99:	50                   	push   eax
c001db9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dba0:	e8 d3 ed ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	a8 88                	test   al,0x88
c001dbaa:	74 23                	je     c001dbcf <ATAPI::readyForCommand()+0x49>
c001dbac:	43                   	inc    ebx
c001dbad:	83 fb 63             	cmp    ebx,0x63
c001dbb0:	7e dd                	jle    c001db8f <ATAPI::readyForCommand()+0x9>
c001dbb2:	51                   	push   ecx
c001dbb3:	51                   	push   ecx
c001dbb4:	6a 00                	push   0x0
c001dbb6:	68 40 42 0f 00       	push   0xf4240
c001dbbb:	e8 db b3 ff ff       	call   c0018f9b <nanoSleep(unsigned long long)>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbc9:	75 c4                	jne    c001db8f <ATAPI::readyForCommand()+0x9>
c001dbcb:	31 c0                	xor    eax,eax
c001dbcd:	eb 02                	jmp    c001dbd1 <ATAPI::readyForCommand()+0x4b>
c001dbcf:	b0 01                	mov    al,0x1
c001dbd1:	5a                   	pop    edx
c001dbd2:	5b                   	pop    ebx
c001dbd3:	5e                   	pop    esi
c001dbd4:	c3                   	ret    
c001dbd5:	90                   	nop

c001dbd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbd6:	55                   	push   ebp
c001dbd7:	57                   	push   edi
c001dbd8:	56                   	push   esi
c001dbd9:	53                   	push   ebx
c001dbda:	83 ec 20             	sub    esp,0x20
c001dbdd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbe1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbe5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbe9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbed:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbf1:	6a 01                	push   0x1
c001dbf3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbfa:	50                   	push   eax
c001dbfb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc01:	e8 c4 ee ff ff       	call   c001caca <IDE::enableIRQs(unsigned char, bool)>
c001dc06:	5e                   	pop    esi
c001dc07:	58                   	pop    eax
c001dc08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc0f:	50                   	push   eax
c001dc10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc16:	e8 77 ec ff ff       	call   c001c892 <IDE::prepareInterrupt(unsigned char)>
c001dc1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc1e:	e8 63 ff ff ff       	call   c001db86 <ATAPI::readyForCommand()>
c001dc23:	83 c4 10             	add    esp,0x10
c001dc26:	84 c0                	test   al,al
c001dc28:	75 0a                	jne    c001dc34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc2a:	bb 01 00 00 00       	mov    ebx,0x1
c001dc2f:	e9 57 02 00 00       	jmp    c001de8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc34:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc3a:	c1 e0 04             	shl    eax,0x4
c001dc3d:	0f b6 c0             	movzx  eax,al
c001dc40:	50                   	push   eax
c001dc41:	6a 06                	push   0x6
c001dc43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc4a:	50                   	push   eax
c001dc4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc51:	e8 62 ec ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc56:	6a 00                	push   0x0
c001dc58:	6a 01                	push   0x1
c001dc5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc61:	50                   	push   eax
c001dc62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc68:	e8 4b ec ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc6d:	83 c4 20             	add    esp,0x20
c001dc70:	0f b6 c3             	movzx  eax,bl
c001dc73:	50                   	push   eax
c001dc74:	6a 04                	push   0x4
c001dc76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc7d:	50                   	push   eax
c001dc7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc84:	0f b6 df             	movzx  ebx,bh
c001dc87:	e8 2c ec ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc8c:	53                   	push   ebx
c001dc8d:	6a 05                	push   0x5
c001dc8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc96:	50                   	push   eax
c001dc97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc9d:	e8 16 ec ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dca2:	83 c4 20             	add    esp,0x20
c001dca5:	68 a0 00 00 00       	push   0xa0
c001dcaa:	6a 07                	push   0x7
c001dcac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcb3:	50                   	push   eax
c001dcb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcba:	e8 f9 eb ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcbf:	83 c4 0c             	add    esp,0xc
c001dcc2:	6a 01                	push   0x1
c001dcc4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dccb:	50                   	push   eax
c001dccc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcd2:	e8 97 f7 ff ff       	call   c001d46e <IDE::polling(unsigned char, unsigned int)>
c001dcd7:	83 c4 10             	add    esp,0x10
c001dcda:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dce0:	84 c0                	test   al,al
c001dce2:	74 23                	je     c001dd07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dce4:	0f b6 d8             	movzx  ebx,al
c001dce7:	53                   	push   ebx
c001dce8:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dcef:	0f b6 d2             	movzx  edx,dl
c001dcf2:	50                   	push   eax
c001dcf3:	52                   	push   edx
c001dcf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcfa:	e8 d9 f5 ff ff       	call   c001d2d8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dcff:	83 c4 10             	add    esp,0x10
c001dd02:	e9 84 01 00 00       	jmp    c001de8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd07:	53                   	push   ebx
c001dd08:	53                   	push   ebx
c001dd09:	0f b6 d2             	movzx  edx,dl
c001dd0c:	52                   	push   edx
c001dd0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd13:	e8 8e eb ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001dd18:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd1c:	b9 06 00 00 00       	mov    ecx,0x6
c001dd21:	89 c2                	mov    edx,eax
c001dd23:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd33:	85 db                	test   ebx,ebx
c001dd35:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd3c:	0f 84 ec 00 00 00    	je     c001de2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd42:	51                   	push   ecx
c001dd43:	51                   	push   ecx
c001dd44:	52                   	push   edx
c001dd45:	50                   	push   eax
c001dd46:	e8 db ec ff ff       	call   c001ca26 <IDE::waitInterrupt(unsigned char)>
c001dd4b:	83 c4 10             	add    esp,0x10
c001dd4e:	84 c0                	test   al,al
c001dd50:	0f 84 d4 fe ff ff    	je     c001dc2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd56:	56                   	push   esi
c001dd57:	56                   	push   esi
c001dd58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd5f:	50                   	push   eax
c001dd60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd66:	e8 27 eb ff ff       	call   c001c892 <IDE::prepareInterrupt(unsigned char)>
c001dd6b:	83 c4 0c             	add    esp,0xc
c001dd6e:	6a 04                	push   0x4
c001dd70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd77:	50                   	push   eax
c001dd78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd7e:	e8 f5 eb ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001dd83:	83 c4 0c             	add    esp,0xc
c001dd86:	6a 05                	push   0x5
c001dd88:	89 c6                	mov    esi,eax
c001dd8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd91:	50                   	push   eax
c001dd92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd98:	e8 db eb ff ff       	call   c001c978 <IDE::read(unsigned char, unsigned char)>
c001dd9d:	89 f1                	mov    ecx,esi
c001dd9f:	0f b6 c0             	movzx  eax,al
c001dda2:	c1 e0 08             	shl    eax,0x8
c001dda5:	0f b6 f1             	movzx  esi,cl
c001dda8:	09 c6                	or     esi,eax
c001ddaa:	d1 fe                	sar    esi,1
c001ddac:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddb0:	83 c4 10             	add    esp,0x10
c001ddb3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddb8:	74 41                	je     c001ddfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddba:	31 c9                	xor    ecx,ecx
c001ddbc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddc2:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddc6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddcd:	75 0a                	jne    c001ddd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ddcf:	01 c9                	add    ecx,ecx
c001ddd1:	01 cd                	add    ebp,ecx
c001ddd3:	4b                   	dec    ebx
c001ddd4:	e9 54 ff ff ff       	jmp    c001dd2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ddd9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dde2:	51                   	push   ecx
c001dde3:	51                   	push   ecx
c001dde4:	52                   	push   edx
c001dde5:	50                   	push   eax
c001dde6:	e8 bb ea ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001ddeb:	89 c2                	mov    edx,eax
c001dded:	89 f0                	mov    eax,esi
c001ddef:	66 ef                	out    dx,ax
c001ddf1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	41                   	inc    ecx
c001ddf9:	eb c1                	jmp    c001ddbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ddfb:	31 f6                	xor    esi,esi
c001ddfd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de03:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de0e:	75 06                	jne    c001de16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de10:	01 f6                	add    esi,esi
c001de12:	01 f5                	add    ebp,esi
c001de14:	eb bd                	jmp    c001ddd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de16:	51                   	push   ecx
c001de17:	51                   	push   ecx
c001de18:	52                   	push   edx
c001de19:	50                   	push   eax
c001de1a:	e8 87 ea ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001de1f:	89 c2                	mov    edx,eax
c001de21:	66 ed                	in     ax,dx
c001de23:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	46                   	inc    esi
c001de2c:	eb cf                	jmp    c001ddfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de2e:	51                   	push   ecx
c001de2f:	51                   	push   ecx
c001de30:	52                   	push   edx
c001de31:	50                   	push   eax
c001de32:	e8 ef eb ff ff       	call   c001ca26 <IDE::waitInterrupt(unsigned char)>
c001de37:	83 c4 10             	add    esp,0x10
c001de3a:	84 c0                	test   al,al
c001de3c:	0f 84 e8 fd ff ff    	je     c001dc2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de42:	52                   	push   edx
c001de43:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de48:	52                   	push   edx
c001de49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de50:	50                   	push   eax
c001de51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de57:	e8 36 ea ff ff       	call   c001c892 <IDE::prepareInterrupt(unsigned char)>
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	50                   	push   eax
c001de60:	50                   	push   eax
c001de61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de68:	50                   	push   eax
c001de69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de6f:	e8 32 ea ff ff       	call   c001c8a6 <IDE::getBase(unsigned char)>
c001de74:	8d 50 07             	lea    edx,[eax+0x7]
c001de77:	ec                   	in     al,dx
c001de78:	83 c4 10             	add    esp,0x10
c001de7b:	a8 88                	test   al,0x88
c001de7d:	74 0a                	je     c001de89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de7f:	4b                   	dec    ebx
c001de80:	75 dd                	jne    c001de5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de82:	bb 02 00 00 00       	mov    ebx,0x2
c001de87:	eb 02                	jmp    c001de8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de89:	31 db                	xor    ebx,ebx
c001de8b:	83 c4 1c             	add    esp,0x1c
c001de8e:	89 d8                	mov    eax,ebx
c001de90:	5b                   	pop    ebx
c001de91:	5e                   	pop    esi
c001de92:	5f                   	pop    edi
c001de93:	5d                   	pop    ebp
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <ATAPI::diskRemoved()>:
c001de96:	83 ec 18             	sub    esp,0x18
c001de99:	68 f7 37 02 c0       	push   0xc00237f7
c001de9e:	e8 62 13 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001dea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dea7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001deae:	83 c4 1c             	add    esp,0x1c
c001deb1:	c3                   	ret    

c001deb2 <ATAPI::eject()>:
c001deb2:	57                   	push   edi
c001deb3:	b9 03 00 00 00       	mov    ecx,0x3
c001deb8:	53                   	push   ebx
c001deb9:	83 ec 14             	sub    esp,0x14
c001debc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dec0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dec4:	fc                   	cld    
c001dec5:	31 c0                	xor    eax,eax
c001dec7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dec9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dece:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ded3:	50                   	push   eax
c001ded4:	50                   	push   eax
c001ded5:	6a 00                	push   0x0
c001ded7:	6a 00                	push   0x0
c001ded9:	6a 00                	push   0x0
c001dedb:	6a 02                	push   0x2
c001dedd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dee1:	50                   	push   eax
c001dee2:	53                   	push   ebx
c001dee3:	e8 ee fc ff ff       	call   c001dbd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dee8:	83 c4 14             	add    esp,0x14
c001deeb:	53                   	push   ebx
c001deec:	e8 a5 ff ff ff       	call   c001de96 <ATAPI::diskRemoved()>
c001def1:	83 c4 24             	add    esp,0x24
c001def4:	5b                   	pop    ebx
c001def5:	5f                   	pop    edi
c001def6:	c3                   	ret    
c001def7:	90                   	nop

c001def8 <ATAPI::diskInserted()>:
c001def8:	53                   	push   ebx
c001def9:	83 ec 14             	sub    esp,0x14
c001defc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df00:	68 0d 38 02 c0       	push   0xc002380d
c001df05:	e8 fb 12 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001df0a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df14:	e8 6f 2b ff ff       	call   c0010a88 <PhysicalDisk::startCache()>
c001df19:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df1d:	83 c4 18             	add    esp,0x18
c001df20:	5b                   	pop    ebx
c001df21:	e9 3e 4b ff ff       	jmp    c0012a64 <createPartitionsForDisk(PhysicalDisk*)>

c001df26 <ATAPI::detectMedia()>:
c001df26:	56                   	push   esi
c001df27:	53                   	push   ebx
c001df28:	83 ec 28             	sub    esp,0x28
c001df2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df2f:	6a 0c                	push   0xc
c001df31:	6a 00                	push   0x0
c001df33:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df37:	56                   	push   esi
c001df38:	e8 78 27 fe ff       	call   c00006b5 <memset>
c001df3d:	58                   	pop    eax
c001df3e:	5a                   	pop    edx
c001df3f:	6a 00                	push   0x0
c001df41:	6a 00                	push   0x0
c001df43:	6a 00                	push   0x0
c001df45:	6a 00                	push   0x0
c001df47:	56                   	push   esi
c001df48:	53                   	push   ebx
c001df49:	e8 88 fc ff ff       	call   c001dbd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df4e:	83 c4 1c             	add    esp,0x1c
c001df51:	6a 0c                	push   0xc
c001df53:	6a 00                	push   0x0
c001df55:	56                   	push   esi
c001df56:	e8 5a 27 fe ff       	call   c00006b5 <memset>
c001df5b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df60:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df65:	59                   	pop    ecx
c001df66:	58                   	pop    eax
c001df67:	6a 01                	push   0x1
c001df69:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df6d:	50                   	push   eax
c001df6e:	6a 00                	push   0x0
c001df70:	6a 12                	push   0x12
c001df72:	56                   	push   esi
c001df73:	53                   	push   ebx
c001df74:	e8 5d fc ff ff       	call   c001dbd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df79:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df7d:	83 c4 20             	add    esp,0x20
c001df80:	83 e0 7f             	and    eax,0x7f
c001df83:	3c 70                	cmp    al,0x70
c001df85:	74 15                	je     c001df9c <ATAPI::detectMedia()+0x76>
c001df87:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df8e:	75 0c                	jne    c001df9c <ATAPI::detectMedia()+0x76>
c001df90:	83 ec 0c             	sub    esp,0xc
c001df93:	53                   	push   ebx
c001df94:	e8 5f ff ff ff       	call   c001def8 <ATAPI::diskInserted()>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfa0:	83 e0 0f             	and    eax,0xf
c001dfa3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfa8:	75 18                	jne    c001dfc2 <ATAPI::detectMedia()+0x9c>
c001dfaa:	3c 02                	cmp    al,0x2
c001dfac:	75 14                	jne    c001dfc2 <ATAPI::detectMedia()+0x9c>
c001dfae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfb5:	74 24                	je     c001dfdb <ATAPI::detectMedia()+0xb5>
c001dfb7:	83 ec 0c             	sub    esp,0xc
c001dfba:	53                   	push   ebx
c001dfbb:	e8 d6 fe ff ff       	call   c001de96 <ATAPI::diskRemoved()>
c001dfc0:	eb 16                	jmp    c001dfd8 <ATAPI::detectMedia()+0xb2>
c001dfc2:	84 c0                	test   al,al
c001dfc4:	75 15                	jne    c001dfdb <ATAPI::detectMedia()+0xb5>
c001dfc6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfcd:	75 0c                	jne    c001dfdb <ATAPI::detectMedia()+0xb5>
c001dfcf:	83 ec 0c             	sub    esp,0xc
c001dfd2:	53                   	push   ebx
c001dfd3:	e8 20 ff ff ff       	call   c001def8 <ATAPI::diskInserted()>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	83 c4 24             	add    esp,0x24
c001dfde:	5b                   	pop    ebx
c001dfdf:	5e                   	pop    esi
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <ATAPI::open(int, int, void*)>:
c001dfe2:	53                   	push   ebx
c001dfe3:	83 ec 08             	sub    esp,0x8
c001dfe6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dfee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dff2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dff8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dffe:	c1 e0 06             	shl    eax,0x6
c001e001:	01 d0                	add    eax,edx
c001e003:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e00a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e010:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e017:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e021:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e027:	6a 04                	push   0x4
c001e029:	6a 0c                	push   0xc
c001e02b:	51                   	push   ecx
c001e02c:	52                   	push   edx
c001e02d:	e8 86 e8 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e032:	90                   	nop
c001e033:	90                   	nop
c001e034:	6a 00                	push   0x0
c001e036:	6a 0c                	push   0xc
c001e038:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e03f:	50                   	push   eax
c001e040:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e046:	e8 6d e8 ff ff       	call   c001c8b8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e04b:	83 c4 14             	add    esp,0x14
c001e04e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e055:	53                   	push   ebx
c001e056:	e8 cb fe ff ff       	call   c001df26 <ATAPI::detectMedia()>
c001e05b:	83 c4 18             	add    esp,0x18
c001e05e:	31 c0                	xor    eax,eax
c001e060:	5b                   	pop    ebx
c001e061:	c3                   	ret    

c001e062 <ATAPI::read(unsigned long long, int, void*)>:
c001e062:	55                   	push   ebp
c001e063:	57                   	push   edi
c001e064:	56                   	push   esi
c001e065:	53                   	push   ebx
c001e066:	83 ec 1c             	sub    esp,0x1c
c001e069:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e06d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e071:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e075:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e07c:	74 3c                	je     c001e0ba <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e07e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e082:	b9 03 00 00 00       	mov    ecx,0x3
c001e087:	fc                   	cld    
c001e088:	31 c0                	xor    eax,eax
c001e08a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e08c:	0f ce                	bswap  esi
c001e08e:	89 e8                	mov    eax,ebp
c001e090:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e095:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e099:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e09d:	50                   	push   eax
c001e09e:	50                   	push   eax
c001e09f:	55                   	push   ebp
c001e0a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0a4:	c1 e5 0b             	shl    ebp,0xb
c001e0a7:	6a 00                	push   0x0
c001e0a9:	55                   	push   ebp
c001e0aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0ae:	50                   	push   eax
c001e0af:	53                   	push   ebx
c001e0b0:	e8 21 fb ff ff       	call   c001dbd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0b5:	83 c4 20             	add    esp,0x20
c001e0b8:	eb 1a                	jmp    c001e0d4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0ba:	83 ec 0c             	sub    esp,0xc
c001e0bd:	53                   	push   ebx
c001e0be:	e8 63 fe ff ff       	call   c001df26 <ATAPI::detectMedia()>
c001e0c3:	83 c4 10             	add    esp,0x10
c001e0c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0cd:	75 af                	jne    c001e07e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0cf:	b8 02 00 00 00       	mov    eax,0x2
c001e0d4:	83 c4 1c             	add    esp,0x1c
c001e0d7:	5b                   	pop    ebx
c001e0d8:	5e                   	pop    esi
c001e0d9:	5f                   	pop    edi
c001e0da:	5d                   	pop    ebp
c001e0db:	c3                   	ret    

c001e0dc <AVX::open(int, int, void*)>:
c001e0dc:	83 ec 0c             	sub    esp,0xc
c001e0df:	e8 94 10 00 00       	call   c001f178 <avxInit>
c001e0e4:	b8 00 00 00 00       	mov    eax,0x0
c001e0e9:	83 c4 0c             	add    esp,0xc
c001e0ec:	c3                   	ret    
c001e0ed:	90                   	nop

c001e0ee <AVX::close(int, int, void*)>:
c001e0ee:	83 ec 0c             	sub    esp,0xc
c001e0f1:	e8 83 10 00 00       	call   c001f179 <avxClose>
c001e0f6:	b8 00 00 00 00       	mov    eax,0x0
c001e0fb:	83 c4 0c             	add    esp,0xc
c001e0fe:	c3                   	ret    
c001e0ff:	90                   	nop

c001e100 <AVX::available()>:
c001e100:	83 ec 0c             	sub    esp,0xc
c001e103:	e8 68 10 00 00       	call   c001f170 <avxDetect>
c001e108:	85 c0                	test   eax,eax
c001e10a:	0f 95 c0             	setne  al
c001e10d:	83 c4 0c             	add    esp,0xc
c001e110:	c3                   	ret    
c001e111:	90                   	nop

c001e112 <AVX::save(void*)>:
c001e112:	83 ec 0c             	sub    esp,0xc
c001e115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	50                   	push   eax
c001e11d:	e8 54 10 00 00       	call   c001f176 <avxSave>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	90                   	nop
c001e126:	83 c4 0c             	add    esp,0xc
c001e129:	c3                   	ret    

c001e12a <AVX::load(void*)>:
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	50                   	push   eax
c001e135:	e8 3d 10 00 00       	call   c001f177 <avxLoad>
c001e13a:	83 c4 10             	add    esp,0x10
c001e13d:	90                   	nop
c001e13e:	83 c4 0c             	add    esp,0xc
c001e141:	c3                   	ret    

c001e142 <AVX::AVX()>:
c001e142:	83 ec 0c             	sub    esp,0xc
c001e145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e149:	83 ec 08             	sub    esp,0x8
c001e14c:	68 58 38 02 c0       	push   0xc0023858
c001e151:	50                   	push   eax
c001e152:	e8 a7 29 ff ff       	call   c0010afe <FPU::FPU(char const*)>
c001e157:	83 c4 10             	add    esp,0x10
c001e15a:	ba 68 38 02 c0       	mov    edx,0xc0023868
c001e15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e163:	89 10                	mov    DWORD PTR [eax],edx
c001e165:	90                   	nop
c001e166:	83 c4 0c             	add    esp,0xc
c001e169:	c3                   	ret    

c001e16a <MMX::available()>:
c001e16a:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e16f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e175:	83 e0 20             	and    eax,0x20
c001e178:	84 c0                	test   al,al
c001e17a:	0f 95 c0             	setne  al
c001e17d:	c3                   	ret    

c001e17e <MMX::open(int, int, void*)>:
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	e8 66 10 00 00       	call   c001f1ec <x87Init>
c001e186:	b8 00 00 00 00       	mov    eax,0x0
c001e18b:	83 c4 0c             	add    esp,0xc
c001e18e:	c3                   	ret    
c001e18f:	90                   	nop

c001e190 <MMX::close(int, int, void*)>:
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	e8 6e 10 00 00       	call   c001f206 <x87Close>
c001e198:	b8 00 00 00 00       	mov    eax,0x0
c001e19d:	83 c4 0c             	add    esp,0xc
c001e1a0:	c3                   	ret    
c001e1a1:	90                   	nop

c001e1a2 <MMX::save(void*)>:
c001e1a2:	83 ec 0c             	sub    esp,0xc
c001e1a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1a9:	83 ec 0c             	sub    esp,0xc
c001e1ac:	50                   	push   eax
c001e1ad:	e8 2f 10 00 00       	call   c001f1e1 <x87Save>
c001e1b2:	83 c4 10             	add    esp,0x10
c001e1b5:	90                   	nop
c001e1b6:	83 c4 0c             	add    esp,0xc
c001e1b9:	c3                   	ret    

c001e1ba <MMX::load(void*)>:
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c1:	83 ec 0c             	sub    esp,0xc
c001e1c4:	50                   	push   eax
c001e1c5:	e8 1d 10 00 00       	call   c001f1e7 <x87Load>
c001e1ca:	83 c4 10             	add    esp,0x10
c001e1cd:	90                   	nop
c001e1ce:	83 c4 0c             	add    esp,0xc
c001e1d1:	c3                   	ret    

c001e1d2 <MMX::MMX()>:
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d9:	83 ec 08             	sub    esp,0x8
c001e1dc:	68 98 38 02 c0       	push   0xc0023898
c001e1e1:	50                   	push   eax
c001e1e2:	e8 17 29 ff ff       	call   c0010afe <FPU::FPU(char const*)>
c001e1e7:	83 c4 10             	add    esp,0x10
c001e1ea:	ba a8 38 02 c0       	mov    edx,0xc00238a8
c001e1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f3:	89 10                	mov    DWORD PTR [eax],edx
c001e1f5:	90                   	nop
c001e1f6:	83 c4 0c             	add    esp,0xc
c001e1f9:	c3                   	ret    

c001e1fa <SSE::open(int, int, void*)>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	e8 a5 0f 00 00       	call   c001f1a7 <sseInit>
c001e202:	b8 00 00 00 00       	mov    eax,0x0
c001e207:	83 c4 0c             	add    esp,0xc
c001e20a:	c3                   	ret    
c001e20b:	90                   	nop

c001e20c <SSE::close(int, int, void*)>:
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	e8 a3 0f 00 00       	call   c001f1b7 <sseClose>
c001e214:	b8 00 00 00 00       	mov    eax,0x0
c001e219:	83 c4 0c             	add    esp,0xc
c001e21c:	c3                   	ret    
c001e21d:	90                   	nop

c001e21e <SSE::available()>:
c001e21e:	83 ec 1c             	sub    esp,0x1c
c001e221:	e8 5a 0f 00 00       	call   c001f180 <sseDetect>
c001e226:	85 c0                	test   eax,eax
c001e228:	0f 95 c0             	setne  al
c001e22b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e22f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e233:	83 c4 1c             	add    esp,0x1c
c001e236:	c3                   	ret    
c001e237:	90                   	nop

c001e238 <SSE::save(void*)>:
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e23f:	83 ec 0c             	sub    esp,0xc
c001e242:	50                   	push   eax
c001e243:	e8 53 0f 00 00       	call   c001f19b <sseSave>
c001e248:	83 c4 10             	add    esp,0x10
c001e24b:	90                   	nop
c001e24c:	83 c4 0c             	add    esp,0xc
c001e24f:	c3                   	ret    

c001e250 <SSE::load(void*)>:
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e257:	83 ec 0c             	sub    esp,0xc
c001e25a:	50                   	push   eax
c001e25b:	e8 41 0f 00 00       	call   c001f1a1 <sseLoad>
c001e260:	83 c4 10             	add    esp,0x10
c001e263:	90                   	nop
c001e264:	83 c4 0c             	add    esp,0xc
c001e267:	c3                   	ret    

c001e268 <SSE::SSE()>:
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26f:	83 ec 08             	sub    esp,0x8
c001e272:	68 d8 38 02 c0       	push   0xc00238d8
c001e277:	50                   	push   eax
c001e278:	e8 81 28 ff ff       	call   c0010afe <FPU::FPU(char const*)>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c001e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e289:	89 10                	mov    DWORD PTR [eax],edx
c001e28b:	90                   	nop
c001e28c:	83 c4 0c             	add    esp,0xc
c001e28f:	c3                   	ret    

c001e290 <x87::open(int, int, void*)>:
c001e290:	83 ec 0c             	sub    esp,0xc
c001e293:	e8 54 0f 00 00       	call   c001f1ec <x87Init>
c001e298:	b8 00 00 00 00       	mov    eax,0x0
c001e29d:	83 c4 0c             	add    esp,0xc
c001e2a0:	c3                   	ret    
c001e2a1:	90                   	nop

c001e2a2 <x87::close(int, int, void*)>:
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	e8 5c 0f 00 00       	call   c001f206 <x87Close>
c001e2aa:	b8 00 00 00 00       	mov    eax,0x0
c001e2af:	83 c4 0c             	add    esp,0xc
c001e2b2:	c3                   	ret    
c001e2b3:	90                   	nop

c001e2b4 <x87::available()>:
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	e8 0a 0f 00 00       	call   c001f1c6 <x87Detect>
c001e2bc:	85 c0                	test   eax,eax
c001e2be:	0f 95 c0             	setne  al
c001e2c1:	83 c4 0c             	add    esp,0xc
c001e2c4:	c3                   	ret    
c001e2c5:	90                   	nop

c001e2c6 <x87::save(void*)>:
c001e2c6:	83 ec 0c             	sub    esp,0xc
c001e2c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2cd:	83 ec 0c             	sub    esp,0xc
c001e2d0:	50                   	push   eax
c001e2d1:	e8 0b 0f 00 00       	call   c001f1e1 <x87Save>
c001e2d6:	83 c4 10             	add    esp,0x10
c001e2d9:	90                   	nop
c001e2da:	83 c4 0c             	add    esp,0xc
c001e2dd:	c3                   	ret    

c001e2de <x87::load(void*)>:
c001e2de:	83 ec 0c             	sub    esp,0xc
c001e2e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	50                   	push   eax
c001e2e9:	e8 f9 0e 00 00       	call   c001f1e7 <x87Load>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	90                   	nop
c001e2f2:	83 c4 0c             	add    esp,0xc
c001e2f5:	c3                   	ret    

c001e2f6 <x87::x87()>:
c001e2f6:	83 ec 0c             	sub    esp,0xc
c001e2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fd:	83 ec 08             	sub    esp,0x8
c001e300:	68 18 39 02 c0       	push   0xc0023918
c001e305:	50                   	push   eax
c001e306:	e8 f3 27 ff ff       	call   c0010afe <FPU::FPU(char const*)>
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	ba 28 39 02 c0       	mov    edx,0xc0023928
c001e313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e317:	89 10                	mov    DWORD PTR [eax],edx
c001e319:	90                   	nop
c001e31a:	83 c4 0c             	add    esp,0xc
c001e31d:	c3                   	ret    

c001e31e <APIC::disable()>:
c001e31e:	90                   	nop
c001e31f:	c3                   	ret    

c001e320 <APIC::close(int, int, void*)>:
c001e320:	55                   	push   ebp
c001e321:	89 e5                	mov    ebp,esp
c001e323:	83 ec 08             	sub    esp,0x8
c001e326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e329:	8b 00                	mov    eax,DWORD PTR [eax]
c001e32b:	83 c0 3c             	add    eax,0x3c
c001e32e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e336:	ff d0                	call   eax
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	b8 00 00 00 00       	mov    eax,0x0
c001e340:	c9                   	leave  
c001e341:	c3                   	ret    

c001e342 <IOAPIC::close(int, int, void*)>:
c001e342:	b8 00 00 00 00       	mov    eax,0x0
c001e347:	c3                   	ret    

c001e348 <APIC::io_wait()>:
c001e348:	eb 00                	jmp    c001e34a <APIC::io_wait()+0x2>
c001e34a:	eb 00                	jmp    c001e34c <APIC::io_wait()+0x4>
c001e34c:	90                   	nop
c001e34d:	c3                   	ret    

c001e34e <APIC::getBase()>:
c001e34e:	55                   	push   ebp
c001e34f:	89 e5                	mov    ebp,esp
c001e351:	83 ec 18             	sub    esp,0x18
c001e354:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e359:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e35f:	83 e0 08             	and    eax,0x8
c001e362:	84 c0                	test   al,al
c001e364:	75 07                	jne    c001e36d <APIC::getBase()+0x1f>
c001e366:	b8 00 00 00 00       	mov    eax,0x0
c001e36b:	eb 21                	jmp    c001e38e <APIC::getBase()+0x40>
c001e36d:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e372:	83 ec 08             	sub    esp,0x8
c001e375:	6a 1b                	push   0x1b
c001e377:	50                   	push   eax
c001e378:	e8 f3 d1 fe ff       	call   c000b570 <Computer::rdmsr(unsigned int)>
c001e37d:	83 c4 10             	add    esp,0x10
c001e380:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e383:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e386:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e389:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e38e:	c9                   	leave  
c001e38f:	c3                   	ret    

c001e390 <APIC::eoi(unsigned char)>:
c001e390:	55                   	push   ebp
c001e391:	89 e5                	mov    ebp,esp
c001e393:	83 ec 28             	sub    esp,0x28
c001e396:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e399:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3a2:	e8 a7 ff ff ff       	call   c001e34e <APIC::getBase()>
c001e3a7:	83 c4 10             	add    esp,0x10
c001e3aa:	05 b0 00 00 00       	add    eax,0xb0
c001e3af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3b5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3bb:	90                   	nop
c001e3bc:	c9                   	leave  
c001e3bd:	c3                   	ret    

c001e3be <APIC::open(int, int, void*)>:
c001e3be:	55                   	push   ebp
c001e3bf:	89 e5                	mov    ebp,esp
c001e3c1:	57                   	push   edi
c001e3c2:	56                   	push   esi
c001e3c3:	53                   	push   ebx
c001e3c4:	83 ec 1c             	sub    esp,0x1c
c001e3c7:	83 ec 0c             	sub    esp,0xc
c001e3ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3cd:	e8 7c ff ff ff       	call   c001e34e <APIC::getBase()>
c001e3d2:	83 c4 10             	add    esp,0x10
c001e3d5:	05 f0 00 00 00       	add    eax,0xf0
c001e3da:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3e3:	e8 66 ff ff ff       	call   c001e34e <APIC::getBase()>
c001e3e8:	83 c4 10             	add    esp,0x10
c001e3eb:	89 c2                	mov    edx,eax
c001e3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3f6:	89 c7                	mov    edi,eax
c001e3f8:	81 e7 ff 00 00 00    	and    edi,0xff
c001e3fe:	89 d0                	mov    eax,edx
c001e400:	ba 00 00 00 00       	mov    edx,0x0
c001e405:	89 c1                	mov    ecx,eax
c001e407:	80 e5 ff             	and    ch,0xff
c001e40a:	89 cb                	mov    ebx,ecx
c001e40c:	89 d0                	mov    eax,edx
c001e40e:	25 ff 00 00 00       	and    eax,0xff
c001e413:	89 c6                	mov    esi,eax
c001e415:	89 d8                	mov    eax,ebx
c001e417:	89 f2                	mov    edx,esi
c001e419:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e41c:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e41f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e423:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e427:	83 e0 00             	and    eax,0x0
c001e42a:	09 d0                	or     eax,edx
c001e42c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e433:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e439:	8d 50 01             	lea    edx,[eax+0x1]
c001e43c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e43f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e445:	31 d2                	xor    edx,edx
c001e447:	88 c2                	mov    dl,al
c001e449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e44c:	83 c2 08             	add    edx,0x8
c001e44f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e453:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e459:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e45f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e463:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e466:	8b 00                	mov    eax,DWORD PTR [eax]
c001e468:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e46b:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e472:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e475:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e478:	89 10                	mov    DWORD PTR [eax],edx
c001e47a:	b8 00 00 00 00       	mov    eax,0x0
c001e47f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e482:	5b                   	pop    ebx
c001e483:	5e                   	pop    esi
c001e484:	5f                   	pop    edi
c001e485:	5d                   	pop    ebp
c001e486:	c3                   	ret    
c001e487:	90                   	nop

c001e488 <IOAPIC::IOAPIC()>:
c001e488:	83 ec 0c             	sub    esp,0xc
c001e48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48f:	83 ec 08             	sub    esp,0x8
c001e492:	68 58 39 02 c0       	push   0xc0023958
c001e497:	50                   	push   eax
c001e498:	e8 6d 23 ff ff       	call   c001080a <Device::Device(char const*)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	ba 80 3a 02 c0       	mov    edx,0xc0023a80
c001e4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a9:	89 10                	mov    DWORD PTR [eax],edx
c001e4ab:	90                   	nop
c001e4ac:	83 c4 0c             	add    esp,0xc
c001e4af:	c3                   	ret    

c001e4b0 <APIC::APIC()>:
c001e4b0:	53                   	push   ebx
c001e4b1:	83 ec 18             	sub    esp,0x18
c001e4b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4b8:	83 ec 08             	sub    esp,0x8
c001e4bb:	68 60 39 02 c0       	push   0xc0023960
c001e4c0:	50                   	push   eax
c001e4c1:	e8 92 2a ff ff       	call   c0010f58 <InterruptController::InterruptController(char const*)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c001e4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d2:	89 10                	mov    DWORD PTR [eax],edx
c001e4d4:	a0 80 65 02 c0       	mov    al,ds:0xc0026580
c001e4d9:	83 f0 01             	xor    eax,0x1
c001e4dc:	84 c0                	test   al,al
c001e4de:	0f 84 a2 00 00 00    	je     c001e586 <APIC::APIC()+0xd6>
c001e4e4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4e9:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c001e4ee:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e4f2:	0f 83 87 00 00 00    	jae    c001e57f <APIC::APIC()+0xcf>
c001e4f8:	83 ec 0c             	sub    esp,0xc
c001e4fb:	68 68 01 00 00       	push   0x168
c001e500:	e8 cb 0b ff ff       	call   c000f0d0 <operator new(unsigned long)>
c001e505:	83 c4 10             	add    esp,0x10
c001e508:	89 c3                	mov    ebx,eax
c001e50a:	83 ec 0c             	sub    esp,0xc
c001e50d:	53                   	push   ebx
c001e50e:	e8 75 ff ff ff       	call   c001e488 <IOAPIC::IOAPIC()>
c001e513:	83 c4 10             	add    esp,0x10
c001e516:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e51a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e51e:	25 ff 00 00 00       	and    eax,0xff
c001e523:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e527:	89 14 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],edx
c001e52e:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e533:	40                   	inc    eax
c001e534:	a3 40 65 02 c0       	mov    ds:0xc0026540,eax
c001e539:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e53e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e544:	83 ec 08             	sub    esp,0x8
c001e547:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e54b:	50                   	push   eax
c001e54c:	e8 c9 20 ff ff       	call   c001061a <Device::addChild(Device*)>
c001e551:	83 c4 10             	add    esp,0x10
c001e554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e558:	8b 00                	mov    eax,DWORD PTR [eax]
c001e55a:	83 c0 08             	add    eax,0x8
c001e55d:	8b 10                	mov    edx,DWORD PTR [eax]
c001e55f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e563:	25 ff 00 00 00       	and    eax,0xff
c001e568:	6a 00                	push   0x0
c001e56a:	6a 00                	push   0x0
c001e56c:	50                   	push   eax
c001e56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e571:	ff d2                	call   edx
c001e573:	83 c4 10             	add    esp,0x10
c001e576:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e57a:	e9 6a ff ff ff       	jmp    c001e4e9 <APIC::APIC()+0x39>
c001e57f:	c6 05 80 65 02 c0 01 	mov    BYTE PTR ds:0xc0026580,0x1
c001e586:	90                   	nop
c001e587:	83 c4 18             	add    esp,0x18
c001e58a:	5b                   	pop    ebx
c001e58b:	c3                   	ret    

c001e58c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e58c:	55                   	push   ebp
c001e58d:	89 e5                	mov    ebp,esp
c001e58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e592:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e598:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e59b:	72 1d                	jb     c001e5ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5af:	01 d0                	add    eax,edx
c001e5b1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5b4:	73 04                	jae    c001e5ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5b6:	b0 01                	mov    al,0x1
c001e5b8:	eb 02                	jmp    c001e5bc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5ba:	b0 00                	mov    al,0x0
c001e5bc:	5d                   	pop    ebp
c001e5bd:	c3                   	ret    

c001e5be <IOAPIC::read(int)>:
c001e5be:	55                   	push   ebp
c001e5bf:	89 e5                	mov    ebp,esp
c001e5c1:	83 ec 10             	sub    esp,0x10
c001e5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5d3:	31 d2                	xor    edx,edx
c001e5d5:	88 c2                	mov    dl,al
c001e5d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5da:	89 10                	mov    DWORD PTR [eax],edx
c001e5dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5df:	83 c0 10             	add    eax,0x10
c001e5e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5e4:	c9                   	leave  
c001e5e5:	c3                   	ret    

c001e5e6 <IOAPIC::open(int, int, void*)>:
c001e5e6:	55                   	push   ebp
c001e5e7:	89 e5                	mov    ebp,esp
c001e5e9:	57                   	push   edi
c001e5ea:	56                   	push   esi
c001e5eb:	53                   	push   ebx
c001e5ec:	83 ec 0c             	sub    esp,0xc
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	68 8b 39 02 c0       	push   0xc002398b
c001e5f7:	e8 09 0c ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001e5fc:	83 c4 10             	add    esp,0x10
c001e5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e602:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e605:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e614:	8b 14 85 60 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafa0]
c001e61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e627:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e62d:	8b 14 85 e0 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf20]
c001e634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e637:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e640:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e649:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e64f:	89 c7                	mov    edi,eax
c001e651:	81 e7 ff 00 00 00    	and    edi,0xff
c001e657:	89 d0                	mov    eax,edx
c001e659:	ba 00 00 00 00       	mov    edx,0x0
c001e65e:	89 c1                	mov    ecx,eax
c001e660:	80 e5 ff             	and    ch,0xff
c001e663:	89 cb                	mov    ebx,ecx
c001e665:	89 d0                	mov    eax,edx
c001e667:	25 ff 00 00 00       	and    eax,0xff
c001e66c:	89 c6                	mov    esi,eax
c001e66e:	89 d8                	mov    eax,ebx
c001e670:	89 f2                	mov    edx,esi
c001e672:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e675:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e678:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e67c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e680:	83 e0 00             	and    eax,0x0
c001e683:	09 d0                	or     eax,edx
c001e685:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e68c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e692:	8d 50 01             	lea    edx,[eax+0x1]
c001e695:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e698:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e69e:	31 d2                	xor    edx,edx
c001e6a0:	88 c2                	mov    dl,al
c001e6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a5:	83 c2 08             	add    edx,0x8
c001e6a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6ac:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6b2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6b8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6bc:	83 ec 08             	sub    esp,0x8
c001e6bf:	6a 01                	push   0x1
c001e6c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6c4:	e8 f5 fe ff ff       	call   c001e5be <IOAPIC::read(int)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	c1 f8 10             	sar    eax,0x10
c001e6cf:	25 ff 00 00 00       	and    eax,0xff
c001e6d4:	8d 50 01             	lea    edx,[eax+0x1]
c001e6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6da:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6e0:	b8 00 00 00 00       	mov    eax,0x0
c001e6e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6e8:	5b                   	pop    ebx
c001e6e9:	5e                   	pop    esi
c001e6ea:	5f                   	pop    edi
c001e6eb:	5d                   	pop    ebp
c001e6ec:	c3                   	ret    
c001e6ed:	90                   	nop

c001e6ee <IOAPIC::write(int, int)>:
c001e6ee:	55                   	push   ebp
c001e6ef:	89 e5                	mov    ebp,esp
c001e6f1:	83 ec 10             	sub    esp,0x10
c001e6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e700:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e703:	31 d2                	xor    edx,edx
c001e705:	88 c2                	mov    dl,al
c001e707:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e70a:	89 10                	mov    DWORD PTR [eax],edx
c001e70c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e70f:	8d 50 10             	lea    edx,[eax+0x10]
c001e712:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e715:	89 02                	mov    DWORD PTR [edx],eax
c001e717:	90                   	nop
c001e718:	c9                   	leave  
c001e719:	c3                   	ret    

c001e71a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e71a:	55                   	push   ebp
c001e71b:	89 e5                	mov    ebp,esp
c001e71d:	83 ec 20             	sub    esp,0x20
c001e720:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e723:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e726:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e729:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e72c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e72f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e732:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e735:	88 d0                	mov    al,dl
c001e737:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e73a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e73d:	25 ff 00 00 00       	and    eax,0xff
c001e742:	83 c0 08             	add    eax,0x8
c001e745:	01 c0                	add    eax,eax
c001e747:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e74a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e74d:	25 ff 00 00 00       	and    eax,0xff
c001e752:	83 c0 08             	add    eax,0x8
c001e755:	01 c0                	add    eax,eax
c001e757:	40                   	inc    eax
c001e758:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e75b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e75e:	50                   	push   eax
c001e75f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e762:	e8 57 fe ff ff       	call   c001e5be <IOAPIC::read(int)>
c001e767:	83 c4 08             	add    esp,0x8
c001e76a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e76d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e774:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e777:	c1 e0 18             	shl    eax,0x18
c001e77a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e77d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e780:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e783:	52                   	push   edx
c001e784:	50                   	push   eax
c001e785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e788:	e8 61 ff ff ff       	call   c001e6ee <IOAPIC::write(int, int)>
c001e78d:	83 c4 0c             	add    esp,0xc
c001e790:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e793:	50                   	push   eax
c001e794:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e797:	e8 22 fe ff ff       	call   c001e5be <IOAPIC::read(int)>
c001e79c:	83 c4 08             	add    esp,0x8
c001e79f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7a2:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7a9:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7b0:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7b7:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7be:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7c1:	25 ff 00 00 00       	and    eax,0xff
c001e7c6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7cf:	52                   	push   edx
c001e7d0:	50                   	push   eax
c001e7d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7d4:	e8 15 ff ff ff       	call   c001e6ee <IOAPIC::write(int, int)>
c001e7d9:	83 c4 0c             	add    esp,0xc
c001e7dc:	90                   	nop
c001e7dd:	c9                   	leave  
c001e7de:	c3                   	ret    
c001e7df:	90                   	nop

c001e7e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7e0:	55                   	push   ebp
c001e7e1:	89 e5                	mov    ebp,esp
c001e7e3:	56                   	push   esi
c001e7e4:	53                   	push   ebx
c001e7e5:	83 ec 20             	sub    esp,0x20
c001e7e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7ee:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e7f2:	74 2a                	je     c001e81e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e7f4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e7f8:	7f 14                	jg     c001e80e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e7fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7fd:	05 e0 3e 02 c0       	add    eax,0xc0023ee0
c001e802:	8a 00                	mov    al,BYTE PTR [eax]
c001e804:	25 ff 00 00 00       	and    eax,0xff
c001e809:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e80c:	eb 10                	jmp    c001e81e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e80e:	83 ec 0c             	sub    esp,0xc
c001e811:	68 9c 39 02 c0       	push   0xc002399c
c001e816:	e8 19 72 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e822:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e827:	83 ec 08             	sub    esp,0x8
c001e82a:	50                   	push   eax
c001e82b:	68 d4 39 02 c0       	push   0xc00239d4
c001e830:	e8 d0 09 ff ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001e835:	83 c4 10             	add    esp,0x10
c001e838:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e83f:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e844:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e847:	7d 64                	jge    c001e8ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e849:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e84c:	8b 04 85 60 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9aa0]
c001e853:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e856:	83 ec 08             	sub    esp,0x8
c001e859:	52                   	push   edx
c001e85a:	50                   	push   eax
c001e85b:	e8 2c fd ff ff       	call   c001e58c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e860:	83 c4 10             	add    esp,0x10
c001e863:	84 c0                	test   al,al
c001e865:	74 41                	je     c001e8a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e86a:	8b 1c 85 60 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9aa0]
c001e871:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e874:	83 c0 20             	add    eax,0x20
c001e877:	89 c6                	mov    esi,eax
c001e879:	81 e6 ff 00 00 00    	and    esi,0xff
c001e87f:	e8 41 60 ff ff       	call   c00148c5 <getCPUNumber()>
c001e884:	89 c2                	mov    edx,eax
c001e886:	c1 fa 1f             	sar    edx,0x1f
c001e889:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e88c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e892:	83 ec 0c             	sub    esp,0xc
c001e895:	56                   	push   esi
c001e896:	52                   	push   edx
c001e897:	50                   	push   eax
c001e898:	51                   	push   ecx
c001e899:	53                   	push   ebx
c001e89a:	e8 7b fe ff ff       	call   c001e71a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e89f:	83 c4 20             	add    esp,0x20
c001e8a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8a6:	eb 05                	jmp    c001e8ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8ab:	eb 92                	jmp    c001e83f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8ad:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8b0:	83 f0 01             	xor    eax,0x1
c001e8b3:	84 c0                	test   al,al
c001e8b5:	74 10                	je     c001e8c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8b7:	83 ec 0c             	sub    esp,0xc
c001e8ba:	68 eb 39 02 c0       	push   0xc00239eb
c001e8bf:	e8 70 71 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001e8c4:	83 c4 10             	add    esp,0x10
c001e8c7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8cb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8d2:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8d6:	7f 65                	jg     c001e93d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8de:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8e8:	01 ca                	add    edx,ecx
c001e8ea:	83 c2 54             	add    edx,0x54
c001e8ed:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e8f1:	85 c0                	test   eax,eax
c001e8f3:	75 43                	jne    c001e938 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e902:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e905:	01 ca                	add    edx,ecx
c001e907:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e90a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e90d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e914:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e917:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e91e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e921:	01 ca                	add    edx,ecx
c001e923:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e929:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e92c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e930:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e933:	83 e8 20             	sub    eax,0x20
c001e936:	eb 1a                	jmp    c001e952 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e938:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e93b:	eb 95                	jmp    c001e8d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e93d:	83 ec 0c             	sub    esp,0xc
c001e940:	68 f8 39 02 c0       	push   0xc00239f8
c001e945:	e8 ea 70 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e952:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e955:	5b                   	pop    ebx
c001e956:	5e                   	pop    esi
c001e957:	5d                   	pop    ebp
c001e958:	c3                   	ret    
c001e959:	90                   	nop

c001e95a <PIC::disable()>:
c001e95a:	55                   	push   ebp
c001e95b:	89 e5                	mov    ebp,esp
c001e95d:	83 ec 10             	sub    esp,0x10
c001e960:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e966:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e96a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e96d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e971:	ee                   	out    dx,al
c001e972:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e978:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e97c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e97f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e983:	ee                   	out    dx,al
c001e984:	90                   	nop
c001e985:	c9                   	leave  
c001e986:	c3                   	ret    
c001e987:	90                   	nop

c001e988 <PIC::close(int, int, void*)>:
c001e988:	55                   	push   ebp
c001e989:	89 e5                	mov    ebp,esp
c001e98b:	83 ec 08             	sub    esp,0x8
c001e98e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e991:	8b 00                	mov    eax,DWORD PTR [eax]
c001e993:	83 c0 3c             	add    eax,0x3c
c001e996:	8b 00                	mov    eax,DWORD PTR [eax]
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e99e:	ff d0                	call   eax
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	b8 00 00 00 00       	mov    eax,0x0
c001e9a8:	c9                   	leave  
c001e9a9:	c3                   	ret    

c001e9aa <PIC::PIC()>:
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b1:	83 ec 08             	sub    esp,0x8
c001e9b4:	68 a4 3a 02 c0       	push   0xc0023aa4
c001e9b9:	50                   	push   eax
c001e9ba:	e8 99 25 ff ff       	call   c0010f58 <InterruptController::InterruptController(char const*)>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c001e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cb:	89 10                	mov    DWORD PTR [eax],edx
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9d7:	31 d2                	xor    edx,edx
c001e9d9:	88 c2                	mov    dl,al
c001e9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9df:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f0:	31 d2                	xor    edx,edx
c001e9f2:	88 c2                	mov    dl,al
c001e9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea07:	8d 50 01             	lea    edx,[eax+0x1]
c001ea0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea0e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea14:	31 d2                	xor    edx,edx
c001ea16:	88 c2                	mov    dl,al
c001ea18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea20:	83 e1 3f             	and    ecx,0x3f
c001ea23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea31:	31 d2                	xor    edx,edx
c001ea33:	88 c2                	mov    dl,al
c001ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea39:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea4a:	31 d2                	xor    edx,edx
c001ea4c:	88 c2                	mov    dl,al
c001ea4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea52:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea61:	8d 50 01             	lea    edx,[eax+0x1]
c001ea64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea68:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea6e:	31 d2                	xor    edx,edx
c001ea70:	88 c2                	mov    dl,al
c001ea72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea76:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea7a:	83 e1 3f             	and    ecx,0x3f
c001ea7d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea81:	90                   	nop
c001ea82:	83 c4 0c             	add    esp,0xc
c001ea85:	c3                   	ret    

c001ea86 <PIC::ioWait()>:
c001ea86:	eb 00                	jmp    c001ea88 <PIC::ioWait()+0x2>
c001ea88:	eb 00                	jmp    c001ea8a <PIC::ioWait()+0x4>
c001ea8a:	90                   	nop
c001ea8b:	c3                   	ret    

c001ea8c <PIC::getIRQReg(int)>:
c001ea8c:	55                   	push   ebp
c001ea8d:	89 e5                	mov    ebp,esp
c001ea8f:	83 ec 10             	sub    esp,0x10
c001ea92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea95:	25 ff 00 00 00       	and    eax,0xff
c001ea9a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eaa0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eaa3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eaa6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eaaa:	ee                   	out    dx,al
c001eaab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaae:	25 ff 00 00 00       	and    eax,0xff
c001eab3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eab9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eabc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eabf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eac3:	ee                   	out    dx,al
c001eac4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eaca:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eace:	89 c2                	mov    edx,eax
c001ead0:	ec                   	in     al,dx
c001ead1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001ead4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ead7:	25 ff 00 00 00       	and    eax,0xff
c001eadc:	c1 e0 08             	shl    eax,0x8
c001eadf:	89 c1                	mov    ecx,eax
c001eae1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eae7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eaeb:	89 c2                	mov    edx,eax
c001eaed:	ec                   	in     al,dx
c001eaee:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eaf1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eaf4:	25 ff 00 00 00       	and    eax,0xff
c001eaf9:	09 c8                	or     eax,ecx
c001eafb:	c9                   	leave  
c001eafc:	c3                   	ret    
c001eafd:	90                   	nop

c001eafe <PIC::eoi(unsigned char)>:
c001eafe:	55                   	push   ebp
c001eaff:	89 e5                	mov    ebp,esp
c001eb01:	83 ec 14             	sub    esp,0x14
c001eb04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb07:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb0a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb0e:	75 23                	jne    c001eb33 <PIC::eoi(unsigned char)+0x35>
c001eb10:	6a 0b                	push   0xb
c001eb12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb15:	e8 72 ff ff ff       	call   c001ea8c <PIC::getIRQReg(int)>
c001eb1a:	83 c4 08             	add    esp,0x8
c001eb1d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb21:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb25:	25 ff ff 00 00       	and    eax,0xffff
c001eb2a:	25 80 00 00 00       	and    eax,0x80
c001eb2f:	85 c0                	test   eax,eax
c001eb31:	74 5f                	je     c001eb92 <PIC::eoi(unsigned char)+0x94>
c001eb33:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb37:	75 2d                	jne    c001eb66 <PIC::eoi(unsigned char)+0x68>
c001eb39:	6a 0b                	push   0xb
c001eb3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb3e:	e8 49 ff ff ff       	call   c001ea8c <PIC::getIRQReg(int)>
c001eb43:	83 c4 08             	add    esp,0x8
c001eb46:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb4a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb4d:	66 85 c0             	test   ax,ax
c001eb50:	78 14                	js     c001eb66 <PIC::eoi(unsigned char)+0x68>
c001eb52:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb58:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb5c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb5f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb63:	ee                   	out    dx,al
c001eb64:	eb 2d                	jmp    c001eb93 <PIC::eoi(unsigned char)+0x95>
c001eb66:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb6a:	76 12                	jbe    c001eb7e <PIC::eoi(unsigned char)+0x80>
c001eb6c:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb72:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb76:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb79:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb7d:	ee                   	out    dx,al
c001eb7e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb84:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb88:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb8b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb8f:	ee                   	out    dx,al
c001eb90:	eb 01                	jmp    c001eb93 <PIC::eoi(unsigned char)+0x95>
c001eb92:	90                   	nop
c001eb93:	c9                   	leave  
c001eb94:	c3                   	ret    
c001eb95:	90                   	nop

c001eb96 <PIC::remap()>:
c001eb96:	55                   	push   ebp
c001eb97:	89 e5                	mov    ebp,esp
c001eb99:	83 ec 48             	sub    esp,0x48
c001eb9c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001eba3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebaa:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebb0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebb3:	89 c2                	mov    edx,eax
c001ebb5:	ec                   	in     al,dx
c001ebb6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebb9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebbc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebbf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebc5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebc8:	89 c2                	mov    edx,eax
c001ebca:	ec                   	in     al,dx
c001ebcb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebce:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebd1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebd4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebda:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebde:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebe1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebe4:	ee                   	out    dx,al
c001ebe5:	83 ec 0c             	sub    esp,0xc
c001ebe8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebeb:	e8 96 fe ff ff       	call   c001ea86 <PIC::ioWait()>
c001ebf0:	83 c4 10             	add    esp,0x10
c001ebf3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ebf9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ebfd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec00:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec03:	ee                   	out    dx,al
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec0a:	e8 77 fe ff ff       	call   c001ea86 <PIC::ioWait()>
c001ec0f:	83 c4 10             	add    esp,0x10
c001ec12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec15:	25 ff 00 00 00       	and    eax,0xff
c001ec1a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec20:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec23:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec26:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec29:	ee                   	out    dx,al
c001ec2a:	83 ec 0c             	sub    esp,0xc
c001ec2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec30:	e8 51 fe ff ff       	call   c001ea86 <PIC::ioWait()>
c001ec35:	83 c4 10             	add    esp,0x10
c001ec38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec3b:	25 ff 00 00 00       	and    eax,0xff
c001ec40:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec46:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec49:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec4c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec4f:	ee                   	out    dx,al
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec56:	e8 2b fe ff ff       	call   c001ea86 <PIC::ioWait()>
c001ec5b:	83 c4 10             	add    esp,0x10
c001ec5e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec64:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec68:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec6b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec6e:	ee                   	out    dx,al
c001ec6f:	83 ec 0c             	sub    esp,0xc
c001ec72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec75:	e8 0c fe ff ff       	call   c001ea86 <PIC::ioWait()>
c001ec7a:	83 c4 10             	add    esp,0x10
c001ec7d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec83:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec87:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec8a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec8d:	ee                   	out    dx,al
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec94:	e8 ed fd ff ff       	call   c001ea86 <PIC::ioWait()>
c001ec99:	83 c4 10             	add    esp,0x10
c001ec9c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eca2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001eca6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001eca9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecac:	ee                   	out    dx,al
c001ecad:	83 ec 0c             	sub    esp,0xc
c001ecb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb3:	e8 ce fd ff ff       	call   c001ea86 <PIC::ioWait()>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecc1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ecc5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecc8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eccb:	ee                   	out    dx,al
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd2:	e8 af fd ff ff       	call   c001ea86 <PIC::ioWait()>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ecdd:	25 ff 00 00 00       	and    eax,0xff
c001ece2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ece8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001eceb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ecee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecf1:	ee                   	out    dx,al
c001ecf2:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ecf5:	25 ff 00 00 00       	and    eax,0xff
c001ecfa:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed00:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed03:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed06:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed09:	ee                   	out    dx,al
c001ed0a:	90                   	nop
c001ed0b:	c9                   	leave  
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <PIC::open(int, int, void*)>:
c001ed0e:	55                   	push   ebp
c001ed0f:	89 e5                	mov    ebp,esp
c001ed11:	83 ec 18             	sub    esp,0x18
c001ed14:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed1a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed1e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed21:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed25:	ee                   	out    dx,al
c001ed26:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed2c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed30:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed33:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed37:	ee                   	out    dx,al
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed3e:	e8 53 fe ff ff       	call   c001eb96 <PIC::remap()>
c001ed43:	83 c4 10             	add    esp,0x10
c001ed46:	b8 00 00 00 00       	mov    eax,0x0
c001ed4b:	c9                   	leave  
c001ed4c:	c3                   	ret    
c001ed4d:	90                   	nop

c001ed4e <APICTimer::close(int, int, void*)>:
c001ed4e:	b8 00 00 00 00       	mov    eax,0x0
c001ed53:	c3                   	ret    

c001ed54 <apicTimerHandler(regs*, void*)>:
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed5d:	89 c2                	mov    edx,eax
c001ed5f:	c1 fa 1f             	sar    edx,0x1f
c001ed62:	52                   	push   edx
c001ed63:	50                   	push   eax
c001ed64:	6a 00                	push   0x0
c001ed66:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed6b:	e8 8c 07 00 00       	call   c001f4fc <__udivdi3>
c001ed70:	83 c4 10             	add    esp,0x10
c001ed73:	83 ec 08             	sub    esp,0x8
c001ed76:	52                   	push   edx
c001ed77:	50                   	push   eax
c001ed78:	e8 08 40 ff ff       	call   c0012d85 <timerHandler(unsigned long long)>
c001ed7d:	83 c4 10             	add    esp,0x10
c001ed80:	90                   	nop
c001ed81:	83 c4 0c             	add    esp,0xc
c001ed84:	c3                   	ret    
c001ed85:	90                   	nop

c001ed86 <APICTimer::write(int)>:
c001ed86:	53                   	push   ebx
c001ed87:	83 ec 28             	sub    esp,0x28
c001ed8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed92:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed98:	e8 2b 5b ff ff       	call   c00148c8 <thisCPU()>
c001ed9d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eda3:	83 ec 0c             	sub    esp,0xc
c001eda6:	50                   	push   eax
c001eda7:	e8 a2 f5 ff ff       	call   c001e34e <APIC::getBase()>
c001edac:	83 c4 10             	add    esp,0x10
c001edaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edb3:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c001edb8:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c001edbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edca:	05 e0 03 00 00       	add    eax,0x3e0
c001edcf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001edd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edd9:	05 80 03 00 00       	add    eax,0x380
c001edde:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ede4:	fb                   	sti    
c001ede5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eded:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001edf2:	83 d2 00             	adc    edx,0x0
c001edf5:	89 c1                	mov    ecx,eax
c001edf7:	89 d3                	mov    ebx,edx
c001edf9:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c001edfe:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c001ee04:	39 c8                	cmp    eax,ecx
c001ee06:	89 d0                	mov    eax,edx
c001ee08:	19 d8                	sbb    eax,ebx
c001ee0a:	73 02                	jae    c001ee0e <APICTimer::write(int)+0x88>
c001ee0c:	eb d7                	jmp    c001ede5 <APICTimer::write(int)+0x5f>
c001ee0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee12:	05 20 03 00 00       	add    eax,0x320
c001ee17:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee21:	05 90 03 00 00       	add    eax,0x390
c001ee26:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee28:	f7 d0                	not    eax
c001ee2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee36:	ba 00 00 00 00       	mov    edx,0x0
c001ee3b:	f7 f3                	div    ebx
c001ee3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee4b:	0d 00 00 02 00       	or     eax,0x20000
c001ee50:	89 c2                	mov    edx,eax
c001ee52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee56:	05 20 03 00 00       	add    eax,0x320
c001ee5b:	89 10                	mov    DWORD PTR [eax],edx
c001ee5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee61:	05 e0 03 00 00       	add    eax,0x3e0
c001ee66:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee70:	05 80 03 00 00       	add    eax,0x380
c001ee75:	89 c2                	mov    edx,eax
c001ee77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee7b:	89 02                	mov    DWORD PTR [edx],eax
c001ee7d:	90                   	nop
c001ee7e:	83 c4 28             	add    esp,0x28
c001ee81:	5b                   	pop    ebx
c001ee82:	c3                   	ret    
c001ee83:	90                   	nop

c001ee84 <APICTimer::open(int, int, void*)>:
c001ee84:	57                   	push   edi
c001ee85:	56                   	push   esi
c001ee86:	53                   	push   ebx
c001ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee8d:	83 c0 24             	add    eax,0x24
c001ee90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee92:	83 ec 08             	sub    esp,0x8
c001ee95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee9d:	ff d0                	call   eax
c001ee9f:	83 c4 10             	add    esp,0x10
c001eea2:	e8 21 5a ff ff       	call   c00148c8 <thisCPU()>
c001eea7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eead:	83 ec 0c             	sub    esp,0xc
c001eeb0:	50                   	push   eax
c001eeb1:	e8 98 f4 ff ff       	call   c001e34e <APIC::getBase()>
c001eeb6:	83 c4 10             	add    esp,0x10
c001eeb9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eec9:	89 c7                	mov    edi,eax
c001eecb:	81 e7 ff 00 00 00    	and    edi,0xff
c001eed1:	89 d0                	mov    eax,edx
c001eed3:	ba 00 00 00 00       	mov    edx,0x0
c001eed8:	89 c1                	mov    ecx,eax
c001eeda:	80 e5 ff             	and    ch,0xff
c001eedd:	89 cb                	mov    ebx,ecx
c001eedf:	89 d0                	mov    eax,edx
c001eee1:	25 ff 00 00 00       	and    eax,0xff
c001eee6:	89 c6                	mov    esi,eax
c001eee8:	89 d8                	mov    eax,ebx
c001eeea:	89 f2                	mov    edx,esi
c001eeec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eef0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eef3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eef7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eefb:	83 e0 00             	and    eax,0x0
c001eefe:	09 d0                	or     eax,edx
c001ef00:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef08:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ef11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef15:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef1b:	31 d2                	xor    edx,edx
c001ef1d:	88 c2                	mov    dl,al
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	83 c2 08             	add    edx,0x8
c001ef26:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef2a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef30:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef36:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef42:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef50:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef5a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef60:	83 ec 0c             	sub    esp,0xc
c001ef63:	51                   	push   ecx
c001ef64:	6a 01                	push   0x1
c001ef66:	68 54 ed 01 c0       	push   0xc001ed54
c001ef6b:	52                   	push   edx
c001ef6c:	50                   	push   eax
c001ef6d:	e8 fc 15 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef72:	83 c4 20             	add    esp,0x20
c001ef75:	89 c2                	mov    edx,eax
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef81:	b8 00 00 00 00       	mov    eax,0x0
c001ef86:	5b                   	pop    ebx
c001ef87:	5e                   	pop    esi
c001ef88:	5f                   	pop    edi
c001ef89:	c3                   	ret    

c001ef8a <APICTimer::APICTimer()>:
c001ef8a:	83 ec 0c             	sub    esp,0xc
c001ef8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef91:	83 ec 08             	sub    esp,0x8
c001ef94:	68 10 3b 02 c0       	push   0xc0023b10
c001ef99:	50                   	push   eax
c001ef9a:	e8 57 3d ff ff       	call   c0012cf6 <Timer::Timer(char const*)>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	ba 24 3b 02 c0       	mov    edx,0xc0023b24
c001efa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efab:	89 10                	mov    DWORD PTR [eax],edx
c001efad:	90                   	nop
c001efae:	83 c4 0c             	add    esp,0xc
c001efb1:	c3                   	ret    

c001efb2 <PIT::write(int)>:
c001efb2:	83 ec 10             	sub    esp,0x10
c001efb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efbd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efc7:	a3 84 65 02 c0       	mov    ds:0xc0026584,eax
c001efcc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efd1:	89 c2                	mov    edx,eax
c001efd3:	c1 fa 1f             	sar    edx,0x1f
c001efd6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efde:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efe5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001efea:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efee:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eff3:	ee                   	out    dx,al
c001eff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eff8:	25 ff 00 00 00       	and    eax,0xff
c001effd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f004:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f008:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f00c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f011:	ee                   	out    dx,al
c001f012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f016:	c1 f8 08             	sar    eax,0x8
c001f019:	25 ff 00 00 00       	and    eax,0xff
c001f01e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f025:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f029:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f02d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f032:	ee                   	out    dx,al
c001f033:	90                   	nop
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	c3                   	ret    

c001f038 <pitHandler(regs*, void*)>:
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c001f040:	89 c2                	mov    edx,eax
c001f042:	c1 fa 1f             	sar    edx,0x1f
c001f045:	52                   	push   edx
c001f046:	50                   	push   eax
c001f047:	6a 00                	push   0x0
c001f049:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f04e:	e8 a9 04 00 00       	call   c001f4fc <__udivdi3>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	83 ec 08             	sub    esp,0x8
c001f059:	52                   	push   edx
c001f05a:	50                   	push   eax
c001f05b:	e8 25 3d ff ff       	call   c0012d85 <timerHandler(unsigned long long)>
c001f060:	83 c4 10             	add    esp,0x10
c001f063:	90                   	nop
c001f064:	83 c4 0c             	add    esp,0xc
c001f067:	c3                   	ret    

c001f068 <PIT::open(int, int, void*)>:
c001f068:	83 ec 0c             	sub    esp,0xc
c001f06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f071:	83 c0 24             	add    eax,0x24
c001f074:	8b 00                	mov    eax,DWORD PTR [eax]
c001f076:	83 ec 08             	sub    esp,0x8
c001f079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f081:	ff d0                	call   eax
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	6a 00                	push   0x0
c001f08f:	6a 01                	push   0x1
c001f091:	68 38 f0 01 c0       	push   0xc001f038
c001f096:	6a 00                	push   0x0
c001f098:	50                   	push   eax
c001f099:	e8 d0 14 ff ff       	call   c001056e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f09e:	83 c4 20             	add    esp,0x20
c001f0a1:	89 c2                	mov    edx,eax
c001f0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0ad:	b8 00 00 00 00       	mov    eax,0x0
c001f0b2:	83 c4 0c             	add    esp,0xc
c001f0b5:	c3                   	ret    

c001f0b6 <PIT::close(int, int, void*)>:
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bd:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cb:	6a 01                	push   0x1
c001f0cd:	68 38 f0 01 c0       	push   0xc001f038
c001f0d2:	6a 00                	push   0x0
c001f0d4:	50                   	push   eax
c001f0d5:	e8 f2 14 ff ff       	call   c00105cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	b8 00 00 00 00       	mov    eax,0x0
c001f0e2:	83 c4 0c             	add    esp,0xc
c001f0e5:	c3                   	ret    

c001f0e6 <PIT::PIT()>:
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ed:	83 ec 08             	sub    esp,0x8
c001f0f0:	68 4c 3b 02 c0       	push   0xc0023b4c
c001f0f5:	50                   	push   eax
c001f0f6:	e8 fb 3b ff ff       	call   c0012cf6 <Timer::Timer(char const*)>
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	ba 74 3b 02 c0       	mov    edx,0xc0023b74
c001f103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f107:	89 10                	mov    DWORD PTR [eax],edx
c001f109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f113:	31 d2                	xor    edx,edx
c001f115:	88 c2                	mov    dl,al
c001f117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11b:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f126:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f12c:	31 d2                	xor    edx,edx
c001f12e:	88 c2                	mov    dl,al
c001f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f134:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f143:	8d 50 01             	lea    edx,[eax+0x1]
c001f146:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f14a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f150:	31 d2                	xor    edx,edx
c001f152:	88 c2                	mov    dl,al
c001f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f158:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f15c:	83 e1 3f             	and    ecx,0x3f
c001f15f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f163:	90                   	nop
c001f164:	83 c4 0c             	add    esp,0xc
c001f167:	c3                   	ret    
c001f168:	66 90                	xchg   ax,ax
c001f16a:	66 90                	xchg   ax,ax
c001f16c:	66 90                	xchg   ax,ax
c001f16e:	66 90                	xchg   ax,ax

c001f170 <avxDetect>:
c001f170:	b8 00 00 00 00       	mov    eax,0x0
c001f175:	c3                   	ret    

c001f176 <avxSave>:
c001f176:	c3                   	ret    

c001f177 <avxLoad>:
c001f177:	c3                   	ret    

c001f178 <avxInit>:
c001f178:	c3                   	ret    

c001f179 <avxClose>:
c001f179:	c3                   	ret    
c001f17a:	66 90                	xchg   ax,ax
c001f17c:	66 90                	xchg   ax,ax
c001f17e:	66 90                	xchg   ax,ax

c001f180 <sseDetect>:
c001f180:	b8 01 00 00 00       	mov    eax,0x1
c001f185:	0f a2                	cpuid  
c001f187:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f18d:	74 06                	je     c001f195 <sseDetect.noSSE>
c001f18f:	b8 01 00 00 00       	mov    eax,0x1
c001f194:	c3                   	ret    

c001f195 <sseDetect.noSSE>:
c001f195:	b8 00 00 00 00       	mov    eax,0x0
c001f19a:	c3                   	ret    

c001f19b <sseSave>:
c001f19b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1a0:	c3                   	ret    

c001f1a1 <sseLoad>:
c001f1a1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1a6:	c3                   	ret    

c001f1a7 <sseInit>:
c001f1a7:	e8 40 00 00 00       	call   c001f1ec <x87Init>
c001f1ac:	0f 20 e0             	mov    eax,cr4
c001f1af:	66 0d 00 06          	or     ax,0x600
c001f1b3:	0f 22 e0             	mov    cr4,eax
c001f1b6:	c3                   	ret    

c001f1b7 <sseClose>:
c001f1b7:	c3                   	ret    
c001f1b8:	66 90                	xchg   ax,ax
c001f1ba:	66 90                	xchg   ax,ax
c001f1bc:	66 90                	xchg   ax,ax
c001f1be:	66 90                	xchg   ax,ax

c001f1c0 <value_37F>:
c001f1c0:	7f 03                	jg     c001f1c5 <value_37A+0x1>

c001f1c2 <value_37E>:
c001f1c2:	7e 03                	jle    c001f1c7 <x87Detect+0x1>

c001f1c4 <value_37A>:
c001f1c4:	7a 03                	jp     c001f1c9 <x87Detect+0x3>

c001f1c6 <x87Detect>:
c001f1c6:	b8 01 00 00 00       	mov    eax,0x1
c001f1cb:	0f a2                	cpuid  
c001f1cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1d3:	74 06                	je     c001f1db <x87Detect.nox87>
c001f1d5:	b8 01 00 00 00       	mov    eax,0x1
c001f1da:	c3                   	ret    

c001f1db <x87Detect.nox87>:
c001f1db:	b8 00 00 00 00       	mov    eax,0x0
c001f1e0:	c3                   	ret    

c001f1e1 <x87Save>:
c001f1e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1e6:	c3                   	ret    

c001f1e7 <x87Load>:
c001f1e7:	dd 64 24 08          	frstor [esp+0x8]
c001f1eb:	c3                   	ret    

c001f1ec <x87Init>:
c001f1ec:	9b db e3             	finit  
c001f1ef:	0f 20 c0             	mov    eax,cr0
c001f1f2:	66 25 fb ff          	and    ax,0xfffb
c001f1f6:	66 0d 22 00          	or     ax,0x22
c001f1fa:	0f 22 c0             	mov    cr0,eax
c001f1fd:	0f 06                	clts   
c001f1ff:	d9 2d c4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1c4
c001f205:	c3                   	ret    

c001f206 <x87Close>:
c001f206:	c3                   	ret    
c001f207:	90                   	nop

c001f208 <__do_global_ctors_aux>:
c001f208:	a1 e8 02 02 c0       	mov    eax,ds:0xc00202e8
c001f20d:	83 f8 ff             	cmp    eax,0xffffffff
c001f210:	74 1a                	je     c001f22c <__do_global_ctors_aux+0x24>
c001f212:	55                   	push   ebp
c001f213:	89 e5                	mov    ebp,esp
c001f215:	53                   	push   ebx
c001f216:	52                   	push   edx
c001f217:	bb e8 02 02 c0       	mov    ebx,0xc00202e8
c001f21c:	ff d0                	call   eax
c001f21e:	83 eb 04             	sub    ebx,0x4
c001f221:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f223:	83 f8 ff             	cmp    eax,0xffffffff
c001f226:	75 f4                	jne    c001f21c <__do_global_ctors_aux+0x14>
c001f228:	58                   	pop    eax
c001f229:	5b                   	pop    ebx
c001f22a:	5d                   	pop    ebp
c001f22b:	c3                   	ret    
c001f22c:	c3                   	ret    
c001f22d:	66 90                	xchg   ax,ax
c001f22f:	90                   	nop

c001f230 <__divdi3>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 1c             	sub    esp,0x1c
c001f237:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f23b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f23f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f242:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f246:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f24a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f24e:	85 db                	test   ebx,ebx
c001f250:	0f 88 8e 00 00 00    	js     c001f2e4 <__divdi3+0xb4>
c001f256:	89 dd                	mov    ebp,ebx
c001f258:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f260:	89 d3                	mov    ebx,edx
c001f262:	85 d2                	test   edx,edx
c001f264:	79 0d                	jns    c001f273 <__divdi3+0x43>
c001f266:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f26a:	f7 d8                	neg    eax
c001f26c:	83 d2 00             	adc    edx,0x0
c001f26f:	f7 da                	neg    edx
c001f271:	89 d3                	mov    ebx,edx
c001f273:	89 c7                	mov    edi,eax
c001f275:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f278:	85 db                	test   ebx,ebx
c001f27a:	75 48                	jne    c001f2c4 <__divdi3+0x94>
c001f27c:	39 ef                	cmp    edi,ebp
c001f27e:	76 24                	jbe    c001f2a4 <__divdi3+0x74>
c001f280:	89 ea                	mov    edx,ebp
c001f282:	f7 f7                	div    edi
c001f284:	89 c1                	mov    ecx,eax
c001f286:	31 f6                	xor    esi,esi
c001f288:	89 c8                	mov    eax,ecx
c001f28a:	89 f2                	mov    edx,esi
c001f28c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f290:	85 c9                	test   ecx,ecx
c001f292:	74 07                	je     c001f29b <__divdi3+0x6b>
c001f294:	f7 d8                	neg    eax
c001f296:	83 d2 00             	adc    edx,0x0
c001f299:	f7 da                	neg    edx
c001f29b:	83 c4 1c             	add    esp,0x1c
c001f29e:	5b                   	pop    ebx
c001f29f:	5e                   	pop    esi
c001f2a0:	5f                   	pop    edi
c001f2a1:	5d                   	pop    ebp
c001f2a2:	c3                   	ret    
c001f2a3:	90                   	nop
c001f2a4:	85 ff                	test   edi,edi
c001f2a6:	75 0b                	jne    c001f2b3 <__divdi3+0x83>
c001f2a8:	b8 01 00 00 00       	mov    eax,0x1
c001f2ad:	31 d2                	xor    edx,edx
c001f2af:	f7 f3                	div    ebx
c001f2b1:	89 c7                	mov    edi,eax
c001f2b3:	31 d2                	xor    edx,edx
c001f2b5:	89 e8                	mov    eax,ebp
c001f2b7:	f7 f7                	div    edi
c001f2b9:	89 c6                	mov    esi,eax
c001f2bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2be:	f7 f7                	div    edi
c001f2c0:	89 c1                	mov    ecx,eax
c001f2c2:	eb c4                	jmp    c001f288 <__divdi3+0x58>
c001f2c4:	39 eb                	cmp    ebx,ebp
c001f2c6:	77 3c                	ja     c001f304 <__divdi3+0xd4>
c001f2c8:	0f bd f3             	bsr    esi,ebx
c001f2cb:	83 f6 1f             	xor    esi,0x1f
c001f2ce:	75 40                	jne    c001f310 <__divdi3+0xe0>
c001f2d0:	39 eb                	cmp    ebx,ebp
c001f2d2:	72 09                	jb     c001f2dd <__divdi3+0xad>
c001f2d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2d7:	0f 87 97 00 00 00    	ja     c001f374 <__divdi3+0x144>
c001f2dd:	b9 01 00 00 00       	mov    ecx,0x1
c001f2e2:	eb a4                	jmp    c001f288 <__divdi3+0x58>
c001f2e4:	f7 d9                	neg    ecx
c001f2e6:	83 d3 00             	adc    ebx,0x0
c001f2e9:	f7 db                	neg    ebx
c001f2eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f2f2:	89 dd                	mov    ebp,ebx
c001f2f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f2fc:	e9 5f ff ff ff       	jmp    c001f260 <__divdi3+0x30>
c001f301:	8d 76 00             	lea    esi,[esi+0x0]
c001f304:	31 f6                	xor    esi,esi
c001f306:	31 c9                	xor    ecx,ecx
c001f308:	e9 7b ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f30d:	8d 76 00             	lea    esi,[esi+0x0]
c001f310:	b8 20 00 00 00       	mov    eax,0x20
c001f315:	29 f0                	sub    eax,esi
c001f317:	89 f1                	mov    ecx,esi
c001f319:	d3 e3                	shl    ebx,cl
c001f31b:	89 fa                	mov    edx,edi
c001f31d:	88 c1                	mov    cl,al
c001f31f:	d3 ea                	shr    edx,cl
c001f321:	09 da                	or     edx,ebx
c001f323:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e7                	shl    edi,cl
c001f32b:	89 eb                	mov    ebx,ebp
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 eb                	shr    ebx,cl
c001f331:	89 f1                	mov    ecx,esi
c001f333:	d3 e5                	shl    ebp,cl
c001f335:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f338:	88 c1                	mov    cl,al
c001f33a:	d3 ea                	shr    edx,cl
c001f33c:	09 d5                	or     ebp,edx
c001f33e:	89 e8                	mov    eax,ebp
c001f340:	89 da                	mov    edx,ebx
c001f342:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f346:	89 d3                	mov    ebx,edx
c001f348:	89 c5                	mov    ebp,eax
c001f34a:	f7 e7                	mul    edi
c001f34c:	39 d3                	cmp    ebx,edx
c001f34e:	72 18                	jb     c001f368 <__divdi3+0x138>
c001f350:	74 0a                	je     c001f35c <__divdi3+0x12c>
c001f352:	89 e9                	mov    ecx,ebp
c001f354:	31 f6                	xor    esi,esi
c001f356:	e9 2d ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f35b:	90                   	nop
c001f35c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f35f:	89 f1                	mov    ecx,esi
c001f361:	d3 e7                	shl    edi,cl
c001f363:	39 c7                	cmp    edi,eax
c001f365:	73 eb                	jae    c001f352 <__divdi3+0x122>
c001f367:	90                   	nop
c001f368:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f36b:	31 f6                	xor    esi,esi
c001f36d:	e9 16 ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f372:	66 90                	xchg   ax,ax
c001f374:	31 c9                	xor    ecx,ecx
c001f376:	e9 0d ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f37b:	90                   	nop

c001f37c <__moddi3>:
c001f37c:	55                   	push   ebp
c001f37d:	57                   	push   edi
c001f37e:	56                   	push   esi
c001f37f:	53                   	push   ebx
c001f380:	83 ec 2c             	sub    esp,0x2c
c001f383:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f387:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f38b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f38f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f393:	85 db                	test   ebx,ebx
c001f395:	0f 88 85 00 00 00    	js     c001f420 <__moddi3+0xa4>
c001f39b:	89 de                	mov    esi,ebx
c001f39d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3a5:	89 d7                	mov    edi,edx
c001f3a7:	85 d2                	test   edx,edx
c001f3a9:	79 09                	jns    c001f3b4 <__moddi3+0x38>
c001f3ab:	f7 d8                	neg    eax
c001f3ad:	83 d2 00             	adc    edx,0x0
c001f3b0:	f7 da                	neg    edx
c001f3b2:	89 d7                	mov    edi,edx
c001f3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3b8:	89 cd                	mov    ebp,ecx
c001f3ba:	85 ff                	test   edi,edi
c001f3bc:	75 52                	jne    c001f410 <__moddi3+0x94>
c001f3be:	89 c3                	mov    ebx,eax
c001f3c0:	39 f0                	cmp    eax,esi
c001f3c2:	76 24                	jbe    c001f3e8 <__moddi3+0x6c>
c001f3c4:	89 c8                	mov    eax,ecx
c001f3c6:	89 f2                	mov    edx,esi
c001f3c8:	f7 f3                	div    ebx
c001f3ca:	89 d6                	mov    esi,edx
c001f3cc:	89 f0                	mov    eax,esi
c001f3ce:	31 d2                	xor    edx,edx
c001f3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3d4:	85 c9                	test   ecx,ecx
c001f3d6:	74 07                	je     c001f3df <__moddi3+0x63>
c001f3d8:	f7 d8                	neg    eax
c001f3da:	83 d2 00             	adc    edx,0x0
c001f3dd:	f7 da                	neg    edx
c001f3df:	83 c4 2c             	add    esp,0x2c
c001f3e2:	5b                   	pop    ebx
c001f3e3:	5e                   	pop    esi
c001f3e4:	5f                   	pop    edi
c001f3e5:	5d                   	pop    ebp
c001f3e6:	c3                   	ret    
c001f3e7:	90                   	nop
c001f3e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3ec:	85 db                	test   ebx,ebx
c001f3ee:	75 0d                	jne    c001f3fd <__moddi3+0x81>
c001f3f0:	b8 01 00 00 00       	mov    eax,0x1
c001f3f5:	31 d2                	xor    edx,edx
c001f3f7:	f7 f7                	div    edi
c001f3f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3fd:	89 f0                	mov    eax,esi
c001f3ff:	31 d2                	xor    edx,edx
c001f401:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f405:	f7 f7                	div    edi
c001f407:	89 e8                	mov    eax,ebp
c001f409:	f7 f7                	div    edi
c001f40b:	89 d6                	mov    esi,edx
c001f40d:	eb bd                	jmp    c001f3cc <__moddi3+0x50>
c001f40f:	90                   	nop
c001f410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f414:	39 f7                	cmp    edi,esi
c001f416:	76 20                	jbe    c001f438 <__moddi3+0xbc>
c001f418:	89 c8                	mov    eax,ecx
c001f41a:	89 f2                	mov    edx,esi
c001f41c:	eb b2                	jmp    c001f3d0 <__moddi3+0x54>
c001f41e:	66 90                	xchg   ax,ax
c001f420:	f7 d9                	neg    ecx
c001f422:	83 d3 00             	adc    ebx,0x0
c001f425:	f7 db                	neg    ebx
c001f427:	89 de                	mov    esi,ebx
c001f429:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f431:	e9 6f ff ff ff       	jmp    c001f3a5 <__moddi3+0x29>
c001f436:	66 90                	xchg   ax,ax
c001f438:	0f bd c7             	bsr    eax,edi
c001f43b:	83 f0 1f             	xor    eax,0x1f
c001f43e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f442:	75 24                	jne    c001f468 <__moddi3+0xec>
c001f444:	39 f7                	cmp    edi,esi
c001f446:	72 06                	jb     c001f44e <__moddi3+0xd2>
c001f448:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f44c:	77 0c                	ja     c001f45a <__moddi3+0xde>
c001f44e:	89 e9                	mov    ecx,ebp
c001f450:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f454:	19 fe                	sbb    esi,edi
c001f456:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f45a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f45e:	89 f2                	mov    edx,esi
c001f460:	e9 6b ff ff ff       	jmp    c001f3d0 <__moddi3+0x54>
c001f465:	8d 76 00             	lea    esi,[esi+0x0]
c001f468:	b8 20 00 00 00       	mov    eax,0x20
c001f46d:	89 c2                	mov    edx,eax
c001f46f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f473:	29 da                	sub    edx,ebx
c001f475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f479:	88 d9                	mov    cl,bl
c001f47b:	d3 e7                	shl    edi,cl
c001f47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f481:	88 d1                	mov    cl,dl
c001f483:	d3 e8                	shr    eax,cl
c001f485:	09 c7                	or     edi,eax
c001f487:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f48b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f48f:	89 d8                	mov    eax,ebx
c001f491:	88 d9                	mov    cl,bl
c001f493:	d3 e7                	shl    edi,cl
c001f495:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f499:	89 f3                	mov    ebx,esi
c001f49b:	88 d1                	mov    cl,dl
c001f49d:	d3 eb                	shr    ebx,cl
c001f49f:	89 c7                	mov    edi,eax
c001f4a1:	88 c1                	mov    cl,al
c001f4a3:	d3 e6                	shl    esi,cl
c001f4a5:	89 e8                	mov    eax,ebp
c001f4a7:	88 d1                	mov    cl,dl
c001f4a9:	d3 e8                	shr    eax,cl
c001f4ab:	09 f0                	or     eax,esi
c001f4ad:	89 f9                	mov    ecx,edi
c001f4af:	d3 e5                	shl    ebp,cl
c001f4b1:	89 da                	mov    edx,ebx
c001f4b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4b7:	89 d3                	mov    ebx,edx
c001f4b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4bd:	89 c6                	mov    esi,eax
c001f4bf:	89 d1                	mov    ecx,edx
c001f4c1:	39 d3                	cmp    ebx,edx
c001f4c3:	72 27                	jb     c001f4ec <__moddi3+0x170>
c001f4c5:	74 21                	je     c001f4e8 <__moddi3+0x16c>
c001f4c7:	29 f5                	sub    ebp,esi
c001f4c9:	19 cb                	sbb    ebx,ecx
c001f4cb:	89 de                	mov    esi,ebx
c001f4cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4d1:	d3 e6                	shl    esi,cl
c001f4d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4d7:	89 f9                	mov    ecx,edi
c001f4d9:	d3 ed                	shr    ebp,cl
c001f4db:	09 ee                	or     esi,ebp
c001f4dd:	89 f0                	mov    eax,esi
c001f4df:	d3 eb                	shr    ebx,cl
c001f4e1:	89 da                	mov    edx,ebx
c001f4e3:	e9 e8 fe ff ff       	jmp    c001f3d0 <__moddi3+0x54>
c001f4e8:	39 c5                	cmp    ebp,eax
c001f4ea:	73 db                	jae    c001f4c7 <__moddi3+0x14b>
c001f4ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f4f4:	89 d1                	mov    ecx,edx
c001f4f6:	89 c6                	mov    esi,eax
c001f4f8:	eb cd                	jmp    c001f4c7 <__moddi3+0x14b>
c001f4fa:	66 90                	xchg   ax,ax

c001f4fc <__udivdi3>:
c001f4fc:	55                   	push   ebp
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	53                   	push   ebx
c001f500:	83 ec 1c             	sub    esp,0x1c
c001f503:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f507:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f50b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f50f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f513:	85 d2                	test   edx,edx
c001f515:	75 41                	jne    c001f558 <__udivdi3+0x5c>
c001f517:	39 f7                	cmp    edi,esi
c001f519:	76 15                	jbe    c001f530 <__udivdi3+0x34>
c001f51b:	89 e8                	mov    eax,ebp
c001f51d:	89 f2                	mov    edx,esi
c001f51f:	f7 f7                	div    edi
c001f521:	31 db                	xor    ebx,ebx
c001f523:	89 da                	mov    edx,ebx
c001f525:	83 c4 1c             	add    esp,0x1c
c001f528:	5b                   	pop    ebx
c001f529:	5e                   	pop    esi
c001f52a:	5f                   	pop    edi
c001f52b:	5d                   	pop    ebp
c001f52c:	c3                   	ret    
c001f52d:	8d 76 00             	lea    esi,[esi+0x0]
c001f530:	89 f9                	mov    ecx,edi
c001f532:	85 ff                	test   edi,edi
c001f534:	75 0b                	jne    c001f541 <__udivdi3+0x45>
c001f536:	b8 01 00 00 00       	mov    eax,0x1
c001f53b:	31 d2                	xor    edx,edx
c001f53d:	f7 f7                	div    edi
c001f53f:	89 c1                	mov    ecx,eax
c001f541:	31 d2                	xor    edx,edx
c001f543:	89 f0                	mov    eax,esi
c001f545:	f7 f1                	div    ecx
c001f547:	89 c3                	mov    ebx,eax
c001f549:	89 e8                	mov    eax,ebp
c001f54b:	f7 f1                	div    ecx
c001f54d:	89 da                	mov    edx,ebx
c001f54f:	83 c4 1c             	add    esp,0x1c
c001f552:	5b                   	pop    ebx
c001f553:	5e                   	pop    esi
c001f554:	5f                   	pop    edi
c001f555:	5d                   	pop    ebp
c001f556:	c3                   	ret    
c001f557:	90                   	nop
c001f558:	39 f2                	cmp    edx,esi
c001f55a:	77 1c                	ja     c001f578 <__udivdi3+0x7c>
c001f55c:	0f bd da             	bsr    ebx,edx
c001f55f:	83 f3 1f             	xor    ebx,0x1f
c001f562:	75 24                	jne    c001f588 <__udivdi3+0x8c>
c001f564:	39 f2                	cmp    edx,esi
c001f566:	72 08                	jb     c001f570 <__udivdi3+0x74>
c001f568:	39 ef                	cmp    edi,ebp
c001f56a:	0f 87 84 00 00 00    	ja     c001f5f4 <__udivdi3+0xf8>
c001f570:	b8 01 00 00 00       	mov    eax,0x1
c001f575:	eb ac                	jmp    c001f523 <__udivdi3+0x27>
c001f577:	90                   	nop
c001f578:	31 db                	xor    ebx,ebx
c001f57a:	31 c0                	xor    eax,eax
c001f57c:	89 da                	mov    edx,ebx
c001f57e:	83 c4 1c             	add    esp,0x1c
c001f581:	5b                   	pop    ebx
c001f582:	5e                   	pop    esi
c001f583:	5f                   	pop    edi
c001f584:	5d                   	pop    ebp
c001f585:	c3                   	ret    
c001f586:	66 90                	xchg   ax,ax
c001f588:	b8 20 00 00 00       	mov    eax,0x20
c001f58d:	29 d8                	sub    eax,ebx
c001f58f:	88 d9                	mov    cl,bl
c001f591:	d3 e2                	shl    edx,cl
c001f593:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f597:	89 fa                	mov    edx,edi
c001f599:	88 c1                	mov    cl,al
c001f59b:	d3 ea                	shr    edx,cl
c001f59d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5a1:	09 d1                	or     ecx,edx
c001f5a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5a7:	88 d9                	mov    cl,bl
c001f5a9:	d3 e7                	shl    edi,cl
c001f5ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5af:	89 f7                	mov    edi,esi
c001f5b1:	88 c1                	mov    cl,al
c001f5b3:	d3 ef                	shr    edi,cl
c001f5b5:	88 d9                	mov    cl,bl
c001f5b7:	d3 e6                	shl    esi,cl
c001f5b9:	89 ea                	mov    edx,ebp
c001f5bb:	88 c1                	mov    cl,al
c001f5bd:	d3 ea                	shr    edx,cl
c001f5bf:	09 d6                	or     esi,edx
c001f5c1:	89 f0                	mov    eax,esi
c001f5c3:	89 fa                	mov    edx,edi
c001f5c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5c9:	89 d7                	mov    edi,edx
c001f5cb:	89 c6                	mov    esi,eax
c001f5cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5d1:	39 d7                	cmp    edi,edx
c001f5d3:	72 13                	jb     c001f5e8 <__udivdi3+0xec>
c001f5d5:	74 09                	je     c001f5e0 <__udivdi3+0xe4>
c001f5d7:	89 f0                	mov    eax,esi
c001f5d9:	31 db                	xor    ebx,ebx
c001f5db:	e9 43 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5e0:	88 d9                	mov    cl,bl
c001f5e2:	d3 e5                	shl    ebp,cl
c001f5e4:	39 c5                	cmp    ebp,eax
c001f5e6:	73 ef                	jae    c001f5d7 <__udivdi3+0xdb>
c001f5e8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5eb:	31 db                	xor    ebx,ebx
c001f5ed:	e9 31 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5f2:	66 90                	xchg   ax,ax
c001f5f4:	31 c0                	xor    eax,eax
c001f5f6:	e9 28 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5fb:	90                   	nop

c001f5fc <__umoddi3>:
c001f5fc:	55                   	push   ebp
c001f5fd:	57                   	push   edi
c001f5fe:	56                   	push   esi
c001f5ff:	53                   	push   ebx
c001f600:	83 ec 1c             	sub    esp,0x1c
c001f603:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f607:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f60b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f60f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f613:	89 da                	mov    edx,ebx
c001f615:	85 c0                	test   eax,eax
c001f617:	75 37                	jne    c001f650 <__umoddi3+0x54>
c001f619:	39 df                	cmp    edi,ebx
c001f61b:	76 13                	jbe    c001f630 <__umoddi3+0x34>
c001f61d:	89 f0                	mov    eax,esi
c001f61f:	f7 f7                	div    edi
c001f621:	89 d0                	mov    eax,edx
c001f623:	31 d2                	xor    edx,edx
c001f625:	83 c4 1c             	add    esp,0x1c
c001f628:	5b                   	pop    ebx
c001f629:	5e                   	pop    esi
c001f62a:	5f                   	pop    edi
c001f62b:	5d                   	pop    ebp
c001f62c:	c3                   	ret    
c001f62d:	8d 76 00             	lea    esi,[esi+0x0]
c001f630:	89 fd                	mov    ebp,edi
c001f632:	85 ff                	test   edi,edi
c001f634:	75 0b                	jne    c001f641 <__umoddi3+0x45>
c001f636:	b8 01 00 00 00       	mov    eax,0x1
c001f63b:	31 d2                	xor    edx,edx
c001f63d:	f7 f7                	div    edi
c001f63f:	89 c5                	mov    ebp,eax
c001f641:	89 d8                	mov    eax,ebx
c001f643:	31 d2                	xor    edx,edx
c001f645:	f7 f5                	div    ebp
c001f647:	89 f0                	mov    eax,esi
c001f649:	f7 f5                	div    ebp
c001f64b:	89 d0                	mov    eax,edx
c001f64d:	eb d4                	jmp    c001f623 <__umoddi3+0x27>
c001f64f:	90                   	nop
c001f650:	89 f1                	mov    ecx,esi
c001f652:	39 d8                	cmp    eax,ebx
c001f654:	76 0a                	jbe    c001f660 <__umoddi3+0x64>
c001f656:	89 f0                	mov    eax,esi
c001f658:	83 c4 1c             	add    esp,0x1c
c001f65b:	5b                   	pop    ebx
c001f65c:	5e                   	pop    esi
c001f65d:	5f                   	pop    edi
c001f65e:	5d                   	pop    ebp
c001f65f:	c3                   	ret    
c001f660:	0f bd e8             	bsr    ebp,eax
c001f663:	83 f5 1f             	xor    ebp,0x1f
c001f666:	75 1c                	jne    c001f684 <__umoddi3+0x88>
c001f668:	39 d8                	cmp    eax,ebx
c001f66a:	72 04                	jb     c001f670 <__umoddi3+0x74>
c001f66c:	39 f7                	cmp    edi,esi
c001f66e:	77 08                	ja     c001f678 <__umoddi3+0x7c>
c001f670:	89 da                	mov    edx,ebx
c001f672:	29 fe                	sub    esi,edi
c001f674:	19 c2                	sbb    edx,eax
c001f676:	89 f1                	mov    ecx,esi
c001f678:	89 c8                	mov    eax,ecx
c001f67a:	83 c4 1c             	add    esp,0x1c
c001f67d:	5b                   	pop    ebx
c001f67e:	5e                   	pop    esi
c001f67f:	5f                   	pop    edi
c001f680:	5d                   	pop    ebp
c001f681:	c3                   	ret    
c001f682:	66 90                	xchg   ax,ax
c001f684:	ba 20 00 00 00       	mov    edx,0x20
c001f689:	29 ea                	sub    edx,ebp
c001f68b:	89 e9                	mov    ecx,ebp
c001f68d:	d3 e0                	shl    eax,cl
c001f68f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f693:	89 f8                	mov    eax,edi
c001f695:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f699:	88 d1                	mov    cl,dl
c001f69b:	d3 e8                	shr    eax,cl
c001f69d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6a1:	09 c1                	or     ecx,eax
c001f6a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6a7:	89 e9                	mov    ecx,ebp
c001f6a9:	d3 e7                	shl    edi,cl
c001f6ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6af:	89 d8                	mov    eax,ebx
c001f6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6b5:	88 d1                	mov    cl,dl
c001f6b7:	d3 e8                	shr    eax,cl
c001f6b9:	89 c7                	mov    edi,eax
c001f6bb:	89 e9                	mov    ecx,ebp
c001f6bd:	d3 e3                	shl    ebx,cl
c001f6bf:	89 f0                	mov    eax,esi
c001f6c1:	88 d1                	mov    cl,dl
c001f6c3:	d3 e8                	shr    eax,cl
c001f6c5:	09 d8                	or     eax,ebx
c001f6c7:	89 e9                	mov    ecx,ebp
c001f6c9:	d3 e6                	shl    esi,cl
c001f6cb:	89 f3                	mov    ebx,esi
c001f6cd:	89 fa                	mov    edx,edi
c001f6cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6d3:	89 d1                	mov    ecx,edx
c001f6d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6d9:	89 c6                	mov    esi,eax
c001f6db:	89 d7                	mov    edi,edx
c001f6dd:	39 d1                	cmp    ecx,edx
c001f6df:	72 27                	jb     c001f708 <__umoddi3+0x10c>
c001f6e1:	74 21                	je     c001f704 <__umoddi3+0x108>
c001f6e3:	89 ca                	mov    edx,ecx
c001f6e5:	29 f3                	sub    ebx,esi
c001f6e7:	19 fa                	sbb    edx,edi
c001f6e9:	89 d0                	mov    eax,edx
c001f6eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ef:	d3 e0                	shl    eax,cl
c001f6f1:	89 e9                	mov    ecx,ebp
c001f6f3:	d3 eb                	shr    ebx,cl
c001f6f5:	09 d8                	or     eax,ebx
c001f6f7:	d3 ea                	shr    edx,cl
c001f6f9:	83 c4 1c             	add    esp,0x1c
c001f6fc:	5b                   	pop    ebx
c001f6fd:	5e                   	pop    esi
c001f6fe:	5f                   	pop    edi
c001f6ff:	5d                   	pop    ebp
c001f700:	c3                   	ret    
c001f701:	8d 76 00             	lea    esi,[esi+0x0]
c001f704:	39 c3                	cmp    ebx,eax
c001f706:	73 db                	jae    c001f6e3 <__umoddi3+0xe7>
c001f708:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f70c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f710:	89 d7                	mov    edi,edx
c001f712:	89 c6                	mov    esi,eax
c001f714:	eb cd                	jmp    c001f6e3 <__umoddi3+0xe7>
c001f716:	66 90                	xchg   ax,ax
c001f718:	66 90                	xchg   ax,ax
c001f71a:	66 90                	xchg   ax,ax
c001f71c:	66 90                	xchg   ax,ax
c001f71e:	66 90                	xchg   ax,ax

c001f720 <fabs>:
c001f720:	83 ec 0c             	sub    esp,0xc
c001f723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f727:	89 04 24             	mov    DWORD PTR [esp],eax
c001f72a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f72e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f737:	dd 04 24             	fld    QWORD PTR [esp]
c001f73a:	83 c4 0c             	add    esp,0xc
c001f73d:	c3                   	ret    
c001f73e:	66 90                	xchg   ax,ax

c001f740 <lrint>:
c001f740:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f744:	83 ec 04             	sub    esp,0x4
c001f747:	db 1c 24             	fistp  DWORD PTR [esp]
c001f74a:	58                   	pop    eax
c001f74b:	c3                   	ret    

c001f74c <lrintf>:
c001f74c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f750:	83 ec 04             	sub    esp,0x4
c001f753:	db 1c 24             	fistp  DWORD PTR [esp]
c001f756:	58                   	pop    eax
c001f757:	c3                   	ret    

Disassembly of section .init:

c001f758 <_init>:
c001f758:	55                   	push   ebp
c001f759:	89 e5                	mov    ebp,esp
c001f75b:	e8 b8 09 fe ff       	call   c0000118 <frame_dummy>
c001f760:	e8 a3 fa ff ff       	call   c001f208 <__do_global_ctors_aux>
c001f765:	5d                   	pop    ebp
c001f766:	c3                   	ret    

Disassembly of section .fini:

c001f767 <_fini>:
c001f767:	55                   	push   ebp
c001f768:	89 e5                	mov    ebp,esp
c001f76a:	e8 39 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f76f:	5d                   	pop    ebp
c001f770:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f772 <Computer::~Computer()>:
c001f772:	83 ec 0c             	sub    esp,0xc
c001f775:	ba 84 12 02 c0       	mov    edx,0xc0021284
c001f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77e:	89 10                	mov    DWORD PTR [eax],edx
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	83 ec 0c             	sub    esp,0xc
c001f787:	50                   	push   eax
c001f788:	e8 33 0d ff ff       	call   c00104c0 <Device::~Device()>
c001f78d:	83 c4 10             	add    esp,0x10
c001f790:	90                   	nop
c001f791:	83 c4 0c             	add    esp,0xc
c001f794:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f796 <Computer::~Computer()>:
c001f796:	83 ec 0c             	sub    esp,0xc
c001f799:	83 ec 0c             	sub    esp,0xc
c001f79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a0:	e8 cd ff ff ff       	call   c001f772 <Computer::~Computer()>
c001f7a5:	83 c4 10             	add    esp,0x10
c001f7a8:	83 ec 08             	sub    esp,0x8
c001f7ab:	68 ec 01 00 00       	push   0x1ec
c001f7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b4:	e8 26 f9 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001f7b9:	83 c4 10             	add    esp,0x10
c001f7bc:	83 c4 0c             	add    esp,0xc
c001f7bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7c0 <idleCommon()>:
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	e8 75 92 ff ff       	call   c0018a3d <lockScheduler()>
c001f7c8:	e8 b9 95 ff ff       	call   c0018d86 <schedule()>
c001f7cd:	83 c4 0c             	add    esp,0xc
c001f7d0:	e9 6a 92 ff ff       	jmp    c0018a3f <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7d5 <CPU::readCR3()>:
c001f7d5:	83 ec 10             	sub    esp,0x10
c001f7d8:	0f 20 d8             	mov    eax,cr3
c001f7db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7e7 <CPU::writeCR3(unsigned long)>:
c001f7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7eb:	0f 22 d8             	mov    cr3,eax
c001f7ee:	90                   	nop
c001f7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f7f0 <LinkedList<UnixFile>::~LinkedList()>:
c001f7f0:	90                   	nop
c001f7f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f7f2 <LinkedList<UnixFile>::LinkedList()>:
c001f7f2:	83 ec 0c             	sub    esp,0xc
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f835:	83 ec 0c             	sub    esp,0xc
c001f838:	68 7d 15 02 c0       	push   0xc002157d
c001f83d:	e8 c3 f9 fe ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001f842:	83 c4 10             	add    esp,0x10
c001f845:	90                   	nop
c001f846:	83 c4 0c             	add    esp,0xc
c001f849:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f852:	75 10                	jne    c001f864 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	68 98 15 02 c0       	push   0xc0021598
c001f85c:	e8 d3 61 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f861:	83 c4 10             	add    esp,0x10
c001f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f868:	8b 00                	mov    eax,DWORD PTR [eax]
c001f86a:	85 c0                	test   eax,eax
c001f86c:	74 34                	je     c001f8a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f875:	85 c0                	test   eax,eax
c001f877:	74 29                	je     c001f8a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f880:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f884:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f88f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f899:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8a0:	eb 65                	jmp    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a8:	85 c0                	test   eax,eax
c001f8aa:	75 4b                	jne    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b3:	85 c0                	test   eax,eax
c001f8b5:	75 40                	jne    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8bf:	89 10                	mov    DWORD PTR [eax],edx
c001f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8e1:	85 c0                	test   eax,eax
c001f8e3:	74 22                	je     c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8e5:	83 ec 0c             	sub    esp,0xc
c001f8e8:	68 ba 15 02 c0       	push   0xc00215ba
c001f8ed:	e8 42 61 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f8f2:	83 c4 10             	add    esp,0x10
c001f8f5:	eb 10                	jmp    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f7:	83 ec 0c             	sub    esp,0xc
c001f8fa:	68 c4 15 02 c0       	push   0xc00215c4
c001f8ff:	e8 30 61 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f904:	83 c4 10             	add    esp,0x10
c001f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f90e:	8d 50 01             	lea    edx,[eax+0x1]
c001f911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f915:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f918:	90                   	nop
c001f919:	83 c4 0c             	add    esp,0xc
c001f91c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f91e <LinkedList<UnixFile>::getFirstElement()>:
c001f91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f922:	8b 00                	mov    eax,DWORD PTR [eax]
c001f924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f926 <LinkedList<UnixFile>::removeFirst()>:
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92f:	85 c0                	test   eax,eax
c001f931:	75 12                	jne    c001f945 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	68 d0 15 02 c0       	push   0xc00215d0
c001f93b:	e8 f4 60 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	eb 7e                	jmp    c001f9c3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f94f:	85 c0                	test   eax,eax
c001f951:	74 10                	je     c001f963 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	68 1b 16 02 c0       	push   0xc002161b
c001f95b:	e8 d4 60 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f967:	8b 00                	mov    eax,DWORD PTR [eax]
c001f969:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96c:	85 c0                	test   eax,eax
c001f96e:	75 33                	jne    c001f9a3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f989:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98c:	83 f8 01             	cmp    eax,0x1
c001f98f:	74 21                	je     c001f9b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 f4 15 02 c0       	push   0xc00215f4
c001f999:	e8 96 60 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	eb 0f                	jmp    c001f9b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	89 10                	mov    DWORD PTR [eax],edx
c001f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9c3:	83 c4 0c             	add    esp,0xc
c001f9c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9c8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9d0 <DriverlessDevice::~DriverlessDevice()>:
c001f9d0:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c001f9d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d9:	89 10                	mov    DWORD PTR [eax],edx
c001f9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9df:	50                   	push   eax
c001f9e0:	e8 db 0a ff ff       	call   c00104c0 <Device::~Device()>
c001f9e5:	83 c4 04             	add    esp,0x4
c001f9e8:	90                   	nop
c001f9e9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9ea <DriverlessDevice::~DriverlessDevice()>:
c001f9ea:	83 ec 0c             	sub    esp,0xc
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f4:	e8 d7 ff ff ff       	call   c001f9d0 <DriverlessDevice::~DriverlessDevice()>
c001f9f9:	83 c4 10             	add    esp,0x10
c001f9fc:	83 ec 08             	sub    esp,0x8
c001f9ff:	68 58 01 00 00       	push   0x158
c001fa04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa08:	e8 d2 f6 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001fa0d:	83 c4 10             	add    esp,0x10
c001fa10:	83 c4 0c             	add    esp,0xc
c001fa13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa14 <LinkedList<Device>::addElement(Device*)>:
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa1c:	75 10                	jne    c001fa2e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa1e:	83 ec 0c             	sub    esp,0xc
c001fa21:	68 98 15 02 c0       	push   0xc0021598
c001fa26:	e8 09 60 ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fa2b:	83 c4 10             	add    esp,0x10
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa34:	85 c0                	test   eax,eax
c001fa36:	74 3a                	je     c001fa72 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa3f:	85 c0                	test   eax,eax
c001fa41:	74 2f                	je     c001fa72 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa4e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa66:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa70:	eb 68                	jmp    c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa76:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa78:	85 c0                	test   eax,eax
c001fa7a:	75 4e                	jne    c001faca <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa83:	85 c0                	test   eax,eax
c001fa85:	75 43                	jne    c001faca <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8f:	89 10                	mov    DWORD PTR [eax],edx
c001fa91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa99:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001faad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fab4:	85 c0                	test   eax,eax
c001fab6:	74 22                	je     c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	68 ba 15 02 c0       	push   0xc00215ba
c001fac0:	e8 6f 5f ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fac5:	83 c4 10             	add    esp,0x10
c001fac8:	eb 10                	jmp    c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001faca:	83 ec 0c             	sub    esp,0xc
c001facd:	68 c4 15 02 c0       	push   0xc00215c4
c001fad2:	e8 5d 5f ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fad7:	83 c4 10             	add    esp,0x10
c001fada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fade:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fae1:	8d 50 01             	lea    edx,[eax+0x1]
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faeb:	90                   	nop
c001faec:	83 c4 0c             	add    esp,0xc
c001faef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001faf0 <LinkedList<Device>::LinkedList()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	68 7d 15 02 c0       	push   0xc002157d
c001fb3b:	e8 c5 f6 fe ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	90                   	nop
c001fb44:	83 c4 0c             	add    esp,0xc
c001fb47:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb48 <CPU::readCR0()>:
c001fb48:	83 ec 10             	sub    esp,0x10
c001fb4b:	0f 20 c0             	mov    eax,cr0
c001fb4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb56:	83 c4 10             	add    esp,0x10
c001fb59:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb5a <CPU::writeCR0(unsigned long)>:
c001fb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5e:	0f 22 c0             	mov    cr0,eax
c001fb61:	90                   	nop
c001fb62:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb63 <CPU::readDR0()>:
c001fb63:	83 ec 10             	sub    esp,0x10
c001fb66:	0f 21 c0             	mov    eax,db0
c001fb69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb75 <CPU::readDR1()>:
c001fb75:	83 ec 10             	sub    esp,0x10
c001fb78:	0f 21 c8             	mov    eax,db1
c001fb7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb83:	83 c4 10             	add    esp,0x10
c001fb86:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb87 <CPU::readDR2()>:
c001fb87:	83 ec 10             	sub    esp,0x10
c001fb8a:	0f 21 d0             	mov    eax,db2
c001fb8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb95:	83 c4 10             	add    esp,0x10
c001fb98:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fb99 <CPU::readDR3()>:
c001fb99:	83 ec 10             	sub    esp,0x10
c001fb9c:	0f 21 d8             	mov    eax,db3
c001fb9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbab <CPU::readDR6()>:
c001fbab:	83 ec 10             	sub    esp,0x10
c001fbae:	0f 21 f0             	mov    eax,db6
c001fbb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbbd <CPU::readDR7()>:
c001fbbd:	83 ec 10             	sub    esp,0x10
c001fbc0:	0f 21 f8             	mov    eax,db7
c001fbc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbde:	85 c0                	test   eax,eax
c001fbe0:	75 0e                	jne    c001fbf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe9:	85 c0                	test   eax,eax
c001fbeb:	75 03                	jne    c001fbf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbed:	b0 01                	mov    al,0x1
c001fbef:	c3                   	ret    
c001fbf0:	b0 00                	mov    al,0x0
c001fbf2:	90                   	nop
c001fbf3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbfd:	85 c0                	test   eax,eax
c001fbff:	75 15                	jne    c001fc16 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	68 d0 15 02 c0       	push   0xc00215d0
c001fc09:	e8 26 5e ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fc0e:	83 c4 10             	add    esp,0x10
c001fc11:	e9 88 00 00 00       	jmp    c001fc9e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc20:	85 c0                	test   eax,eax
c001fc22:	0f 95 c0             	setne  al
c001fc25:	84 c0                	test   al,al
c001fc27:	74 10                	je     c001fc39 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	68 1b 16 02 c0       	push   0xc002161b
c001fc31:	e8 fe 5d ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fc36:	83 c4 10             	add    esp,0x10
c001fc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc42:	85 c0                	test   eax,eax
c001fc44:	0f 94 c0             	sete   al
c001fc47:	84 c0                	test   al,al
c001fc49:	74 33                	je     c001fc7e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc67:	83 f8 01             	cmp    eax,0x1
c001fc6a:	74 21                	je     c001fc8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	68 f4 15 02 c0       	push   0xc00215f4
c001fc74:	e8 bb 5d ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	eb 0f                	jmp    c001fc8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8b:	89 10                	mov    DWORD PTR [eax],edx
c001fc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc94:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcaa:	75 10                	jne    c001fcbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	68 98 15 02 c0       	push   0xc0021598
c001fcb4:	e8 7b 5d ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc2:	85 c0                	test   eax,eax
c001fcc4:	74 34                	je     c001fcfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fccd:	85 c0                	test   eax,eax
c001fccf:	74 29                	je     c001fcfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcdc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fce7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fcf8:	eb 65                	jmp    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd00:	85 c0                	test   eax,eax
c001fd02:	75 4b                	jne    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd0b:	85 c0                	test   eax,eax
c001fd0d:	75 40                	jne    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd17:	89 10                	mov    DWORD PTR [eax],edx
c001fd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd39:	85 c0                	test   eax,eax
c001fd3b:	74 22                	je     c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	68 ba 15 02 c0       	push   0xc00215ba
c001fd45:	e8 ea 5c ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fd4a:	83 c4 10             	add    esp,0x10
c001fd4d:	eb 10                	jmp    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4f:	83 ec 0c             	sub    esp,0xc
c001fd52:	68 c4 15 02 c0       	push   0xc00215c4
c001fd57:	e8 d8 5c ff ff       	call   c0015a34 <Krnl::panic(char const*)>
c001fd5c:	83 c4 10             	add    esp,0x10
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd66:	8d 50 01             	lea    edx,[eax+0x1]
c001fd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd70:	90                   	nop
c001fd71:	83 c4 0c             	add    esp,0xc
c001fd74:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd76 <ACPI::~ACPI()>:
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c001fd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd82:	89 10                	mov    DWORD PTR [eax],edx
c001fd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	50                   	push   eax
c001fd8c:	e8 2f 07 ff ff       	call   c00104c0 <Device::~Device()>
c001fd91:	83 c4 10             	add    esp,0x10
c001fd94:	90                   	nop
c001fd95:	83 c4 0c             	add    esp,0xc
c001fd98:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fd9a <ACPI::~ACPI()>:
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	83 ec 0c             	sub    esp,0xc
c001fda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda4:	e8 cd ff ff ff       	call   c001fd76 <ACPI::~ACPI()>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	83 ec 08             	sub    esp,0x8
c001fdaf:	68 68 22 00 00       	push   0x2268
c001fdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb8:	e8 22 f3 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	83 c4 0c             	add    esp,0xc
c001fdc3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdc4 <CPU::~CPU()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	89 10                	mov    DWORD PTR [eax],edx
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	50                   	push   eax
c001fdda:	e8 e1 06 ff ff       	call   c00104c0 <Device::~Device()>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	90                   	nop
c001fde3:	83 c4 0c             	add    esp,0xc
c001fde6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fde8 <CPU::~CPU()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	83 ec 0c             	sub    esp,0xc
c001fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf2:	e8 cd ff ff ff       	call   c001fdc4 <CPU::~CPU()>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	83 ec 08             	sub    esp,0x8
c001fdfd:	68 98 11 00 00       	push   0x1198
c001fe02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe06:	e8 d4 f2 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	83 c4 0c             	add    esp,0xc
c001fe11:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe12 <CPU::readCR4()>:
c001fe12:	83 ec 10             	sub    esp,0x10
c001fe15:	0f 20 e0             	mov    eax,cr4
c001fe18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe20:	83 c4 10             	add    esp,0x10
c001fe23:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe24 <CPU::writeDR7(unsigned long)>:
c001fe24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe28:	0f 23 f8             	mov    db7,eax
c001fe2b:	90                   	nop
c001fe2c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe2d <CPU::writeCR4(unsigned long)>:
c001fe2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe31:	0f 22 e0             	mov    cr4,eax
c001fe34:	90                   	nop
c001fe35:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe36 <CPU::readCR2()>:
c001fe36:	83 ec 10             	sub    esp,0x10
c001fe39:	0f 20 d0             	mov    eax,cr2
c001fe3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe44:	83 c4 10             	add    esp,0x10
c001fe47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe48:	90                   	nop
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe4a <ThreadControlBlock::ThreadControlBlock()>:
c001fe4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe64:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe82:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe86:	90                   	nop
c001fe87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001feab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fecb:	83 ec 0c             	sub    esp,0xc
c001fece:	68 7d 15 02 c0       	push   0xc002157d
c001fed3:	e8 2d f3 fe ff       	call   c000f205 <Dbg::kprintf(char const*, ...)>
c001fed8:	83 c4 10             	add    esp,0x10
c001fedb:	90                   	nop
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fee0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fee4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fee7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fee8 <PCI::~PCI()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	89 10                	mov    DWORD PTR [eax],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	50                   	push   eax
c001fefe:	e8 c7 ff fe ff       	call   c000feca <Bus::~Bus()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	90                   	nop
c001ff07:	83 c4 0c             	add    esp,0xc
c001ff0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff0c <PCI::~PCI()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff16:	e8 cd ff ff ff       	call   c001fee8 <PCI::~PCI()>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 58 01 00 00       	push   0x158
c001ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2a:	e8 b0 f1 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff36 <IDE::~IDE()>:
c001ff36:	83 ec 0c             	sub    esp,0xc
c001ff39:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	89 10                	mov    DWORD PTR [eax],edx
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	83 ec 0c             	sub    esp,0xc
c001ff4b:	50                   	push   eax
c001ff4c:	e8 81 0a ff ff       	call   c00109d2 <HardDiskController::~HardDiskController()>
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	90                   	nop
c001ff55:	83 c4 0c             	add    esp,0xc
c001ff58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff5a <IDE::~IDE()>:
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff64:	e8 cd ff ff ff       	call   c001ff36 <IDE::~IDE()>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	83 ec 08             	sub    esp,0x8
c001ff6f:	68 70 02 00 00       	push   0x270
c001ff74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff78:	e8 62 f1 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001ff7d:	83 c4 10             	add    esp,0x10
c001ff80:	83 c4 0c             	add    esp,0xc
c001ff83:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff84 <ATA::~ATA()>:
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	89 10                	mov    DWORD PTR [eax],edx
c001ff92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff96:	83 ec 0c             	sub    esp,0xc
c001ff99:	50                   	push   eax
c001ff9a:	e8 11 0b ff ff       	call   c0010ab0 <PhysicalDisk::~PhysicalDisk()>
c001ff9f:	83 c4 10             	add    esp,0x10
c001ffa2:	90                   	nop
c001ffa3:	83 c4 0c             	add    esp,0xc
c001ffa6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffa8 <ATA::~ATA()>:
c001ffa8:	83 ec 0c             	sub    esp,0xc
c001ffab:	83 ec 0c             	sub    esp,0xc
c001ffae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb2:	e8 cd ff ff ff       	call   c001ff84 <ATA::~ATA()>
c001ffb7:	83 c4 10             	add    esp,0x10
c001ffba:	83 ec 08             	sub    esp,0x8
c001ffbd:	68 7c 01 00 00       	push   0x17c
c001ffc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc6:	e8 14 f1 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	83 c4 0c             	add    esp,0xc
c001ffd1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffd2 <ATAPI::~ATAPI()>:
c001ffd2:	83 ec 0c             	sub    esp,0xc
c001ffd5:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	89 10                	mov    DWORD PTR [eax],edx
c001ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe4:	83 ec 0c             	sub    esp,0xc
c001ffe7:	50                   	push   eax
c001ffe8:	e8 c3 0a ff ff       	call   c0010ab0 <PhysicalDisk::~PhysicalDisk()>
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	90                   	nop
c001fff1:	83 c4 0c             	add    esp,0xc
c001fff4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fff6 <ATAPI::~ATAPI()>:
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020000:	e8 cd ff ff ff       	call   c001ffd2 <ATAPI::~ATAPI()>
c0020005:	83 c4 10             	add    esp,0x10
c0020008:	83 ec 08             	sub    esp,0x8
c002000b:	68 80 01 00 00       	push   0x180
c0020010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020014:	e8 c6 f0 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0020019:	83 c4 10             	add    esp,0x10
c002001c:	83 c4 0c             	add    esp,0xc
c002001f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020020 <AVX::~AVX()>:
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	ba 68 38 02 c0       	mov    edx,0xc0023868
c0020028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002c:	89 10                	mov    DWORD PTR [eax],edx
c002002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020032:	83 ec 0c             	sub    esp,0xc
c0020035:	50                   	push   eax
c0020036:	e8 f9 0a ff ff       	call   c0010b34 <FPU::~FPU()>
c002003b:	83 c4 10             	add    esp,0x10
c002003e:	90                   	nop
c002003f:	83 c4 0c             	add    esp,0xc
c0020042:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020044 <AVX::~AVX()>:
c0020044:	83 ec 0c             	sub    esp,0xc
c0020047:	83 ec 0c             	sub    esp,0xc
c002004a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004e:	e8 cd ff ff ff       	call   c0020020 <AVX::~AVX()>
c0020053:	83 c4 10             	add    esp,0x10
c0020056:	83 ec 08             	sub    esp,0x8
c0020059:	68 58 01 00 00       	push   0x158
c002005e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020062:	e8 78 f0 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0020067:	83 c4 10             	add    esp,0x10
c002006a:	83 c4 0c             	add    esp,0xc
c002006d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002006e <MMX::~MMX()>:
c002006e:	83 ec 0c             	sub    esp,0xc
c0020071:	ba a8 38 02 c0       	mov    edx,0xc00238a8
c0020076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007a:	89 10                	mov    DWORD PTR [eax],edx
c002007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020080:	83 ec 0c             	sub    esp,0xc
c0020083:	50                   	push   eax
c0020084:	e8 ab 0a ff ff       	call   c0010b34 <FPU::~FPU()>
c0020089:	83 c4 10             	add    esp,0x10
c002008c:	90                   	nop
c002008d:	83 c4 0c             	add    esp,0xc
c0020090:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0020092 <MMX::~MMX()>:
c0020092:	83 ec 0c             	sub    esp,0xc
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009c:	e8 cd ff ff ff       	call   c002006e <MMX::~MMX()>
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	83 ec 08             	sub    esp,0x8
c00200a7:	68 58 01 00 00       	push   0x158
c00200ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b0:	e8 2a f0 fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00200b5:	83 c4 10             	add    esp,0x10
c00200b8:	83 c4 0c             	add    esp,0xc
c00200bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200bc <SSE::~SSE()>:
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	89 10                	mov    DWORD PTR [eax],edx
c00200ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	50                   	push   eax
c00200d2:	e8 5d 0a ff ff       	call   c0010b34 <FPU::~FPU()>
c00200d7:	83 c4 10             	add    esp,0x10
c00200da:	90                   	nop
c00200db:	83 c4 0c             	add    esp,0xc
c00200de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200e0 <SSE::~SSE()>:
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ea:	e8 cd ff ff ff       	call   c00200bc <SSE::~SSE()>
c00200ef:	83 c4 10             	add    esp,0x10
c00200f2:	83 ec 08             	sub    esp,0x8
c00200f5:	68 58 01 00 00       	push   0x158
c00200fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fe:	e8 dc ef fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	83 c4 0c             	add    esp,0xc
c0020109:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002010a <x87::~x87()>:
c002010a:	83 ec 0c             	sub    esp,0xc
c002010d:	ba 28 39 02 c0       	mov    edx,0xc0023928
c0020112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020116:	89 10                	mov    DWORD PTR [eax],edx
c0020118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011c:	83 ec 0c             	sub    esp,0xc
c002011f:	50                   	push   eax
c0020120:	e8 0f 0a ff ff       	call   c0010b34 <FPU::~FPU()>
c0020125:	83 c4 10             	add    esp,0x10
c0020128:	90                   	nop
c0020129:	83 c4 0c             	add    esp,0xc
c002012c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002012e <x87::~x87()>:
c002012e:	83 ec 0c             	sub    esp,0xc
c0020131:	83 ec 0c             	sub    esp,0xc
c0020134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020138:	e8 cd ff ff ff       	call   c002010a <x87::~x87()>
c002013d:	83 c4 10             	add    esp,0x10
c0020140:	83 ec 08             	sub    esp,0x8
c0020143:	68 58 01 00 00       	push   0x158
c0020148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014c:	e8 8e ef fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	83 c4 0c             	add    esp,0xc
c0020157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020158 <IOAPIC::~IOAPIC()>:
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	ba 80 3a 02 c0       	mov    edx,0xc0023a80
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	89 10                	mov    DWORD PTR [eax],edx
c0020166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	50                   	push   eax
c002016e:	e8 4d 03 ff ff       	call   c00104c0 <Device::~Device()>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	90                   	nop
c0020177:	83 c4 0c             	add    esp,0xc
c002017a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002017c <IOAPIC::~IOAPIC()>:
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020186:	e8 cd ff ff ff       	call   c0020158 <IOAPIC::~IOAPIC()>
c002018b:	83 c4 10             	add    esp,0x10
c002018e:	83 ec 08             	sub    esp,0x8
c0020191:	68 68 01 00 00       	push   0x168
c0020196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019a:	e8 40 ef fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	83 c4 0c             	add    esp,0xc
c00201a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201a6 <APIC::~APIC()>:
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c00201ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b2:	89 10                	mov    DWORD PTR [eax],edx
c00201b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	50                   	push   eax
c00201bc:	e8 3d 0e ff ff       	call   c0010ffe <InterruptController::~InterruptController()>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	90                   	nop
c00201c5:	83 c4 0c             	add    esp,0xc
c00201c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201ca <APIC::~APIC()>:
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d4:	e8 cd ff ff ff       	call   c00201a6 <APIC::~APIC()>
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	83 ec 08             	sub    esp,0x8
c00201df:	68 58 21 00 00       	push   0x2158
c00201e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e8:	e8 f2 ee fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	83 c4 0c             	add    esp,0xc
c00201f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00201f4 <PIC::~PIC()>:
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c00201fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020200:	89 10                	mov    DWORD PTR [eax],edx
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	50                   	push   eax
c002020a:	e8 ef 0d ff ff       	call   c0010ffe <InterruptController::~InterruptController()>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	90                   	nop
c0020213:	83 c4 0c             	add    esp,0xc
c0020216:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020218 <PIC::~PIC()>:
c0020218:	83 ec 0c             	sub    esp,0xc
c002021b:	83 ec 0c             	sub    esp,0xc
c002021e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020222:	e8 cd ff ff ff       	call   c00201f4 <PIC::~PIC()>
c0020227:	83 c4 10             	add    esp,0x10
c002022a:	83 ec 08             	sub    esp,0x8
c002022d:	68 58 21 00 00       	push   0x2158
c0020232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020236:	e8 a4 ee fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	83 c4 0c             	add    esp,0xc
c0020241:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020242 <APICTimer::~APICTimer()>:
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	ba 24 3b 02 c0       	mov    edx,0xc0023b24
c002024a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024e:	89 10                	mov    DWORD PTR [eax],edx
c0020250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	50                   	push   eax
c0020258:	e8 cf 2a ff ff       	call   c0012d2c <Timer::~Timer()>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	90                   	nop
c0020261:	83 c4 0c             	add    esp,0xc
c0020264:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020266 <APICTimer::~APICTimer()>:
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020270:	e8 cd ff ff ff       	call   c0020242 <APICTimer::~APICTimer()>
c0020275:	83 c4 10             	add    esp,0x10
c0020278:	83 ec 08             	sub    esp,0x8
c002027b:	68 60 01 00 00       	push   0x160
c0020280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020284:	e8 56 ee fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	83 c4 0c             	add    esp,0xc
c002028f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020290 <PIT::~PIT()>:
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	ba 74 3b 02 c0       	mov    edx,0xc0023b74
c0020298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029c:	89 10                	mov    DWORD PTR [eax],edx
c002029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a2:	83 ec 0c             	sub    esp,0xc
c00202a5:	50                   	push   eax
c00202a6:	e8 81 2a ff ff       	call   c0012d2c <Timer::~Timer()>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	90                   	nop
c00202af:	83 c4 0c             	add    esp,0xc
c00202b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202b4 <PIT::~PIT()>:
c00202b4:	83 ec 0c             	sub    esp,0xc
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202be:	e8 cd ff ff ff       	call   c0020290 <PIT::~PIT()>
c00202c3:	83 c4 10             	add    esp,0x10
c00202c6:	83 ec 08             	sub    esp,0x8
c00202c9:	68 5c 01 00 00       	push   0x15c
c00202ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d2:	e8 08 ee fe ff       	call   c000f0df <operator delete(void*, unsigned long)>
c00202d7:	83 c4 10             	add    esp,0x10
c00202da:	83 c4 0c             	add    esp,0xc
c00202dd:	c3                   	ret    
