
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c4 c2 00 00       	call   c000c2e4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 f6 01 00       	call   c001f658 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 01 02 c0       	mov    ebx,0xc00201e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 01 02 c0    	cmp    ebx,0xc00201ec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 3f 02 c0       	mov    eax,0xc0023fcc
c0000049:	3d cc 3f 02 c0       	cmp    eax,0xc0023fcc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 3f 02 c0       	push   0xc0023fcc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 3f 02 c0       	mov    eax,0xc0023fcc
c0000075:	2d cc 3f 02 c0       	sub    eax,0xc0023fcc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 3f 02 c0       	push   0xc0023fcc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002416c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 01 02 c0       	mov    ebx,0xc00201f4
c00000bb:	81 eb f0 01 02 c0    	sub    ebx,0xc00201f0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 01 02 c0       	mov    esi,0xc00201f0
c00000ca:	a1 70 41 02 c0       	mov    eax,ds:0xc0024170
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 41 02 c0       	mov    ds:0xc0024170,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 41 02 c0       	mov    eax,ds:0xc0024170
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 3f 02 c0       	push   0xc0023fcc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 41 02 c0 01 	mov    BYTE PTR ds:0xc002416c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 41 02 c0       	push   0xc0024174
c000012c:	68 cc 3f 02 c0       	push   0xc0023fcc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 c5 eb 00 00       	call   c000eed6 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 53 82 01 00       	call   c001856e <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 59 86 01 00       	call   c001899b <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 0e 8c 01 00       	call   c0018f59 <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 14 82 01 00       	call   c001856e <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 b0 45 02 c0 	lgdtd  ds:0xc00245b0
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 ff 0d 01 c0       	mov    ecx,0xc0010dff
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 ff 0d 01 c0       	mov    ecx,0xc0010dff
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 8c 41 02 c0    	mov    ebx,DWORD PTR ds:0xc002418c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 8c 41 02 c0       	mov    ds:0xc002418c,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 8c 41 02 c0       	mov    eax,ds:0xc002418c
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 8c 41 02 c0    	mov    DWORD PTR ds:0xc002418c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 00 02 02 c0 02 	test   BYTE PTR [edx-0x3ffdfe00],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 00 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe00],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 00 02 02 c0 08 	test   BYTE PTR [edx-0x3ffdfe00],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 00 02 02 c0 04 	test   BYTE PTR [edi-0x3ffdfe00],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 00 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfe00],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d a0 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241a0
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d a0 41 02 c0    	mov    DWORD PTR ds:0xc00241a0,ecx
c0000bd0:	8b 0c 85 a4 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbe5c]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 a4 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe5c],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d a0 41 02 c0    	mov    DWORD PTR ds:0xc00241a0,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 cc 41 02 c0    	cmp    DWORD PTR ds:0xc00241cc,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d dc 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241dc
c0000c41:	c7 42 0c d4 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc00241d4
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 dc 41 02 c0    	mov    DWORD PTR ds:0xc00241dc,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 cc 41 02 c0    	mov    DWORD PTR ds:0xc00241cc,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 a0 41 02 c0 02 	test   BYTE PTR ds:0xc00241a0,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 0b b1 00 00       	call   c000be27 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 66 b0 00 00       	call   c000be27 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 50 b0 00 00       	call   c000be27 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 4e af 00 00       	call   c000be27 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d a0 41 02 c0    	mov    edi,DWORD PTR ds:0xc00241a0
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 a4 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbe5c]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 a4 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbe5c],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 d4 41 02 c0 	lea    edx,[eax*8-0x3ffdbe2c]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d e0 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241e0
c0000fc6:	81 fb d4 41 02 c0    	cmp    ebx,0xc00241d4
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d d4 41 02 c0       	cmp    eax,0xc00241d4
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d d0 41 02 c0    	cmp    DWORD PTR ds:0xc00241d0,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 dc 41 02 c0       	mov    ds:0xc00241dc,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c0001011:	a3 d0 41 02 c0       	mov    ds:0xc00241d0,eax
c0001016:	c7 40 08 d4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241d4
c000101d:	c7 40 0c d4 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc00241d4
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 d4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241d4
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 98 41 02 c0 	lea    ebp,[edx*4-0x3ffdbe68]
c0001066:	8b 14 95 a0 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe60]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 a0 41 02 c0 	lea    ecx,[edx*4-0x3ffdbe60]
c0001081:	8b 14 95 a0 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe60]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd d4 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbb2c],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 d4 41 02 c0 	lea    eax,[eax*8-0x3ffdbe2c]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d dc 41 02 c0    	mov    DWORD PTR ds:0xc00241dc,ecx
c000113b:	89 0d e0 41 02 c0    	mov    DWORD PTR ds:0xc00241e0,ecx
c0001141:	c7 41 08 d4 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00241d4
c0001148:	c7 41 0c d4 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00241d4
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd cc 41 02 c0 	lea    edx,[ecx*8-0x3ffdbe34]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d d4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb2c]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d d4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb2c]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 cc 41 02 c0 	lea    edx,[eax*4-0x3ffdbe34]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d d4 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbb2c],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d dc 41 02 c0    	mov    DWORD PTR ds:0xc00241dc,edi
c000120e:	89 3d e0 41 02 c0    	mov    DWORD PTR ds:0xc00241e0,edi
c0001214:	c7 47 08 d4 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc00241d4
c000121b:	c7 47 0c d4 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc00241d4
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d d0 41 02 c0    	mov    DWORD PTR ds:0xc00241d0,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 cc 41 02 c0       	mov    eax,ds:0xc00241cc
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d cc 41 02 c0    	mov    DWORD PTR ds:0xc00241cc,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba a0 41 02 c0       	mov    edx,0xc00241a0
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d a0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241a0,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d f4 44 02 c0    	mov    ebx,DWORD PTR ds:0xc00244f4
c0001369:	c7 05 f4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244f4,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d f4 44 02 c0    	mov    DWORD PTR ds:0xc00244f4,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 cc 41 02 c0    	cmp    DWORD PTR ds:0xc00241cc,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d cc 41 02 c0    	mov    DWORD PTR ds:0xc00241cc,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d a0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241a0,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 fc 44 02 c0    	push   DWORD PTR ds:0xc00244fc
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d a0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241a0,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 fc 44 02 c0       	mov    eax,ds:0xc00244fc
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d cc 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241cc,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 cc 41 02 c0       	mov    eax,ds:0xc00241cc
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 a4 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe5c]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 d4 41 02 c0       	mov    eax,0xc00241d4
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d cc 44 02 c0       	cmp    eax,0xc00244cc
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 08 45 02 c0       	mov    eax,ds:0xc0024508
c0001915:	8b 35 f0 44 02 c0    	mov    esi,DWORD PTR ds:0xc00244f0
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 04 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024504
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 14 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024514
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 04 03 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfcfc]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 a0 41 02 c0       	mov    ds:0xc00241a0,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d e4 44 02 c0    	mov    DWORD PTR ds:0xc00244e4,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d e8 44 02 c0    	mov    DWORD PTR ds:0xc00244e8,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d ec 44 02 c0    	mov    DWORD PTR ds:0xc00244ec,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 f4 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00244f4,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 c0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda540]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 c4 8c 01 00       	jmp    c001a6d4 <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 c0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda540]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 f9 8c 01 00       	jmp    c001a71f <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 c0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda540]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 25 8d 01 00       	jmp    c001a76a <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 d4 d6 01 00       	call   c001f3fc <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 20 04 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfbe0]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 20 04 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfbe0]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba 20 03 02 c0       	mov    edx,0xc0020320
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba cc 30 02 c0       	mov    edx,0xc00230cc
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 4c 04 02 c0       	mov    edx,0xc002044c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba 30 04 02 c0       	mov    edx,0xc0020430
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 40 45 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbac0]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 20 45 02 c0    	mov    ax,ds:0xc0024520
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 20 45 02 c0    	mov    ds:0xc0024520,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 de c4 01 00       	call   c001f3fc <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 52 04 02 c0       	mov    eax,0xc0020452
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad a0 03 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfc60]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 5b 04 02 c0       	mov    eax,0xc002045b
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 20 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfbe0]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 c0 ae 01 00       	call   c001f3fc <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba 30 04 02 c0       	mov    edx,0xc0020430
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba 20 03 02 c0       	mov    edx,0xc0020320
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba 30 03 02 c0       	mov    edx,0xc0020330
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 40 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbac0]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 40 45 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbac0],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 a1 98 01 00       	call   c001f3fc <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 89 98 01 00       	call   c001f3fc <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 77 03 02 c0       	mov    eax,0xc0020377
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 70 03 02 c0       	mov    eax,0xc0020370
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 40 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbac0]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 60 03 02 c0       	mov    esi,0xc0020360
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 d7 7f 01 00       	call   c001f3fc <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba 40 03 02 c0       	mov    edx,0xc0020340
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba 50 03 02 c0       	mov    edx,0xc0020350
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 62 04 02 c0       	mov    edx,0xc0020462
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 6e 04 02 c0       	mov    edx,0xc002046e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba 82 04 02 c0       	mov    edx,0xc0020482
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 9f 3d 00 00       	call   c000bfd9 <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 99 3d 00 00       	call   c000bfe9 <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c a0 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc00207a0
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 a0 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207a0
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 a0 05 02 c0       	mov    eax,0xc00205a0
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 e0 04 02 c0       	mov    eax,0xc00204e0
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 a0 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb60]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 60 0d 02 c0    	fld    QWORD PTR ds:0xc0020d60
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 68 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d68
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 6d 3a 00 00       	call   c000bfe9 <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 57 3a 00 00       	call   c000bfe9 <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 80 0d 02 c0    	fld    DWORD PTR ds:0xc0020d80
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 b4 6f 01 00       	call   c001f620 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 70 0d 02 c0    	fld    QWORD PTR ds:0xc0020d70
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 fb 36 00 00       	call   c000c009 <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 96 36 00 00       	call   c000bfe9 <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 a0 08 02 c0       	mov    eax,0xc00208a0
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 00 0d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf300]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 84 0d 02 c0    	fld    DWORD PTR ds:0xc0020d84
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 88 0d 02 c0    	fld    DWORD PTR ds:0xc0020d88
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 78 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d78
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 8c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d8c
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 f2 6a 01 00       	call   c001f640 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 90 0d 02 c0    	fld    DWORD PTR ds:0xc0020d90
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 88 0d 02 c0    	fld    DWORD PTR ds:0xc0020d88
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 78 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d78
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 8c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d8c
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 66 6a 01 00       	call   c001f640 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 60 0d 02 c0    	fld    QWORD PTR ds:0xc0020d60
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 68 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d68
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 f3 69 01 00       	call   c001f640 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 bf 68 01 00       	call   c001f620 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d d8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020dd8
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 5a 68 01 00       	call   c001f640 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 e7 67 01 00       	call   c001f620 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d d8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020dd8
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 94 0d 02 c0       	mov    eax,0xc0020d94
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 a8 0d 02 c0       	mov    eax,0xc0020da8
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 6d 30 00 00       	call   c000bfe9 <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 6f 30 00 00       	call   c000c009 <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 60 0d 02 c0    	fld    QWORD PTR ds:0xc0020d60
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 68 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d68
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 68 0f 02 c0    	fld    DWORD PTR ds:0xc0020f68
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 e0 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf220]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 fc 0d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf204]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 18 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf1e8]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 6c 0f 02 c0    	fld    DWORD PTR ds:0xc0020f6c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 5f 5b 01 00       	jmp    c001f640 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 3c 5b 01 00       	call   c001f640 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 70 0f 02 c0    	fld    DWORD PTR ds:0xc0020f70
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 e7 58 01 00       	call   c001f640 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 b2 58 01 00       	call   c001f640 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 d8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020dd8
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 c4 57 01 00       	call   c001f620 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 60 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f60
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 29 57 01 00       	call   c001f640 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 70 0f 02 c0    	fld    DWORD PTR ds:0xc0020f70
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 65 56 01 00       	call   c001f640 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 30 56 01 00       	call   c001f640 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 d8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020dd8
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 42 55 01 00       	call   c001f620 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 60 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f60
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 ac 54 01 00       	call   c001f640 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 70 0f 02 c0    	fld    DWORD PTR ds:0xc0020f70
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 e8 53 01 00       	call   c001f640 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 b3 53 01 00       	call   c001f640 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 d8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020dd8
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 c5 52 01 00       	call   c001f620 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 60 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f60
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 2f 52 01 00       	call   c001f640 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 70 0f 02 c0    	fld    DWORD PTR ds:0xc0020f70
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 6b 51 01 00       	call   c001f640 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 36 51 01 00       	call   c001f640 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 d8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020dd8
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 48 50 01 00       	call   c001f620 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 60 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f60
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 b2 4f 01 00       	call   c001f640 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 70 0f 02 c0    	fld    DWORD PTR ds:0xc0020f70
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 ee 4e 01 00       	call   c001f640 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 b9 4e 01 00       	call   c001f640 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 d8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020dd8
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 d2 4d 01 00       	call   c001f620 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 60 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f60
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 36 4d 01 00       	call   c001f640 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 40 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1c0]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 34 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1cc]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 7e 16 00 00       	call   c000bfe9 <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 60 0d 02 c0    	fld    QWORD PTR ds:0xc0020d60
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 68 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d68
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 c9 4b 01 00       	call   c001f640 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 9d 4a 01 00       	call   c001f620 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d d8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020dd8
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 44 4a 01 00       	call   c001f640 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 d1 49 01 00       	call   c001f620 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d d8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020dd8
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 74 0f 02 c0       	mov    eax,0xc0020f74
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 85 0f 02 c0       	mov    eax,0xc0020f85
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 6d 12 00 00       	call   c000bfe9 <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 6f 12 00 00       	call   c000c009 <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adf8:	50                   	push   eax
c000adf9:	e8 d4 58 00 00       	call   c00106d2 <Device::closeAll()>
c000adfe:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae09:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae15:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1d:	5b                   	pop    ebx
c000ae1e:	5e                   	pop    esi
c000ae1f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae22:	5f                   	pop    edi
c000ae23:	ff e0                	jmp    eax
c000ae25:	90                   	nop

c000ae26 <Computer::Computer()>:
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2d:	83 ec 08             	sub    esp,0x8
c000ae30:	68 bc 0f 02 c0       	push   0xc0020fbc
c000ae35:	50                   	push   eax
c000ae36:	e8 11 59 00 00       	call   c001074c <Device::Device(char const*)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	ba 84 11 02 c0       	mov    edx,0xc0021184
c000ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae47:	89 10                	mov    DWORD PTR [eax],edx
c000ae49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae69:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6f:	83 ca 04             	or     edx,0x4
c000ae72:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae82:	31 d2                	xor    edx,edx
c000ae84:	88 c2                	mov    dl,al
c000ae86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9b:	31 d2                	xor    edx,edx
c000ae9d:	88 c2                	mov    dl,al
c000ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb2:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebf:	31 d2                	xor    edx,edx
c000aec1:	88 c2                	mov    dl,al
c000aec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecb:	83 e1 3f             	and    ecx,0x3f
c000aece:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aedc:	31 d2                	xor    edx,edx
c000aede:	88 c2                	mov    dl,al
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef5:	31 d2                	xor    edx,edx
c000aef7:	88 c2                	mov    dl,al
c000aef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefd:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af0c:	8d 50 01             	lea    edx,[eax+0x1]
c000af0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af13:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af19:	31 d2                	xor    edx,edx
c000af1b:	88 c2                	mov    dl,al
c000af1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af21:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af25:	83 e1 3f             	and    ecx,0x3f
c000af28:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af36:	31 d2                	xor    edx,edx
c000af38:	88 c2                	mov    dl,al
c000af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3e:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af4f:	31 d2                	xor    edx,edx
c000af51:	88 c2                	mov    dl,al
c000af53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af57:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af66:	8d 50 01             	lea    edx,[eax+0x1]
c000af69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af6d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af73:	31 d2                	xor    edx,edx
c000af75:	88 c2                	mov    dl,al
c000af77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af7f:	83 e1 3f             	and    ecx,0x3f
c000af82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af86:	90                   	nop
c000af87:	83 c4 0c             	add    esp,0xc
c000af8a:	c3                   	ret    
c000af8b:	90                   	nop

c000af8c <Computer::setBootMessage(char const*)>:
c000af8c:	c3                   	ret    
c000af8d:	90                   	nop

c000af8e <Computer::start()>:
c000af8e:	56                   	push   esi
c000af8f:	53                   	push   ebx
c000af90:	83 ec 14             	sub    esp,0x14
c000af93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af97:	e8 c7 d9 00 00       	call   c0018963 <lockScheduler()>
c000af9c:	e8 0b dd 00 00       	call   c0018cac <schedule()>
c000afa1:	e8 bf d9 00 00       	call   c0018965 <unlockScheduler()>
c000afa6:	fb                   	sti    
c000afa7:	83 ec 0c             	sub    esp,0xc
c000afaa:	68 3b 07 00 00       	push   0x73b
c000afaf:	e8 5e 40 00 00       	call   c000f012 <operator new(unsigned long)>
c000afb4:	89 c6                	mov    esi,eax
c000afb6:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c000afbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afc2:	50                   	push   eax
c000afc3:	68 c5 0f 02 c0       	push   0xc0020fc5
c000afc8:	6a 01                	push   0x1
c000afca:	56                   	push   esi
c000afcb:	e8 ea d7 00 00       	call   c00187ba <Process::Process(bool, char const*, Process*, char**)>
c000afd0:	83 c4 20             	add    esp,0x20
c000afd3:	68 ff 00 00 00       	push   0xff
c000afd8:	6a 00                	push   0x0
c000afda:	68 67 b9 00 c0       	push   0xc000b967
c000afdf:	56                   	push   esi
c000afe0:	e8 b3 da 00 00       	call   c0018a98 <Process::createThread(void (*)(void*), void*, int)>
c000afe5:	6a 7a                	push   0x7a
c000afe7:	8b 15 f4 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259f4
c000afed:	6a 00                	push   0x0
c000afef:	68 dd 92 01 c0       	push   0xc00192dd
c000aff4:	52                   	push   edx
c000aff5:	e8 9e da 00 00       	call   c0018a98 <Process::createThread(void (*)(void*), void*, int)>
c000affa:	83 c4 20             	add    esp,0x20
c000affd:	a3 a8 59 02 c0       	mov    ds:0xc00259a8,eax
c000b002:	c6 05 ad 45 02 c0 01 	mov    BYTE PTR ds:0xc00245ad,0x1
c000b009:	e8 9c 44 00 00       	call   c000f4aa <initVFS()>
c000b00e:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b014:	8b 10                	mov    edx,DWORD PTR [eax]
c000b016:	6a 00                	push   0x0
c000b018:	6a 00                	push   0x0
c000b01a:	6a 00                	push   0x0
c000b01c:	50                   	push   eax
c000b01d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b020:	e8 8d c1 00 00       	call   c00171b2 <setupSystemCalls()>
c000b025:	e8 7e 4f 00 00       	call   c000ffa8 <loadClockSettings()>
c000b02a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b02d:	e8 74 56 00 00       	call   c00106a6 <Device::loadDriversForAll()>
c000b032:	bb 02 00 00 00       	mov    ebx,0x2
c000b037:	b8 01 00 00 00       	mov    eax,0x1
c000b03c:	31 d2                	xor    edx,edx
c000b03e:	31 c9                	xor    ecx,ecx
c000b040:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b048:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b050:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b056:	59                   	pop    ecx
c000b057:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c000b05d:	5e                   	pop    esi
c000b05e:	6a 01                	push   0x1
c000b060:	68 d2 0f 02 c0       	push   0xc0020fd2
c000b065:	e8 14 d3 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c000b06a:	5a                   	pop    edx
c000b06b:	59                   	pop    ecx
c000b06c:	53                   	push   ebx
c000b06d:	50                   	push   eax
c000b06e:	e8 d1 d4 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c000b073:	c7 04 24 48 21 02 c0 	mov    DWORD PTR [esp],0xc0022148
c000b07a:	e8 c8 40 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	6a 02                	push   0x2
c000b087:	e8 79 dd 00 00       	call   c0018e05 <blockTask(TaskState)>
c000b08c:	83 c4 10             	add    esp,0x10
c000b08f:	eb f1                	jmp    c000b082 <Computer::start()+0xf4>

c000b091 <firstTask()>:
c000b091:	83 ec 18             	sub    esp,0x18
c000b094:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c000b099:	50                   	push   eax
c000b09a:	e8 ef fe ff ff       	call   c000af8e <Computer::start()>
c000b09f:	90                   	nop

c000b0a0 <Computer::detectFeatures()>:
c000b0a0:	55                   	push   ebp
c000b0a1:	57                   	push   edi
c000b0a2:	56                   	push   esi
c000b0a3:	53                   	push   ebx
c000b0a4:	83 ec 1c             	sub    esp,0x1c
c000b0a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0ab:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0b1:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0b7:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0bd:	e8 af 52 ff ff       	call   c0000371 <detectCPUID>
c000b0c2:	85 c0                	test   eax,eax
c000b0c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ca:	0f 95 c2             	setne  dl
c000b0cd:	01 d2                	add    edx,edx
c000b0cf:	83 e0 fd             	and    eax,0xfffffffd
c000b0d2:	09 d0                	or     eax,edx
c000b0d4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0da:	a8 02                	test   al,0x2
c000b0dc:	75 4e                	jne    c000b12c <Computer::detectFeatures()+0x8c>
c000b0de:	f6 05 c1 45 02 c0 04 	test   BYTE PTR ds:0xc00245c1,0x4
c000b0e5:	74 0f                	je     c000b0f6 <Computer::detectFeatures()+0x56>
c000b0e7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ed:	83 e0 fb             	and    eax,0xfffffffb
c000b0f0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f6:	e8 cb 3f 01 00       	call   c001f0c6 <x87Detect>
c000b0fb:	83 e0 01             	and    eax,0x1
c000b0fe:	c1 e0 04             	shl    eax,0x4
c000b101:	88 c2                	mov    dl,al
c000b103:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b109:	83 e0 ef             	and    eax,0xffffffef
c000b10c:	09 d0                	or     eax,edx
c000b10e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b114:	a8 10                	test   al,0x10
c000b116:	0f 85 20 01 00 00    	jne    c000b23c <Computer::detectFeatures()+0x19c>
c000b11c:	84 c0                	test   al,al
c000b11e:	0f 88 3b 01 00 00    	js     c000b25f <Computer::detectFeatures()+0x1bf>
c000b124:	83 c4 1c             	add    esp,0x1c
c000b127:	5b                   	pop    ebx
c000b128:	5e                   	pop    esi
c000b129:	5f                   	pop    edi
c000b12a:	5d                   	pop    ebp
c000b12b:	c3                   	ret    
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	6a 20                	push   0x20
c000b131:	e8 1d 96 00 00       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c000b136:	83 e0 01             	and    eax,0x1
c000b139:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b140:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b146:	83 e0 f7             	and    eax,0xfffffff7
c000b149:	09 d0                	or     eax,edx
c000b14b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b151:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b158:	e8 f6 95 00 00       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c000b15d:	83 e0 01             	and    eax,0x1
c000b160:	88 c2                	mov    dl,al
c000b162:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b168:	83 e0 fe             	and    eax,0xfffffffe
c000b16b:	09 d0                	or     eax,edx
c000b16d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b173:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b17a:	e8 d4 95 00 00       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c000b17f:	c1 e0 07             	shl    eax,0x7
c000b182:	88 c2                	mov    dl,al
c000b184:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b18a:	83 e0 7f             	and    eax,0x7f
c000b18d:	09 d0                	or     eax,edx
c000b18f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b195:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b19c:	e8 b2 95 00 00       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	83 e0 01             	and    eax,0x1
c000b1a7:	c1 e0 05             	shl    eax,0x5
c000b1aa:	88 c2                	mov    dl,al
c000b1ac:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1b2:	83 e0 df             	and    eax,0xffffffdf
c000b1b5:	09 d0                	or     eax,edx
c000b1b7:	f7 05 c0 45 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00245c0,0x401
c000b1c1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1c7:	0f 84 b8 00 00 00    	je     c000b285 <Computer::detectFeatures()+0x1e5>
c000b1cd:	83 ec 0c             	sub    esp,0xc
c000b1d0:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1d6:	83 e1 fe             	and    ecx,0xfffffffe
c000b1d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1dd:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1e3:	50                   	push   eax
c000b1e4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1e8:	55                   	push   ebp
c000b1e9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1ed:	57                   	push   edi
c000b1ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1f2:	56                   	push   esi
c000b1f3:	68 00 00 00 80       	push   0x80000000
c000b1f8:	e8 d3 94 00 00       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1fd:	83 c4 20             	add    esp,0x20
c000b200:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b207:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b20b:	0f 86 cd fe ff ff    	jbe    c000b0de <Computer::detectFeatures()+0x3e>
c000b211:	83 ec 0c             	sub    esp,0xc
c000b214:	50                   	push   eax
c000b215:	55                   	push   ebp
c000b216:	57                   	push   edi
c000b217:	56                   	push   esi
c000b218:	68 01 00 00 80       	push   0x80000001
c000b21d:	e8 ae 94 00 00       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b222:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b228:	83 c4 20             	add    esp,0x20
c000b22b:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b231:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b237:	e9 a2 fe ff ff       	jmp    c000b0de <Computer::detectFeatures()+0x3e>
c000b23c:	e8 3f 3e 01 00       	call   c001f080 <sseDetect>
c000b241:	88 c2                	mov    dl,al
c000b243:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b249:	c1 e2 07             	shl    edx,0x7
c000b24c:	83 e0 7f             	and    eax,0x7f
c000b24f:	09 d0                	or     eax,edx
c000b251:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b257:	84 c0                	test   al,al
c000b259:	0f 89 c5 fe ff ff    	jns    c000b124 <Computer::detectFeatures()+0x84>
c000b25f:	e8 0c 3e 01 00       	call   c001f070 <avxDetect>
c000b264:	83 e0 01             	and    eax,0x1
c000b267:	c1 e0 05             	shl    eax,0x5
c000b26a:	88 c2                	mov    dl,al
c000b26c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b272:	83 e0 df             	and    eax,0xffffffdf
c000b275:	09 d0                	or     eax,edx
c000b277:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b27d:	83 c4 1c             	add    esp,0x1c
c000b280:	5b                   	pop    ebx
c000b281:	5e                   	pop    esi
c000b282:	5f                   	pop    edi
c000b283:	5d                   	pop    ebp
c000b284:	c3                   	ret    
c000b285:	83 ec 0c             	sub    esp,0xc
c000b288:	68 00 02 00 00       	push   0x200
c000b28d:	e8 c1 94 00 00       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	e9 33 ff ff ff       	jmp    c000b1cd <Computer::detectFeatures()+0x12d>

c000b29a <Computer::displayFeatures()>:
c000b29a:	53                   	push   ebx
c000b29b:	83 ec 14             	sub    esp,0x14
c000b29e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2a2:	68 f5 0f 02 c0       	push   0xc0020ff5
c000b2a7:	e8 9b 3e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b2ac:	83 c4 10             	add    esp,0x10
c000b2af:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b2b4:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2bb:	74 05                	je     c000b2c2 <Computer::displayFeatures()+0x28>
c000b2bd:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b2c2:	51                   	push   ecx
c000b2c3:	51                   	push   ecx
c000b2c4:	50                   	push   eax
c000b2c5:	68 08 10 02 c0       	push   0xc0021008
c000b2ca:	e8 78 3e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b2cf:	83 c4 10             	add    esp,0x10
c000b2d2:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b2d7:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2de:	75 05                	jne    c000b2e5 <Computer::displayFeatures()+0x4b>
c000b2e0:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b2e5:	52                   	push   edx
c000b2e6:	52                   	push   edx
c000b2e7:	50                   	push   eax
c000b2e8:	68 19 10 02 c0       	push   0xc0021019
c000b2ed:	e8 55 3e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b2fa:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b301:	75 05                	jne    c000b308 <Computer::displayFeatures()+0x6e>
c000b303:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b308:	51                   	push   ecx
c000b309:	51                   	push   ecx
c000b30a:	50                   	push   eax
c000b30b:	68 2a 10 02 c0       	push   0xc002102a
c000b310:	e8 32 3e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b31d:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b324:	75 05                	jne    c000b32b <Computer::displayFeatures()+0x91>
c000b326:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b32b:	52                   	push   edx
c000b32c:	52                   	push   edx
c000b32d:	50                   	push   eax
c000b32e:	68 3b 10 02 c0       	push   0xc002103b
c000b333:	e8 0f 3e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b340:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b347:	75 05                	jne    c000b34e <Computer::displayFeatures()+0xb4>
c000b349:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b34e:	51                   	push   ecx
c000b34f:	51                   	push   ecx
c000b350:	50                   	push   eax
c000b351:	68 4c 10 02 c0       	push   0xc002104c
c000b356:	e8 ec 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b363:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b36a:	75 05                	jne    c000b371 <Computer::displayFeatures()+0xd7>
c000b36c:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b371:	52                   	push   edx
c000b372:	52                   	push   edx
c000b373:	50                   	push   eax
c000b374:	68 5d 10 02 c0       	push   0xc002105d
c000b379:	e8 c9 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b386:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b38d:	75 05                	jne    c000b394 <Computer::displayFeatures()+0xfa>
c000b38f:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b394:	51                   	push   ecx
c000b395:	51                   	push   ecx
c000b396:	50                   	push   eax
c000b397:	68 6e 10 02 c0       	push   0xc002106e
c000b39c:	e8 a6 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b3a9:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b0:	78 05                	js     c000b3b7 <Computer::displayFeatures()+0x11d>
c000b3b2:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b3b7:	52                   	push   edx
c000b3b8:	52                   	push   edx
c000b3b9:	50                   	push   eax
c000b3ba:	68 7f 10 02 c0       	push   0xc002107f
c000b3bf:	e8 83 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b3c4:	83 c4 10             	add    esp,0x10
c000b3c7:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b3cc:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3d3:	0f 84 93 01 00 00    	je     c000b56c <Computer::displayFeatures()+0x2d2>
c000b3d9:	51                   	push   ecx
c000b3da:	51                   	push   ecx
c000b3db:	50                   	push   eax
c000b3dc:	68 90 10 02 c0       	push   0xc0021090
c000b3e1:	e8 61 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b3ee:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3f5:	0f 84 67 01 00 00    	je     c000b562 <Computer::displayFeatures()+0x2c8>
c000b3fb:	52                   	push   edx
c000b3fc:	52                   	push   edx
c000b3fd:	50                   	push   eax
c000b3fe:	68 a1 10 02 c0       	push   0xc00210a1
c000b403:	e8 3f 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b410:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b417:	0f 84 3b 01 00 00    	je     c000b558 <Computer::displayFeatures()+0x2be>
c000b41d:	51                   	push   ecx
c000b41e:	51                   	push   ecx
c000b41f:	50                   	push   eax
c000b420:	68 b2 10 02 c0       	push   0xc00210b2
c000b425:	e8 1d 3d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b432:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b439:	0f 84 0f 01 00 00    	je     c000b54e <Computer::displayFeatures()+0x2b4>
c000b43f:	52                   	push   edx
c000b440:	52                   	push   edx
c000b441:	50                   	push   eax
c000b442:	68 c3 10 02 c0       	push   0xc00210c3
c000b447:	e8 fb 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b44c:	83 c4 10             	add    esp,0x10
c000b44f:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b454:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b45b:	0f 84 e3 00 00 00    	je     c000b544 <Computer::displayFeatures()+0x2aa>
c000b461:	51                   	push   ecx
c000b462:	51                   	push   ecx
c000b463:	50                   	push   eax
c000b464:	68 d4 10 02 c0       	push   0xc00210d4
c000b469:	e8 d9 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b46e:	83 c4 10             	add    esp,0x10
c000b471:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b476:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b47d:	0f 84 b7 00 00 00    	je     c000b53a <Computer::displayFeatures()+0x2a0>
c000b483:	52                   	push   edx
c000b484:	52                   	push   edx
c000b485:	50                   	push   eax
c000b486:	68 e5 10 02 c0       	push   0xc00210e5
c000b48b:	e8 b7 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b498:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b49f:	0f 84 8b 00 00 00    	je     c000b530 <Computer::displayFeatures()+0x296>
c000b4a5:	51                   	push   ecx
c000b4a6:	51                   	push   ecx
c000b4a7:	50                   	push   eax
c000b4a8:	68 f6 10 02 c0       	push   0xc00210f6
c000b4ad:	e8 95 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b4ba:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4c1:	78 05                	js     c000b4c8 <Computer::displayFeatures()+0x22e>
c000b4c3:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b4c8:	52                   	push   edx
c000b4c9:	52                   	push   edx
c000b4ca:	50                   	push   eax
c000b4cb:	68 07 11 02 c0       	push   0xc0021107
c000b4d0:	e8 72 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b4d5:	83 c4 10             	add    esp,0x10
c000b4d8:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b4dd:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4e4:	74 43                	je     c000b529 <Computer::displayFeatures()+0x28f>
c000b4e6:	51                   	push   ecx
c000b4e7:	51                   	push   ecx
c000b4e8:	50                   	push   eax
c000b4e9:	68 18 11 02 c0       	push   0xc0021118
c000b4ee:	e8 54 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c000b4fb:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b502:	74 1e                	je     c000b522 <Computer::displayFeatures()+0x288>
c000b504:	52                   	push   edx
c000b505:	52                   	push   edx
c000b506:	50                   	push   eax
c000b507:	68 29 11 02 c0       	push   0xc0021129
c000b50c:	e8 36 3c 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b511:	c7 44 24 20 26 27 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022726
c000b519:	83 c4 18             	add    esp,0x18
c000b51c:	5b                   	pop    ebx
c000b51d:	e9 25 3c 00 00       	jmp    c000f147 <Dbg::kprintf(char const*, ...)>
c000b522:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b527:	eb db                	jmp    c000b504 <Computer::displayFeatures()+0x26a>
c000b529:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b52e:	eb b6                	jmp    c000b4e6 <Computer::displayFeatures()+0x24c>
c000b530:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b535:	e9 6b ff ff ff       	jmp    c000b4a5 <Computer::displayFeatures()+0x20b>
c000b53a:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b53f:	e9 3f ff ff ff       	jmp    c000b483 <Computer::displayFeatures()+0x1e9>
c000b544:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b549:	e9 13 ff ff ff       	jmp    c000b461 <Computer::displayFeatures()+0x1c7>
c000b54e:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b553:	e9 e7 fe ff ff       	jmp    c000b43f <Computer::displayFeatures()+0x1a5>
c000b558:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b55d:	e9 bb fe ff ff       	jmp    c000b41d <Computer::displayFeatures()+0x183>
c000b562:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b567:	e9 8f fe ff ff       	jmp    c000b3fb <Computer::displayFeatures()+0x161>
c000b56c:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c000b571:	e9 63 fe ff ff       	jmp    c000b3d9 <Computer::displayFeatures()+0x13f>

c000b576 <Computer::rdmsr(unsigned int)>:
c000b576:	83 ec 0c             	sub    esp,0xc
c000b579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b584:	74 0a                	je     c000b590 <Computer::rdmsr(unsigned int)+0x1a>
c000b586:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b58a:	0f 32                	rdmsr  
c000b58c:	83 c4 0c             	add    esp,0xc
c000b58f:	c3                   	ret    
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	68 3a 11 02 c0       	push   0xc002113a
c000b598:	e8 d9 a3 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	eb e4                	jmp    c000b586 <Computer::rdmsr(unsigned int)+0x10>

c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5a2:	57                   	push   edi
c000b5a3:	56                   	push   esi
c000b5a4:	52                   	push   edx
c000b5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5b1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b8:	74 0e                	je     c000b5c8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5be:	89 f0                	mov    eax,esi
c000b5c0:	89 fa                	mov    edx,edi
c000b5c2:	0f 30                	wrmsr  
c000b5c4:	58                   	pop    eax
c000b5c5:	5e                   	pop    esi
c000b5c6:	5f                   	pop    edi
c000b5c7:	c3                   	ret    
c000b5c8:	83 ec 0c             	sub    esp,0xc
c000b5cb:	68 40 11 02 c0       	push   0xc0021140
c000b5d0:	e8 a1 a3 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	eb e0                	jmp    c000b5ba <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5da <Computer::nmiEnabled()>:
c000b5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5de:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5e4:	c3                   	ret    
c000b5e5:	90                   	nop

c000b5e6 <Computer::readCMOS(unsigned char)>:
c000b5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5ee:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5f5:	19 c0                	sbb    eax,eax
c000b5f7:	83 e0 80             	and    eax,0xffffff80
c000b5fa:	09 d0                	or     eax,edx
c000b5fc:	e6 70                	out    0x70,al
c000b5fe:	e4 71                	in     al,0x71
c000b600:	c3                   	ret    
c000b601:	90                   	nop

c000b602 <Computer::enableNMI(bool)>:
c000b602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b610:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b618:	eb cc                	jmp    c000b5e6 <Computer::readCMOS(unsigned char)>

c000b61a <Computer::open(int, int, void*)>:
c000b61a:	56                   	push   esi
c000b61b:	53                   	push   ebx
c000b61c:	83 ec 10             	sub    esp,0x10
c000b61f:	f6 05 c0 45 02 c0 04 	test   BYTE PTR ds:0xc00245c0,0x4
c000b626:	0f 94 05 e0 39 02 c0 	sete   BYTE PTR ds:0xc00239e0
c000b62d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b631:	68 68 22 00 00       	push   0x2268
c000b636:	e8 d7 39 00 00       	call   c000f012 <operator new(unsigned long)>
c000b63b:	89 c6                	mov    esi,eax
c000b63d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b640:	e8 fb 86 00 00       	call   c0013d40 <ACPI::ACPI()>
c000b645:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b64b:	59                   	pop    ecx
c000b64c:	58                   	pop    eax
c000b64d:	56                   	push   esi
c000b64e:	53                   	push   ebx
c000b64f:	e8 08 4f 00 00       	call   c001055c <Device::addChild(Device*)>
c000b654:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b657:	e8 44 fa ff ff       	call   c000b0a0 <Computer::detectFeatures()>
c000b65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65f:	e8 36 fc ff ff       	call   c000b29a <Computer::displayFeatures()>
c000b664:	58                   	pop    eax
c000b665:	5a                   	pop    edx
c000b666:	6a 01                	push   0x1
c000b668:	53                   	push   ebx
c000b669:	e8 94 ff ff ff       	call   c000b602 <Computer::enableNMI(bool)>
c000b66e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b675:	e8 98 39 00 00       	call   c000f012 <operator new(unsigned long)>
c000b67a:	89 c6                	mov    esi,eax
c000b67c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b67f:	e8 9a 91 00 00       	call   c001481e <CPU::CPU()>
c000b684:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b68a:	59                   	pop    ecx
c000b68b:	58                   	pop    eax
c000b68c:	56                   	push   esi
c000b68d:	53                   	push   ebx
c000b68e:	e8 c9 4e 00 00       	call   c001055c <Device::addChild(Device*)>
c000b693:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b699:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b69d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b69f:	51                   	push   ecx
c000b6a0:	6a 00                	push   0x0
c000b6a2:	6a 00                	push   0x0
c000b6a4:	50                   	push   eax
c000b6a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6a8:	83 c4 20             	add    esp,0x20
c000b6ab:	e8 14 54 00 00       	call   c0010ac4 <setupFPU()>
c000b6b0:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6b6:	85 c0                	test   eax,eax
c000b6b8:	74 1e                	je     c000b6d8 <Computer::open(int, int, void*)+0xbe>
c000b6ba:	52                   	push   edx
c000b6bb:	52                   	push   edx
c000b6bc:	50                   	push   eax
c000b6bd:	53                   	push   ebx
c000b6be:	e8 99 4e 00 00       	call   c001055c <Device::addChild(Device*)>
c000b6c3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6cb:	6a 00                	push   0x0
c000b6cd:	6a 00                	push   0x0
c000b6cf:	6a 00                	push   0x0
c000b6d1:	50                   	push   eax
c000b6d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d5:	83 c4 20             	add    esp,0x20
c000b6d8:	83 ec 0c             	sub    esp,0xc
c000b6db:	68 91 b0 00 c0       	push   0xc000b091
c000b6e0:	e8 b2 d4 00 00       	call   c0018b97 <setupMultitasking(void (*)())>
c000b6e5:	83 c4 14             	add    esp,0x14
c000b6e8:	83 c8 ff             	or     eax,0xffffffff
c000b6eb:	5b                   	pop    ebx
c000b6ec:	5e                   	pop    esi
c000b6ed:	c3                   	ret    

c000b6ee <Computer::disableNMI()>:
c000b6ee:	6a 00                	push   0x0
c000b6f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6f4:	50                   	push   eax
c000b6f5:	e8 08 ff ff ff       	call   c000b602 <Computer::enableNMI(bool)>
c000b6fa:	5a                   	pop    edx
c000b6fb:	59                   	pop    ecx
c000b6fc:	c3                   	ret    
c000b6fd:	90                   	nop

c000b6fe <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b706:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b70d:	19 c0                	sbb    eax,eax
c000b70f:	83 e0 80             	and    eax,0xffffff80
c000b712:	09 d0                	or     eax,edx
c000b714:	e6 70                	out    0x70,al
c000b716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b71a:	e6 71                	out    0x71,al
c000b71c:	c3                   	ret    
c000b71d:	90                   	nop

c000b71e <Computer::handleNMI()>:
c000b71e:	56                   	push   esi
c000b71f:	53                   	push   ebx
c000b720:	83 ec 10             	sub    esp,0x10
c000b723:	e4 92                	in     al,0x92
c000b725:	89 c6                	mov    esi,eax
c000b727:	e4 61                	in     al,0x61
c000b729:	68 46 11 02 c0       	push   0xc0021146
c000b72e:	88 c3                	mov    bl,al
c000b730:	e8 12 3a 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b735:	83 c4 10             	add    esp,0x10
c000b738:	83 e6 10             	and    esi,0x10
c000b73b:	75 0d                	jne    c000b74a <Computer::handleNMI()+0x2c>
c000b73d:	f6 c3 40             	test   bl,0x40
c000b740:	75 1d                	jne    c000b75f <Computer::handleNMI()+0x41>
c000b742:	84 db                	test   bl,bl
c000b744:	78 2d                	js     c000b773 <Computer::handleNMI()+0x55>
c000b746:	58                   	pop    eax
c000b747:	5b                   	pop    ebx
c000b748:	5e                   	pop    esi
c000b749:	c3                   	ret    
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	68 57 11 02 c0       	push   0xc0021157
c000b752:	e8 1f a2 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	f6 c3 40             	test   bl,0x40
c000b75d:	74 e3                	je     c000b742 <Computer::handleNMI()+0x24>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	68 64 11 02 c0       	push   0xc0021164
c000b767:	e8 0a a2 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	84 db                	test   bl,bl
c000b771:	79 d3                	jns    c000b746 <Computer::handleNMI()+0x28>
c000b773:	c7 44 24 10 6e 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc002116e
c000b77b:	5a                   	pop    edx
c000b77c:	5b                   	pop    ebx
c000b77d:	5e                   	pop    esi
c000b77e:	e9 f3 a1 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c000b783:	90                   	nop

c000b784 <Computer::setDiskActivityLight(int, bool)>:
c000b784:	56                   	push   esi
c000b785:	53                   	push   ebx
c000b786:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b78a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b78f:	77 1c                	ja     c000b7ad <Computer::setDiskActivityLight(int, bool)+0x29>
c000b791:	e4 92                	in     al,0x92
c000b793:	bb 40 00 00 00       	mov    ebx,0x40
c000b798:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b79c:	89 da                	mov    edx,ebx
c000b79e:	d3 e2                	shl    edx,cl
c000b7a0:	83 f2 ff             	xor    edx,0xffffffff
c000b7a3:	89 f1                	mov    ecx,esi
c000b7a5:	21 d0                	and    eax,edx
c000b7a7:	d3 e3                	shl    ebx,cl
c000b7a9:	09 d8                	or     eax,ebx
c000b7ab:	e6 92                	out    0x92,al
c000b7ad:	5b                   	pop    ebx
c000b7ae:	5e                   	pop    esi
c000b7af:	c3                   	ret    

c000b7b0 <GDTEntry::setBase(unsigned int)>:
c000b7b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7b8:	89 c1                	mov    ecx,eax
c000b7ba:	c1 e9 10             	shr    ecx,0x10
c000b7bd:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7c1:	c1 e8 18             	shr    eax,0x18
c000b7c4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7c7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <GDTEntry::setLimit(unsigned int)>:
c000b7cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7d4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7d7:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7da:	c1 e8 10             	shr    eax,0x10
c000b7dd:	83 e2 f0             	and    edx,0xfffffff0
c000b7e0:	83 e0 0f             	and    eax,0xf
c000b7e3:	09 d0                	or     eax,edx
c000b7e5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7e8:	c3                   	ret    
c000b7e9:	90                   	nop

c000b7ea <GDT::GDT()>:
c000b7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7fe:	90                   	nop
c000b7ff:	c3                   	ret    

c000b800 <GDT::addEntry(GDTEntry)>:
c000b800:	53                   	push   ebx
c000b801:	83 ec 0c             	sub    esp,0xc
c000b804:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b808:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b80a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b811:	52                   	push   edx
c000b812:	50                   	push   eax
c000b813:	68 a8 11 02 c0       	push   0xc00211a8
c000b818:	e8 2a 39 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000b81d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b823:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b827:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b82b:	8d 50 01             	lea    edx,[eax+0x1]
c000b82e:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b832:	89 13                	mov    DWORD PTR [ebx],edx
c000b834:	c1 e0 03             	shl    eax,0x3
c000b837:	83 c4 18             	add    esp,0x18
c000b83a:	5b                   	pop    ebx
c000b83b:	c3                   	ret    

c000b83c <GDT::getNumberOfEntries()>:
c000b83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b840:	8b 00                	mov    eax,DWORD PTR [eax]
c000b842:	c3                   	ret    
c000b843:	90                   	nop

c000b844 <GDT::flush()>:
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	83 c0 04             	add    eax,0x4
c000b84b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b84e:	a3 b2 45 02 c0       	mov    ds:0xc00245b2,eax
c000b853:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b85a:	66 89 15 b0 45 02 c0 	mov    WORD PTR ds:0xc00245b0,dx
c000b861:	e9 7f 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b866 <GDT::setup()>:
c000b866:	55                   	push   ebp
c000b867:	57                   	push   edi
c000b868:	56                   	push   esi
c000b869:	53                   	push   ebx
c000b86a:	83 ec 3c             	sub    esp,0x3c
c000b86d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b871:	6a 00                	push   0x0
c000b873:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b877:	53                   	push   ebx
c000b878:	e8 33 ff ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b87d:	6a 00                	push   0x0
c000b87f:	53                   	push   ebx
c000b880:	e8 47 ff ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b885:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b88d:	6a 00                	push   0x0
c000b88f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b893:	53                   	push   ebx
c000b894:	e8 17 ff ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b899:	68 ff ff ff 00       	push   0xffffff
c000b89e:	53                   	push   ebx
c000b89f:	e8 28 ff ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b8a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8a8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ad:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8b6:	83 c4 20             	add    esp,0x20
c000b8b9:	6a 00                	push   0x0
c000b8bb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8bf:	53                   	push   ebx
c000b8c0:	e8 eb fe ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b8c5:	68 ff ff ff 00       	push   0xffffff
c000b8ca:	53                   	push   ebx
c000b8cb:	e8 fc fe ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b8d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8d4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8d8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8dd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8e1:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8e6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8ee:	89 d8                	mov    eax,ebx
c000b8f0:	80 cc 60             	or     ah,0x60
c000b8f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b8fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b8ff:	83 c4 0c             	add    esp,0xc
c000b902:	89 f8                	mov    eax,edi
c000b904:	80 cc 60             	or     ah,0x60
c000b907:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90f:	89 c7                	mov    edi,eax
c000b911:	55                   	push   ebp
c000b912:	e8 e9 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b917:	83 c4 0c             	add    esp,0xc
c000b91a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b91e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b922:	55                   	push   ebp
c000b923:	e8 d8 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b928:	83 c4 0c             	add    esp,0xc
c000b92b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b92f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b933:	55                   	push   ebp
c000b934:	e8 c7 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b939:	83 c4 0c             	add    esp,0xc
c000b93c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b944:	53                   	push   ebx
c000b945:	51                   	push   ecx
c000b946:	55                   	push   ebp
c000b947:	e8 b4 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b94c:	83 c4 0c             	add    esp,0xc
c000b94f:	57                   	push   edi
c000b950:	56                   	push   esi
c000b951:	55                   	push   ebp
c000b952:	e8 a9 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b957:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b95a:	e8 e5 fe ff ff       	call   c000b844 <GDT::flush()>
c000b95f:	83 c4 4c             	add    esp,0x4c
c000b962:	5b                   	pop    ebx
c000b963:	5e                   	pop    esi
c000b964:	5f                   	pop    edi
c000b965:	5d                   	pop    ebp
c000b966:	c3                   	ret    

c000b967 <idleFunction(void*)>:
c000b967:	53                   	push   ebx
c000b968:	83 ec 08             	sub    esp,0x8
c000b96b:	e8 f5 cf 00 00       	call   c0018965 <unlockScheduler()>
c000b970:	e8 95 8e 00 00       	call   c001480a <thisCPU()>
c000b975:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b97c:	74 41                	je     c000b9bf <idleFunction(void*)+0x58>
c000b97e:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c000b983:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b98a:	74 33                	je     c000b9bf <idleFunction(void*)+0x58>
c000b98c:	52                   	push   edx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	52                   	push   edx
c000b990:	68 e1 00 00 00       	push   0xe1
c000b995:	50                   	push   eax
c000b996:	e8 db fb ff ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c000b99b:	53                   	push   ebx
c000b99c:	83 e0 02             	and    eax,0x2
c000b99f:	50                   	push   eax
c000b9a0:	68 e1 00 00 00       	push   0xe1
c000b9a5:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c000b9ab:	e8 f2 fb ff ff       	call   c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9b0:	83 c4 20             	add    esp,0x20
c000b9b3:	e8 4a 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9b8:	e8 03 3d 01 00       	call   c001f6c0 <idleCommon()>
c000b9bd:	eb f4                	jmp    c000b9b3 <idleFunction(void*)+0x4c>
c000b9bf:	fb                   	sti    
c000b9c0:	f4                   	hlt    
c000b9c1:	e8 fa 3c 01 00       	call   c001f6c0 <idleCommon()>
c000b9c6:	eb f7                	jmp    c000b9bf <idleFunction(void*)+0x58>

c000b9c8 <IDTEntry::IDTEntry(bool)>:
c000b9c8:	83 ec 04             	sub    esp,0x4
c000b9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9cf:	88 04 24             	mov    BYTE PTR [esp],al
c000b9d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9d6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9eb:	83 e2 f0             	and    edx,0xfffffff0
c000b9ee:	83 ca 0e             	or     edx,0xe
c000b9f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9fb:	83 e2 ef             	and    edx,0xffffffef
c000b9fe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba01:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba05:	74 04                	je     c000ba0b <IDTEntry::IDTEntry(bool)+0x43>
c000ba07:	b2 03                	mov    dl,0x3
c000ba09:	eb 02                	jmp    c000ba0d <IDTEntry::IDTEntry(bool)+0x45>
c000ba0b:	b2 00                	mov    dl,0x0
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	83 e2 03             	and    edx,0x3
c000ba14:	88 d1                	mov    cl,dl
c000ba16:	c1 e1 05             	shl    ecx,0x5
c000ba19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba1c:	83 e2 9f             	and    edx,0xffffff9f
c000ba1f:	09 ca                	or     edx,ecx
c000ba21:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba28:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2b:	83 ca 80             	or     edx,0xffffff80
c000ba2e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba31:	90                   	nop
c000ba32:	83 c4 04             	add    esp,0x4
c000ba35:	c3                   	ret    

c000ba36 <IDTEntry::setOffset(unsigned int)>:
c000ba36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3e:	66 89 02             	mov    WORD PTR [edx],ax
c000ba41:	c1 e8 10             	shr    eax,0x10
c000ba44:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <IDT::IDT()>:
c000ba4a:	90                   	nop
c000ba4b:	c3                   	ret    

c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba50:	83 c0 30             	add    eax,0x30
c000ba53:	c3                   	ret    

c000ba54 <IDT::addEntry(IDTEntry, int)>:
c000ba54:	53                   	push   ebx
c000ba55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba65:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba68:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba6c:	5b                   	pop    ebx
c000ba6d:	c3                   	ret    

c000ba6e <IDT::addEntry(int, void (*)(), bool)>:
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 10             	sub    esp,0x10
c000ba72:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba77:	50                   	push   eax
c000ba78:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba7c:	53                   	push   ebx
c000ba7d:	e8 46 ff ff ff       	call   c000b9c8 <IDTEntry::IDTEntry(bool)>
c000ba82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba86:	53                   	push   ebx
c000ba87:	e8 aa ff ff ff       	call   c000ba36 <IDTEntry::setOffset(unsigned int)>
c000ba8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba9c:	e8 b3 ff ff ff       	call   c000ba54 <IDT::addEntry(IDTEntry, int)>
c000baa1:	83 c4 30             	add    esp,0x30
c000baa4:	5b                   	pop    ebx
c000baa5:	c3                   	ret    

c000baa6 <IDT::flush()>:
c000baa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baaa:	66 c7 05 b8 45 02 c0 ff 07 	mov    WORD PTR ds:0xc00245b8,0x7ff
c000bab3:	a3 ba 45 02 c0       	mov    ds:0xc00245ba,eax
c000bab8:	0f 01 1d b8 45 02 c0 	lidtd  ds:0xc00245b8
c000babf:	c3                   	ret    

c000bac0 <IDT::setup()>:
c000bac0:	57                   	push   edi
c000bac1:	56                   	push   esi
c000bac2:	53                   	push   ebx
c000bac3:	83 ec 10             	sub    esp,0x10
c000bac6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000baca:	6a 00                	push   0x0
c000bacc:	68 05 04 00 c0       	push   0xc0000405
c000bad1:	6a 00                	push   0x0
c000bad3:	53                   	push   ebx
c000bad4:	e8 95 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bad9:	6a 00                	push   0x0
c000badb:	68 15 04 00 c0       	push   0xc0000415
c000bae0:	6a 01                	push   0x1
c000bae2:	53                   	push   ebx
c000bae3:	e8 86 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bae8:	83 c4 20             	add    esp,0x20
c000baeb:	6a 00                	push   0x0
c000baed:	68 1f 04 00 c0       	push   0xc000041f
c000baf2:	6a 02                	push   0x2
c000baf4:	53                   	push   ebx
c000baf5:	e8 74 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bafa:	6a 00                	push   0x0
c000bafc:	68 29 04 00 c0       	push   0xc0000429
c000bb01:	6a 03                	push   0x3
c000bb03:	53                   	push   ebx
c000bb04:	e8 65 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb09:	83 c4 20             	add    esp,0x20
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 33 04 00 c0       	push   0xc0000433
c000bb13:	6a 04                	push   0x4
c000bb15:	53                   	push   ebx
c000bb16:	e8 53 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	6a 00                	push   0x0
c000bb1d:	68 3d 04 00 c0       	push   0xc000043d
c000bb22:	6a 05                	push   0x5
c000bb24:	53                   	push   ebx
c000bb25:	e8 44 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb2a:	83 c4 20             	add    esp,0x20
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 47 04 00 c0       	push   0xc0000447
c000bb34:	6a 06                	push   0x6
c000bb36:	53                   	push   ebx
c000bb37:	e8 32 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	6a 00                	push   0x0
c000bb3e:	68 51 04 00 c0       	push   0xc0000451
c000bb43:	6a 07                	push   0x7
c000bb45:	53                   	push   ebx
c000bb46:	e8 23 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb4b:	83 c4 20             	add    esp,0x20
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 5b 04 00 c0       	push   0xc000045b
c000bb55:	6a 08                	push   0x8
c000bb57:	53                   	push   ebx
c000bb58:	e8 11 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	6a 00                	push   0x0
c000bb5f:	68 63 04 00 c0       	push   0xc0000463
c000bb64:	6a 09                	push   0x9
c000bb66:	53                   	push   ebx
c000bb67:	e8 02 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb6c:	83 c4 20             	add    esp,0x20
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 6d 04 00 c0       	push   0xc000046d
c000bb76:	6a 0a                	push   0xa
c000bb78:	53                   	push   ebx
c000bb79:	e8 f0 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	6a 00                	push   0x0
c000bb80:	68 75 04 00 c0       	push   0xc0000475
c000bb85:	6a 0b                	push   0xb
c000bb87:	53                   	push   ebx
c000bb88:	e8 e1 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb8d:	83 c4 20             	add    esp,0x20
c000bb90:	6a 00                	push   0x0
c000bb92:	68 7d 04 00 c0       	push   0xc000047d
c000bb97:	6a 0c                	push   0xc
c000bb99:	53                   	push   ebx
c000bb9a:	e8 cf fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	6a 00                	push   0x0
c000bba1:	68 85 04 00 c0       	push   0xc0000485
c000bba6:	6a 0d                	push   0xd
c000bba8:	53                   	push   ebx
c000bba9:	e8 c0 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbae:	83 c4 20             	add    esp,0x20
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 8d 04 00 c0       	push   0xc000048d
c000bbb8:	6a 0e                	push   0xe
c000bbba:	53                   	push   ebx
c000bbbb:	e8 ae fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 95 04 00 c0       	push   0xc0000495
c000bbc7:	6a 0f                	push   0xf
c000bbc9:	53                   	push   ebx
c000bbca:	e8 9f fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbcf:	83 c4 20             	add    esp,0x20
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 9f 04 00 c0       	push   0xc000049f
c000bbd9:	6a 10                	push   0x10
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 8d fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	6a 00                	push   0x0
c000bbe3:	68 a9 04 00 c0       	push   0xc00004a9
c000bbe8:	6a 11                	push   0x11
c000bbea:	53                   	push   ebx
c000bbeb:	e8 7e fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbf0:	83 c4 20             	add    esp,0x20
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 b3 04 00 c0       	push   0xc00004b3
c000bbfa:	6a 12                	push   0x12
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 6c fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	6a 01                	push   0x1
c000bc04:	68 bd 04 00 c0       	push   0xc00004bd
c000bc09:	6a 60                	push   0x60
c000bc0b:	53                   	push   ebx
c000bc0c:	e8 5d fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc11:	83 c4 20             	add    esp,0x20
c000bc14:	6a 00                	push   0x0
c000bc16:	68 c7 04 00 c0       	push   0xc00004c7
c000bc1b:	6a 20                	push   0x20
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 4b fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	6a 00                	push   0x0
c000bc25:	68 d1 04 00 c0       	push   0xc00004d1
c000bc2a:	6a 21                	push   0x21
c000bc2c:	53                   	push   ebx
c000bc2d:	e8 3c fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc32:	83 c4 20             	add    esp,0x20
c000bc35:	6a 00                	push   0x0
c000bc37:	68 db 04 00 c0       	push   0xc00004db
c000bc3c:	6a 22                	push   0x22
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 2a fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	6a 00                	push   0x0
c000bc46:	68 e5 04 00 c0       	push   0xc00004e5
c000bc4b:	6a 23                	push   0x23
c000bc4d:	53                   	push   ebx
c000bc4e:	e8 1b fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc53:	83 c4 20             	add    esp,0x20
c000bc56:	6a 00                	push   0x0
c000bc58:	68 ef 04 00 c0       	push   0xc00004ef
c000bc5d:	6a 24                	push   0x24
c000bc5f:	53                   	push   ebx
c000bc60:	e8 09 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	6a 00                	push   0x0
c000bc67:	68 f9 04 00 c0       	push   0xc00004f9
c000bc6c:	6a 25                	push   0x25
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 fa fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc74:	83 c4 20             	add    esp,0x20
c000bc77:	6a 00                	push   0x0
c000bc79:	68 03 05 00 c0       	push   0xc0000503
c000bc7e:	6a 26                	push   0x26
c000bc80:	53                   	push   ebx
c000bc81:	e8 e8 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	6a 00                	push   0x0
c000bc88:	68 0d 05 00 c0       	push   0xc000050d
c000bc8d:	6a 27                	push   0x27
c000bc8f:	53                   	push   ebx
c000bc90:	e8 d9 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc95:	83 c4 20             	add    esp,0x20
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 17 05 00 c0       	push   0xc0000517
c000bc9f:	6a 28                	push   0x28
c000bca1:	53                   	push   ebx
c000bca2:	e8 c7 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	6a 00                	push   0x0
c000bca9:	68 21 05 00 c0       	push   0xc0000521
c000bcae:	6a 29                	push   0x29
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 b8 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcb6:	83 c4 20             	add    esp,0x20
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 2b 05 00 c0       	push   0xc000052b
c000bcc0:	6a 2a                	push   0x2a
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 a6 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	6a 00                	push   0x0
c000bcca:	68 35 05 00 c0       	push   0xc0000535
c000bccf:	6a 2b                	push   0x2b
c000bcd1:	53                   	push   ebx
c000bcd2:	e8 97 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcd7:	83 c4 20             	add    esp,0x20
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 3f 05 00 c0       	push   0xc000053f
c000bce1:	6a 2c                	push   0x2c
c000bce3:	53                   	push   ebx
c000bce4:	e8 85 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	6a 00                	push   0x0
c000bceb:	68 49 05 00 c0       	push   0xc0000549
c000bcf0:	6a 2d                	push   0x2d
c000bcf2:	53                   	push   ebx
c000bcf3:	e8 76 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcf8:	83 c4 20             	add    esp,0x20
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 53 05 00 c0       	push   0xc0000553
c000bd02:	6a 2e                	push   0x2e
c000bd04:	53                   	push   ebx
c000bd05:	e8 64 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	6a 00                	push   0x0
c000bd0c:	68 5d 05 00 c0       	push   0xc000055d
c000bd11:	6a 2f                	push   0x2f
c000bd13:	53                   	push   ebx
c000bd14:	e8 55 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd19:	83 c4 20             	add    esp,0x20
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 67 05 00 c0       	push   0xc0000567
c000bd23:	6a 30                	push   0x30
c000bd25:	53                   	push   ebx
c000bd26:	e8 43 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	6a 00                	push   0x0
c000bd2d:	68 71 05 00 c0       	push   0xc0000571
c000bd32:	6a 31                	push   0x31
c000bd34:	53                   	push   ebx
c000bd35:	e8 34 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd3a:	83 c4 20             	add    esp,0x20
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 7b 05 00 c0       	push   0xc000057b
c000bd44:	6a 32                	push   0x32
c000bd46:	53                   	push   ebx
c000bd47:	e8 22 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	6a 00                	push   0x0
c000bd4e:	68 85 05 00 c0       	push   0xc0000585
c000bd53:	6a 33                	push   0x33
c000bd55:	53                   	push   ebx
c000bd56:	e8 13 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd5b:	83 c4 20             	add    esp,0x20
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 8f 05 00 c0       	push   0xc000058f
c000bd65:	6a 34                	push   0x34
c000bd67:	53                   	push   ebx
c000bd68:	e8 01 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	6a 00                	push   0x0
c000bd6f:	68 99 05 00 c0       	push   0xc0000599
c000bd74:	6a 35                	push   0x35
c000bd76:	53                   	push   ebx
c000bd77:	e8 f2 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd7c:	83 c4 20             	add    esp,0x20
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 a3 05 00 c0       	push   0xc00005a3
c000bd86:	6a 36                	push   0x36
c000bd88:	53                   	push   ebx
c000bd89:	e8 e0 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	6a 00                	push   0x0
c000bd90:	68 ad 05 00 c0       	push   0xc00005ad
c000bd95:	6a 37                	push   0x37
c000bd97:	53                   	push   ebx
c000bd98:	e8 d1 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd9d:	83 c4 20             	add    esp,0x20
c000bda0:	e8 14 25 00 00       	call   c000e2b9 <Virt::getAKernelVAS()>
c000bda5:	52                   	push   edx
c000bda6:	6a 03                	push   0x3
c000bda8:	6a 02                	push   0x2
c000bdaa:	50                   	push   eax
c000bdab:	e8 4a 2b 00 00       	call   c000e8fa <VAS::allocatePages(int, int)>
c000bdb0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdb7:	89 c6                	mov    esi,eax
c000bdb9:	e8 54 32 00 00       	call   c000f012 <operator new(unsigned long)>
c000bdbe:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdc4:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc7:	89 c7                	mov    edi,eax
c000bdc9:	e8 ee 1c 00 00       	call   c000dabc <TSS::TSS()>
c000bdce:	83 c4 0c             	add    esp,0xc
c000bdd1:	68 5b 04 00 c0       	push   0xc000045b
c000bdd6:	56                   	push   esi
c000bdd7:	57                   	push   edi
c000bdd8:	e8 1f 1d 00 00       	call   c000dafc <TSS::setup(unsigned long, unsigned long)>
c000bddd:	59                   	pop    ecx
c000bdde:	89 c6                	mov    esi,eax
c000bde0:	5f                   	pop    edi
c000bde1:	6a 00                	push   0x0
c000bde3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bde7:	50                   	push   eax
c000bde8:	e8 db fb ff ff       	call   c000b9c8 <IDTEntry::IDTEntry(bool)>
c000bded:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdf1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdf6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bdfc:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be03:	80 ce 05             	or     dh,0x5
c000be06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be0e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be15:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be1b:	e8 86 fc ff ff       	call   c000baa6 <IDT::flush()>
c000be20:	83 c4 20             	add    esp,0x20
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	c3                   	ret    

c000be27 <sbrk>:
c000be27:	55                   	push   ebp
c000be28:	57                   	push   edi
c000be29:	56                   	push   esi
c000be2a:	53                   	push   ebx
c000be2b:	83 ec 1c             	sub    esp,0x1c
c000be2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be32:	85 db                	test   ebx,ebx
c000be34:	a1 c0 39 02 c0       	mov    eax,ds:0xc00239c0
c000be39:	0f 84 e4 00 00 00    	je     c000bf23 <sbrk+0xfc>
c000be3f:	78 3d                	js     c000be7e <sbrk+0x57>
c000be41:	e8 c4 89 00 00       	call   c001480a <thisCPU()>
c000be46:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be4c:	83 e0 01             	and    eax,0x1
c000be4f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be53:	a1 c0 39 02 c0       	mov    eax,ds:0xc00239c0
c000be58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be5c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be62:	89 d8                	mov    eax,ebx
c000be64:	c1 f8 1f             	sar    eax,0x1f
c000be67:	25 ff 0f 00 00       	and    eax,0xfff
c000be6c:	01 c3                	add    ebx,eax
c000be6e:	c1 fb 0c             	sar    ebx,0xc
c000be71:	89 df                	mov    edi,ebx
c000be73:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be77:	be 00 00 00 00       	mov    esi,0x0
c000be7c:	eb 2a                	jmp    c000bea8 <sbrk+0x81>
c000be7e:	83 ec 08             	sub    esp,0x8
c000be81:	53                   	push   ebx
c000be82:	68 c4 11 02 c0       	push   0xc00211c4
c000be87:	e8 bb 32 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be94:	e9 8a 00 00 00       	jmp    c000bf23 <sbrk+0xfc>
c000be99:	81 05 c0 39 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00239c0,0x1000
c000bea3:	46                   	inc    esi
c000bea4:	39 f7                	cmp    edi,esi
c000bea6:	74 34                	je     c000bedc <sbrk+0xb5>
c000bea8:	e8 0c 24 00 00       	call   c000e2b9 <Virt::getAKernelVAS()>
c000bead:	89 c3                	mov    ebx,eax
c000beaf:	8b 2d c0 39 02 c0    	mov    ebp,DWORD PTR ds:0xc00239c0
c000beb5:	e8 f5 06 00 00       	call   c000c5af <Phys::allocatePage()>
c000beba:	68 01 04 00 00       	push   0x401
c000bebf:	55                   	push   ebp
c000bec0:	50                   	push   eax
c000bec1:	53                   	push   ebx
c000bec2:	e8 31 29 00 00       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000becf:	74 c8                	je     c000be99 <sbrk+0x72>
c000bed1:	8b 1d c0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239c0
c000bed7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beda:	eb bd                	jmp    c000be99 <sbrk+0x72>
c000bedc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee1:	74 48                	je     c000bf2b <sbrk+0x104>
c000bee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bee7:	89 d3                	mov    ebx,edx
c000bee9:	c1 eb 0a             	shr    ebx,0xa
c000beec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bef2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bef8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000befc:	c1 e0 0c             	shl    eax,0xc
c000beff:	01 d0                	add    eax,edx
c000bf01:	c1 e8 0a             	shr    eax,0xa
c000bf04:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf09:	2d 00 00 40 00       	sub    eax,0x400000
c000bf0e:	39 c3                	cmp    ebx,eax
c000bf10:	77 0d                	ja     c000bf1f <sbrk+0xf8>
c000bf12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf15:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf1b:	39 d8                	cmp    eax,ebx
c000bf1d:	73 f3                	jae    c000bf12 <sbrk+0xeb>
c000bf1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf23:	83 c4 1c             	add    esp,0x1c
c000bf26:	5b                   	pop    ebx
c000bf27:	5e                   	pop    esi
c000bf28:	5f                   	pop    edi
c000bf29:	5d                   	pop    ebp
c000bf2a:	c3                   	ret    
c000bf2b:	e8 a5 37 01 00       	call   c001f6d5 <CPU::readCR3()>
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	50                   	push   eax
c000bf34:	e8 ae 37 01 00       	call   c001f6e7 <CPU::writeCR3(unsigned long)>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	eb e1                	jmp    c000bf1f <sbrk+0xf8>

c000bf3e <mmap>:
c000bf3e:	83 ec 18             	sub    esp,0x18
c000bf41:	68 f4 11 02 c0       	push   0xc00211f4
c000bf46:	e8 2b 9a 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000bf4b:	b8 00 00 00 00       	mov    eax,0x0
c000bf50:	83 c4 1c             	add    esp,0x1c
c000bf53:	c3                   	ret    

c000bf54 <munmap>:
c000bf54:	83 ec 18             	sub    esp,0x18
c000bf57:	68 f9 11 02 c0       	push   0xc00211f9
c000bf5c:	e8 15 9a 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000bf61:	b8 00 00 00 00       	mov    eax,0x0
c000bf66:	83 c4 1c             	add    esp,0x1c
c000bf69:	c3                   	ret    

c000bf6a <liballoc_lock()>:
c000bf6a:	83 ec 0c             	sub    esp,0xc
c000bf6d:	e8 f1 c9 00 00       	call   c0018963 <lockScheduler()>
c000bf72:	b8 00 00 00 00       	mov    eax,0x0
c000bf77:	83 c4 0c             	add    esp,0xc
c000bf7a:	c3                   	ret    

c000bf7b <liballoc_unlock()>:
c000bf7b:	83 ec 0c             	sub    esp,0xc
c000bf7e:	e8 e2 c9 00 00       	call   c0018965 <unlockScheduler()>
c000bf83:	b8 00 00 00 00       	mov    eax,0x0
c000bf88:	83 c4 0c             	add    esp,0xc
c000bf8b:	c3                   	ret    

c000bf8c <liballoc_alloc(int)>:
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	e8 25 23 00 00       	call   c000e2b9 <Virt::getAKernelVAS()>
c000bf94:	83 ec 04             	sub    esp,0x4
c000bf97:	6a 01                	push   0x1
c000bf99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf9d:	50                   	push   eax
c000bf9e:	e8 57 29 00 00       	call   c000e8fa <VAS::allocatePages(int, int)>
c000bfa3:	83 c4 1c             	add    esp,0x1c
c000bfa6:	c3                   	ret    

c000bfa7 <liballoc_free(void*, int)>:
c000bfa7:	83 ec 0c             	sub    esp,0xc
c000bfaa:	e8 0a 23 00 00       	call   c000e2b9 <Virt::getAKernelVAS()>
c000bfaf:	83 ec 08             	sub    esp,0x8
c000bfb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb6:	50                   	push   eax
c000bfb7:	e8 de 25 00 00       	call   c000e59a <VAS::freeAllocatedPages(unsigned long)>
c000bfbc:	b8 00 00 00 00       	mov    eax,0x0
c000bfc1:	83 c4 1c             	add    esp,0x1c
c000bfc4:	c3                   	ret    

c000bfc5 <realloc>:
c000bfc5:	83 ec 14             	sub    esp,0x14
c000bfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd0:	e8 63 54 ff ff       	call   c0001438 <dlrealloc>
c000bfd5:	83 c4 1c             	add    esp,0x1c
c000bfd8:	c3                   	ret    

c000bfd9 <malloc>:
c000bfd9:	83 ec 18             	sub    esp,0x18
c000bfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe0:	e8 16 4f ff ff       	call   c0000efb <dlmalloc>
c000bfe5:	83 c4 1c             	add    esp,0x1c
c000bfe8:	c3                   	ret    

c000bfe9 <free>:
c000bfe9:	83 ec 18             	sub    esp,0x18
c000bfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff0:	e8 a8 4b ff ff       	call   c0000b9d <dlfree>
c000bff5:	83 c4 1c             	add    esp,0x1c
c000bff8:	c3                   	ret    

c000bff9 <rfree>:
c000bff9:	83 ec 18             	sub    esp,0x18
c000bffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c000:	e8 e4 ff ff ff       	call   c000bfe9 <free>
c000c005:	83 c4 1c             	add    esp,0x1c
c000c008:	c3                   	ret    

c000c009 <calloc>:
c000c009:	56                   	push   esi
c000c00a:	53                   	push   ebx
c000c00b:	83 ec 10             	sub    esp,0x10
c000c00e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c012:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c017:	53                   	push   ebx
c000c018:	e8 bc ff ff ff       	call   c000bfd9 <malloc>
c000c01d:	89 c6                	mov    esi,eax
c000c01f:	83 c4 0c             	add    esp,0xc
c000c022:	53                   	push   ebx
c000c023:	6a 00                	push   0x0
c000c025:	50                   	push   eax
c000c026:	e8 8f 46 ff ff       	call   c00006ba <memset>
c000c02b:	89 f0                	mov    eax,esi
c000c02d:	83 c4 14             	add    esp,0x14
c000c030:	5b                   	pop    ebx
c000c031:	5e                   	pop    esi
c000c032:	c3                   	ret    

c000c033 <hwTextMode_loadInData(VgaText*)>:
c000c033:	57                   	push   edi
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c03a:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c040:	85 c0                	test   eax,eax
c000c042:	7e 30                	jle    c000c074 <hwTextMode_loadInData(VgaText*)+0x41>
c000c044:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c047:	31 f6                	xor    esi,esi
c000c049:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c04c:	31 c0                	xor    eax,eax
c000c04e:	c1 e1 05             	shl    ecx,0x5
c000c051:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c057:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c05b:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c05f:	40                   	inc    eax
c000c060:	83 f8 50             	cmp    eax,0x50
c000c063:	75 f2                	jne    c000c057 <hwTextMode_loadInData(VgaText*)+0x24>
c000c065:	46                   	inc    esi
c000c066:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c06c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c072:	7f d5                	jg     c000c049 <hwTextMode_loadInData(VgaText*)+0x16>
c000c074:	5b                   	pop    ebx
c000c075:	5e                   	pop    esi
c000c076:	5f                   	pop    edi
c000c077:	c3                   	ret    

c000c078 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c078:	56                   	push   esi
c000c079:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c07e:	53                   	push   ebx
c000c07f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c083:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c087:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c08d:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c093:	c1 e0 04             	shl    eax,0x4
c000c096:	83 e6 0f             	and    esi,0xf
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	83 c2 02             	add    edx,0x2
c000c0a1:	09 f0                	or     eax,esi
c000c0a3:	41                   	inc    ecx
c000c0a4:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0a8:	c1 e0 08             	shl    eax,0x8
c000c0ab:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0b1:	09 f0                	or     eax,esi
c000c0b3:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0b7:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0bd:	75 c8                	jne    c000c087 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0bf:	5b                   	pop    ebx
c000c0c0:	5e                   	pop    esi
c000c0c1:	c3                   	ret    

c000c0c2 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0c2:	56                   	push   esi
c000c0c3:	53                   	push   ebx
c000c0c4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0c9:	74 38                	je     c000c103 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0cb:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0d0:	b0 0a                	mov    al,0xa
c000c0d2:	89 da                	mov    edx,ebx
c000c0d4:	ee                   	out    dx,al
c000c0d5:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0da:	89 ca                	mov    edx,ecx
c000c0dc:	ec                   	in     al,dx
c000c0dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0e1:	b2 0f                	mov    dl,0xf
c000c0e3:	83 e0 c0             	and    eax,0xffffffc0
c000c0e6:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0ec:	09 d0                	or     eax,edx
c000c0ee:	89 ca                	mov    edx,ecx
c000c0f0:	ee                   	out    dx,al
c000c0f1:	b0 0b                	mov    al,0xb
c000c0f3:	89 da                	mov    edx,ebx
c000c0f5:	ee                   	out    dx,al
c000c0f6:	89 ca                	mov    edx,ecx
c000c0f8:	ec                   	in     al,dx
c000c0f9:	83 e0 e0             	and    eax,0xffffffe0
c000c0fc:	83 c8 0f             	or     eax,0xf
c000c0ff:	ee                   	out    dx,al
c000c100:	5b                   	pop    ebx
c000c101:	5e                   	pop    esi
c000c102:	c3                   	ret    
c000c103:	b0 0a                	mov    al,0xa
c000c105:	ba d4 03 00 00       	mov    edx,0x3d4
c000c10a:	ee                   	out    dx,al
c000c10b:	b0 20                	mov    al,0x20
c000c10d:	ba d5 03 00 00       	mov    edx,0x3d5
c000c112:	ee                   	out    dx,al
c000c113:	5b                   	pop    ebx
c000c114:	5e                   	pop    esi
c000c115:	c3                   	ret    

c000c116 <hwTextMode_update(VgaText*)>:
c000c116:	c3                   	ret    

c000c117 <hwTextMode_updateCursor(VgaText*)>:
c000c117:	56                   	push   esi
c000c118:	b9 19 00 00 00       	mov    ecx,0x19
c000c11d:	53                   	push   ebx
c000c11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c122:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c128:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c12e:	29 d1                	sub    ecx,edx
c000c130:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c136:	01 d9                	add    ecx,ebx
c000c138:	b0 0f                	mov    al,0xf
c000c13a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c13d:	c1 e1 04             	shl    ecx,0x4
c000c140:	01 f1                	add    ecx,esi
c000c142:	be d4 03 00 00       	mov    esi,0x3d4
c000c147:	89 f2                	mov    edx,esi
c000c149:	ee                   	out    dx,al
c000c14a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c14f:	88 c8                	mov    al,cl
c000c151:	89 da                	mov    edx,ebx
c000c153:	ee                   	out    dx,al
c000c154:	b0 0e                	mov    al,0xe
c000c156:	89 f2                	mov    edx,esi
c000c158:	ee                   	out    dx,al
c000c159:	89 c8                	mov    eax,ecx
c000c15b:	89 da                	mov    edx,ebx
c000c15d:	66 c1 e8 08          	shr    ax,0x8
c000c161:	ee                   	out    dx,al
c000c162:	5b                   	pop    ebx
c000c163:	5e                   	pop    esi
c000c164:	c3                   	ret    

c000c165 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c165:	ba da 03 00 00       	mov    edx,0x3da
c000c16a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c16f:	75 18                	jne    c000c189 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c171:	ec                   	in     al,dx
c000c172:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c177:	b0 30                	mov    al,0x30
c000c179:	89 ca                	mov    edx,ecx
c000c17b:	ee                   	out    dx,al
c000c17c:	ba c1 03 00 00       	mov    edx,0x3c1
c000c181:	ec                   	in     al,dx
c000c182:	83 c8 08             	or     eax,0x8
c000c185:	89 ca                	mov    edx,ecx
c000c187:	ee                   	out    dx,al
c000c188:	c3                   	ret    
c000c189:	ec                   	in     al,dx
c000c18a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c18f:	b0 30                	mov    al,0x30
c000c191:	89 ca                	mov    edx,ecx
c000c193:	ee                   	out    dx,al
c000c194:	ba c1 03 00 00       	mov    edx,0x3c1
c000c199:	ec                   	in     al,dx
c000c19a:	83 e0 f7             	and    eax,0xfffffff7
c000c19d:	89 ca                	mov    edx,ecx
c000c19f:	ee                   	out    dx,al
c000c1a0:	c3                   	ret    

c000c1a1 <hwTextMode_scrollScreen(VgaText*)>:
c000c1a1:	55                   	push   ebp
c000c1a2:	bd 02 00 00 00       	mov    ebp,0x2
c000c1a7:	57                   	push   edi
c000c1a8:	56                   	push   esi
c000c1a9:	53                   	push   ebx
c000c1aa:	83 ec 1c             	sub    esp,0x1c
c000c1ad:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1b9:	31 c0                	xor    eax,eax
c000c1bb:	eb 0b                	jmp    c000c1c8 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1bd:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1c3:	74 58                	je     c000c21d <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1c5:	43                   	inc    ebx
c000c1c6:	89 f0                	mov    eax,esi
c000c1c8:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1ce:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1d4:	88 13                	mov    BYTE PTR [ebx],dl
c000c1d6:	8d 70 01             	lea    esi,[eax+0x1]
c000c1d9:	83 fd 18             	cmp    ebp,0x18
c000c1dc:	75 df                	jne    c000c1bd <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1de:	a8 01                	test   al,0x1
c000c1e0:	75 13                	jne    c000c1f5 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1e2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1e5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1eb:	75 d8                	jne    c000c1c5 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1ed:	83 c4 1c             	add    esp,0x1c
c000c1f0:	5b                   	pop    ebx
c000c1f1:	5e                   	pop    esi
c000c1f2:	5f                   	pop    edi
c000c1f3:	5d                   	pop    ebp
c000c1f4:	c3                   	ret    
c000c1f5:	52                   	push   edx
c000c1f6:	31 c0                	xor    eax,eax
c000c1f8:	52                   	push   edx
c000c1f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c1fd:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c203:	50                   	push   eax
c000c204:	31 c0                	xor    eax,eax
c000c206:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c20a:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c210:	50                   	push   eax
c000c211:	e8 84 0b 00 00       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	88 07                	mov    BYTE PTR [edi],al
c000c21b:	eb c8                	jmp    c000c1e5 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c21d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c221:	45                   	inc    ebp
c000c222:	05 a0 00 00 00       	add    eax,0xa0
c000c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c22b:	eb 88                	jmp    c000c1b5 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c22d <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c22d:	56                   	push   esi
c000c22e:	31 c0                	xor    eax,eax
c000c230:	53                   	push   ebx
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c238:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c23c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c240:	50                   	push   eax
c000c241:	31 c0                	xor    eax,eax
c000c243:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c247:	50                   	push   eax
c000c248:	e8 4d 0b 00 00       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000c24d:	5a                   	pop    edx
c000c24e:	25 ff 00 00 00       	and    eax,0xff
c000c253:	59                   	pop    ecx
c000c254:	50                   	push   eax
c000c255:	89 f0                	mov    eax,esi
c000c257:	0f be f0             	movsx  esi,al
c000c25a:	56                   	push   esi
c000c25b:	e8 e0 0b 00 00       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000c260:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c264:	ba 19 00 00 00       	mov    edx,0x19
c000c269:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c26f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c272:	29 f2                	sub    edx,esi
c000c274:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c278:	c1 e1 04             	shl    ecx,0x4
c000c27b:	8d 14 92             	lea    edx,[edx+edx*4]
c000c27e:	01 d9                	add    ecx,ebx
c000c280:	c1 e2 04             	shl    edx,0x4
c000c283:	01 ca                	add    edx,ecx
c000c285:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c28d:	83 c4 14             	add    esp,0x14
c000c290:	5b                   	pop    ebx
c000c291:	5e                   	pop    esi
c000c292:	c3                   	ret    

c000c293 <setupTextMode()>:
c000c293:	c7 05 58 46 02 c0 65 c1 00 c0 	mov    DWORD PTR ds:0xc0024658,0xc000c165
c000c29d:	c7 05 44 46 02 c0 33 c0 00 c0 	mov    DWORD PTR ds:0xc0024644,0xc000c033
c000c2a7:	c7 05 40 46 02 c0 78 c0 00 c0 	mov    DWORD PTR ds:0xc0024640,0xc000c078
c000c2b1:	c7 05 4c 46 02 c0 a1 c1 00 c0 	mov    DWORD PTR ds:0xc002464c,0xc000c1a1
c000c2bb:	c7 05 54 46 02 c0 c2 c0 00 c0 	mov    DWORD PTR ds:0xc0024654,0xc000c0c2
c000c2c5:	c7 05 48 46 02 c0 16 c1 00 c0 	mov    DWORD PTR ds:0xc0024648,0xc000c116
c000c2cf:	c7 05 50 46 02 c0 17 c1 00 c0 	mov    DWORD PTR ds:0xc0024650,0xc000c117
c000c2d9:	c7 05 5c 46 02 c0 2d c2 00 c0 	mov    DWORD PTR ds:0xc002465c,0xc000c22d
c000c2e3:	c3                   	ret    

c000c2e4 <kernel_main>:
c000c2e4:	57                   	push   edi
c000c2e5:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2ea:	56                   	push   esi
c000c2eb:	31 f6                	xor    esi,esi
c000c2ed:	53                   	push   ebx
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	e8 fe 08 00 00       	call   c000cbf4 <installVgaTextImplementation()>
c000c2f6:	e8 98 ff ff ff       	call   c000c293 <setupTextMode()>
c000c2fb:	89 f0                	mov    eax,esi
c000c2fd:	89 fa                	mov    edx,edi
c000c2ff:	ee                   	out    dx,al
c000c300:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c305:	b0 80                	mov    al,0x80
c000c307:	89 da                	mov    edx,ebx
c000c309:	ee                   	out    dx,al
c000c30a:	b1 03                	mov    cl,0x3
c000c30c:	ba f8 03 00 00       	mov    edx,0x3f8
c000c311:	88 c8                	mov    al,cl
c000c313:	ee                   	out    dx,al
c000c314:	89 f0                	mov    eax,esi
c000c316:	89 fa                	mov    edx,edi
c000c318:	ee                   	out    dx,al
c000c319:	88 c8                	mov    al,cl
c000c31b:	89 da                	mov    edx,ebx
c000c31d:	ee                   	out    dx,al
c000c31e:	b0 c7                	mov    al,0xc7
c000c320:	ba fa 03 00 00       	mov    edx,0x3fa
c000c325:	ee                   	out    dx,al
c000c326:	b0 0b                	mov    al,0xb
c000c328:	ba fc 03 00 00       	mov    edx,0x3fc
c000c32d:	ee                   	out    dx,al
c000c32e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c333:	83 ec 0c             	sub    esp,0xc
c000c336:	05 ff 0f 00 00       	add    eax,0xfff
c000c33b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c340:	50                   	push   eax
c000c341:	e8 6d 03 00 00       	call   c000c6b3 <Phys::physicalMemorySetup(unsigned int)>
c000c346:	e8 f2 1e 00 00       	call   c000e23d <Virt::virtualMemorySetup()>
c000c34b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c35a:	75 0e                	jne    c000c36a <kernel_main+0x86>
c000c35c:	89 d8                	mov    eax,ebx
c000c35e:	25 48 03 00 00       	and    eax,0x348
c000c363:	3d 00 03 00 00       	cmp    eax,0x300
c000c368:	74 10                	je     c000c37a <kernel_main+0x96>
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	68 27 27 02 c0       	push   0xc0022727
c000c372:	e8 ff 95 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000c377:	83 c4 10             	add    esp,0x10
c000c37a:	83 ec 0c             	sub    esp,0xc
c000c37d:	89 1d c0 45 02 c0    	mov    DWORD PTR ds:0xc00245c0,ebx
c000c383:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c387:	53                   	push   ebx
c000c388:	e8 4d 20 00 00       	call   c000e3da <VAS::VAS()>
c000c38d:	89 1d 04 47 02 c0    	mov    DWORD PTR ds:0xc0024704,ebx
c000c393:	e8 88 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c398:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c39f:	e8 6e 2c 00 00       	call   c000f012 <operator new(unsigned long)>
c000c3a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a7:	89 c6                	mov    esi,eax
c000c3a9:	e8 78 ea ff ff       	call   c000ae26 <Computer::Computer()>
c000c3ae:	6a 00                	push   0x0
c000c3b0:	6a 00                	push   0x0
c000c3b2:	89 35 a8 45 02 c0    	mov    DWORD PTR ds:0xc00245a8,esi
c000c3b8:	6a 00                	push   0x0
c000c3ba:	56                   	push   esi
c000c3bb:	e8 5a f2 ff ff       	call   c000b61a <Computer::open(int, int, void*)>
c000c3c0:	83 c4 14             	add    esp,0x14
c000c3c3:	53                   	push   ebx
c000c3c4:	e8 c3 22 00 00       	call   c000e68c <VAS::~VAS()>
c000c3c9:	c7 04 24 00 12 02 c0 	mov    DWORD PTR [esp],0xc0021200
c000c3d0:	e8 a1 95 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000c3d5:	83 c4 20             	add    esp,0x20
c000c3d8:	5b                   	pop    ebx
c000c3d9:	5e                   	pop    esi
c000c3da:	5f                   	pop    edi
c000c3db:	c3                   	ret    

c000c3dc <Phys::allocateDMA(unsigned long)>:
c000c3dc:	57                   	push   edi
c000c3dd:	31 d2                	xor    edx,edx
c000c3df:	56                   	push   esi
c000c3e0:	31 ff                	xor    edi,edi
c000c3e2:	53                   	push   ebx
c000c3e3:	31 c9                	xor    ecx,ecx
c000c3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e9:	31 f6                	xor    esi,esi
c000c3eb:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f0:	c1 e8 0c             	shr    eax,0xc
c000c3f3:	eb 17                	jmp    c000c40c <Phys::allocateDMA(unsigned long)+0x30>
c000c3f5:	85 c9                	test   ecx,ecx
c000c3f7:	75 04                	jne    c000c3fd <Phys::allocateDMA(unsigned long)+0x21>
c000c3f9:	89 d7                	mov    edi,edx
c000c3fb:	89 d6                	mov    esi,edx
c000c3fd:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c400:	39 d8                	cmp    eax,ebx
c000c402:	74 1f                	je     c000c423 <Phys::allocateDMA(unsigned long)+0x47>
c000c404:	42                   	inc    edx
c000c405:	89 d9                	mov    ecx,ebx
c000c407:	83 fa 2f             	cmp    edx,0x2f
c000c40a:	7f 11                	jg     c000c41d <Phys::allocateDMA(unsigned long)+0x41>
c000c40c:	80 ba 00 46 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdba00],0x0
c000c413:	74 e0                	je     c000c3f5 <Phys::allocateDMA(unsigned long)+0x19>
c000c415:	31 c9                	xor    ecx,ecx
c000c417:	42                   	inc    edx
c000c418:	83 fa 2f             	cmp    edx,0x2f
c000c41b:	7e ef                	jle    c000c40c <Phys::allocateDMA(unsigned long)+0x30>
c000c41d:	5b                   	pop    ebx
c000c41e:	31 c0                	xor    eax,eax
c000c420:	5e                   	pop    esi
c000c421:	5f                   	pop    edi
c000c422:	c3                   	ret    
c000c423:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c427:	89 d3                	mov    ebx,edx
c000c429:	c1 fb 1f             	sar    ebx,0x1f
c000c42c:	83 e3 0f             	and    ebx,0xf
c000c42f:	01 d3                	add    ebx,edx
c000c431:	89 f2                	mov    edx,esi
c000c433:	c1 fb 04             	sar    ebx,0x4
c000c436:	c1 fa 04             	sar    edx,0x4
c000c439:	39 da                	cmp    edx,ebx
c000c43b:	75 30                	jne    c000c46d <Phys::allocateDMA(unsigned long)+0x91>
c000c43d:	85 c0                	test   eax,eax
c000c43f:	74 1b                	je     c000c45c <Phys::allocateDMA(unsigned long)+0x80>
c000c441:	bf 00 46 02 c0       	mov    edi,0xc0024600
c000c446:	8d 96 00 46 02 c0    	lea    edx,[esi-0x3ffdba00]
c000c44c:	83 f7 ff             	xor    edi,0xffffffff
c000c44f:	29 f7                	sub    edi,esi
c000c451:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c454:	42                   	inc    edx
c000c455:	8d 04 17             	lea    eax,[edi+edx*1]
c000c458:	39 c1                	cmp    ecx,eax
c000c45a:	7f f5                	jg     c000c451 <Phys::allocateDMA(unsigned long)+0x75>
c000c45c:	85 db                	test   ebx,ebx
c000c45e:	74 13                	je     c000c473 <Phys::allocateDMA(unsigned long)+0x97>
c000c460:	5b                   	pop    ebx
c000c461:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c467:	c1 e0 0c             	shl    eax,0xc
c000c46a:	5e                   	pop    esi
c000c46b:	5f                   	pop    edi
c000c46c:	c3                   	ret    
c000c46d:	89 fa                	mov    edx,edi
c000c46f:	31 c9                	xor    ecx,ecx
c000c471:	eb a4                	jmp    c000c417 <Phys::allocateDMA(unsigned long)+0x3b>
c000c473:	c1 e6 0c             	shl    esi,0xc
c000c476:	5b                   	pop    ebx
c000c477:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c47d:	5e                   	pop    esi
c000c47e:	5f                   	pop    edi
c000c47f:	c3                   	ret    

c000c480 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c480:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c488:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c48e:	c1 e9 0c             	shr    ecx,0xc
c000c491:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c496:	76 25                	jbe    c000c4bd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c498:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c49d:	c1 e8 0c             	shr    eax,0xc
c000c4a0:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a3:	85 c9                	test   ecx,ecx
c000c4a5:	74 15                	je     c000c4bc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4a7:	8d 82 00 46 02 c0    	lea    eax,[edx-0x3ffdba00]
c000c4ad:	8d 94 11 00 46 02 c0 	lea    edx,[ecx+edx*1-0x3ffdba00]
c000c4b4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4b7:	40                   	inc    eax
c000c4b8:	39 d0                	cmp    eax,edx
c000c4ba:	75 f8                	jne    c000c4b4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4bc:	c3                   	ret    
c000c4bd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4c3:	c1 ea 0c             	shr    edx,0xc
c000c4c6:	eb db                	jmp    c000c4a3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4c8 <Phys::setPageState(unsigned long, bool)>:
c000c4c8:	56                   	push   esi
c000c4c9:	ba 01 00 00 00       	mov    edx,0x1
c000c4ce:	53                   	push   ebx
c000c4cf:	8b 35 c4 39 02 c0    	mov    esi,DWORD PTR ds:0xc00239c4
c000c4d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4dd:	89 c8                	mov    eax,ecx
c000c4df:	83 e1 07             	and    ecx,0x7
c000c4e2:	c1 e8 03             	shr    eax,0x3
c000c4e5:	01 c6                	add    esi,eax
c000c4e7:	d3 e2                	shl    edx,cl
c000c4e9:	83 f2 ff             	xor    edx,0xffffffff
c000c4ec:	20 16                	and    BYTE PTR [esi],dl
c000c4ee:	8b 15 c4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239c4
c000c4f4:	01 d0                	add    eax,edx
c000c4f6:	d3 e3                	shl    ebx,cl
c000c4f8:	8a 08                	mov    cl,BYTE PTR [eax]
c000c4fa:	09 d9                	or     ecx,ebx
c000c4fc:	88 08                	mov    BYTE PTR [eax],cl
c000c4fe:	5b                   	pop    ebx
c000c4ff:	5e                   	pop    esi
c000c500:	c3                   	ret    

c000c501 <Phys::getPageState(unsigned long)>:
c000c501:	53                   	push   ebx
c000c502:	8b 15 c4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239c4
c000c508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c50c:	31 db                	xor    ebx,ebx
c000c50e:	89 c8                	mov    eax,ecx
c000c510:	83 e1 07             	and    ecx,0x7
c000c513:	c1 e8 03             	shr    eax,0x3
c000c516:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c519:	89 d8                	mov    eax,ebx
c000c51b:	5b                   	pop    ebx
c000c51c:	d3 f8                	sar    eax,cl
c000c51e:	83 e0 01             	and    eax,0x1
c000c521:	c3                   	ret    

c000c522 <Phys::freePage(unsigned long)>:
c000c522:	53                   	push   ebx
c000c523:	83 ec 08             	sub    esp,0x8
c000c526:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c52a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c530:	76 5a                	jbe    c000c58c <Phys::freePage(unsigned long)+0x6a>
c000c532:	c1 eb 0c             	shr    ebx,0xc
c000c535:	53                   	push   ebx
c000c536:	e8 c6 ff ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c53b:	5a                   	pop    edx
c000c53c:	84 c0                	test   al,al
c000c53e:	74 5e                	je     c000c59e <Phys::freePage(unsigned long)+0x7c>
c000c540:	a1 ec 45 02 c0       	mov    eax,ds:0xc00245ec
c000c545:	48                   	dec    eax
c000c546:	a3 ec 45 02 c0       	mov    ds:0xc00245ec,eax
c000c54b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c54e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c551:	c1 e0 02             	shl    eax,0x2
c000c554:	89 c2                	mov    edx,eax
c000c556:	c1 fa 1f             	sar    edx,0x1f
c000c559:	f7 3d f0 45 02 c0    	idiv   DWORD PTR ds:0xc00245f0
c000c55f:	39 05 e8 45 02 c0    	cmp    DWORD PTR ds:0xc00245e8,eax
c000c565:	75 12                	jne    c000c579 <Phys::freePage(unsigned long)+0x57>
c000c567:	51                   	push   ecx
c000c568:	51                   	push   ecx
c000c569:	6a 00                	push   0x0
c000c56b:	53                   	push   ebx
c000c56c:	e8 57 ff ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	83 c4 08             	add    esp,0x8
c000c577:	5b                   	pop    ebx
c000c578:	c3                   	ret    
c000c579:	83 ec 0c             	sub    esp,0xc
c000c57c:	a3 e8 45 02 c0       	mov    ds:0xc00245e8,eax
c000c581:	50                   	push   eax
c000c582:	e8 01 0a 00 00       	call   c000cf88 <VgaText::updateRAMUsageDisplay(int)>
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	eb db                	jmp    c000c567 <Phys::freePage(unsigned long)+0x45>
c000c58c:	68 00 10 00 00       	push   0x1000
c000c591:	53                   	push   ebx
c000c592:	e8 e9 fe ff ff       	call   c000c480 <Phys::freeDMA(unsigned long, unsigned long)>
c000c597:	59                   	pop    ecx
c000c598:	5b                   	pop    ebx
c000c599:	83 c4 08             	add    esp,0x8
c000c59c:	5b                   	pop    ebx
c000c59d:	c3                   	ret    
c000c59e:	c7 44 24 10 1b 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002121b
c000c5a6:	83 c4 08             	add    esp,0x8
c000c5a9:	5b                   	pop    ebx
c000c5aa:	e9 c7 93 00 00       	jmp    c0015976 <Krnl::panic(char const*)>

c000c5af <Phys::allocatePage()>:
c000c5af:	56                   	push   esi
c000c5b0:	53                   	push   ebx
c000c5b1:	51                   	push   ecx
c000c5b2:	8b 35 e0 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245e0
c000c5b8:	89 f3                	mov    ebx,esi
c000c5ba:	eb 0a                	jmp    c000c5c6 <Phys::allocatePage()+0x17>
c000c5bc:	89 1d e0 45 02 c0    	mov    DWORD PTR ds:0xc00245e0,ebx
c000c5c2:	39 de                	cmp    esi,ebx
c000c5c4:	74 24                	je     c000c5ea <Phys::allocatePage()+0x3b>
c000c5c6:	53                   	push   ebx
c000c5c7:	e8 35 ff ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c5cc:	5a                   	pop    edx
c000c5cd:	84 c0                	test   al,al
c000c5cf:	74 5a                	je     c000c62b <Phys::allocatePage()+0x7c>
c000c5d1:	43                   	inc    ebx
c000c5d2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5d8:	75 e2                	jne    c000c5bc <Phys::allocatePage()+0xd>
c000c5da:	31 db                	xor    ebx,ebx
c000c5dc:	c7 05 e0 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245e0,0x0
c000c5e6:	39 de                	cmp    esi,ebx
c000c5e8:	75 dc                	jne    c000c5c6 <Phys::allocatePage()+0x17>
c000c5ea:	83 ec 0c             	sub    esp,0xc
c000c5ed:	68 31 12 02 c0       	push   0xc0021231
c000c5f2:	e8 50 2b 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000c5f7:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c5fe:	e8 d9 fd ff ff       	call   c000c3dc <Phys::allocateDMA(unsigned long)>
c000c603:	83 c4 10             	add    esp,0x10
c000c606:	85 c0                	test   eax,eax
c000c608:	75 5a                	jne    c000c664 <Phys::allocatePage()+0xb5>
c000c60a:	83 ec 0c             	sub    esp,0xc
c000c60d:	68 42 12 02 c0       	push   0xc0021242
c000c612:	e8 5f 93 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	8b 1d e0 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245e0
c000c620:	53                   	push   ebx
c000c621:	e8 db fe ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c626:	5a                   	pop    edx
c000c627:	84 c0                	test   al,al
c000c629:	75 a6                	jne    c000c5d1 <Phys::allocatePage()+0x22>
c000c62b:	6a 01                	push   0x1
c000c62d:	53                   	push   ebx
c000c62e:	e8 95 fe ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c633:	a1 ec 45 02 c0       	mov    eax,ds:0xc00245ec
c000c638:	59                   	pop    ecx
c000c639:	40                   	inc    eax
c000c63a:	5b                   	pop    ebx
c000c63b:	a3 ec 45 02 c0       	mov    ds:0xc00245ec,eax
c000c640:	8d 04 80             	lea    eax,[eax+eax*4]
c000c643:	8d 04 80             	lea    eax,[eax+eax*4]
c000c646:	c1 e0 02             	shl    eax,0x2
c000c649:	89 c2                	mov    edx,eax
c000c64b:	c1 fa 1f             	sar    edx,0x1f
c000c64e:	f7 3d f0 45 02 c0    	idiv   DWORD PTR ds:0xc00245f0
c000c654:	39 05 e8 45 02 c0    	cmp    DWORD PTR ds:0xc00245e8,eax
c000c65a:	75 0c                	jne    c000c668 <Phys::allocatePage()+0xb9>
c000c65c:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c000c661:	c1 e0 0c             	shl    eax,0xc
c000c664:	5a                   	pop    edx
c000c665:	5b                   	pop    ebx
c000c666:	5e                   	pop    esi
c000c667:	c3                   	ret    
c000c668:	83 ec 0c             	sub    esp,0xc
c000c66b:	a3 e8 45 02 c0       	mov    ds:0xc00245e8,eax
c000c670:	50                   	push   eax
c000c671:	e8 12 09 00 00       	call   c000cf88 <VgaText::updateRAMUsageDisplay(int)>
c000c676:	83 c4 10             	add    esp,0x10
c000c679:	eb e1                	jmp    c000c65c <Phys::allocatePage()+0xad>

c000c67b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c67b:	56                   	push   esi
c000c67c:	53                   	push   ebx
c000c67d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c681:	39 1d e4 45 02 c0    	cmp    DWORD PTR ds:0xc00245e4,ebx
c000c687:	73 06                	jae    c000c68f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c689:	89 1d e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,ebx
c000c68f:	c1 eb 0c             	shr    ebx,0xc
c000c692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c696:	c1 e8 0c             	shr    eax,0xc
c000c699:	39 d8                	cmp    eax,ebx
c000c69b:	73 13                	jae    c000c6b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c69d:	6a 00                	push   0x0
c000c69f:	8d 70 01             	lea    esi,[eax+0x1]
c000c6a2:	50                   	push   eax
c000c6a3:	e8 20 fe ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c6a8:	5a                   	pop    edx
c000c6a9:	89 f0                	mov    eax,esi
c000c6ab:	59                   	pop    ecx
c000c6ac:	39 f3                	cmp    ebx,esi
c000c6ae:	75 ed                	jne    c000c69d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6b0:	5b                   	pop    ebx
c000c6b1:	5e                   	pop    esi
c000c6b2:	c3                   	ret    

c000c6b3 <Phys::physicalMemorySetup(unsigned int)>:
c000c6b3:	55                   	push   ebp
c000c6b4:	57                   	push   edi
c000c6b5:	56                   	push   esi
c000c6b6:	53                   	push   ebx
c000c6b7:	31 db                	xor    ebx,ebx
c000c6b9:	83 ec 40             	sub    esp,0x40
c000c6bc:	6a 30                	push   0x30
c000c6be:	6a 00                	push   0x0
c000c6c0:	68 00 46 02 c0       	push   0xc0024600
c000c6c5:	e8 f0 3f ff ff       	call   c00006ba <memset>
c000c6ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6d3:	05 00 10 00 00       	add    eax,0x1000
c000c6d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6dc:	83 c4 10             	add    esp,0x10
c000c6df:	56                   	push   esi
c000c6e0:	56                   	push   esi
c000c6e1:	6a 01                	push   0x1
c000c6e3:	53                   	push   ebx
c000c6e4:	43                   	inc    ebx
c000c6e5:	e8 de fd ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c6ea:	83 c4 10             	add    esp,0x10
c000c6ed:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6f3:	75 ea                	jne    c000c6df <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6f5:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c6fb:	66 85 c0             	test   ax,ax
c000c6fe:	0f 84 3b 01 00 00    	je     c000c83f <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c704:	89 c7                	mov    edi,eax
c000c706:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c70e:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c714:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c719:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c71d:	eb 6d                	jmp    c000c78c <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c71f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c723:	89 c1                	mov    ecx,eax
c000c725:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c729:	0f 83 bc 00 00 00    	jae    c000c7eb <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c72f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c733:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c738:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c73c:	39 f2                	cmp    edx,esi
c000c73e:	19 f8                	sbb    eax,edi
c000c740:	73 07                	jae    c000c749 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c742:	be 00 00 0a 00       	mov    esi,0xa0000
c000c747:	31 ff                	xor    edi,edi
c000c749:	89 f2                	mov    edx,esi
c000c74b:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c750:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c756:	89 f9                	mov    ecx,edi
c000c758:	83 d1 ff             	adc    ecx,0xffffffff
c000c75b:	39 d0                	cmp    eax,edx
c000c75d:	b8 00 00 00 00       	mov    eax,0x0
c000c762:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c766:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c76a:	19 c8                	sbb    eax,ecx
c000c76c:	0f 82 0d 01 00 00    	jb     c000c87f <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c772:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c776:	83 c3 18             	add    ebx,0x18
c000c779:	41                   	inc    ecx
c000c77a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c782:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c786:	0f 84 c3 00 00 00    	je     c000c84f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c78c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c78e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c791:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c794:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c798:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c79b:	01 f0                	add    eax,esi
c000c79d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7a8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7ac:	11 fa                	adc    edx,edi
c000c7ae:	55                   	push   ebp
c000c7af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7bb:	51                   	push   ecx
c000c7bc:	56                   	push   esi
c000c7bd:	68 7c 12 02 c0       	push   0xc002127c
c000c7c2:	e8 80 29 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000c7c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	09 f8                	or     eax,edi
c000c7d0:	75 7d                	jne    c000c84f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7d2:	83 fd 01             	cmp    ebp,0x1
c000c7d5:	75 11                	jne    c000c7e8 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7d7:	ba 00 00 08 00       	mov    edx,0x80000
c000c7dc:	89 c1                	mov    ecx,eax
c000c7de:	39 f2                	cmp    edx,esi
c000c7e0:	19 f9                	sbb    ecx,edi
c000c7e2:	0f 83 37 ff ff ff    	jae    c000c71f <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7e8:	4d                   	dec    ebp
c000c7e9:	75 87                	jne    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7ef:	31 d2                	xor    edx,edx
c000c7f1:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7f5:	89 c8                	mov    eax,ecx
c000c7f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7fb:	19 d1                	sbb    ecx,edx
c000c7fd:	0f 82 6f ff ff ff    	jb     c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c803:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c808:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c80c:	b9 00 00 00 00       	mov    ecx,0x0
c000c811:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c815:	0f 83 57 ff ff ff    	jae    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c81b:	39 c6                	cmp    esi,eax
c000c81d:	19 d7                	sbb    edi,edx
c000c81f:	73 6a                	jae    c000c88b <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c821:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c825:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c829:	29 c7                	sub    edi,eax
c000c82b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c82f:	19 d5                	sbb    ebp,edx
c000c831:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c835:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83d:	eb 4c                	jmp    c000c88b <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c83f:	83 ec 0c             	sub    esp,0xc
c000c842:	68 50 12 02 c0       	push   0xc0021250
c000c847:	e8 2a 91 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	bb 40 01 00 00       	mov    ebx,0x140
c000c854:	50                   	push   eax
c000c855:	50                   	push   eax
c000c856:	6a 00                	push   0x0
c000c858:	53                   	push   ebx
c000c859:	e8 6a fc ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c85e:	8b 15 f0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245f0
c000c864:	43                   	inc    ebx
c000c865:	42                   	inc    edx
c000c866:	83 c4 10             	add    esp,0x10
c000c869:	89 15 f0 45 02 c0    	mov    DWORD PTR ds:0xc00245f0,edx
c000c86f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c875:	75 dd                	jne    c000c854 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c877:	83 c4 3c             	add    esp,0x3c
c000c87a:	5b                   	pop    ebx
c000c87b:	5e                   	pop    esi
c000c87c:	5f                   	pop    edi
c000c87d:	5d                   	pop    ebp
c000c87e:	c3                   	ret    
c000c87f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c883:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c88b:	56                   	push   esi
c000c88c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c890:	56                   	push   esi
c000c891:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c895:	57                   	push   edi
c000c896:	68 a0 12 02 c0       	push   0xc00212a0
c000c89b:	e8 a7 28 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000c8a0:	5d                   	pop    ebp
c000c8a1:	58                   	pop    eax
c000c8a2:	56                   	push   esi
c000c8a3:	57                   	push   edi
c000c8a4:	e8 d2 fd ff ff       	call   c000c67b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8b5:	8b 15 f0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245f0
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	01 d0                	add    eax,edx
c000c8c0:	a3 f0 45 02 c0       	mov    ds:0xc00245f0,eax
c000c8c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8cc:	52                   	push   edx
c000c8cd:	50                   	push   eax
c000c8ce:	68 5e 12 02 c0       	push   0xc002125e
c000c8d3:	e8 6f 28 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	e9 92 fe ff ff       	jmp    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8e0 <Pipe::isAtty()>:
c000c8e0:	31 c0                	xor    eax,eax
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <Pipe::~Pipe()>:
c000c8e4:	83 ec 0c             	sub    esp,0xc
c000c8e7:	ba 0c 13 02 c0       	mov    edx,0xc002130c
c000c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f0:	89 10                	mov    DWORD PTR [eax],edx
c000c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	50                   	push   eax
c000c8fa:	e8 c7 15 00 00       	call   c000dec6 <UnixFile::~UnixFile()>
c000c8ff:	83 c4 10             	add    esp,0x10
c000c902:	90                   	nop
c000c903:	83 c4 0c             	add    esp,0xc
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Pipe::~Pipe()>:
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	83 ec 0c             	sub    esp,0xc
c000c90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c912:	e8 cd ff ff ff       	call   c000c8e4 <Pipe::~Pipe()>
c000c917:	83 c4 10             	add    esp,0x10
c000c91a:	83 ec 08             	sub    esp,0x8
c000c91d:	6a 20                	push   0x20
c000c91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c923:	e8 f9 26 00 00       	call   c000f021 <operator delete(void*, unsigned long)>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	83 c4 0c             	add    esp,0xc
c000c92e:	c3                   	ret    
c000c92f:	90                   	nop

c000c930 <Pipe::read(unsigned long long, void*, int*)>:
c000c930:	55                   	push   ebp
c000c931:	57                   	push   edi
c000c932:	56                   	push   esi
c000c933:	53                   	push   ebx
c000c934:	83 ec 1c             	sub    esp,0x1c
c000c937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c946:	89 c8                	mov    eax,ecx
c000c948:	99                   	cdq    
c000c949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c94d:	74 19                	je     c000c968 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c94f:	39 f9                	cmp    ecx,edi
c000c951:	89 d1                	mov    ecx,edx
c000c953:	19 f1                	sbb    ecx,esi
c000c955:	73 11                	jae    c000c968 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c957:	e8 07 c0 00 00       	call   c0018963 <lockScheduler()>
c000c95c:	e8 4b c3 00 00       	call   c0018cac <schedule()>
c000c961:	e8 ff bf 00 00       	call   c0018965 <unlockScheduler()>
c000c966:	eb db                	jmp    c000c943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c968:	39 f8                	cmp    eax,edi
c000c96a:	89 d1                	mov    ecx,edx
c000c96c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c970:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c974:	19 f1                	sbb    ecx,esi
c000c976:	73 08                	jae    c000c980 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c97c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c980:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c983:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c986:	29 c6                	sub    esi,eax
c000c988:	89 f1                	mov    ecx,esi
c000c98a:	c1 f9 1f             	sar    ecx,0x1f
c000c98d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c991:	89 ca                	mov    edx,ecx
c000c993:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c997:	19 d1                	sbb    ecx,edx
c000c999:	73 04                	jae    c000c99f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c99b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c99f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9a3:	89 fd                	mov    ebp,edi
c000c9a5:	29 f5                	sub    ebp,esi
c000c9a7:	85 f6                	test   esi,esi
c000c9a9:	74 12                	je     c000c9bd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9ab:	52                   	push   edx
c000c9ac:	56                   	push   esi
c000c9ad:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9b0:	50                   	push   eax
c000c9b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9b5:	e8 ca 3c ff ff       	call   c0000684 <memcpy>
c000c9ba:	83 c4 10             	add    esp,0x10
c000c9bd:	85 ed                	test   ebp,ebp
c000c9bf:	74 12                	je     c000c9d3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9c1:	50                   	push   eax
c000c9c2:	55                   	push   ebp
c000c9c3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9c6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9ca:	56                   	push   esi
c000c9cb:	e8 b4 3c ff ff       	call   c0000684 <memcpy>
c000c9d0:	83 c4 10             	add    esp,0x10
c000c9d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9d6:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9d9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9dc:	99                   	cdq    
c000c9dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e1:	89 f7                	mov    edi,esi
c000c9e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9e7:	c1 ff 1f             	sar    edi,0x1f
c000c9ea:	57                   	push   edi
c000c9eb:	56                   	push   esi
c000c9ec:	52                   	push   edx
c000c9ed:	50                   	push   eax
c000c9ee:	e8 09 2b 01 00       	call   c001f4fc <__umoddi3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9fe:	75 10                	jne    c000ca10 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca00:	83 ec 0c             	sub    esp,0xc
c000ca03:	68 c9 12 02 c0       	push   0xc00212c9
c000ca08:	e8 69 8f 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000ca0d:	83 c4 10             	add    esp,0x10
c000ca10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca18:	89 10                	mov    DWORD PTR [eax],edx
c000ca1a:	83 c4 1c             	add    esp,0x1c
c000ca1d:	31 c0                	xor    eax,eax
c000ca1f:	5b                   	pop    ebx
c000ca20:	5e                   	pop    esi
c000ca21:	5f                   	pop    edi
c000ca22:	5d                   	pop    ebp
c000ca23:	c3                   	ret    

c000ca24 <Pipe::write(unsigned long long, void*, int*)>:
c000ca24:	55                   	push   ebp
c000ca25:	57                   	push   edi
c000ca26:	56                   	push   esi
c000ca27:	53                   	push   ebx
c000ca28:	83 ec 1c             	sub    esp,0x1c
c000ca2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca3a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca3d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca40:	89 de                	mov    esi,ebx
c000ca42:	89 df                	mov    edi,ebx
c000ca44:	c1 ff 1f             	sar    edi,0x1f
c000ca47:	01 c6                	add    esi,eax
c000ca49:	89 c8                	mov    eax,ecx
c000ca4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca4f:	11 d7                	adc    edi,edx
c000ca51:	99                   	cdq    
c000ca52:	89 d0                	mov    eax,edx
c000ca54:	39 f1                	cmp    ecx,esi
c000ca56:	19 f8                	sbb    eax,edi
c000ca58:	b8 01 00 00 00       	mov    eax,0x1
c000ca5d:	0f 82 80 00 00 00    	jb     c000cae3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca66:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca69:	01 d8                	add    eax,ebx
c000ca6b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca6f:	99                   	cdq    
c000ca70:	f7 f9                	idiv   ecx
c000ca72:	29 d1                	sub    ecx,edx
c000ca74:	89 d7                	mov    edi,edx
c000ca76:	89 c8                	mov    eax,ecx
c000ca78:	99                   	cdq    
c000ca79:	39 ce                	cmp    esi,ecx
c000ca7b:	19 d3                	sbb    ebx,edx
c000ca7d:	bb 00 00 00 00       	mov    ebx,0x0
c000ca82:	72 04                	jb     c000ca88 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca84:	89 f3                	mov    ebx,esi
c000ca86:	29 cb                	sub    ebx,ecx
c000ca88:	89 f1                	mov    ecx,esi
c000ca8a:	29 d9                	sub    ecx,ebx
c000ca8c:	74 1a                	je     c000caa8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca8e:	52                   	push   edx
c000ca8f:	51                   	push   ecx
c000ca90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca98:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca9b:	57                   	push   edi
c000ca9c:	e8 e3 3b ff ff       	call   c0000684 <memcpy>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa8:	85 db                	test   ebx,ebx
c000caaa:	74 12                	je     c000cabe <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caac:	50                   	push   eax
c000caad:	53                   	push   ebx
c000caae:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cab2:	51                   	push   ecx
c000cab3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cab6:	e8 c9 3b ff ff       	call   c0000684 <memcpy>
c000cabb:	83 c4 10             	add    esp,0x10
c000cabe:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cac1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cac6:	75 10                	jne    c000cad8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cac8:	83 ec 0c             	sub    esp,0xc
c000cacb:	68 e5 12 02 c0       	push   0xc00212e5
c000cad0:	e8 a1 8e 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cadc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cadf:	89 38                	mov    DWORD PTR [eax],edi
c000cae1:	31 c0                	xor    eax,eax
c000cae3:	83 c4 1c             	add    esp,0x1c
c000cae6:	5b                   	pop    ebx
c000cae7:	5e                   	pop    esi
c000cae8:	5f                   	pop    edi
c000cae9:	5d                   	pop    ebp
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <Pipe::Pipe(int)>:
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf3:	83 ec 08             	sub    esp,0x8
c000caf6:	6a 00                	push   0x0
c000caf8:	50                   	push   eax
c000caf9:	e8 26 12 00 00       	call   c000dd24 <UnixFile::UnixFile(int)>
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	ba 0c 13 02 c0       	mov    edx,0xc002130c
c000cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0a:	89 10                	mov    DWORD PTR [eax],edx
c000cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb31:	83 ec 0c             	sub    esp,0xc
c000cb34:	50                   	push   eax
c000cb35:	e8 9f f4 ff ff       	call   c000bfd9 <malloc>
c000cb3a:	83 c4 10             	add    esp,0x10
c000cb3d:	89 c2                	mov    edx,eax
c000cb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb4e:	90                   	nop
c000cb4f:	83 c4 0c             	add    esp,0xc
c000cb52:	c3                   	ret    
c000cb53:	90                   	nop

c000cb54 <VgaText::isAtty()>:
c000cb54:	b0 01                	mov    al,0x1
c000cb56:	c3                   	ret    
c000cb57:	90                   	nop

c000cb58 <VgaText::~VgaText()>:
c000cb58:	83 ec 0c             	sub    esp,0xc
c000cb5b:	ba c8 13 02 c0       	mov    edx,0xc00213c8
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	89 10                	mov    DWORD PTR [eax],edx
c000cb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	50                   	push   eax
c000cb6e:	e8 53 13 00 00       	call   c000dec6 <UnixFile::~UnixFile()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	90                   	nop
c000cb77:	83 c4 0c             	add    esp,0xc
c000cb7a:	c3                   	ret    
c000cb7b:	90                   	nop

c000cb7c <VgaText::~VgaText()>:
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	83 ec 0c             	sub    esp,0xc
c000cb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb86:	e8 cd ff ff ff       	call   c000cb58 <VgaText::~VgaText()>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	83 ec 08             	sub    esp,0x8
c000cb91:	68 60 12 00 00       	push   0x1260
c000cb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb9a:	e8 82 24 00 00       	call   c000f021 <operator delete(void*, unsigned long)>
c000cb9f:	83 c4 10             	add    esp,0x10
c000cba2:	83 c4 0c             	add    esp,0xc
c000cba5:	c3                   	ret    

c000cba6 <VgaText::read(unsigned long long, void*, int*)>:
c000cba6:	83 ec 10             	sub    esp,0x10
c000cba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb5:	e8 a5 57 00 00       	call   c001235f <readKeyboard(VgaText*, char*, unsigned long)>
c000cbba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbbe:	89 02                	mov    DWORD PTR [edx],eax
c000cbc0:	31 c0                	xor    eax,eax
c000cbc2:	83 c4 1c             	add    esp,0x1c
c000cbc5:	c3                   	ret    

c000cbc6 <setTerminalScrollLock(bool)>:
c000cbc6:	c3                   	ret    

c000cbc7 <addToTerminalCycle(VgaText*)>:
c000cbc7:	8b 15 60 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024660
c000cbcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd1:	85 d2                	test   edx,edx
c000cbd3:	75 0c                	jne    c000cbe1 <addToTerminalCycle(VgaText*)+0x1a>
c000cbd5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbdb:	a3 60 46 02 c0       	mov    ds:0xc0024660,eax
c000cbe0:	c3                   	ret    
c000cbe1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbe7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbed:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbf3:	c3                   	ret    

c000cbf4 <installVgaTextImplementation()>:
c000cbf4:	83 ec 10             	sub    esp,0x10
c000cbf7:	6a 20                	push   0x20
c000cbf9:	6a 00                	push   0x0
c000cbfb:	68 40 46 02 c0       	push   0xc0024640
c000cc00:	e8 b5 3a ff ff       	call   c00006ba <memset>
c000cc05:	83 c4 1c             	add    esp,0x1c
c000cc08:	c3                   	ret    

c000cc09 <scrollTerminalScrollLock(int)>:
c000cc09:	c3                   	ret    

c000cc0a <VgaText::load()>:
c000cc0a:	53                   	push   ebx
c000cc0b:	31 c0                	xor    eax,eax
c000cc0d:	83 ec 58             	sub    esp,0x58
c000cc10:	89 e2                	mov    edx,esp
c000cc12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc16:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc1a:	40                   	inc    eax
c000cc1b:	83 f8 50             	cmp    eax,0x50
c000cc1e:	75 f6                	jne    c000cc16 <VgaText::load()+0xc>
c000cc20:	31 c0                	xor    eax,eax
c000cc22:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc29:	84 c9                	test   cl,cl
c000cc2b:	74 06                	je     c000cc33 <VgaText::load()+0x29>
c000cc2d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc30:	40                   	inc    eax
c000cc31:	eb ef                	jmp    c000cc22 <VgaText::load()+0x18>
c000cc33:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc39:	85 c0                	test   eax,eax
c000cc3b:	74 09                	je     c000cc46 <VgaText::load()+0x3c>
c000cc3d:	51                   	push   ecx
c000cc3e:	51                   	push   ecx
c000cc3f:	52                   	push   edx
c000cc40:	53                   	push   ebx
c000cc41:	ff d0                	call   eax
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc4c:	85 c0                	test   eax,eax
c000cc4e:	74 09                	je     c000cc59 <VgaText::load()+0x4f>
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	53                   	push   ebx
c000cc54:	ff d0                	call   eax
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	83 c4 58             	add    esp,0x58
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    

c000cc5e <VgaText::updateCursor()>:
c000cc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc62:	39 05 64 46 02 c0    	cmp    DWORD PTR ds:0xc0024664,eax
c000cc68:	75 0c                	jne    c000cc76 <VgaText::updateCursor()+0x18>
c000cc6a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc70:	85 c0                	test   eax,eax
c000cc72:	74 02                	je     c000cc76 <VgaText::updateCursor()+0x18>
c000cc74:	ff e0                	jmp    eax
c000cc76:	c3                   	ret    
c000cc77:	90                   	nop

c000cc78 <VgaText::showCursor(bool)>:
c000cc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc80:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc86:	c3                   	ret    
c000cc87:	90                   	nop

c000cc88 <VgaText::disableBlink(bool)>:
c000cc88:	56                   	push   esi
c000cc89:	53                   	push   ebx
c000cc8a:	51                   	push   ecx
c000cc8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc93:	39 1d 64 46 02 c0    	cmp    DWORD PTR ds:0xc0024664,ebx
c000cc99:	75 18                	jne    c000ccb3 <VgaText::disableBlink(bool)+0x2b>
c000cc9b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cca1:	85 c0                	test   eax,eax
c000cca3:	74 0e                	je     c000ccb3 <VgaText::disableBlink(bool)+0x2b>
c000cca5:	89 f1                	mov    ecx,esi
c000cca7:	52                   	push   edx
c000cca8:	52                   	push   edx
c000cca9:	0f b6 d1             	movzx  edx,cl
c000ccac:	52                   	push   edx
c000ccad:	53                   	push   ebx
c000ccae:	ff d0                	call   eax
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	89 f0                	mov    eax,esi
c000ccb5:	83 f0 01             	xor    eax,0x1
c000ccb8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccbe:	58                   	pop    eax
c000ccbf:	5b                   	pop    ebx
c000ccc0:	5e                   	pop    esi
c000ccc1:	c3                   	ret    

c000ccc2 <VgaText::doANSI_SGR(int)>:
c000ccc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccca:	85 d2                	test   edx,edx
c000cccc:	75 14                	jne    c000cce2 <VgaText::doANSI_SGR(int)+0x20>
c000ccce:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccd4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccda:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cce0:	eb 65                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000cce2:	83 fa 07             	cmp    edx,0x7
c000cce5:	75 14                	jne    c000ccfb <VgaText::doANSI_SGR(int)+0x39>
c000cce7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cced:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccf3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccf9:	eb 4c                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000ccfb:	83 fa 1b             	cmp    edx,0x1b
c000ccfe:	74 ce                	je     c000ccce <VgaText::doANSI_SGR(int)+0xc>
c000cd00:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd03:	83 f9 07             	cmp    ecx,0x7
c000cd06:	77 09                	ja     c000cd11 <VgaText::doANSI_SGR(int)+0x4f>
c000cd08:	8b 14 8d 00 3a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc600]
c000cd0f:	eb 20                	jmp    c000cd31 <VgaText::doANSI_SGR(int)+0x6f>
c000cd11:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd14:	83 f9 07             	cmp    ecx,0x7
c000cd17:	77 09                	ja     c000cd22 <VgaText::doANSI_SGR(int)+0x60>
c000cd19:	8b 14 8d 00 3a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc600]
c000cd20:	eb 25                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000cd22:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd25:	83 f9 07             	cmp    ecx,0x7
c000cd28:	77 0e                	ja     c000cd38 <VgaText::doANSI_SGR(int)+0x76>
c000cd2a:	8b 14 95 b8 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc748]
c000cd31:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd37:	c3                   	ret    
c000cd38:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd3b:	83 f9 07             	cmp    ecx,0x7
c000cd3e:	77 0d                	ja     c000cd4d <VgaText::doANSI_SGR(int)+0x8b>
c000cd40:	8b 14 95 90 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc770]
c000cd47:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd4d:	c3                   	ret    

c000cd4e <VgaText::setDefaultBgColour(VgaColour)>:
c000cd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd56:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd5c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd62:	c3                   	ret    
c000cd63:	90                   	nop

c000cd64 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd72:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd78:	c3                   	ret    
c000cd79:	90                   	nop

c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd7a:	53                   	push   ebx
c000cd7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd87:	51                   	push   ecx
c000cd88:	e8 c1 ff ff ff       	call   c000cd4e <VgaText::setDefaultBgColour(VgaColour)>
c000cd8d:	58                   	pop    eax
c000cd8e:	5a                   	pop    edx
c000cd8f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd97:	5b                   	pop    ebx
c000cd98:	eb ca                	jmp    c000cd64 <VgaText::setDefaultFgColour(VgaColour)>

c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cd9f:	c1 e2 04             	shl    edx,0x4
c000cda2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cda6:	83 e0 0f             	and    eax,0xf
c000cda9:	09 d0                	or     eax,edx
c000cdab:	c3                   	ret    

c000cdac <VgaText::scrollScreen()>:
c000cdac:	57                   	push   edi
c000cdad:	56                   	push   esi
c000cdae:	be 01 00 00 00       	mov    esi,0x1
c000cdb3:	53                   	push   ebx
c000cdb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdbe:	31 ff                	xor    edi,edi
c000cdc0:	01 d9                	add    ecx,ebx
c000cdc2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdc5:	83 fe 17             	cmp    esi,0x17
c000cdc8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdce:	75 28                	jne    c000cdf8 <VgaText::scrollScreen()+0x4c>
c000cdd0:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdd6:	74 1c                	je     c000cdf4 <VgaText::scrollScreen()+0x48>
c000cdd8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cddf:	50                   	push   eax
c000cde0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cde7:	50                   	push   eax
c000cde8:	e8 ad ff ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cded:	5a                   	pop    edx
c000cdee:	5a                   	pop    edx
c000cdef:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdf2:	eb 04                	jmp    c000cdf8 <VgaText::scrollScreen()+0x4c>
c000cdf4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdf8:	47                   	inc    edi
c000cdf9:	41                   	inc    ecx
c000cdfa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce00:	75 c0                	jne    c000cdc2 <VgaText::scrollScreen()+0x16>
c000ce02:	46                   	inc    esi
c000ce03:	83 fe 18             	cmp    esi,0x18
c000ce06:	75 b0                	jne    c000cdb8 <VgaText::scrollScreen()+0xc>
c000ce08:	39 1d 64 46 02 c0    	cmp    DWORD PTR ds:0xc0024664,ebx
c000ce0e:	75 24                	jne    c000ce34 <VgaText::scrollScreen()+0x88>
c000ce10:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce17:	74 08                	je     c000ce21 <VgaText::scrollScreen()+0x75>
c000ce19:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce1f:	eb 13                	jmp    c000ce34 <VgaText::scrollScreen()+0x88>
c000ce21:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce27:	85 c0                	test   eax,eax
c000ce29:	74 09                	je     c000ce34 <VgaText::scrollScreen()+0x88>
c000ce2b:	83 ec 0c             	sub    esp,0xc
c000ce2e:	53                   	push   ebx
c000ce2f:	ff d0                	call   eax
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce38:	5b                   	pop    ebx
c000ce39:	5e                   	pop    esi
c000ce3a:	5f                   	pop    edi
c000ce3b:	e9 1e fe ff ff       	jmp    c000cc5e <VgaText::updateCursor()>

c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce45:	c1 e0 08             	shl    eax,0x8
c000ce48:	89 c2                	mov    edx,eax
c000ce4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce4f:	09 d0                	or     eax,edx
c000ce51:	c3                   	ret    

c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce52:	53                   	push   ebx
c000ce53:	83 ec 08             	sub    esp,0x8
c000ce56:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce5f:	50                   	push   eax
c000ce60:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce65:	50                   	push   eax
c000ce66:	e8 2f ff ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ce6b:	5a                   	pop    edx
c000ce6c:	5b                   	pop    ebx
c000ce6d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce72:	0f b6 c0             	movzx  eax,al
c000ce75:	50                   	push   eax
c000ce76:	53                   	push   ebx
c000ce77:	e8 c4 ff ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce7c:	5a                   	pop    edx
c000ce7d:	5a                   	pop    edx
c000ce7e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce84:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce88:	0f b7 d2             	movzx  edx,dx
c000ce8b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce90:	39 0d 64 46 02 c0    	cmp    DWORD PTR ds:0xc0024664,ecx
c000ce96:	75 14                	jne    c000ceac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce98:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce9e:	85 c0                	test   eax,eax
c000cea0:	74 0a                	je     c000ceac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cea6:	83 c4 08             	add    esp,0x8
c000cea9:	5b                   	pop    ebx
c000ceaa:	ff e0                	jmp    eax
c000ceac:	83 c4 08             	add    esp,0x8
c000ceaf:	5b                   	pop    ebx
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <VgaText::getCursorX()>:
c000ceb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cebc:	c3                   	ret    
c000cebd:	90                   	nop

c000cebe <VgaText::getCursorY()>:
c000cebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cec8:	c3                   	ret    
c000cec9:	90                   	nop

c000ceca <VgaText::setCursor(int, int)>:
c000ceca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ced8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cedc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cee2:	e9 77 fd ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000cee7:	90                   	nop

c000cee8 <VgaText::setCursorX(int)>:
c000cee8:	83 ec 10             	sub    esp,0x10
c000ceeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ceef:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef9:	50                   	push   eax
c000cefa:	e8 cb ff ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000ceff:	83 c4 1c             	add    esp,0x1c
c000cf02:	c3                   	ret    
c000cf03:	90                   	nop

c000cf04 <VgaText::setCursorY(int)>:
c000cf04:	83 ec 10             	sub    esp,0x10
c000cf07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf0f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf15:	50                   	push   eax
c000cf16:	e8 af ff ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000cf1b:	83 c4 1c             	add    esp,0x1c
c000cf1e:	c3                   	ret    
c000cf1f:	90                   	nop

c000cf20 <VgaText::incrementCursor(bool)>:
c000cf20:	56                   	push   esi
c000cf21:	53                   	push   ebx
c000cf22:	51                   	push   ecx
c000cf23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf2b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf31:	40                   	inc    eax
c000cf32:	83 f8 50             	cmp    eax,0x50
c000cf35:	74 08                	je     c000cf3f <VgaText::incrementCursor(bool)+0x1f>
c000cf37:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf3d:	eb 33                	jmp    c000cf72 <VgaText::incrementCursor(bool)+0x52>
c000cf3f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf45:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf4f:	8d 50 01             	lea    edx,[eax+0x1]
c000cf52:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf58:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf5e:	75 12                	jne    c000cf72 <VgaText::incrementCursor(bool)+0x52>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf69:	53                   	push   ebx
c000cf6a:	e8 3d fe ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	89 f0                	mov    eax,esi
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0c                	je     c000cf84 <VgaText::incrementCursor(bool)+0x64>
c000cf78:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf7c:	5a                   	pop    edx
c000cf7d:	5b                   	pop    ebx
c000cf7e:	5e                   	pop    esi
c000cf7f:	e9 da fc ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000cf84:	58                   	pop    eax
c000cf85:	5b                   	pop    ebx
c000cf86:	5e                   	pop    esi
c000cf87:	c3                   	ret    

c000cf88 <VgaText::updateRAMUsageDisplay(int)>:
c000cf88:	53                   	push   ebx
c000cf89:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf8e:	6a 0f                	push   0xf
c000cf90:	6a 00                	push   0x0
c000cf92:	e8 03 fe ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cf97:	5a                   	pop    edx
c000cf98:	59                   	pop    ecx
c000cf99:	0f b6 c8             	movzx  ecx,al
c000cf9c:	51                   	push   ecx
c000cf9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfa1:	99                   	cdq    
c000cfa2:	f7 fb                	idiv   ebx
c000cfa4:	83 c0 30             	add    eax,0x30
c000cfa7:	89 d3                	mov    ebx,edx
c000cfa9:	0f be c0             	movsx  eax,al
c000cfac:	50                   	push   eax
c000cfad:	e8 8e fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfb2:	5a                   	pop    edx
c000cfb3:	83 c3 30             	add    ebx,0x30
c000cfb6:	5a                   	pop    edx
c000cfb7:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfbd:	0f b6 db             	movzx  ebx,bl
c000cfc0:	51                   	push   ecx
c000cfc1:	53                   	push   ebx
c000cfc2:	e8 79 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc7:	5b                   	pop    ebx
c000cfc8:	5a                   	pop    edx
c000cfc9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfcf:	51                   	push   ecx
c000cfd0:	6a 25                	push   0x25
c000cfd2:	e8 69 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd7:	59                   	pop    ecx
c000cfd8:	5b                   	pop    ebx
c000cfd9:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfdf:	5b                   	pop    ebx
c000cfe0:	c3                   	ret    
c000cfe1:	90                   	nop

c000cfe2 <VgaText::updateDiskUsage()>:
c000cfe2:	55                   	push   ebp
c000cfe3:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfe8:	57                   	push   edi
c000cfe9:	56                   	push   esi
c000cfea:	53                   	push   ebx
c000cfeb:	6a 0f                	push   0xf
c000cfed:	6a 00                	push   0x0
c000cfef:	e8 a6 fd ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cff4:	0f b6 d8             	movzx  ebx,al
c000cff7:	a1 44 63 02 c0       	mov    eax,ds:0xc0026344
c000cffc:	5a                   	pop    edx
c000cffd:	99                   	cdq    
c000cffe:	f7 fd                	idiv   ebp
c000d000:	59                   	pop    ecx
c000d001:	b9 0a 00 00 00       	mov    ecx,0xa
c000d006:	99                   	cdq    
c000d007:	f7 f9                	idiv   ecx
c000d009:	53                   	push   ebx
c000d00a:	8d 42 30             	lea    eax,[edx+0x30]
c000d00d:	0f b6 c0             	movzx  eax,al
c000d010:	50                   	push   eax
c000d011:	e8 2a fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d016:	5e                   	pop    esi
c000d017:	5f                   	pop    edi
c000d018:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d01e:	a1 44 63 02 c0       	mov    eax,ds:0xc0026344
c000d023:	bf e8 03 00 00       	mov    edi,0x3e8
c000d028:	99                   	cdq    
c000d029:	f7 ff                	idiv   edi
c000d02b:	99                   	cdq    
c000d02c:	f7 f9                	idiv   ecx
c000d02e:	53                   	push   ebx
c000d02f:	8d 42 30             	lea    eax,[edx+0x30]
c000d032:	0f b6 c0             	movzx  eax,al
c000d035:	50                   	push   eax
c000d036:	e8 05 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d03b:	5a                   	pop    edx
c000d03c:	5e                   	pop    esi
c000d03d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d043:	a1 44 63 02 c0       	mov    eax,ds:0xc0026344
c000d048:	be 64 00 00 00       	mov    esi,0x64
c000d04d:	99                   	cdq    
c000d04e:	f7 fe                	idiv   esi
c000d050:	99                   	cdq    
c000d051:	f7 f9                	idiv   ecx
c000d053:	53                   	push   ebx
c000d054:	8d 42 30             	lea    eax,[edx+0x30]
c000d057:	0f b6 c0             	movzx  eax,al
c000d05a:	50                   	push   eax
c000d05b:	e8 e0 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d060:	5a                   	pop    edx
c000d061:	5a                   	pop    edx
c000d062:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d068:	a1 44 63 02 c0       	mov    eax,ds:0xc0026344
c000d06d:	53                   	push   ebx
c000d06e:	99                   	cdq    
c000d06f:	f7 f9                	idiv   ecx
c000d071:	99                   	cdq    
c000d072:	f7 f9                	idiv   ecx
c000d074:	8d 42 30             	lea    eax,[edx+0x30]
c000d077:	0f b6 c0             	movzx  eax,al
c000d07a:	50                   	push   eax
c000d07b:	e8 c0 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d080:	5a                   	pop    edx
c000d081:	5a                   	pop    edx
c000d082:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d088:	a1 44 63 02 c0       	mov    eax,ds:0xc0026344
c000d08d:	53                   	push   ebx
c000d08e:	99                   	cdq    
c000d08f:	f7 f9                	idiv   ecx
c000d091:	8d 42 30             	lea    eax,[edx+0x30]
c000d094:	0f b6 c0             	movzx  eax,al
c000d097:	50                   	push   eax
c000d098:	e8 a3 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d09d:	5a                   	pop    edx
c000d09e:	5a                   	pop    edx
c000d09f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0a5:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c000d0aa:	53                   	push   ebx
c000d0ab:	99                   	cdq    
c000d0ac:	f7 fd                	idiv   ebp
c000d0ae:	99                   	cdq    
c000d0af:	f7 f9                	idiv   ecx
c000d0b1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b4:	0f b6 c0             	movzx  eax,al
c000d0b7:	50                   	push   eax
c000d0b8:	e8 83 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0bd:	5d                   	pop    ebp
c000d0be:	5a                   	pop    edx
c000d0bf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0c5:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c000d0ca:	53                   	push   ebx
c000d0cb:	99                   	cdq    
c000d0cc:	f7 ff                	idiv   edi
c000d0ce:	99                   	cdq    
c000d0cf:	f7 f9                	idiv   ecx
c000d0d1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d4:	0f b6 c0             	movzx  eax,al
c000d0d7:	50                   	push   eax
c000d0d8:	e8 63 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0dd:	5f                   	pop    edi
c000d0de:	5d                   	pop    ebp
c000d0df:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0e5:	53                   	push   ebx
c000d0e6:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c000d0eb:	99                   	cdq    
c000d0ec:	f7 fe                	idiv   esi
c000d0ee:	99                   	cdq    
c000d0ef:	f7 f9                	idiv   ecx
c000d0f1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f4:	0f b6 c0             	movzx  eax,al
c000d0f7:	50                   	push   eax
c000d0f8:	e8 43 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0fd:	5a                   	pop    edx
c000d0fe:	5e                   	pop    esi
c000d0ff:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d105:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c000d10a:	53                   	push   ebx
c000d10b:	99                   	cdq    
c000d10c:	f7 f9                	idiv   ecx
c000d10e:	99                   	cdq    
c000d10f:	f7 f9                	idiv   ecx
c000d111:	8d 42 30             	lea    eax,[edx+0x30]
c000d114:	0f b6 c0             	movzx  eax,al
c000d117:	50                   	push   eax
c000d118:	e8 23 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d11d:	5f                   	pop    edi
c000d11e:	5d                   	pop    ebp
c000d11f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d125:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c000d12a:	53                   	push   ebx
c000d12b:	99                   	cdq    
c000d12c:	f7 f9                	idiv   ecx
c000d12e:	83 c2 30             	add    edx,0x30
c000d131:	0f b6 d2             	movzx  edx,dl
c000d134:	52                   	push   edx
c000d135:	e8 06 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d13a:	5a                   	pop    edx
c000d13b:	59                   	pop    ecx
c000d13c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d142:	5b                   	pop    ebx
c000d143:	5e                   	pop    esi
c000d144:	5f                   	pop    edi
c000d145:	5d                   	pop    ebp
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <VgaText::updateTitle()>:
c000d148:	53                   	push   ebx
c000d149:	31 c0                	xor    eax,eax
c000d14b:	83 ec 58             	sub    esp,0x58
c000d14e:	89 e1                	mov    ecx,esp
c000d150:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d154:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d158:	40                   	inc    eax
c000d159:	83 f8 50             	cmp    eax,0x50
c000d15c:	75 f6                	jne    c000d154 <VgaText::updateTitle()+0xc>
c000d15e:	31 c0                	xor    eax,eax
c000d160:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d167:	84 db                	test   bl,bl
c000d169:	74 06                	je     c000d171 <VgaText::updateTitle()+0x29>
c000d16b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d16e:	40                   	inc    eax
c000d16f:	eb ef                	jmp    c000d160 <VgaText::updateTitle()+0x18>
c000d171:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d177:	85 c0                	test   eax,eax
c000d179:	74 09                	je     c000d184 <VgaText::updateTitle()+0x3c>
c000d17b:	53                   	push   ebx
c000d17c:	53                   	push   ebx
c000d17d:	51                   	push   ecx
c000d17e:	52                   	push   edx
c000d17f:	ff d0                	call   eax
c000d181:	83 c4 10             	add    esp,0x10
c000d184:	e8 59 fe ff ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c000d189:	83 c4 58             	add    esp,0x58
c000d18c:	5b                   	pop    ebx
c000d18d:	c3                   	ret    

c000d18e <VgaText::setTitleTextColour(VgaColour)>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d196:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d19c:	eb aa                	jmp    c000d148 <VgaText::updateTitle()>

c000d19e <VgaText::setTitleColour(VgaColour)>:
c000d19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1ac:	eb 9a                	jmp    c000d148 <VgaText::updateTitle()>

c000d1ae <VgaText::setTitle(char*)>:
c000d1ae:	53                   	push   ebx
c000d1af:	83 ec 10             	sub    esp,0x10
c000d1b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ba:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1c0:	50                   	push   eax
c000d1c1:	e8 93 35 ff ff       	call   c0000759 <strcpy>
c000d1c6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1ca:	83 c4 18             	add    esp,0x18
c000d1cd:	5b                   	pop    ebx
c000d1ce:	e9 75 ff ff ff       	jmp    c000d148 <VgaText::updateTitle()>
c000d1d3:	90                   	nop

c000d1d4 <VgaText::decrementCursor(bool)>:
c000d1d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1dc:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1e2:	85 c0                	test   eax,eax
c000d1e4:	74 07                	je     c000d1ed <VgaText::decrementCursor(bool)+0x19>
c000d1e6:	48                   	dec    eax
c000d1e7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1ed:	84 c9                	test   cl,cl
c000d1ef:	74 09                	je     c000d1fa <VgaText::decrementCursor(bool)+0x26>
c000d1f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f5:	e9 64 fa ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000d1fa:	c3                   	ret    
c000d1fb:	90                   	nop

c000d1fc <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d1fc:	53                   	push   ebx
c000d1fd:	83 ec 08             	sub    esp,0x8
c000d200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d208:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d20c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d210:	3c 07                	cmp    al,0x7
c000d212:	75 2a                	jne    c000d23e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d214:	a1 0c 47 02 c0       	mov    eax,ds:0xc002470c
c000d219:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d221:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d229:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d235:	83 c4 08             	add    esp,0x8
c000d238:	5b                   	pop    ebx
c000d239:	e9 fc 2c 00 00       	jmp    c000ff3a <Buzzer::beep(int, int, bool)>
c000d23e:	3c 0d                	cmp    al,0xd
c000d240:	75 0c                	jne    c000d24e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d242:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d24c:	eb 3b                	jmp    c000d289 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d24e:	3c 0a                	cmp    al,0xa
c000d250:	75 40                	jne    c000d292 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d252:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d258:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d262:	8d 50 01             	lea    edx,[eax+0x1]
c000d265:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d26b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d271:	75 12                	jne    c000d285 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d273:	83 ec 0c             	sub    esp,0xc
c000d276:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d27c:	53                   	push   ebx
c000d27d:	e8 2a fb ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d289:	83 c4 08             	add    esp,0x8
c000d28c:	5b                   	pop    ebx
c000d28d:	e9 cc f9 ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000d292:	3c 08                	cmp    al,0x8
c000d294:	75 31                	jne    c000d2c7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d296:	50                   	push   eax
c000d297:	50                   	push   eax
c000d298:	6a 01                	push   0x1
c000d29a:	53                   	push   ebx
c000d29b:	e8 34 ff ff ff       	call   c000d1d4 <VgaText::decrementCursor(bool)>
c000d2a0:	5a                   	pop    edx
c000d2a1:	59                   	pop    ecx
c000d2a2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2a8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ae:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2b4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2ba:	6a 20                	push   0x20
c000d2bc:	53                   	push   ebx
c000d2bd:	e8 90 fb ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2c2:	83 c4 28             	add    esp,0x28
c000d2c5:	5b                   	pop    ebx
c000d2c6:	c3                   	ret    
c000d2c7:	83 ec 08             	sub    esp,0x8
c000d2ca:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2d6:	0f be c0             	movsx  eax,al
c000d2d9:	51                   	push   ecx
c000d2da:	52                   	push   edx
c000d2db:	50                   	push   eax
c000d2dc:	53                   	push   ebx
c000d2dd:	e8 70 fb ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2e6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2ee:	83 c4 28             	add    esp,0x28
c000d2f1:	5b                   	pop    ebx
c000d2f2:	e9 29 fc ff ff       	jmp    c000cf20 <VgaText::incrementCursor(bool)>
c000d2f7:	90                   	nop

c000d2f8 <VgaText::isShowingCursor()>:
c000d2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2fc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <VgaText::isBlinkDisabled()>:
c000d304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d308:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d30e:	83 f0 01             	xor    eax,0x1
c000d311:	c3                   	ret    

c000d312 <VgaText::setCursorHeight(int)>:
c000d312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d31a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d320:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d327:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d32b:	e9 48 f9 ff ff       	jmp    c000cc78 <VgaText::showCursor(bool)>

c000d330 <VgaText::getCursorHeight()>:
c000d330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d334:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d33a:	c3                   	ret    

c000d33b <setActiveTerminal(VgaText*)>:
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 08             	sub    esp,0x8
c000d33f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d343:	85 db                	test   ebx,ebx
c000d345:	75 11                	jne    c000d358 <setActiveTerminal(VgaText*)+0x1d>
c000d347:	c7 44 24 10 20 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021320
c000d34f:	83 c4 08             	add    esp,0x8
c000d352:	5b                   	pop    ebx
c000d353:	e9 1e 86 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c000d358:	50                   	push   eax
c000d359:	50                   	push   eax
c000d35a:	53                   	push   ebx
c000d35b:	68 2e 13 02 c0       	push   0xc002132e
c000d360:	e8 e2 1d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000d365:	a1 64 46 02 c0       	mov    eax,ds:0xc0024664
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	85 c0                	test   eax,eax
c000d36f:	74 0c                	je     c000d37d <setActiveTerminal(VgaText*)+0x42>
c000d371:	83 ec 0c             	sub    esp,0xc
c000d374:	50                   	push   eax
c000d375:	e8 e4 f8 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	51                   	push   ecx
c000d37e:	89 1d 64 46 02 c0    	mov    DWORD PTR ds:0xc0024664,ebx
c000d384:	51                   	push   ecx
c000d385:	53                   	push   ebx
c000d386:	68 46 13 02 c0       	push   0xc0021346
c000d38b:	e8 b7 1d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000d390:	83 c4 0c             	add    esp,0xc
c000d393:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d399:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d39f:	53                   	push   ebx
c000d3a0:	e8 25 fb ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d3a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3a8:	e8 57 ff ff ff       	call   c000d304 <VgaText::isBlinkDisabled()>
c000d3ad:	5a                   	pop    edx
c000d3ae:	59                   	pop    ecx
c000d3af:	0f b6 c0             	movzx  eax,al
c000d3b2:	50                   	push   eax
c000d3b3:	53                   	push   ebx
c000d3b4:	e8 cf f8 ff ff       	call   c000cc88 <VgaText::disableBlink(bool)>
c000d3b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3bc:	e8 6f ff ff ff       	call   c000d330 <VgaText::getCursorHeight()>
c000d3c1:	5a                   	pop    edx
c000d3c2:	59                   	pop    ecx
c000d3c3:	50                   	push   eax
c000d3c4:	53                   	push   ebx
c000d3c5:	e8 48 ff ff ff       	call   c000d312 <VgaText::setCursorHeight(int)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3d4:	75 0a                	jne    c000d3e0 <setActiveTerminal(VgaText*)+0xa5>
c000d3d6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3e4:	83 c4 08             	add    esp,0x8
c000d3e7:	5b                   	pop    ebx
c000d3e8:	e9 1d f8 ff ff       	jmp    c000cc0a <VgaText::load()>

c000d3ed <doTerminalCycle()>:
c000d3ed:	83 ec 18             	sub    esp,0x18
c000d3f0:	a1 60 46 02 c0       	mov    eax,ds:0xc0024660
c000d3f5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3fb:	50                   	push   eax
c000d3fc:	a3 60 46 02 c0       	mov    ds:0xc0024660,eax
c000d401:	e8 35 ff ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c000d406:	83 c4 1c             	add    esp,0x1c
c000d409:	c3                   	ret    

c000d40a <VgaText::doUpdate()>:
c000d40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d40e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d414:	85 c0                	test   eax,eax
c000d416:	74 02                	je     c000d41a <VgaText::doUpdate()+0x10>
c000d418:	ff e0                	jmp    eax
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d41c:	55                   	push   ebp
c000d41d:	57                   	push   edi
c000d41e:	56                   	push   esi
c000d41f:	53                   	push   ebx
c000d420:	83 ec 1c             	sub    esp,0x1c
c000d423:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d427:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d42c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d433:	50                   	push   eax
c000d434:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d439:	50                   	push   eax
c000d43a:	e8 5b f9 ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000d43f:	59                   	pop    ecx
c000d440:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d443:	5b                   	pop    ebx
c000d444:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d44c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d452:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d456:	0f b7 db             	movzx  ebx,bx
c000d459:	01 db                	add    ebx,ebx
c000d45b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d45f:	01 fb                	add    ebx,edi
c000d461:	31 c0                	xor    eax,eax
c000d463:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d466:	84 c9                	test   cl,cl
c000d468:	0f 84 3d 01 00 00    	je     c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d46e:	80 f9 0d             	cmp    cl,0xd
c000d471:	75 0f                	jne    c000d482 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d473:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d47d:	e9 23 01 00 00       	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d482:	80 f9 0a             	cmp    cl,0xa
c000d485:	75 5b                	jne    c000d4e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d487:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d48d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d497:	8d 48 01             	lea    ecx,[eax+0x1]
c000d49a:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4a0:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4a6:	75 12                	jne    c000d4ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b1:	55                   	push   ebp
c000d4b2:	e8 f5 f8 ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	55                   	push   ebp
c000d4be:	e8 9b f7 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d4c3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4cb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d1:	83 c4 10             	add    esp,0x10
c000d4d4:	0f b7 db             	movzx  ebx,bx
c000d4d7:	01 db                	add    ebx,ebx
c000d4d9:	31 c0                	xor    eax,eax
c000d4db:	01 fb                	add    ebx,edi
c000d4dd:	e9 c3 00 00 00       	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4e2:	80 f9 08             	cmp    cl,0x8
c000d4e5:	75 4e                	jne    c000d535 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4eb:	50                   	push   eax
c000d4ec:	50                   	push   eax
c000d4ed:	6a 01                	push   0x1
c000d4ef:	55                   	push   ebp
c000d4f0:	e8 df fc ff ff       	call   c000d1d4 <VgaText::decrementCursor(bool)>
c000d4f5:	58                   	pop    eax
c000d4f6:	5a                   	pop    edx
c000d4f7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4fd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d503:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d509:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d50f:	6a 20                	push   0x20
c000d511:	55                   	push   ebp
c000d512:	e8 3b f9 ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d517:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d51f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d525:	83 c4 20             	add    esp,0x20
c000d528:	0f b7 db             	movzx  ebx,bx
c000d52b:	01 db                	add    ebx,ebx
c000d52d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d531:	01 fb                	add    ebx,edi
c000d533:	eb 70                	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d535:	50                   	push   eax
c000d536:	50                   	push   eax
c000d537:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d53c:	50                   	push   eax
c000d53d:	51                   	push   ecx
c000d53e:	e8 fd f8 ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d543:	66 89 03             	mov    WORD PTR [ebx],ax
c000d546:	83 c4 10             	add    esp,0x10
c000d549:	39 2d 64 46 02 c0    	cmp    DWORD PTR ds:0xc0024664,ebp
c000d54f:	75 2a                	jne    c000d57b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d551:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d557:	85 c0                	test   eax,eax
c000d559:	74 20                	je     c000d57b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d55b:	52                   	push   edx
c000d55c:	52                   	push   edx
c000d55d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d563:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d569:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d571:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d574:	51                   	push   ecx
c000d575:	55                   	push   ebp
c000d576:	ff d0                	call   eax
c000d578:	83 c4 20             	add    esp,0x20
c000d57b:	50                   	push   eax
c000d57c:	83 c3 02             	add    ebx,0x2
c000d57f:	50                   	push   eax
c000d580:	6a 00                	push   0x0
c000d582:	55                   	push   ebp
c000d583:	e8 98 f9 ff ff       	call   c000cf20 <VgaText::incrementCursor(bool)>
c000d588:	83 c4 10             	add    esp,0x10
c000d58b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d592:	75 0f                	jne    c000d5a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d594:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d59c:	0f b7 db             	movzx  ebx,bx
c000d59f:	01 db                	add    ebx,ebx
c000d5a1:	01 fb                	add    ebx,edi
c000d5a3:	b0 01                	mov    al,0x1
c000d5a5:	46                   	inc    esi
c000d5a6:	e9 b8 fe ff ff       	jmp    c000d463 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5af:	83 ec 0c             	sub    esp,0xc
c000d5b2:	55                   	push   ebp
c000d5b3:	e8 a6 f6 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5bf:	84 c0                	test   al,al
c000d5c1:	74 0c                	je     c000d5cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	55                   	push   ebp
c000d5c7:	e8 3e fe ff ff       	call   c000d40a <VgaText::doUpdate()>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5d6:	83 c4 1c             	add    esp,0x1c
c000d5d9:	5b                   	pop    ebx
c000d5da:	5e                   	pop    esi
c000d5db:	5f                   	pop    edi
c000d5dc:	5d                   	pop    ebp
c000d5dd:	c3                   	ret    

c000d5de <VgaText::clearScreen()>:
c000d5de:	57                   	push   edi
c000d5df:	56                   	push   esi
c000d5e0:	31 f6                	xor    esi,esi
c000d5e2:	53                   	push   ebx
c000d5e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e7:	52                   	push   edx
c000d5e8:	6a 00                	push   0x0
c000d5ea:	6a 00                	push   0x0
c000d5ec:	53                   	push   ebx
c000d5ed:	e8 d8 f8 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d5f2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d602:	7e 26                	jle    c000d62a <VgaText::clearScreen()+0x4c>
c000d604:	31 ff                	xor    edi,edi
c000d606:	50                   	push   eax
c000d607:	50                   	push   eax
c000d608:	56                   	push   esi
c000d609:	57                   	push   edi
c000d60a:	47                   	inc    edi
c000d60b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d611:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d617:	6a 20                	push   0x20
c000d619:	53                   	push   ebx
c000d61a:	e8 33 f8 ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d61f:	83 c4 20             	add    esp,0x20
c000d622:	83 ff 50             	cmp    edi,0x50
c000d625:	75 df                	jne    c000d606 <VgaText::clearScreen()+0x28>
c000d627:	46                   	inc    esi
c000d628:	eb d2                	jmp    c000d5fc <VgaText::clearScreen()+0x1e>
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	53                   	push   ebx
c000d62e:	e8 d7 fd ff ff       	call   c000d40a <VgaText::doUpdate()>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d63d:	5b                   	pop    ebx
c000d63e:	5e                   	pop    esi
c000d63f:	5f                   	pop    edi
c000d640:	c3                   	ret    
c000d641:	90                   	nop

c000d642 <VgaText::putchar(char)>:
c000d642:	56                   	push   esi
c000d643:	53                   	push   ebx
c000d644:	83 ec 14             	sub    esp,0x14
c000d647:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d64b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d64f:	3c 5b                	cmp    al,0x5b
c000d651:	75 21                	jne    c000d674 <VgaText::putchar(char)+0x32>
c000d653:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d65a:	74 28                	je     c000d684 <VgaText::putchar(char)+0x42>
c000d65c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d665:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d66f:	e9 e2 00 00 00       	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d674:	3c 1b                	cmp    al,0x1b
c000d676:	75 0c                	jne    c000d684 <VgaText::putchar(char)+0x42>
c000d678:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d67f:	e9 d2 00 00 00       	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d684:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d68a:	84 c9                	test   cl,cl
c000d68c:	0f 84 ab 00 00 00    	je     c000d73d <VgaText::putchar(char)+0xfb>
c000d692:	8d 50 c0             	lea    edx,[eax-0x40]
c000d695:	80 fa 3e             	cmp    dl,0x3e
c000d698:	0f 87 82 00 00 00    	ja     c000d720 <VgaText::putchar(char)+0xde>
c000d69e:	3c 6d                	cmp    al,0x6d
c000d6a0:	75 4d                	jne    c000d6ef <VgaText::putchar(char)+0xad>
c000d6a2:	31 f6                	xor    esi,esi
c000d6a4:	31 d2                	xor    edx,edx
c000d6a6:	31 c0                	xor    eax,eax
c000d6a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6ae:	7e 30                	jle    c000d6e0 <VgaText::putchar(char)+0x9e>
c000d6b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6b8:	80 fa 3b             	cmp    dl,0x3b
c000d6bb:	75 17                	jne    c000d6d4 <VgaText::putchar(char)+0x92>
c000d6bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6c1:	50                   	push   eax
c000d6c2:	53                   	push   ebx
c000d6c3:	e8 fa f5 ff ff       	call   c000ccc2 <VgaText::doANSI_SGR(int)>
c000d6c8:	59                   	pop    ecx
c000d6c9:	31 d2                	xor    edx,edx
c000d6cb:	58                   	pop    eax
c000d6cc:	31 c0                	xor    eax,eax
c000d6ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6d2:	eb 09                	jmp    c000d6dd <VgaText::putchar(char)+0x9b>
c000d6d4:	6b c0 0a             	imul   eax,eax,0xa
c000d6d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6db:	88 ca                	mov    dl,cl
c000d6dd:	46                   	inc    esi
c000d6de:	eb c8                	jmp    c000d6a8 <VgaText::putchar(char)+0x66>
c000d6e0:	84 d2                	test   dl,dl
c000d6e2:	74 31                	je     c000d715 <VgaText::putchar(char)+0xd3>
c000d6e4:	50                   	push   eax
c000d6e5:	53                   	push   ebx
c000d6e6:	e8 d7 f5 ff ff       	call   c000ccc2 <VgaText::doANSI_SGR(int)>
c000d6eb:	58                   	pop    eax
c000d6ec:	5a                   	pop    edx
c000d6ed:	eb 26                	jmp    c000d715 <VgaText::putchar(char)+0xd3>
c000d6ef:	3c 4a                	cmp    al,0x4a
c000d6f1:	75 22                	jne    c000d715 <VgaText::putchar(char)+0xd3>
c000d6f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6fa:	75 19                	jne    c000d715 <VgaText::putchar(char)+0xd3>
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	53                   	push   ebx
c000d700:	e8 d9 fe ff ff       	call   c000d5de <VgaText::clearScreen()>
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	6a 00                	push   0x0
c000d70a:	6a 00                	push   0x0
c000d70c:	53                   	push   ebx
c000d70d:	e8 b8 f7 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d71e:	eb 36                	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d720:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d726:	83 fa 0e             	cmp    edx,0xe
c000d729:	7f 2b                	jg     c000d756 <VgaText::putchar(char)+0x114>
c000d72b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d72e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d734:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d73b:	eb 19                	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d73d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d743:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d749:	0f be c0             	movsx  eax,al
c000d74c:	50                   	push   eax
c000d74d:	53                   	push   ebx
c000d74e:	e8 a9 fa ff ff       	call   c000d1fc <VgaText::putchar(char, VgaColour, VgaColour)>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 c4 14             	add    esp,0x14
c000d759:	5b                   	pop    ebx
c000d75a:	5e                   	pop    esi
c000d75b:	c3                   	ret    

c000d75c <VgaText::puts(char const*)>:
c000d75c:	53                   	push   ebx
c000d75d:	83 ec 08             	sub    esp,0x8
c000d760:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d764:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d767:	84 c0                	test   al,al
c000d769:	74 12                	je     c000d77d <VgaText::puts(char const*)+0x21>
c000d76b:	51                   	push   ecx
c000d76c:	43                   	inc    ebx
c000d76d:	51                   	push   ecx
c000d76e:	50                   	push   eax
c000d76f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d773:	e8 ca fe ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d778:	83 c4 10             	add    esp,0x10
c000d77b:	eb e7                	jmp    c000d764 <VgaText::puts(char const*)+0x8>
c000d77d:	83 c4 08             	add    esp,0x8
c000d780:	5b                   	pop    ebx
c000d781:	c3                   	ret    

c000d782 <VgaText::putx(unsigned int)>:
c000d782:	57                   	push   edi
c000d783:	b9 11 00 00 00       	mov    ecx,0x11
c000d788:	56                   	push   esi
c000d789:	be 62 13 02 c0       	mov    esi,0xc0021362
c000d78e:	53                   	push   ebx
c000d78f:	83 ec 20             	sub    esp,0x20
c000d792:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d796:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d79a:	fc                   	cld    
c000d79b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d79d:	be 08 00 00 00       	mov    esi,0x8
c000d7a2:	50                   	push   eax
c000d7a3:	50                   	push   eax
c000d7a4:	89 d8                	mov    eax,ebx
c000d7a6:	c1 e8 1c             	shr    eax,0x1c
c000d7a9:	c1 e3 04             	shl    ebx,0x4
c000d7ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7b1:	50                   	push   eax
c000d7b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7b6:	e8 87 fe ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	4e                   	dec    esi
c000d7bf:	75 e1                	jne    c000d7a2 <VgaText::putx(unsigned int)+0x20>
c000d7c1:	83 c4 20             	add    esp,0x20
c000d7c4:	5b                   	pop    ebx
c000d7c5:	5e                   	pop    esi
c000d7c6:	5f                   	pop    edi
c000d7c7:	c3                   	ret    

c000d7c8 <VgaText::VgaText(char const*)>:
c000d7c8:	57                   	push   edi
c000d7c9:	56                   	push   esi
c000d7ca:	53                   	push   ebx
c000d7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cf:	83 ec 08             	sub    esp,0x8
c000d7d2:	6a 00                	push   0x0
c000d7d4:	50                   	push   eax
c000d7d5:	e8 4a 05 00 00       	call   c000dd24 <UnixFile::UnixFile(int)>
c000d7da:	83 c4 10             	add    esp,0x10
c000d7dd:	ba c8 13 02 c0       	mov    edx,0xc00213c8
c000d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e6:	89 10                	mov    DWORD PTR [eax],edx
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d813:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d845:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d850:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d856:	bb 40 46 02 c0       	mov    ebx,0xc0024640
c000d85b:	b8 08 00 00 00       	mov    eax,0x8
c000d860:	fc                   	cld    
c000d861:	89 d7                	mov    edi,edx
c000d863:	89 de                	mov    esi,ebx
c000d865:	89 c1                	mov    ecx,eax
c000d867:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	05 1e 10 00 00       	add    eax,0x101e
c000d872:	83 ec 08             	sub    esp,0x8
c000d875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d879:	50                   	push   eax
c000d87a:	e8 da 2e ff ff       	call   c0000759 <strcpy>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d886:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d894:	83 c0 0c             	add    eax,0xc
c000d897:	83 ec 04             	sub    esp,0x4
c000d89a:	68 00 0f 00 00       	push   0xf00
c000d89f:	6a 00                	push   0x0
c000d8a1:	50                   	push   eax
c000d8a2:	e8 13 2e ff ff       	call   c00006ba <memset>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	83 ec 04             	sub    esp,0x4
c000d8ad:	6a 00                	push   0x0
c000d8af:	6a 07                	push   0x7
c000d8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b5:	e8 c0 f4 ff ff       	call   c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	83 ec 08             	sub    esp,0x8
c000d8c0:	6a 02                	push   0x2
c000d8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c6:	e8 47 fa ff ff       	call   c000d312 <VgaText::setCursorHeight(int)>
c000d8cb:	83 c4 10             	add    esp,0x10
c000d8ce:	83 ec 04             	sub    esp,0x4
c000d8d1:	6a 00                	push   0x0
c000d8d3:	6a 00                	push   0x0
c000d8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d9:	e8 ec f5 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	83 ec 08             	sub    esp,0x8
c000d8e4:	6a 01                	push   0x1
c000d8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ea:	e8 89 f3 ff ff       	call   c000cc78 <VgaText::showCursor(bool)>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	6a 01                	push   0x1
c000d8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fb:	e8 88 f3 ff ff       	call   c000cc88 <VgaText::disableBlink(bool)>
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	83 ec 0c             	sub    esp,0xc
c000d906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90a:	e8 cf fc ff ff       	call   c000d5de <VgaText::clearScreen()>
c000d90f:	83 c4 10             	add    esp,0x10
c000d912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d916:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d921:	05 9e 10 00 00       	add    eax,0x109e
c000d926:	83 ec 04             	sub    esp,0x4
c000d929:	68 96 00 00 00       	push   0x96
c000d92e:	6a 00                	push   0x0
c000d930:	50                   	push   eax
c000d931:	e8 84 2d ff ff       	call   c00006ba <memset>
c000d936:	83 c4 10             	add    esp,0x10
c000d939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93d:	05 34 11 00 00       	add    eax,0x1134
c000d942:	83 ec 04             	sub    esp,0x4
c000d945:	68 2c 01 00 00       	push   0x12c
c000d94a:	6a 00                	push   0x0
c000d94c:	50                   	push   eax
c000d94d:	e8 68 2d ff ff       	call   c00006ba <memset>
c000d952:	83 c4 10             	add    esp,0x10
c000d955:	90                   	nop
c000d956:	5b                   	pop    ebx
c000d957:	5e                   	pop    esi
c000d958:	5f                   	pop    edi
c000d959:	c3                   	ret    

c000d95a <VgaText::receiveKey(unsigned char)>:
c000d95a:	55                   	push   ebp
c000d95b:	57                   	push   edi
c000d95c:	56                   	push   esi
c000d95d:	53                   	push   ebx
c000d95e:	83 ec 1c             	sub    esp,0x1c
c000d961:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d965:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d969:	84 db                	test   bl,bl
c000d96b:	0f 84 c9 00 00 00    	je     c000da3a <VgaText::receiveKey(unsigned char)+0xe0>
c000d971:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d977:	80 fb 08             	cmp    bl,0x8
c000d97a:	75 2c                	jne    c000d9a8 <VgaText::receiveKey(unsigned char)+0x4e>
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	57                   	push   edi
c000d980:	e8 52 2d ff ff       	call   c00006d7 <strlen>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	85 c0                	test   eax,eax
c000d98a:	74 41                	je     c000d9cd <VgaText::receiveKey(unsigned char)+0x73>
c000d98c:	50                   	push   eax
c000d98d:	50                   	push   eax
c000d98e:	6a 08                	push   0x8
c000d990:	56                   	push   esi
c000d991:	e8 ac fc ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d996:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d999:	e8 39 2d ff ff       	call   c00006d7 <strlen>
c000d99e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9a6:	eb 22                	jmp    c000d9ca <VgaText::receiveKey(unsigned char)+0x70>
c000d9a8:	52                   	push   edx
c000d9a9:	52                   	push   edx
c000d9aa:	0f be c3             	movsx  eax,bl
c000d9ad:	50                   	push   eax
c000d9ae:	56                   	push   esi
c000d9af:	e8 8e fc ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d9b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9bd:	59                   	pop    ecx
c000d9be:	5d                   	pop    ebp
c000d9bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9c3:	50                   	push   eax
c000d9c4:	57                   	push   edi
c000d9c5:	e8 46 2e ff ff       	call   c0000810 <strcat>
c000d9ca:	83 c4 10             	add    esp,0x10
c000d9cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9d4:	75 05                	jne    c000d9db <VgaText::receiveKey(unsigned char)+0x81>
c000d9d6:	80 fb 0a             	cmp    bl,0xa
c000d9d9:	75 53                	jne    c000da2e <VgaText::receiveKey(unsigned char)+0xd4>
c000d9db:	83 ec 0c             	sub    esp,0xc
c000d9de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9e4:	53                   	push   ebx
c000d9e5:	e8 ed 2c ff ff       	call   c00006d7 <strlen>
c000d9ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ed:	89 c5                	mov    ebp,eax
c000d9ef:	e8 e3 2c ff ff       	call   c00006d7 <strlen>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da00:	76 10                	jbe    c000da12 <VgaText::receiveKey(unsigned char)+0xb8>
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	68 73 13 02 c0       	push   0xc0021373
c000da0a:	e8 67 7f 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	50                   	push   eax
c000da13:	50                   	push   eax
c000da14:	57                   	push   edi
c000da15:	53                   	push   ebx
c000da16:	e8 f5 2d ff ff       	call   c0000810 <strcat>
c000da1b:	83 c4 0c             	add    esp,0xc
c000da1e:	68 96 00 00 00       	push   0x96
c000da23:	6a 00                	push   0x0
c000da25:	57                   	push   edi
c000da26:	e8 8f 2c ff ff       	call   c00006ba <memset>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	56                   	push   esi
c000da32:	e8 d3 f9 ff ff       	call   c000d40a <VgaText::doUpdate()>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	83 c4 1c             	add    esp,0x1c
c000da3d:	5b                   	pop    ebx
c000da3e:	5e                   	pop    esi
c000da3f:	5f                   	pop    edi
c000da40:	5d                   	pop    ebp
c000da41:	c3                   	ret    

c000da42 <VgaText::write(unsigned long long, void*, int*)>:
c000da42:	55                   	push   ebp
c000da43:	57                   	push   edi
c000da44:	56                   	push   esi
c000da45:	53                   	push   ebx
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da4d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da55:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da5c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da5f:	39 eb                	cmp    ebx,ebp
c000da61:	74 13                	je     c000da76 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da63:	50                   	push   eax
c000da64:	43                   	inc    ebx
c000da65:	50                   	push   eax
c000da66:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da6a:	50                   	push   eax
c000da6b:	56                   	push   esi
c000da6c:	e8 d1 fb ff ff       	call   c000d642 <VgaText::putchar(char)>
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	eb e9                	jmp    c000da5f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da76:	83 ec 0c             	sub    esp,0xc
c000da79:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da80:	56                   	push   esi
c000da81:	e8 84 f9 ff ff       	call   c000d40a <VgaText::doUpdate()>
c000da86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da8a:	89 38                	mov    DWORD PTR [eax],edi
c000da8c:	83 c4 1c             	add    esp,0x1c
c000da8f:	31 c0                	xor    eax,eax
c000da91:	5b                   	pop    ebx
c000da92:	5e                   	pop    esi
c000da93:	5f                   	pop    edi
c000da94:	5d                   	pop    ebp
c000da95:	c3                   	ret    

c000da96 <newTerminal(char*)>:
c000da96:	83 ec 28             	sub    esp,0x28
c000da99:	68 60 12 00 00       	push   0x1260
c000da9e:	e8 6f 15 00 00       	call   c000f012 <operator new(unsigned long)>
c000daa3:	5a                   	pop    edx
c000daa4:	59                   	pop    ecx
c000daa5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daa9:	50                   	push   eax
c000daaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daae:	e8 15 fd ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c000dab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab7:	83 c4 2c             	add    esp,0x2c
c000daba:	c3                   	ret    
c000dabb:	90                   	nop

c000dabc <TSS::TSS()>:
c000dabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac7:	90                   	nop
c000dac8:	c3                   	ret    
c000dac9:	90                   	nop

c000daca <TSS::setESP(unsigned long)>:
c000daca:	55                   	push   ebp
c000dacb:	89 e5                	mov    ebp,esp
c000dacd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dad6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad9:	90                   	nop
c000dada:	5d                   	pop    ebp
c000dadb:	c3                   	ret    

c000dadc <TSS::flush()>:
c000dadc:	55                   	push   ebp
c000dadd:	89 e5                	mov    ebp,esp
c000dadf:	83 ec 10             	sub    esp,0x10
c000dae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae7:	83 c8 03             	or     eax,0x3
c000daea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daf2:	66 89 d0             	mov    ax,dx
c000daf5:	0f 00 d8             	ltr    ax
c000daf8:	90                   	nop
c000daf9:	c9                   	leave  
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <TSS::setup(unsigned long, unsigned long)>:
c000dafc:	55                   	push   ebp
c000dafd:	89 e5                	mov    ebp,esp
c000daff:	53                   	push   ebx
c000db00:	83 ec 14             	sub    esp,0x14
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	6a 68                	push   0x68
c000db08:	e8 cc e4 ff ff       	call   c000bfd9 <malloc>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	89 c2                	mov    edx,eax
c000db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db1e:	83 ec 04             	sub    esp,0x4
c000db21:	6a 68                	push   0x68
c000db23:	6a 00                	push   0x0
c000db25:	50                   	push   eax
c000db26:	e8 8f 2b ff ff       	call   c00006ba <memset>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db34:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db40:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db58:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db64:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db70:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db88:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db8b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba0:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaa:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbad:	e8 23 1b 01 00       	call   c001f6d5 <CPU::readCR3()>
c000dbb2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbbb:	83 ec 08             	sub    esp,0x8
c000dbbe:	50                   	push   eax
c000dbbf:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbc2:	50                   	push   eax
c000dbc3:	e8 e8 db ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000dbc8:	83 c4 10             	add    esp,0x10
c000dbcb:	83 ec 08             	sub    esp,0x8
c000dbce:	6a 68                	push   0x68
c000dbd0:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd3:	50                   	push   eax
c000dbd4:	e8 f3 db ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbe0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe3:	83 e0 0f             	and    eax,0xf
c000dbe6:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbe9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbec:	83 c8 40             	or     eax,0x40
c000dbef:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf2:	e8 13 6c 00 00       	call   c001480a <thisCPU()>
c000dbf7:	05 78 01 00 00       	add    eax,0x178
c000dbfc:	83 ec 04             	sub    esp,0x4
c000dbff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc02:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc05:	50                   	push   eax
c000dc06:	e8 f5 db ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	89 c2                	mov    edx,eax
c000dc10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc13:	89 10                	mov    DWORD PTR [eax],edx
c000dc15:	e8 f0 6b 00 00       	call   c001480a <thisCPU()>
c000dc1a:	05 78 01 00 00       	add    eax,0x178
c000dc1f:	83 ec 0c             	sub    esp,0xc
c000dc22:	50                   	push   eax
c000dc23:	e8 1c dc ff ff       	call   c000b844 <GDT::flush()>
c000dc28:	83 c4 10             	add    esp,0x10
c000dc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc30:	83 ec 08             	sub    esp,0x8
c000dc33:	50                   	push   eax
c000dc34:	68 dc 13 02 c0       	push   0xc00213dc
c000dc39:	e8 09 15 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000dc3e:	83 c4 10             	add    esp,0x10
c000dc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc44:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc49:	c9                   	leave  
c000dc4a:	c3                   	ret    
c000dc4b:	90                   	nop

c000dc4c <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc57:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc5c:	75 08                	jne    c000dc66 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc5e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc64:	eb 38                	jmp    c000dc9e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc66:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc6b:	75 17                	jne    c000dc84 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc75:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc7b:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc81:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc84:	89 c1                	mov    ecx,eax
c000dc86:	83 e1 fd             	and    ecx,0xfffffffd
c000dc89:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dc8f:	74 cd                	je     c000dc5e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc91:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc96:	83 e0 ef             	and    eax,0xffffffef
c000dc99:	83 f8 08             	cmp    eax,0x8
c000dc9c:	76 c0                	jbe    c000dc5e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dc9e:	31 c0                	xor    eax,eax
c000dca0:	c3                   	ret    
c000dca1:	90                   	nop

c000dca2 <ReservedFilename::isAtty()>:
c000dca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dca6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dca9:	31 c0                	xor    eax,eax
c000dcab:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcb1:	74 09                	je     c000dcbc <ReservedFilename::isAtty()+0x1a>
c000dcb3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dcb9:	0f 94 c0             	sete   al
c000dcbc:	c3                   	ret    
c000dcbd:	90                   	nop

c000dcbe <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dccd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dcd2:	75 08                	jne    c000dcdc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dcd4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcda:	eb 3d                	jmp    c000dd19 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcdc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dce1:	75 17                	jne    c000dcfa <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dce3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dce8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dceb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcf1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcf7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dcfa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcff:	75 04                	jne    c000dd05 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd01:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd03:	eb 14                	jmp    c000dd19 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd05:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd0a:	74 c8                	je     c000dcd4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd0c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd11:	83 e0 ef             	and    eax,0xffffffef
c000dd14:	83 f8 08             	cmp    eax,0x8
c000dd17:	76 bb                	jbe    c000dcd4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd19:	31 c0                	xor    eax,eax
c000dd1b:	c3                   	ret    

c000dd1c <UnixFile::getFileDescriptor()>:
c000dd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd23:	c3                   	ret    

c000dd24 <UnixFile::UnixFile(int)>:
c000dd24:	53                   	push   ebx
c000dd25:	83 ec 18             	sub    esp,0x18
c000dd28:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000dd2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd31:	89 10                	mov    DWORD PTR [eax],edx
c000dd33:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd3b:	0f 8f 4d 01 00 00    	jg     c000de8e <UnixFile::UnixFile(int)+0x16a>
c000dd41:	a1 40 3a 02 c0       	mov    eax,ds:0xc0023a40
c000dd46:	8d 50 01             	lea    edx,[eax+0x1]
c000dd49:	89 15 40 3a 02 c0    	mov    DWORD PTR ds:0xc0023a40,edx
c000dd4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd53:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd56:	83 ec 08             	sub    esp,0x8
c000dd59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd5d:	68 f8 46 02 c0       	push   0xc00246f8
c000dd62:	e8 e3 19 01 00       	call   c001f74a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd67:	83 c4 10             	add    esp,0x10
c000dd6a:	a0 f4 46 02 c0       	mov    al,ds:0xc00246f4
c000dd6f:	83 f0 01             	xor    eax,0x1
c000dd72:	84 c0                	test   al,al
c000dd74:	0f 84 15 01 00 00    	je     c000de8f <UnixFile::UnixFile(int)+0x16b>
c000dd7a:	c6 05 f4 46 02 c0 01 	mov    BYTE PTR ds:0xc00246f4,0x1
c000dd81:	83 ec 0c             	sub    esp,0xc
c000dd84:	6a 0c                	push   0xc
c000dd86:	e8 87 12 00 00       	call   c000f012 <operator new(unsigned long)>
c000dd8b:	83 c4 10             	add    esp,0x10
c000dd8e:	89 c3                	mov    ebx,eax
c000dd90:	83 ec 08             	sub    esp,0x8
c000dd93:	68 03 ff ff 0f       	push   0xfffff03
c000dd98:	53                   	push   ebx
c000dd99:	e8 f6 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c000dda7:	83 ec 0c             	sub    esp,0xc
c000ddaa:	6a 0c                	push   0xc
c000ddac:	e8 61 12 00 00       	call   c000f012 <operator new(unsigned long)>
c000ddb1:	83 c4 10             	add    esp,0x10
c000ddb4:	89 c3                	mov    ebx,eax
c000ddb6:	83 ec 08             	sub    esp,0x8
c000ddb9:	68 01 ff ff 0f       	push   0xfffff01
c000ddbe:	53                   	push   ebx
c000ddbf:	e8 d0 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000ddc4:	83 c4 10             	add    esp,0x10
c000ddc7:	89 1d f0 46 02 c0    	mov    DWORD PTR ds:0xc00246f0,ebx
c000ddcd:	83 ec 0c             	sub    esp,0xc
c000ddd0:	6a 0c                	push   0xc
c000ddd2:	e8 3b 12 00 00       	call   c000f012 <operator new(unsigned long)>
c000ddd7:	83 c4 10             	add    esp,0x10
c000ddda:	89 c3                	mov    ebx,eax
c000dddc:	83 ec 08             	sub    esp,0x8
c000dddf:	68 00 ff ff 0f       	push   0xfffff00
c000dde4:	53                   	push   ebx
c000dde5:	e8 aa 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c000ddf3:	83 ec 0c             	sub    esp,0xc
c000ddf6:	6a 0c                	push   0xc
c000ddf8:	e8 15 12 00 00       	call   c000f012 <operator new(unsigned long)>
c000ddfd:	83 c4 10             	add    esp,0x10
c000de00:	89 c3                	mov    ebx,eax
c000de02:	83 ec 08             	sub    esp,0x8
c000de05:	68 02 ff ff 0f       	push   0xfffff02
c000de0a:	53                   	push   ebx
c000de0b:	e8 84 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c000de19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de21:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de26:	7f 67                	jg     c000de8f <UnixFile::UnixFile(int)+0x16b>
c000de28:	83 ec 0c             	sub    esp,0xc
c000de2b:	6a 0c                	push   0xc
c000de2d:	e8 e0 11 00 00       	call   c000f012 <operator new(unsigned long)>
c000de32:	83 c4 10             	add    esp,0x10
c000de35:	89 c3                	mov    ebx,eax
c000de37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de3b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de40:	83 ec 08             	sub    esp,0x8
c000de43:	50                   	push   eax
c000de44:	53                   	push   ebx
c000de45:	e8 4a 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de51:	89 1c 85 c0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb940],ebx
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	6a 0c                	push   0xc
c000de5d:	e8 b0 11 00 00       	call   c000f012 <operator new(unsigned long)>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 c3                	mov    ebx,eax
c000de67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de6b:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de70:	83 ec 08             	sub    esp,0x8
c000de73:	50                   	push   eax
c000de74:	53                   	push   ebx
c000de75:	e8 1a 00 00 00       	call   c000de94 <ReservedFilename::ReservedFilename(int)>
c000de7a:	83 c4 10             	add    esp,0x10
c000de7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de81:	89 1c 85 80 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb980],ebx
c000de88:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de8c:	eb 93                	jmp    c000de21 <UnixFile::UnixFile(int)+0xfd>
c000de8e:	90                   	nop
c000de8f:	83 c4 18             	add    esp,0x18
c000de92:	5b                   	pop    ebx
c000de93:	c3                   	ret    

c000de94 <ReservedFilename::ReservedFilename(int)>:
c000de94:	83 ec 0c             	sub    esp,0xc
c000de97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9b:	83 ec 08             	sub    esp,0x8
c000de9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea2:	50                   	push   eax
c000dea3:	e8 7c fe ff ff       	call   c000dd24 <UnixFile::UnixFile(int)>
c000dea8:	83 c4 10             	add    esp,0x10
c000deab:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c000deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb4:	89 10                	mov    DWORD PTR [eax],edx
c000deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000debe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dec1:	90                   	nop
c000dec2:	83 c4 0c             	add    esp,0xc
c000dec5:	c3                   	ret    

c000dec6 <UnixFile::~UnixFile()>:
c000dec6:	83 ec 1c             	sub    esp,0x1c
c000dec9:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000dece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded2:	89 10                	mov    DWORD PTR [eax],edx
c000ded4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dedb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000dee0:	7f 73                	jg     c000df55 <UnixFile::~UnixFile()+0x8f>
c000dee2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000deea:	83 ec 0c             	sub    esp,0xc
c000deed:	68 f8 46 02 c0       	push   0xc00246f8
c000def2:	e8 27 19 01 00       	call   c001f81e <LinkedList<UnixFile>::getFirstElement()>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	68 f8 46 02 c0       	push   0xc00246f8
c000df06:	e8 1b 19 01 00       	call   c001f826 <LinkedList<UnixFile>::removeFirst()>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df12:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df16:	74 40                	je     c000df58 <UnixFile::~UnixFile()+0x92>
c000df18:	83 ec 08             	sub    esp,0x8
c000df1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df1f:	68 f8 46 02 c0       	push   0xc00246f8
c000df24:	e8 21 18 01 00       	call   c001f74a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df30:	8d 50 01             	lea    edx,[eax+0x1]
c000df33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df37:	3d 88 13 00 00       	cmp    eax,0x1388
c000df3c:	0f 94 c0             	sete   al
c000df3f:	84 c0                	test   al,al
c000df41:	74 a7                	je     c000deea <UnixFile::~UnixFile()+0x24>
c000df43:	83 ec 0c             	sub    esp,0xc
c000df46:	68 a0 14 02 c0       	push   0xc00214a0
c000df4b:	e8 26 7a 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000df50:	83 c4 10             	add    esp,0x10
c000df53:	eb 95                	jmp    c000deea <UnixFile::~UnixFile()+0x24>
c000df55:	90                   	nop
c000df56:	eb 01                	jmp    c000df59 <UnixFile::~UnixFile()+0x93>
c000df58:	90                   	nop
c000df59:	90                   	nop
c000df5a:	83 c4 1c             	add    esp,0x1c
c000df5d:	c3                   	ret    

c000df5e <UnixFile::~UnixFile()>:
c000df5e:	83 ec 0c             	sub    esp,0xc
c000df61:	83 ec 0c             	sub    esp,0xc
c000df64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df68:	e8 59 ff ff ff       	call   c000dec6 <UnixFile::~UnixFile()>
c000df6d:	83 c4 10             	add    esp,0x10
c000df70:	83 ec 08             	sub    esp,0x8
c000df73:	6a 0c                	push   0xc
c000df75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df79:	e8 a3 10 00 00       	call   c000f021 <operator delete(void*, unsigned long)>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	83 c4 0c             	add    esp,0xc
c000df84:	c3                   	ret    
c000df85:	90                   	nop

c000df86 <ReservedFilename::~ReservedFilename()>:
c000df86:	83 ec 0c             	sub    esp,0xc
c000df89:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c000df8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df92:	89 10                	mov    DWORD PTR [eax],edx
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	50                   	push   eax
c000df9c:	e8 25 ff ff ff       	call   c000dec6 <UnixFile::~UnixFile()>
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	90                   	nop
c000dfa5:	83 c4 0c             	add    esp,0xc
c000dfa8:	c3                   	ret    
c000dfa9:	90                   	nop

c000dfaa <ReservedFilename::~ReservedFilename()>:
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	83 ec 0c             	sub    esp,0xc
c000dfb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb4:	e8 cd ff ff ff       	call   c000df86 <ReservedFilename::~ReservedFilename()>
c000dfb9:	83 c4 10             	add    esp,0x10
c000dfbc:	83 ec 08             	sub    esp,0x8
c000dfbf:	6a 0c                	push   0xc
c000dfc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc5:	e8 57 10 00 00       	call   c000f021 <operator delete(void*, unsigned long)>
c000dfca:	83 c4 10             	add    esp,0x10
c000dfcd:	83 c4 0c             	add    esp,0xc
c000dfd0:	c3                   	ret    

c000dfd1 <getFromFileDescriptor(int)>:
c000dfd1:	53                   	push   ebx
c000dfd2:	83 ec 08             	sub    esp,0x8
c000dfd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfd9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfdf:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfe5:	7f 2c                	jg     c000e013 <getFromFileDescriptor(int)+0x42>
c000dfe7:	83 ec 0c             	sub    esp,0xc
c000dfea:	68 f8 46 02 c0       	push   0xc00246f8
c000dfef:	e8 2a 18 01 00       	call   c001f81e <LinkedList<UnixFile>::getFirstElement()>
c000dff4:	83 c4 10             	add    esp,0x10
c000dff7:	85 c0                	test   eax,eax
c000dff9:	75 04                	jne    c000dfff <getFromFileDescriptor(int)+0x2e>
c000dffb:	31 c0                	xor    eax,eax
c000dffd:	eb 6e                	jmp    c000e06d <getFromFileDescriptor(int)+0x9c>
c000dfff:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e002:	74 69                	je     c000e06d <getFromFileDescriptor(int)+0x9c>
c000e004:	52                   	push   edx
c000e005:	52                   	push   edx
c000e006:	50                   	push   eax
c000e007:	68 f8 46 02 c0       	push   0xc00246f8
c000e00c:	e8 b7 18 01 00       	call   c001f8c8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e011:	eb e1                	jmp    c000dff4 <getFromFileDescriptor(int)+0x23>
c000e013:	a1 ec 46 02 c0       	mov    eax,ds:0xc00246ec
c000e018:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e01e:	74 4d                	je     c000e06d <getFromFileDescriptor(int)+0x9c>
c000e020:	a1 f0 46 02 c0       	mov    eax,ds:0xc00246f0
c000e025:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e02b:	74 40                	je     c000e06d <getFromFileDescriptor(int)+0x9c>
c000e02d:	a1 e8 46 02 c0       	mov    eax,ds:0xc00246e8
c000e032:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e038:	74 33                	je     c000e06d <getFromFileDescriptor(int)+0x9c>
c000e03a:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c000e03f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e045:	74 26                	je     c000e06d <getFromFileDescriptor(int)+0x9c>
c000e047:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e04d:	83 f8 08             	cmp    eax,0x8
c000e050:	77 09                	ja     c000e05b <getFromFileDescriptor(int)+0x8a>
c000e052:	8b 04 85 c0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb940]
c000e059:	eb 12                	jmp    c000e06d <getFromFileDescriptor(int)+0x9c>
c000e05b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e061:	83 fb 08             	cmp    ebx,0x8
c000e064:	77 95                	ja     c000dffb <getFromFileDescriptor(int)+0x2a>
c000e066:	8b 04 9d 80 46 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb980]
c000e06d:	83 c4 08             	add    esp,0x8
c000e070:	5b                   	pop    ebx
c000e071:	c3                   	ret    

c000e072 <__static_initialization_and_destruction_0(int, int)>:
c000e072:	83 ec 0c             	sub    esp,0xc
c000e075:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e07a:	75 34                	jne    c000e0b0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e07c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e084:	75 2a                	jne    c000e0b0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	68 f8 46 02 c0       	push   0xc00246f8
c000e08e:	e8 5f 16 01 00       	call   c001f6f2 <LinkedList<UnixFile>::LinkedList()>
c000e093:	83 c4 10             	add    esp,0x10
c000e096:	83 ec 04             	sub    esp,0x4
c000e099:	68 bc 39 02 c0       	push   0xc00239bc
c000e09e:	68 f8 46 02 c0       	push   0xc00246f8
c000e0a3:	68 f0 f6 01 c0       	push   0xc001f6f0
c000e0a8:	e8 f0 0e 00 00       	call   c000ef9d <__cxa_atexit>
c000e0ad:	83 c4 10             	add    esp,0x10
c000e0b0:	90                   	nop
c000e0b1:	83 c4 0c             	add    esp,0xc
c000e0b4:	c3                   	ret    

c000e0b5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0b5:	83 ec 0c             	sub    esp,0xc
c000e0b8:	83 ec 08             	sub    esp,0x8
c000e0bb:	68 ff ff 00 00       	push   0xffff
c000e0c0:	6a 01                	push   0x1
c000e0c2:	e8 ab ff ff ff       	call   c000e072 <__static_initialization_and_destruction_0(int, int)>
c000e0c7:	83 c4 10             	add    esp,0x10
c000e0ca:	83 c4 0c             	add    esp,0xc
c000e0cd:	c3                   	ret    

c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0ce:	53                   	push   ebx
c000e0cf:	8b 15 48 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a48
c000e0d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0dd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0e3:	89 c8                	mov    eax,ecx
c000e0e5:	d1 e8                	shr    eax,1
c000e0e7:	01 d0                	add    eax,edx
c000e0e9:	83 e1 01             	and    ecx,0x1
c000e0ec:	8a 10                	mov    dl,BYTE PTR [eax]
c000e0ee:	75 09                	jne    c000e0f9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e0f0:	83 e2 f0             	and    edx,0xfffffff0
c000e0f3:	09 da                	or     edx,ebx
c000e0f5:	88 10                	mov    BYTE PTR [eax],dl
c000e0f7:	5b                   	pop    ebx
c000e0f8:	c3                   	ret    
c000e0f9:	c1 e3 04             	shl    ebx,0x4
c000e0fc:	83 e2 0f             	and    edx,0xf
c000e0ff:	09 da                	or     edx,ebx
c000e101:	88 10                	mov    BYTE PTR [eax],dl
c000e103:	5b                   	pop    ebx
c000e104:	c3                   	ret    

c000e105 <Virt::getPageState(unsigned long)>:
c000e105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e109:	8b 0d 48 3a 02 c0    	mov    ecx,DWORD PTR ds:0xc0023a48
c000e10f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e115:	89 d0                	mov    eax,edx
c000e117:	d1 e8                	shr    eax,1
c000e119:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e11c:	88 c8                	mov    al,cl
c000e11e:	c0 e8 04             	shr    al,0x4
c000e121:	83 e2 01             	and    edx,0x1
c000e124:	75 05                	jne    c000e12b <Virt::getPageState(unsigned long)+0x26>
c000e126:	88 c8                	mov    al,cl
c000e128:	83 e0 0f             	and    eax,0xf
c000e12b:	c3                   	ret    

c000e12c <Virt::allocateKernelVirtualPages(int)>:
c000e12c:	55                   	push   ebp
c000e12d:	31 ed                	xor    ebp,ebp
c000e12f:	57                   	push   edi
c000e130:	56                   	push   esi
c000e131:	53                   	push   ebx
c000e132:	31 db                	xor    ebx,ebx
c000e134:	83 ec 1c             	sub    esp,0x1c
c000e137:	8b 3d 44 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a44
c000e13d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e141:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e146:	57                   	push   edi
c000e147:	e8 b9 ff ff ff       	call   c000e105 <Virt::getPageState(unsigned long)>
c000e14c:	5a                   	pop    edx
c000e14d:	84 c0                	test   al,al
c000e14f:	75 3a                	jne    c000e18b <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e151:	85 db                	test   ebx,ebx
c000e153:	75 02                	jne    c000e157 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e155:	89 fd                	mov    ebp,edi
c000e157:	43                   	inc    ebx
c000e158:	39 f3                	cmp    ebx,esi
c000e15a:	74 5a                	je     c000e1b6 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e15c:	47                   	inc    edi
c000e15d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e163:	76 31                	jbe    c000e196 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e165:	c7 05 44 3a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023a44,0xc8000
c000e16f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e174:	75 28                	jne    c000e19e <Virt::allocateKernelVirtualPages(int)+0x72>
c000e176:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e17b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e180:	57                   	push   edi
c000e181:	e8 7f ff ff ff       	call   c000e105 <Virt::getPageState(unsigned long)>
c000e186:	5a                   	pop    edx
c000e187:	84 c0                	test   al,al
c000e189:	74 c6                	je     c000e151 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e18b:	47                   	inc    edi
c000e18c:	31 db                	xor    ebx,ebx
c000e18e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e194:	77 cf                	ja     c000e165 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e196:	89 3d 44 3a 02 c0    	mov    DWORD PTR ds:0xc0023a44,edi
c000e19c:	eb a8                	jmp    c000e146 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	68 f8 14 02 c0       	push   0xc00214f8
c000e1a6:	e8 cb 77 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e1ab:	8b 3d 44 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a44
c000e1b1:	83 c4 10             	add    esp,0x10
c000e1b4:	eb 90                	jmp    c000e146 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b6:	89 2d 44 3a 02 c0    	mov    DWORD PTR ds:0xc0023a44,ebp
c000e1bc:	4b                   	dec    ebx
c000e1bd:	74 5f                	je     c000e21e <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1bf:	85 f6                	test   esi,esi
c000e1c1:	74 3d                	je     c000e200 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1c3:	89 e8                	mov    eax,ebp
c000e1c5:	31 db                	xor    ebx,ebx
c000e1c7:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1ca:	eb 14                	jmp    c000e1e0 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1cc:	6a 01                	push   0x1
c000e1ce:	43                   	inc    ebx
c000e1cf:	50                   	push   eax
c000e1d0:	e8 f9 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1d5:	58                   	pop    eax
c000e1d6:	39 f3                	cmp    ebx,esi
c000e1d8:	5a                   	pop    edx
c000e1d9:	74 25                	je     c000e200 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1db:	a1 44 3a 02 c0       	mov    eax,ds:0xc0023a44
c000e1e0:	8d 50 01             	lea    edx,[eax+0x1]
c000e1e3:	85 db                	test   ebx,ebx
c000e1e5:	89 15 44 3a 02 c0    	mov    DWORD PTR ds:0xc0023a44,edx
c000e1eb:	74 20                	je     c000e20d <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1ed:	39 df                	cmp    edi,ebx
c000e1ef:	75 db                	jne    c000e1cc <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e1f1:	6a 03                	push   0x3
c000e1f3:	43                   	inc    ebx
c000e1f4:	50                   	push   eax
c000e1f5:	e8 d4 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1fa:	59                   	pop    ecx
c000e1fb:	39 f3                	cmp    ebx,esi
c000e1fd:	58                   	pop    eax
c000e1fe:	75 db                	jne    c000e1db <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e200:	83 c4 1c             	add    esp,0x1c
c000e203:	89 e8                	mov    eax,ebp
c000e205:	c1 e0 0c             	shl    eax,0xc
c000e208:	5b                   	pop    ebx
c000e209:	5e                   	pop    esi
c000e20a:	5f                   	pop    edi
c000e20b:	5d                   	pop    ebp
c000e20c:	c3                   	ret    
c000e20d:	6a 02                	push   0x2
c000e20f:	bb 01 00 00 00       	mov    ebx,0x1
c000e214:	50                   	push   eax
c000e215:	e8 b4 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e21a:	58                   	pop    eax
c000e21b:	5a                   	pop    edx
c000e21c:	eb bd                	jmp    c000e1db <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e21e:	6a 04                	push   0x4
c000e220:	8d 45 01             	lea    eax,[ebp+0x1]
c000e223:	55                   	push   ebp
c000e224:	a3 44 3a 02 c0       	mov    ds:0xc0023a44,eax
c000e229:	e8 a0 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22e:	59                   	pop    ecx
c000e22f:	5b                   	pop    ebx
c000e230:	89 e8                	mov    eax,ebp
c000e232:	c1 e0 0c             	shl    eax,0xc
c000e235:	83 c4 1c             	add    esp,0x1c
c000e238:	5b                   	pop    ebx
c000e239:	5e                   	pop    esi
c000e23a:	5f                   	pop    edi
c000e23b:	5d                   	pop    ebp
c000e23c:	c3                   	ret    

c000e23d <Virt::virtualMemorySetup()>:
c000e23d:	53                   	push   ebx
c000e23e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e243:	83 ec 08             	sub    esp,0x8
c000e246:	6a 0f                	push   0xf
c000e248:	53                   	push   ebx
c000e249:	43                   	inc    ebx
c000e24a:	e8 7f fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e24f:	59                   	pop    ecx
c000e250:	58                   	pop    eax
c000e251:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e257:	75 ed                	jne    c000e246 <Virt::virtualMemorySetup()+0x9>
c000e259:	50                   	push   eax
c000e25a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e25f:	50                   	push   eax
c000e260:	68 00 00 00 c8       	push   0xc8000000
c000e265:	68 7f 16 02 c0       	push   0xc002167f
c000e26a:	e8 d8 0e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e26f:	58                   	pop    eax
c000e270:	5a                   	pop    edx
c000e271:	68 00 f0 ff ef       	push   0xeffff000
c000e276:	68 93 16 02 c0       	push   0xc0021693
c000e27b:	e8 c7 0e 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e280:	83 c4 10             	add    esp,0x10
c000e283:	50                   	push   eax
c000e284:	50                   	push   eax
c000e285:	6a 00                	push   0x0
c000e287:	53                   	push   ebx
c000e288:	43                   	inc    ebx
c000e289:	e8 40 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e297:	75 ea                	jne    c000e283 <Virt::virtualMemorySetup()+0x46>
c000e299:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e29e:	51                   	push   ecx
c000e29f:	51                   	push   ecx
c000e2a0:	6a 0f                	push   0xf
c000e2a2:	53                   	push   ebx
c000e2a3:	43                   	inc    ebx
c000e2a4:	e8 25 fe ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2b2:	75 ea                	jne    c000e29e <Virt::virtualMemorySetup()+0x61>
c000e2b4:	83 c4 08             	add    esp,0x8
c000e2b7:	5b                   	pop    ebx
c000e2b8:	c3                   	ret    

c000e2b9 <Virt::getAKernelVAS()>:
c000e2b9:	a1 04 47 02 c0       	mov    eax,ds:0xc0024704
c000e2be:	c3                   	ret    

c000e2bf <Virt::setupPageSwapping(int)>:
c000e2bf:	57                   	push   edi
c000e2c0:	56                   	push   esi
c000e2c1:	53                   	push   ebx
c000e2c2:	83 ec 1c             	sub    esp,0x1c
c000e2c5:	68 14 01 00 00       	push   0x114
c000e2ca:	e8 43 0d 00 00       	call   c000f012 <operator new(unsigned long)>
c000e2cf:	83 c4 0c             	add    esp,0xc
c000e2d2:	8b 3d f4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259f4
c000e2d8:	89 c6                	mov    esi,eax
c000e2da:	57                   	push   edi
c000e2db:	68 a7 16 02 c0       	push   0xc00216a7
c000e2e0:	50                   	push   eax
c000e2e1:	e8 98 13 00 00       	call   c000f67e <File::File(char const*, Process*)>
c000e2e6:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2e9:	e8 6c 15 00 00       	call   c000f85a <File::unlink()>
c000e2ee:	58                   	pop    eax
c000e2ef:	5a                   	pop    edx
c000e2f0:	6a 12                	push   0x12
c000e2f2:	56                   	push   esi
c000e2f3:	e8 ea 13 00 00       	call   c000f6e2 <File::open(FileOpenMode)>
c000e2f8:	83 c4 10             	add    esp,0x10
c000e2fb:	85 c0                	test   eax,eax
c000e2fd:	0f 85 b6 00 00 00    	jne    c000e3b9 <Virt::setupPageSwapping(int)+0xfa>
c000e303:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e307:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e30f:	c1 e3 08             	shl    ebx,0x8
c000e312:	83 ec 0c             	sub    esp,0xc
c000e315:	c1 fb 04             	sar    ebx,0x4
c000e318:	68 00 00 01 00       	push   0x10000
c000e31d:	e8 b7 dc ff ff       	call   c000bfd9 <malloc>
c000e322:	83 c4 0c             	add    esp,0xc
c000e325:	89 c7                	mov    edi,eax
c000e327:	68 00 00 01 00       	push   0x10000
c000e32c:	6a 00                	push   0x0
c000e32e:	50                   	push   eax
c000e32f:	e8 86 23 ff ff       	call   c00006ba <memset>
c000e334:	83 c4 10             	add    esp,0x10
c000e337:	4b                   	dec    ebx
c000e338:	83 fb ff             	cmp    ebx,0xffffffff
c000e33b:	74 4a                	je     c000e387 <Virt::setupPageSwapping(int)+0xc8>
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	8b 06                	mov    eax,DWORD PTR [esi]
c000e342:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e346:	52                   	push   edx
c000e347:	57                   	push   edi
c000e348:	6a 00                	push   0x0
c000e34a:	68 00 00 01 00       	push   0x10000
c000e34f:	56                   	push   esi
c000e350:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e353:	83 c4 20             	add    esp,0x20
c000e356:	85 c0                	test   eax,eax
c000e358:	75 4d                	jne    c000e3a7 <Virt::setupPageSwapping(int)+0xe8>
c000e35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e35e:	3d 00 00 01 00       	cmp    eax,0x10000
c000e363:	74 d2                	je     c000e337 <Virt::setupPageSwapping(int)+0x78>
c000e365:	52                   	push   edx
c000e366:	4b                   	dec    ebx
c000e367:	52                   	push   edx
c000e368:	50                   	push   eax
c000e369:	68 fa 16 02 c0       	push   0xc00216fa
c000e36e:	e8 d4 0d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e373:	c7 04 24 03 17 02 c0 	mov    DWORD PTR [esp],0xc0021703
c000e37a:	e8 f7 75 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 fb ff             	cmp    ebx,0xffffffff
c000e385:	75 b6                	jne    c000e33d <Virt::setupPageSwapping(int)+0x7e>
c000e387:	83 ec 0c             	sub    esp,0xc
c000e38a:	56                   	push   esi
c000e38b:	e8 b0 13 00 00       	call   c000f740 <File::close()>
c000e390:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e393:	e8 61 dc ff ff       	call   c000bff9 <rfree>
c000e398:	8b 06                	mov    eax,DWORD PTR [esi]
c000e39a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e39d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3a0:	83 c4 20             	add    esp,0x20
c000e3a3:	5b                   	pop    ebx
c000e3a4:	5e                   	pop    esi
c000e3a5:	5f                   	pop    edi
c000e3a6:	c3                   	ret    
c000e3a7:	51                   	push   ecx
c000e3a8:	51                   	push   ecx
c000e3a9:	50                   	push   eax
c000e3aa:	68 e2 16 02 c0       	push   0xc00216e2
c000e3af:	e8 93 0d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e3b4:	83 c4 10             	add    esp,0x10
c000e3b7:	eb a1                	jmp    c000e35a <Virt::setupPageSwapping(int)+0x9b>
c000e3b9:	53                   	push   ebx
c000e3ba:	53                   	push   ebx
c000e3bb:	50                   	push   eax
c000e3bc:	68 be 16 02 c0       	push   0xc00216be
c000e3c1:	e8 81 0d 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e3c6:	c7 04 24 c7 16 02 c0 	mov    DWORD PTR [esp],0xc00216c7
c000e3cd:	e8 a4 75 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	e9 29 ff ff ff       	jmp    c000e303 <Virt::setupPageSwapping(int)+0x44>

c000e3da <VAS::VAS()>:
c000e3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e9:	a3 04 47 02 c0       	mov    ds:0xc0024704,eax
c000e3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f2:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e3fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e401:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e408:	90                   	nop
c000e409:	c3                   	ret    

c000e40a <VAS::VAS(VAS*)>:
c000e40a:	83 ec 0c             	sub    esp,0xc
c000e40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e411:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	68 18 15 02 c0       	push   0xc0021518
c000e420:	e8 51 75 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	90                   	nop
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    
c000e42d:	90                   	nop

c000e42e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e42e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e432:	89 c2                	mov    edx,eax
c000e434:	c1 ea 16             	shr    edx,0x16
c000e437:	c1 e8 0a             	shr    eax,0xa
c000e43a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e43f:	19 c9                	sbb    ecx,ecx
c000e441:	25 fc 0f 00 00       	and    eax,0xffc
c000e446:	c1 e2 0c             	shl    edx,0xc
c000e449:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e44f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e456:	01 d0                	add    eax,edx
c000e458:	c3                   	ret    
c000e459:	90                   	nop

c000e45a <VAS::getPageTableEntry(unsigned long)>:
c000e45a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e45e:	89 ca                	mov    edx,ecx
c000e460:	c1 ea 16             	shr    edx,0x16
c000e463:	c1 e9 0a             	shr    ecx,0xa
c000e466:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e46c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e472:	c1 e0 0c             	shl    eax,0xc
c000e475:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e478:	c3                   	ret    

c000e479 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e479:	57                   	push   edi
c000e47a:	56                   	push   esi
c000e47b:	be 01 00 00 00       	mov    esi,0x1
c000e480:	53                   	push   ebx
c000e481:	83 ec 10             	sub    esp,0x10
c000e484:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e488:	c1 eb 0c             	shr    ebx,0xc
c000e48b:	eb 3e                	jmp    c000e4cb <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e48d:	e8 27 fe ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c000e492:	51                   	push   ecx
c000e493:	51                   	push   ecx
c000e494:	57                   	push   edi
c000e495:	50                   	push   eax
c000e496:	e8 bf ff ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4a4:	f6 c4 04             	test   ah,0x4
c000e4a7:	75 5f                	jne    c000e508 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4a9:	80 fa 04             	cmp    dl,0x4
c000e4ac:	74 78                	je     c000e526 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4ae:	80 fa 02             	cmp    dl,0x2
c000e4b1:	0f 84 88 00 00 00    	je     c000e53f <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4b7:	80 fa 03             	cmp    dl,0x3
c000e4ba:	0f 84 ac 00 00 00    	je     c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4c0:	fe ca                	dec    dl
c000e4c2:	0f 84 92 00 00 00    	je     c000e55a <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4c8:	43                   	inc    ebx
c000e4c9:	31 f6                	xor    esi,esi
c000e4cb:	53                   	push   ebx
c000e4cc:	e8 34 fc ff ff       	call   c000e105 <Virt::getPageState(unsigned long)>
c000e4d1:	5f                   	pop    edi
c000e4d2:	89 df                	mov    edi,ebx
c000e4d4:	c1 e7 0c             	shl    edi,0xc
c000e4d7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4db:	84 c0                	test   al,al
c000e4dd:	75 ae                	jne    c000e48d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	68 09 17 02 c0       	push   0xc0021709
c000e4e7:	e8 8a 74 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e4ec:	e8 c8 fd ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c000e4f1:	5a                   	pop    edx
c000e4f2:	59                   	pop    ecx
c000e4f3:	57                   	push   edi
c000e4f4:	50                   	push   eax
c000e4f5:	e8 60 ff ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c000e4fa:	83 c4 10             	add    esp,0x10
c000e4fd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e501:	8b 00                	mov    eax,DWORD PTR [eax]
c000e503:	f6 c4 04             	test   ah,0x4
c000e506:	74 c0                	je     c000e4c8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e508:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e514:	50                   	push   eax
c000e515:	e8 08 e0 ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e51a:	83 c4 10             	add    esp,0x10
c000e51d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e521:	80 fa 04             	cmp    dl,0x4
c000e524:	75 88                	jne    c000e4ae <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e526:	89 f0                	mov    eax,esi
c000e528:	84 c0                	test   al,al
c000e52a:	75 46                	jne    c000e572 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e52c:	c7 44 24 20 3c 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc002153c
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	5b                   	pop    ebx
c000e538:	5e                   	pop    esi
c000e539:	5f                   	pop    edi
c000e53a:	e9 37 74 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c000e53f:	89 f0                	mov    eax,esi
c000e541:	84 c0                	test   al,al
c000e543:	75 15                	jne    c000e55a <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e545:	83 ec 0c             	sub    esp,0xc
c000e548:	68 25 17 02 c0       	push   0xc0021725
c000e54d:	e8 24 74 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e552:	83 c4 10             	add    esp,0x10
c000e555:	e9 6e ff ff ff       	jmp    c000e4c8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e55a:	50                   	push   eax
c000e55b:	50                   	push   eax
c000e55c:	6a 00                	push   0x0
c000e55e:	53                   	push   ebx
c000e55f:	e8 6a fb ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	e9 5c ff ff ff       	jmp    c000e4c8 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e56c:	89 f0                	mov    eax,esi
c000e56e:	84 c0                	test   al,al
c000e570:	75 14                	jne    c000e586 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e572:	52                   	push   edx
c000e573:	52                   	push   edx
c000e574:	6a 00                	push   0x0
c000e576:	53                   	push   ebx
c000e577:	e8 52 fb ff ff       	call   c000e0ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	83 c4 10             	add    esp,0x10
c000e582:	5b                   	pop    ebx
c000e583:	5e                   	pop    esi
c000e584:	5f                   	pop    edi
c000e585:	c3                   	ret    
c000e586:	c7 44 24 20 41 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021741
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	5b                   	pop    ebx
c000e592:	5e                   	pop    esi
c000e593:	5f                   	pop    edi
c000e594:	e9 dd 73 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c000e599:	90                   	nop

c000e59a <VAS::freeAllocatedPages(unsigned long)>:
c000e59a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e59e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5a2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5a6:	74 09                	je     c000e5b1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5a8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5ac:	e9 c8 fe ff ff       	jmp    c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5b1:	c7 44 24 04 60 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021560
c000e5b9:	e9 89 0b 00 00       	jmp    c000f147 <Dbg::kprintf(char const*, ...)>

c000e5be <VAS::virtualToPhysical(unsigned long)>:
c000e5be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5c2:	50                   	push   eax
c000e5c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5c7:	52                   	push   edx
c000e5c8:	e8 8d fe ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c000e5cd:	59                   	pop    ecx
c000e5ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d0:	5a                   	pop    edx
c000e5d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5d6:	c3                   	ret    
c000e5d7:	90                   	nop

c000e5d8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5d8:	55                   	push   ebp
c000e5d9:	57                   	push   edi
c000e5da:	56                   	push   esi
c000e5db:	53                   	push   ebx
c000e5dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5e4:	89 c3                	mov    ebx,eax
c000e5e6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5ea:	c1 e3 0c             	shl    ebx,0xc
c000e5ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e5f1:	01 f3                	add    ebx,esi
c000e5f3:	85 c0                	test   eax,eax
c000e5f5:	7e 1f                	jle    c000e616 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e5f7:	56                   	push   esi
c000e5f8:	81 c6 00 10 00 00    	add    esi,0x1000
c000e5fe:	55                   	push   ebp
c000e5ff:	e8 56 fe ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c000e604:	5a                   	pop    edx
c000e605:	59                   	pop    ecx
c000e606:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e608:	21 f9                	and    ecx,edi
c000e60a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e60e:	09 d1                	or     ecx,edx
c000e610:	39 f3                	cmp    ebx,esi
c000e612:	89 08                	mov    DWORD PTR [eax],ecx
c000e614:	75 e1                	jne    c000e5f7 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e616:	5b                   	pop    ebx
c000e617:	5e                   	pop    esi
c000e618:	5f                   	pop    edi
c000e619:	5d                   	pop    ebp
c000e61a:	c3                   	ret    
c000e61b:	90                   	nop

c000e61c <VAS::setToWriteCombining(unsigned long, int)>:
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	e8 e6 61 00 00       	call   c001480a <thisCPU()>
c000e624:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e62b:	75 04                	jne    c000e631 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e62d:	83 c4 0c             	add    esp,0xc
c000e630:	c3                   	ret    
c000e631:	83 ec 0c             	sub    esp,0xc
c000e634:	68 80 00 00 00       	push   0x80
c000e639:	6a ff                	push   0xffffffff
c000e63b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e63f:	50                   	push   eax
c000e640:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e644:	52                   	push   edx
c000e645:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e649:	51                   	push   ecx
c000e64a:	e8 89 ff ff ff       	call   c000e5d8 <VAS::reflagRange(unsigned long, int, int, int)>
c000e64f:	83 c4 20             	add    esp,0x20
c000e652:	83 c4 0c             	add    esp,0xc
c000e655:	c3                   	ret    

c000e656 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e65d:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e662:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e669:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e66c:	19 c0                	sbb    eax,eax
c000e66e:	83 ca 03             	or     edx,0x3
c000e671:	83 e0 fc             	and    eax,0xfffffffc
c000e674:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e67b:	e8 55 10 01 00       	call   c001f6d5 <CPU::readCR3()>
c000e680:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e684:	83 c4 0c             	add    esp,0xc
c000e687:	e9 5b 10 01 00       	jmp    c001f6e7 <CPU::writeCR3(unsigned long)>

c000e68c <VAS::~VAS()>:
c000e68c:	83 ec 2c             	sub    esp,0x2c
c000e68f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e697:	e8 c7 a2 00 00       	call   c0018963 <lockScheduler()>
c000e69c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6a6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6ac:	83 ec 04             	sub    esp,0x4
c000e6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6b3:	6a 01                	push   0x1
c000e6b5:	50                   	push   eax
c000e6b6:	e8 9b ff ff ff       	call   c000e656 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6bb:	83 c4 10             	add    esp,0x10
c000e6be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6c6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6ce:	0f 8f d7 00 00 00    	jg     c000e7ab <VAS::~VAS()+0x11f>
c000e6d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6df:	c1 e2 02             	shl    edx,0x2
c000e6e2:	01 d0                	add    eax,edx
c000e6e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ee:	83 e0 01             	and    eax,0x1
c000e6f1:	0f 84 ab 00 00 00    	je     c000e7a2 <VAS::~VAS()+0x116>
c000e6f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e6ff:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e707:	7f 75                	jg     c000e77e <VAS::~VAS()+0xf2>
c000e709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e70d:	c1 e0 0a             	shl    eax,0xa
c000e710:	89 c2                	mov    edx,eax
c000e712:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e716:	01 d0                	add    eax,edx
c000e718:	c1 e0 0c             	shl    eax,0xc
c000e71b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e71f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e724:	8b 00                	mov    eax,DWORD PTR [eax]
c000e726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e729:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e72f:	83 ec 04             	sub    esp,0x4
c000e732:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e736:	6a 01                	push   0x1
c000e738:	50                   	push   eax
c000e739:	e8 f0 fc ff ff       	call   c000e42e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e73e:	83 c4 10             	add    esp,0x10
c000e741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e749:	8b 00                	mov    eax,DWORD PTR [eax]
c000e74b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e74f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e753:	25 01 04 00 00       	and    eax,0x401
c000e758:	3d 01 04 00 00       	cmp    eax,0x401
c000e75d:	75 19                	jne    c000e778 <VAS::~VAS()+0xec>
c000e75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e763:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	50                   	push   eax
c000e76c:	e8 b1 dd ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e778:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e77c:	eb 81                	jmp    c000e6ff <VAS::~VAS()+0x73>
c000e77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e782:	25 00 04 00 00       	and    eax,0x400
c000e787:	74 19                	je     c000e7a2 <VAS::~VAS()+0x116>
c000e789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e792:	83 ec 0c             	sub    esp,0xc
c000e795:	50                   	push   eax
c000e796:	e8 87 dd ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e79b:	83 c4 10             	add    esp,0x10
c000e79e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7a2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7a6:	e9 1b ff ff ff       	jmp    c000e6c6 <VAS::~VAS()+0x3a>
c000e7ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7b2:	83 ec 0c             	sub    esp,0xc
c000e7b5:	50                   	push   eax
c000e7b6:	e8 be fc ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7c5:	83 ec 0c             	sub    esp,0xc
c000e7c8:	50                   	push   eax
c000e7c9:	e8 54 dd ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e7ce:	83 c4 10             	add    esp,0x10
c000e7d1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7d9:	c1 e0 02             	shl    eax,0x2
c000e7dc:	83 ec 08             	sub    esp,0x8
c000e7df:	50                   	push   eax
c000e7e0:	68 84 15 02 c0       	push   0xc0021584
c000e7e5:	e8 5d 09 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	e8 73 a1 00 00       	call   c0018965 <unlockScheduler()>
c000e7f2:	90                   	nop
c000e7f3:	83 c4 2c             	add    esp,0x2c
c000e7f6:	c3                   	ret    
c000e7f7:	90                   	nop

c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e7f8:	55                   	push   ebp
c000e7f9:	57                   	push   edi
c000e7fa:	56                   	push   esi
c000e7fb:	53                   	push   ebx
c000e7fc:	83 ec 1c             	sub    esp,0x1c
c000e7ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e803:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e807:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e80d:	77 08                	ja     c000e817 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e80f:	0f 20 d8             	mov    eax,cr3
c000e812:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e815:	75 49                	jne    c000e860 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e81b:	09 d8                	or     eax,ebx
c000e81d:	a9 ff 0f 00 00       	test   eax,0xfff
c000e822:	75 59                	jne    c000e87d <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e824:	89 de                	mov    esi,ebx
c000e826:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e829:	c1 ee 16             	shr    esi,0x16
c000e82c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e833:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e837:	74 56                	je     c000e88f <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e839:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e83f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e843:	c1 eb 0a             	shr    ebx,0xa
c000e846:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e84a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e850:	09 d0                	or     eax,edx
c000e852:	c1 e6 0c             	shl    esi,0xc
c000e855:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e858:	83 c4 1c             	add    esp,0x1c
c000e85b:	5b                   	pop    ebx
c000e85c:	5e                   	pop    esi
c000e85d:	5f                   	pop    edi
c000e85e:	5d                   	pop    ebp
c000e85f:	c3                   	ret    
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	68 a4 15 02 c0       	push   0xc00215a4
c000e868:	e8 da 08 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000e86d:	83 c4 10             	add    esp,0x10
c000e870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e874:	09 d8                	or     eax,ebx
c000e876:	a9 ff 0f 00 00       	test   eax,0xfff
c000e87b:	74 a7                	je     c000e824 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e87d:	83 ec 0c             	sub    esp,0xc
c000e880:	68 0c 16 02 c0       	push   0xc002160c
c000e885:	e8 ec 70 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e88a:	83 c4 10             	add    esp,0x10
c000e88d:	eb 95                	jmp    c000e824 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e893:	e8 17 dd ff ff       	call   c000c5af <Phys::allocatePage()>
c000e898:	89 c5                	mov    ebp,eax
c000e89a:	e8 1a fa ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c000e89f:	83 ec 0c             	sub    esp,0xc
c000e8a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8a6:	6a 01                	push   0x1
c000e8a8:	e8 7f f8 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c000e8ad:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8b4:	6a 01                	push   0x1
c000e8b6:	50                   	push   eax
c000e8b7:	55                   	push   ebp
c000e8b8:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8c2:	51                   	push   ecx
c000e8c3:	e8 22 02 00 00       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c8:	83 c4 1c             	add    esp,0x1c
c000e8cb:	68 00 10 00 00       	push   0x1000
c000e8d0:	6a 00                	push   0x0
c000e8d2:	50                   	push   eax
c000e8d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8d7:	e8 de 1d ff ff       	call   c00006ba <memset>
c000e8dc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8e3:	e8 91 fb ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8ec:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e8f5:	e9 3f ff ff ff       	jmp    c000e839 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e8fa <VAS::allocatePages(int, int)>:
c000e8fa:	55                   	push   ebp
c000e8fb:	57                   	push   edi
c000e8fc:	56                   	push   esi
c000e8fd:	53                   	push   ebx
c000e8fe:	83 ec 1c             	sub    esp,0x1c
c000e901:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e905:	e8 00 5f 00 00       	call   c001480a <thisCPU()>
c000e90a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e910:	83 e0 01             	and    eax,0x1
c000e913:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e917:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e91b:	0f 85 d5 00 00 00    	jne    c000e9f6 <VAS::allocatePages(int, int)+0xfc>
c000e921:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e928:	85 c0                	test   eax,eax
c000e92a:	0f 84 aa 00 00 00    	je     c000e9da <VAS::allocatePages(int, int)+0xe0>
c000e930:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e934:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e938:	c1 e6 0c             	shl    esi,0xc
c000e93b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e93f:	01 de                	add    esi,ebx
c000e941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e945:	81 cd 00 04 00 00    	or     ebp,0x400
c000e94b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e94e:	85 c0                	test   eax,eax
c000e950:	7e 25                	jle    c000e977 <VAS::allocatePages(int, int)+0x7d>
c000e952:	e8 58 dc ff ff       	call   c000c5af <Phys::allocatePage()>
c000e957:	55                   	push   ebp
c000e958:	53                   	push   ebx
c000e959:	50                   	push   eax
c000e95a:	57                   	push   edi
c000e95b:	e8 98 fe ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e960:	83 c4 10             	add    esp,0x10
c000e963:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e968:	74 03                	je     c000e96d <VAS::allocatePages(int, int)+0x73>
c000e96a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e96d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e973:	39 de                	cmp    esi,ebx
c000e975:	75 db                	jne    c000e952 <VAS::allocatePages(int, int)+0x58>
c000e977:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97c:	74 3f                	je     c000e9bd <VAS::allocatePages(int, int)+0xc3>
c000e97e:	c1 ee 0a             	shr    esi,0xa
c000e981:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e985:	c1 eb 0a             	shr    ebx,0xa
c000e988:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e98e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e994:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e99a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9a0:	39 f3                	cmp    ebx,esi
c000e9a2:	77 0d                	ja     c000e9b1 <VAS::allocatePages(int, int)+0xb7>
c000e9a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9ad:	39 de                	cmp    esi,ebx
c000e9af:	73 f3                	jae    c000e9a4 <VAS::allocatePages(int, int)+0xaa>
c000e9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9b5:	83 c4 1c             	add    esp,0x1c
c000e9b8:	5b                   	pop    ebx
c000e9b9:	5e                   	pop    esi
c000e9ba:	5f                   	pop    edi
c000e9bb:	5d                   	pop    ebp
c000e9bc:	c3                   	ret    
c000e9bd:	e8 13 0d 01 00       	call   c001f6d5 <CPU::readCR3()>
c000e9c2:	83 ec 0c             	sub    esp,0xc
c000e9c5:	50                   	push   eax
c000e9c6:	e8 1c 0d 01 00       	call   c001f6e7 <CPU::writeCR3(unsigned long)>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9d2:	83 c4 1c             	add    esp,0x1c
c000e9d5:	5b                   	pop    ebx
c000e9d6:	5e                   	pop    esi
c000e9d7:	5f                   	pop    edi
c000e9d8:	5d                   	pop    ebp
c000e9d9:	c3                   	ret    
c000e9da:	83 ec 0c             	sub    esp,0xc
c000e9dd:	68 30 16 02 c0       	push   0xc0021630
c000e9e2:	e8 8f 6f 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000e9e7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9ee:	83 c4 10             	add    esp,0x10
c000e9f1:	e9 3a ff ff ff       	jmp    c000e930 <VAS::allocatePages(int, int)+0x36>
c000e9f6:	83 ec 0c             	sub    esp,0xc
c000e9f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9fd:	53                   	push   ebx
c000e9fe:	e8 29 f7 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c000ea03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea0f:	0f 87 94 00 00 00    	ja     c000eaa9 <VAS::allocatePages(int, int)+0x1af>
c000ea15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea19:	85 d2                	test   edx,edx
c000ea1b:	7e 3c                	jle    c000ea59 <VAS::allocatePages(int, int)+0x15f>
c000ea1d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea21:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea25:	c1 e5 0c             	shl    ebp,0xc
c000ea28:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea2c:	81 ce 00 04 00 00    	or     esi,0x400
c000ea32:	01 dd                	add    ebp,ebx
c000ea34:	e8 76 db ff ff       	call   c000c5af <Phys::allocatePage()>
c000ea39:	56                   	push   esi
c000ea3a:	53                   	push   ebx
c000ea3b:	50                   	push   eax
c000ea3c:	57                   	push   edi
c000ea3d:	e8 b6 fd ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea42:	83 c4 10             	add    esp,0x10
c000ea45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea4a:	74 03                	je     c000ea4f <VAS::allocatePages(int, int)+0x155>
c000ea4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea55:	39 dd                	cmp    ebp,ebx
c000ea57:	75 db                	jne    c000ea34 <VAS::allocatePages(int, int)+0x13a>
c000ea59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5e:	0f 84 59 ff ff ff    	je     c000e9bd <VAS::allocatePages(int, int)+0xc3>
c000ea64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea6c:	c1 e0 0c             	shl    eax,0xc
c000ea6f:	89 d3                	mov    ebx,edx
c000ea71:	c1 eb 0a             	shr    ebx,0xa
c000ea74:	01 d0                	add    eax,edx
c000ea76:	c1 e8 0a             	shr    eax,0xa
c000ea79:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea7f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea84:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea8a:	2d 00 00 40 00       	sub    eax,0x400000
c000ea8f:	39 c3                	cmp    ebx,eax
c000ea91:	0f 87 1a ff ff ff    	ja     c000e9b1 <VAS::allocatePages(int, int)+0xb7>
c000ea97:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea9a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eaa0:	39 d8                	cmp    eax,ebx
c000eaa2:	73 f3                	jae    c000ea97 <VAS::allocatePages(int, int)+0x19d>
c000eaa4:	e9 08 ff ff ff       	jmp    c000e9b1 <VAS::allocatePages(int, int)+0xb7>
c000eaa9:	e8 5c 5d 00 00       	call   c001480a <thisCPU()>
c000eaae:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eab5:	0f 84 5a ff ff ff    	je     c000ea15 <VAS::allocatePages(int, int)+0x11b>
c000eabb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eabf:	80 cd 01             	or     ch,0x1
c000eac2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eac6:	e9 4a ff ff ff       	jmp    c000ea15 <VAS::allocatePages(int, int)+0x11b>
c000eacb:	90                   	nop

c000eacc <VAS::setCPUSpecific(unsigned long)>:
c000eacc:	83 ec 0c             	sub    esp,0xc
c000eacf:	6a 05                	push   0x5
c000ead1:	68 00 00 40 c2       	push   0xc2400000
c000ead6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eada:	50                   	push   eax
c000eadb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eadf:	52                   	push   edx
c000eae0:	e8 13 fd ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eae5:	83 c4 1c             	add    esp,0x1c
c000eae8:	c3                   	ret    
c000eae9:	90                   	nop

c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eaea:	55                   	push   ebp
c000eaeb:	57                   	push   edi
c000eaec:	56                   	push   esi
c000eaed:	53                   	push   ebx
c000eaee:	83 ec 1c             	sub    esp,0x1c
c000eaf1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eaf5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaf9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eafd:	e8 08 5d 00 00       	call   c001480a <thisCPU()>
c000eb02:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb08:	83 e0 01             	and    eax,0x1
c000eb0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb13:	85 c0                	test   eax,eax
c000eb15:	7e 39                	jle    c000eb50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb1b:	89 f3                	mov    ebx,esi
c000eb1d:	c1 e0 0c             	shl    eax,0xc
c000eb20:	01 f0                	add    eax,esi
c000eb22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb26:	55                   	push   ebp
c000eb27:	53                   	push   ebx
c000eb28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2c:	29 f0                	sub    eax,esi
c000eb2e:	01 d8                	add    eax,ebx
c000eb30:	50                   	push   eax
c000eb31:	57                   	push   edi
c000eb32:	e8 c1 fc ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb37:	83 c4 10             	add    esp,0x10
c000eb3a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb3f:	74 03                	je     c000eb44 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb41:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb44:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb4a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb4e:	75 d6                	jne    c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb50:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb55:	74 42                	je     c000eb99 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb5b:	89 f3                	mov    ebx,esi
c000eb5d:	c1 e0 0c             	shl    eax,0xc
c000eb60:	c1 eb 0a             	shr    ebx,0xa
c000eb63:	01 f0                	add    eax,esi
c000eb65:	c1 e8 0a             	shr    eax,0xa
c000eb68:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb73:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb79:	2d 00 00 40 00       	sub    eax,0x400000
c000eb7e:	39 c3                	cmp    ebx,eax
c000eb80:	77 0d                	ja     c000eb8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb82:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb85:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb8b:	39 d8                	cmp    eax,ebx
c000eb8d:	73 f3                	jae    c000eb82 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eb8f:	83 c4 1c             	add    esp,0x1c
c000eb92:	89 f0                	mov    eax,esi
c000eb94:	5b                   	pop    ebx
c000eb95:	5e                   	pop    esi
c000eb96:	5f                   	pop    edi
c000eb97:	5d                   	pop    ebp
c000eb98:	c3                   	ret    
c000eb99:	e8 37 0b 01 00       	call   c001f6d5 <CPU::readCR3()>
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	50                   	push   eax
c000eba2:	e8 40 0b 01 00       	call   c001f6e7 <CPU::writeCR3(unsigned long)>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	89 f0                	mov    eax,esi
c000ebac:	83 c4 1c             	add    esp,0x1c
c000ebaf:	5b                   	pop    ebx
c000ebb0:	5e                   	pop    esi
c000ebb1:	5f                   	pop    edi
c000ebb2:	5d                   	pop    ebp
c000ebb3:	c3                   	ret    

c000ebb4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebb4:	55                   	push   ebp
c000ebb5:	57                   	push   edi
c000ebb6:	56                   	push   esi
c000ebb7:	53                   	push   ebx
c000ebb8:	83 ec 1c             	sub    esp,0x1c
c000ebbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebbf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebc3:	09 f0                	or     eax,esi
c000ebc5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebc9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebcd:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebd2:	75 4c                	jne    c000ec20 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebd4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebd8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebdb:	c1 eb 16             	shr    ebx,0x16
c000ebde:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebe5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebe9:	74 4f                	je     c000ec3a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ebf3:	c1 e8 0a             	shr    eax,0xa
c000ebf6:	80 fa 01             	cmp    dl,0x1
c000ebf9:	19 d2                	sbb    edx,edx
c000ebfb:	25 fc 0f 00 00       	and    eax,0xffc
c000ec00:	c1 e3 0c             	shl    ebx,0xc
c000ec03:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec09:	01 d8                	add    eax,ebx
c000ec0b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec0f:	09 d9                	or     ecx,ebx
c000ec11:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec18:	83 c4 1c             	add    esp,0x1c
c000ec1b:	5b                   	pop    ebx
c000ec1c:	5e                   	pop    esi
c000ec1d:	5f                   	pop    edi
c000ec1e:	5d                   	pop    ebp
c000ec1f:	c3                   	ret    
c000ec20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	68 5c 16 02 c0       	push   0xc002165c
c000ec2c:	e8 45 6d 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000ec31:	83 c4 10             	add    esp,0x10
c000ec34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec38:	eb 9a                	jmp    c000ebd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec3e:	e8 6c d9 ff ff       	call   c000c5af <Phys::allocatePage()>
c000ec43:	89 c5                	mov    ebp,eax
c000ec45:	e8 6f f6 ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c000ec4a:	83 ec 0c             	sub    esp,0xc
c000ec4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec51:	6a 01                	push   0x1
c000ec53:	e8 d4 f4 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c000ec58:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec5f:	6a 01                	push   0x1
c000ec61:	50                   	push   eax
c000ec62:	55                   	push   ebp
c000ec63:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec69:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec6d:	51                   	push   ecx
c000ec6e:	e8 77 fe ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec73:	83 c4 1c             	add    esp,0x1c
c000ec76:	68 00 10 00 00       	push   0x1000
c000ec7b:	6a 00                	push   0x0
c000ec7d:	50                   	push   eax
c000ec7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec82:	e8 33 1a ff ff       	call   c00006ba <memset>
c000ec87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec8b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ec8e:	e8 e6 f7 ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c000ec93:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec96:	83 c4 10             	add    esp,0x10
c000ec99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec9d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eca0:	e9 46 ff ff ff       	jmp    c000ebeb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000eca5:	90                   	nop

c000eca6 <VAS::VAS(bool)>:
c000eca6:	53                   	push   ebx
c000eca7:	83 ec 28             	sub    esp,0x28
c000ecaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecc5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecc8:	e8 e2 d8 ff ff       	call   c000c5af <Phys::allocatePage()>
c000eccd:	89 c2                	mov    edx,eax
c000eccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecd6:	e8 de f5 ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c000ecdb:	89 c3                	mov    ebx,eax
c000ecdd:	83 ec 0c             	sub    esp,0xc
c000ece0:	6a 01                	push   0x1
c000ece2:	e8 45 f4 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c000ece7:	83 c4 10             	add    esp,0x10
c000ecea:	89 c2                	mov    edx,eax
c000ecec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ecf3:	83 ec 0c             	sub    esp,0xc
c000ecf6:	6a 03                	push   0x3
c000ecf8:	6a 01                	push   0x1
c000ecfa:	52                   	push   edx
c000ecfb:	50                   	push   eax
c000ecfc:	53                   	push   ebx
c000ecfd:	e8 e8 fd ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed02:	83 c4 20             	add    esp,0x20
c000ed05:	89 c2                	mov    edx,eax
c000ed07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed0e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed16:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed1e:	7f 1c                	jg     c000ed3c <VAS::VAS(bool)+0x96>
c000ed20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed2b:	c1 e2 02             	shl    edx,0x2
c000ed2e:	01 d0                	add    eax,edx
c000ed30:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed36:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed3a:	eb da                	jmp    c000ed16 <VAS::VAS(bool)+0x70>
c000ed3c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed44:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed4c:	7f 71                	jg     c000edbf <VAS::VAS(bool)+0x119>
c000ed4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed52:	2d 00 02 00 00       	sub    eax,0x200
c000ed57:	c1 e0 0c             	shl    eax,0xc
c000ed5a:	83 c8 03             	or     eax,0x3
c000ed5d:	89 c3                	mov    ebx,eax
c000ed5f:	e8 a6 5a 00 00       	call   c001480a <thisCPU()>
c000ed64:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed6a:	83 e0 10             	and    eax,0x10
c000ed6d:	84 c0                	test   al,al
c000ed6f:	74 07                	je     c000ed78 <VAS::VAS(bool)+0xd2>
c000ed71:	b8 00 01 00 00       	mov    eax,0x100
c000ed76:	eb 05                	jmp    c000ed7d <VAS::VAS(bool)+0xd7>
c000ed78:	b8 00 00 00 00       	mov    eax,0x0
c000ed7d:	09 d8                	or     eax,ebx
c000ed7f:	89 c1                	mov    ecx,eax
c000ed81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed8c:	c1 e2 02             	shl    edx,0x2
c000ed8f:	01 d0                	add    eax,edx
c000ed91:	89 ca                	mov    edx,ecx
c000ed93:	89 10                	mov    DWORD PTR [eax],edx
c000ed95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed99:	2d 40 03 00 00       	sub    eax,0x340
c000ed9e:	83 f8 7f             	cmp    eax,0x7f
c000eda1:	77 16                	ja     c000edb9 <VAS::VAS(bool)+0x113>
c000eda3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edae:	c1 e2 02             	shl    edx,0x2
c000edb1:	01 d0                	add    eax,edx
c000edb3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edb9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edbd:	eb 85                	jmp    c000ed44 <VAS::VAS(bool)+0x9e>
c000edbf:	e8 46 5a 00 00       	call   c001480a <thisCPU()>
c000edc4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edca:	83 e0 10             	and    eax,0x10
c000edcd:	84 c0                	test   al,al
c000edcf:	74 07                	je     c000edd8 <VAS::VAS(bool)+0x132>
c000edd1:	b8 03 41 00 00       	mov    eax,0x4103
c000edd6:	eb 05                	jmp    c000eddd <VAS::VAS(bool)+0x137>
c000edd8:	b8 03 40 00 00       	mov    eax,0x4003
c000eddd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ede1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ede4:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edea:	89 02                	mov    DWORD PTR [edx],eax
c000edec:	e8 19 5a 00 00       	call   c001480a <thisCPU()>
c000edf1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000edf7:	83 ec 08             	sub    esp,0x8
c000edfa:	50                   	push   eax
c000edfb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edff:	e8 c8 fc ff ff       	call   c000eacc <VAS::setCPUSpecific(unsigned long)>
c000ee04:	83 c4 10             	add    esp,0x10
c000ee07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee0b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee0e:	e8 f7 59 00 00       	call   c001480a <thisCPU()>
c000ee13:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee19:	83 e0 10             	and    eax,0x10
c000ee1c:	84 c0                	test   al,al
c000ee1e:	74 07                	je     c000ee27 <VAS::VAS(bool)+0x181>
c000ee20:	b8 00 01 00 00       	mov    eax,0x100
c000ee25:	eb 05                	jmp    c000ee2c <VAS::VAS(bool)+0x186>
c000ee27:	b8 00 00 00 00       	mov    eax,0x0
c000ee2c:	09 d8                	or     eax,ebx
c000ee2e:	89 c2                	mov    edx,eax
c000ee30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee37:	05 fc 0f 00 00       	add    eax,0xffc
c000ee3c:	83 ca 03             	or     edx,0x3
c000ee3f:	89 10                	mov    DWORD PTR [eax],edx
c000ee41:	e8 c4 59 00 00       	call   c001480a <thisCPU()>
c000ee46:	83 ec 0c             	sub    esp,0xc
c000ee49:	50                   	push   eax
c000ee4a:	e8 ef 19 00 00       	call   c001083e <Device::getName()>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	83 ec 08             	sub    esp,0x8
c000ee55:	68 5b 17 02 c0       	push   0xc002175b
c000ee5a:	50                   	push   eax
c000ee5b:	e8 4a 19 ff ff       	call   c00007aa <strcmp>
c000ee60:	83 c4 10             	add    esp,0x10
c000ee63:	85 c0                	test   eax,eax
c000ee65:	0f 94 c0             	sete   al
c000ee68:	84 c0                	test   al,al
c000ee6a:	74 64                	je     c000eed0 <VAS::VAS(bool)+0x22a>
c000ee6c:	e8 d0 9a 00 00       	call   c0018941 <disableIRQs()>
c000ee71:	e8 94 59 00 00       	call   c001480a <thisCPU()>
c000ee76:	05 7c 09 00 00       	add    eax,0x97c
c000ee7b:	83 ec 0c             	sub    esp,0xc
c000ee7e:	50                   	push   eax
c000ee7f:	e8 c8 cb ff ff       	call   c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee84:	83 c4 10             	add    esp,0x10
c000ee87:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee8c:	89 c3                	mov    ebx,eax
c000ee8e:	e8 77 59 00 00       	call   c001480a <thisCPU()>
c000ee93:	05 7c 09 00 00       	add    eax,0x97c
c000ee98:	83 ec 0c             	sub    esp,0xc
c000ee9b:	50                   	push   eax
c000ee9c:	e8 ab cb ff ff       	call   c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eea1:	83 c4 10             	add    esp,0x10
c000eea4:	83 ec 08             	sub    esp,0x8
c000eea7:	50                   	push   eax
c000eea8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eeac:	e8 a9 f5 ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eebb:	6a 11                	push   0x11
c000eebd:	53                   	push   ebx
c000eebe:	50                   	push   eax
c000eebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eec3:	e8 30 f9 ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	e8 84 9a 00 00       	call   c0018954 <enableIRQs()>
c000eed0:	90                   	nop
c000eed1:	83 c4 28             	add    esp,0x28
c000eed4:	5b                   	pop    ebx
c000eed5:	c3                   	ret    

c000eed6 <mapVASFirstTime>:
c000eed6:	55                   	push   ebp
c000eed7:	57                   	push   edi
c000eed8:	56                   	push   esi
c000eed9:	53                   	push   ebx
c000eeda:	83 ec 0c             	sub    esp,0xc
c000eedd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eee2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eee5:	4a                   	dec    edx
c000eee6:	0f 84 99 00 00 00    	je     c000ef85 <mapVASFirstTime+0xaf>
c000eeec:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eeef:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eef2:	c1 e5 15             	shl    ebp,0x15
c000eef5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eefa:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eeff:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef05:	29 eb                	sub    ebx,ebp
c000ef07:	29 ee                	sub    esi,ebp
c000ef09:	e8 a1 d6 ff ff       	call   c000c5af <Phys::allocatePage()>
c000ef0e:	83 ec 0c             	sub    esp,0xc
c000ef11:	68 03 04 00 00       	push   0x403
c000ef16:	6a 01                	push   0x1
c000ef18:	53                   	push   ebx
c000ef19:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef1f:	50                   	push   eax
c000ef20:	57                   	push   edi
c000ef21:	e8 c4 fb ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef26:	83 c4 20             	add    esp,0x20
c000ef29:	39 f3                	cmp    ebx,esi
c000ef2b:	75 dc                	jne    c000ef09 <mapVASFirstTime+0x33>
c000ef2d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef32:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef37:	29 e8                	sub    eax,ebp
c000ef39:	29 ee                	sub    esi,ebp
c000ef3b:	89 c5                	mov    ebp,eax
c000ef3d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef41:	19 db                	sbb    ebx,ebx
c000ef43:	e8 67 d6 ff ff       	call   c000c5af <Phys::allocatePage()>
c000ef48:	83 e3 04             	and    ebx,0x4
c000ef4b:	83 ec 0c             	sub    esp,0xc
c000ef4e:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef54:	53                   	push   ebx
c000ef55:	6a 01                	push   0x1
c000ef57:	56                   	push   esi
c000ef58:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef5e:	50                   	push   eax
c000ef5f:	57                   	push   edi
c000ef60:	e8 85 fb ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef65:	83 c4 20             	add    esp,0x20
c000ef68:	39 f5                	cmp    ebp,esi
c000ef6a:	75 d1                	jne    c000ef3d <mapVASFirstTime+0x67>
c000ef6c:	e8 64 07 01 00       	call   c001f6d5 <CPU::readCR3()>
c000ef71:	83 ec 0c             	sub    esp,0xc
c000ef74:	50                   	push   eax
c000ef75:	e8 6d 07 01 00       	call   c001f6e7 <CPU::writeCR3(unsigned long)>
c000ef7a:	83 c4 10             	add    esp,0x10
c000ef7d:	83 c4 0c             	add    esp,0xc
c000ef80:	5b                   	pop    ebx
c000ef81:	5e                   	pop    esi
c000ef82:	5f                   	pop    edi
c000ef83:	5d                   	pop    ebp
c000ef84:	c3                   	ret    
c000ef85:	83 ec 0c             	sub    esp,0xc
c000ef88:	68 69 17 02 c0       	push   0xc0021769
c000ef8d:	e8 b5 01 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000ef92:	83 c4 10             	add    esp,0x10
c000ef95:	83 c4 0c             	add    esp,0xc
c000ef98:	5b                   	pop    ebx
c000ef99:	5e                   	pop    esi
c000ef9a:	5f                   	pop    edi
c000ef9b:	5d                   	pop    ebp
c000ef9c:	c3                   	ret    

c000ef9d <__cxa_atexit>:
c000ef9d:	31 c0                	xor    eax,eax
c000ef9f:	c3                   	ret    

c000efa0 <__cxa_finalize>:
c000efa0:	c3                   	ret    

c000efa1 <__stack_chk_fail>:
c000efa1:	55                   	push   ebp
c000efa2:	89 e5                	mov    ebp,esp
c000efa4:	83 ec 10             	sub    esp,0x10
c000efa7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efaa:	68 82 17 02 c0       	push   0xc0021782
c000efaf:	e8 93 01 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000efb4:	58                   	pop    eax
c000efb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efb8:	5a                   	pop    edx
c000efb9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efbc:	68 82 17 02 c0       	push   0xc0021782
c000efc1:	e8 81 01 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000efc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc9:	59                   	pop    ecx
c000efca:	5a                   	pop    edx
c000efcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efcd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efd0:	68 82 17 02 c0       	push   0xc0021782
c000efd5:	e8 6d 01 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000efda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdd:	59                   	pop    ecx
c000efde:	5a                   	pop    edx
c000efdf:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000efe3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe6:	68 82 17 02 c0       	push   0xc0021782
c000efeb:	e8 57 01 00 00       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c000eff0:	c7 04 24 8a 17 02 c0 	mov    DWORD PTR [esp],0xc002178a
c000eff7:	e8 7a 69 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000effc:	83 c4 10             	add    esp,0x10
c000efff:	c9                   	leave  
c000f000:	c3                   	ret    

c000f001 <__cxa_pure_virtual>:
c000f001:	83 ec 18             	sub    esp,0x18
c000f004:	68 a2 17 02 c0       	push   0xc00217a2
c000f009:	e8 68 69 00 00       	call   c0015976 <Krnl::panic(char const*)>
c000f00e:	83 c4 1c             	add    esp,0x1c
c000f011:	c3                   	ret    

c000f012 <operator new(unsigned long)>:
c000f012:	e9 c2 cf ff ff       	jmp    c000bfd9 <malloc>

c000f017 <operator new[](unsigned long)>:
c000f017:	e9 bd cf ff ff       	jmp    c000bfd9 <malloc>

c000f01c <operator delete(void*)>:
c000f01c:	e9 d8 cf ff ff       	jmp    c000bff9 <rfree>

c000f021 <operator delete(void*, unsigned long)>:
c000f021:	e9 d3 cf ff ff       	jmp    c000bff9 <rfree>

c000f026 <operator delete[](void*)>:
c000f026:	e9 ce cf ff ff       	jmp    c000bff9 <rfree>

c000f02b <operator delete[](void*, unsigned long)>:
c000f02b:	e9 c9 cf ff ff       	jmp    c000bff9 <rfree>

c000f030 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f030:	57                   	push   edi
c000f031:	56                   	push   esi
c000f032:	be b9 17 02 c0       	mov    esi,0xc00217b9
c000f037:	53                   	push   ebx
c000f038:	83 ec 40             	sub    esp,0x40
c000f03b:	a0 b8 17 02 c0       	mov    al,ds:0xc00217b8
c000f040:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f044:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f048:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f04c:	b8 3e 00 00 00       	mov    eax,0x3e
c000f051:	f7 c7 02 00 00 00    	test   edi,0x2
c000f057:	75 69                	jne    c000f0c2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f059:	89 c1                	mov    ecx,eax
c000f05b:	c1 e9 02             	shr    ecx,0x2
c000f05e:	fc                   	cld    
c000f05f:	31 d2                	xor    edx,edx
c000f061:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f063:	a8 02                	test   al,0x2
c000f065:	74 0b                	je     c000f072 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f067:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f06a:	66 89 17             	mov    WORD PTR [edi],dx
c000f06d:	ba 02 00 00 00       	mov    edx,0x2
c000f072:	a8 01                	test   al,0x1
c000f074:	74 06                	je     c000f07c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f076:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f079:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f07c:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f080:	83 f9 3e             	cmp    ecx,0x3e
c000f083:	7e 05                	jle    c000f08a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f085:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f08a:	89 df                	mov    edi,ebx
c000f08c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f090:	eb 02                	jmp    c000f094 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f092:	89 c7                	mov    edi,eax
c000f094:	31 d2                	xor    edx,edx
c000f096:	89 f8                	mov    eax,edi
c000f098:	46                   	inc    esi
c000f099:	f7 f1                	div    ecx
c000f09b:	39 cf                	cmp    edi,ecx
c000f09d:	73 f3                	jae    c000f092 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f09f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0a2:	eb 02                	jmp    c000f0a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0a4:	89 c3                	mov    ebx,eax
c000f0a6:	31 d2                	xor    edx,edx
c000f0a8:	89 d8                	mov    eax,ebx
c000f0aa:	f7 f1                	div    ecx
c000f0ac:	4e                   	dec    esi
c000f0ad:	39 cb                	cmp    ebx,ecx
c000f0af:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0b3:	88 16                	mov    BYTE PTR [esi],dl
c000f0b5:	73 ed                	jae    c000f0a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0bb:	83 c4 40             	add    esp,0x40
c000f0be:	5b                   	pop    ebx
c000f0bf:	5e                   	pop    esi
c000f0c0:	5f                   	pop    edi
c000f0c1:	c3                   	ret    
c000f0c2:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0c5:	83 c7 02             	add    edi,0x2
c000f0c8:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0cc:	83 c6 02             	add    esi,0x2
c000f0cf:	83 e8 02             	sub    eax,0x2
c000f0d2:	eb 85                	jmp    c000f059 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0d4 <Dbg::logc(char)>:
c000f0d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0d8:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0dd:	ec                   	in     al,dx
c000f0de:	a8 20                	test   al,0x20
c000f0e0:	74 fb                	je     c000f0dd <Dbg::logc(char)+0x9>
c000f0e2:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0e7:	88 c8                	mov    al,cl
c000f0e9:	ee                   	out    dx,al
c000f0ea:	c3                   	ret    

c000f0eb <Dbg::logs(char*)>:
c000f0eb:	53                   	push   ebx
c000f0ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0f0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0f3:	84 c0                	test   al,al
c000f0f5:	74 0f                	je     c000f106 <Dbg::logs(char*)+0x1b>
c000f0f7:	43                   	inc    ebx
c000f0f8:	50                   	push   eax
c000f0f9:	e8 d6 ff ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f0fe:	5a                   	pop    edx
c000f0ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f102:	84 c0                	test   al,al
c000f104:	75 f1                	jne    c000f0f7 <Dbg::logs(char*)+0xc>
c000f106:	5b                   	pop    ebx
c000f107:	c3                   	ret    

c000f108 <Dbg::logWriteInt(unsigned int)>:
c000f108:	83 ec 10             	sub    esp,0x10
c000f10b:	6a 0a                	push   0xa
c000f10d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f111:	50                   	push   eax
c000f112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f116:	50                   	push   eax
c000f117:	e8 14 ff ff ff       	call   c000f030 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f11c:	50                   	push   eax
c000f11d:	e8 c9 ff ff ff       	call   c000f0eb <Dbg::logs(char*)>
c000f122:	83 c4 20             	add    esp,0x20
c000f125:	c3                   	ret    

c000f126 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f126:	83 ec 10             	sub    esp,0x10
c000f129:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f12d:	50                   	push   eax
c000f12e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f132:	50                   	push   eax
c000f133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f137:	52                   	push   edx
c000f138:	e8 f3 fe ff ff       	call   c000f030 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f13d:	50                   	push   eax
c000f13e:	e8 a8 ff ff ff       	call   c000f0eb <Dbg::logs(char*)>
c000f143:	83 c4 20             	add    esp,0x20
c000f146:	c3                   	ret    

c000f147 <Dbg::kprintf(char const*, ...)>:
c000f147:	55                   	push   ebp
c000f148:	57                   	push   edi
c000f149:	56                   	push   esi
c000f14a:	53                   	push   ebx
c000f14b:	83 ec 0c             	sub    esp,0xc
c000f14e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f152:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f15a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f15d:	84 c0                	test   al,al
c000f15f:	74 4d                	je     c000f1ae <Dbg::kprintf(char const*, ...)+0x67>
c000f161:	31 ff                	xor    edi,edi
c000f163:	8d 77 01             	lea    esi,[edi+0x1]
c000f166:	3c 25                	cmp    al,0x25
c000f168:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f16b:	0f 85 ec 00 00 00    	jne    c000f25d <Dbg::kprintf(char const*, ...)+0x116>
c000f171:	83 c7 02             	add    edi,0x2
c000f174:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f177:	83 e8 25             	sub    eax,0x25
c000f17a:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f17d:	3c 53                	cmp    al,0x53
c000f17f:	0f 87 c0 00 00 00    	ja     c000f245 <Dbg::kprintf(char const*, ...)+0xfe>
c000f185:	25 ff 00 00 00       	and    eax,0xff
c000f18a:	ff 24 85 f8 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde808]
c000f191:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f195:	89 c8                	mov    eax,ecx
c000f197:	83 c1 04             	add    ecx,0x4
c000f19a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f19e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1a0:	50                   	push   eax
c000f1a1:	e8 45 ff ff ff       	call   c000f0eb <Dbg::logs(char*)>
c000f1a6:	58                   	pop    eax
c000f1a7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1aa:	84 c0                	test   al,al
c000f1ac:	75 b5                	jne    c000f163 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1ae:	83 c4 0c             	add    esp,0xc
c000f1b1:	5b                   	pop    ebx
c000f1b2:	5e                   	pop    esi
c000f1b3:	5f                   	pop    edi
c000f1b4:	5d                   	pop    ebp
c000f1b5:	c3                   	ret    
c000f1b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1ba:	89 d0                	mov    eax,edx
c000f1bc:	83 c2 04             	add    edx,0x4
c000f1bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c5:	50                   	push   eax
c000f1c6:	e8 3d ff ff ff       	call   c000f108 <Dbg::logWriteInt(unsigned int)>
c000f1cb:	58                   	pop    eax
c000f1cc:	eb d9                	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f1ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1d2:	89 d0                	mov    eax,edx
c000f1d4:	83 c2 04             	add    edx,0x4
c000f1d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1db:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1de:	50                   	push   eax
c000f1df:	e8 f0 fe ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f1e4:	58                   	pop    eax
c000f1e5:	eb c0                	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1eb:	89 c8                	mov    eax,ecx
c000f1ed:	83 c1 04             	add    ecx,0x4
c000f1f0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1f4:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f1f6:	55                   	push   ebp
c000f1f7:	e8 0c ff ff ff       	call   c000f108 <Dbg::logWriteInt(unsigned int)>
c000f1fc:	58                   	pop    eax
c000f1fd:	eb a8                	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f1ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f203:	89 c8                	mov    eax,ecx
c000f205:	83 c1 04             	add    ecx,0x4
c000f208:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f20c:	6a 10                	push   0x10
c000f20e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f210:	51                   	push   ecx
c000f211:	e8 10 ff ff ff       	call   c000f126 <Dbg::logWriteIntBase(unsigned int, int)>
c000f216:	5d                   	pop    ebp
c000f217:	58                   	pop    eax
c000f218:	eb 8d                	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f21a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f21e:	89 d0                	mov    eax,edx
c000f220:	83 c2 08             	add    edx,0x8
c000f223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f227:	6a 10                	push   0x10
c000f229:	8b 00                	mov    eax,DWORD PTR [eax]
c000f22b:	50                   	push   eax
c000f22c:	e8 f5 fe ff ff       	call   c000f126 <Dbg::logWriteIntBase(unsigned int, int)>
c000f231:	58                   	pop    eax
c000f232:	5a                   	pop    edx
c000f233:	e9 6f ff ff ff       	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f238:	6a 25                	push   0x25
c000f23a:	e8 95 fe ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f23f:	5a                   	pop    edx
c000f240:	e9 62 ff ff ff       	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f245:	6a 25                	push   0x25
c000f247:	e8 88 fe ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f24c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f250:	50                   	push   eax
c000f251:	e8 7e fe ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f256:	5a                   	pop    edx
c000f257:	59                   	pop    ecx
c000f258:	e9 4a ff ff ff       	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f25d:	50                   	push   eax
c000f25e:	89 f7                	mov    edi,esi
c000f260:	e8 6f fe ff ff       	call   c000f0d4 <Dbg::logc(char)>
c000f265:	89 ee                	mov    esi,ebp
c000f267:	58                   	pop    eax
c000f268:	e9 3a ff ff ff       	jmp    c000f1a7 <Dbg::kprintf(char const*, ...)+0x60>
c000f26d:	90                   	nop

c000f26e <File::read(unsigned long long, void*, int*)>:
c000f26e:	53                   	push   ebx
c000f26f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f273:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f277:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f27e:	3c 19                	cmp    al,0x19
c000f280:	77 35                	ja     c000f2b7 <File::read(unsigned long long, void*, int*)+0x49>
c000f282:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c000f289:	85 c0                	test   eax,eax
c000f28b:	74 2a                	je     c000f2b7 <File::read(unsigned long long, void*, int*)+0x49>
c000f28d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f293:	85 c0                	test   eax,eax
c000f295:	74 20                	je     c000f2b7 <File::read(unsigned long long, void*, int*)+0x49>
c000f297:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f29b:	74 21                	je     c000f2be <File::read(unsigned long long, void*, int*)+0x50>
c000f29d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f29f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2b1:	5b                   	pop    ebx
c000f2b2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2b5:	ff e0                	jmp    eax
c000f2b7:	b8 0b 00 00 00       	mov    eax,0xb
c000f2bc:	eb 05                	jmp    c000f2c3 <File::read(unsigned long long, void*, int*)+0x55>
c000f2be:	b8 05 00 00 00       	mov    eax,0x5
c000f2c3:	5b                   	pop    ebx
c000f2c4:	c3                   	ret    
c000f2c5:	90                   	nop

c000f2c6 <File::write(unsigned long long, void*, int*)>:
c000f2c6:	53                   	push   ebx
c000f2c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2d6:	3c 19                	cmp    al,0x19
c000f2d8:	77 35                	ja     c000f30f <File::write(unsigned long long, void*, int*)+0x49>
c000f2da:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c000f2e1:	85 c0                	test   eax,eax
c000f2e3:	74 2a                	je     c000f30f <File::write(unsigned long long, void*, int*)+0x49>
c000f2e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2eb:	85 c0                	test   eax,eax
c000f2ed:	74 20                	je     c000f30f <File::write(unsigned long long, void*, int*)+0x49>
c000f2ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2f3:	74 21                	je     c000f316 <File::write(unsigned long long, void*, int*)+0x50>
c000f2f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2fb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f301:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f305:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f309:	5b                   	pop    ebx
c000f30a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f30d:	ff e0                	jmp    eax
c000f30f:	b8 0b 00 00 00       	mov    eax,0xb
c000f314:	eb 05                	jmp    c000f31b <File::write(unsigned long long, void*, int*)+0x55>
c000f316:	b8 05 00 00 00       	mov    eax,0x5
c000f31b:	5b                   	pop    ebx
c000f31c:	c3                   	ret    
c000f31d:	90                   	nop

c000f31e <Directory::read(unsigned long long, void*, int*)>:
c000f31e:	53                   	push   ebx
c000f31f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f323:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f327:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f32e:	3c 19                	cmp    al,0x19
c000f330:	77 35                	ja     c000f367 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f332:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c000f339:	85 c0                	test   eax,eax
c000f33b:	74 2a                	je     c000f367 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f33d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f343:	85 c0                	test   eax,eax
c000f345:	74 20                	je     c000f367 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f347:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f34b:	74 21                	je     c000f36e <Directory::read(unsigned long long, void*, int*)+0x50>
c000f34d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f34f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f353:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f35d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f361:	5b                   	pop    ebx
c000f362:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f365:	ff e0                	jmp    eax
c000f367:	b8 0b 00 00 00       	mov    eax,0xb
c000f36c:	eb 05                	jmp    c000f373 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f36e:	b8 05 00 00 00       	mov    eax,0x5
c000f373:	5b                   	pop    ebx
c000f374:	c3                   	ret    
c000f375:	90                   	nop

c000f376 <Directory::write(unsigned long long, void*, int*)>:
c000f376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f37a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f381:	b8 0b 00 00 00       	mov    eax,0xb
c000f386:	80 fa 19             	cmp    dl,0x19
c000f389:	77 18                	ja     c000f3a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f38b:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000f392:	85 d2                	test   edx,edx
c000f394:	74 0d                	je     c000f3a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f396:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f39d:	19 c0                	sbb    eax,eax
c000f39f:	83 e0 0a             	and    eax,0xa
c000f3a2:	40                   	inc    eax
c000f3a3:	c3                   	ret    

c000f3a4 <File::isAtty()>:
c000f3a4:	31 c0                	xor    eax,eax
c000f3a6:	c3                   	ret    
c000f3a7:	90                   	nop

c000f3a8 <Directory::isAtty()>:
c000f3a8:	31 c0                	xor    eax,eax
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3ac:	b8 0a 00 00 00       	mov    eax,0xa
c000f3b1:	c3                   	ret    

c000f3b2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3b2:	b8 0a 00 00 00       	mov    eax,0xa
c000f3b7:	c3                   	ret    

c000f3b8 <File::~File()>:
c000f3b8:	83 ec 0c             	sub    esp,0xc
c000f3bb:	ba b4 19 02 c0       	mov    edx,0xc00219b4
c000f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3c4:	89 10                	mov    DWORD PTR [eax],edx
c000f3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	50                   	push   eax
c000f3ce:	e8 f3 ea ff ff       	call   c000dec6 <UnixFile::~UnixFile()>
c000f3d3:	83 c4 10             	add    esp,0x10
c000f3d6:	90                   	nop
c000f3d7:	83 c4 0c             	add    esp,0xc
c000f3da:	c3                   	ret    
c000f3db:	90                   	nop

c000f3dc <File::~File()>:
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	83 ec 0c             	sub    esp,0xc
c000f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3e6:	e8 cd ff ff ff       	call   c000f3b8 <File::~File()>
c000f3eb:	83 c4 10             	add    esp,0x10
c000f3ee:	83 ec 08             	sub    esp,0x8
c000f3f1:	68 14 01 00 00       	push   0x114
c000f3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3fa:	e8 22 fc ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	83 c4 0c             	add    esp,0xc
c000f405:	c3                   	ret    

c000f406 <Directory::~Directory()>:
c000f406:	83 ec 0c             	sub    esp,0xc
c000f409:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000f40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f412:	89 10                	mov    DWORD PTR [eax],edx
c000f414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	50                   	push   eax
c000f41c:	e8 a5 ea ff ff       	call   c000dec6 <UnixFile::~UnixFile()>
c000f421:	83 c4 10             	add    esp,0x10
c000f424:	90                   	nop
c000f425:	83 c4 0c             	add    esp,0xc
c000f428:	c3                   	ret    
c000f429:	90                   	nop

c000f42a <Directory::~Directory()>:
c000f42a:	83 ec 0c             	sub    esp,0xc
c000f42d:	83 ec 0c             	sub    esp,0xc
c000f430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f434:	e8 cd ff ff ff       	call   c000f406 <Directory::~Directory()>
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	83 ec 08             	sub    esp,0x8
c000f43f:	68 14 01 00 00       	push   0x114
c000f444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f448:	e8 d4 fb ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c000f44d:	83 c4 10             	add    esp,0x10
c000f450:	83 c4 0c             	add    esp,0xc
c000f453:	c3                   	ret    

c000f454 <Filesystem::Filesystem()>:
c000f454:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000f459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f45d:	89 10                	mov    DWORD PTR [eax],edx
c000f45f:	8b 15 08 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024708
c000f465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f469:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f470:	a3 08 47 02 c0       	mov    ds:0xc0024708,eax
c000f475:	90                   	nop
c000f476:	c3                   	ret    
c000f477:	90                   	nop

c000f478 <Filesystem::~Filesystem()>:
c000f478:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000f47d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f481:	89 10                	mov    DWORD PTR [eax],edx
c000f483:	90                   	nop
c000f484:	c3                   	ret    
c000f485:	90                   	nop

c000f486 <Filesystem::~Filesystem()>:
c000f486:	83 ec 0c             	sub    esp,0xc
c000f489:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f48d:	e8 e6 ff ff ff       	call   c000f478 <Filesystem::~Filesystem()>
c000f492:	83 c4 04             	add    esp,0x4
c000f495:	83 ec 08             	sub    esp,0x8
c000f498:	6a 08                	push   0x8
c000f49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f49e:	e8 7e fb ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	83 c4 0c             	add    esp,0xc
c000f4a9:	c3                   	ret    

c000f4aa <initVFS()>:
c000f4aa:	83 ec 18             	sub    esp,0x18
c000f4ad:	6a 08                	push   0x8
c000f4af:	e8 5e fb ff ff       	call   c000f012 <operator new(unsigned long)>
c000f4b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4b7:	e8 be b3 00 00       	call   c001a87a <FAT::FAT()>
c000f4bc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4c3:	e8 4a fb ff ff       	call   c000f012 <operator new(unsigned long)>
c000f4c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4cb:	e8 4a c6 00 00       	call   c001bb1a <ISO9660::ISO9660()>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <standardiseFiles(char*, char const*, char const*)>:
c000f4d4:	55                   	push   ebp
c000f4d5:	57                   	push   edi
c000f4d6:	56                   	push   esi
c000f4d7:	53                   	push   ebx
c000f4d8:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4de:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4e5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4ec:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4f3:	68 00 04 00 00       	push   0x400
c000f4f8:	6a 00                	push   0x0
c000f4fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4fe:	56                   	push   esi
c000f4ff:	e8 b6 11 ff ff       	call   c00006ba <memset>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f50b:	75 0b                	jne    c000f518 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f50d:	50                   	push   eax
c000f50e:	50                   	push   eax
c000f50f:	57                   	push   edi
c000f510:	56                   	push   esi
c000f511:	e8 43 12 ff ff       	call   c0000759 <strcpy>
c000f516:	eb 41                	jmp    c000f559 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f518:	8a 07                	mov    al,BYTE PTR [edi]
c000f51a:	3c 5c                	cmp    al,0x5c
c000f51c:	74 04                	je     c000f522 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f51e:	3c 2f                	cmp    al,0x2f
c000f520:	75 18                	jne    c000f53a <standardiseFiles(char*, char const*, char const*)+0x66>
c000f522:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f525:	3c 60                	cmp    al,0x60
c000f527:	7e 03                	jle    c000f52c <standardiseFiles(char*, char const*, char const*)+0x58>
c000f529:	83 e8 20             	sub    eax,0x20
c000f52c:	88 04 24             	mov    BYTE PTR [esp],al
c000f52f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f536:	50                   	push   eax
c000f537:	50                   	push   eax
c000f538:	eb 18                	jmp    c000f552 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f53a:	50                   	push   eax
c000f53b:	50                   	push   eax
c000f53c:	55                   	push   ebp
c000f53d:	56                   	push   esi
c000f53e:	e8 16 12 ff ff       	call   c0000759 <strcpy>
c000f543:	5a                   	pop    edx
c000f544:	59                   	pop    ecx
c000f545:	68 74 2c 02 c0       	push   0xc0022c74
c000f54a:	56                   	push   esi
c000f54b:	e8 c0 12 ff ff       	call   c0000810 <strcat>
c000f550:	5d                   	pop    ebp
c000f551:	58                   	pop    eax
c000f552:	57                   	push   edi
c000f553:	56                   	push   esi
c000f554:	e8 b7 12 ff ff       	call   c0000810 <strcat>
c000f559:	83 c4 10             	add    esp,0x10
c000f55c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f55f:	3c 60                	cmp    al,0x60
c000f561:	7e 03                	jle    c000f566 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f563:	83 e8 20             	sub    eax,0x20
c000f566:	88 04 24             	mov    BYTE PTR [esp],al
c000f569:	88 03                	mov    BYTE PTR [ebx],al
c000f56b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f572:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f578:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f57c:	bf 03 00 00 00       	mov    edi,0x3
c000f581:	b8 03 00 00 00       	mov    eax,0x3
c000f586:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f589:	84 d2                	test   dl,dl
c000f58b:	0f 84 91 00 00 00    	je     c000f622 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f591:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f594:	80 fa 2f             	cmp    dl,0x2f
c000f597:	74 05                	je     c000f59e <standardiseFiles(char*, char const*, char const*)+0xca>
c000f599:	80 fa 5c             	cmp    dl,0x5c
c000f59c:	75 12                	jne    c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f59e:	89 c5                	mov    ebp,eax
c000f5a0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5a5:	74 09                	je     c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5a7:	40                   	inc    eax
c000f5a8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5ac:	89 cf                	mov    edi,ecx
c000f5ae:	eb d6                	jmp    c000f586 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5b0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5b5:	75 5b                	jne    c000f612 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5b7:	80 fa 2e             	cmp    dl,0x2e
c000f5ba:	75 56                	jne    c000f612 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5bc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5c0:	74 19                	je     c000f5db <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5c2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5c7:	74 53                	je     c000f61c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5c9:	89 f9                	mov    ecx,edi
c000f5cb:	41                   	inc    ecx
c000f5cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5cf:	80 fa 5c             	cmp    dl,0x5c
c000f5d2:	74 f7                	je     c000f5cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5d4:	80 fa 2f             	cmp    dl,0x2f
c000f5d7:	74 f2                	je     c000f5cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5d9:	eb d1                	jmp    c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5db:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5e0:	74 3a                	je     c000f61c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5e2:	83 f8 03             	cmp    eax,0x3
c000f5e5:	74 c5                	je     c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5e7:	41                   	inc    ecx
c000f5e8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5eb:	80 fa 2f             	cmp    dl,0x2f
c000f5ee:	74 f7                	je     c000f5e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5f0:	80 fa 5c             	cmp    dl,0x5c
c000f5f3:	74 f2                	je     c000f5e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5f5:	48                   	dec    eax
c000f5f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5fa:	75 06                	jne    c000f602 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f600:	eb f3                	jmp    c000f5f5 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f602:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f606:	74 07                	je     c000f60f <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f608:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f60c:	48                   	dec    eax
c000f60d:	eb f3                	jmp    c000f602 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f60f:	40                   	inc    eax
c000f610:	eb 9a                	jmp    c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f612:	80 fa 2f             	cmp    dl,0x2f
c000f615:	74 95                	je     c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f617:	80 fa 5c             	cmp    dl,0x5c
c000f61a:	74 90                	je     c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f61c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f61f:	40                   	inc    eax
c000f620:	eb 8a                	jmp    c000f5ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f622:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f626:	83 ec 0c             	sub    esp,0xc
c000f629:	53                   	push   ebx
c000f62a:	e8 a8 10 ff ff       	call   c00006d7 <strlen>
c000f62f:	83 c4 10             	add    esp,0x10
c000f632:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f637:	75 26                	jne    c000f65f <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f639:	83 ec 0c             	sub    esp,0xc
c000f63c:	53                   	push   ebx
c000f63d:	e8 95 10 ff ff       	call   c00006d7 <strlen>
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f64a:	74 26                	je     c000f672 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f64c:	83 ec 0c             	sub    esp,0xc
c000f64f:	53                   	push   ebx
c000f650:	e8 82 10 ff ff       	call   c00006d7 <strlen>
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f65d:	eb c7                	jmp    c000f626 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	53                   	push   ebx
c000f663:	e8 6f 10 ff ff       	call   c00006d7 <strlen>
c000f668:	83 c4 10             	add    esp,0x10
c000f66b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f670:	74 c7                	je     c000f639 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f672:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f678:	5b                   	pop    ebx
c000f679:	5e                   	pop    esi
c000f67a:	5f                   	pop    edi
c000f67b:	5d                   	pop    ebp
c000f67c:	c3                   	ret    
c000f67d:	90                   	nop

c000f67e <File::File(char const*, Process*)>:
c000f67e:	83 ec 0c             	sub    esp,0xc
c000f681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f685:	83 ec 08             	sub    esp,0x8
c000f688:	6a 00                	push   0x0
c000f68a:	50                   	push   eax
c000f68b:	e8 94 e6 ff ff       	call   c000dd24 <UnixFile::UnixFile(int)>
c000f690:	83 c4 10             	add    esp,0x10
c000f693:	ba b4 19 02 c0       	mov    edx,0xc00219b4
c000f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69c:	89 10                	mov    DWORD PTR [eax],edx
c000f69e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ac:	83 c0 0d             	add    eax,0xd
c000f6af:	83 ec 04             	sub    esp,0x4
c000f6b2:	52                   	push   edx
c000f6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6b7:	50                   	push   eax
c000f6b8:	e8 17 fe ff ff       	call   c000f4d4 <standardiseFiles(char*, char const*, char const*)>
c000f6bd:	83 c4 10             	add    esp,0x10
c000f6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6c7:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6dc:	90                   	nop
c000f6dd:	83 c4 0c             	add    esp,0xc
c000f6e0:	c3                   	ret    
c000f6e1:	90                   	nop

c000f6e2 <File::open(FileOpenMode)>:
c000f6e2:	53                   	push   ebx
c000f6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000f6e8:	83 ec 08             	sub    esp,0x8
c000f6eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6ef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6f6:	80 fa 19             	cmp    dl,0x19
c000f6f9:	77 40                	ja     c000f73b <File::open(FileOpenMode)+0x59>
c000f6fb:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000f702:	85 d2                	test   edx,edx
c000f704:	74 35                	je     c000f73b <File::open(FileOpenMode)+0x59>
c000f706:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f70c:	85 d2                	test   edx,edx
c000f70e:	74 2b                	je     c000f73b <File::open(FileOpenMode)+0x59>
c000f710:	b8 06 00 00 00       	mov    eax,0x6
c000f715:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f719:	75 20                	jne    c000f73b <File::open(FileOpenMode)+0x59>
c000f71b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f71d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f727:	51                   	push   ecx
c000f728:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f72b:	51                   	push   ecx
c000f72c:	52                   	push   edx
c000f72d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	85 c0                	test   eax,eax
c000f735:	75 04                	jne    c000f73b <File::open(FileOpenMode)+0x59>
c000f737:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f73b:	83 c4 08             	add    esp,0x8
c000f73e:	5b                   	pop    ebx
c000f73f:	c3                   	ret    

c000f740 <File::close()>:
c000f740:	53                   	push   ebx
c000f741:	b8 0b 00 00 00       	mov    eax,0xb
c000f746:	83 ec 08             	sub    esp,0x8
c000f749:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f74d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f754:	80 fa 19             	cmp    dl,0x19
c000f757:	77 41                	ja     c000f79a <File::close()+0x5a>
c000f759:	8b 1c 95 a0 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb460]
c000f760:	85 db                	test   ebx,ebx
c000f762:	74 36                	je     c000f79a <File::close()+0x5a>
c000f764:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f76b:	74 2d                	je     c000f79a <File::close()+0x5a>
c000f76d:	b8 05 00 00 00       	mov    eax,0x5
c000f772:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f776:	74 22                	je     c000f79a <File::close()+0x5a>
c000f778:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f77c:	8b 04 95 a0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb460]
c000f783:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f789:	53                   	push   ebx
c000f78a:	53                   	push   ebx
c000f78b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f78d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f793:	50                   	push   eax
c000f794:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f797:	83 c4 10             	add    esp,0x10
c000f79a:	83 c4 08             	add    esp,0x8
c000f79d:	5b                   	pop    ebx
c000f79e:	c3                   	ret    
c000f79f:	90                   	nop

c000f7a0 <File::seek(unsigned long long)>:
c000f7a0:	56                   	push   esi
c000f7a1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7a6:	53                   	push   ebx
c000f7a7:	51                   	push   ecx
c000f7a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7b4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7bb:	80 fa 19             	cmp    dl,0x19
c000f7be:	77 31                	ja     c000f7f1 <File::seek(unsigned long long)+0x51>
c000f7c0:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000f7c7:	85 d2                	test   edx,edx
c000f7c9:	74 26                	je     c000f7f1 <File::seek(unsigned long long)+0x51>
c000f7cb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d1:	85 d2                	test   edx,edx
c000f7d3:	74 1c                	je     c000f7f1 <File::seek(unsigned long long)+0x51>
c000f7d5:	b8 05 00 00 00       	mov    eax,0x5
c000f7da:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7de:	74 11                	je     c000f7f1 <File::seek(unsigned long long)+0x51>
c000f7e0:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e2:	53                   	push   ebx
c000f7e3:	51                   	push   ecx
c000f7e4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7ea:	52                   	push   edx
c000f7eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	5a                   	pop    edx
c000f7f2:	5b                   	pop    ebx
c000f7f3:	5e                   	pop    esi
c000f7f4:	c3                   	ret    
c000f7f5:	90                   	nop

c000f7f6 <File::tell(unsigned long long*)>:
c000f7f6:	83 ec 0c             	sub    esp,0xc
c000f7f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f7fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f802:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f809:	80 fa 19             	cmp    dl,0x19
c000f80c:	77 34                	ja     c000f842 <File::tell(unsigned long long*)+0x4c>
c000f80e:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000f815:	85 d2                	test   edx,edx
c000f817:	74 29                	je     c000f842 <File::tell(unsigned long long*)+0x4c>
c000f819:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f81f:	85 d2                	test   edx,edx
c000f821:	74 1f                	je     c000f842 <File::tell(unsigned long long*)+0x4c>
c000f823:	b8 05 00 00 00       	mov    eax,0x5
c000f828:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f82c:	74 14                	je     c000f842 <File::tell(unsigned long long*)+0x4c>
c000f82e:	50                   	push   eax
c000f82f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f831:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f835:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f83b:	52                   	push   edx
c000f83c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	c3                   	ret    

c000f846 <File::rewind()>:
c000f846:	83 ec 10             	sub    esp,0x10
c000f849:	6a 00                	push   0x0
c000f84b:	6a 00                	push   0x0
c000f84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f851:	e8 4a ff ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c000f856:	83 c4 1c             	add    esp,0x1c
c000f859:	c3                   	ret    

c000f85a <File::unlink()>:
c000f85a:	83 ec 0c             	sub    esp,0xc
c000f85d:	b8 0b 00 00 00       	mov    eax,0xb
c000f862:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f866:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f86d:	80 f9 19             	cmp    cl,0x19
c000f870:	77 2f                	ja     c000f8a1 <File::unlink()+0x47>
c000f872:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000f879:	85 c9                	test   ecx,ecx
c000f87b:	74 24                	je     c000f8a1 <File::unlink()+0x47>
c000f87d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f883:	85 c9                	test   ecx,ecx
c000f885:	74 1a                	je     c000f8a1 <File::unlink()+0x47>
c000f887:	b8 06 00 00 00       	mov    eax,0x6
c000f88c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f890:	75 0f                	jne    c000f8a1 <File::unlink()+0x47>
c000f892:	50                   	push   eax
c000f893:	83 c2 0d             	add    edx,0xd
c000f896:	50                   	push   eax
c000f897:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f899:	52                   	push   edx
c000f89a:	51                   	push   ecx
c000f89b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f89e:	83 c4 10             	add    esp,0x10
c000f8a1:	83 c4 0c             	add    esp,0xc
c000f8a4:	c3                   	ret    
c000f8a5:	90                   	nop

c000f8a6 <File::rename(char const*)>:
c000f8a6:	83 ec 0c             	sub    esp,0xc
c000f8a9:	b8 0b 00 00 00       	mov    eax,0xb
c000f8ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8b9:	80 f9 19             	cmp    cl,0x19
c000f8bc:	77 32                	ja     c000f8f0 <File::rename(char const*)+0x4a>
c000f8be:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000f8c5:	85 c9                	test   ecx,ecx
c000f8c7:	74 27                	je     c000f8f0 <File::rename(char const*)+0x4a>
c000f8c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8cf:	85 c9                	test   ecx,ecx
c000f8d1:	74 1d                	je     c000f8f0 <File::rename(char const*)+0x4a>
c000f8d3:	b8 06 00 00 00       	mov    eax,0x6
c000f8d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8dc:	75 12                	jne    c000f8f0 <File::rename(char const*)+0x4a>
c000f8de:	50                   	push   eax
c000f8df:	83 c2 0d             	add    edx,0xd
c000f8e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8e8:	52                   	push   edx
c000f8e9:	51                   	push   ecx
c000f8ea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	83 c4 0c             	add    esp,0xc
c000f8f3:	c3                   	ret    

c000f8f4 <File::chfatattr(unsigned char, unsigned char)>:
c000f8f4:	57                   	push   edi
c000f8f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f8fa:	56                   	push   esi
c000f8fb:	53                   	push   ebx
c000f8fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f900:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f904:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f908:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f90f:	80 f9 19             	cmp    cl,0x19
c000f912:	77 37                	ja     c000f94b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f914:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000f91b:	85 c9                	test   ecx,ecx
c000f91d:	74 2c                	je     c000f94b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f91f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f925:	85 c9                	test   ecx,ecx
c000f927:	74 22                	je     c000f94b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f929:	b8 06 00 00 00       	mov    eax,0x6
c000f92e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f932:	75 17                	jne    c000f94b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f934:	89 f0                	mov    eax,esi
c000f936:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f938:	0f b6 f0             	movzx  esi,al
c000f93b:	56                   	push   esi
c000f93c:	83 c2 0d             	add    edx,0xd
c000f93f:	0f b6 db             	movzx  ebx,bl
c000f942:	53                   	push   ebx
c000f943:	52                   	push   edx
c000f944:	51                   	push   ecx
c000f945:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f948:	83 c4 10             	add    esp,0x10
c000f94b:	5b                   	pop    ebx
c000f94c:	5e                   	pop    esi
c000f94d:	5f                   	pop    edi
c000f94e:	c3                   	ret    
c000f94f:	90                   	nop

c000f950 <File::exists()>:
c000f950:	83 ec 0c             	sub    esp,0xc
c000f953:	31 c0                	xor    eax,eax
c000f955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f959:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f960:	80 f9 19             	cmp    cl,0x19
c000f963:	77 24                	ja     c000f989 <File::exists()+0x39>
c000f965:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000f96c:	85 c9                	test   ecx,ecx
c000f96e:	74 19                	je     c000f989 <File::exists()+0x39>
c000f970:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f976:	85 c9                	test   ecx,ecx
c000f978:	74 0f                	je     c000f989 <File::exists()+0x39>
c000f97a:	50                   	push   eax
c000f97b:	83 c2 0d             	add    edx,0xd
c000f97e:	50                   	push   eax
c000f97f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f981:	52                   	push   edx
c000f982:	51                   	push   ecx
c000f983:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	83 c4 0c             	add    esp,0xc
c000f98c:	c3                   	ret    
c000f98d:	90                   	nop

c000f98e <File::stat(unsigned long long*, bool*)>:
c000f98e:	56                   	push   esi
c000f98f:	53                   	push   ebx
c000f990:	50                   	push   eax
c000f991:	b8 0b 00 00 00       	mov    eax,0xb
c000f996:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f99a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f99e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9a9:	80 f9 19             	cmp    cl,0x19
c000f9ac:	77 3d                	ja     c000f9eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f9ae:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000f9b5:	85 c9                	test   ecx,ecx
c000f9b7:	74 32                	je     c000f9eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f9b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9bf:	85 c9                	test   ecx,ecx
c000f9c1:	74 28                	je     c000f9eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f9c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9c9:	74 13                	je     c000f9de <File::stat(unsigned long long*, bool*)+0x50>
c000f9cb:	83 ec 04             	sub    esp,0x4
c000f9ce:	56                   	push   esi
c000f9cf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9d5:	51                   	push   ecx
c000f9d6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9d9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9dc:	eb 0a                	jmp    c000f9e8 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9de:	53                   	push   ebx
c000f9df:	83 c2 0d             	add    edx,0xd
c000f9e2:	56                   	push   esi
c000f9e3:	52                   	push   edx
c000f9e4:	51                   	push   ecx
c000f9e5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9e8:	83 c4 10             	add    esp,0x10
c000f9eb:	5a                   	pop    edx
c000f9ec:	5b                   	pop    ebx
c000f9ed:	5e                   	pop    esi
c000f9ee:	c3                   	ret    

c000f9ef <getcwd(Process*, char*, int)>:
c000f9ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9f3:	31 c0                	xor    eax,eax
c000f9f5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9f8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9fc:	7d 15                	jge    c000fa13 <getcwd(Process*, char*, int)+0x24>
c000f9fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa02:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa09:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa0c:	84 c9                	test   cl,cl
c000fa0e:	74 06                	je     c000fa16 <getcwd(Process*, char*, int)+0x27>
c000fa10:	40                   	inc    eax
c000fa11:	eb e2                	jmp    c000f9f5 <getcwd(Process*, char*, int)+0x6>
c000fa13:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa16:	31 c0                	xor    eax,eax
c000fa18:	c3                   	ret    

c000fa19 <setcwd(Process*, char*)>:
c000fa19:	55                   	push   ebp
c000fa1a:	57                   	push   edi
c000fa1b:	56                   	push   esi
c000fa1c:	53                   	push   ebx
c000fa1d:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa23:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa2a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa30:	57                   	push   edi
c000fa31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa38:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa3c:	56                   	push   esi
c000fa3d:	e8 92 fa ff ff       	call   c000f4d4 <standardiseFiles(char*, char const*, char const*)>
c000fa42:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa45:	e8 8d 0c ff ff       	call   c00006d7 <strlen>
c000fa4a:	83 c4 10             	add    esp,0x10
c000fa4d:	83 f8 02             	cmp    eax,0x2
c000fa50:	77 17                	ja     c000fa69 <setcwd(Process*, char*)+0x50>
c000fa52:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa57:	83 e8 41             	sub    eax,0x41
c000fa5a:	83 f8 19             	cmp    eax,0x19
c000fa5d:	76 24                	jbe    c000fa83 <setcwd(Process*, char*)+0x6a>
c000fa5f:	b8 03 00 00 00       	mov    eax,0x3
c000fa64:	e9 cb 00 00 00       	jmp    c000fb34 <setcwd(Process*, char*)+0x11b>
c000fa69:	83 ec 0c             	sub    esp,0xc
c000fa6c:	56                   	push   esi
c000fa6d:	e8 65 0c ff ff       	call   c00006d7 <strlen>
c000fa72:	83 c4 10             	add    esp,0x10
c000fa75:	83 f8 03             	cmp    eax,0x3
c000fa78:	75 33                	jne    c000faad <setcwd(Process*, char*)+0x94>
c000fa7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa7f:	75 2c                	jne    c000faad <setcwd(Process*, char*)+0x94>
c000fa81:	eb cf                	jmp    c000fa52 <setcwd(Process*, char*)+0x39>
c000fa83:	8b 14 85 a0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb460]
c000fa8a:	b8 05 00 00 00       	mov    eax,0x5
c000fa8f:	85 d2                	test   edx,edx
c000fa91:	0f 84 9d 00 00 00    	je     c000fb34 <setcwd(Process*, char*)+0x11b>
c000fa97:	b8 06 00 00 00       	mov    eax,0x6
c000fa9c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000faa3:	0f 84 8b 00 00 00    	je     c000fb34 <setcwd(Process*, char*)+0x11b>
c000faa9:	51                   	push   ecx
c000faaa:	51                   	push   ecx
c000faab:	eb 7b                	jmp    c000fb28 <setcwd(Process*, char*)+0x10f>
c000faad:	83 ec 0c             	sub    esp,0xc
c000fab0:	68 14 01 00 00       	push   0x114
c000fab5:	e8 58 f5 ff ff       	call   c000f012 <operator new(unsigned long)>
c000faba:	83 c4 0c             	add    esp,0xc
c000fabd:	89 c3                	mov    ebx,eax
c000fabf:	55                   	push   ebp
c000fac0:	56                   	push   esi
c000fac1:	50                   	push   eax
c000fac2:	e8 b7 fb ff ff       	call   c000f67e <File::File(char const*, Process*)>
c000fac7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fad3:	50                   	push   eax
c000fad4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fad8:	50                   	push   eax
c000fad9:	53                   	push   ebx
c000fada:	e8 af fe ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c000fadf:	83 c4 10             	add    esp,0x10
c000fae2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fae4:	83 f8 02             	cmp    eax,0x2
c000fae7:	75 09                	jne    c000faf2 <setcwd(Process*, char*)+0xd9>
c000fae9:	83 ec 0c             	sub    esp,0xc
c000faec:	53                   	push   ebx
c000faed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000faf0:	eb 0d                	jmp    c000faff <setcwd(Process*, char*)+0xe6>
c000faf2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000faf5:	85 c0                	test   eax,eax
c000faf7:	74 10                	je     c000fb09 <setcwd(Process*, char*)+0xf0>
c000faf9:	83 ec 0c             	sub    esp,0xc
c000fafc:	53                   	push   ebx
c000fafd:	ff d2                	call   edx
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	b8 01 00 00 00       	mov    eax,0x1
c000fb07:	eb 2b                	jmp    c000fb34 <setcwd(Process*, char*)+0x11b>
c000fb09:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb0e:	75 10                	jne    c000fb20 <setcwd(Process*, char*)+0x107>
c000fb10:	83 ec 0c             	sub    esp,0xc
c000fb13:	53                   	push   ebx
c000fb14:	ff d2                	call   edx
c000fb16:	83 c4 10             	add    esp,0x10
c000fb19:	b8 02 00 00 00       	mov    eax,0x2
c000fb1e:	eb 14                	jmp    c000fb34 <setcwd(Process*, char*)+0x11b>
c000fb20:	83 ec 0c             	sub    esp,0xc
c000fb23:	53                   	push   ebx
c000fb24:	ff d2                	call   edx
c000fb26:	58                   	pop    eax
c000fb27:	5a                   	pop    edx
c000fb28:	56                   	push   esi
c000fb29:	57                   	push   edi
c000fb2a:	e8 2a 0c ff ff       	call   c0000759 <strcpy>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	31 c0                	xor    eax,eax
c000fb34:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb3a:	5b                   	pop    ebx
c000fb3b:	5e                   	pop    esi
c000fb3c:	5f                   	pop    edi
c000fb3d:	5d                   	pop    ebp
c000fb3e:	c3                   	ret    
c000fb3f:	90                   	nop

c000fb40 <Directory::Directory(char const*, Process*)>:
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb47:	83 ec 08             	sub    esp,0x8
c000fb4a:	6a 00                	push   0x0
c000fb4c:	50                   	push   eax
c000fb4d:	e8 d2 e1 ff ff       	call   c000dd24 <UnixFile::UnixFile(int)>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c000fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5e:	89 10                	mov    DWORD PTR [eax],edx
c000fb60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb64:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb6e:	83 c0 0d             	add    eax,0xd
c000fb71:	83 ec 04             	sub    esp,0x4
c000fb74:	52                   	push   edx
c000fb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb79:	50                   	push   eax
c000fb7a:	e8 55 f9 ff ff       	call   c000f4d4 <standardiseFiles(char*, char const*, char const*)>
c000fb7f:	83 c4 10             	add    esp,0x10
c000fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb86:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb89:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb90:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb9a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb9e:	90                   	nop
c000fb9f:	83 c4 0c             	add    esp,0xc
c000fba2:	c3                   	ret    
c000fba3:	90                   	nop

c000fba4 <Directory::open()>:
c000fba4:	53                   	push   ebx
c000fba5:	b8 0b 00 00 00       	mov    eax,0xb
c000fbaa:	83 ec 08             	sub    esp,0x8
c000fbad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbb1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbb8:	80 fa 19             	cmp    dl,0x19
c000fbbb:	77 3d                	ja     c000fbfa <Directory::open()+0x56>
c000fbbd:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000fbc4:	85 d2                	test   edx,edx
c000fbc6:	74 32                	je     c000fbfa <Directory::open()+0x56>
c000fbc8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbce:	85 d2                	test   edx,edx
c000fbd0:	74 28                	je     c000fbfa <Directory::open()+0x56>
c000fbd2:	b8 06 00 00 00       	mov    eax,0x6
c000fbd7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbdb:	75 1d                	jne    c000fbfa <Directory::open()+0x56>
c000fbdd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbe3:	50                   	push   eax
c000fbe4:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbe6:	51                   	push   ecx
c000fbe7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbea:	51                   	push   ecx
c000fbeb:	52                   	push   edx
c000fbec:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	85 c0                	test   eax,eax
c000fbf4:	75 04                	jne    c000fbfa <Directory::open()+0x56>
c000fbf6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbfa:	83 c4 08             	add    esp,0x8
c000fbfd:	5b                   	pop    ebx
c000fbfe:	c3                   	ret    
c000fbff:	90                   	nop

c000fc00 <Directory::close()>:
c000fc00:	53                   	push   ebx
c000fc01:	b8 0b 00 00 00       	mov    eax,0xb
c000fc06:	83 ec 08             	sub    esp,0x8
c000fc09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc0d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc14:	80 fa 19             	cmp    dl,0x19
c000fc17:	77 41                	ja     c000fc5a <Directory::close()+0x5a>
c000fc19:	8b 1c 95 a0 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb460]
c000fc20:	85 db                	test   ebx,ebx
c000fc22:	74 36                	je     c000fc5a <Directory::close()+0x5a>
c000fc24:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc2b:	74 2d                	je     c000fc5a <Directory::close()+0x5a>
c000fc2d:	b8 05 00 00 00       	mov    eax,0x5
c000fc32:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc36:	74 22                	je     c000fc5a <Directory::close()+0x5a>
c000fc38:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc3c:	8b 04 95 a0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb460]
c000fc43:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc49:	53                   	push   ebx
c000fc4a:	53                   	push   ebx
c000fc4b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc4d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc53:	50                   	push   eax
c000fc54:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	83 c4 08             	add    esp,0x8
c000fc5d:	5b                   	pop    ebx
c000fc5e:	c3                   	ret    
c000fc5f:	90                   	nop

c000fc60 <Directory::unlink()>:
c000fc60:	83 ec 0c             	sub    esp,0xc
c000fc63:	b8 0b 00 00 00       	mov    eax,0xb
c000fc68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc73:	80 f9 19             	cmp    cl,0x19
c000fc76:	77 2f                	ja     c000fca7 <Directory::unlink()+0x47>
c000fc78:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000fc7f:	85 c9                	test   ecx,ecx
c000fc81:	74 24                	je     c000fca7 <Directory::unlink()+0x47>
c000fc83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc89:	85 c9                	test   ecx,ecx
c000fc8b:	74 1a                	je     c000fca7 <Directory::unlink()+0x47>
c000fc8d:	b8 06 00 00 00       	mov    eax,0x6
c000fc92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc96:	75 0f                	jne    c000fca7 <Directory::unlink()+0x47>
c000fc98:	50                   	push   eax
c000fc99:	83 c2 0d             	add    edx,0xd
c000fc9c:	50                   	push   eax
c000fc9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc9f:	52                   	push   edx
c000fca0:	51                   	push   ecx
c000fca1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	83 c4 0c             	add    esp,0xc
c000fcaa:	c3                   	ret    
c000fcab:	90                   	nop

c000fcac <Directory::rename(char const*)>:
c000fcac:	83 ec 0c             	sub    esp,0xc
c000fcaf:	b8 0b 00 00 00       	mov    eax,0xb
c000fcb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcbf:	80 f9 19             	cmp    cl,0x19
c000fcc2:	77 32                	ja     c000fcf6 <Directory::rename(char const*)+0x4a>
c000fcc4:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000fccb:	85 c9                	test   ecx,ecx
c000fccd:	74 27                	je     c000fcf6 <Directory::rename(char const*)+0x4a>
c000fccf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcd5:	85 c9                	test   ecx,ecx
c000fcd7:	74 1d                	je     c000fcf6 <Directory::rename(char const*)+0x4a>
c000fcd9:	b8 06 00 00 00       	mov    eax,0x6
c000fcde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fce2:	75 12                	jne    c000fcf6 <Directory::rename(char const*)+0x4a>
c000fce4:	50                   	push   eax
c000fce5:	83 c2 0d             	add    edx,0xd
c000fce8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcee:	52                   	push   edx
c000fcef:	51                   	push   ecx
c000fcf0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcf3:	83 c4 10             	add    esp,0x10
c000fcf6:	83 c4 0c             	add    esp,0xc
c000fcf9:	c3                   	ret    

c000fcfa <Directory::exists()>:
c000fcfa:	83 ec 0c             	sub    esp,0xc
c000fcfd:	31 c0                	xor    eax,eax
c000fcff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd0a:	80 f9 19             	cmp    cl,0x19
c000fd0d:	77 24                	ja     c000fd33 <Directory::exists()+0x39>
c000fd0f:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000fd16:	85 c9                	test   ecx,ecx
c000fd18:	74 19                	je     c000fd33 <Directory::exists()+0x39>
c000fd1a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd20:	85 c9                	test   ecx,ecx
c000fd22:	74 0f                	je     c000fd33 <Directory::exists()+0x39>
c000fd24:	50                   	push   eax
c000fd25:	83 c2 0d             	add    edx,0xd
c000fd28:	50                   	push   eax
c000fd29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd2b:	52                   	push   edx
c000fd2c:	51                   	push   ecx
c000fd2d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	83 c4 0c             	add    esp,0xc
c000fd36:	c3                   	ret    
c000fd37:	90                   	nop

c000fd38 <Directory::read(dirent*)>:
c000fd38:	83 ec 1c             	sub    esp,0x1c
c000fd3b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd40:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd44:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd4b:	80 fa 19             	cmp    dl,0x19
c000fd4e:	77 30                	ja     c000fd80 <Directory::read(dirent*)+0x48>
c000fd50:	8b 14 95 a0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb460]
c000fd57:	85 d2                	test   edx,edx
c000fd59:	74 25                	je     c000fd80 <Directory::read(dirent*)+0x48>
c000fd5b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd62:	74 1c                	je     c000fd80 <Directory::read(dirent*)+0x48>
c000fd64:	83 ec 0c             	sub    esp,0xc
c000fd67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd69:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd6d:	52                   	push   edx
c000fd6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd72:	6a 00                	push   0x0
c000fd74:	68 10 01 00 00       	push   0x110
c000fd79:	51                   	push   ecx
c000fd7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd7d:	83 c4 20             	add    esp,0x20
c000fd80:	83 c4 1c             	add    esp,0x1c
c000fd83:	c3                   	ret    

c000fd84 <Directory::create()>:
c000fd84:	83 ec 0c             	sub    esp,0xc
c000fd87:	b8 0b 00 00 00       	mov    eax,0xb
c000fd8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd97:	80 f9 19             	cmp    cl,0x19
c000fd9a:	77 2f                	ja     c000fdcb <Directory::create()+0x47>
c000fd9c:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c000fda3:	85 c9                	test   ecx,ecx
c000fda5:	74 24                	je     c000fdcb <Directory::create()+0x47>
c000fda7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdad:	85 c9                	test   ecx,ecx
c000fdaf:	74 1a                	je     c000fdcb <Directory::create()+0x47>
c000fdb1:	b8 06 00 00 00       	mov    eax,0x6
c000fdb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdba:	75 0f                	jne    c000fdcb <Directory::create()+0x47>
c000fdbc:	50                   	push   eax
c000fdbd:	83 c2 0d             	add    edx,0xd
c000fdc0:	50                   	push   eax
c000fdc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdc3:	52                   	push   edx
c000fdc4:	51                   	push   ecx
c000fdc5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdc8:	83 c4 10             	add    esp,0x10
c000fdcb:	83 c4 0c             	add    esp,0xc
c000fdce:	c3                   	ret    
c000fdcf:	90                   	nop

c000fdd0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fdd0:	b8 0a 00 00 00       	mov    eax,0xa
c000fdd5:	c3                   	ret    

c000fdd6 <Bus::Bus(char const*)>:
c000fdd6:	83 ec 0c             	sub    esp,0xc
c000fdd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fddd:	83 ec 08             	sub    esp,0x8
c000fde0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde4:	50                   	push   eax
c000fde5:	e8 62 09 00 00       	call   c001074c <Device::Device(char const*)>
c000fdea:	83 c4 10             	add    esp,0x10
c000fded:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c000fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf6:	89 10                	mov    DWORD PTR [eax],edx
c000fdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdfc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe06:	90                   	nop
c000fe07:	83 c4 0c             	add    esp,0xc
c000fe0a:	c3                   	ret    
c000fe0b:	90                   	nop

c000fe0c <Bus::~Bus()>:
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	89 10                	mov    DWORD PTR [eax],edx
c000fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	50                   	push   eax
c000fe22:	e8 db 05 00 00       	call   c0010402 <Device::~Device()>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	90                   	nop
c000fe2b:	83 c4 0c             	add    esp,0xc
c000fe2e:	c3                   	ret    
c000fe2f:	90                   	nop

c000fe30 <Bus::~Bus()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 cd ff ff ff       	call   c000fe0c <Bus::~Bus()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 ec 08             	sub    esp,0x8
c000fe45:	68 58 01 00 00       	push   0x158
c000fe4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4e:	e8 ce f1 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	83 c4 0c             	add    esp,0xc
c000fe59:	c3                   	ret    

c000fe5a <Buzzer::Buzzer(char const*)>:
c000fe5a:	83 ec 0c             	sub    esp,0xc
c000fe5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe61:	83 ec 08             	sub    esp,0x8
c000fe64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe68:	50                   	push   eax
c000fe69:	e8 de 08 00 00       	call   c001074c <Device::Device(char const*)>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c000fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7a:	89 10                	mov    DWORD PTR [eax],edx
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe98:	90                   	nop
c000fe99:	83 c4 0c             	add    esp,0xc
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <Buzzer::~Buzzer()>:
c000fe9e:	83 ec 0c             	sub    esp,0xc
c000fea1:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c000fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feaa:	89 10                	mov    DWORD PTR [eax],edx
c000feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	50                   	push   eax
c000feb4:	e8 49 05 00 00       	call   c0010402 <Device::~Device()>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	90                   	nop
c000febd:	83 c4 0c             	add    esp,0xc
c000fec0:	c3                   	ret    
c000fec1:	90                   	nop

c000fec2 <Buzzer::~Buzzer()>:
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	83 ec 0c             	sub    esp,0xc
c000fec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fecc:	e8 cd ff ff ff       	call   c000fe9e <Buzzer::~Buzzer()>
c000fed1:	83 c4 10             	add    esp,0x10
c000fed4:	83 ec 08             	sub    esp,0x8
c000fed7:	68 5c 01 00 00       	push   0x15c
c000fedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee0:	e8 3c f1 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c000fee5:	83 c4 10             	add    esp,0x10
c000fee8:	83 c4 0c             	add    esp,0xc
c000feeb:	c3                   	ret    

c000feec <Buzzer::stop()>:
c000feec:	83 ec 14             	sub    esp,0x14
c000feef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fef3:	8b 10                	mov    edx,DWORD PTR [eax]
c000fef5:	6a 00                	push   0x0
c000fef7:	50                   	push   eax
c000fef8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fefb:	83 c4 1c             	add    esp,0x1c
c000fefe:	c3                   	ret    

c000feff <beepThread(void*)>:
c000feff:	53                   	push   ebx
c000ff00:	83 ec 08             	sub    esp,0x8
c000ff03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff07:	e8 59 8a 00 00       	call   c0018965 <unlockScheduler()>
c000ff0c:	52                   	push   edx
c000ff0d:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff12:	52                   	push   edx
c000ff13:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff19:	52                   	push   edx
c000ff1a:	50                   	push   eax
c000ff1b:	e8 a1 8f 00 00       	call   c0018ec1 <nanoSleep(unsigned long long)>
c000ff20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff23:	e8 c4 ff ff ff       	call   c000feec <Buzzer::stop()>
c000ff28:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff30:	83 c4 18             	add    esp,0x18
c000ff33:	5b                   	pop    ebx
c000ff34:	e9 cc 8e 00 00       	jmp    c0018e05 <blockTask(TaskState)>
c000ff39:	90                   	nop

c000ff3a <Buzzer::beep(int, int, bool)>:
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	53                   	push   ebx
c000ff3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff41:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff49:	52                   	push   edx
c000ff4a:	52                   	push   edx
c000ff4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff51:	56                   	push   esi
c000ff52:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff55:	89 f8                	mov    eax,edi
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	84 c0                	test   al,al
c000ff5c:	74 1f                	je     c000ff7d <Buzzer::beep(int, int, bool)+0x43>
c000ff5e:	50                   	push   eax
c000ff5f:	50                   	push   eax
c000ff60:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff66:	99                   	cdq    
c000ff67:	52                   	push   edx
c000ff68:	50                   	push   eax
c000ff69:	e8 53 8f 00 00       	call   c0018ec1 <nanoSleep(unsigned long long)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff75:	5b                   	pop    ebx
c000ff76:	5e                   	pop    esi
c000ff77:	5f                   	pop    edi
c000ff78:	e9 6f ff ff ff       	jmp    c000feec <Buzzer::stop()>
c000ff7d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff83:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c000ff88:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff90:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff94:	c7 44 24 14 ff fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000feff
c000ff9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffa0:	5b                   	pop    ebx
c000ffa1:	5e                   	pop    esi
c000ffa2:	5f                   	pop    edi
c000ffa3:	e9 f0 8a 00 00       	jmp    c0018a98 <Process::createThread(void (*)(void*), void*, int)>

c000ffa8 <loadClockSettings()>:
c000ffa8:	c7 05 14 47 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024714,0xa
c000ffb2:	c6 05 11 47 02 c0 00 	mov    BYTE PTR ds:0xc0024711,0x0
c000ffb9:	c6 05 10 47 02 c0 01 	mov    BYTE PTR ds:0xc0024710,0x1
c000ffc0:	c3                   	ret    
c000ffc1:	90                   	nop

c000ffc2 <Clock::Clock(char const*)>:
c000ffc2:	83 ec 0c             	sub    esp,0xc
c000ffc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc9:	83 ec 08             	sub    esp,0x8
c000ffcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd0:	50                   	push   eax
c000ffd1:	e8 76 07 00 00       	call   c001074c <Device::Device(char const*)>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	ba 48 1a 02 c0       	mov    edx,0xc0021a48
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fff2:	90                   	nop
c000fff3:	83 c4 0c             	add    esp,0xc
c000fff6:	c3                   	ret    
c000fff7:	90                   	nop

c000fff8 <Clock::~Clock()>:
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	ba 48 1a 02 c0       	mov    edx,0xc0021a48
c0010000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010004:	89 10                	mov    DWORD PTR [eax],edx
c0010006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	50                   	push   eax
c001000e:	e8 ef 03 00 00       	call   c0010402 <Device::~Device()>
c0010013:	83 c4 10             	add    esp,0x10
c0010016:	90                   	nop
c0010017:	83 c4 0c             	add    esp,0xc
c001001a:	c3                   	ret    
c001001b:	90                   	nop

c001001c <Clock::~Clock()>:
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	83 ec 0c             	sub    esp,0xc
c0010022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010026:	e8 cd ff ff ff       	call   c000fff8 <Clock::~Clock()>
c001002b:	83 c4 10             	add    esp,0x10
c001002e:	83 ec 08             	sub    esp,0x8
c0010031:	68 58 01 00 00       	push   0x158
c0010036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001003a:	e8 e2 ef ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	83 c4 0c             	add    esp,0xc
c0010045:	c3                   	ret    

c0010046 <Clock::timeInSecondsLocal()>:
c0010046:	53                   	push   ebx
c0010047:	83 ec 14             	sub    esp,0x14
c001004a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001004e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010050:	50                   	push   eax
c0010051:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010054:	0f b6 0d 10 47 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024710
c001005b:	03 0d 14 47 02 c0    	add    ecx,DWORD PTR ds:0xc0024714
c0010061:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010067:	89 cb                	mov    ebx,ecx
c0010069:	c1 fb 1f             	sar    ebx,0x1f
c001006c:	01 c8                	add    eax,ecx
c001006e:	11 da                	adc    edx,ebx
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	31 c9                	xor    ecx,ecx
c0010075:	80 3d 11 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024711,0x0
c001007c:	74 05                	je     c0010083 <Clock::timeInSecondsLocal()+0x3d>
c001007e:	b9 08 07 00 00       	mov    ecx,0x708
c0010083:	31 db                	xor    ebx,ebx
c0010085:	01 c8                	add    eax,ecx
c0010087:	11 da                	adc    edx,ebx
c0010089:	83 c4 08             	add    esp,0x8
c001008c:	5b                   	pop    ebx
c001008d:	c3                   	ret    

c001008e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010095:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010099:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001009d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001009f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100a2:	0f b6 05 10 47 02 c0 	movzx  eax,BYTE PTR ds:0xc0024710
c00100a9:	03 05 14 47 02 c0    	add    eax,DWORD PTR ds:0xc0024714
c00100af:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100b5:	99                   	cdq    
c00100b6:	29 c6                	sub    esi,eax
c00100b8:	19 d7                	sbb    edi,edx
c00100ba:	89 f0                	mov    eax,esi
c00100bc:	89 fa                	mov    edx,edi
c00100be:	31 f6                	xor    esi,esi
c00100c0:	80 3d 11 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024711,0x0
c00100c7:	74 05                	je     c00100ce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100c9:	be 08 07 00 00       	mov    esi,0x708
c00100ce:	31 ff                	xor    edi,edi
c00100d0:	29 f0                	sub    eax,esi
c00100d2:	19 fa                	sbb    edx,edi
c00100d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100dc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100e0:	89 d8                	mov    eax,ebx
c00100e2:	5b                   	pop    ebx
c00100e3:	5e                   	pop    esi
c00100e4:	5f                   	pop    edi
c00100e5:	ff e0                	jmp    eax

c00100e7 <datetimeToSeconds(datetime_t)>:
c00100e7:	55                   	push   ebp
c00100e8:	57                   	push   edi
c00100e9:	56                   	push   esi
c00100ea:	53                   	push   ebx
c00100eb:	83 ec 14             	sub    esp,0x14
c00100ee:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100f6:	0f b6 f5             	movzx  esi,ch
c00100f9:	6b f6 3c             	imul   esi,esi,0x3c
c00100fc:	89 cf                	mov    edi,ecx
c00100fe:	89 d3                	mov    ebx,edx
c0010100:	0f b6 c9             	movzx  ecx,cl
c0010103:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010109:	0f b6 c6             	movzx  eax,dh
c001010c:	c1 ef 10             	shr    edi,0x10
c001010f:	48                   	dec    eax
c0010110:	c1 eb 10             	shr    ebx,0x10
c0010113:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010117:	89 f8                	mov    eax,edi
c0010119:	0f b6 f8             	movzx  edi,al
c001011c:	01 fe                	add    esi,edi
c001011e:	01 f1                	add    ecx,esi
c0010120:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010124:	c1 f9 1f             	sar    ecx,0x1f
c0010127:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001012b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010130:	0f b6 d2             	movzx  edx,dl
c0010133:	66 81 eb 6c 07       	sub    bx,0x76c
c0010138:	8b 0c 8d 80 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde580]
c001013f:	0f b7 f3             	movzx  esi,bx
c0010142:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010146:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001014b:	76 29                	jbe    c0010176 <datetimeToSeconds(datetime_t)+0x8f>
c001014d:	f6 c3 03             	test   bl,0x3
c0010150:	75 24                	jne    c0010176 <datetimeToSeconds(datetime_t)+0x8f>
c0010152:	31 d2                	xor    edx,edx
c0010154:	bf 64 00 00 00       	mov    edi,0x64
c0010159:	89 d8                	mov    eax,ebx
c001015b:	66 f7 f7             	div    di
c001015e:	66 85 d2             	test   dx,dx
c0010161:	75 12                	jne    c0010175 <datetimeToSeconds(datetime_t)+0x8e>
c0010163:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010169:	bf 90 01 00 00       	mov    edi,0x190
c001016e:	99                   	cdq    
c001016f:	f7 ff                	idiv   edi
c0010171:	85 d2                	test   edx,edx
c0010173:	75 01                	jne    c0010176 <datetimeToSeconds(datetime_t)+0x8f>
c0010175:	41                   	inc    ecx
c0010176:	66 83 fb 46          	cmp    bx,0x46
c001017a:	76 45                	jbe    c00101c1 <datetimeToSeconds(datetime_t)+0xda>
c001017c:	bb 46 00 00 00       	mov    ebx,0x46
c0010181:	bf 64 00 00 00       	mov    edi,0x64
c0010186:	bd 90 01 00 00       	mov    ebp,0x190
c001018b:	b8 6d 01 00 00       	mov    eax,0x16d
c0010190:	f6 c3 03             	test   bl,0x3
c0010193:	75 23                	jne    c00101b8 <datetimeToSeconds(datetime_t)+0xd1>
c0010195:	89 d8                	mov    eax,ebx
c0010197:	99                   	cdq    
c0010198:	f7 ff                	idiv   edi
c001019a:	85 d2                	test   edx,edx
c001019c:	b8 6e 01 00 00       	mov    eax,0x16e
c00101a1:	75 15                	jne    c00101b8 <datetimeToSeconds(datetime_t)+0xd1>
c00101a3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101a9:	99                   	cdq    
c00101aa:	f7 fd                	idiv   ebp
c00101ac:	31 c0                	xor    eax,eax
c00101ae:	85 d2                	test   edx,edx
c00101b0:	0f 94 c0             	sete   al
c00101b3:	05 6d 01 00 00       	add    eax,0x16d
c00101b8:	43                   	inc    ebx
c00101b9:	01 c1                	add    ecx,eax
c00101bb:	39 f3                	cmp    ebx,esi
c00101bd:	7c cc                	jl     c001018b <datetimeToSeconds(datetime_t)+0xa4>
c00101bf:	eb 3b                	jmp    c00101fc <datetimeToSeconds(datetime_t)+0x115>
c00101c1:	74 39                	je     c00101fc <datetimeToSeconds(datetime_t)+0x115>
c00101c3:	b8 45 00 00 00       	mov    eax,0x45
c00101c8:	89 c2                	mov    edx,eax
c00101ca:	83 e2 03             	and    edx,0x3
c00101cd:	39 f0                	cmp    eax,esi
c00101cf:	7e 13                	jle    c00101e4 <datetimeToSeconds(datetime_t)+0xfd>
c00101d1:	85 d2                	test   edx,edx
c00101d3:	0f 94 c2             	sete   dl
c00101d6:	0f b6 d2             	movzx  edx,dl
c00101d9:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101df:	48                   	dec    eax
c00101e0:	29 d1                	sub    ecx,edx
c00101e2:	eb e4                	jmp    c00101c8 <datetimeToSeconds(datetime_t)+0xe1>
c00101e4:	b8 6d 01 00 00       	mov    eax,0x16d
c00101e9:	85 d2                	test   edx,edx
c00101eb:	75 0d                	jne    c00101fa <datetimeToSeconds(datetime_t)+0x113>
c00101ed:	31 c0                	xor    eax,eax
c00101ef:	66 85 db             	test   bx,bx
c00101f2:	0f 95 c0             	setne  al
c00101f5:	05 6d 01 00 00       	add    eax,0x16d
c00101fa:	29 c1                	sub    ecx,eax
c00101fc:	b8 80 51 01 00       	mov    eax,0x15180
c0010201:	f7 e9                	imul   ecx
c0010203:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010207:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001020b:	83 c4 14             	add    esp,0x14
c001020e:	5b                   	pop    ebx
c001020f:	5e                   	pop    esi
c0010210:	5f                   	pop    edi
c0010211:	5d                   	pop    ebp
c0010212:	c3                   	ret    
c0010213:	90                   	nop

c0010214 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010214:	57                   	push   edi
c0010215:	56                   	push   esi
c0010216:	53                   	push   ebx
c0010217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001021b:	8b 06                	mov    eax,DWORD PTR [esi]
c001021d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010220:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010228:	e8 ba fe ff ff       	call   c00100e7 <datetimeToSeconds(datetime_t)>
c001022d:	59                   	pop    ecx
c001022e:	0f b6 0d 10 47 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024710
c0010235:	03 0d 14 47 02 c0    	add    ecx,DWORD PTR ds:0xc0024714
c001023b:	5b                   	pop    ebx
c001023c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010242:	89 cb                	mov    ebx,ecx
c0010244:	c1 fb 1f             	sar    ebx,0x1f
c0010247:	29 c8                	sub    eax,ecx
c0010249:	19 da                	sbb    edx,ebx
c001024b:	31 c9                	xor    ecx,ecx
c001024d:	80 3d 11 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024711,0x0
c0010254:	74 05                	je     c001025b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010256:	b9 08 07 00 00       	mov    ecx,0x708
c001025b:	31 db                	xor    ebx,ebx
c001025d:	29 c8                	sub    eax,ecx
c001025f:	19 da                	sbb    edx,ebx
c0010261:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010265:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010269:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001026d:	5b                   	pop    ebx
c001026e:	89 f8                	mov    eax,edi
c0010270:	5e                   	pop    esi
c0010271:	5f                   	pop    edi
c0010272:	ff e0                	jmp    eax

c0010274 <secondsToDatetime(unsigned long long)>:
c0010274:	55                   	push   ebp
c0010275:	57                   	push   edi
c0010276:	56                   	push   esi
c0010277:	53                   	push   ebx
c0010278:	83 ec 1c             	sub    esp,0x1c
c001027b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001027f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010283:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010287:	6a 00                	push   0x0
c0010289:	68 80 51 01 00       	push   0x15180
c001028e:	55                   	push   ebp
c001028f:	57                   	push   edi
c0010290:	e8 67 f1 00 00       	call   c001f3fc <__udivdi3>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001029c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102a2:	6a 00                	push   0x0
c00102a4:	68 80 51 01 00       	push   0x15180
c00102a9:	55                   	push   ebp
c00102aa:	57                   	push   edi
c00102ab:	e8 4c f2 00 00       	call   c001f4fc <__umoddi3>
c00102b0:	bf 10 0e 00 00       	mov    edi,0xe10
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	99                   	cdq    
c00102b9:	f7 ff                	idiv   edi
c00102bb:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102be:	89 d0                	mov    eax,edx
c00102c0:	99                   	cdq    
c00102c1:	bf 3c 00 00 00       	mov    edi,0x3c
c00102c6:	f7 ff                	idiv   edi
c00102c8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102cb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102ce:	85 db                	test   ebx,ebx
c00102d0:	79 11                	jns    c00102e3 <secondsToDatetime(unsigned long long)+0x6f>
c00102d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102d6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102dc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102e1:	eb 07                	jmp    c00102ea <secondsToDatetime(unsigned long long)+0x76>
c00102e3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102e8:	89 d8                	mov    eax,ebx
c00102ea:	99                   	cdq    
c00102eb:	f7 f9                	idiv   ecx
c00102ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102f1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102f6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102fe:	01 c3                	add    ebx,eax
c0010300:	31 d2                	xor    edx,edx
c0010302:	89 d8                	mov    eax,ebx
c0010304:	bf b4 05 00 00       	mov    edi,0x5b4
c0010309:	f7 f1                	div    ecx
c001030b:	31 d2                	xor    edx,edx
c001030d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010312:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010315:	89 d8                	mov    eax,ebx
c0010317:	f7 f7                	div    edi
c0010319:	29 c1                	sub    ecx,eax
c001031b:	31 d2                	xor    edx,edx
c001031d:	89 d8                	mov    eax,ebx
c001031f:	f7 f5                	div    ebp
c0010321:	29 c1                	sub    ecx,eax
c0010323:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010328:	89 c8                	mov    eax,ecx
c001032a:	31 d2                	xor    edx,edx
c001032c:	f7 f5                	div    ebp
c001032e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010332:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010337:	89 c8                	mov    eax,ecx
c0010339:	31 d2                	xor    edx,edx
c001033b:	f7 f5                	div    ebp
c001033d:	01 c3                	add    ebx,eax
c001033f:	31 d2                	xor    edx,edx
c0010341:	89 c8                	mov    eax,ecx
c0010343:	f7 f7                	div    edi
c0010345:	29 c3                	sub    ebx,eax
c0010347:	bf 99 00 00 00       	mov    edi,0x99
c001034c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010354:	29 c3                	sub    ebx,eax
c0010356:	31 d2                	xor    edx,edx
c0010358:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001035b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001035e:	83 c1 02             	add    ecx,0x2
c0010361:	bb 05 00 00 00       	mov    ebx,0x5
c0010366:	89 c8                	mov    eax,ecx
c0010368:	f7 f7                	div    edi
c001036a:	89 c7                	mov    edi,eax
c001036c:	31 d2                	xor    edx,edx
c001036e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010374:	83 c0 02             	add    eax,0x2
c0010377:	f7 f3                	div    ebx
c0010379:	89 eb                	mov    ebx,ebp
c001037b:	29 c3                	sub    ebx,eax
c001037d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010383:	19 c0                	sbb    eax,eax
c0010385:	31 d2                	xor    edx,edx
c0010387:	83 e0 0c             	and    eax,0xc
c001038a:	88 1e                	mov    BYTE PTR [esi],bl
c001038c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010390:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010398:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001039c:	83 f9 01             	cmp    ecx,0x1
c001039f:	0f 96 c2             	setbe  dl
c00103a2:	01 d0                	add    eax,edx
c00103a4:	41                   	inc    ecx
c00103a5:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103a9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103ac:	83 c4 1c             	add    esp,0x1c
c00103af:	89 f0                	mov    eax,esi
c00103b1:	5b                   	pop    ebx
c00103b2:	5e                   	pop    esi
c00103b3:	5f                   	pop    edi
c00103b4:	5d                   	pop    ebp
c00103b5:	c2 04 00             	ret    0x4

c00103b8 <Clock::timeInDatetimeLocal()>:
c00103b8:	53                   	push   ebx
c00103b9:	83 ec 14             	sub    esp,0x14
c00103bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103c4:	e8 7d fc ff ff       	call   c0010046 <Clock::timeInSecondsLocal()>
c00103c9:	83 c4 0c             	add    esp,0xc
c00103cc:	52                   	push   edx
c00103cd:	50                   	push   eax
c00103ce:	53                   	push   ebx
c00103cf:	e8 a0 fe ff ff       	call   c0010274 <secondsToDatetime(unsigned long long)>
c00103d4:	83 c4 14             	add    esp,0x14
c00103d7:	89 d8                	mov    eax,ebx
c00103d9:	5b                   	pop    ebx
c00103da:	c2 04 00             	ret    0x4
c00103dd:	90                   	nop

c00103de <Device::hibernate()>:
c00103de:	c3                   	ret    
c00103df:	90                   	nop

c00103e0 <Device::wake()>:
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <Device::detect()>:
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <Device::disableLegacy()>:
c00103e4:	c3                   	ret    
c00103e5:	90                   	nop

c00103e6 <Device::powerSaving(PowerSavingLevel)>:
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <DriverlessDevice::close(int, int, void*)>:
c00103e8:	31 c0                	xor    eax,eax
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <DriverlessDevice::detect()>:
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <DriverlessDevice::open(int, int, void*)>:
c00103ee:	83 ec 18             	sub    esp,0x18
c00103f1:	68 b0 1a 02 c0       	push   0xc0021ab0
c00103f6:	e8 7b 55 00 00       	call   c0015976 <Krnl::panic(char const*)>
c00103fb:	83 c8 ff             	or     eax,0xffffffff
c00103fe:	83 c4 1c             	add    esp,0x1c
c0010401:	c3                   	ret    

c0010402 <Device::~Device()>:
c0010402:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c0010407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001040b:	89 10                	mov    DWORD PTR [eax],edx
c001040d:	90                   	nop
c001040e:	c3                   	ret    
c001040f:	90                   	nop

c0010410 <Device::~Device()>:
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010417:	e8 e6 ff ff ff       	call   c0010402 <Device::~Device()>
c001041c:	83 c4 04             	add    esp,0x4
c001041f:	83 ec 08             	sub    esp,0x8
c0010422:	68 58 01 00 00       	push   0x158
c0010427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001042b:	e8 f1 eb ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	83 c4 0c             	add    esp,0xc
c0010436:	c3                   	ret    
c0010437:	90                   	nop

c0010438 <Device::findAndLoadDriver()>:
c0010438:	c3                   	ret    
c0010439:	90                   	nop

c001043a <Device::preOpenPCI(PCIDeviceInfo)>:
c001043a:	57                   	push   edi
c001043b:	b9 09 00 00 00       	mov    ecx,0x9
c0010440:	56                   	push   esi
c0010441:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010445:	81 c7 18 01 00 00    	add    edi,0x118
c001044b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001044f:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010456:	fc                   	cld    
c0010457:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010459:	5e                   	pop    esi
c001045a:	5f                   	pop    edi
c001045b:	c3                   	ret    

c001045c <Device::preOpenACPI(void*, char*, char*)>:
c001045c:	56                   	push   esi
c001045d:	53                   	push   ebx
c001045e:	83 ec 08             	sub    esp,0x8
c0010461:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010469:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001046d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010473:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001047d:	6a 1e                	push   0x1e
c001047f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010485:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010489:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001048f:	50                   	push   eax
c0010490:	e8 ef 01 ff ff       	call   c0000684 <memcpy>
c0010495:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010499:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001049d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104a5:	83 c4 14             	add    esp,0x14
c00104a8:	5b                   	pop    ebx
c00104a9:	5e                   	pop    esi
c00104aa:	e9 d5 01 ff ff       	jmp    c0000684 <memcpy>
c00104af:	90                   	nop

c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104b0:	55                   	push   ebp
c00104b1:	57                   	push   edi
c00104b2:	56                   	push   esi
c00104b3:	53                   	push   ebx
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104c7:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104cc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104d3:	75 0b                	jne    c00104e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00104d7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104de:	eb 24                	jmp    c0010504 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104e0:	e8 25 43 00 00       	call   c001480a <thisCPU()>
c00104e5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ed:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104f5:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104f9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010501:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010504:	83 c4 0c             	add    esp,0xc
c0010507:	5b                   	pop    ebx
c0010508:	5e                   	pop    esi
c0010509:	5f                   	pop    edi
c001050a:	5d                   	pop    ebp
c001050b:	ff e0                	jmp    eax
c001050d:	90                   	nop

c001050e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001050e:	57                   	push   edi
c001050f:	56                   	push   esi
c0010510:	53                   	push   ebx
c0010511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010515:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010519:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001051d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010522:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010529:	75 0b                	jne    c0010536 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001052b:	8b 00                	mov    eax,DWORD PTR [eax]
c001052d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010531:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010534:	eb 20                	jmp    c0010556 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010536:	e8 cf 42 00 00       	call   c001480a <thisCPU()>
c001053b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010541:	8b 10                	mov    edx,DWORD PTR [eax]
c0010543:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010547:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001054b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001054f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010553:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010556:	5b                   	pop    ebx
c0010557:	5e                   	pop    esi
c0010558:	5f                   	pop    edi
c0010559:	ff e0                	jmp    eax
c001055b:	90                   	nop

c001055c <Device::addChild(Device*)>:
c001055c:	53                   	push   ebx
c001055d:	83 ec 08             	sub    esp,0x8
c0010560:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010564:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010568:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001056e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010574:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010576:	85 d2                	test   edx,edx
c0010578:	74 04                	je     c001057e <Device::addChild(Device*)+0x22>
c001057a:	89 d3                	mov    ebx,edx
c001057c:	eb f6                	jmp    c0010574 <Device::addChild(Device*)+0x18>
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010584:	6a 08                	push   0x8
c0010586:	e8 87 ea ff ff       	call   c000f012 <operator new(unsigned long)>
c001058b:	89 03                	mov    DWORD PTR [ebx],eax
c001058d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010593:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001059a:	83 c4 18             	add    esp,0x18
c001059d:	5b                   	pop    ebx
c001059e:	c3                   	ret    
c001059f:	90                   	nop

c00105a0 <Device::removeAllChildren()>:
c00105a0:	56                   	push   esi
c00105a1:	53                   	push   ebx
c00105a2:	52                   	push   edx
c00105a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105b0:	74 17                	je     c00105c9 <Device::removeAllChildren()+0x29>
c00105b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105b5:	85 c0                	test   eax,eax
c00105b7:	74 0c                	je     c00105c5 <Device::removeAllChildren()+0x25>
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00105be:	50                   	push   eax
c00105bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105c2:	83 c4 10             	add    esp,0x10
c00105c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105c7:	eb e4                	jmp    c00105ad <Device::removeAllChildren()+0xd>
c00105c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105e2:	58                   	pop    eax
c00105e3:	5b                   	pop    ebx
c00105e4:	5e                   	pop    esi
c00105e5:	c3                   	ret    

c00105e6 <Device::hibernateAll()>:
c00105e6:	53                   	push   ebx
c00105e7:	83 ec 14             	sub    esp,0x14
c00105ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105f0:	53                   	push   ebx
c00105f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010600:	74 0f                	je     c0010611 <Device::hibernateAll()+0x2b>
c0010602:	83 ec 0c             	sub    esp,0xc
c0010605:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010608:	e8 d9 ff ff ff       	call   c00105e6 <Device::hibernateAll()>
c001060d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001060f:	eb e9                	jmp    c00105fa <Device::hibernateAll()+0x14>
c0010611:	83 c4 08             	add    esp,0x8
c0010614:	5b                   	pop    ebx
c0010615:	c3                   	ret    

c0010616 <Device::wakeAll()>:
c0010616:	53                   	push   ebx
c0010617:	83 ec 14             	sub    esp,0x14
c001061a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001061e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010620:	53                   	push   ebx
c0010621:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010624:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001062a:	83 c4 10             	add    esp,0x10
c001062d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010630:	74 0f                	je     c0010641 <Device::wakeAll()+0x2b>
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010638:	e8 d9 ff ff ff       	call   c0010616 <Device::wakeAll()>
c001063d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001063f:	eb e9                	jmp    c001062a <Device::wakeAll()+0x14>
c0010641:	83 c4 08             	add    esp,0x8
c0010644:	5b                   	pop    ebx
c0010645:	c3                   	ret    

c0010646 <Device::detectAll()>:
c0010646:	53                   	push   ebx
c0010647:	83 ec 14             	sub    esp,0x14
c001064a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001064e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010650:	53                   	push   ebx
c0010651:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010654:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010660:	74 0f                	je     c0010671 <Device::detectAll()+0x2b>
c0010662:	83 ec 0c             	sub    esp,0xc
c0010665:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010668:	e8 d9 ff ff ff       	call   c0010646 <Device::detectAll()>
c001066d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001066f:	eb e9                	jmp    c001065a <Device::detectAll()+0x14>
c0010671:	83 c4 08             	add    esp,0x8
c0010674:	5b                   	pop    ebx
c0010675:	c3                   	ret    

c0010676 <Device::disableLegacyAll()>:
c0010676:	53                   	push   ebx
c0010677:	83 ec 14             	sub    esp,0x14
c001067a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001067e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010680:	53                   	push   ebx
c0010681:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010684:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010690:	74 0f                	je     c00106a1 <Device::disableLegacyAll()+0x2b>
c0010692:	83 ec 0c             	sub    esp,0xc
c0010695:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010698:	e8 d9 ff ff ff       	call   c0010676 <Device::disableLegacyAll()>
c001069d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001069f:	eb e9                	jmp    c001068a <Device::disableLegacyAll()+0x14>
c00106a1:	83 c4 08             	add    esp,0x8
c00106a4:	5b                   	pop    ebx
c00106a5:	c3                   	ret    

c00106a6 <Device::loadDriversForAll()>:
c00106a6:	53                   	push   ebx
c00106a7:	83 ec 08             	sub    esp,0x8
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106b6:	85 db                	test   ebx,ebx
c00106b8:	74 12                	je     c00106cc <Device::loadDriversForAll()+0x26>
c00106ba:	83 ec 0c             	sub    esp,0xc
c00106bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106c0:	e8 e1 ff ff ff       	call   c00106a6 <Device::loadDriversForAll()>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	89 d8                	mov    eax,ebx
c00106ca:	eb e8                	jmp    c00106b4 <Device::loadDriversForAll()+0xe>
c00106cc:	83 c4 08             	add    esp,0x8
c00106cf:	5b                   	pop    ebx
c00106d0:	c3                   	ret    
c00106d1:	90                   	nop

c00106d2 <Device::closeAll()>:
c00106d2:	53                   	push   ebx
c00106d3:	83 ec 08             	sub    esp,0x8
c00106d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106dc:	6a 00                	push   0x0
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106f2:	74 0f                	je     c0010703 <Device::closeAll()+0x31>
c00106f4:	83 ec 0c             	sub    esp,0xc
c00106f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106fa:	e8 d3 ff ff ff       	call   c00106d2 <Device::closeAll()>
c00106ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010701:	eb e9                	jmp    c00106ec <Device::closeAll()+0x1a>
c0010703:	83 c4 08             	add    esp,0x8
c0010706:	5b                   	pop    ebx
c0010707:	c3                   	ret    

c0010708 <Device::powerSavingAll(PowerSavingLevel)>:
c0010708:	56                   	push   esi
c0010709:	53                   	push   ebx
c001070a:	83 ec 0c             	sub    esp,0xc
c001070d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010711:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010715:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010717:	56                   	push   esi
c0010718:	53                   	push   ebx
c0010719:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001071c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010728:	74 0f                	je     c0010739 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001072a:	52                   	push   edx
c001072b:	52                   	push   edx
c001072c:	56                   	push   esi
c001072d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010730:	e8 d3 ff ff ff       	call   c0010708 <Device::powerSavingAll(PowerSavingLevel)>
c0010735:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010737:	eb e9                	jmp    c0010722 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010739:	58                   	pop    eax
c001073a:	5b                   	pop    ebx
c001073b:	5e                   	pop    esi
c001073c:	c3                   	ret    
c001073d:	90                   	nop

c001073e <Device::setName(char const*)>:
c001073e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010746:	e9 0e 00 ff ff       	jmp    c0000759 <strcpy>
c001074b:	90                   	nop

c001074c <Device::Device(char const*)>:
c001074c:	83 ec 0c             	sub    esp,0xc
c001074f:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c0010754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010758:	89 10                	mov    DWORD PTR [eax],edx
c001075a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010788:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010792:	83 ec 08             	sub    esp,0x8
c0010795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001079d:	e8 9c ff ff ff       	call   c001073e <Device::setName(char const*)>
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	83 ec 0c             	sub    esp,0xc
c00107a8:	6a 08                	push   0x8
c00107aa:	e8 63 e8 ff ff       	call   c000f012 <operator new(unsigned long)>
c00107af:	83 c4 10             	add    esp,0x10
c00107b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010804:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001080e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010812:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001081c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010820:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010838:	90                   	nop
c0010839:	83 c4 0c             	add    esp,0xc
c001083c:	c3                   	ret    
c001083d:	90                   	nop

c001083e <Device::getName()>:
c001083e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010842:	05 d0 00 00 00       	add    eax,0xd0
c0010847:	c3                   	ret    

c0010848 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084f:	83 ec 08             	sub    esp,0x8
c0010852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010856:	50                   	push   eax
c0010857:	e8 f0 fe ff ff       	call   c001074c <Device::Device(char const*)>
c001085c:	83 c4 10             	add    esp,0x10
c001085f:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c0010864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010868:	89 10                	mov    DWORD PTR [eax],edx
c001086a:	90                   	nop
c001086b:	83 c4 0c             	add    esp,0xc
c001086e:	c3                   	ret    
c001086f:	90                   	nop

c0010870 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010870:	57                   	push   edi
c0010871:	56                   	push   esi
c0010872:	53                   	push   ebx
c0010873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010877:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001087b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001087f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010885:	75 0c                	jne    c0010893 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010887:	52                   	push   edx
c0010888:	52                   	push   edx
c0010889:	53                   	push   ebx
c001088a:	56                   	push   esi
c001088b:	e8 84 f0 00 00       	call   c001f914 <LinkedList<Device>::addElement(Device*)>
c0010890:	83 c4 10             	add    esp,0x10
c0010893:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010899:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001089c:	74 12                	je     c00108b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001089e:	50                   	push   eax
c001089f:	57                   	push   edi
c00108a0:	56                   	push   esi
c00108a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108a4:	e8 c7 ff ff ff       	call   c0010870 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108ab:	83 c4 10             	add    esp,0x10
c00108ae:	eb e9                	jmp    c0010899 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108b0:	5b                   	pop    ebx
c00108b1:	5e                   	pop    esi
c00108b2:	5f                   	pop    edi
c00108b3:	c3                   	ret    

c00108b4 <getDevicesOfType(DeviceType)>:
c00108b4:	53                   	push   ebx
c00108b5:	83 ec 14             	sub    esp,0x14
c00108b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108bc:	53                   	push   ebx
c00108bd:	e8 2e f1 00 00       	call   c001f9f0 <LinkedList<Device>::LinkedList()>
c00108c2:	83 c4 0c             	add    esp,0xc
c00108c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c9:	53                   	push   ebx
c00108ca:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c00108d0:	e8 9b ff ff ff       	call   c0010870 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108d5:	83 c4 18             	add    esp,0x18
c00108d8:	89 d8                	mov    eax,ebx
c00108da:	5b                   	pop    ebx
c00108db:	c2 04 00             	ret    0x4

c00108de <HardDiskController::HardDiskController(char const*)>:
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e5:	83 ec 08             	sub    esp,0x8
c00108e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ec:	50                   	push   eax
c00108ed:	e8 5a fe ff ff       	call   c001074c <Device::Device(char const*)>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	89 10                	mov    DWORD PTR [eax],edx
c0010900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010904:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001090e:	90                   	nop
c001090f:	83 c4 0c             	add    esp,0xc
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <HardDiskController::~HardDiskController()>:
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001091c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010920:	89 10                	mov    DWORD PTR [eax],edx
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	50                   	push   eax
c001092a:	e8 d3 fa ff ff       	call   c0010402 <Device::~Device()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	90                   	nop
c0010933:	83 c4 0c             	add    esp,0xc
c0010936:	c3                   	ret    
c0010937:	90                   	nop

c0010938 <HardDiskController::~HardDiskController()>:
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	83 ec 0c             	sub    esp,0xc
c001093e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010942:	e8 cd ff ff ff       	call   c0010914 <HardDiskController::~HardDiskController()>
c0010947:	83 c4 10             	add    esp,0x10
c001094a:	83 ec 08             	sub    esp,0x8
c001094d:	68 58 01 00 00       	push   0x158
c0010952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010956:	e8 c6 e6 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001095b:	83 c4 10             	add    esp,0x10
c001095e:	83 c4 0c             	add    esp,0xc
c0010961:	c3                   	ret    

c0010962 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010962:	83 ec 0c             	sub    esp,0xc
c0010965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010969:	83 ec 08             	sub    esp,0x8
c001096c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010970:	50                   	push   eax
c0010971:	e8 d6 fd ff ff       	call   c001074c <Device::Device(char const*)>
c0010976:	83 c4 10             	add    esp,0x10
c0010979:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c001097e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010982:	89 10                	mov    DWORD PTR [eax],edx
c0010984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010988:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001098f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010993:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001099a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109c4:	90                   	nop
c00109c5:	83 c4 0c             	add    esp,0xc
c00109c8:	c3                   	ret    
c00109c9:	90                   	nop

c00109ca <PhysicalDisk::startCache()>:
c00109ca:	56                   	push   esi
c00109cb:	53                   	push   ebx
c00109cc:	83 ec 10             	sub    esp,0x10
c00109cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109d3:	6a 30                	push   0x30
c00109d5:	e8 38 e6 ff ff       	call   c000f012 <operator new(unsigned long)>
c00109da:	89 c6                	mov    esi,eax
c00109dc:	58                   	pop    eax
c00109dd:	5a                   	pop    edx
c00109de:	53                   	push   ebx
c00109df:	56                   	push   esi
c00109e0:	e8 3b 25 00 00       	call   c0012f20 <VCache::VCache(PhysicalDisk*)>
c00109e5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109eb:	83 c4 14             	add    esp,0x14
c00109ee:	5b                   	pop    ebx
c00109ef:	5e                   	pop    esi
c00109f0:	c3                   	ret    
c00109f1:	90                   	nop

c00109f2 <PhysicalDisk::~PhysicalDisk()>:
c00109f2:	83 ec 0c             	sub    esp,0xc
c00109f5:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c00109fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fe:	89 10                	mov    DWORD PTR [eax],edx
c0010a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	50                   	push   eax
c0010a08:	e8 f5 f9 ff ff       	call   c0010402 <Device::~Device()>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	90                   	nop
c0010a11:	83 c4 0c             	add    esp,0xc
c0010a14:	c3                   	ret    
c0010a15:	90                   	nop

c0010a16 <PhysicalDisk::~PhysicalDisk()>:
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	83 ec 0c             	sub    esp,0xc
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 cd ff ff ff       	call   c00109f2 <PhysicalDisk::~PhysicalDisk()>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	83 ec 08             	sub    esp,0x8
c0010a2b:	68 6c 01 00 00       	push   0x16c
c0010a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a34:	e8 e8 e5 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	83 c4 0c             	add    esp,0xc
c0010a3f:	c3                   	ret    

c0010a40 <FPU::FPU(char const*)>:
c0010a40:	83 ec 0c             	sub    esp,0xc
c0010a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a47:	83 ec 08             	sub    esp,0x8
c0010a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4e:	50                   	push   eax
c0010a4f:	e8 f8 fc ff ff       	call   c001074c <Device::Device(char const*)>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c0010a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a60:	89 10                	mov    DWORD PTR [eax],edx
c0010a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a66:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a70:	90                   	nop
c0010a71:	83 c4 0c             	add    esp,0xc
c0010a74:	c3                   	ret    
c0010a75:	90                   	nop

c0010a76 <FPU::~FPU()>:
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	89 10                	mov    DWORD PTR [eax],edx
c0010a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	50                   	push   eax
c0010a8c:	e8 71 f9 ff ff       	call   c0010402 <Device::~Device()>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	90                   	nop
c0010a95:	83 c4 0c             	add    esp,0xc
c0010a98:	c3                   	ret    
c0010a99:	90                   	nop

c0010a9a <FPU::~FPU()>:
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	83 ec 0c             	sub    esp,0xc
c0010aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa4:	e8 cd ff ff ff       	call   c0010a76 <FPU::~FPU()>
c0010aa9:	83 c4 10             	add    esp,0x10
c0010aac:	83 ec 08             	sub    esp,0x8
c0010aaf:	68 58 01 00 00       	push   0x158
c0010ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab8:	e8 64 e5 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	83 c4 0c             	add    esp,0xc
c0010ac3:	c3                   	ret    

c0010ac4 <setupFPU()>:
c0010ac4:	53                   	push   ebx
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0010acd:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ad4:	74 19                	je     c0010aef <setupFPU()+0x2b>
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	68 58 01 00 00       	push   0x158
c0010ade:	e8 2f e5 ff ff       	call   c000f012 <operator new(unsigned long)>
c0010ae3:	89 c3                	mov    ebx,eax
c0010ae5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ae8:	e8 53 d5 00 00       	call   c001e040 <AVX::AVX()>
c0010aed:	eb 5b                	jmp    c0010b4a <setupFPU()+0x86>
c0010aef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010af5:	84 c0                	test   al,al
c0010af7:	79 19                	jns    c0010b12 <setupFPU()+0x4e>
c0010af9:	83 ec 0c             	sub    esp,0xc
c0010afc:	68 58 01 00 00       	push   0x158
c0010b01:	e8 0c e5 ff ff       	call   c000f012 <operator new(unsigned long)>
c0010b06:	89 c3                	mov    ebx,eax
c0010b08:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b0b:	e8 56 d6 00 00       	call   c001e166 <SSE::SSE()>
c0010b10:	eb 38                	jmp    c0010b4a <setupFPU()+0x86>
c0010b12:	a8 20                	test   al,0x20
c0010b14:	74 19                	je     c0010b2f <setupFPU()+0x6b>
c0010b16:	83 ec 0c             	sub    esp,0xc
c0010b19:	68 58 01 00 00       	push   0x158
c0010b1e:	e8 ef e4 ff ff       	call   c000f012 <operator new(unsigned long)>
c0010b23:	89 c3                	mov    ebx,eax
c0010b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b28:	e8 a3 d5 00 00       	call   c001e0d0 <MMX::MMX()>
c0010b2d:	eb 1b                	jmp    c0010b4a <setupFPU()+0x86>
c0010b2f:	a8 10                	test   al,0x10
c0010b31:	74 1c                	je     c0010b4f <setupFPU()+0x8b>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	68 58 01 00 00       	push   0x158
c0010b3b:	e8 d2 e4 ff ff       	call   c000f012 <operator new(unsigned long)>
c0010b40:	89 c3                	mov    ebx,eax
c0010b42:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b45:	e8 aa d6 00 00       	call   c001e1f4 <x87::x87()>
c0010b4a:	83 c4 10             	add    esp,0x10
c0010b4d:	eb 2c                	jmp    c0010b7b <setupFPU()+0xb7>
c0010b4f:	83 ec 0c             	sub    esp,0xc
c0010b52:	31 db                	xor    ebx,ebx
c0010b54:	68 88 1b 02 c0       	push   0xc0021b88
c0010b59:	e8 e9 e5 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010b5e:	e8 a7 3c 00 00       	call   c001480a <thisCPU()>
c0010b63:	e8 a2 3c 00 00       	call   c001480a <thisCPU()>
c0010b68:	e8 db ee 00 00       	call   c001fa48 <CPU::readCR0()>
c0010b6d:	83 c8 04             	or     eax,0x4
c0010b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b73:	e8 e2 ee 00 00       	call   c001fa5a <CPU::writeCR0(unsigned long)>
c0010b78:	83 c4 10             	add    esp,0x10
c0010b7b:	83 c4 08             	add    esp,0x8
c0010b7e:	89 d8                	mov    eax,ebx
c0010b80:	5b                   	pop    ebx
c0010b81:	c3                   	ret    

c0010b82 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b8a:	c1 e0 04             	shl    eax,0x4
c0010b8d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b91:	8d 50 10             	lea    edx,[eax+0x10]
c0010b94:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b9a:	74 08                	je     c0010ba4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b9c:	83 c0 04             	add    eax,0x4
c0010b9f:	39 d0                	cmp    eax,edx
c0010ba1:	75 f1                	jne    c0010b94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010ba3:	c3                   	ret    
c0010ba4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bae:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bb8:	eb e2                	jmp    c0010b9c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010bba <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bba:	57                   	push   edi
c0010bbb:	31 c0                	xor    eax,eax
c0010bbd:	56                   	push   esi
c0010bbe:	53                   	push   ebx
c0010bbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bc3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bc7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bcb:	89 da                	mov    edx,ebx
c0010bcd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bd1:	c1 e2 04             	shl    edx,0x4
c0010bd4:	01 ca                	add    edx,ecx
c0010bd6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bde:	74 16                	je     c0010bf6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010be0:	40                   	inc    eax
c0010be1:	83 f8 04             	cmp    eax,0x4
c0010be4:	75 f0                	jne    c0010bd6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010be6:	c7 44 24 10 cc 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bcc
c0010bee:	5b                   	pop    ebx
c0010bef:	5e                   	pop    esi
c0010bf0:	5f                   	pop    edi
c0010bf1:	e9 80 4d 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c0010bf6:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010bf9:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bfc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c02:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c08:	5b                   	pop    ebx
c0010c09:	5e                   	pop    esi
c0010c0a:	5f                   	pop    edi
c0010c0b:	c3                   	ret    

c0010c0c <doubleFault(regs*, void*)>:
c0010c0c:	55                   	push   ebp
c0010c0d:	89 e5                	mov    ebp,esp
c0010c0f:	83 ec 08             	sub    esp,0x8
c0010c12:	83 ec 0c             	sub    esp,0xc
c0010c15:	68 07 1c 02 c0       	push   0xc0021c07
c0010c1a:	e8 57 4d 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	90                   	nop
c0010c23:	c9                   	leave  
c0010c24:	c3                   	ret    
c0010c25:	90                   	nop

c0010c26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c26:	56                   	push   esi
c0010c27:	53                   	push   ebx
c0010c28:	50                   	push   eax
c0010c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c31:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c36:	75 35                	jne    c0010c6d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c38:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c3b:	31 d2                	xor    edx,edx
c0010c3d:	89 c1                	mov    ecx,eax
c0010c3f:	c1 e1 04             	shl    ecx,0x4
c0010c42:	01 f1                	add    ecx,esi
c0010c44:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c4c:	74 3e                	je     c0010c8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c4e:	42                   	inc    edx
c0010c4f:	83 fa 04             	cmp    edx,0x4
c0010c52:	75 f0                	jne    c0010c44 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c54:	83 ec 0c             	sub    esp,0xc
c0010c57:	68 4c 1c 02 c0       	push   0xc0021c4c
c0010c5c:	e8 15 4d 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0010c61:	83 c4 10             	add    esp,0x10
c0010c64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c69:	5a                   	pop    edx
c0010c6a:	5b                   	pop    ebx
c0010c6b:	5e                   	pop    esi
c0010c6c:	c3                   	ret    
c0010c6d:	83 ec 0c             	sub    esp,0xc
c0010c70:	56                   	push   esi
c0010c71:	e8 c8 fb ff ff       	call   c001083e <Device::getName()>
c0010c76:	83 c4 10             	add    esp,0x10
c0010c79:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c7c:	75 ba                	jne    c0010c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c7e:	83 fb 0f             	cmp    ebx,0xf
c0010c81:	7f 29                	jg     c0010cac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c83:	0f b6 9b 00 3d 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc300]
c0010c8a:	eb ac                	jmp    c0010c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c8c:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c93:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c96:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ca0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010ca6:	89 d8                	mov    eax,ebx
c0010ca8:	5a                   	pop    edx
c0010ca9:	5b                   	pop    ebx
c0010caa:	5e                   	pop    esi
c0010cab:	c3                   	ret    
c0010cac:	83 ec 0c             	sub    esp,0xc
c0010caf:	68 14 1c 02 c0       	push   0xc0021c14
c0010cb4:	e8 bd 4c 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0010cb9:	83 c4 10             	add    esp,0x10
c0010cbc:	e9 77 ff ff ff       	jmp    c0010c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cc1:	90                   	nop

c0010cc2 <InterruptController::clearAllHandlers(int, bool)>:
c0010cc2:	56                   	push   esi
c0010cc3:	53                   	push   ebx
c0010cc4:	52                   	push   edx
c0010cc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010ccd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010cd2:	75 61                	jne    c0010d35 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cd4:	8d 46 20             	lea    eax,[esi+0x20]
c0010cd7:	c1 e6 04             	shl    esi,0x4
c0010cda:	c1 e0 04             	shl    eax,0x4
c0010cdd:	01 de                	add    esi,ebx
c0010cdf:	01 d8                	add    eax,ebx
c0010ce1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010ceb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cf5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010cff:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d09:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d13:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d1d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d27:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d31:	58                   	pop    eax
c0010d32:	5b                   	pop    ebx
c0010d33:	5e                   	pop    esi
c0010d34:	c3                   	ret    
c0010d35:	83 ec 0c             	sub    esp,0xc
c0010d38:	53                   	push   ebx
c0010d39:	e8 00 fb ff ff       	call   c001083e <Device::getName()>
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d44:	75 8e                	jne    c0010cd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d46:	83 fe 0f             	cmp    esi,0xf
c0010d49:	7f 09                	jg     c0010d54 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d4b:	0f b6 b6 00 3d 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc300]
c0010d52:	eb 80                	jmp    c0010cd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d54:	83 ec 0c             	sub    esp,0xc
c0010d57:	68 88 1c 02 c0       	push   0xc0021c88
c0010d5c:	e8 15 4c 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	e9 6b ff ff ff       	jmp    c0010cd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d69:	90                   	nop

c0010d6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d6a:	56                   	push   esi
c0010d6b:	53                   	push   ebx
c0010d6c:	52                   	push   edx
c0010d6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d75:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d7a:	75 3a                	jne    c0010db6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d80:	8d 50 20             	lea    edx,[eax+0x20]
c0010d83:	c1 e2 04             	shl    edx,0x4
c0010d86:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d89:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d8d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d93:	74 0b                	je     c0010da0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d95:	83 c0 04             	add    eax,0x4
c0010d98:	39 d0                	cmp    eax,edx
c0010d9a:	75 f1                	jne    c0010d8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d9c:	58                   	pop    eax
c0010d9d:	5b                   	pop    ebx
c0010d9e:	5e                   	pop    esi
c0010d9f:	c3                   	ret    
c0010da0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010daa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010db4:	eb df                	jmp    c0010d95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010db6:	83 ec 0c             	sub    esp,0xc
c0010db9:	56                   	push   esi
c0010dba:	e8 7f fa ff ff       	call   c001083e <Device::getName()>
c0010dbf:	83 c4 10             	add    esp,0x10
c0010dc2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dc5:	75 b5                	jne    c0010d7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dc7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010dcc:	7f 11                	jg     c0010ddf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010dce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010dd2:	0f b6 80 00 3d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc300]
c0010dd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ddd:	eb 9d                	jmp    c0010d7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ddf:	83 ec 0c             	sub    esp,0xc
c0010de2:	68 88 1c 02 c0       	push   0xc0021c88
c0010de7:	e8 8a 4b 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	eb 8b                	jmp    c0010d7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010df1 <nmiHandler(regs*, void*)>:
c0010df1:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0010df6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dfa:	e9 1f a9 ff ff       	jmp    c000b71e <Computer::handleNMI()>

c0010dff <int_handler>:
c0010dff:	55                   	push   ebp
c0010e00:	57                   	push   edi
c0010e01:	56                   	push   esi
c0010e02:	53                   	push   ebx
c0010e03:	83 ec 0c             	sub    esp,0xc
c0010e06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e0a:	80 3d f4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024ff4,0x0
c0010e11:	74 0b                	je     c0010e1e <int_handler+0x1f>
c0010e13:	fa                   	cli    
c0010e14:	f4                   	hlt    
c0010e15:	80 3d f4 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024ff4,0x0
c0010e1c:	75 f5                	jne    c0010e13 <int_handler+0x14>
c0010e1e:	e8 e7 39 00 00       	call   c001480a <thisCPU()>
c0010e23:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e26:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e2c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e2f:	83 f8 17             	cmp    eax,0x17
c0010e32:	77 13                	ja     c0010e47 <int_handler+0x48>
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e39:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e3c:	0f b6 c0             	movzx  eax,al
c0010e3f:	50                   	push   eax
c0010e40:	57                   	push   edi
c0010e41:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e44:	83 c4 10             	add    esp,0x10
c0010e47:	83 c3 15             	add    ebx,0x15
c0010e4a:	c1 e3 04             	shl    ebx,0x4
c0010e4d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e51:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e58:	31 db                	xor    ebx,ebx
c0010e5a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e5e:	85 c0                	test   eax,eax
c0010e60:	74 13                	je     c0010e75 <int_handler+0x76>
c0010e62:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e65:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e69:	74 1c                	je     c0010e87 <int_handler+0x88>
c0010e6b:	83 ec 08             	sub    esp,0x8
c0010e6e:	52                   	push   edx
c0010e6f:	56                   	push   esi
c0010e70:	ff d0                	call   eax
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	43                   	inc    ebx
c0010e76:	83 fb 04             	cmp    ebx,0x4
c0010e79:	75 df                	jne    c0010e5a <int_handler+0x5b>
c0010e7b:	83 c4 0c             	add    esp,0xc
c0010e7e:	31 c0                	xor    eax,eax
c0010e80:	5b                   	pop    ebx
c0010e81:	31 d2                	xor    edx,edx
c0010e83:	5e                   	pop    esi
c0010e84:	5f                   	pop    edi
c0010e85:	5d                   	pop    ebp
c0010e86:	c3                   	ret    
c0010e87:	83 ec 08             	sub    esp,0x8
c0010e8a:	52                   	push   edx
c0010e8b:	56                   	push   esi
c0010e8c:	ff d0                	call   eax
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	83 c4 0c             	add    esp,0xc
c0010e94:	5b                   	pop    ebx
c0010e95:	5e                   	pop    esi
c0010e96:	5f                   	pop    edi
c0010e97:	5d                   	pop    ebp
c0010e98:	c3                   	ret    
c0010e99:	90                   	nop

c0010e9a <InterruptController::InterruptController(char const*)>:
c0010e9a:	83 ec 1c             	sub    esp,0x1c
c0010e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea1:	83 ec 08             	sub    esp,0x8
c0010ea4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010ea8:	50                   	push   eax
c0010ea9:	e8 9e f8 ff ff       	call   c001074c <Device::Device(char const*)>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c0010eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eba:	89 10                	mov    DWORD PTR [eax],edx
c0010ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ec0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010eca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ed2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eda:	7f 5e                	jg     c0010f3a <InterruptController::InterruptController(char const*)+0xa0>
c0010edc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ee4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ee9:	7f 49                	jg     c0010f34 <InterruptController::InterruptController(char const*)+0x9a>
c0010eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ef3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010efa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010efe:	01 ca                	add    edx,ecx
c0010f00:	83 c2 54             	add    edx,0x54
c0010f03:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f1e:	01 ca                	add    edx,ecx
c0010f20:	81 c2 54 04 00 00    	add    edx,0x454
c0010f26:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f2e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f32:	eb b0                	jmp    c0010ee4 <InterruptController::InterruptController(char const*)+0x4a>
c0010f34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f38:	eb 98                	jmp    c0010ed2 <InterruptController::InterruptController(char const*)+0x38>
c0010f3a:	90                   	nop
c0010f3b:	83 c4 1c             	add    esp,0x1c
c0010f3e:	c3                   	ret    
c0010f3f:	90                   	nop

c0010f40 <InterruptController::~InterruptController()>:
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	89 10                	mov    DWORD PTR [eax],edx
c0010f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	50                   	push   eax
c0010f56:	e8 a7 f4 ff ff       	call   c0010402 <Device::~Device()>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	90                   	nop
c0010f5f:	83 c4 0c             	add    esp,0xc
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <InterruptController::~InterruptController()>:
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6e:	e8 cd ff ff ff       	call   c0010f40 <InterruptController::~InterruptController()>
c0010f73:	83 c4 10             	add    esp,0x10
c0010f76:	83 ec 08             	sub    esp,0x8
c0010f79:	68 58 21 00 00       	push   0x2158
c0010f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f82:	e8 9a e0 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	83 c4 0c             	add    esp,0xc
c0010f8d:	c3                   	ret    

c0010f8e <displayDebugInfo(regs*)>:
c0010f8e:	55                   	push   ebp
c0010f8f:	57                   	push   edi
c0010f90:	56                   	push   esi
c0010f91:	53                   	push   ebx
c0010f92:	83 ec 24             	sub    esp,0x24
c0010f95:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f99:	0f 20 c2             	mov    edx,cr0
c0010f9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fa0:	0f 20 d7             	mov    edi,cr2
c0010fa3:	0f 20 de             	mov    esi,cr3
c0010fa6:	0f 20 e5             	mov    ebp,cr4
c0010fa9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fac:	68 c2 1c 02 c0       	push   0xc0021cc2
c0010fb1:	e8 91 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010fb6:	58                   	pop    eax
c0010fb7:	5a                   	pop    edx
c0010fb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fbb:	68 cd 1c 02 c0       	push   0xc0021ccd
c0010fc0:	e8 82 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010fc5:	59                   	pop    ecx
c0010fc6:	58                   	pop    eax
c0010fc7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fca:	68 d8 1c 02 c0       	push   0xc0021cd8
c0010fcf:	e8 73 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010fd4:	58                   	pop    eax
c0010fd5:	5a                   	pop    edx
c0010fd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fd9:	68 e3 1c 02 c0       	push   0xc0021ce3
c0010fde:	e8 64 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010fe3:	59                   	pop    ecx
c0010fe4:	58                   	pop    eax
c0010fe5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010fe8:	68 ee 1c 02 c0       	push   0xc0021cee
c0010fed:	e8 55 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0010ff2:	58                   	pop    eax
c0010ff3:	5a                   	pop    edx
c0010ff4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010ff7:	68 f9 1c 02 c0       	push   0xc0021cf9
c0010ffc:	e8 46 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011001:	59                   	pop    ecx
c0011002:	58                   	pop    eax
c0011003:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011006:	68 04 1d 02 c0       	push   0xc0021d04
c001100b:	e8 37 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011010:	58                   	pop    eax
c0011011:	5a                   	pop    edx
c0011012:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011015:	68 0f 1d 02 c0       	push   0xc0021d0f
c001101a:	e8 28 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001101f:	59                   	pop    ecx
c0011020:	58                   	pop    eax
c0011021:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011024:	68 1a 1d 02 c0       	push   0xc0021d1a
c0011029:	e8 19 e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001102e:	58                   	pop    eax
c001102f:	5a                   	pop    edx
c0011030:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011033:	68 29 1d 02 c0       	push   0xc0021d29
c0011038:	e8 0a e1 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001103d:	59                   	pop    ecx
c001103e:	58                   	pop    eax
c001103f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011042:	68 34 1d 02 c0       	push   0xc0021d34
c0011047:	e8 fb e0 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001104c:	58                   	pop    eax
c001104d:	5a                   	pop    edx
c001104e:	57                   	push   edi
c001104f:	68 3f 1d 02 c0       	push   0xc0021d3f
c0011054:	e8 ee e0 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011059:	59                   	pop    ecx
c001105a:	58                   	pop    eax
c001105b:	56                   	push   esi
c001105c:	68 4a 1d 02 c0       	push   0xc0021d4a
c0011061:	e8 e1 e0 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011066:	58                   	pop    eax
c0011067:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001106c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011072:	e8 c4 c2 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c0011077:	58                   	pop    eax
c0011078:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001107b:	5a                   	pop    edx
c001107c:	c1 e0 05             	shl    eax,0x5
c001107f:	05 60 3a 02 c0       	add    eax,0xc0023a60
c0011084:	50                   	push   eax
c0011085:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001108a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011090:	e8 c7 c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011095:	59                   	pop    ecx
c0011096:	58                   	pop    eax
c0011097:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001109c:	68 55 1d 02 c0       	push   0xc0021d55
c00110a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a7:	e8 b0 c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00110ac:	58                   	pop    eax
c00110ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b2:	5a                   	pop    edx
c00110b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110b6:	83 c0 0c             	add    eax,0xc
c00110b9:	50                   	push   eax
c00110ba:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00110bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c5:	e8 92 c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00110ca:	59                   	pop    ecx
c00110cb:	58                   	pop    eax
c00110cc:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00110d1:	68 5e 1d 02 c0       	push   0xc0021d5e
c00110d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110dc:	e8 7b c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00110e1:	58                   	pop    eax
c00110e2:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00110e7:	5a                   	pop    edx
c00110e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f1:	e8 8c c6 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00110f6:	59                   	pop    ecx
c00110f7:	58                   	pop    eax
c00110f8:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00110fd:	68 66 1d 02 c0       	push   0xc0021d66
c0011102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011108:	e8 4f c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c001110d:	58                   	pop    eax
c001110e:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011113:	5a                   	pop    edx
c0011114:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011117:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111d:	e8 60 c6 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011122:	59                   	pop    ecx
c0011123:	58                   	pop    eax
c0011124:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011129:	68 6e 1d 02 c0       	push   0xc0021d6e
c001112e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011134:	e8 23 c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011139:	58                   	pop    eax
c001113a:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001113f:	5a                   	pop    edx
c0011140:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011143:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011149:	e8 34 c6 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001114e:	59                   	pop    ecx
c001114f:	58                   	pop    eax
c0011150:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011155:	68 76 1d 02 c0       	push   0xc0021d76
c001115a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011160:	e8 f7 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011165:	58                   	pop    eax
c0011166:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001116b:	5a                   	pop    edx
c001116c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001116f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011175:	e8 08 c6 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001117a:	59                   	pop    ecx
c001117b:	58                   	pop    eax
c001117c:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011181:	68 7e 1d 02 c0       	push   0xc0021d7e
c0011186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118c:	e8 cb c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011191:	58                   	pop    eax
c0011192:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011197:	5a                   	pop    edx
c0011198:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001119b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a1:	e8 dc c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00111a6:	59                   	pop    ecx
c00111a7:	58                   	pop    eax
c00111a8:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00111ad:	68 86 1d 02 c0       	push   0xc0021d86
c00111b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b8:	e8 9f c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00111bd:	58                   	pop    eax
c00111be:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00111c3:	5a                   	pop    edx
c00111c4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111cd:	e8 b0 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00111d2:	59                   	pop    ecx
c00111d3:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00111d8:	5b                   	pop    ebx
c00111d9:	68 8e 1d 02 c0       	push   0xc0021d8e
c00111de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e4:	e8 73 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00111e9:	58                   	pop    eax
c00111ea:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00111ef:	5a                   	pop    edx
c00111f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111f4:	52                   	push   edx
c00111f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fb:	e8 82 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011200:	59                   	pop    ecx
c0011201:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011206:	5b                   	pop    ebx
c0011207:	68 97 1d 02 c0       	push   0xc0021d97
c001120c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011212:	e8 45 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011217:	58                   	pop    eax
c0011218:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001121d:	5a                   	pop    edx
c001121e:	57                   	push   edi
c001121f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011225:	e8 58 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001122a:	59                   	pop    ecx
c001122b:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011230:	5b                   	pop    ebx
c0011231:	68 9f 1d 02 c0       	push   0xc0021d9f
c0011236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123c:	e8 1b c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011241:	5f                   	pop    edi
c0011242:	58                   	pop    eax
c0011243:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011248:	56                   	push   esi
c0011249:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124f:	e8 2e c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011254:	58                   	pop    eax
c0011255:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001125a:	5a                   	pop    edx
c001125b:	68 a7 1d 02 c0       	push   0xc0021da7
c0011260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011266:	e8 f1 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c001126b:	59                   	pop    ecx
c001126c:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011271:	5b                   	pop    ebx
c0011272:	55                   	push   ebp
c0011273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011279:	e8 04 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001127e:	5e                   	pop    esi
c001127f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011284:	5f                   	pop    edi
c0011285:	68 af 1d 02 c0       	push   0xc0021daf
c001128a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011290:	e8 c7 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011295:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001129a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112a0:	e8 be e7 00 00       	call   c001fa63 <CPU::readDR0()>
c00112a5:	5d                   	pop    ebp
c00112a6:	5a                   	pop    edx
c00112a7:	50                   	push   eax
c00112a8:	53                   	push   ebx
c00112a9:	e8 d4 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00112ae:	59                   	pop    ecx
c00112af:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00112b4:	5b                   	pop    ebx
c00112b5:	68 b8 1d 02 c0       	push   0xc0021db8
c00112ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c0:	e8 97 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00112c5:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00112ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112d0:	e8 a0 e7 00 00       	call   c001fa75 <CPU::readDR1()>
c00112d5:	5e                   	pop    esi
c00112d6:	5f                   	pop    edi
c00112d7:	50                   	push   eax
c00112d8:	53                   	push   ebx
c00112d9:	e8 a4 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00112de:	5d                   	pop    ebp
c00112df:	58                   	pop    eax
c00112e0:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00112e5:	68 c0 1d 02 c0       	push   0xc0021dc0
c00112ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f0:	e8 67 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00112f5:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00112fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011300:	e8 82 e7 00 00       	call   c001fa87 <CPU::readDR2()>
c0011305:	5a                   	pop    edx
c0011306:	59                   	pop    ecx
c0011307:	50                   	push   eax
c0011308:	53                   	push   ebx
c0011309:	e8 74 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001130e:	5b                   	pop    ebx
c001130f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011314:	5e                   	pop    esi
c0011315:	68 c8 1d 02 c0       	push   0xc0021dc8
c001131a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011320:	e8 37 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011325:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001132a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011330:	e8 64 e7 00 00       	call   c001fa99 <CPU::readDR3()>
c0011335:	5f                   	pop    edi
c0011336:	5d                   	pop    ebp
c0011337:	50                   	push   eax
c0011338:	53                   	push   ebx
c0011339:	e8 44 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001133e:	58                   	pop    eax
c001133f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011344:	5a                   	pop    edx
c0011345:	68 d0 1d 02 c0       	push   0xc0021dd0
c001134a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011350:	e8 07 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011355:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001135a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011360:	e8 46 e7 00 00       	call   c001faab <CPU::readDR6()>
c0011365:	59                   	pop    ecx
c0011366:	5e                   	pop    esi
c0011367:	50                   	push   eax
c0011368:	53                   	push   ebx
c0011369:	e8 14 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001136e:	5f                   	pop    edi
c001136f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0011374:	5d                   	pop    ebp
c0011375:	68 d8 1d 02 c0       	push   0xc0021dd8
c001137a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011380:	e8 d7 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011385:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001138a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011390:	e8 28 e7 00 00       	call   c001fabd <CPU::readDR7()>
c0011395:	5a                   	pop    edx
c0011396:	59                   	pop    ecx
c0011397:	50                   	push   eax
c0011398:	53                   	push   ebx
c0011399:	e8 e4 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001139e:	fa                   	cli    
c001139f:	f4                   	hlt    
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	eb fe                	jmp    c00113a3 <displayDebugInfo(regs*)+0x415>

c00113a5 <x87EmulHandler(regs*, void*)>:
c00113a5:	53                   	push   ebx
c00113a6:	83 ec 08             	sub    esp,0x8
c00113a9:	a1 34 47 02 c0       	mov    eax,ds:0xc0024734
c00113ae:	85 c0                	test   eax,eax
c00113b0:	74 15                	je     c00113c7 <x87EmulHandler(regs*, void*)+0x22>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b9:	ff d0                	call   eax
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	84 c0                	test   al,al
c00113c0:	74 2f                	je     c00113f1 <x87EmulHandler(regs*, void*)+0x4c>
c00113c2:	83 c4 08             	add    esp,0x8
c00113c5:	5b                   	pop    ebx
c00113c6:	c3                   	ret    
c00113c7:	83 ec 08             	sub    esp,0x8
c00113ca:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c00113d0:	6a 01                	push   0x1
c00113d2:	68 e0 1d 02 c0       	push   0xc0021de0
c00113d7:	e8 a2 6f 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c00113dc:	5a                   	pop    edx
c00113dd:	59                   	pop    ecx
c00113de:	53                   	push   ebx
c00113df:	50                   	push   eax
c00113e0:	e8 5f 71 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c00113e5:	a1 34 47 02 c0       	mov    eax,ds:0xc0024734
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	85 c0                	test   eax,eax
c00113ef:	75 c1                	jne    c00113b2 <x87EmulHandler(regs*, void*)+0xd>
c00113f1:	83 ec 0c             	sub    esp,0xc
c00113f4:	68 fd 1d 02 c0       	push   0xc0021dfd
c00113f9:	e8 49 dd ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00113fe:	58                   	pop    eax
c00113ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011403:	e8 86 fb ff ff       	call   c0010f8e <displayDebugInfo(regs*)>

c0011408 <gpFault(regs*, void*)>:
c0011408:	53                   	push   ebx
c0011409:	83 ec 14             	sub    esp,0x14
c001140c:	c7 05 30 47 02 c0 f5 97 01 c0 	mov    DWORD PTR ds:0xc0024730,0xc00197f5
c0011416:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001141a:	53                   	push   ebx
c001141b:	e8 d5 83 00 00       	call   c00197f5 <Vm::faultHandler(regs*)>
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	84 c0                	test   al,al
c0011425:	74 05                	je     c001142c <gpFault(regs*, void*)+0x24>
c0011427:	83 c4 08             	add    esp,0x8
c001142a:	5b                   	pop    ebx
c001142b:	c3                   	ret    
c001142c:	83 ec 0c             	sub    esp,0xc
c001142f:	68 fd 1d 02 c0       	push   0xc0021dfd
c0011434:	e8 0e dd ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001143c:	e8 4d fb ff ff       	call   c0010f8e <displayDebugInfo(regs*)>

c0011441 <pgFault(regs*, void*)>:
c0011441:	83 ec 18             	sub    esp,0x18
c0011444:	68 18 1e 02 c0       	push   0xc0021e18
c0011449:	e8 f9 dc ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001144e:	58                   	pop    eax
c001144f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011453:	e8 36 fb ff ff       	call   c0010f8e <displayDebugInfo(regs*)>

c0011458 <otherISRHandler(regs*, void*)>:
c0011458:	53                   	push   ebx
c0011459:	83 ec 0c             	sub    esp,0xc
c001145c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011460:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011463:	50                   	push   eax
c0011464:	50                   	push   eax
c0011465:	68 25 1e 02 c0       	push   0xc0021e25
c001146a:	e8 d8 dc ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001146f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011472:	e8 17 fb ff ff       	call   c0010f8e <displayDebugInfo(regs*)>

c0011477 <opcodeFault(regs*, void*)>:
c0011477:	55                   	push   ebp
c0011478:	89 e5                	mov    ebp,esp
c001147a:	56                   	push   esi
c001147b:	53                   	push   ebx
c001147c:	83 ec 40             	sub    esp,0x40
c001147f:	e8 86 33 00 00       	call   c001480a <thisCPU()>
c0011484:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001148a:	84 c0                	test   al,al
c001148c:	74 24                	je     c00114b2 <opcodeFault(regs*, void*)+0x3b>
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	68 44 1e 02 c0       	push   0xc0021e44
c0011496:	e8 ac dc ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114a4:	8d 50 19             	lea    edx,[eax+0x19]
c00114a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114ad:	e9 77 05 00 00       	jmp    c0011a29 <opcodeFault(regs*, void*)+0x5b2>
c00114b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114bb:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114bf:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114cf:	8a 00                	mov    al,BYTE PTR [eax]
c00114d1:	3c f0                	cmp    al,0xf0
c00114d3:	75 17                	jne    c00114ec <opcodeFault(regs*, void*)+0x75>
c00114d5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114de:	8d 50 01             	lea    edx,[eax+0x1]
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114e7:	e9 da 00 00 00       	jmp    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c00114ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114ef:	8a 00                	mov    al,BYTE PTR [eax]
c00114f1:	3c f2                	cmp    al,0xf2
c00114f3:	74 09                	je     c00114fe <opcodeFault(regs*, void*)+0x87>
c00114f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114f8:	8a 00                	mov    al,BYTE PTR [eax]
c00114fa:	3c f3                	cmp    al,0xf3
c00114fc:	75 1b                	jne    c0011519 <opcodeFault(regs*, void*)+0xa2>
c00114fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011502:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001150b:	8d 50 01             	lea    edx,[eax+0x1]
c001150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011511:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011514:	e9 ad 00 00 00       	jmp    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c0011519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001151c:	8a 00                	mov    al,BYTE PTR [eax]
c001151e:	3c 66                	cmp    al,0x66
c0011520:	75 1f                	jne    c0011541 <opcodeFault(regs*, void*)+0xca>
c0011522:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011526:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001152a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011533:	8d 50 01             	lea    edx,[eax+0x1]
c0011536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011539:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001153c:	e9 85 00 00 00       	jmp    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c0011541:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011544:	8a 00                	mov    al,BYTE PTR [eax]
c0011546:	3c 67                	cmp    al,0x67
c0011548:	75 18                	jne    c0011562 <opcodeFault(regs*, void*)+0xeb>
c001154a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001154e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011557:	8d 50 01             	lea    edx,[eax+0x1]
c001155a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011560:	eb 64                	jmp    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c0011562:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011565:	8a 00                	mov    al,BYTE PTR [eax]
c0011567:	3c 2e                	cmp    al,0x2e
c0011569:	74 09                	je     c0011574 <opcodeFault(regs*, void*)+0xfd>
c001156b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001156e:	8a 00                	mov    al,BYTE PTR [eax]
c0011570:	3c 3e                	cmp    al,0x3e
c0011572:	75 18                	jne    c001158c <opcodeFault(regs*, void*)+0x115>
c0011574:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011578:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001157b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011581:	8d 50 01             	lea    edx,[eax+0x1]
c0011584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011587:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001158a:	eb 3a                	jmp    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c001158c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001158f:	8a 00                	mov    al,BYTE PTR [eax]
c0011591:	3c 36                	cmp    al,0x36
c0011593:	74 1b                	je     c00115b0 <opcodeFault(regs*, void*)+0x139>
c0011595:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011598:	8a 00                	mov    al,BYTE PTR [eax]
c001159a:	3c 26                	cmp    al,0x26
c001159c:	74 12                	je     c00115b0 <opcodeFault(regs*, void*)+0x139>
c001159e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115a1:	8a 00                	mov    al,BYTE PTR [eax]
c00115a3:	3c 64                	cmp    al,0x64
c00115a5:	74 09                	je     c00115b0 <opcodeFault(regs*, void*)+0x139>
c00115a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115aa:	8a 00                	mov    al,BYTE PTR [eax]
c00115ac:	3c 65                	cmp    al,0x65
c00115ae:	75 16                	jne    c00115c6 <opcodeFault(regs*, void*)+0x14f>
c00115b0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115b4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115bd:	8d 50 01             	lea    edx,[eax+0x1]
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c9:	8a 00                	mov    al,BYTE PTR [eax]
c00115cb:	3c 0f                	cmp    al,0xf
c00115cd:	0f 85 ad 00 00 00    	jne    c0011680 <opcodeFault(regs*, void*)+0x209>
c00115d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d6:	40                   	inc    eax
c00115d7:	8a 00                	mov    al,BYTE PTR [eax]
c00115d9:	3c c2                	cmp    al,0xc2
c00115db:	74 0e                	je     c00115eb <opcodeFault(regs*, void*)+0x174>
c00115dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e0:	40                   	inc    eax
c00115e1:	8a 00                	mov    al,BYTE PTR [eax]
c00115e3:	3c c3                	cmp    al,0xc3
c00115e5:	0f 85 95 00 00 00    	jne    c0011680 <opcodeFault(regs*, void*)+0x209>
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	68 67 1e 02 c0       	push   0xc0021e67
c00115f3:	e8 4f db ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011601:	8d 50 01             	lea    edx,[eax+0x1]
c0011604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011607:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001160a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001160d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011610:	8a 00                	mov    al,BYTE PTR [eax]
c0011612:	8d 50 fe             	lea    edx,[eax-0x2]
c0011615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011618:	88 10                	mov    BYTE PTR [eax],dl
c001161a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001161d:	50                   	push   eax
c001161e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011621:	50                   	push   eax
c0011622:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011625:	50                   	push   eax
c0011626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011629:	e8 48 41 00 00       	call   c0015776 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011637:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001163a:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001163d:	01 d0                	add    eax,edx
c001163f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011645:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011648:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001164b:	48                   	dec    eax
c001164c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001164f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011652:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011655:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165b:	83 ec 04             	sub    esp,0x4
c001165e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011661:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011664:	50                   	push   eax
c0011665:	e8 e6 ea fe ff       	call   c0000150 <voodooXADD>
c001166a:	83 c4 10             	add    esp,0x10
c001166d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011670:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011673:	01 c2                	add    edx,eax
c0011675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011678:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001167b:	e9 a9 03 00 00       	jmp    c0011a29 <opcodeFault(regs*, void*)+0x5b2>
c0011680:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011683:	8a 00                	mov    al,BYTE PTR [eax]
c0011685:	3c 0f                	cmp    al,0xf
c0011687:	0f 85 8b 01 00 00    	jne    c0011818 <opcodeFault(regs*, void*)+0x3a1>
c001168d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011690:	40                   	inc    eax
c0011691:	8a 00                	mov    al,BYTE PTR [eax]
c0011693:	3c c7                	cmp    al,0xc7
c0011695:	0f 86 7d 01 00 00    	jbe    c0011818 <opcodeFault(regs*, void*)+0x3a1>
c001169b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001169e:	40                   	inc    eax
c001169f:	8a 00                	mov    al,BYTE PTR [eax]
c00116a1:	3c cf                	cmp    al,0xcf
c00116a3:	0f 87 6f 01 00 00    	ja     c0011818 <opcodeFault(regs*, void*)+0x3a1>
c00116a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ac:	40                   	inc    eax
c00116ad:	8a 00                	mov    al,BYTE PTR [eax]
c00116af:	83 c0 38             	add    eax,0x38
c00116b2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00116b5:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116b9:	75 0b                	jne    c00116c6 <opcodeFault(regs*, void*)+0x24f>
c00116bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116be:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116c4:	eb 75                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c00116c6:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116ca:	75 0b                	jne    c00116d7 <opcodeFault(regs*, void*)+0x260>
c00116cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116d5:	eb 64                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c00116d7:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116db:	75 0b                	jne    c00116e8 <opcodeFault(regs*, void*)+0x271>
c00116dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116e6:	eb 53                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c00116e8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116ec:	75 0b                	jne    c00116f9 <opcodeFault(regs*, void*)+0x282>
c00116ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f7:	eb 42                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c00116f9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116fd:	75 0b                	jne    c001170a <opcodeFault(regs*, void*)+0x293>
c00116ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011702:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0011705:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011708:	eb 31                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c001170a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001170e:	75 0b                	jne    c001171b <opcodeFault(regs*, void*)+0x2a4>
c0011710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011713:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011716:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011719:	eb 20                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c001171b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001171f:	75 0b                	jne    c001172c <opcodeFault(regs*, void*)+0x2b5>
c0011721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011724:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011727:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001172a:	eb 0f                	jmp    c001173b <opcodeFault(regs*, void*)+0x2c4>
c001172c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011730:	75 09                	jne    c001173b <opcodeFault(regs*, void*)+0x2c4>
c0011732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011735:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011738:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001173b:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001173f:	74 10                	je     c0011751 <opcodeFault(regs*, void*)+0x2da>
c0011741:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011748:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001174f:	eb 2d                	jmp    c001177e <opcodeFault(regs*, void*)+0x307>
c0011751:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011754:	c1 e0 18             	shl    eax,0x18
c0011757:	89 c2                	mov    edx,eax
c0011759:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001175c:	c1 e0 08             	shl    eax,0x8
c001175f:	25 00 00 ff 00       	and    eax,0xff0000
c0011764:	09 c2                	or     edx,eax
c0011766:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011769:	c1 e8 08             	shr    eax,0x8
c001176c:	25 00 ff 00 00       	and    eax,0xff00
c0011771:	09 c2                	or     edx,eax
c0011773:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011776:	c1 e8 18             	shr    eax,0x18
c0011779:	09 d0                	or     eax,edx
c001177b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001177e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011782:	75 0b                	jne    c001178f <opcodeFault(regs*, void*)+0x318>
c0011784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011787:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001178a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001178d:	eb 75                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c001178f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011793:	75 0b                	jne    c00117a0 <opcodeFault(regs*, void*)+0x329>
c0011795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011798:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001179b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001179e:	eb 64                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117a0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117a4:	75 0b                	jne    c00117b1 <opcodeFault(regs*, void*)+0x33a>
c00117a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ac:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00117af:	eb 53                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117b1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117b5:	75 0b                	jne    c00117c2 <opcodeFault(regs*, void*)+0x34b>
c00117b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117bd:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117c0:	eb 42                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117c2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117c6:	75 0b                	jne    c00117d3 <opcodeFault(regs*, void*)+0x35c>
c00117c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ce:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117d1:	eb 31                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117d3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117d7:	75 0b                	jne    c00117e4 <opcodeFault(regs*, void*)+0x36d>
c00117d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117e2:	eb 20                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117e4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117e8:	75 0b                	jne    c00117f5 <opcodeFault(regs*, void*)+0x37e>
c00117ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117f0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00117f3:	eb 0f                	jmp    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117f5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117f9:	75 09                	jne    c0011804 <opcodeFault(regs*, void*)+0x38d>
c00117fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011801:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011807:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001180a:	8d 50 02             	lea    edx,[eax+0x2]
c001180d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011810:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011813:	e9 11 02 00 00       	jmp    c0011a29 <opcodeFault(regs*, void*)+0x5b2>
c0011818:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001181b:	8a 00                	mov    al,BYTE PTR [eax]
c001181d:	3c 0f                	cmp    al,0xf
c001181f:	0f 85 76 01 00 00    	jne    c001199b <opcodeFault(regs*, void*)+0x524>
c0011825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011828:	40                   	inc    eax
c0011829:	8a 00                	mov    al,BYTE PTR [eax]
c001182b:	3c c7                	cmp    al,0xc7
c001182d:	0f 85 68 01 00 00    	jne    c001199b <opcodeFault(regs*, void*)+0x524>
c0011833:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011839:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001183c:	8d 50 01             	lea    edx,[eax+0x1]
c001183f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011842:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011845:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011848:	50                   	push   eax
c0011849:	8d 45 bb             	lea    eax,[ebp-0x45]
c001184c:	50                   	push   eax
c001184d:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011850:	50                   	push   eax
c0011851:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011854:	e8 1d 3f 00 00       	call   c0015776 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001185f:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011862:	83 f0 01             	xor    eax,0x1
c0011865:	84 c0                	test   al,al
c0011867:	0f 84 2e 01 00 00    	je     c001199b <opcodeFault(regs*, void*)+0x524>
c001186d:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011870:	3c 01                	cmp    al,0x1
c0011872:	0f 85 23 01 00 00    	jne    c001199b <opcodeFault(regs*, void*)+0x524>
c0011878:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001187b:	83 f0 01             	xor    eax,0x1
c001187e:	84 c0                	test   al,al
c0011880:	0f 84 15 01 00 00    	je     c001199b <opcodeFault(regs*, void*)+0x524>
c0011886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011889:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001188c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001188f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011896:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011899:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001189c:	89 c2                	mov    edx,eax
c001189e:	b8 00 00 00 00       	mov    eax,0x0
c00118a3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118a6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00118af:	ba 00 00 00 00       	mov    edx,0x0
c00118b4:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00118b7:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118c0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118c3:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118ca:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118cd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118d0:	89 c2                	mov    edx,eax
c00118d2:	b8 00 00 00 00       	mov    eax,0x0
c00118d7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118da:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118e3:	ba 00 00 00 00       	mov    edx,0x0
c00118e8:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118eb:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00118ee:	e8 70 70 00 00       	call   c0018963 <lockScheduler()>
c00118f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fb:	89 c1                	mov    ecx,eax
c00118fd:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0011900:	89 cb                	mov    ebx,ecx
c0011902:	89 d0                	mov    eax,edx
c0011904:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0011907:	89 c6                	mov    esi,eax
c0011909:	89 f0                	mov    eax,esi
c001190b:	09 d8                	or     eax,ebx
c001190d:	85 c0                	test   eax,eax
c001190f:	75 21                	jne    c0011932 <opcodeFault(regs*, void*)+0x4bb>
c0011911:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0011914:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011917:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001191a:	89 01                	mov    DWORD PTR [ecx],eax
c001191c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001191f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011922:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011925:	83 c8 40             	or     eax,0x40
c0011928:	89 c2                	mov    edx,eax
c001192a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011930:	eb 3e                	jmp    c0011970 <opcodeFault(regs*, void*)+0x4f9>
c0011932:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011935:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011938:	8b 00                	mov    eax,DWORD PTR [eax]
c001193a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001193d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011940:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011946:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011949:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001194c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001194f:	89 d0                	mov    eax,edx
c0011951:	31 d2                	xor    edx,edx
c0011953:	89 c3                	mov    ebx,eax
c0011955:	89 d6                	mov    esi,edx
c0011957:	89 da                	mov    edx,ebx
c0011959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001195f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011962:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011965:	83 e0 bf             	and    eax,0xffffffbf
c0011968:	89 c2                	mov    edx,eax
c001196a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011970:	e8 f0 6f 00 00       	call   c0018965 <unlockScheduler()>
c0011975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011978:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001197b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001197e:	01 c2                	add    edx,eax
c0011980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011983:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011986:	83 ec 0c             	sub    esp,0xc
c0011989:	68 76 1e 02 c0       	push   0xc0021e76
c001198e:	e8 b4 d7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	e9 8e 00 00 00       	jmp    c0011a29 <opcodeFault(regs*, void*)+0x5b2>
c001199b:	83 ec 0c             	sub    esp,0xc
c001199e:	68 89 1e 02 c0       	push   0xc0021e89
c00119a3:	e8 9f d7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ae:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b7:	c1 e0 04             	shl    eax,0x4
c00119ba:	01 d0                	add    eax,edx
c00119bc:	83 c0 03             	add    eax,0x3
c00119bf:	8a 00                	mov    al,BYTE PTR [eax]
c00119c1:	0f b6 d8             	movzx  ebx,al
c00119c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d0:	c1 e0 04             	shl    eax,0x4
c00119d3:	01 d0                	add    eax,edx
c00119d5:	83 c0 02             	add    eax,0x2
c00119d8:	8a 00                	mov    al,BYTE PTR [eax]
c00119da:	0f b6 c8             	movzx  ecx,al
c00119dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e9:	c1 e0 04             	shl    eax,0x4
c00119ec:	01 d0                	add    eax,edx
c00119ee:	40                   	inc    eax
c00119ef:	8a 00                	mov    al,BYTE PTR [eax]
c00119f1:	0f b6 d0             	movzx  edx,al
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00119fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a00:	c1 e0 04             	shl    eax,0x4
c0011a03:	01 f0                	add    eax,esi
c0011a05:	8a 00                	mov    al,BYTE PTR [eax]
c0011a07:	0f b6 c0             	movzx  eax,al
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	53                   	push   ebx
c0011a0e:	51                   	push   ecx
c0011a0f:	52                   	push   edx
c0011a10:	50                   	push   eax
c0011a11:	68 9c 1e 02 c0       	push   0xc0021e9c
c0011a16:	e8 2c d7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011a1b:	83 c4 20             	add    esp,0x20
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a24:	e8 65 f5 ff ff       	call   c0010f8e <displayDebugInfo(regs*)>
c0011a29:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a2c:	5b                   	pop    ebx
c0011a2d:	5e                   	pop    esi
c0011a2e:	5d                   	pop    ebp
c0011a2f:	c3                   	ret    

c0011a30 <displayProgramFault(char const*)>:
c0011a30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a38:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a3e:	85 c0                	test   eax,eax
c0011a40:	74 15                	je     c0011a57 <displayProgramFault(char const*)+0x27>
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	6a 04                	push   0x4
c0011a47:	6a 0f                	push   0xf
c0011a49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a4d:	50                   	push   eax
c0011a4e:	e8 c9 b9 ff ff       	call   c000d41c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a53:	83 c4 1c             	add    esp,0x1c
c0011a56:	c3                   	ret    
c0011a57:	c3                   	ret    

c0011a58 <setupInterruptController()>:
c0011a58:	55                   	push   ebp
c0011a59:	89 e5                	mov    ebp,esp
c0011a5b:	53                   	push   ebx
c0011a5c:	83 ec 14             	sub    esp,0x14
c0011a5f:	e8 a3 2d 00 00       	call   c0014807 <getCPUNumber()>
c0011a64:	85 c0                	test   eax,eax
c0011a66:	0f 95 c0             	setne  al
c0011a69:	84 c0                	test   al,al
c0011a6b:	74 56                	je     c0011ac3 <setupInterruptController()+0x6b>
c0011a6d:	83 ec 0c             	sub    esp,0xc
c0011a70:	68 58 21 00 00       	push   0x2158
c0011a75:	e8 98 d5 ff ff       	call   c000f012 <operator new(unsigned long)>
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	89 c3                	mov    ebx,eax
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	53                   	push   ebx
c0011a83:	e8 26 c9 00 00       	call   c001e3ae <APIC::APIC()>
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a8e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a96:	83 c0 08             	add    eax,0x8
c0011a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a9b:	6a 00                	push   0x0
c0011a9d:	6a 00                	push   0x0
c0011a9f:	6a 00                	push   0x0
c0011aa1:	52                   	push   edx
c0011aa2:	ff d0                	call   eax
c0011aa4:	83 c4 10             	add    esp,0x10
c0011aa7:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0011aac:	83 ec 08             	sub    esp,0x8
c0011aaf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ab2:	50                   	push   eax
c0011ab3:	e8 a4 ea ff ff       	call   c001055c <Device::addChild(Device*)>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011abe:	e9 48 03 00 00       	jmp    c0011e0b <setupInterruptController()+0x3b3>
c0011ac3:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0011ac8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ace:	83 e0 01             	and    eax,0x1
c0011ad1:	84 c0                	test   al,al
c0011ad3:	0f 95 c0             	setne  al
c0011ad6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	68 58 21 00 00       	push   0x2158
c0011ae1:	e8 2c d5 ff ff       	call   c000f012 <operator new(unsigned long)>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	89 c3                	mov    ebx,eax
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	53                   	push   ebx
c0011aef:	e8 b4 cd 00 00       	call   c001e8a8 <PIC::PIC()>
c0011af4:	83 c4 10             	add    esp,0x10
c0011af7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011afa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011afd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b02:	83 c0 08             	add    eax,0x8
c0011b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b07:	6a 00                	push   0x0
c0011b09:	6a 00                	push   0x0
c0011b0b:	6a 00                	push   0x0
c0011b0d:	52                   	push   edx
c0011b0e:	ff d0                	call   eax
c0011b10:	83 c4 10             	add    esp,0x10
c0011b13:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011b17:	74 6e                	je     c0011b87 <setupInterruptController()+0x12f>
c0011b19:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b21:	83 c0 0c             	add    eax,0xc
c0011b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b26:	6a 00                	push   0x0
c0011b28:	6a 00                	push   0x0
c0011b2a:	6a 00                	push   0x0
c0011b2c:	52                   	push   edx
c0011b2d:	ff d0                	call   eax
c0011b2f:	83 c4 10             	add    esp,0x10
c0011b32:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b36:	74 15                	je     c0011b4d <setupInterruptController()+0xf5>
c0011b38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b3d:	83 c0 04             	add    eax,0x4
c0011b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b48:	ff d0                	call   eax
c0011b4a:	83 c4 10             	add    esp,0x10
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	68 58 21 00 00       	push   0x2158
c0011b55:	e8 b8 d4 ff ff       	call   c000f012 <operator new(unsigned long)>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	89 c3                	mov    ebx,eax
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	53                   	push   ebx
c0011b63:	e8 46 c8 00 00       	call   c001e3ae <APIC::APIC()>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b76:	83 c0 08             	add    eax,0x8
c0011b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7b:	6a 00                	push   0x0
c0011b7d:	6a 00                	push   0x0
c0011b7f:	6a 00                	push   0x0
c0011b81:	52                   	push   edx
c0011b82:	ff d0                	call   eax
c0011b84:	83 c4 10             	add    esp,0x10
c0011b87:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0011b8c:	83 ec 08             	sub    esp,0x8
c0011b8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b92:	50                   	push   eax
c0011b93:	e8 c4 e9 ff ff       	call   c001055c <Device::addChild(Device*)>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba0:	83 c0 24             	add    eax,0x24
c0011ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba5:	6a 00                	push   0x0
c0011ba7:	68 58 14 01 c0       	push   0xc0011458
c0011bac:	6a 00                	push   0x0
c0011bae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bb1:	ff d0                	call   eax
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bbb:	83 c0 24             	add    eax,0x24
c0011bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc0:	6a 00                	push   0x0
c0011bc2:	68 58 14 01 c0       	push   0xc0011458
c0011bc7:	6a 01                	push   0x1
c0011bc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bcc:	ff d0                	call   eax
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd6:	83 c0 24             	add    eax,0x24
c0011bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bdb:	6a 00                	push   0x0
c0011bdd:	68 f1 0d 01 c0       	push   0xc0010df1
c0011be2:	6a 02                	push   0x2
c0011be4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011be7:	ff d0                	call   eax
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf1:	83 c0 24             	add    eax,0x24
c0011bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf6:	6a 00                	push   0x0
c0011bf8:	68 58 14 01 c0       	push   0xc0011458
c0011bfd:	6a 03                	push   0x3
c0011bff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c02:	ff d0                	call   eax
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0c:	83 c0 24             	add    eax,0x24
c0011c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c11:	6a 00                	push   0x0
c0011c13:	68 58 14 01 c0       	push   0xc0011458
c0011c18:	6a 04                	push   0x4
c0011c1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c1d:	ff d0                	call   eax
c0011c1f:	83 c4 10             	add    esp,0x10
c0011c22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c27:	83 c0 24             	add    eax,0x24
c0011c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c2c:	6a 00                	push   0x0
c0011c2e:	68 58 14 01 c0       	push   0xc0011458
c0011c33:	6a 05                	push   0x5
c0011c35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c38:	ff d0                	call   eax
c0011c3a:	83 c4 10             	add    esp,0x10
c0011c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c42:	83 c0 24             	add    eax,0x24
c0011c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c47:	6a 00                	push   0x0
c0011c49:	68 77 14 01 c0       	push   0xc0011477
c0011c4e:	6a 06                	push   0x6
c0011c50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c53:	ff d0                	call   eax
c0011c55:	83 c4 10             	add    esp,0x10
c0011c58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c5d:	83 c0 24             	add    eax,0x24
c0011c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c62:	6a 00                	push   0x0
c0011c64:	68 a5 13 01 c0       	push   0xc00113a5
c0011c69:	6a 07                	push   0x7
c0011c6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c6e:	ff d0                	call   eax
c0011c70:	83 c4 10             	add    esp,0x10
c0011c73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c78:	83 c0 24             	add    eax,0x24
c0011c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7d:	6a 00                	push   0x0
c0011c7f:	68 0c 0c 01 c0       	push   0xc0010c0c
c0011c84:	6a 08                	push   0x8
c0011c86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c89:	ff d0                	call   eax
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c93:	83 c0 24             	add    eax,0x24
c0011c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c98:	6a 00                	push   0x0
c0011c9a:	68 58 14 01 c0       	push   0xc0011458
c0011c9f:	6a 09                	push   0x9
c0011ca1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca4:	ff d0                	call   eax
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cae:	83 c0 24             	add    eax,0x24
c0011cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb3:	6a 00                	push   0x0
c0011cb5:	68 58 14 01 c0       	push   0xc0011458
c0011cba:	6a 0a                	push   0xa
c0011cbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cbf:	ff d0                	call   eax
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc9:	83 c0 24             	add    eax,0x24
c0011ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cce:	6a 00                	push   0x0
c0011cd0:	68 58 14 01 c0       	push   0xc0011458
c0011cd5:	6a 0b                	push   0xb
c0011cd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cda:	ff d0                	call   eax
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce4:	83 c0 24             	add    eax,0x24
c0011ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce9:	6a 00                	push   0x0
c0011ceb:	68 58 14 01 c0       	push   0xc0011458
c0011cf0:	6a 0c                	push   0xc
c0011cf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf5:	ff d0                	call   eax
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cff:	83 c0 24             	add    eax,0x24
c0011d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d04:	6a 00                	push   0x0
c0011d06:	68 08 14 01 c0       	push   0xc0011408
c0011d0b:	6a 0d                	push   0xd
c0011d0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d10:	ff d0                	call   eax
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1a:	83 c0 24             	add    eax,0x24
c0011d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1f:	6a 00                	push   0x0
c0011d21:	68 41 14 01 c0       	push   0xc0011441
c0011d26:	6a 0e                	push   0xe
c0011d28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d2b:	ff d0                	call   eax
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d33:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d35:	83 c0 24             	add    eax,0x24
c0011d38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3a:	6a 00                	push   0x0
c0011d3c:	68 58 14 01 c0       	push   0xc0011458
c0011d41:	6a 0f                	push   0xf
c0011d43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d46:	ff d0                	call   eax
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d50:	83 c0 24             	add    eax,0x24
c0011d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d55:	6a 00                	push   0x0
c0011d57:	68 58 14 01 c0       	push   0xc0011458
c0011d5c:	6a 10                	push   0x10
c0011d5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d61:	ff d0                	call   eax
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d69:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6b:	83 c0 24             	add    eax,0x24
c0011d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d70:	6a 00                	push   0x0
c0011d72:	68 58 14 01 c0       	push   0xc0011458
c0011d77:	6a 11                	push   0x11
c0011d79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d7c:	ff d0                	call   eax
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d86:	83 c0 24             	add    eax,0x24
c0011d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8b:	6a 00                	push   0x0
c0011d8d:	68 58 14 01 c0       	push   0xc0011458
c0011d92:	6a 12                	push   0x12
c0011d94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d97:	ff d0                	call   eax
c0011d99:	83 c4 10             	add    esp,0x10
c0011d9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da1:	83 c0 24             	add    eax,0x24
c0011da4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da6:	6a 00                	push   0x0
c0011da8:	68 58 14 01 c0       	push   0xc0011458
c0011dad:	6a 13                	push   0x13
c0011daf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db2:	ff d0                	call   eax
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbc:	83 c0 24             	add    eax,0x24
c0011dbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc1:	6a 00                	push   0x0
c0011dc3:	68 58 14 01 c0       	push   0xc0011458
c0011dc8:	6a 14                	push   0x14
c0011dca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dcd:	ff d0                	call   eax
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd7:	83 c0 24             	add    eax,0x24
c0011dda:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddc:	6a 00                	push   0x0
c0011dde:	68 58 14 01 c0       	push   0xc0011458
c0011de3:	6a 1e                	push   0x1e
c0011de5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011de8:	ff d0                	call   eax
c0011dea:	83 c4 10             	add    esp,0x10
c0011ded:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df2:	83 c0 24             	add    eax,0x24
c0011df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df7:	6a 00                	push   0x0
c0011df9:	68 6b 73 01 c0       	push   0xc001736b
c0011dfe:	6a 60                	push   0x60
c0011e00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e03:	ff d0                	call   eax
c0011e05:	83 c4 10             	add    esp,0x10
c0011e08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e0e:	c9                   	leave  
c0011e0f:	c3                   	ret    

c0011e10 <InterruptController::convertLegacyIRQNumber(int)>:
c0011e10:	55                   	push   ebp
c0011e11:	89 e5                	mov    ebp,esp
c0011e13:	83 ec 08             	sub    esp,0x8
c0011e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	50                   	push   eax
c0011e1d:	e8 1c ea ff ff       	call   c001083e <Device::getName()>
c0011e22:	83 c4 10             	add    esp,0x10
c0011e25:	8a 00                	mov    al,BYTE PTR [eax]
c0011e27:	3c 41                	cmp    al,0x41
c0011e29:	0f 94 c0             	sete   al
c0011e2c:	84 c0                	test   al,al
c0011e2e:	74 28                	je     c0011e58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e30:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e34:	7f 12                	jg     c0011e48 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e39:	05 00 3d 02 c0       	add    eax,0xc0023d00
c0011e3e:	8a 00                	mov    al,BYTE PTR [eax]
c0011e40:	0f b6 c0             	movzx  eax,al
c0011e43:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e46:	eb 10                	jmp    c0011e58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e48:	83 ec 0c             	sub    esp,0xc
c0011e4b:	68 14 1c 02 c0       	push   0xc0021c14
c0011e50:	e8 21 3b 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e5b:	c9                   	leave  
c0011e5c:	c3                   	ret    
c0011e5d:	90                   	nop

c0011e5e <startGUI(void*)>:
c0011e5e:	55                   	push   ebp
c0011e5f:	89 e5                	mov    ebp,esp
c0011e61:	53                   	push   ebx
c0011e62:	83 ec 04             	sub    esp,0x4
c0011e65:	e8 fb 6a 00 00       	call   c0018965 <unlockScheduler()>
c0011e6a:	e8 df 6a 00 00       	call   c001894e <getIRQNestingLevel()>
c0011e6f:	83 ec 08             	sub    esp,0x8
c0011e72:	50                   	push   eax
c0011e73:	68 04 1f 02 c0       	push   0xc0021f04
c0011e78:	e8 ca d2 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c0011e86:	83 ec 08             	sub    esp,0x8
c0011e89:	6a 01                	push   0x1
c0011e8b:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011e90:	e8 e9 64 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	53                   	push   ebx
c0011e9c:	50                   	push   eax
c0011e9d:	e8 a2 66 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c0011eab:	83 ec 08             	sub    esp,0x8
c0011eae:	6a 01                	push   0x1
c0011eb0:	68 38 1f 02 c0       	push   0xc0021f38
c0011eb5:	e8 c4 64 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c0011eba:	83 c4 10             	add    esp,0x10
c0011ebd:	83 ec 08             	sub    esp,0x8
c0011ec0:	53                   	push   ebx
c0011ec1:	50                   	push   eax
c0011ec2:	e8 7d 66 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	90                   	nop
c0011ecb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ece:	c9                   	leave  
c0011ecf:	c3                   	ret    

c0011ed0 <sendKeyToTerminal(unsigned char)>:
c0011ed0:	55                   	push   ebp
c0011ed1:	89 e5                	mov    ebp,esp
c0011ed3:	83 ec 28             	sub    esp,0x28
c0011ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ed9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011edc:	8b 15 64 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024664
c0011ee2:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011ee5:	25 ff 00 00 00       	and    eax,0xff
c0011eea:	83 ec 08             	sub    esp,0x8
c0011eed:	50                   	push   eax
c0011eee:	52                   	push   edx
c0011eef:	e8 66 ba ff ff       	call   c000d95a <VgaText::receiveKey(unsigned char)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011efb:	75 41                	jne    c0011f3e <sendKeyToTerminal(unsigned char)+0x6e>
c0011efd:	e8 88 6a 00 00       	call   c001898a <lockStuff()>
c0011f02:	a1 40 47 02 c0       	mov    eax,ds:0xc0024740
c0011f07:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f0a:	c7 05 40 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024740,0x0
c0011f14:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011f18:	74 1f                	je     c0011f39 <sendKeyToTerminal(unsigned char)+0x69>
c0011f1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f1d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f29:	83 ec 0c             	sub    esp,0xc
c0011f2c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f2f:	e8 53 70 00 00       	call   c0018f87 <unblockTask(ThreadControlBlock*)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb db                	jmp    c0011f14 <sendKeyToTerminal(unsigned char)+0x44>
c0011f39:	e8 f3 6d 00 00       	call   c0018d31 <unlockStuff()>
c0011f3e:	90                   	nop
c0011f3f:	c9                   	leave  
c0011f40:	c3                   	ret    

c0011f41 <sendKeyboardToken(KeyboardToken)>:
c0011f41:	55                   	push   ebp
c0011f42:	89 e5                	mov    ebp,esp
c0011f44:	83 ec 18             	sub    esp,0x18
c0011f47:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f4d:	25 ff ff 00 00       	and    eax,0xffff
c0011f52:	83 f2 01             	xor    edx,0x1
c0011f55:	88 90 60 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb8a0],dl
c0011f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f5e:	66 3d 03 02          	cmp    ax,0x203
c0011f62:	75 07                	jne    c0011f6b <sendKeyboardToken(KeyboardToken)+0x2a>
c0011f64:	a0 60 48 02 c0       	mov    al,ds:0xc0024860
c0011f69:	84 c0                	test   al,al
c0011f6b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f6f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f72:	a0 68 4b 02 c0       	mov    al,ds:0xc0024b68
c0011f77:	38 c2                	cmp    dl,al
c0011f79:	74 1e                	je     c0011f99 <sendKeyboardToken(KeyboardToken)+0x58>
c0011f7b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f7e:	a2 68 4b 02 c0       	mov    ds:0xc0024b68,al
c0011f83:	a0 68 4b 02 c0       	mov    al,ds:0xc0024b68
c0011f88:	25 ff 00 00 00       	and    eax,0xff
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	50                   	push   eax
c0011f91:	e8 30 ac ff ff       	call   c000cbc6 <setTerminalScrollLock(bool)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f9c:	84 c0                	test   al,al
c0011f9e:	0f 84 ae 00 00 00    	je     c0012052 <sendKeyboardToken(KeyboardToken)+0x111>
c0011fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa7:	66 3d 10 03          	cmp    ax,0x310
c0011fab:	75 06                	jne    c0011fb3 <sendKeyboardToken(KeyboardToken)+0x72>
c0011fad:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb6:	66 3d 11 03          	cmp    ax,0x311
c0011fba:	75 06                	jne    c0011fc2 <sendKeyboardToken(KeyboardToken)+0x81>
c0011fbc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc5:	66 3d 12 03          	cmp    ax,0x312
c0011fc9:	75 06                	jne    c0011fd1 <sendKeyboardToken(KeyboardToken)+0x90>
c0011fcb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd4:	66 3d 13 03          	cmp    ax,0x313
c0011fd8:	75 06                	jne    c0011fe0 <sendKeyboardToken(KeyboardToken)+0x9f>
c0011fda:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe3:	66 3d 14 03          	cmp    ax,0x314
c0011fe7:	75 06                	jne    c0011fef <sendKeyboardToken(KeyboardToken)+0xae>
c0011fe9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff2:	66 3d 15 03          	cmp    ax,0x315
c0011ff6:	75 06                	jne    c0011ffe <sendKeyboardToken(KeyboardToken)+0xbd>
c0011ff8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012001:	66 3d 16 03          	cmp    ax,0x316
c0012005:	75 06                	jne    c001200d <sendKeyboardToken(KeyboardToken)+0xcc>
c0012007:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012010:	66 3d 17 03          	cmp    ax,0x317
c0012014:	75 06                	jne    c001201c <sendKeyboardToken(KeyboardToken)+0xdb>
c0012016:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001201f:	66 3d 18 03          	cmp    ax,0x318
c0012023:	75 06                	jne    c001202b <sendKeyboardToken(KeyboardToken)+0xea>
c0012025:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001202b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001202e:	66 3d 19 03          	cmp    ax,0x319
c0012032:	75 06                	jne    c001203a <sendKeyboardToken(KeyboardToken)+0xf9>
c0012034:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001203a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001203d:	66 3d 1a 03          	cmp    ax,0x31a
c0012041:	0f 85 c9 00 00 00    	jne    c0012110 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012047:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001204d:	e9 be 00 00 00       	jmp    c0012110 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012055:	66 3d 10 03          	cmp    ax,0x310
c0012059:	75 0a                	jne    c0012065 <sendKeyboardToken(KeyboardToken)+0x124>
c001205b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012061:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012068:	66 3d 11 03          	cmp    ax,0x311
c001206c:	75 0a                	jne    c0012078 <sendKeyboardToken(KeyboardToken)+0x137>
c001206e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012074:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207b:	66 3d 12 03          	cmp    ax,0x312
c001207f:	75 0a                	jne    c001208b <sendKeyboardToken(KeyboardToken)+0x14a>
c0012081:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012087:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001208b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208e:	66 3d 13 03          	cmp    ax,0x313
c0012092:	75 0a                	jne    c001209e <sendKeyboardToken(KeyboardToken)+0x15d>
c0012094:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001209a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a1:	66 3d 14 03          	cmp    ax,0x314
c00120a5:	75 0a                	jne    c00120b1 <sendKeyboardToken(KeyboardToken)+0x170>
c00120a7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00120ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b4:	66 3d 15 03          	cmp    ax,0x315
c00120b8:	75 0a                	jne    c00120c4 <sendKeyboardToken(KeyboardToken)+0x183>
c00120ba:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c7:	66 3d 16 03          	cmp    ax,0x316
c00120cb:	75 0a                	jne    c00120d7 <sendKeyboardToken(KeyboardToken)+0x196>
c00120cd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120da:	66 3d 17 03          	cmp    ax,0x317
c00120de:	75 0a                	jne    c00120ea <sendKeyboardToken(KeyboardToken)+0x1a9>
c00120e0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ed:	66 3d 18 03          	cmp    ax,0x318
c00120f1:	75 0a                	jne    c00120fd <sendKeyboardToken(KeyboardToken)+0x1bc>
c00120f3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00120f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012100:	66 3d 19 03          	cmp    ax,0x319
c0012104:	75 0a                	jne    c0012110 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012106:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001210c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012113:	66 3d 00 02          	cmp    ax,0x200
c0012117:	75 2a                	jne    c0012143 <sendKeyboardToken(KeyboardToken)+0x202>
c0012119:	a0 60 4b 02 c0       	mov    al,ds:0xc0024b60
c001211e:	83 f0 01             	xor    eax,0x1
c0012121:	84 c0                	test   al,al
c0012123:	74 1e                	je     c0012143 <sendKeyboardToken(KeyboardToken)+0x202>
c0012125:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c001212a:	6a 01                	push   0x1
c001212c:	6a 00                	push   0x0
c001212e:	68 5e 1e 01 c0       	push   0xc0011e5e
c0012133:	50                   	push   eax
c0012134:	e8 5f 69 00 00       	call   c0018a98 <Process::createThread(void (*)(void*), void*, int)>
c0012139:	83 c4 10             	add    esp,0x10
c001213c:	c6 05 60 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b60,0x1
c0012143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012146:	66 3d 1d 03          	cmp    ax,0x31d
c001214a:	75 06                	jne    c0012152 <sendKeyboardToken(KeyboardToken)+0x211>
c001214c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012155:	66 3d 1c 03          	cmp    ax,0x31c
c0012159:	75 06                	jne    c0012161 <sendKeyboardToken(KeyboardToken)+0x220>
c001215b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012164:	66 3d 1b 03          	cmp    ax,0x31b
c0012168:	75 06                	jne    c0012170 <sendKeyboardToken(KeyboardToken)+0x22f>
c001216a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012173:	66 3d 1e 03          	cmp    ax,0x31e
c0012177:	75 06                	jne    c001217f <sendKeyboardToken(KeyboardToken)+0x23e>
c0012179:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001217f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012182:	66 3d 1f 03          	cmp    ax,0x31f
c0012186:	75 06                	jne    c001218e <sendKeyboardToken(KeyboardToken)+0x24d>
c0012188:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001218e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012191:	66 3d 1a 03          	cmp    ax,0x31a
c0012195:	75 06                	jne    c001219d <sendKeyboardToken(KeyboardToken)+0x25c>
c0012197:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001219d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00121a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00121a4:	83 f0 01             	xor    eax,0x1
c00121a7:	84 c0                	test   al,al
c00121a9:	74 7b                	je     c0012226 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00121ab:	a0 61 48 02 c0       	mov    al,ds:0xc0024861
c00121b0:	84 c0                	test   al,al
c00121b2:	74 43                	je     c00121f7 <sendKeyboardToken(KeyboardToken)+0x2b6>
c00121b4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121b8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00121bc:	74 2d                	je     c00121eb <sendKeyboardToken(KeyboardToken)+0x2aa>
c00121be:	8b 15 64 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b64
c00121c4:	89 d0                	mov    eax,edx
c00121c6:	c1 e0 02             	shl    eax,0x2
c00121c9:	01 d0                	add    eax,edx
c00121cb:	01 c0                	add    eax,eax
c00121cd:	a3 64 4b 02 c0       	mov    ds:0xc0024b64,eax
c00121d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121d5:	25 ff ff 00 00       	and    eax,0xffff
c00121da:	8d 50 d0             	lea    edx,[eax-0x30]
c00121dd:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c00121e2:	01 d0                	add    eax,edx
c00121e4:	a3 64 4b 02 c0       	mov    ds:0xc0024b64,eax
c00121e9:	eb 71                	jmp    c001225c <sendKeyboardToken(KeyboardToken)+0x31b>
c00121eb:	c7 05 64 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x0
c00121f5:	eb 65                	jmp    c001225c <sendKeyboardToken(KeyboardToken)+0x31b>
c00121f7:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c00121fc:	85 c0                	test   eax,eax
c00121fe:	74 1a                	je     c001221a <sendKeyboardToken(KeyboardToken)+0x2d9>
c0012200:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c0012205:	25 ff 00 00 00       	and    eax,0xff
c001220a:	83 ec 0c             	sub    esp,0xc
c001220d:	50                   	push   eax
c001220e:	e8 bd fc ff ff       	call   c0011ed0 <sendKeyToTerminal(unsigned char)>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001221a:	c7 05 64 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x0
c0012224:	eb 36                	jmp    c001225c <sendKeyboardToken(KeyboardToken)+0x31b>
c0012226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012229:	66 3d 01 01          	cmp    ax,0x101
c001222d:	75 2d                	jne    c001225c <sendKeyboardToken(KeyboardToken)+0x31b>
c001222f:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c0012234:	85 c0                	test   eax,eax
c0012236:	74 1a                	je     c0012252 <sendKeyboardToken(KeyboardToken)+0x311>
c0012238:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c001223d:	25 ff 00 00 00       	and    eax,0xff
c0012242:	83 ec 0c             	sub    esp,0xc
c0012245:	50                   	push   eax
c0012246:	e8 85 fc ff ff       	call   c0011ed0 <sendKeyToTerminal(unsigned char)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012252:	c7 05 64 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x0
c001225c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001225f:	83 f0 01             	xor    eax,0x1
c0012262:	84 c0                	test   al,al
c0012264:	74 4e                	je     c00122b4 <sendKeyboardToken(KeyboardToken)+0x373>
c0012266:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012269:	83 f0 01             	xor    eax,0x1
c001226c:	84 c0                	test   al,al
c001226e:	74 44                	je     c00122b4 <sendKeyboardToken(KeyboardToken)+0x373>
c0012270:	a0 60 48 02 c0       	mov    al,ds:0xc0024860
c0012275:	83 f0 01             	xor    eax,0x1
c0012278:	84 c0                	test   al,al
c001227a:	74 38                	je     c00122b4 <sendKeyboardToken(KeyboardToken)+0x373>
c001227c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001227f:	66 83 f8 1f          	cmp    ax,0x1f
c0012283:	76 09                	jbe    c001228e <sendKeyboardToken(KeyboardToken)+0x34d>
c0012285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012288:	66 83 f8 7e          	cmp    ax,0x7e
c001228c:	76 12                	jbe    c00122a0 <sendKeyboardToken(KeyboardToken)+0x35f>
c001228e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012291:	66 83 f8 0a          	cmp    ax,0xa
c0012295:	74 09                	je     c00122a0 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229a:	66 83 f8 08          	cmp    ax,0x8
c001229e:	75 14                	jne    c00122b4 <sendKeyboardToken(KeyboardToken)+0x373>
c00122a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a3:	25 ff 00 00 00       	and    eax,0xff
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	50                   	push   eax
c00122ac:	e8 1f fc ff ff       	call   c0011ed0 <sendKeyToTerminal(unsigned char)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00122b7:	83 f0 01             	xor    eax,0x1
c00122ba:	84 c0                	test   al,al
c00122bc:	74 51                	je     c001230f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122be:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122c1:	83 f0 01             	xor    eax,0x1
c00122c4:	84 c0                	test   al,al
c00122c6:	74 47                	je     c001230f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122c8:	a0 60 48 02 c0       	mov    al,ds:0xc0024860
c00122cd:	84 c0                	test   al,al
c00122cf:	74 3e                	je     c001230f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122d4:	66 83 f8 3f          	cmp    ax,0x3f
c00122d8:	76 35                	jbe    c001230f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122dd:	66 83 f8 7f          	cmp    ax,0x7f
c00122e1:	77 2c                	ja     c001230f <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e6:	88 c2                	mov    dl,al
c00122e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122eb:	66 83 f8 5f          	cmp    ax,0x5f
c00122ef:	76 04                	jbe    c00122f5 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00122f1:	b0 20                	mov    al,0x20
c00122f3:	eb 02                	jmp    c00122f7 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00122f5:	b0 00                	mov    al,0x0
c00122f7:	29 c2                	sub    edx,eax
c00122f9:	88 d0                	mov    al,dl
c00122fb:	83 e8 40             	sub    eax,0x40
c00122fe:	25 ff 00 00 00       	and    eax,0xff
c0012303:	83 ec 0c             	sub    esp,0xc
c0012306:	50                   	push   eax
c0012307:	e8 c4 fb ff ff       	call   c0011ed0 <sendKeyToTerminal(unsigned char)>
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012312:	66 3d 00 03          	cmp    ax,0x300
c0012316:	75 0f                	jne    c0012327 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012318:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001231b:	83 f0 01             	xor    eax,0x1
c001231e:	84 c0                	test   al,al
c0012320:	74 05                	je     c0012327 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012322:	e8 c6 b0 ff ff       	call   c000d3ed <doTerminalCycle()>
c0012327:	90                   	nop
c0012328:	c9                   	leave  
c0012329:	c3                   	ret    

c001232a <clearInternalKeybuffer(VgaText*)>:
c001232a:	55                   	push   ebp
c001232b:	89 e5                	mov    ebp,esp
c001232d:	83 ec 08             	sub    esp,0x8
c0012330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012333:	05 34 11 00 00       	add    eax,0x1134
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	50                   	push   eax
c001233c:	e8 96 e3 fe ff       	call   c00006d7 <strlen>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012347:	81 c2 34 11 00 00    	add    edx,0x1134
c001234d:	83 ec 04             	sub    esp,0x4
c0012350:	50                   	push   eax
c0012351:	6a 00                	push   0x0
c0012353:	52                   	push   edx
c0012354:	e8 61 e3 fe ff       	call   c00006ba <memset>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	90                   	nop
c001235d:	c9                   	leave  
c001235e:	c3                   	ret    

c001235f <readKeyboard(VgaText*, char*, unsigned long)>:
c001235f:	55                   	push   ebp
c0012360:	89 e5                	mov    ebp,esp
c0012362:	83 ec 18             	sub    esp,0x18
c0012365:	fb                   	sti    
c0012366:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001236d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012371:	74 77                	je     c00123ea <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012376:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001237c:	84 c0                	test   al,al
c001237e:	75 02                	jne    c0012382 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012380:	eb f1                	jmp    c0012373 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012382:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012385:	8d 50 01             	lea    edx,[eax+0x1]
c0012388:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001238b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001238e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012394:	88 10                	mov    BYTE PTR [eax],dl
c0012396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012399:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001239f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00123a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a5:	05 34 11 00 00       	add    eax,0x1134
c00123aa:	83 ec 0c             	sub    esp,0xc
c00123ad:	50                   	push   eax
c00123ae:	e8 24 e3 fe ff       	call   c00006d7 <strlen>
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123b9:	81 c2 34 11 00 00    	add    edx,0x1134
c00123bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123c5:	81 c2 34 11 00 00    	add    edx,0x1134
c00123cb:	83 ec 04             	sub    esp,0x4
c00123ce:	50                   	push   eax
c00123cf:	51                   	push   ecx
c00123d0:	52                   	push   edx
c00123d1:	e8 76 e2 fe ff       	call   c000064c <memmove>
c00123d6:	83 c4 10             	add    esp,0x10
c00123d9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00123dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123df:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123e3:	75 88                	jne    c001236d <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123e8:	eb 03                	jmp    c00123ed <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00123ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123ed:	c9                   	leave  
c00123ee:	c3                   	ret    
c00123ef:	90                   	nop

c00123f0 <Keyboard::Keyboard(char const*)>:
c00123f0:	83 ec 0c             	sub    esp,0xc
c00123f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f7:	83 ec 08             	sub    esp,0x8
c00123fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123fe:	50                   	push   eax
c00123ff:	e8 48 e3 ff ff       	call   c001074c <Device::Device(char const*)>
c0012404:	83 c4 10             	add    esp,0x10
c0012407:	ba 5c 1f 02 c0       	mov    edx,0xc0021f5c
c001240c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012410:	89 10                	mov    DWORD PTR [eax],edx
c0012412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012416:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0012420:	c6 05 44 47 02 c0 01 	mov    BYTE PTR ds:0xc0024744,0x1
c0012427:	90                   	nop
c0012428:	83 c4 0c             	add    esp,0xc
c001242b:	c3                   	ret    

c001242c <Keyboard::~Keyboard()>:
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	ba 5c 1f 02 c0       	mov    edx,0xc0021f5c
c0012434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012438:	89 10                	mov    DWORD PTR [eax],edx
c001243a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	50                   	push   eax
c0012442:	e8 bb df ff ff       	call   c0010402 <Device::~Device()>
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	90                   	nop
c001244b:	83 c4 0c             	add    esp,0xc
c001244e:	c3                   	ret    
c001244f:	90                   	nop

c0012450 <Keyboard::~Keyboard()>:
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001245a:	e8 cd ff ff ff       	call   c001242c <Keyboard::~Keyboard()>
c001245f:	83 c4 10             	add    esp,0x10
c0012462:	83 ec 08             	sub    esp,0x8
c0012465:	68 5c 01 00 00       	push   0x15c
c001246a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001246e:	e8 ae cb ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0012473:	83 c4 10             	add    esp,0x10
c0012476:	83 c4 0c             	add    esp,0xc
c0012479:	c3                   	ret    

c001247a <LogicalDisk::close(int, int, void*)>:
c001247a:	83 c8 ff             	or     eax,0xffffffff
c001247d:	c3                   	ret    

c001247e <LogicalDisk::~LogicalDisk()>:
c001247e:	83 ec 0c             	sub    esp,0xc
c0012481:	ba 0c 20 02 c0       	mov    edx,0xc002200c
c0012486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248a:	89 10                	mov    DWORD PTR [eax],edx
c001248c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	50                   	push   eax
c0012494:	e8 69 df ff ff       	call   c0010402 <Device::~Device()>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	90                   	nop
c001249d:	83 c4 0c             	add    esp,0xc
c00124a0:	c3                   	ret    
c00124a1:	90                   	nop

c00124a2 <LogicalDisk::~LogicalDisk()>:
c00124a2:	83 ec 0c             	sub    esp,0xc
c00124a5:	83 ec 0c             	sub    esp,0xc
c00124a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ac:	e8 cd ff ff ff       	call   c001247e <LogicalDisk::~LogicalDisk()>
c00124b1:	83 c4 10             	add    esp,0x10
c00124b4:	83 ec 08             	sub    esp,0x8
c00124b7:	68 74 01 00 00       	push   0x174
c00124bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c0:	e8 5c cb ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00124c5:	83 c4 10             	add    esp,0x10
c00124c8:	83 c4 0c             	add    esp,0xc
c00124cb:	c3                   	ret    

c00124cc <LogicalDisk::open(int, int, void*)>:
c00124cc:	83 ec 18             	sub    esp,0x18
c00124cf:	68 88 1f 02 c0       	push   0xc0021f88
c00124d4:	e8 9d 34 00 00       	call   c0015976 <Krnl::panic(char const*)>
c00124d9:	83 c8 ff             	or     eax,0xffffffff
c00124dc:	83 c4 1c             	add    esp,0x1c
c00124df:	c3                   	ret    

c00124e0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124e0:	53                   	push   ebx
c00124e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124ed:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00124f3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00124f9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00124ff:	77 10                	ja     c0012511 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0012501:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012507:	89 d3                	mov    ebx,edx
c0012509:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001250f:	72 05                	jb     c0012516 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0012511:	83 c8 ff             	or     eax,0xffffffff
c0012514:	89 c2                	mov    edx,eax
c0012516:	5b                   	pop    ebx
c0012517:	c3                   	ret    

c0012518 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0012518:	56                   	push   esi
c0012519:	83 c8 ff             	or     eax,0xffffffff
c001251c:	53                   	push   ebx
c001251d:	89 c2                	mov    edx,eax
c001251f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012523:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012527:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001252b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012531:	77 27                	ja     c001255a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012533:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012539:	89 d8                	mov    eax,ebx
c001253b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012541:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012546:	89 c2                	mov    edx,eax
c0012548:	73 10                	jae    c001255a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001254a:	89 c8                	mov    eax,ecx
c001254c:	89 da                	mov    edx,ebx
c001254e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012554:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001255a:	5b                   	pop    ebx
c001255b:	5e                   	pop    esi
c001255c:	c3                   	ret    
c001255d:	90                   	nop

c001255e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001255e:	83 ec 1c             	sub    esp,0x1c
c0012561:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012565:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012569:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001256d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012571:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012575:	89 04 24             	mov    DWORD PTR [esp],eax
c0012578:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001257c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012584:	83 ec 08             	sub    esp,0x8
c0012587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001258b:	50                   	push   eax
c001258c:	e8 bb e1 ff ff       	call   c001074c <Device::Device(char const*)>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	ba 0c 20 02 c0       	mov    edx,0xc002200c
c0012599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001259d:	89 10                	mov    DWORD PTR [eax],edx
c001259f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125ae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00125d5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00125db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125e6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125ec:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00125f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125fa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012604:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001260e:	90                   	nop
c001260f:	83 c4 1c             	add    esp,0x1c
c0012612:	c3                   	ret    
c0012613:	90                   	nop

c0012614 <LogicalDisk::assignDriveLetter()>:
c0012614:	55                   	push   ebp
c0012615:	57                   	push   edi
c0012616:	56                   	push   esi
c0012617:	53                   	push   ebx
c0012618:	83 ec 14             	sub    esp,0x14
c001261b:	8b 3d 80 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b80
c0012621:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012625:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012629:	8b 3d 84 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024b84
c001262f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012635:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012639:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001263f:	3c 01                	cmp    al,0x1
c0012641:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012645:	19 c0                	sbb    eax,eax
c0012647:	83 e0 02             	and    eax,0x2
c001264a:	83 c0 41             	add    eax,0x41
c001264d:	0f be e8             	movsx  ebp,al
c0012650:	3c 43                	cmp    al,0x43
c0012652:	75 10                	jne    c0012664 <LogicalDisk::assignDriveLetter()+0x50>
c0012654:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001265b:	75 5d                	jne    c00126ba <LogicalDisk::assignDriveLetter()+0xa6>
c001265d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012662:	75 56                	jne    c00126ba <LogicalDisk::assignDriveLetter()+0xa6>
c0012664:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012667:	ba 01 00 00 00       	mov    edx,0x1
c001266c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012670:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012674:	d3 e2                	shl    edx,cl
c0012676:	89 d7                	mov    edi,edx
c0012678:	89 d6                	mov    esi,edx
c001267a:	c1 ff 1f             	sar    edi,0x1f
c001267d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012681:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012685:	21 f9                	and    ecx,edi
c0012687:	09 d1                	or     ecx,edx
c0012689:	75 2f                	jne    c00126ba <LogicalDisk::assignDriveLetter()+0xa6>
c001268b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001268f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012693:	09 f2                	or     edx,esi
c0012695:	89 15 80 4b 02 c0    	mov    DWORD PTR ds:0xc0024b80,edx
c001269b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001269f:	09 fa                	or     edx,edi
c00126a1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00126a5:	89 15 84 4b 02 c0    	mov    DWORD PTR ds:0xc0024b84,edx
c00126ab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00126b1:	89 1c bd a0 4b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb460],ebx
c00126b8:	eb 08                	jmp    c00126c2 <LogicalDisk::assignDriveLetter()+0xae>
c00126ba:	40                   	inc    eax
c00126bb:	45                   	inc    ebp
c00126bc:	3c 5b                	cmp    al,0x5b
c00126be:	75 90                	jne    c0012650 <LogicalDisk::assignDriveLetter()+0x3c>
c00126c0:	31 c0                	xor    eax,eax
c00126c2:	83 c4 14             	add    esp,0x14
c00126c5:	5b                   	pop    ebx
c00126c6:	5e                   	pop    esi
c00126c7:	5f                   	pop    edi
c00126c8:	5d                   	pop    ebp
c00126c9:	c3                   	ret    

c00126ca <LogicalDisk::mount()>:
c00126ca:	56                   	push   esi
c00126cb:	53                   	push   ebx
c00126cc:	51                   	push   ecx
c00126cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126d1:	8b 1d 08 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024708
c00126d7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126e1:	85 db                	test   ebx,ebx
c00126e3:	74 50                	je     c0012735 <LogicalDisk::mount()+0x6b>
c00126e5:	e8 64 62 00 00       	call   c001894e <getIRQNestingLevel()>
c00126ea:	52                   	push   edx
c00126eb:	52                   	push   edx
c00126ec:	50                   	push   eax
c00126ed:	68 ac 1f 02 c0       	push   0xc0021fac
c00126f2:	e8 50 ca ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00126f7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00126fe:	83 c4 0c             	add    esp,0xc
c0012701:	83 e8 41             	sub    eax,0x41
c0012704:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012706:	50                   	push   eax
c0012707:	56                   	push   esi
c0012708:	53                   	push   ebx
c0012709:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001270c:	83 c4 10             	add    esp,0x10
c001270f:	84 c0                	test   al,al
c0012711:	74 08                	je     c001271b <LogicalDisk::mount()+0x51>
c0012713:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0012719:	eb 1c                	jmp    c0012737 <LogicalDisk::mount()+0x6d>
c001271b:	e8 2e 62 00 00       	call   c001894e <getIRQNestingLevel()>
c0012720:	51                   	push   ecx
c0012721:	51                   	push   ecx
c0012722:	50                   	push   eax
c0012723:	68 c7 1f 02 c0       	push   0xc0021fc7
c0012728:	e8 1a ca ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001272d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	eb ac                	jmp    c00126e1 <LogicalDisk::mount()+0x17>
c0012735:	31 c0                	xor    eax,eax
c0012737:	5a                   	pop    edx
c0012738:	5b                   	pop    ebx
c0012739:	5e                   	pop    esi
c001273a:	c3                   	ret    
c001273b:	90                   	nop

c001273c <LogicalDisk::unmount()>:
c001273c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012740:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001274a:	c3                   	ret    
c001274b:	90                   	nop

c001274c <LogicalDisk::unassignDriveLetter()>:
c001274c:	57                   	push   edi
c001274d:	56                   	push   esi
c001274e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012752:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012759:	84 c9                	test   cl,cl
c001275b:	75 0f                	jne    c001276c <LogicalDisk::unassignDriveLetter()+0x20>
c001275d:	c7 44 24 0c e2 1f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021fe2
c0012765:	5e                   	pop    esi
c0012766:	5f                   	pop    edi
c0012767:	e9 0a 32 00 00       	jmp    c0015976 <Krnl::panic(char const*)>
c001276c:	83 e9 41             	sub    ecx,0x41
c001276f:	b8 01 00 00 00       	mov    eax,0x1
c0012774:	d3 e0                	shl    eax,cl
c0012776:	89 c7                	mov    edi,eax
c0012778:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001277f:	c1 ff 1f             	sar    edi,0x1f
c0012782:	c7 04 8d a0 4b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb460],0x0
c001278d:	89 fe                	mov    esi,edi
c001278f:	f7 d6                	not    esi
c0012791:	f7 d0                	not    eax
c0012793:	21 35 84 4b 02 c0    	and    DWORD PTR ds:0xc0024b84,esi
c0012799:	5e                   	pop    esi
c001279a:	21 05 80 4b 02 c0    	and    DWORD PTR ds:0xc0024b80,eax
c00127a0:	5f                   	pop    edi
c00127a1:	c3                   	ret    

c00127a2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00127a2:	57                   	push   edi
c00127a3:	56                   	push   esi
c00127a4:	53                   	push   ebx
c00127a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127bb:	77 41                	ja     c00127fe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127bd:	99                   	cdq    
c00127be:	01 c8                	add    eax,ecx
c00127c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127c6:	11 da                	adc    edx,ebx
c00127c8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127ce:	19 d7                	sbb    edi,edx
c00127d0:	72 33                	jb     c0012805 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00127d2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127d8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127e2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127e6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127f6:	5b                   	pop    ebx
c00127f7:	5e                   	pop    esi
c00127f8:	5f                   	pop    edi
c00127f9:	e9 9a 09 00 00       	jmp    c0013198 <VCache::read(unsigned long long, int, void*)>
c00127fe:	b8 05 00 00 00       	mov    eax,0x5
c0012803:	eb 05                	jmp    c001280a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012805:	b8 07 00 00 00       	mov    eax,0x7
c001280a:	5b                   	pop    ebx
c001280b:	5e                   	pop    esi
c001280c:	5f                   	pop    edi
c001280d:	c3                   	ret    

c001280e <LogicalDisk::write(unsigned long long, int, void*)>:
c001280e:	57                   	push   edi
c001280f:	56                   	push   esi
c0012810:	53                   	push   ebx
c0012811:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012815:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012819:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001281d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012821:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012827:	77 41                	ja     c001286a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012829:	99                   	cdq    
c001282a:	01 c8                	add    eax,ecx
c001282c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012832:	11 da                	adc    edx,ebx
c0012834:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001283a:	19 d7                	sbb    edi,edx
c001283c:	72 33                	jb     c0012871 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001283e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012844:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001284a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001284e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012852:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012858:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001285e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012862:	5b                   	pop    ebx
c0012863:	5e                   	pop    esi
c0012864:	5f                   	pop    edi
c0012865:	e9 4a 08 00 00       	jmp    c00130b4 <VCache::write(unsigned long long, int, void*)>
c001286a:	b8 05 00 00 00       	mov    eax,0x5
c001286f:	eb 05                	jmp    c0012876 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012871:	b8 07 00 00 00       	mov    eax,0x7
c0012876:	5b                   	pop    ebx
c0012877:	5e                   	pop    esi
c0012878:	5f                   	pop    edi
c0012879:	c3                   	ret    

c001287a <Mouse::Mouse(char const*)>:
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012881:	83 ec 08             	sub    esp,0x8
c0012884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012888:	50                   	push   eax
c0012889:	e8 be de ff ff       	call   c001074c <Device::Device(char const*)>
c001288e:	83 c4 10             	add    esp,0x10
c0012891:	ba 38 20 02 c0       	mov    edx,0xc0022038
c0012896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289a:	89 10                	mov    DWORD PTR [eax],edx
c001289c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00128aa:	90                   	nop
c00128ab:	83 c4 0c             	add    esp,0xc
c00128ae:	c3                   	ret    
c00128af:	90                   	nop

c00128b0 <Mouse::~Mouse()>:
c00128b0:	83 ec 0c             	sub    esp,0xc
c00128b3:	ba 38 20 02 c0       	mov    edx,0xc0022038
c00128b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128bc:	89 10                	mov    DWORD PTR [eax],edx
c00128be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	50                   	push   eax
c00128c6:	e8 37 db ff ff       	call   c0010402 <Device::~Device()>
c00128cb:	83 c4 10             	add    esp,0x10
c00128ce:	90                   	nop
c00128cf:	83 c4 0c             	add    esp,0xc
c00128d2:	c3                   	ret    
c00128d3:	90                   	nop

c00128d4 <Mouse::~Mouse()>:
c00128d4:	83 ec 0c             	sub    esp,0xc
c00128d7:	83 ec 0c             	sub    esp,0xc
c00128da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128de:	e8 cd ff ff ff       	call   c00128b0 <Mouse::~Mouse()>
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	83 ec 08             	sub    esp,0x8
c00128e9:	68 58 01 00 00       	push   0x158
c00128ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128f2:	e8 2a c7 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00128f7:	83 c4 10             	add    esp,0x10
c00128fa:	83 c4 0c             	add    esp,0xc
c00128fd:	c3                   	ret    

c00128fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00128fe:	55                   	push   ebp
c00128ff:	57                   	push   edi
c0012900:	56                   	push   esi
c0012901:	53                   	push   ebx
c0012902:	81 ec 28 01 00 00    	sub    esp,0x128
c0012908:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001290f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012916:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001291d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012924:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012928:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001292c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012933:	e8 06 df ff ff       	call   c001083e <Device::getName()>
c0012938:	5a                   	pop    edx
c0012939:	59                   	pop    ecx
c001293a:	50                   	push   eax
c001293b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001293f:	55                   	push   ebp
c0012940:	e8 14 de fe ff       	call   c0000759 <strcpy>
c0012945:	5b                   	pop    ebx
c0012946:	58                   	pop    eax
c0012947:	68 5c 20 02 c0       	push   0xc002205c
c001294c:	55                   	push   ebp
c001294d:	e8 be de fe ff       	call   c0000810 <strcat>
c0012952:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012959:	e8 b4 c6 ff ff       	call   c000f012 <operator new(unsigned long)>
c001295e:	83 c4 0c             	add    esp,0xc
c0012961:	89 c3                	mov    ebx,eax
c0012963:	57                   	push   edi
c0012964:	56                   	push   esi
c0012965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012969:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001296d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012974:	55                   	push   ebp
c0012975:	50                   	push   eax
c0012976:	e8 e3 fb ff ff       	call   c001255e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001297b:	83 c4 14             	add    esp,0x14
c001297e:	53                   	push   ebx
c001297f:	e8 90 fc ff ff       	call   c0012614 <LogicalDisk::assignDriveLetter()>
c0012984:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012987:	e8 3e fd ff ff       	call   c00126ca <LogicalDisk::mount()>
c001298c:	58                   	pop    eax
c001298d:	5a                   	pop    edx
c001298e:	53                   	push   ebx
c001298f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012996:	e8 c1 db ff ff       	call   c001055c <Device::addChild(Device*)>
c001299b:	81 c4 2c 01 00 00    	add    esp,0x12c
c00129a1:	5b                   	pop    ebx
c00129a2:	5e                   	pop    esi
c00129a3:	5f                   	pop    edi
c00129a4:	5d                   	pop    ebp
c00129a5:	c3                   	ret    

c00129a6 <createPartitionsForDisk(PhysicalDisk*)>:
c00129a6:	55                   	push   ebp
c00129a7:	57                   	push   edi
c00129a8:	56                   	push   esi
c00129a9:	53                   	push   ebx
c00129aa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129b0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129bd:	3d 00 02 00 00       	cmp    eax,0x200
c00129c2:	74 27                	je     c00129eb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129c4:	83 ec 10             	sub    esp,0x10
c00129c7:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129cd:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00129d3:	99                   	cdq    
c00129d4:	52                   	push   edx
c00129d5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00129d9:	50                   	push   eax
c00129da:	89 fd                	mov    ebp,edi
c00129dc:	c1 e6 0a             	shl    esi,0xa
c00129df:	55                   	push   ebp
c00129e0:	56                   	push   esi
c00129e1:	e8 16 ca 00 00       	call   c001f3fc <__udivdi3>
c00129e6:	e9 b1 00 00 00       	jmp    c0012a9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129eb:	83 ec 0c             	sub    esp,0xc
c00129ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129f0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00129f4:	56                   	push   esi
c00129f5:	6a 01                	push   0x1
c00129f7:	6a 00                	push   0x0
c00129f9:	6a 00                	push   0x0
c00129fb:	53                   	push   ebx
c00129fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129ff:	83 c4 20             	add    esp,0x20
c0012a02:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012a0a:	75 0a                	jne    c0012a16 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012a0c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a14:	74 2c                	je     c0012a42 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a1c:	83 ec 10             	sub    esp,0x10
c0012a1f:	89 f7                	mov    edi,esi
c0012a21:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a27:	c1 ff 1f             	sar    edi,0x1f
c0012a2a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a30:	57                   	push   edi
c0012a31:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a35:	c1 e0 0a             	shl    eax,0xa
c0012a38:	56                   	push   esi
c0012a39:	52                   	push   edx
c0012a3a:	50                   	push   eax
c0012a3b:	e8 bc c9 00 00       	call   c001f3fc <__udivdi3>
c0012a40:	eb 5a                	jmp    c0012a9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a42:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a49:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a50:	83 e0 7f             	and    eax,0x7f
c0012a53:	83 e1 7f             	and    ecx,0x7f
c0012a56:	01 c1                	add    ecx,eax
c0012a58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a5f:	83 e0 7f             	and    eax,0x7f
c0012a62:	01 c1                	add    ecx,eax
c0012a64:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a6b:	83 e0 7f             	and    eax,0x7f
c0012a6e:	00 c1                	add    cl,al
c0012a70:	74 41                	je     c0012ab3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a72:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a78:	83 ec 10             	sub    esp,0x10
c0012a7b:	89 f7                	mov    edi,esi
c0012a7d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a83:	c1 ff 1f             	sar    edi,0x1f
c0012a86:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a8c:	57                   	push   edi
c0012a8d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a91:	c1 e0 0a             	shl    eax,0xa
c0012a94:	56                   	push   esi
c0012a95:	52                   	push   edx
c0012a96:	50                   	push   eax
c0012a97:	e8 60 c9 00 00       	call   c001f3fc <__udivdi3>
c0012a9c:	83 c4 14             	add    esp,0x14
c0012a9f:	52                   	push   edx
c0012aa0:	50                   	push   eax
c0012aa1:	6a 00                	push   0x0
c0012aa3:	6a 00                	push   0x0
c0012aa5:	53                   	push   ebx
c0012aa6:	e8 53 fe ff ff       	call   c00128fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012aab:	83 c4 20             	add    esp,0x20
c0012aae:	e9 79 01 00 00       	jmp    c0012c2c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012ab3:	89 f0                	mov    eax,esi
c0012ab5:	31 f6                	xor    esi,esi
c0012ab7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012abe:	75 02                	jne    c0012ac2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012ac0:	89 f1                	mov    ecx,esi
c0012ac2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012ac9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012ad0:	c1 e2 08             	shl    edx,0x8
c0012ad3:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012adb:	c1 e7 10             	shl    edi,0x10
c0012ade:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012ae6:	09 fa                	or     edx,edi
c0012ae8:	83 c0 10             	add    eax,0x10
c0012aeb:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012af2:	09 fa                	or     edx,edi
c0012af4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012afb:	c1 e7 18             	shl    edi,0x18
c0012afe:	09 fa                	or     edx,edi
c0012b00:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012b04:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012b0b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b12:	c1 e7 10             	shl    edi,0x10
c0012b15:	c1 e2 08             	shl    edx,0x8
c0012b18:	09 fa                	or     edx,edi
c0012b1a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b21:	09 fa                	or     edx,edi
c0012b23:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b2a:	c1 e7 18             	shl    edi,0x18
c0012b2d:	09 fa                	or     edx,edi
c0012b2f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b33:	46                   	inc    esi
c0012b34:	83 fe 04             	cmp    esi,0x4
c0012b37:	0f 85 7a ff ff ff    	jne    c0012ab7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b41:	83 f0 01             	xor    eax,0x1
c0012b44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b48:	75 57                	jne    c0012ba1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b4e:	83 f0 01             	xor    eax,0x1
c0012b51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b55:	75 4a                	jne    c0012ba1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b57:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b5d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b61:	89 f7                	mov    edi,esi
c0012b63:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b6b:	c1 ff 1f             	sar    edi,0x1f
c0012b6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b82:	57                   	push   edi
c0012b83:	56                   	push   esi
c0012b84:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b88:	c1 e0 0a             	shl    eax,0xa
c0012b8b:	52                   	push   edx
c0012b8c:	50                   	push   eax
c0012b8d:	e8 6a c8 00 00       	call   c001f3fc <__udivdi3>
c0012b92:	83 c4 10             	add    esp,0x10
c0012b95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b9d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012ba1:	84 c9                	test   cl,cl
c0012ba3:	74 53                	je     c0012bf8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012ba5:	0f b6 c9             	movzx  ecx,cl
c0012ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012bb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bb8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bbc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bd0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012bd4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012bd8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012bdc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012be0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012be4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012be8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012bec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bf0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012bf4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012bf8:	31 ed                	xor    ebp,ebp
c0012bfa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012bfe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012c02:	89 f8                	mov    eax,edi
c0012c04:	09 f0                	or     eax,esi
c0012c06:	74 1e                	je     c0012c26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c08:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c0c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012c10:	89 d1                	mov    ecx,edx
c0012c12:	09 c1                	or     ecx,eax
c0012c14:	74 10                	je     c0012c26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c16:	83 ec 0c             	sub    esp,0xc
c0012c19:	57                   	push   edi
c0012c1a:	56                   	push   esi
c0012c1b:	52                   	push   edx
c0012c1c:	50                   	push   eax
c0012c1d:	53                   	push   ebx
c0012c1e:	e8 db fc ff ff       	call   c00128fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c23:	83 c4 20             	add    esp,0x20
c0012c26:	45                   	inc    ebp
c0012c27:	83 fd 04             	cmp    ebp,0x4
c0012c2a:	75 ce                	jne    c0012bfa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c2c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c32:	5b                   	pop    ebx
c0012c33:	5e                   	pop    esi
c0012c34:	5f                   	pop    edi
c0012c35:	5d                   	pop    ebp
c0012c36:	c3                   	ret    
c0012c37:	90                   	nop

c0012c38 <Timer::Timer(char const*)>:
c0012c38:	83 ec 0c             	sub    esp,0xc
c0012c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3f:	83 ec 08             	sub    esp,0x8
c0012c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c46:	50                   	push   eax
c0012c47:	e8 00 db ff ff       	call   c001074c <Device::Device(char const*)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0012c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c58:	89 10                	mov    DWORD PTR [eax],edx
c0012c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c68:	90                   	nop
c0012c69:	83 c4 0c             	add    esp,0xc
c0012c6c:	c3                   	ret    
c0012c6d:	90                   	nop

c0012c6e <Timer::~Timer()>:
c0012c6e:	83 ec 0c             	sub    esp,0xc
c0012c71:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0012c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7a:	89 10                	mov    DWORD PTR [eax],edx
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	50                   	push   eax
c0012c84:	e8 79 d7 ff ff       	call   c0010402 <Device::~Device()>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	90                   	nop
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <Timer::~Timer()>:
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	83 ec 0c             	sub    esp,0xc
c0012c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c9c:	e8 cd ff ff ff       	call   c0012c6e <Timer::~Timer()>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	83 ec 08             	sub    esp,0x8
c0012ca7:	68 5c 01 00 00       	push   0x15c
c0012cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb0:	e8 6c c3 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	83 c4 0c             	add    esp,0xc
c0012cbb:	c3                   	ret    

c0012cbc <Timer::read()>:
c0012cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cc6:	c3                   	ret    

c0012cc7 <timerHandler(unsigned long long)>:
c0012cc7:	55                   	push   ebp
c0012cc8:	57                   	push   edi
c0012cc9:	56                   	push   esi
c0012cca:	53                   	push   ebx
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cd2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012cd6:	01 35 10 4c 02 c0    	add    DWORD PTR ds:0xc0024c10,esi
c0012cdc:	11 3d 14 4c 02 c0    	adc    DWORD PTR ds:0xc0024c14,edi
c0012ce2:	80 3d ad 45 02 c0 00 	cmp    BYTE PTR ds:0xc00245ad,0x0
c0012ce9:	0f 84 07 01 00 00    	je     c0012df6 <timerHandler(unsigned long long)+0x12f>
c0012cef:	e8 96 5c 00 00       	call   c001898a <lockStuff()>
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	68 dc 59 02 c0       	push   0xc00259dc
c0012cfc:	e8 cf cd 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d01:	c7 04 24 dc 59 02 c0 	mov    DWORD PTR [esp],0xc00259dc
c0012d08:	89 c3                	mov    ebx,eax
c0012d0a:	e8 c9 cd 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	84 c0                	test   al,al
c0012d14:	74 60                	je     c0012d76 <timerHandler(unsigned long long)+0xaf>
c0012d16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d1c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d1f:	85 c0                	test   eax,eax
c0012d21:	0f 85 91 00 00 00    	jne    c0012db8 <timerHandler(unsigned long long)+0xf1>
c0012d27:	e9 be 00 00 00       	jmp    c0012dea <timerHandler(unsigned long long)+0x123>
c0012d2c:	83 ec 0c             	sub    esp,0xc
c0012d2f:	55                   	push   ebp
c0012d30:	e8 52 62 00 00       	call   c0018f87 <unblockTask(ThreadControlBlock*)>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	39 eb                	cmp    ebx,ebp
c0012d3a:	75 12                	jne    c0012d4e <timerHandler(unsigned long long)+0x87>
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	68 dc 59 02 c0       	push   0xc00259dc
c0012d44:	e8 87 cd 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d49:	89 c3                	mov    ebx,eax
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	68 dc 59 02 c0       	push   0xc00259dc
c0012d56:	e8 7d cd 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	84 c0                	test   al,al
c0012d60:	75 b4                	jne    c0012d16 <timerHandler(unsigned long long)+0x4f>
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	68 dc 59 02 c0       	push   0xc00259dc
c0012d6a:	e8 61 cd 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	39 d8                	cmp    eax,ebx
c0012d74:	74 a0                	je     c0012d16 <timerHandler(unsigned long long)+0x4f>
c0012d76:	83 ec 0c             	sub    esp,0xc
c0012d79:	68 dc 59 02 c0       	push   0xc00259dc
c0012d7e:	e8 4d cd 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d83:	89 c5                	mov    ebp,eax
c0012d85:	c7 04 24 dc 59 02 c0 	mov    DWORD PTR [esp],0xc00259dc
c0012d8c:	e8 63 cd 00 00       	call   c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d97:	a1 14 4c 02 c0       	mov    eax,ds:0xc0024c14
c0012d9c:	39 15 10 4c 02 c0    	cmp    DWORD PTR ds:0xc0024c10,edx
c0012da2:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012da5:	19 c8                	sbb    eax,ecx
c0012da7:	73 83                	jae    c0012d2c <timerHandler(unsigned long long)+0x65>
c0012da9:	50                   	push   eax
c0012daa:	50                   	push   eax
c0012dab:	55                   	push   ebp
c0012dac:	68 dc 59 02 c0       	push   0xc00259dc
c0012db1:	e8 ec cd 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012db6:	eb 93                	jmp    c0012d4b <timerHandler(unsigned long long)+0x84>
c0012db8:	80 3d ac 45 02 c0 00 	cmp    BYTE PTR ds:0xc00245ac,0x0
c0012dbf:	74 29                	je     c0012dea <timerHandler(unsigned long long)+0x123>
c0012dc1:	39 c6                	cmp    esi,eax
c0012dc3:	bb 00 00 00 00       	mov    ebx,0x0
c0012dc8:	19 df                	sbb    edi,ebx
c0012dca:	72 19                	jb     c0012de5 <timerHandler(unsigned long long)+0x11e>
c0012dcc:	e8 92 5b 00 00       	call   c0018963 <lockScheduler()>
c0012dd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012dd9:	e8 ce 5e 00 00       	call   c0018cac <schedule()>
c0012dde:	e8 82 5b 00 00       	call   c0018965 <unlockScheduler()>
c0012de3:	eb 05                	jmp    c0012dea <timerHandler(unsigned long long)+0x123>
c0012de5:	29 f0                	sub    eax,esi
c0012de7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012dea:	83 c4 0c             	add    esp,0xc
c0012ded:	5b                   	pop    ebx
c0012dee:	5e                   	pop    esi
c0012def:	5f                   	pop    edi
c0012df0:	5d                   	pop    ebp
c0012df1:	e9 3b 5f 00 00       	jmp    c0018d31 <unlockStuff()>
c0012df6:	83 c4 0c             	add    esp,0xc
c0012df9:	5b                   	pop    ebx
c0012dfa:	5e                   	pop    esi
c0012dfb:	5f                   	pop    edi
c0012dfc:	5d                   	pop    ebp
c0012dfd:	c3                   	ret    

c0012dfe <setupTimer(int)>:
c0012dfe:	57                   	push   edi
c0012dff:	56                   	push   esi
c0012e00:	53                   	push   ebx
c0012e01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e05:	e8 fd 19 00 00       	call   c0014807 <getCPUNumber()>
c0012e0a:	85 c0                	test   eax,eax
c0012e0c:	74 32                	je     c0012e40 <setupTimer(int)+0x42>
c0012e0e:	83 ec 0c             	sub    esp,0xc
c0012e11:	68 60 01 00 00       	push   0x160
c0012e16:	e8 f7 c1 ff ff       	call   c000f012 <operator new(unsigned long)>
c0012e1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e1e:	89 c3                	mov    ebx,eax
c0012e20:	e8 63 c0 00 00       	call   c001ee88 <APICTimer::APICTimer()>
c0012e25:	6a 00                	push   0x0
c0012e27:	6a 00                	push   0x0
c0012e29:	56                   	push   esi
c0012e2a:	53                   	push   ebx
c0012e2b:	e8 52 bf 00 00       	call   c001ed82 <APICTimer::open(int, int, void*)>
c0012e30:	83 c4 20             	add    esp,0x20
c0012e33:	e8 d2 19 00 00       	call   c001480a <thisCPU()>
c0012e38:	56                   	push   esi
c0012e39:	56                   	push   esi
c0012e3a:	53                   	push   ebx
c0012e3b:	e9 96 00 00 00       	jmp    c0012ed6 <setupTimer(int)+0xd8>
c0012e40:	e8 c5 19 00 00       	call   c001480a <thisCPU()>
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e4e:	e8 eb d9 ff ff       	call   c001083e <Device::getName()>
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e59:	0f 85 87 00 00 00    	jne    c0012ee6 <setupTimer(int)+0xe8>
c0012e5f:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0012e64:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e6b:	74 79                	je     c0012ee6 <setupTimer(int)+0xe8>
c0012e6d:	83 ec 0c             	sub    esp,0xc
c0012e70:	68 5c 01 00 00       	push   0x15c
c0012e75:	e8 98 c1 ff ff       	call   c000f012 <operator new(unsigned long)>
c0012e7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e7d:	89 c3                	mov    ebx,eax
c0012e7f:	e8 60 c1 00 00       	call   c001efe4 <PIT::PIT()>
c0012e84:	59                   	pop    ecx
c0012e85:	5f                   	pop    edi
c0012e86:	53                   	push   ebx
c0012e87:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c0012e8d:	e8 ca d6 ff ff       	call   c001055c <Device::addChild(Device*)>
c0012e92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e94:	6a 00                	push   0x0
c0012e96:	6a 00                	push   0x0
c0012e98:	56                   	push   esi
c0012e99:	53                   	push   ebx
c0012e9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e9d:	83 c4 14             	add    esp,0x14
c0012ea0:	68 60 01 00 00       	push   0x160
c0012ea5:	e8 68 c1 ff ff       	call   c000f012 <operator new(unsigned long)>
c0012eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ead:	89 c7                	mov    edi,eax
c0012eaf:	e8 d4 bf 00 00       	call   c001ee88 <APICTimer::APICTimer()>
c0012eb4:	6a 00                	push   0x0
c0012eb6:	6a 00                	push   0x0
c0012eb8:	56                   	push   esi
c0012eb9:	57                   	push   edi
c0012eba:	e8 c3 be 00 00       	call   c001ed82 <APICTimer::open(int, int, void*)>
c0012ebf:	83 c4 20             	add    esp,0x20
c0012ec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ec4:	6a 00                	push   0x0
c0012ec6:	6a 00                	push   0x0
c0012ec8:	6a 00                	push   0x0
c0012eca:	53                   	push   ebx
c0012ecb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ece:	e8 37 19 00 00       	call   c001480a <thisCPU()>
c0012ed3:	5a                   	pop    edx
c0012ed4:	59                   	pop    ecx
c0012ed5:	57                   	push   edi
c0012ed6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012edc:	e8 7b d6 ff ff       	call   c001055c <Device::addChild(Device*)>
c0012ee1:	83 c4 10             	add    esp,0x10
c0012ee4:	eb 33                	jmp    c0012f19 <setupTimer(int)+0x11b>
c0012ee6:	83 ec 0c             	sub    esp,0xc
c0012ee9:	68 5c 01 00 00       	push   0x15c
c0012eee:	e8 1f c1 ff ff       	call   c000f012 <operator new(unsigned long)>
c0012ef3:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ef6:	89 c3                	mov    ebx,eax
c0012ef8:	e8 e7 c0 00 00       	call   c001efe4 <PIT::PIT()>
c0012efd:	58                   	pop    eax
c0012efe:	5a                   	pop    edx
c0012eff:	53                   	push   ebx
c0012f00:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c0012f06:	e8 51 d6 ff ff       	call   c001055c <Device::addChild(Device*)>
c0012f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f0d:	6a 00                	push   0x0
c0012f0f:	6a 00                	push   0x0
c0012f11:	56                   	push   esi
c0012f12:	53                   	push   ebx
c0012f13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f16:	83 c4 20             	add    esp,0x20
c0012f19:	89 d8                	mov    eax,ebx
c0012f1b:	5b                   	pop    ebx
c0012f1c:	5e                   	pop    esi
c0012f1d:	5f                   	pop    edi
c0012f1e:	c3                   	ret    
c0012f1f:	90                   	nop

c0012f20 <VCache::VCache(PhysicalDisk*)>:
c0012f20:	53                   	push   ebx
c0012f21:	83 ec 08             	sub    esp,0x8
c0012f24:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0012f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2d:	89 10                	mov    DWORD PTR [eax],edx
c0012f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f33:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f49:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f50:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f62:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f78:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f7c:	83 ec 0c             	sub    esp,0xc
c0012f7f:	6a 10                	push   0x10
c0012f81:	e8 8c c0 ff ff       	call   c000f012 <operator new(unsigned long)>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	89 c3                	mov    ebx,eax
c0012f8b:	83 ec 0c             	sub    esp,0xc
c0012f8e:	53                   	push   ebx
c0012f8f:	e8 f2 5a 00 00       	call   c0018a86 <Mutex::Mutex()>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fa6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fad:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fb8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fc9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fcf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fd9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012fdc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fe3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012fe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012feb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ff1:	c1 e0 06             	shl    eax,0x6
c0012ff4:	83 ec 0c             	sub    esp,0xc
c0012ff7:	50                   	push   eax
c0012ff8:	e8 dc 8f ff ff       	call   c000bfd9 <malloc>
c0012ffd:	83 c4 10             	add    esp,0x10
c0013000:	89 c2                	mov    edx,eax
c0013002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013006:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0013009:	90                   	nop
c001300a:	83 c4 08             	add    esp,0x8
c001300d:	5b                   	pop    ebx
c001300e:	c3                   	ret    
c001300f:	90                   	nop

c0013010 <VCache::writeWriteBuffer()>:
c0013010:	53                   	push   ebx
c0013011:	83 ec 14             	sub    esp,0x14
c0013014:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013018:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001301b:	8b 10                	mov    edx,DWORD PTR [eax]
c001301d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013020:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013023:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013026:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013029:	50                   	push   eax
c001302a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001302d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013034:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001303b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001303f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013046:	83 c4 28             	add    esp,0x28
c0013049:	5b                   	pop    ebx
c001304a:	c3                   	ret    
c001304b:	90                   	nop

c001304c <VCache::~VCache()>:
c001304c:	83 ec 0c             	sub    esp,0xc
c001304f:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	89 10                	mov    DWORD PTR [eax],edx
c001305a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013061:	84 c0                	test   al,al
c0013063:	74 0f                	je     c0013074 <VCache::~VCache()+0x28>
c0013065:	83 ec 0c             	sub    esp,0xc
c0013068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001306c:	e8 9f ff ff ff       	call   c0013010 <VCache::writeWriteBuffer()>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013078:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001307b:	83 ec 0c             	sub    esp,0xc
c001307e:	50                   	push   eax
c001307f:	e8 65 8f ff ff       	call   c000bfe9 <free>
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	90                   	nop
c0013088:	83 c4 0c             	add    esp,0xc
c001308b:	c3                   	ret    

c001308c <VCache::~VCache()>:
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	83 ec 0c             	sub    esp,0xc
c0013092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013096:	e8 b1 ff ff ff       	call   c001304c <VCache::~VCache()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	83 ec 08             	sub    esp,0x8
c00130a1:	6a 30                	push   0x30
c00130a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a7:	e8 75 bf ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00130ac:	83 c4 10             	add    esp,0x10
c00130af:	83 c4 0c             	add    esp,0xc
c00130b2:	c3                   	ret    
c00130b3:	90                   	nop

c00130b4 <VCache::write(unsigned long long, int, void*)>:
c00130b4:	55                   	push   ebp
c00130b5:	57                   	push   edi
c00130b6:	56                   	push   esi
c00130b7:	53                   	push   ebx
c00130b8:	83 ec 28             	sub    esp,0x28
c00130bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130ce:	e8 21 5e 00 00       	call   c0018ef4 <Semaphore::acquire()>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00130da:	74 66                	je     c0013142 <VCache::write(unsigned long long, int, void*)+0x8e>
c00130dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130df:	99                   	cdq    
c00130e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130e4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130e7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130ea:	89 c1                	mov    ecx,eax
c00130ec:	31 f1                	xor    ecx,esi
c00130ee:	89 d0                	mov    eax,edx
c00130f0:	31 f8                	xor    eax,edi
c00130f2:	89 ca                	mov    edx,ecx
c00130f4:	09 c2                	or     edx,eax
c00130f6:	75 3e                	jne    c0013136 <VCache::write(unsigned long long, int, void*)+0x82>
c00130f8:	83 fd 01             	cmp    ebp,0x1
c00130fb:	75 39                	jne    c0013136 <VCache::write(unsigned long long, int, void*)+0x82>
c00130fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013100:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013106:	51                   	push   ecx
c0013107:	50                   	push   eax
c0013108:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001310c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013110:	0f af c8             	imul   ecx,eax
c0013113:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013116:	51                   	push   ecx
c0013117:	e8 68 d5 fe ff       	call   c0000684 <memcpy>
c001311c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	40                   	inc    eax
c0013123:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013126:	83 f8 40             	cmp    eax,0x40
c0013129:	75 57                	jne    c0013182 <VCache::write(unsigned long long, int, void*)+0xce>
c001312b:	83 ec 0c             	sub    esp,0xc
c001312e:	53                   	push   ebx
c001312f:	e8 dc fe ff ff       	call   c0013010 <VCache::writeWriteBuffer()>
c0013134:	eb 34                	jmp    c001316a <VCache::write(unsigned long long, int, void*)+0xb6>
c0013136:	83 ec 0c             	sub    esp,0xc
c0013139:	53                   	push   ebx
c001313a:	e8 d1 fe ff ff       	call   c0013010 <VCache::writeWriteBuffer()>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013145:	83 fd 3f             	cmp    ebp,0x3f
c0013148:	7f 25                	jg     c001316f <VCache::write(unsigned long long, int, void*)+0xbb>
c001314a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001314d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013150:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013153:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013157:	52                   	push   edx
c0013158:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001315e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013162:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013165:	e8 1a d5 fe ff       	call   c0000684 <memcpy>
c001316a:	83 c4 10             	add    esp,0x10
c001316d:	eb 13                	jmp    c0013182 <VCache::write(unsigned long long, int, void*)+0xce>
c001316f:	83 ec 0c             	sub    esp,0xc
c0013172:	8b 10                	mov    edx,DWORD PTR [eax]
c0013174:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013178:	55                   	push   ebp
c0013179:	57                   	push   edi
c001317a:	56                   	push   esi
c001317b:	50                   	push   eax
c001317c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001317f:	83 c4 20             	add    esp,0x20
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013188:	e8 f3 62 00 00       	call   c0019480 <Semaphore::release()>
c001318d:	83 c4 2c             	add    esp,0x2c
c0013190:	5b                   	pop    ebx
c0013191:	31 c0                	xor    eax,eax
c0013193:	5e                   	pop    esi
c0013194:	5f                   	pop    edi
c0013195:	5d                   	pop    ebp
c0013196:	c3                   	ret    
c0013197:	90                   	nop

c0013198 <VCache::read(unsigned long long, int, void*)>:
c0013198:	57                   	push   edi
c0013199:	56                   	push   esi
c001319a:	53                   	push   ebx
c001319b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001319f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a7:	83 ec 0c             	sub    esp,0xc
c00131aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131ad:	e8 42 5d 00 00       	call   c0018ef4 <Semaphore::acquire()>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131b9:	74 0c                	je     c00131c7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131bb:	83 ec 0c             	sub    esp,0xc
c00131be:	53                   	push   ebx
c00131bf:	e8 4c fe ff ff       	call   c0013010 <VCache::writeWriteBuffer()>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00131cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131d7:	57                   	push   edi
c00131d8:	56                   	push   esi
c00131d9:	50                   	push   eax
c00131da:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131dd:	83 c4 14             	add    esp,0x14
c00131e0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131e3:	e8 98 62 00 00       	call   c0019480 <Semaphore::release()>
c00131e8:	83 c4 10             	add    esp,0x10
c00131eb:	5b                   	pop    ebx
c00131ec:	31 c0                	xor    eax,eax
c00131ee:	5e                   	pop    esi
c00131ef:	5f                   	pop    edi
c00131f0:	c3                   	ret    
c00131f1:	90                   	nop

c00131f2 <Video::putrect(int, int, int, int, unsigned int)>:
c00131f2:	55                   	push   ebp
c00131f3:	57                   	push   edi
c00131f4:	56                   	push   esi
c00131f5:	53                   	push   ebx
c00131f6:	83 ec 1c             	sub    esp,0x1c
c00131f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00131fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013201:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013205:	01 e8                	add    eax,ebp
c0013207:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001320b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001320f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013213:	01 df                	add    edi,ebx
c0013215:	39 fb                	cmp    ebx,edi
c0013217:	7d 1b                	jge    c0013234 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0013219:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001321d:	7d 12                	jge    c0013231 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001321f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013221:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013225:	53                   	push   ebx
c0013226:	55                   	push   ebp
c0013227:	45                   	inc    ebp
c0013228:	56                   	push   esi
c0013229:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001322c:	83 c4 10             	add    esp,0x10
c001322f:	eb e8                	jmp    c0013219 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013231:	43                   	inc    ebx
c0013232:	eb e1                	jmp    c0013215 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013234:	83 c4 1c             	add    esp,0x1c
c0013237:	5b                   	pop    ebx
c0013238:	5e                   	pop    esi
c0013239:	5f                   	pop    edi
c001323a:	5d                   	pop    ebp
c001323b:	c3                   	ret    

c001323c <Video::blit(unsigned int*, int, int, int, int)>:
c001323c:	55                   	push   ebp
c001323d:	57                   	push   edi
c001323e:	56                   	push   esi
c001323f:	53                   	push   ebx
c0013240:	83 ec 1c             	sub    esp,0x1c
c0013243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001324b:	85 c0                	test   eax,eax
c001324d:	79 02                	jns    c0013251 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001324f:	31 c0                	xor    eax,eax
c0013251:	c1 e0 02             	shl    eax,0x2
c0013254:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001325c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013260:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013264:	39 d8                	cmp    eax,ebx
c0013266:	7e 49                	jle    c00132b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013268:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001326e:	7c 41                	jl     c00132b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013270:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013274:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013278:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001327c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013280:	39 f9                	cmp    ecx,edi
c0013282:	7e 22                	jle    c00132a6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013284:	83 c5 04             	add    ebp,0x4
c0013287:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001328d:	7c 14                	jl     c00132a3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001328f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013291:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013294:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013298:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001329c:	56                   	push   esi
c001329d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	47                   	inc    edi
c00132a4:	eb d2                	jmp    c0013278 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00132a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132aa:	43                   	inc    ebx
c00132ab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132af:	eb ab                	jmp    c001325c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132b1:	83 c4 1c             	add    esp,0x1c
c00132b4:	5b                   	pop    ebx
c00132b5:	5e                   	pop    esi
c00132b6:	5f                   	pop    edi
c00132b7:	5d                   	pop    ebp
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop

c00132ba <Video::clearScreen(unsigned int)>:
c00132ba:	57                   	push   edi
c00132bb:	56                   	push   esi
c00132bc:	53                   	push   ebx
c00132bd:	31 db                	xor    ebx,ebx
c00132bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132c3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132c9:	7e 1f                	jle    c00132ea <Video::clearScreen(unsigned int)+0x30>
c00132cb:	31 ff                	xor    edi,edi
c00132cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132d3:	7e 12                	jle    c00132e7 <Video::clearScreen(unsigned int)+0x2d>
c00132d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00132d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132db:	53                   	push   ebx
c00132dc:	57                   	push   edi
c00132dd:	47                   	inc    edi
c00132de:	56                   	push   esi
c00132df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	eb e6                	jmp    c00132cd <Video::clearScreen(unsigned int)+0x13>
c00132e7:	43                   	inc    ebx
c00132e8:	eb d9                	jmp    c00132c3 <Video::clearScreen(unsigned int)+0x9>
c00132ea:	5b                   	pop    ebx
c00132eb:	5e                   	pop    esi
c00132ec:	5f                   	pop    edi
c00132ed:	c3                   	ret    

c00132ee <Video::putpixel(int, int, unsigned int)>:
c00132ee:	c7 44 24 04 a8 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220a8
c00132f6:	e9 4c be ff ff       	jmp    c000f147 <Dbg::kprintf(char const*, ...)>
c00132fb:	90                   	nop

c00132fc <Video::Video(char const*)>:
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013303:	83 ec 08             	sub    esp,0x8
c0013306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001330a:	50                   	push   eax
c001330b:	e8 3c d4 ff ff       	call   c001074c <Device::Device(char const*)>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c0013318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331c:	89 10                	mov    DWORD PTR [eax],edx
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001332c:	90                   	nop
c001332d:	83 c4 0c             	add    esp,0xc
c0013330:	c3                   	ret    
c0013331:	90                   	nop

c0013332 <Video::~Video()>:
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	89 10                	mov    DWORD PTR [eax],edx
c0013340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	50                   	push   eax
c0013348:	e8 b5 d0 ff ff       	call   c0010402 <Device::~Device()>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	90                   	nop
c0013351:	83 c4 0c             	add    esp,0xc
c0013354:	c3                   	ret    
c0013355:	90                   	nop

c0013356 <Video::~Video()>:
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	83 ec 0c             	sub    esp,0xc
c001335c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013360:	e8 cd ff ff ff       	call   c0013332 <Video::~Video()>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	83 ec 08             	sub    esp,0x8
c001336b:	68 64 01 00 00       	push   0x164
c0013370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013374:	e8 a8 bc ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	83 c4 0c             	add    esp,0xc
c001337f:	c3                   	ret    

c0013380 <Video::isMonochrome()>:
c0013380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013384:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001338a:	c3                   	ret    
c001338b:	90                   	nop

c001338c <Video::getWidth()>:
c001338c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013390:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013396:	c3                   	ret    
c0013397:	90                   	nop

c0013398 <Video::getHeight()>:
c0013398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001339c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00133a2:	c3                   	ret    
c00133a3:	90                   	nop

c00133a4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00133a4:	55                   	push   ebp
c00133a5:	57                   	push   edi
c00133a6:	56                   	push   esi
c00133a7:	53                   	push   ebx
c00133a8:	83 ec 2c             	sub    esp,0x2c
c00133ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133b3:	83 f8 01             	cmp    eax,0x1
c00133b6:	19 c9                	sbb    ecx,ecx
c00133b8:	31 db                	xor    ebx,ebx
c00133ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133be:	89 cd                	mov    ebp,ecx
c00133c0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133c8:	f7 d5                	not    ebp
c00133ca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00133d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00133d4:	01 d8                	add    eax,ebx
c00133d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133da:	56                   	push   esi
c00133db:	e8 b8 ff ff ff       	call   c0013398 <Video::getHeight()>
c00133e0:	59                   	pop    ecx
c00133e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133e5:	7e 70                	jle    c0013457 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133eb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00133ef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00133f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133fa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0013401:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013405:	89 f8                	mov    eax,edi
c0013407:	83 c0 20             	add    eax,0x20
c001340a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001340e:	56                   	push   esi
c001340f:	e8 78 ff ff ff       	call   c001338c <Video::getWidth()>
c0013414:	5a                   	pop    edx
c0013415:	39 c7                	cmp    edi,eax
c0013417:	7d 34                	jge    c001344d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0013419:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001341e:	74 05                	je     c0013425 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0013420:	8b 06                	mov    eax,DWORD PTR [esi]
c0013422:	55                   	push   ebp
c0013423:	eb 0d                	jmp    c0013432 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013425:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001342a:	74 12                	je     c001343e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001342c:	8b 06                	mov    eax,DWORD PTR [esi]
c001342e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013432:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013436:	57                   	push   edi
c0013437:	56                   	push   esi
c0013438:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	47                   	inc    edi
c001343f:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013443:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013447:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001344b:	75 c1                	jne    c001340e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001344d:	43                   	inc    ebx
c001344e:	83 fb 20             	cmp    ebx,0x20
c0013451:	0f 85 79 ff ff ff    	jne    c00133d0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013457:	83 c4 2c             	add    esp,0x2c
c001345a:	5b                   	pop    ebx
c001345b:	5e                   	pop    esi
c001345c:	5f                   	pop    edi
c001345d:	5d                   	pop    ebp
c001345e:	c3                   	ret    
c001345f:	90                   	nop

c0013460 <ACPI::close(int, int, void*)>:
c0013460:	83 ec 1c             	sub    esp,0x1c
c0013463:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001346b:	74 0a                	je     c0013477 <ACPI::close(int, int, void*)+0x17>
c001346d:	b8 00 00 00 00       	mov    eax,0x0
c0013472:	e9 9e 00 00 00       	jmp    c0013515 <ACPI::close(int, int, void*)+0xb5>
c0013477:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001347c:	75 37                	jne    c00134b5 <ACPI::close(int, int, void*)+0x55>
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	68 f8 20 02 c0       	push   0xc00220f8
c0013486:	e8 bc bc ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001348b:	83 c4 10             	add    esp,0x10
c001348e:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c0013493:	85 c0                	test   eax,eax
c0013495:	74 07                	je     c001349e <ACPI::close(int, int, void*)+0x3e>
c0013497:	a1 28 4c 02 c0       	mov    eax,ds:0xc0024c28
c001349c:	ff d0                	call   eax
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	68 cc 21 02 c0       	push   0xc00221cc
c00134a6:	e8 cb 24 00 00       	call   c0015976 <Krnl::panic(char const*)>
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134b3:	eb 60                	jmp    c0013515 <ACPI::close(int, int, void*)+0xb5>
c00134b5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134ba:	75 54                	jne    c0013510 <ACPI::close(int, int, void*)+0xb0>
c00134bc:	a1 24 4c 02 c0       	mov    eax,ds:0xc0024c24
c00134c1:	85 c0                	test   eax,eax
c00134c3:	74 07                	je     c00134cc <ACPI::close(int, int, void*)+0x6c>
c00134c5:	a1 24 4c 02 c0       	mov    eax,ds:0xc0024c24
c00134ca:	ff d0                	call   eax
c00134cc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00134d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134d5:	25 ff 00 00 00       	and    eax,0xff
c00134da:	83 e0 02             	and    eax,0x2
c00134dd:	74 1c                	je     c00134fb <ACPI::close(int, int, void*)+0x9b>
c00134df:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134ea:	89 c2                	mov    edx,eax
c00134ec:	ec                   	in     al,dx
c00134ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00134f1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00134f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134f9:	eb d6                	jmp    c00134d1 <ACPI::close(int, int, void*)+0x71>
c00134fb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0013502:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0013507:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001350b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001350f:	ee                   	out    dx,al
c0013510:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013515:	83 c4 1c             	add    esp,0x1c
c0013518:	c3                   	ret    

c0013519 <findRSDP()>:
c0013519:	83 ec 1c             	sub    esp,0x1c
c001351c:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0013521:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013527:	83 e0 04             	and    eax,0x4
c001352a:	84 c0                	test   al,al
c001352c:	75 07                	jne    c0013535 <findRSDP()+0x1c>
c001352e:	b8 00 00 00 00       	mov    eax,0x0
c0013533:	eb 6a                	jmp    c001359f <findRSDP()+0x86>
c0013535:	a1 f0 45 02 c0       	mov    eax,ds:0xc00245f0
c001353a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001353f:	7f 1b                	jg     c001355c <findRSDP()+0x43>
c0013541:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0013546:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001354c:	83 e2 fb             	and    edx,0xfffffffb
c001354f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013555:	b8 00 00 00 00       	mov    eax,0x0
c001355a:	eb 43                	jmp    c001359f <findRSDP()+0x86>
c001355c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013564:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001356c:	77 2c                	ja     c001359a <findRSDP()+0x81>
c001356e:	83 ec 04             	sub    esp,0x4
c0013571:	6a 08                	push   0x8
c0013573:	68 05 21 02 c0       	push   0xc0022105
c0013578:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001357c:	e8 a0 d0 fe ff       	call   c0000621 <memcmp>
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	85 c0                	test   eax,eax
c0013586:	0f 94 c0             	sete   al
c0013589:	84 c0                	test   al,al
c001358b:	74 06                	je     c0013593 <findRSDP()+0x7a>
c001358d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013591:	eb 0c                	jmp    c001359f <findRSDP()+0x86>
c0013593:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013598:	eb ca                	jmp    c0013564 <findRSDP()+0x4b>
c001359a:	b8 00 00 00 00       	mov    eax,0x0
c001359f:	83 c4 1c             	add    esp,0x1c
c00135a2:	c3                   	ret    

c00135a3 <loadACPITables(unsigned char*)>:
c00135a3:	56                   	push   esi
c00135a4:	53                   	push   ebx
c00135a5:	83 ec 44             	sub    esp,0x44
c00135a8:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00135ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135b3:	83 e0 04             	and    eax,0x4
c00135b6:	84 c0                	test   al,al
c00135b8:	0f 84 05 02 00 00    	je     c00137c3 <loadACPITables(unsigned char*)+0x220>
c00135be:	a0 40 4e 02 c0       	mov    al,ds:0xc0024e40
c00135c3:	84 c0                	test   al,al
c00135c5:	74 75                	je     c001363c <loadACPITables(unsigned char*)+0x99>
c00135c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135d6:	83 e8 24             	sub    eax,0x24
c00135d9:	c1 e8 03             	shr    eax,0x3
c00135dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00135e0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135ec:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00135f0:	0f 8d b2 00 00 00    	jge    c00136a8 <loadACPITables(unsigned char*)+0x105>
c00135f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135fa:	83 c0 24             	add    eax,0x24
c00135fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013601:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013605:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013609:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001360d:	c1 e0 03             	shl    eax,0x3
c0013610:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0013614:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013618:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001361b:	8b 00                	mov    eax,DWORD PTR [eax]
c001361d:	89 c1                	mov    ecx,eax
c001361f:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c0013624:	8d 50 01             	lea    edx,[eax+0x1]
c0013627:	89 15 2c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c2c,edx
c001362d:	89 ca                	mov    edx,ecx
c001362f:	89 14 c5 44 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3bc],edx
c0013636:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001363a:	eb ac                	jmp    c00135e8 <loadACPITables(unsigned char*)+0x45>
c001363c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013640:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001364b:	83 e8 24             	sub    eax,0x24
c001364e:	c1 e8 02             	shr    eax,0x2
c0013651:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013655:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001365d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013661:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013665:	7d 41                	jge    c00136a8 <loadACPITables(unsigned char*)+0x105>
c0013667:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001366b:	83 c0 24             	add    eax,0x24
c001366e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013672:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013676:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001367a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001367e:	c1 e0 02             	shl    eax,0x2
c0013681:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013689:	8b 08                	mov    ecx,DWORD PTR [eax]
c001368b:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c0013690:	8d 50 01             	lea    edx,[eax+0x1]
c0013693:	89 15 2c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c2c,edx
c0013699:	89 ca                	mov    edx,ecx
c001369b:	89 14 c5 44 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3bc],edx
c00136a2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00136a6:	eb b5                	jmp    c001365d <loadACPITables(unsigned char*)+0xba>
c00136a8:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00136b0:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c00136b5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136b9:	0f 8d 05 01 00 00    	jge    c00137c4 <loadACPITables(unsigned char*)+0x221>
c00136bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136c3:	8b 04 c5 44 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3bc]
c00136ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136da:	25 ff 0f 00 00       	and    eax,0xfff
c00136df:	89 c6                	mov    esi,eax
c00136e1:	e8 d3 ab ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c00136e6:	89 c3                	mov    ebx,eax
c00136e8:	83 ec 0c             	sub    esp,0xc
c00136eb:	6a 01                	push   0x1
c00136ed:	e8 3a aa ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136ff:	83 ec 0c             	sub    esp,0xc
c0013702:	6a 01                	push   0x1
c0013704:	6a 01                	push   0x1
c0013706:	50                   	push   eax
c0013707:	52                   	push   edx
c0013708:	53                   	push   ebx
c0013709:	e8 dc b3 ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001370e:	83 c4 20             	add    esp,0x20
c0013711:	09 f0                	or     eax,esi
c0013713:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013717:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001371b:	c1 e0 03             	shl    eax,0x3
c001371e:	05 40 4c 02 c0       	add    eax,0xc0024c40
c0013723:	83 ec 04             	sub    esp,0x4
c0013726:	6a 04                	push   0x4
c0013728:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001372c:	50                   	push   eax
c001372d:	e8 52 cf fe ff       	call   c0000684 <memcpy>
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013739:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001373c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013744:	05 00 10 00 00       	add    eax,0x1000
c0013749:	c1 e8 0c             	shr    eax,0xc
c001374c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013754:	89 04 24             	mov    DWORD PTR [esp],eax
c0013757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375b:	25 ff 0f 00 00       	and    eax,0xfff
c0013760:	89 c6                	mov    esi,eax
c0013762:	e8 52 ab ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c0013767:	89 c3                	mov    ebx,eax
c0013769:	83 ec 0c             	sub    esp,0xc
c001376c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013770:	e8 b7 a9 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c0013775:	83 c4 10             	add    esp,0x10
c0013778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001377c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013782:	83 ec 0c             	sub    esp,0xc
c0013785:	6a 01                	push   0x1
c0013787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001378b:	50                   	push   eax
c001378c:	52                   	push   edx
c001378d:	53                   	push   ebx
c001378e:	e8 57 b3 ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013793:	83 c4 20             	add    esp,0x20
c0013796:	09 f0                	or     eax,esi
c0013798:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001379c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001379f:	83 ec 0c             	sub    esp,0xc
c00137a2:	50                   	push   eax
c00137a3:	e8 d1 ac ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137b3:	89 14 c5 44 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb3bc],edx
c00137ba:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137be:	e9 ed fe ff ff       	jmp    c00136b0 <loadACPITables(unsigned char*)+0x10d>
c00137c3:	90                   	nop
c00137c4:	83 c4 44             	add    esp,0x44
c00137c7:	5b                   	pop    ebx
c00137c8:	5e                   	pop    esi
c00137c9:	c3                   	ret    

c00137ca <findRSDT(unsigned char*)>:
c00137ca:	56                   	push   esi
c00137cb:	53                   	push   ebx
c00137cc:	83 ec 44             	sub    esp,0x44
c00137cf:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00137d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00137da:	83 e0 04             	and    eax,0x4
c00137dd:	84 c0                	test   al,al
c00137df:	75 0a                	jne    c00137eb <findRSDT(unsigned char*)+0x21>
c00137e1:	b8 00 00 00 00       	mov    eax,0x0
c00137e6:	e9 f7 00 00 00       	jmp    c00138e2 <findRSDT(unsigned char*)+0x118>
c00137eb:	83 ec 04             	sub    esp,0x4
c00137ee:	6a 24                	push   0x24
c00137f0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00137f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00137f8:	50                   	push   eax
c00137f9:	e8 86 ce fe ff       	call   c0000684 <memcpy>
c00137fe:	83 c4 10             	add    esp,0x10
c0013801:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013805:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013809:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013811:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013815:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013819:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001381d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013821:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013825:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013829:	25 ff 0f 00 00       	and    eax,0xfff
c001382e:	89 c6                	mov    esi,eax
c0013830:	e8 84 aa ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c0013835:	89 c3                	mov    ebx,eax
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	6a 02                	push   0x2
c001383c:	e8 eb a8 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c0013841:	83 c4 10             	add    esp,0x10
c0013844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013848:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001384e:	83 ec 0c             	sub    esp,0xc
c0013851:	6a 01                	push   0x1
c0013853:	6a 02                	push   0x2
c0013855:	50                   	push   eax
c0013856:	52                   	push   edx
c0013857:	53                   	push   ebx
c0013858:	e8 8d b2 ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001385d:	83 c4 20             	add    esp,0x20
c0013860:	09 f0                	or     eax,esi
c0013862:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001386a:	25 ff 0f 00 00       	and    eax,0xfff
c001386f:	89 c6                	mov    esi,eax
c0013871:	e8 43 aa ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c0013876:	89 c3                	mov    ebx,eax
c0013878:	83 ec 0c             	sub    esp,0xc
c001387b:	6a 02                	push   0x2
c001387d:	e8 aa a8 ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013889:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001388f:	83 ec 0c             	sub    esp,0xc
c0013892:	6a 01                	push   0x1
c0013894:	6a 02                	push   0x2
c0013896:	50                   	push   eax
c0013897:	52                   	push   edx
c0013898:	53                   	push   ebx
c0013899:	e8 4c b2 ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001389e:	83 c4 20             	add    esp,0x20
c00138a1:	09 f0                	or     eax,esi
c00138a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138a7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00138ac:	75 11                	jne    c00138bf <findRSDT(unsigned char*)+0xf5>
c00138ae:	c6 05 40 4e 02 c0 00 	mov    BYTE PTR ds:0xc0024e40,0x0
c00138b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138bd:	eb 1f                	jmp    c00138de <findRSDT(unsigned char*)+0x114>
c00138bf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138c4:	75 11                	jne    c00138d7 <findRSDT(unsigned char*)+0x10d>
c00138c6:	c6 05 40 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024e40,0x1
c00138cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138d1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138d5:	eb 07                	jmp    c00138de <findRSDT(unsigned char*)+0x114>
c00138d7:	b8 00 00 00 00       	mov    eax,0x0
c00138dc:	eb 04                	jmp    c00138e2 <findRSDT(unsigned char*)+0x118>
c00138de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138e2:	83 c4 44             	add    esp,0x44
c00138e5:	5b                   	pop    ebx
c00138e6:	5e                   	pop    esi
c00138e7:	c3                   	ret    

c00138e8 <findDataTable(unsigned char*, char*)>:
c00138e8:	83 ec 1c             	sub    esp,0x1c
c00138eb:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00138f0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138f6:	83 e0 04             	and    eax,0x4
c00138f9:	84 c0                	test   al,al
c00138fb:	75 07                	jne    c0013904 <findDataTable(unsigned char*, char*)+0x1c>
c00138fd:	b8 00 00 00 00       	mov    eax,0x0
c0013902:	eb 7c                	jmp    c0013980 <findDataTable(unsigned char*, char*)+0x98>
c0013904:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001390c:	a1 2c 4c 02 c0       	mov    eax,ds:0xc0024c2c
c0013911:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013915:	7d 3a                	jge    c0013951 <findDataTable(unsigned char*, char*)+0x69>
c0013917:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001391b:	c1 e0 03             	shl    eax,0x3
c001391e:	05 40 4c 02 c0       	add    eax,0xc0024c40
c0013923:	83 ec 04             	sub    esp,0x4
c0013926:	6a 04                	push   0x4
c0013928:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001392c:	50                   	push   eax
c001392d:	e8 ef cc fe ff       	call   c0000621 <memcmp>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	85 c0                	test   eax,eax
c0013937:	0f 94 c0             	sete   al
c001393a:	84 c0                	test   al,al
c001393c:	74 0d                	je     c001394b <findDataTable(unsigned char*, char*)+0x63>
c001393e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013942:	8b 04 c5 44 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb3bc]
c0013949:	eb 35                	jmp    c0013980 <findDataTable(unsigned char*, char*)+0x98>
c001394b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001394f:	eb bb                	jmp    c001390c <findDataTable(unsigned char*, char*)+0x24>
c0013951:	a0 40 4e 02 c0       	mov    al,ds:0xc0024e40
c0013956:	84 c0                	test   al,al
c0013958:	74 07                	je     c0013961 <findDataTable(unsigned char*, char*)+0x79>
c001395a:	b8 58 00 00 00       	mov    eax,0x58
c001395f:	eb 05                	jmp    c0013966 <findDataTable(unsigned char*, char*)+0x7e>
c0013961:	b8 52 00 00 00       	mov    eax,0x52
c0013966:	83 ec 04             	sub    esp,0x4
c0013969:	50                   	push   eax
c001396a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001396e:	68 f0 21 02 c0       	push   0xc00221f0
c0013973:	e8 cf b7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	b8 00 00 00 00       	mov    eax,0x0
c0013980:	83 c4 1c             	add    esp,0x1c
c0013983:	c3                   	ret    

c0013984 <scanMADT()>:
c0013984:	83 ec 2c             	sub    esp,0x2c
c0013987:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001398c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013992:	83 e0 04             	and    eax,0x4
c0013995:	84 c0                	test   al,al
c0013997:	0f 84 9a 03 00 00    	je     c0013d37 <scanMADT()+0x3b3>
c001399d:	e8 77 fb ff ff       	call   c0013519 <findRSDP()>
c00139a2:	a3 4c 4e 02 c0       	mov    ds:0xc0024e4c,eax
c00139a7:	a1 4c 4e 02 c0       	mov    eax,ds:0xc0024e4c
c00139ac:	85 c0                	test   eax,eax
c00139ae:	75 19                	jne    c00139c9 <scanMADT()+0x45>
c00139b0:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00139b5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139bb:	83 e2 fb             	and    edx,0xfffffffb
c00139be:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139c4:	e9 72 03 00 00       	jmp    c0013d3b <scanMADT()+0x3b7>
c00139c9:	a1 4c 4e 02 c0       	mov    eax,ds:0xc0024e4c
c00139ce:	83 ec 0c             	sub    esp,0xc
c00139d1:	50                   	push   eax
c00139d2:	e8 f3 fd ff ff       	call   c00137ca <findRSDT(unsigned char*)>
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	a3 48 4e 02 c0       	mov    ds:0xc0024e48,eax
c00139df:	a1 48 4e 02 c0       	mov    eax,ds:0xc0024e48
c00139e4:	85 c0                	test   eax,eax
c00139e6:	75 19                	jne    c0013a01 <scanMADT()+0x7d>
c00139e8:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00139ed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139f3:	83 e2 fb             	and    edx,0xfffffffb
c00139f6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139fc:	e9 3a 03 00 00       	jmp    c0013d3b <scanMADT()+0x3b7>
c0013a01:	a1 48 4e 02 c0       	mov    eax,ds:0xc0024e48
c0013a06:	83 ec 0c             	sub    esp,0xc
c0013a09:	50                   	push   eax
c0013a0a:	e8 94 fb ff ff       	call   c00135a3 <loadACPITables(unsigned char*)>
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	a1 48 4e 02 c0       	mov    eax,ds:0xc0024e48
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	68 0e 21 02 c0       	push   0xc002210e
c0013a1f:	50                   	push   eax
c0013a20:	e8 c3 fe ff ff       	call   c00138e8 <findDataTable(unsigned char*, char*)>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a31:	75 19                	jne    c0013a4c <scanMADT()+0xc8>
c0013a33:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0013a38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a3e:	83 e2 fe             	and    edx,0xfffffffe
c0013a41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a47:	e9 ef 02 00 00       	jmp    c0013d3b <scanMADT()+0x3b7>
c0013a4c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a5b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a5f:	0f 87 d6 02 00 00    	ja     c0013d3b <scanMADT()+0x3b7>
c0013a65:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a6d:	0f 87 c8 02 00 00    	ja     c0013d3b <scanMADT()+0x3b7>
c0013a73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0013a82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a8e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a96:	8d 50 01             	lea    edx,[eax+0x1]
c0013a99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aa1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013aa5:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013aa9:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013aae:	0f 86 86 02 00 00    	jbe    c0013d3a <scanMADT()+0x3b6>
c0013ab4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013ab9:	75 5b                	jne    c0013b16 <scanMADT()+0x192>
c0013abb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013abf:	8d 50 01             	lea    edx,[eax+0x1]
c0013ac2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ac6:	8a 15 80 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024f80
c0013acc:	81 e2 ff 00 00 00    	and    edx,0xff
c0013ad2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ad6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ada:	88 82 c0 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb040],al
c0013ae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ae4:	8d 42 01             	lea    eax,[edx+0x1]
c0013ae7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013aeb:	a0 80 4f 02 c0       	mov    al,ds:0xc0024f80
c0013af0:	8d 48 01             	lea    ecx,[eax+0x1]
c0013af3:	88 0d 80 4f 02 c0    	mov    BYTE PTR ds:0xc0024f80,cl
c0013af9:	25 ff 00 00 00       	and    eax,0xff
c0013afe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b02:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013b06:	88 90 a0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb060],dl
c0013b0c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b11:	e9 0a 02 00 00       	jmp    c0013d20 <scanMADT()+0x39c>
c0013b16:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b1b:	0f 85 29 01 00 00    	jne    c0013c4a <scanMADT()+0x2c6>
c0013b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b25:	8d 50 01             	lea    edx,[eax+0x1]
c0013b28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b2c:	8a 15 50 4e 02 c0    	mov    dl,BYTE PTR ds:0xc0024e50
c0013b32:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b38:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b3c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b40:	88 82 60 4e 02 c0    	mov    BYTE PTR [edx-0x3ffdb1a0],al
c0013b46:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b52:	01 d0                	add    eax,edx
c0013b54:	83 c0 2c             	add    eax,0x2c
c0013b57:	8a 00                	mov    al,BYTE PTR [eax]
c0013b59:	31 d2                	xor    edx,edx
c0013b5b:	88 c2                	mov    dl,al
c0013b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b61:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b68:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b6c:	25 ff 00 00 00       	and    eax,0xff
c0013b71:	c1 e0 08             	shl    eax,0x8
c0013b74:	89 d1                	mov    ecx,edx
c0013b76:	09 c1                	or     ecx,eax
c0013b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b7c:	8d 50 02             	lea    edx,[eax+0x2]
c0013b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b83:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b87:	25 ff 00 00 00       	and    eax,0xff
c0013b8c:	c1 e0 10             	shl    eax,0x10
c0013b8f:	09 c1                	or     ecx,eax
c0013b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b95:	8d 50 03             	lea    edx,[eax+0x3]
c0013b98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b9c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ba0:	25 ff 00 00 00       	and    eax,0xff
c0013ba5:	c1 e0 18             	shl    eax,0x18
c0013ba8:	09 c1                	or     ecx,eax
c0013baa:	89 ca                	mov    edx,ecx
c0013bac:	a0 50 4e 02 c0       	mov    al,ds:0xc0024e50
c0013bb1:	25 ff 00 00 00       	and    eax,0xff
c0013bb6:	89 14 85 80 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb180],edx
c0013bbd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bca:	01 d0                	add    eax,edx
c0013bcc:	83 c0 2c             	add    eax,0x2c
c0013bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0013bd1:	31 d2                	xor    edx,edx
c0013bd3:	88 c2                	mov    dl,al
c0013bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd9:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013be0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013be4:	25 ff 00 00 00       	and    eax,0xff
c0013be9:	c1 e0 08             	shl    eax,0x8
c0013bec:	89 d1                	mov    ecx,edx
c0013bee:	09 c1                	or     ecx,eax
c0013bf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bf4:	8d 50 02             	lea    edx,[eax+0x2]
c0013bf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bff:	25 ff 00 00 00       	and    eax,0xff
c0013c04:	c1 e0 10             	shl    eax,0x10
c0013c07:	09 c1                	or     ecx,eax
c0013c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c0d:	8d 50 03             	lea    edx,[eax+0x3]
c0013c10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c14:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c18:	25 ff 00 00 00       	and    eax,0xff
c0013c1d:	c1 e0 18             	shl    eax,0x18
c0013c20:	09 c1                	or     ecx,eax
c0013c22:	89 ca                	mov    edx,ecx
c0013c24:	a0 50 4e 02 c0       	mov    al,ds:0xc0024e50
c0013c29:	25 ff 00 00 00       	and    eax,0xff
c0013c2e:	89 14 85 00 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb100],edx
c0013c35:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c3a:	a0 50 4e 02 c0       	mov    al,ds:0xc0024e50
c0013c3f:	40                   	inc    eax
c0013c40:	a2 50 4e 02 c0       	mov    ds:0xc0024e50,al
c0013c45:	e9 d6 00 00 00       	jmp    c0013d20 <scanMADT()+0x39c>
c0013c4a:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c4f:	0f 85 b1 00 00 00    	jne    c0013d06 <scanMADT()+0x382>
c0013c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c59:	8d 50 01             	lea    edx,[eax+0x1]
c0013c5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c64:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c68:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c70:	8d 50 01             	lea    edx,[eax+0x1]
c0013c73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c7b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c7f:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c8b:	01 d0                	add    eax,edx
c0013c8d:	83 c0 2c             	add    eax,0x2c
c0013c90:	8a 00                	mov    al,BYTE PTR [eax]
c0013c92:	31 d2                	xor    edx,edx
c0013c94:	88 c2                	mov    dl,al
c0013c96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013ca5:	25 ff 00 00 00       	and    eax,0xff
c0013caa:	c1 e0 08             	shl    eax,0x8
c0013cad:	89 d1                	mov    ecx,edx
c0013caf:	09 c1                	or     ecx,eax
c0013cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb5:	8d 50 02             	lea    edx,[eax+0x2]
c0013cb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cbc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cc0:	25 ff 00 00 00       	and    eax,0xff
c0013cc5:	c1 e0 10             	shl    eax,0x10
c0013cc8:	09 c1                	or     ecx,eax
c0013cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cce:	8d 50 03             	lea    edx,[eax+0x3]
c0013cd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cd9:	25 ff 00 00 00       	and    eax,0xff
c0013cde:	c1 e0 18             	shl    eax,0x18
c0013ce1:	09 c8                	or     eax,ecx
c0013ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ce7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cec:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013cf1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013cf5:	25 ff 00 00 00       	and    eax,0xff
c0013cfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cfe:	88 90 00 3d 02 c0    	mov    BYTE PTR [eax-0x3ffdc300],dl
c0013d04:	eb 1a                	jmp    c0013d20 <scanMADT()+0x39c>
c0013d06:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013d0b:	75 07                	jne    c0013d14 <scanMADT()+0x390>
c0013d0d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d12:	eb 0c                	jmp    c0013d20 <scanMADT()+0x39c>
c0013d14:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013d19:	75 05                	jne    c0013d20 <scanMADT()+0x39c>
c0013d1b:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013d20:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013d24:	31 d2                	xor    edx,edx
c0013d26:	88 c2                	mov    dl,al
c0013d28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2c:	01 d0                	add    eax,edx
c0013d2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d32:	e9 1d fd ff ff       	jmp    c0013a54 <scanMADT()+0xd0>
c0013d37:	90                   	nop
c0013d38:	eb 01                	jmp    c0013d3b <scanMADT()+0x3b7>
c0013d3a:	90                   	nop
c0013d3b:	83 c4 2c             	add    esp,0x2c
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <ACPI::ACPI()>:
c0013d40:	83 ec 0c             	sub    esp,0xc
c0013d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d47:	83 ec 08             	sub    esp,0x8
c0013d4a:	68 13 21 02 c0       	push   0xc0022113
c0013d4f:	50                   	push   eax
c0013d50:	e8 f7 c9 ff ff       	call   c001074c <Device::Device(char const*)>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	ba bc 22 02 c0       	mov    edx,0xc00222bc
c0013d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d61:	89 10                	mov    DWORD PTR [eax],edx
c0013d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d67:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d72:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d80:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d95:	e8 ea fb ff ff       	call   c0013984 <scanMADT()>
c0013d9a:	90                   	nop
c0013d9b:	83 c4 0c             	add    esp,0xc
c0013d9e:	c3                   	ret    
c0013d9f:	90                   	nop

c0013da0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013da0:	83 ec 2c             	sub    esp,0x2c
c0013da3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013da7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013dab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013daf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013db3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013db8:	88 d0                	mov    al,dl
c0013dba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013dc3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dcf:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013dd5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013dd9:	0f 8d 97 00 00 00    	jge    c0013e76 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ddf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013de3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013de7:	83 c2 2a             	add    edx,0x2a
c0013dea:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013dee:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013df3:	75 78                	jne    c0013e6d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013df5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013df9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dfd:	83 c2 2a             	add    edx,0x2a
c0013e00:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013e04:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013e08:	75 63                	jne    c0013e6d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013e0a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e0f:	74 3a                	je     c0013e4b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013e11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e19:	83 c2 2a             	add    edx,0x2a
c0013e1c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e27:	39 c2                	cmp    edx,eax
c0013e29:	74 10                	je     c0013e3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013e2b:	83 ec 0c             	sub    esp,0xc
c0013e2e:	68 20 22 02 c0       	push   0xc0022220
c0013e33:	e8 3e 1b 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0013e38:	83 c4 10             	add    esp,0x10
c0013e3b:	83 ec 0c             	sub    esp,0xc
c0013e3e:	68 18 21 02 c0       	push   0xc0022118
c0013e43:	e8 2e 1b 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e57:	83 c2 2a             	add    edx,0x2a
c0013e5a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e5e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e60:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e63:	89 01                	mov    DWORD PTR [ecx],eax
c0013e65:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e68:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e6d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e71:	e9 55 ff ff ff       	jmp    c0013dcb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e76:	90                   	nop
c0013e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e7b:	83 c4 2c             	add    esp,0x2c
c0013e7e:	c2 04 00             	ret    0x4
c0013e81:	90                   	nop

c0013e82 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e82:	56                   	push   esi
c0013e83:	53                   	push   ebx
c0013e84:	83 ec 14             	sub    esp,0x14
c0013e87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e8b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e93:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e98:	88 c8                	mov    al,cl
c0013e9a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e9e:	88 d0                	mov    al,dl
c0013ea0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013eb8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013ebc:	31 c9                	xor    ecx,ecx
c0013ebe:	88 c1                	mov    cl,al
c0013ec0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ec4:	31 d2                	xor    edx,edx
c0013ec6:	88 c2                	mov    dl,al
c0013ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ecc:	25 ff ff 00 00       	and    eax,0xffff
c0013ed1:	83 ec 04             	sub    esp,0x4
c0013ed4:	56                   	push   esi
c0013ed5:	53                   	push   ebx
c0013ed6:	51                   	push   ecx
c0013ed7:	52                   	push   edx
c0013ed8:	50                   	push   eax
c0013ed9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013edd:	68 50 22 02 c0       	push   0xc0022250
c0013ee2:	e8 60 b2 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0013ee7:	83 c4 20             	add    esp,0x20
c0013eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eee:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013efb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013eff:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f07:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f11:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f18:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f21:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f27:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f32:	83 c2 2a             	add    edx,0x2a
c0013f35:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f47:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f4e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f56:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f5c:	8d 50 01             	lea    edx,[eax+0x1]
c0013f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f63:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f73:	3d 00 08 00 00       	cmp    eax,0x800
c0013f78:	75 10                	jne    c0013f8a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	68 27 21 02 c0       	push   0xc0022127
c0013f82:	e8 ef 19 00 00       	call   c0015976 <Krnl::panic(char const*)>
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	90                   	nop
c0013f8b:	83 c4 14             	add    esp,0x14
c0013f8e:	5b                   	pop    ebx
c0013f8f:	5e                   	pop    esi
c0013f90:	c3                   	ret    
c0013f91:	90                   	nop

c0013f92 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f92:	b8 00 00 00 00       	mov    eax,0x0
c0013f97:	c3                   	ret    

c0013f98 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f98:	83 ec 1c             	sub    esp,0x1c
c0013f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f9f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013fa2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013fa6:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c0013fac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013fb0:	25 ff 00 00 00       	and    eax,0xff
c0013fb5:	83 ec 08             	sub    esp,0x8
c0013fb8:	50                   	push   eax
c0013fb9:	52                   	push   edx
c0013fba:	e8 27 76 ff ff       	call   c000b5e6 <Computer::readCMOS(unsigned char)>
c0013fbf:	83 c4 10             	add    esp,0x10
c0013fc2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013fc6:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c0013fcc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013fd0:	25 ff 00 00 00       	and    eax,0xff
c0013fd5:	83 ec 04             	sub    esp,0x4
c0013fd8:	6a 01                	push   0x1
c0013fda:	50                   	push   eax
c0013fdb:	52                   	push   edx
c0013fdc:	e8 1d 77 ff ff       	call   c000b6fe <Computer::writeCMOS(unsigned char, unsigned char)>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	90                   	nop
c0013fe5:	83 c4 1c             	add    esp,0x1c
c0013fe8:	c3                   	ret    
c0013fe9:	90                   	nop

c0013fea <ACPI::open(int, int, void*)>:
c0013fea:	53                   	push   ebx
c0013feb:	83 ec 18             	sub    esp,0x18
c0013fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffd:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0014003:	84 c0                	test   al,al
c0014005:	74 60                	je     c0014067 <ACPI::open(int, int, void*)+0x7d>
c0014007:	83 ec 0c             	sub    esp,0xc
c001400a:	68 58 01 00 00       	push   0x158
c001400f:	e8 fe af ff ff       	call   c000f012 <operator new(unsigned long)>
c0014014:	83 c4 10             	add    esp,0x10
c0014017:	89 c3                	mov    ebx,eax
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	53                   	push   ebx
c001401d:	e8 8c 80 00 00       	call   c001c0ae <PCI::PCI()>
c0014022:	83 c4 10             	add    esp,0x10
c0014025:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0014029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402d:	83 ec 08             	sub    esp,0x8
c0014030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014034:	50                   	push   eax
c0014035:	e8 22 c5 ff ff       	call   c001055c <Device::addChild(Device*)>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014041:	8b 00                	mov    eax,DWORD PTR [eax]
c0014043:	83 c0 08             	add    eax,0x8
c0014046:	8b 00                	mov    eax,DWORD PTR [eax]
c0014048:	6a 00                	push   0x0
c001404a:	6a 00                	push   0x0
c001404c:	6a 00                	push   0x0
c001404e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014052:	ff d0                	call   eax
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	83 ec 0c             	sub    esp,0xc
c001405a:	68 44 21 02 c0       	push   0xc0022144
c001405f:	e8 e3 b0 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	83 ec 0c             	sub    esp,0xc
c001406a:	68 4f 21 02 c0       	push   0xc002214f
c001406f:	e8 28 38 00 00       	call   c001789c <Thr::loadKernelSymbolTable(char const*)>
c0014074:	83 c4 10             	add    esp,0x10
c0014077:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c001407d:	83 ec 08             	sub    esp,0x8
c0014080:	6a 01                	push   0x1
c0014082:	68 6d 21 02 c0       	push   0xc002216d
c0014087:	e8 f2 42 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c001408c:	83 c4 10             	add    esp,0x10
c001408f:	83 ec 08             	sub    esp,0x8
c0014092:	53                   	push   ebx
c0014093:	50                   	push   eax
c0014094:	e8 ab 44 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c00140a2:	83 ec 08             	sub    esp,0x8
c00140a5:	6a 01                	push   0x1
c00140a7:	68 8a 21 02 c0       	push   0xc002218a
c00140ac:	e8 cd 42 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c00140b1:	83 c4 10             	add    esp,0x10
c00140b4:	83 ec 08             	sub    esp,0x8
c00140b7:	53                   	push   ebx
c00140b8:	50                   	push   eax
c00140b9:	e8 86 44 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c00140c6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00140cc:	83 e0 04             	and    eax,0x4
c00140cf:	84 c0                	test   al,al
c00140d1:	0f 84 cf 00 00 00    	je     c00141a6 <ACPI::open(int, int, void*)+0x1bc>
c00140d7:	83 ec 0c             	sub    esp,0xc
c00140da:	68 14 01 00 00       	push   0x114
c00140df:	e8 2e af ff ff       	call   c000f012 <operator new(unsigned long)>
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	89 c3                	mov    ebx,eax
c00140e9:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00140ee:	83 ec 04             	sub    esp,0x4
c00140f1:	50                   	push   eax
c00140f2:	68 a7 21 02 c0       	push   0xc00221a7
c00140f7:	53                   	push   ebx
c00140f8:	e8 81 b5 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c00140fd:	83 c4 10             	add    esp,0x10
c0014100:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014104:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014109:	74 17                	je     c0014122 <ACPI::open(int, int, void*)+0x138>
c001410b:	83 ec 0c             	sub    esp,0xc
c001410e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014112:	e8 39 b8 ff ff       	call   c000f950 <File::exists()>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	84 c0                	test   al,al
c001411c:	74 04                	je     c0014122 <ACPI::open(int, int, void*)+0x138>
c001411e:	b0 01                	mov    al,0x1
c0014120:	eb 02                	jmp    c0014124 <ACPI::open(int, int, void*)+0x13a>
c0014122:	b0 00                	mov    al,0x0
c0014124:	84 c0                	test   al,al
c0014126:	74 25                	je     c001414d <ACPI::open(int, int, void*)+0x163>
c0014128:	8b 1d a8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245a8
c001412e:	83 ec 08             	sub    esp,0x8
c0014131:	6a 01                	push   0x1
c0014133:	68 a7 21 02 c0       	push   0xc00221a7
c0014138:	e8 41 42 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	83 ec 08             	sub    esp,0x8
c0014143:	53                   	push   ebx
c0014144:	50                   	push   eax
c0014145:	e8 fa 43 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c001414a:	83 c4 10             	add    esp,0x10
c001414d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014152:	74 1e                	je     c0014172 <ACPI::open(int, int, void*)+0x188>
c0014154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014159:	74 17                	je     c0014172 <ACPI::open(int, int, void*)+0x188>
c001415b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001415f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014161:	83 c0 08             	add    eax,0x8
c0014164:	8b 00                	mov    eax,DWORD PTR [eax]
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001416d:	ff d0                	call   eax
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	a1 48 4e 02 c0       	mov    eax,ds:0xc0024e48
c0014177:	83 ec 08             	sub    esp,0x8
c001417a:	68 c4 21 02 c0       	push   0xc00221c4
c001417f:	50                   	push   eax
c0014180:	e8 63 f7 ff ff       	call   c00138e8 <findDataTable(unsigned char*, char*)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001418c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014191:	74 13                	je     c00141a6 <ACPI::open(int, int, void*)+0x1bc>
c0014193:	83 ec 08             	sub    esp,0x8
c0014196:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001419a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001419e:	e8 f5 fd ff ff       	call   c0013f98 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	b8 00 00 00 00       	mov    eax,0x0
c00141ab:	83 c4 18             	add    esp,0x18
c00141ae:	5b                   	pop    ebx
c00141af:	c3                   	ret    

c00141b0 <ACPI::sleep()>:
c00141b0:	83 ec 0c             	sub    esp,0xc
c00141b3:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00141b8:	85 c0                	test   eax,eax
c00141ba:	74 07                	je     c00141c3 <ACPI::sleep()+0x13>
c00141bc:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00141c1:	ff d0                	call   eax
c00141c3:	90                   	nop
c00141c4:	83 c4 0c             	add    esp,0xc
c00141c7:	c3                   	ret    

c00141c8 <CPU::close(int, int, void*)>:
c00141c8:	31 c0                	xor    eax,eax
c00141ca:	c3                   	ret    

c00141cb <lookupAMDCPUName(unsigned char, unsigned char)>:
c00141cb:	55                   	push   ebp
c00141cc:	57                   	push   edi
c00141cd:	56                   	push   esi
c00141ce:	53                   	push   ebx
c00141cf:	51                   	push   ecx
c00141d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141d8:	89 d6                	mov    esi,edx
c00141da:	89 cd                	mov    ebp,ecx
c00141dc:	80 fa 04             	cmp    dl,0x4
c00141df:	75 28                	jne    c0014209 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00141e1:	8d 41 f9             	lea    eax,[ecx-0x7]
c00141e4:	3c 03                	cmp    al,0x3
c00141e6:	0f 86 64 01 00 00    	jbe    c0014350 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141ec:	80 f9 03             	cmp    cl,0x3
c00141ef:	0f 84 5b 01 00 00    	je     c0014350 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141f5:	8d 79 f2             	lea    edi,[ecx-0xe]
c00141f8:	b8 d0 3e 02 c0       	mov    eax,0xc0023ed0
c00141fd:	89 fb                	mov    ebx,edi
c00141ff:	80 fb 01             	cmp    bl,0x1
c0014202:	77 4e                	ja     c0014252 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c0014204:	e9 61 01 00 00       	jmp    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014209:	80 fa 05             	cmp    dl,0x5
c001420c:	75 4d                	jne    c001425b <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c001420e:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0014213:	80 f9 03             	cmp    cl,0x3
c0014216:	0f 86 4e 01 00 00    	jbe    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001421c:	8d 79 fa             	lea    edi,[ecx-0x6]
c001421f:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c0014224:	89 fb                	mov    ebx,edi
c0014226:	80 fb 01             	cmp    bl,0x1
c0014229:	0f 86 3b 01 00 00    	jbe    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001422f:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014234:	80 f9 08             	cmp    cl,0x8
c0014237:	0f 84 2d 01 00 00    	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001423d:	89 cf                	mov    edi,ecx
c001423f:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c0014244:	83 e7 fb             	and    edi,0xfffffffb
c0014247:	89 fb                	mov    ebx,edi
c0014249:	80 fb 09             	cmp    bl,0x9
c001424c:	0f 84 18 01 00 00    	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014252:	31 c0                	xor    eax,eax
c0014254:	89 eb                	mov    ebx,ebp
c0014256:	0f b6 fb             	movzx  edi,bl
c0014259:	eb 30                	jmp    c001428b <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c001425b:	31 c0                	xor    eax,eax
c001425d:	80 fa 06             	cmp    dl,0x6
c0014260:	75 f2                	jne    c0014254 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014262:	80 f9 0a             	cmp    cl,0xa
c0014265:	77 ed                	ja     c0014254 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014267:	bf de 05 00 00       	mov    edi,0x5de
c001426c:	0f a3 cf             	bt     edi,ecx
c001426f:	73 e3                	jae    c0014254 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014271:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014276:	e9 ef 00 00 00       	jmp    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001427b:	39 c7                	cmp    edi,eax
c001427d:	0f 84 d4 00 00 00    	je     c0014357 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014283:	40                   	inc    eax
c0014284:	3d d0 00 00 00       	cmp    eax,0xd0
c0014289:	74 09                	je     c0014294 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c001428b:	89 f3                	mov    ebx,esi
c001428d:	80 fb 0f             	cmp    bl,0xf
c0014290:	75 f1                	jne    c0014283 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014292:	eb e7                	jmp    c001427b <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014294:	80 fa 10             	cmp    dl,0x10
c0014297:	75 19                	jne    c00142b2 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014299:	8d 41 fc             	lea    eax,[ecx-0x4]
c001429c:	83 e0 fb             	and    eax,0xfffffffb
c001429f:	3c 02                	cmp    al,0x2
c00142a1:	0f 86 b7 00 00 00    	jbe    c001435e <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c00142a7:	80 f9 02             	cmp    cl,0x2
c00142aa:	0f 84 ae 00 00 00    	je     c001435e <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c00142b0:	eb 13                	jmp    c00142c5 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c00142b2:	80 fa 11             	cmp    dl,0x11
c00142b5:	75 0e                	jne    c00142c5 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c00142b7:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c00142bc:	80 f9 03             	cmp    cl,0x3
c00142bf:	0f 84 a5 00 00 00    	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142c5:	80 fa 12             	cmp    dl,0x12
c00142c8:	75 0e                	jne    c00142d8 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c00142ca:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00142cf:	80 f9 01             	cmp    cl,0x1
c00142d2:	0f 84 92 00 00 00    	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d8:	80 fa 14             	cmp    dl,0x14
c00142db:	be 01 00 00 00       	mov    esi,0x1
c00142e0:	0f 94 c3             	sete   bl
c00142e3:	80 f9 13             	cmp    cl,0x13
c00142e6:	77 0c                	ja     c00142f4 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00142e8:	be 04 00 09 00       	mov    esi,0x90004
c00142ed:	d3 ee                	shr    esi,cl
c00142ef:	f7 d6                	not    esi
c00142f1:	83 e6 01             	and    esi,0x1
c00142f4:	8d 41 ff             	lea    eax,[ecx-0x1]
c00142f7:	3c 01                	cmp    al,0x1
c00142f9:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00142fe:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0014303:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c0014307:	75 61                	jne    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014309:	80 fa 15             	cmp    dl,0x15
c001430c:	75 1f                	jne    c001432d <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c001430e:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014313:	80 f9 01             	cmp    cl,0x1
c0014316:	74 52                	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014318:	89 f3                	mov    ebx,esi
c001431a:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c001431f:	84 db                	test   bl,bl
c0014321:	74 47                	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014323:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0014328:	80 f9 30             	cmp    cl,0x30
c001432b:	74 3d                	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432d:	80 fa 16             	cmp    dl,0x16
c0014330:	0f 94 c2             	sete   dl
c0014333:	84 c9                	test   cl,cl
c0014335:	75 09                	jne    c0014340 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014337:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c001433c:	84 d2                	test   dl,dl
c001433e:	75 2a                	jne    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014340:	80 f9 30             	cmp    cl,0x30
c0014343:	75 20                	jne    c0014365 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014345:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c001434a:	84 d2                	test   dl,dl
c001434c:	75 1c                	jne    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001434e:	eb 15                	jmp    c0014365 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014350:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c0014355:	eb 13                	jmp    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014357:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001435c:	eb 0c                	jmp    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001435e:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014363:	eb 05                	jmp    c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014365:	b8 d2 25 02 c0       	mov    eax,0xc00225d2
c001436a:	5a                   	pop    edx
c001436b:	5b                   	pop    ebx
c001436c:	5e                   	pop    esi
c001436d:	5f                   	pop    edi
c001436e:	5d                   	pop    ebp
c001436f:	c3                   	ret    

c0014370 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014370:	53                   	push   ebx
c0014371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014375:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014379:	80 f9 04             	cmp    cl,0x4
c001437c:	75 6a                	jne    c00143e8 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001437e:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0014383:	80 fa 01             	cmp    dl,0x1
c0014386:	0f 86 9b 02 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001438c:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c0014391:	80 fa 02             	cmp    dl,0x2
c0014394:	0f 84 8d 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001439a:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c001439f:	80 fa 03             	cmp    dl,0x3
c00143a2:	0f 84 7f 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143a8:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00143ad:	80 fa 04             	cmp    dl,0x4
c00143b0:	0f 84 71 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143b6:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00143bb:	80 fa 05             	cmp    dl,0x5
c00143be:	0f 84 63 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143c4:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c00143c9:	80 fa 07             	cmp    dl,0x7
c00143cc:	0f 84 55 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143d2:	8d 5a f8             	lea    ebx,[edx-0x8]
c00143d5:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00143da:	80 fb 01             	cmp    bl,0x1
c00143dd:	0f 87 e0 01 00 00    	ja     c00145c3 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00143e3:	e9 3f 02 00 00       	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143e8:	80 f9 05             	cmp    cl,0x5
c00143eb:	75 3e                	jne    c001442b <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00143ed:	8d 5a ff             	lea    ebx,[edx-0x1]
c00143f0:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00143f5:	80 fb 02             	cmp    bl,0x2
c00143f8:	0f 86 29 02 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143fe:	80 fa 04             	cmp    dl,0x4
c0014401:	0f 84 f1 01 00 00    	je     c00145f8 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c0014407:	80 fa 07             	cmp    dl,0x7
c001440a:	0f 84 17 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014410:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c0014415:	80 fa 08             	cmp    dl,0x8
c0014418:	0f 84 09 02 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001441e:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c0014423:	80 fa 09             	cmp    dl,0x9
c0014426:	e9 96 01 00 00       	jmp    c00145c1 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c001442b:	80 f9 06             	cmp    cl,0x6
c001442e:	0f 85 80 01 00 00    	jne    c00145b4 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014434:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c0014439:	80 fa 01             	cmp    dl,0x1
c001443c:	0f 84 e5 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014442:	8d 42 fb             	lea    eax,[edx-0x5]
c0014445:	3c 01                	cmp    al,0x1
c0014447:	0f 86 b2 01 00 00    	jbe    c00145ff <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001444d:	80 fa 03             	cmp    dl,0x3
c0014450:	0f 84 a9 01 00 00    	je     c00145ff <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014456:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014459:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c001445e:	80 fb 01             	cmp    bl,0x1
c0014461:	0f 86 c0 01 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014467:	80 fa 09             	cmp    dl,0x9
c001446a:	0f 84 96 01 00 00    	je     c0014606 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014470:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014473:	80 fb 01             	cmp    bl,0x1
c0014476:	0f 86 ab 01 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001447c:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c0014481:	80 fa 0d             	cmp    dl,0xd
c0014484:	0f 84 9d 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001448a:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c001448f:	80 fa 0e             	cmp    dl,0xe
c0014492:	0f 84 8f 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014498:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c001449d:	80 fa 0f             	cmp    dl,0xf
c00144a0:	0f 84 81 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a6:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c00144ab:	80 fa 15             	cmp    dl,0x15
c00144ae:	0f 84 73 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b4:	8d 5a ea             	lea    ebx,[edx-0x16]
c00144b7:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00144bc:	80 fb 01             	cmp    bl,0x1
c00144bf:	0f 86 62 01 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c5:	80 fa 1a             	cmp    dl,0x1a
c00144c8:	0f 84 3f 01 00 00    	je     c001460d <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00144ce:	80 fa 1c             	cmp    dl,0x1c
c00144d1:	0f 84 3d 01 00 00    	je     c0014614 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00144d7:	80 fa 1d             	cmp    dl,0x1d
c00144da:	0f 84 47 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e0:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c00144e5:	80 fa 25             	cmp    dl,0x25
c00144e8:	0f 84 39 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ee:	8d 5a da             	lea    ebx,[edx-0x26]
c00144f1:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144f6:	80 fb 01             	cmp    bl,0x1
c00144f9:	0f 86 28 01 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ff:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c0014504:	80 fa 2a             	cmp    dl,0x2a
c0014507:	0f 84 1a 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001450d:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c0014512:	80 fa 2c             	cmp    dl,0x2c
c0014515:	0f 84 0c 01 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001451b:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c0014520:	80 fa 2d             	cmp    dl,0x2d
c0014523:	0f 84 fe 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014529:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c001452e:	80 fa 2e             	cmp    dl,0x2e
c0014531:	0f 84 f0 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014537:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c001453c:	80 fa 2f             	cmp    dl,0x2f
c001453f:	0f 84 e2 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014545:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014548:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c001454d:	80 fb 01             	cmp    bl,0x1
c0014550:	0f 86 d1 00 00 00    	jbe    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014556:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c001455b:	80 fa 37             	cmp    dl,0x37
c001455e:	0f 84 c3 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014564:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014569:	80 fa 3a             	cmp    dl,0x3a
c001456c:	0f 84 b5 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014572:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c0014577:	80 fa 3c             	cmp    dl,0x3c
c001457a:	0f 84 a7 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014580:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0014585:	80 fa 3d             	cmp    dl,0x3d
c0014588:	0f 84 99 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458e:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014593:	80 fa 3e             	cmp    dl,0x3e
c0014596:	0f 84 8b 00 00 00    	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001459c:	8d 42 bb             	lea    eax,[edx-0x45]
c001459f:	3c 01                	cmp    al,0x1
c00145a1:	76 78                	jbe    c001461b <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c00145a3:	80 fa 3f             	cmp    dl,0x3f
c00145a6:	74 73                	je     c001461b <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c00145a8:	80 fa 4a             	cmp    dl,0x4a
c00145ab:	74 75                	je     c0014622 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c00145ad:	80 fa 4d             	cmp    dl,0x4d
c00145b0:	75 11                	jne    c00145c3 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00145b2:	eb 6e                	jmp    c0014622 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c00145b4:	80 f9 0b             	cmp    cl,0xb
c00145b7:	75 0a                	jne    c00145c3 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00145b9:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c00145be:	80 fa 01             	cmp    dl,0x1
c00145c1:	74 64                	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c3:	80 f9 0f             	cmp    cl,0xf
c00145c6:	b8 a0 3e 02 c0       	mov    eax,0xc0023ea0
c00145cb:	0f 94 c1             	sete   cl
c00145ce:	80 fa 02             	cmp    dl,0x2
c00145d1:	0f 96 c3             	setbe  bl
c00145d4:	84 cb                	test   bl,cl
c00145d6:	75 4f                	jne    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d8:	8d 42 fd             	lea    eax,[edx-0x3]
c00145db:	3c 01                	cmp    al,0x1
c00145dd:	0f 96 c0             	setbe  al
c00145e0:	80 fa 06             	cmp    dl,0x6
c00145e3:	0f 94 c2             	sete   dl
c00145e6:	09 c2                	or     edx,eax
c00145e8:	b8 d2 25 02 c0       	mov    eax,0xc00225d2
c00145ed:	84 ca                	test   dl,cl
c00145ef:	74 36                	je     c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f1:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c00145f6:	eb 2f                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f8:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c00145fd:	eb 28                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ff:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c0014604:	eb 21                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014606:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c001460b:	eb 1a                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001460d:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c0014612:	eb 13                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014614:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c0014619:	eb 0c                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001461b:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c0014620:	eb 05                	jmp    c0014627 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014622:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0014627:	5b                   	pop    ebx
c0014628:	c3                   	ret    

c0014629 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014629:	60                   	pusha  
c001462a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001462e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014636:	9c                   	pushf  
c0014637:	fa                   	cli    
c0014638:	0f 09                	wbinvd 
c001463a:	0f 30                	wrmsr  
c001463c:	9d                   	popf   
c001463d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014641:	89 02                	mov    DWORD PTR [edx],eax
c0014643:	61                   	popa   
c0014644:	c3                   	ret    

c0014645 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014645:	60                   	pusha  
c0014646:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001464a:	9c                   	pushf  
c001464b:	fa                   	cli    
c001464c:	0f 09                	wbinvd 
c001464e:	31 c0                	xor    eax,eax
c0014650:	31 d2                	xor    edx,edx
c0014652:	0f 32                	rdmsr  
c0014654:	9d                   	popf   
c0014655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014659:	89 02                	mov    DWORD PTR [edx],eax
c001465b:	61                   	popa   
c001465c:	c3                   	ret    

c001465d <AMD_K6_writeback(int, int, int)>:
c001465d:	56                   	push   esi
c001465e:	53                   	push   ebx
c001465f:	83 ec 10             	sub    esp,0x10
c0014662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014666:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001466b:	75 5d                	jne    c00146ca <AMD_K6_writeback(int, int, int)+0x6d>
c001466d:	83 f8 08             	cmp    eax,0x8
c0014670:	75 09                	jne    c001467b <AMD_K6_writeback(int, int, int)+0x1e>
c0014672:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014677:	7e 13                	jle    c001468c <AMD_K6_writeback(int, int, int)+0x2f>
c0014679:	eb 30                	jmp    c00146ab <AMD_K6_writeback(int, int, int)+0x4e>
c001467b:	83 f8 06             	cmp    eax,0x6
c001467e:	7c 4a                	jl     c00146ca <AMD_K6_writeback(int, int, int)+0x6d>
c0014680:	83 f8 07             	cmp    eax,0x7
c0014683:	7e 07                	jle    c001468c <AMD_K6_writeback(int, int, int)+0x2f>
c0014685:	83 f8 09             	cmp    eax,0x9
c0014688:	74 21                	je     c00146ab <AMD_K6_writeback(int, int, int)+0x4e>
c001468a:	eb 3e                	jmp    c00146ca <AMD_K6_writeback(int, int, int)+0x6d>
c001468c:	89 e6                	mov    esi,esp
c001468e:	8b 1d e4 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245e4
c0014694:	c1 eb 15             	shr    ebx,0x15
c0014697:	56                   	push   esi
c0014698:	68 82 00 00 c0       	push   0xc0000082
c001469d:	e8 a3 ff ff ff       	call   c0014645 <AMD_K6_read_msr(unsigned int, REGS*)>
c00146a2:	56                   	push   esi
c00146a3:	83 e3 7e             	and    ebx,0x7e
c00146a6:	6a 00                	push   0x0
c00146a8:	53                   	push   ebx
c00146a9:	eb 12                	jmp    c00146bd <AMD_K6_writeback(int, int, int)+0x60>
c00146ab:	89 e3                	mov    ebx,esp
c00146ad:	53                   	push   ebx
c00146ae:	68 82 00 00 c0       	push   0xc0000082
c00146b3:	e8 8d ff ff ff       	call   c0014645 <AMD_K6_read_msr(unsigned int, REGS*)>
c00146b8:	53                   	push   ebx
c00146b9:	6a 00                	push   0x0
c00146bb:	6a 00                	push   0x0
c00146bd:	68 82 00 00 c0       	push   0xc0000082
c00146c2:	e8 62 ff ff ff       	call   c0014629 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00146c7:	83 c4 18             	add    esp,0x18
c00146ca:	83 c4 10             	add    esp,0x10
c00146cd:	5b                   	pop    ebx
c00146ce:	5e                   	pop    esi
c00146cf:	c3                   	ret    

c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00146d0:	55                   	push   ebp
c00146d1:	57                   	push   edi
c00146d2:	56                   	push   esi
c00146d3:	53                   	push   ebx
c00146d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00146dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00146e0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146e4:	39 05 c0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fc0,eax
c00146ea:	75 23                	jne    c001470f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00146ec:	a1 ec 4f 02 c0       	mov    eax,ds:0xc0024fec
c00146f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146f5:	89 06                	mov    DWORD PTR [esi],eax
c00146f7:	a1 e8 4f 02 c0       	mov    eax,ds:0xc0024fe8
c00146fc:	89 07                	mov    DWORD PTR [edi],eax
c00146fe:	a1 e4 4f 02 c0       	mov    eax,ds:0xc0024fe4
c0014703:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014706:	a1 e0 4f 02 c0       	mov    eax,ds:0xc0024fe0
c001470b:	89 02                	mov    DWORD PTR [edx],eax
c001470d:	eb 3f                	jmp    c001474e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001470f:	31 c9                	xor    ecx,ecx
c0014711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014715:	0f a2                	cpuid  
c0014717:	89 06                	mov    DWORD PTR [esi],eax
c0014719:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001471d:	89 1f                	mov    DWORD PTR [edi],ebx
c001471f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014722:	89 10                	mov    DWORD PTR [eax],edx
c0014724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014728:	a3 c0 3f 02 c0       	mov    ds:0xc0023fc0,eax
c001472d:	8b 06                	mov    eax,DWORD PTR [esi]
c001472f:	a3 ec 4f 02 c0       	mov    ds:0xc0024fec,eax
c0014734:	8b 07                	mov    eax,DWORD PTR [edi]
c0014736:	a3 e8 4f 02 c0       	mov    ds:0xc0024fe8,eax
c001473b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001473e:	a3 e4 4f 02 c0       	mov    ds:0xc0024fe4,eax
c0014743:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014747:	8b 00                	mov    eax,DWORD PTR [eax]
c0014749:	a3 e0 4f 02 c0       	mov    ds:0xc0024fe0,eax
c001474e:	5b                   	pop    ebx
c001474f:	5e                   	pop    esi
c0014750:	5f                   	pop    edi
c0014751:	5d                   	pop    ebp
c0014752:	c3                   	ret    

c0014753 <cpuidCheckEDX(unsigned int)>:
c0014753:	83 ec 10             	sub    esp,0x10
c0014756:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001475a:	50                   	push   eax
c001475b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001475f:	50                   	push   eax
c0014760:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014764:	50                   	push   eax
c0014765:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014769:	50                   	push   eax
c001476a:	6a 01                	push   0x1
c001476c:	e8 5f ff ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014775:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014779:	0f 95 c0             	setne  al
c001477c:	83 c4 24             	add    esp,0x24
c001477f:	c3                   	ret    

c0014780 <cpuidCheckECX(unsigned int)>:
c0014780:	83 ec 10             	sub    esp,0x10
c0014783:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014787:	50                   	push   eax
c0014788:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001478c:	50                   	push   eax
c001478d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014791:	50                   	push   eax
c0014792:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014796:	50                   	push   eax
c0014797:	6a 01                	push   0x1
c0014799:	e8 32 ff ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001479e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147a2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00147a6:	0f 95 c0             	setne  al
c00147a9:	83 c4 24             	add    esp,0x24
c00147ac:	c3                   	ret    

c00147ad <cpuidCheckExtendedEBX(unsigned int)>:
c00147ad:	83 ec 10             	sub    esp,0x10
c00147b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b4:	50                   	push   eax
c00147b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147b9:	50                   	push   eax
c00147ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147be:	50                   	push   eax
c00147bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147c3:	50                   	push   eax
c00147c4:	6a 07                	push   0x7
c00147c6:	e8 05 ff ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147cf:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00147d3:	0f 95 c0             	setne  al
c00147d6:	83 c4 24             	add    esp,0x24
c00147d9:	c3                   	ret    

c00147da <cpuidCheckExtendedECX(unsigned int)>:
c00147da:	83 ec 10             	sub    esp,0x10
c00147dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147e1:	50                   	push   eax
c00147e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147e6:	50                   	push   eax
c00147e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147eb:	50                   	push   eax
c00147ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147f0:	50                   	push   eax
c00147f1:	6a 07                	push   0x7
c00147f3:	e8 d8 fe ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147fc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014800:	0f 95 c0             	setne  al
c0014803:	83 c4 24             	add    esp,0x24
c0014806:	c3                   	ret    

c0014807 <getCPUNumber()>:
c0014807:	31 c0                	xor    eax,eax
c0014809:	c3                   	ret    

c001480a <thisCPU()>:
c001480a:	e8 f8 ff ff ff       	call   c0014807 <getCPUNumber()>
c001480f:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c0014815:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001481c:	c3                   	ret    
c001481d:	90                   	nop

c001481e <CPU::CPU()>:
c001481e:	83 ec 0c             	sub    esp,0xc
c0014821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014825:	83 ec 08             	sub    esp,0x8
c0014828:	68 d2 25 02 c0       	push   0xc00225d2
c001482d:	50                   	push   eax
c001482e:	e8 19 bf ff ff       	call   c001074c <Device::Device(char const*)>
c0014833:	83 c4 10             	add    esp,0x10
c0014836:	ba ac 26 02 c0       	mov    edx,0xc00226ac
c001483b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483f:	89 10                	mov    DWORD PTR [eax],edx
c0014841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014845:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001484f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014853:	05 78 01 00 00       	add    eax,0x178
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	50                   	push   eax
c001485c:	e8 89 6f ff ff       	call   c000b7ea <GDT::GDT()>
c0014861:	83 c4 10             	add    esp,0x10
c0014864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014868:	05 7c 09 00 00       	add    eax,0x97c
c001486d:	83 ec 0c             	sub    esp,0xc
c0014870:	50                   	push   eax
c0014871:	e8 d4 71 ff ff       	call   c000ba4a <IDT::IDT()>
c0014876:	83 c4 10             	add    esp,0x10
c0014879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487d:	05 7c 11 00 00       	add    eax,0x117c
c0014882:	83 ec 0c             	sub    esp,0xc
c0014885:	50                   	push   eax
c0014886:	e8 31 92 ff ff       	call   c000dabc <TSS::TSS()>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014892:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00148a7:	90                   	nop
c00148a8:	83 c4 0c             	add    esp,0xc
c00148ab:	c3                   	ret    

c00148ac <CPU::displayFeatures()>:
c00148ac:	53                   	push   ebx
c00148ad:	83 ec 10             	sub    esp,0x10
c00148b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148b4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00148ba:	68 e0 22 02 c0       	push   0xc00222e0
c00148bf:	e8 83 a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00148c4:	59                   	pop    ecx
c00148c5:	58                   	pop    eax
c00148c6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00148cc:	50                   	push   eax
c00148cd:	68 f1 22 02 c0       	push   0xc00222f1
c00148d2:	e8 70 a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00148d7:	58                   	pop    eax
c00148d8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148de:	c1 e8 0e             	shr    eax,0xe
c00148e1:	5a                   	pop    edx
c00148e2:	0f b6 c0             	movzx  eax,al
c00148e5:	50                   	push   eax
c00148e6:	68 02 23 02 c0       	push   0xc0022302
c00148eb:	e8 57 a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00148f0:	59                   	pop    ecx
c00148f1:	58                   	pop    eax
c00148f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148f8:	66 c1 e8 06          	shr    ax,0x6
c00148fc:	0f b6 c0             	movzx  eax,al
c00148ff:	50                   	push   eax
c0014900:	68 13 23 02 c0       	push   0xc0022313
c0014905:	e8 3d a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001490a:	c7 04 24 26 27 02 c0 	mov    DWORD PTR [esp],0xc0022726
c0014911:	e8 31 a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c001491e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014925:	74 05                	je     c001492c <CPU::displayFeatures()+0x80>
c0014927:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c001492c:	52                   	push   edx
c001492d:	52                   	push   edx
c001492e:	50                   	push   eax
c001492f:	68 24 23 02 c0       	push   0xc0022324
c0014934:	e8 0e a8 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014941:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014948:	78 05                	js     c001494f <CPU::displayFeatures()+0xa3>
c001494a:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c001494f:	51                   	push   ecx
c0014950:	51                   	push   ecx
c0014951:	50                   	push   eax
c0014952:	68 3b 23 02 c0       	push   0xc002233b
c0014957:	e8 eb a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001495c:	83 c4 10             	add    esp,0x10
c001495f:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014964:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001496b:	75 05                	jne    c0014972 <CPU::displayFeatures()+0xc6>
c001496d:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014972:	52                   	push   edx
c0014973:	52                   	push   edx
c0014974:	50                   	push   eax
c0014975:	68 52 23 02 c0       	push   0xc0022352
c001497a:	e8 c8 a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014987:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001498e:	75 05                	jne    c0014995 <CPU::displayFeatures()+0xe9>
c0014990:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014995:	51                   	push   ecx
c0014996:	51                   	push   ecx
c0014997:	50                   	push   eax
c0014998:	68 69 23 02 c0       	push   0xc0022369
c001499d:	e8 a5 a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00149a2:	83 c4 10             	add    esp,0x10
c00149a5:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c00149aa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00149b1:	75 05                	jne    c00149b8 <CPU::displayFeatures()+0x10c>
c00149b3:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c00149b8:	52                   	push   edx
c00149b9:	52                   	push   edx
c00149ba:	50                   	push   eax
c00149bb:	68 80 23 02 c0       	push   0xc0022380
c00149c0:	e8 82 a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c00149cd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00149d4:	75 05                	jne    c00149db <CPU::displayFeatures()+0x12f>
c00149d6:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c00149db:	51                   	push   ecx
c00149dc:	51                   	push   ecx
c00149dd:	50                   	push   eax
c00149de:	68 97 23 02 c0       	push   0xc0022397
c00149e3:	e8 5f a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00149e8:	83 c4 10             	add    esp,0x10
c00149eb:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c00149f0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00149f7:	75 05                	jne    c00149fe <CPU::displayFeatures()+0x152>
c00149f9:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c00149fe:	52                   	push   edx
c00149ff:	52                   	push   edx
c0014a00:	50                   	push   eax
c0014a01:	68 ae 23 02 c0       	push   0xc00223ae
c0014a06:	e8 3c a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014a0b:	83 c4 10             	add    esp,0x10
c0014a0e:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014a13:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014a1a:	75 05                	jne    c0014a21 <CPU::displayFeatures()+0x175>
c0014a1c:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014a21:	51                   	push   ecx
c0014a22:	51                   	push   ecx
c0014a23:	50                   	push   eax
c0014a24:	68 c5 23 02 c0       	push   0xc00223c5
c0014a29:	e8 19 a7 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014a36:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014a3d:	75 05                	jne    c0014a44 <CPU::displayFeatures()+0x198>
c0014a3f:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014a44:	52                   	push   edx
c0014a45:	52                   	push   edx
c0014a46:	50                   	push   eax
c0014a47:	68 dc 23 02 c0       	push   0xc00223dc
c0014a4c:	e8 f6 a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014a59:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014a60:	75 05                	jne    c0014a67 <CPU::displayFeatures()+0x1bb>
c0014a62:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014a67:	51                   	push   ecx
c0014a68:	51                   	push   ecx
c0014a69:	50                   	push   eax
c0014a6a:	68 f3 23 02 c0       	push   0xc00223f3
c0014a6f:	e8 d3 a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014a7c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a83:	75 05                	jne    c0014a8a <CPU::displayFeatures()+0x1de>
c0014a85:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014a8a:	52                   	push   edx
c0014a8b:	52                   	push   edx
c0014a8c:	50                   	push   eax
c0014a8d:	68 0a 24 02 c0       	push   0xc002240a
c0014a92:	e8 b0 a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014a97:	83 c4 10             	add    esp,0x10
c0014a9a:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014a9f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014aa6:	75 05                	jne    c0014aad <CPU::displayFeatures()+0x201>
c0014aa8:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014aad:	51                   	push   ecx
c0014aae:	51                   	push   ecx
c0014aaf:	50                   	push   eax
c0014ab0:	68 21 24 02 c0       	push   0xc0022421
c0014ab5:	e8 8d a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014ac2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014ac9:	75 05                	jne    c0014ad0 <CPU::displayFeatures()+0x224>
c0014acb:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014ad0:	52                   	push   edx
c0014ad1:	52                   	push   edx
c0014ad2:	50                   	push   eax
c0014ad3:	68 38 24 02 c0       	push   0xc0022438
c0014ad8:	e8 6a a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014add:	83 c4 10             	add    esp,0x10
c0014ae0:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014ae5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014aec:	78 05                	js     c0014af3 <CPU::displayFeatures()+0x247>
c0014aee:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014af3:	51                   	push   ecx
c0014af4:	51                   	push   ecx
c0014af5:	50                   	push   eax
c0014af6:	68 4f 24 02 c0       	push   0xc002244f
c0014afb:	e8 47 a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014b00:	83 c4 10             	add    esp,0x10
c0014b03:	b8 ee 0f 02 c0       	mov    eax,0xc0020fee
c0014b08:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014b0f:	75 05                	jne    c0014b16 <CPU::displayFeatures()+0x26a>
c0014b11:	b8 f2 0f 02 c0       	mov    eax,0xc0020ff2
c0014b16:	52                   	push   edx
c0014b17:	52                   	push   edx
c0014b18:	50                   	push   eax
c0014b19:	68 66 24 02 c0       	push   0xc0022466
c0014b1e:	e8 24 a6 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0014b23:	83 c4 18             	add    esp,0x18
c0014b26:	5b                   	pop    ebx
c0014b27:	c3                   	ret    

c0014b28 <CPU::detectFeatures()>:
c0014b28:	55                   	push   ebp
c0014b29:	57                   	push   edi
c0014b2a:	56                   	push   esi
c0014b2b:	53                   	push   ebx
c0014b2c:	83 ec 50             	sub    esp,0x50
c0014b2f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014b33:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014b3d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014b44:	6a 0d                	push   0xd
c0014b46:	6a 00                	push   0x0
c0014b48:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014b4e:	57                   	push   edi
c0014b4f:	e8 66 bb fe ff       	call   c00006ba <memset>
c0014b54:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0014b59:	83 c4 10             	add    esp,0x10
c0014b5c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014b63:	0f 84 04 09 00 00    	je     c001546d <CPU::detectFeatures()+0x945>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	6a 10                	push   0x10
c0014b6e:	e8 e0 fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014b73:	83 e0 01             	and    eax,0x1
c0014b76:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b79:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b7f:	83 e0 fd             	and    eax,0xfffffffd
c0014b82:	09 d0                	or     eax,edx
c0014b84:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b8a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014b91:	e8 bd fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014b96:	83 e0 01             	and    eax,0x1
c0014b99:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014ba0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ba6:	83 e0 fb             	and    eax,0xfffffffb
c0014ba9:	09 d0                	or     eax,edx
c0014bab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bb1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014bb8:	e8 96 fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014bbd:	83 e0 01             	and    eax,0x1
c0014bc0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014bc7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bcd:	83 e0 f7             	and    eax,0xfffffff7
c0014bd0:	09 d0                	or     eax,edx
c0014bd2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bd8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014bdf:	e8 6f fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014be4:	83 e0 01             	and    eax,0x1
c0014be7:	c1 e0 04             	shl    eax,0x4
c0014bea:	88 c2                	mov    dl,al
c0014bec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bf2:	83 e0 ef             	and    eax,0xffffffef
c0014bf5:	09 d0                	or     eax,edx
c0014bf7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bfd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014c04:	e8 4a fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014c09:	83 e0 01             	and    eax,0x1
c0014c0c:	c1 e0 05             	shl    eax,0x5
c0014c0f:	88 c2                	mov    dl,al
c0014c11:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c17:	83 e0 df             	and    eax,0xffffffdf
c0014c1a:	09 d0                	or     eax,edx
c0014c1c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c22:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014c29:	e8 25 fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014c2e:	83 e0 01             	and    eax,0x1
c0014c31:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c34:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014c3a:	83 e0 fd             	and    eax,0xfffffffd
c0014c3d:	09 d0                	or     eax,edx
c0014c3f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014c45:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014c4c:	e8 02 fb ff ff       	call   c0014753 <cpuidCheckEDX(unsigned int)>
c0014c51:	83 e0 01             	and    eax,0x1
c0014c54:	c1 e0 06             	shl    eax,0x6
c0014c57:	88 c2                	mov    dl,al
c0014c59:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014c5f:	83 e0 bf             	and    eax,0xffffffbf
c0014c62:	09 d0                	or     eax,edx
c0014c64:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c6a:	58                   	pop    eax
c0014c6b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c6f:	56                   	push   esi
c0014c70:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c74:	55                   	push   ebp
c0014c75:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c79:	50                   	push   eax
c0014c7a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c7e:	52                   	push   edx
c0014c7f:	6a 00                	push   0x0
c0014c81:	e8 4a fa ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c86:	83 c4 1c             	add    esp,0x1c
c0014c89:	6a 04                	push   0x4
c0014c8b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014c8f:	50                   	push   eax
c0014c90:	57                   	push   edi
c0014c91:	e8 ee b9 fe ff       	call   c0000684 <memcpy>
c0014c96:	83 c4 0c             	add    esp,0xc
c0014c99:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c9f:	6a 04                	push   0x4
c0014ca1:	56                   	push   esi
c0014ca2:	50                   	push   eax
c0014ca3:	e8 dc b9 fe ff       	call   c0000684 <memcpy>
c0014ca8:	83 c4 0c             	add    esp,0xc
c0014cab:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014cb1:	6a 04                	push   0x4
c0014cb3:	55                   	push   ebp
c0014cb4:	50                   	push   eax
c0014cb5:	e8 ca b9 fe ff       	call   c0000684 <memcpy>
c0014cba:	58                   	pop    eax
c0014cbb:	5a                   	pop    edx
c0014cbc:	68 7d 24 02 c0       	push   0xc002247d
c0014cc1:	57                   	push   edi
c0014cc2:	e8 e3 ba fe ff       	call   c00007aa <strcmp>
c0014cc7:	83 c4 10             	add    esp,0x10
c0014cca:	85 c0                	test   eax,eax
c0014ccc:	75 0f                	jne    c0014cdd <CPU::detectFeatures()+0x1b5>
c0014cce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014cd8:	e9 22 02 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014cdd:	50                   	push   eax
c0014cde:	50                   	push   eax
c0014cdf:	68 8a 24 02 c0       	push   0xc002248a
c0014ce4:	57                   	push   edi
c0014ce5:	e8 c0 ba fe ff       	call   c00007aa <strcmp>
c0014cea:	83 c4 10             	add    esp,0x10
c0014ced:	85 c0                	test   eax,eax
c0014cef:	74 dd                	je     c0014cce <CPU::detectFeatures()+0x1a6>
c0014cf1:	51                   	push   ecx
c0014cf2:	51                   	push   ecx
c0014cf3:	68 97 24 02 c0       	push   0xc0022497
c0014cf8:	57                   	push   edi
c0014cf9:	e8 ac ba fe ff       	call   c00007aa <strcmp>
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	85 c0                	test   eax,eax
c0014d03:	74 2a                	je     c0014d2f <CPU::detectFeatures()+0x207>
c0014d05:	52                   	push   edx
c0014d06:	52                   	push   edx
c0014d07:	68 a4 24 02 c0       	push   0xc00224a4
c0014d0c:	57                   	push   edi
c0014d0d:	e8 98 ba fe ff       	call   c00007aa <strcmp>
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	85 c0                	test   eax,eax
c0014d17:	74 16                	je     c0014d2f <CPU::detectFeatures()+0x207>
c0014d19:	50                   	push   eax
c0014d1a:	50                   	push   eax
c0014d1b:	68 b1 24 02 c0       	push   0xc00224b1
c0014d20:	57                   	push   edi
c0014d21:	e8 84 ba fe ff       	call   c00007aa <strcmp>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	85 c0                	test   eax,eax
c0014d2b:	74 48                	je     c0014d75 <CPU::detectFeatures()+0x24d>
c0014d2d:	eb 0f                	jmp    c0014d3e <CPU::detectFeatures()+0x216>
c0014d2f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014d39:	e9 c1 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014d3e:	50                   	push   eax
c0014d3f:	50                   	push   eax
c0014d40:	68 be 24 02 c0       	push   0xc00224be
c0014d45:	57                   	push   edi
c0014d46:	e8 5f ba fe ff       	call   c00007aa <strcmp>
c0014d4b:	83 c4 10             	add    esp,0x10
c0014d4e:	85 c0                	test   eax,eax
c0014d50:	74 23                	je     c0014d75 <CPU::detectFeatures()+0x24d>
c0014d52:	50                   	push   eax
c0014d53:	50                   	push   eax
c0014d54:	68 cb 24 02 c0       	push   0xc00224cb
c0014d59:	57                   	push   edi
c0014d5a:	e8 4b ba fe ff       	call   c00007aa <strcmp>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	85 c0                	test   eax,eax
c0014d64:	75 1e                	jne    c0014d84 <CPU::detectFeatures()+0x25c>
c0014d66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d70:	e9 8a 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014d75:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d7f:	e9 7b 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014d84:	50                   	push   eax
c0014d85:	50                   	push   eax
c0014d86:	68 d8 24 02 c0       	push   0xc00224d8
c0014d8b:	57                   	push   edi
c0014d8c:	e8 19 ba fe ff       	call   c00007aa <strcmp>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	85 c0                	test   eax,eax
c0014d96:	75 0f                	jne    c0014da7 <CPU::detectFeatures()+0x27f>
c0014d98:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014da2:	e9 58 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014da7:	50                   	push   eax
c0014da8:	50                   	push   eax
c0014da9:	68 97 24 02 c0       	push   0xc0022497
c0014dae:	57                   	push   edi
c0014daf:	e8 f6 b9 fe ff       	call   c00007aa <strcmp>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	85 c0                	test   eax,eax
c0014db9:	75 0f                	jne    c0014dca <CPU::detectFeatures()+0x2a2>
c0014dbb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014dc5:	e9 35 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014dca:	50                   	push   eax
c0014dcb:	50                   	push   eax
c0014dcc:	68 e5 24 02 c0       	push   0xc00224e5
c0014dd1:	57                   	push   edi
c0014dd2:	e8 d3 b9 fe ff       	call   c00007aa <strcmp>
c0014dd7:	83 c4 10             	add    esp,0x10
c0014dda:	85 c0                	test   eax,eax
c0014ddc:	75 0f                	jne    c0014ded <CPU::detectFeatures()+0x2c5>
c0014dde:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014de8:	e9 12 01 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014ded:	51                   	push   ecx
c0014dee:	51                   	push   ecx
c0014def:	68 f2 24 02 c0       	push   0xc00224f2
c0014df4:	57                   	push   edi
c0014df5:	e8 b0 b9 fe ff       	call   c00007aa <strcmp>
c0014dfa:	83 c4 10             	add    esp,0x10
c0014dfd:	85 c0                	test   eax,eax
c0014dff:	75 0f                	jne    c0014e10 <CPU::detectFeatures()+0x2e8>
c0014e01:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014e0b:	e9 ef 00 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014e10:	52                   	push   edx
c0014e11:	52                   	push   edx
c0014e12:	68 ff 24 02 c0       	push   0xc00224ff
c0014e17:	57                   	push   edi
c0014e18:	e8 8d b9 fe ff       	call   c00007aa <strcmp>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	85 c0                	test   eax,eax
c0014e22:	75 0f                	jne    c0014e33 <CPU::detectFeatures()+0x30b>
c0014e24:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014e2e:	e9 cc 00 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014e33:	50                   	push   eax
c0014e34:	50                   	push   eax
c0014e35:	68 0c 25 02 c0       	push   0xc002250c
c0014e3a:	57                   	push   edi
c0014e3b:	e8 6a b9 fe ff       	call   c00007aa <strcmp>
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	85 c0                	test   eax,eax
c0014e45:	75 0f                	jne    c0014e56 <CPU::detectFeatures()+0x32e>
c0014e47:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014e51:	e9 a9 00 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014e56:	50                   	push   eax
c0014e57:	50                   	push   eax
c0014e58:	68 19 25 02 c0       	push   0xc0022519
c0014e5d:	57                   	push   edi
c0014e5e:	e8 47 b9 fe ff       	call   c00007aa <strcmp>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	85 c0                	test   eax,eax
c0014e68:	75 0f                	jne    c0014e79 <CPU::detectFeatures()+0x351>
c0014e6a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e74:	e9 86 00 00 00       	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014e79:	50                   	push   eax
c0014e7a:	50                   	push   eax
c0014e7b:	68 26 25 02 c0       	push   0xc0022526
c0014e80:	57                   	push   edi
c0014e81:	e8 24 b9 fe ff       	call   c00007aa <strcmp>
c0014e86:	83 c4 10             	add    esp,0x10
c0014e89:	85 c0                	test   eax,eax
c0014e8b:	75 0c                	jne    c0014e99 <CPU::detectFeatures()+0x371>
c0014e8d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014e97:	eb 66                	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014e99:	50                   	push   eax
c0014e9a:	50                   	push   eax
c0014e9b:	68 33 25 02 c0       	push   0xc0022533
c0014ea0:	57                   	push   edi
c0014ea1:	e8 04 b9 fe ff       	call   c00007aa <strcmp>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	85 c0                	test   eax,eax
c0014eab:	75 0c                	jne    c0014eb9 <CPU::detectFeatures()+0x391>
c0014ead:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014eb7:	eb 46                	jmp    c0014eff <CPU::detectFeatures()+0x3d7>
c0014eb9:	50                   	push   eax
c0014eba:	50                   	push   eax
c0014ebb:	68 40 25 02 c0       	push   0xc0022540
c0014ec0:	57                   	push   edi
c0014ec1:	e8 e4 b8 fe ff       	call   c00007aa <strcmp>
c0014ec6:	83 c4 10             	add    esp,0x10
c0014ec9:	85 c0                	test   eax,eax
c0014ecb:	74 e0                	je     c0014ead <CPU::detectFeatures()+0x385>
c0014ecd:	50                   	push   eax
c0014ece:	50                   	push   eax
c0014ecf:	68 4d 25 02 c0       	push   0xc002254d
c0014ed4:	57                   	push   edi
c0014ed5:	e8 d0 b8 fe ff       	call   c00007aa <strcmp>
c0014eda:	83 c4 10             	add    esp,0x10
c0014edd:	85 c0                	test   eax,eax
c0014edf:	74 cc                	je     c0014ead <CPU::detectFeatures()+0x385>
c0014ee1:	51                   	push   ecx
c0014ee2:	51                   	push   ecx
c0014ee3:	68 5a 25 02 c0       	push   0xc002255a
c0014ee8:	57                   	push   edi
c0014ee9:	e8 bc b8 fe ff       	call   c00007aa <strcmp>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	85 c0                	test   eax,eax
c0014ef3:	74 b8                	je     c0014ead <CPU::detectFeatures()+0x385>
c0014ef5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014eff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014f04:	0f 86 be 00 00 00    	jbe    c0014fc8 <CPU::detectFeatures()+0x4a0>
c0014f0a:	83 ec 0c             	sub    esp,0xc
c0014f0d:	68 80 00 00 00       	push   0x80
c0014f12:	e8 96 f8 ff ff       	call   c00147ad <cpuidCheckExtendedEBX(unsigned int)>
c0014f17:	83 e0 01             	and    eax,0x1
c0014f1a:	c1 e0 06             	shl    eax,0x6
c0014f1d:	88 c2                	mov    dl,al
c0014f1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f25:	83 e0 bf             	and    eax,0xffffffbf
c0014f28:	09 d0                	or     eax,edx
c0014f2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f30:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014f37:	e8 71 f8 ff ff       	call   c00147ad <cpuidCheckExtendedEBX(unsigned int)>
c0014f3c:	83 e0 01             	and    eax,0x1
c0014f3f:	c1 e0 04             	shl    eax,0x4
c0014f42:	88 c2                	mov    dl,al
c0014f44:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f4a:	83 e0 ef             	and    eax,0xffffffef
c0014f4d:	09 d0                	or     eax,edx
c0014f4f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f55:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014f5c:	e8 4c f8 ff ff       	call   c00147ad <cpuidCheckExtendedEBX(unsigned int)>
c0014f61:	c1 e0 07             	shl    eax,0x7
c0014f64:	88 c2                	mov    dl,al
c0014f66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f6c:	83 e0 7f             	and    eax,0x7f
c0014f6f:	09 d0                	or     eax,edx
c0014f71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f7e:	e8 57 f8 ff ff       	call   c00147da <cpuidCheckExtendedECX(unsigned int)>
c0014f83:	83 e0 01             	and    eax,0x1
c0014f86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f8d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f93:	83 e0 f7             	and    eax,0xfffffff7
c0014f96:	09 d0                	or     eax,edx
c0014f98:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f9e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014fa5:	e8 30 f8 ff ff       	call   c00147da <cpuidCheckExtendedECX(unsigned int)>
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	83 e0 01             	and    eax,0x1
c0014fb0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014fb7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014fbd:	83 e0 fb             	and    eax,0xfffffffb
c0014fc0:	09 d0                	or     eax,edx
c0014fc2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	56                   	push   esi
c0014fcc:	55                   	push   ebp
c0014fcd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014fd1:	57                   	push   edi
c0014fd2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014fd6:	50                   	push   eax
c0014fd7:	6a 01                	push   0x1
c0014fd9:	e8 f2 f6 ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014fde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014fe8:	88 c1                	mov    cl,al
c0014fea:	83 e2 f0             	and    edx,0xfffffff0
c0014fed:	83 e1 0f             	and    ecx,0xf
c0014ff0:	09 ca                	or     edx,ecx
c0014ff2:	88 c1                	mov    cl,al
c0014ff4:	c0 e9 04             	shr    cl,0x4
c0014ff7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014ffd:	0f b6 d1             	movzx  edx,cl
c0015000:	c1 e2 06             	shl    edx,0x6
c0015003:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0015007:	89 d5                	mov    ebp,edx
c0015009:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001500f:	66 81 e2 3f c0       	and    dx,0xc03f
c0015014:	83 c4 20             	add    esp,0x20
c0015017:	09 ea                	or     edx,ebp
c0015019:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0015020:	89 c2                	mov    edx,eax
c0015022:	c1 ea 08             	shr    edx,0x8
c0015025:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001502b:	83 e2 0f             	and    edx,0xf
c001502e:	83 e1 3f             	and    ecx,0x3f
c0015031:	89 d5                	mov    ebp,edx
c0015033:	c1 e5 06             	shl    ebp,0x6
c0015036:	09 cd                	or     ebp,ecx
c0015038:	89 e9                	mov    ecx,ebp
c001503a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015040:	88 d1                	mov    cl,dl
c0015042:	c0 e9 02             	shr    cl,0x2
c0015045:	89 cd                	mov    ebp,ecx
c0015047:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001504d:	83 e1 c0             	and    ecx,0xffffffc0
c0015050:	09 cd                	or     ebp,ecx
c0015052:	89 e9                	mov    ecx,ebp
c0015054:	89 c5                	mov    ebp,eax
c0015056:	c1 ed 0c             	shr    ebp,0xc
c0015059:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001505f:	83 e5 03             	and    ebp,0x3
c0015062:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015068:	c1 e5 04             	shl    ebp,0x4
c001506b:	83 e1 cf             	and    ecx,0xffffffcf
c001506e:	09 cd                	or     ebp,ecx
c0015070:	80 fa 06             	cmp    dl,0x6
c0015073:	89 e9                	mov    ecx,ebp
c0015075:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001507b:	74 05                	je     c0015082 <CPU::detectFeatures()+0x55a>
c001507d:	80 fa 0f             	cmp    dl,0xf
c0015080:	75 5d                	jne    c00150df <CPU::detectFeatures()+0x5b7>
c0015082:	89 c5                	mov    ebp,eax
c0015084:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015088:	c1 ed 10             	shr    ebp,0x10
c001508b:	c1 e5 04             	shl    ebp,0x4
c001508e:	09 e9                	or     ecx,ebp
c0015090:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015096:	0f b6 c9             	movzx  ecx,cl
c0015099:	c1 e1 06             	shl    ecx,0x6
c001509c:	66 81 e5 3f c0       	and    bp,0xc03f
c00150a1:	09 e9                	or     ecx,ebp
c00150a3:	80 fa 0f             	cmp    dl,0xf
c00150a6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00150ad:	75 30                	jne    c00150df <CPU::detectFeatures()+0x5b7>
c00150af:	c1 e8 14             	shr    eax,0x14
c00150b2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00150b8:	83 c0 0f             	add    eax,0xf
c00150bb:	83 e2 3f             	and    edx,0x3f
c00150be:	88 c1                	mov    cl,al
c00150c0:	c1 e1 06             	shl    ecx,0x6
c00150c3:	c0 e8 02             	shr    al,0x2
c00150c6:	09 ca                	or     edx,ecx
c00150c8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00150ce:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00150d4:	83 e2 c0             	and    edx,0xffffffc0
c00150d7:	09 d0                	or     eax,edx
c00150d9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00150e9:	56                   	push   esi
c00150ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150ee:	50                   	push   eax
c00150ef:	57                   	push   edi
c00150f0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00150f4:	55                   	push   ebp
c00150f5:	68 00 00 00 80       	push   0x80000000
c00150fa:	e8 d1 f5 ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150ff:	83 c4 20             	add    esp,0x20
c0015102:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001510a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001510e:	76 1e                	jbe    c001512e <CPU::detectFeatures()+0x606>
c0015110:	83 ec 0c             	sub    esp,0xc
c0015113:	56                   	push   esi
c0015114:	50                   	push   eax
c0015115:	57                   	push   edi
c0015116:	55                   	push   ebp
c0015117:	68 01 00 00 80       	push   0x80000001
c001511c:	e8 af f5 ff ff       	call   c00146d0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015121:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001512b:	83 c4 20             	add    esp,0x20
c001512e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015134:	83 f8 01             	cmp    eax,0x1
c0015137:	75 6f                	jne    c00151a8 <CPU::detectFeatures()+0x680>
c0015139:	51                   	push   ecx
c001513a:	51                   	push   ecx
c001513b:	68 66 25 02 c0       	push   0xc0022566
c0015140:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015144:	56                   	push   esi
c0015145:	e8 0f b6 fe ff       	call   c0000759 <strcpy>
c001514a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015150:	5f                   	pop    edi
c0015151:	66 c1 e8 06          	shr    ax,0x6
c0015155:	5d                   	pop    ebp
c0015156:	0f b6 c0             	movzx  eax,al
c0015159:	50                   	push   eax
c001515a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015160:	c1 e8 0e             	shr    eax,0xe
c0015163:	0f b6 c0             	movzx  eax,al
c0015166:	50                   	push   eax
c0015167:	e8 04 f2 ff ff       	call   c0014370 <lookupIntelCPUName(unsigned char, unsigned char)>
c001516c:	5a                   	pop    edx
c001516d:	59                   	pop    ecx
c001516e:	50                   	push   eax
c001516f:	56                   	push   esi
c0015170:	e8 9b b6 fe ff       	call   c0000810 <strcat>
c0015175:	5f                   	pop    edi
c0015176:	5d                   	pop    ebp
c0015177:	56                   	push   esi
c0015178:	53                   	push   ebx
c0015179:	e8 c0 b5 ff ff       	call   c001073e <Device::setName(char const*)>
c001517e:	58                   	pop    eax
c001517f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015185:	5a                   	pop    edx
c0015186:	68 6d 25 02 c0       	push   0xc002256d
c001518b:	50                   	push   eax
c001518c:	e8 19 b6 fe ff       	call   c00007aa <strcmp>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	85 c0                	test   eax,eax
c0015196:	0f 85 53 03 00 00    	jne    c00154ef <CPU::detectFeatures()+0x9c7>
c001519c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00151a3:	e9 47 03 00 00       	jmp    c00154ef <CPU::detectFeatures()+0x9c7>
c00151a8:	83 f8 02             	cmp    eax,0x2
c00151ab:	0f 85 b5 00 00 00    	jne    c0015266 <CPU::detectFeatures()+0x73e>
c00151b1:	57                   	push   edi
c00151b2:	57                   	push   edi
c00151b3:	68 7f 25 02 c0       	push   0xc002257f
c00151b8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00151bc:	56                   	push   esi
c00151bd:	e8 97 b5 fe ff       	call   c0000759 <strcpy>
c00151c2:	5d                   	pop    ebp
c00151c3:	58                   	pop    eax
c00151c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151ca:	66 c1 e8 06          	shr    ax,0x6
c00151ce:	0f b6 c0             	movzx  eax,al
c00151d1:	50                   	push   eax
c00151d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151d8:	c1 e8 0e             	shr    eax,0xe
c00151db:	0f b6 c0             	movzx  eax,al
c00151de:	50                   	push   eax
c00151df:	e8 e7 ef ff ff       	call   c00141cb <lookupAMDCPUName(unsigned char, unsigned char)>
c00151e4:	5a                   	pop    edx
c00151e5:	59                   	pop    ecx
c00151e6:	50                   	push   eax
c00151e7:	56                   	push   esi
c00151e8:	e8 23 b6 fe ff       	call   c0000810 <strcat>
c00151ed:	5f                   	pop    edi
c00151ee:	5d                   	pop    ebp
c00151ef:	56                   	push   esi
c00151f0:	53                   	push   ebx
c00151f1:	e8 48 b5 ff ff       	call   c001073e <Device::setName(char const*)>
c00151f6:	58                   	pop    eax
c00151f7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00151fd:	5a                   	pop    edx
c00151fe:	68 84 25 02 c0       	push   0xc0022584
c0015203:	50                   	push   eax
c0015204:	e8 a1 b5 fe ff       	call   c00007aa <strcmp>
c0015209:	83 c4 10             	add    esp,0x10
c001520c:	85 c0                	test   eax,eax
c001520e:	75 20                	jne    c0015230 <CPU::detectFeatures()+0x708>
c0015210:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c0015216:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001521c:	a8 01                	test   al,0x1
c001521e:	74 10                	je     c0015230 <CPU::detectFeatures()+0x708>
c0015220:	83 e0 fe             	and    eax,0xfffffffe
c0015223:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0015229:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015230:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015236:	c1 e8 0e             	shr    eax,0xe
c0015239:	3c 05                	cmp    al,0x5
c001523b:	0f 85 ae 02 00 00    	jne    c00154ef <CPU::detectFeatures()+0x9c7>
c0015241:	56                   	push   esi
c0015242:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015248:	83 e0 0f             	and    eax,0xf
c001524b:	50                   	push   eax
c001524c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015252:	66 c1 e8 06          	shr    ax,0x6
c0015256:	0f b6 c0             	movzx  eax,al
c0015259:	50                   	push   eax
c001525a:	6a 05                	push   0x5
c001525c:	e8 fc f3 ff ff       	call   c001465d <AMD_K6_writeback(int, int, int)>
c0015261:	e9 ff 01 00 00       	jmp    c0015465 <CPU::detectFeatures()+0x93d>
c0015266:	89 c1                	mov    ecx,eax
c0015268:	83 e1 fd             	and    ecx,0xfffffffd
c001526b:	83 f9 04             	cmp    ecx,0x4
c001526e:	74 09                	je     c0015279 <CPU::detectFeatures()+0x751>
c0015270:	83 f8 03             	cmp    eax,0x3
c0015273:	0f 85 6f 01 00 00    	jne    c00153e8 <CPU::detectFeatures()+0x8c0>
c0015279:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001527f:	c1 ea 0e             	shr    edx,0xe
c0015282:	80 fa 05             	cmp    dl,0x5
c0015285:	75 62                	jne    c00152e9 <CPU::detectFeatures()+0x7c1>
c0015287:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001528d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015292:	66 81 fa 00 01       	cmp    dx,0x100
c0015297:	75 0c                	jne    c00152a5 <CPU::detectFeatures()+0x77d>
c0015299:	51                   	push   ecx
c001529a:	51                   	push   ecx
c001529b:	68 8b 25 02 c0       	push   0xc002258b
c00152a0:	e9 ba 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00152a5:	66 81 fa 00 02       	cmp    dx,0x200
c00152aa:	75 0c                	jne    c00152b8 <CPU::detectFeatures()+0x790>
c00152ac:	52                   	push   edx
c00152ad:	52                   	push   edx
c00152ae:	68 9e 25 02 c0       	push   0xc002259e
c00152b3:	e9 a7 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00152b8:	66 81 fa 40 02       	cmp    dx,0x240
c00152bd:	75 0c                	jne    c00152cb <CPU::detectFeatures()+0x7a3>
c00152bf:	50                   	push   eax
c00152c0:	50                   	push   eax
c00152c1:	68 b0 25 02 c0       	push   0xc00225b0
c00152c6:	e9 94 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00152cb:	83 f8 06             	cmp    eax,0x6
c00152ce:	0f 84 ee 00 00 00    	je     c00153c2 <CPU::detectFeatures()+0x89a>
c00152d4:	83 f9 04             	cmp    ecx,0x4
c00152d7:	0f 84 f6 00 00 00    	je     c00153d3 <CPU::detectFeatures()+0x8ab>
c00152dd:	50                   	push   eax
c00152de:	50                   	push   eax
c00152df:	68 d6 25 02 c0       	push   0xc00225d6
c00152e4:	e9 76 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00152e9:	80 fa 06             	cmp    dl,0x6
c00152ec:	0f 85 cb 00 00 00    	jne    c00153bd <CPU::detectFeatures()+0x895>
c00152f2:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00152f8:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00152fd:	66 81 fa 80 01       	cmp    dx,0x180
c0015302:	75 0c                	jne    c0015310 <CPU::detectFeatures()+0x7e8>
c0015304:	50                   	push   eax
c0015305:	50                   	push   eax
c0015306:	68 e1 25 02 c0       	push   0xc00225e1
c001530b:	e9 4f 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015310:	66 81 fa c0 01       	cmp    dx,0x1c0
c0015315:	74 07                	je     c001531e <CPU::detectFeatures()+0x7f6>
c0015317:	66 81 fa 00 02       	cmp    dx,0x200
c001531c:	75 0c                	jne    c001532a <CPU::detectFeatures()+0x802>
c001531e:	50                   	push   eax
c001531f:	50                   	push   eax
c0015320:	68 f1 25 02 c0       	push   0xc00225f1
c0015325:	e9 35 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c001532a:	66 81 fa 40 02       	cmp    dx,0x240
c001532f:	75 0c                	jne    c001533d <CPU::detectFeatures()+0x815>
c0015331:	50                   	push   eax
c0015332:	50                   	push   eax
c0015333:	68 f8 25 02 c0       	push   0xc00225f8
c0015338:	e9 22 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c001533d:	66 81 fa 80 02       	cmp    dx,0x280
c0015342:	74 07                	je     c001534b <CPU::detectFeatures()+0x823>
c0015344:	66 81 fa 40 03       	cmp    dx,0x340
c0015349:	75 0c                	jne    c0015357 <CPU::detectFeatures()+0x82f>
c001534b:	50                   	push   eax
c001534c:	50                   	push   eax
c001534d:	68 01 26 02 c0       	push   0xc0022601
c0015352:	e9 08 01 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015357:	66 81 fa c0 03       	cmp    dx,0x3c0
c001535c:	75 0c                	jne    c001536a <CPU::detectFeatures()+0x842>
c001535e:	55                   	push   ebp
c001535f:	55                   	push   ebp
c0015360:	68 08 26 02 c0       	push   0xc0022608
c0015365:	e9 f5 00 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c001536a:	83 f8 06             	cmp    eax,0x6
c001536d:	74 53                	je     c00153c2 <CPU::detectFeatures()+0x89a>
c001536f:	83 f9 04             	cmp    ecx,0x4
c0015372:	74 5f                	je     c00153d3 <CPU::detectFeatures()+0x8ab>
c0015374:	57                   	push   edi
c0015375:	57                   	push   edi
c0015376:	68 11 26 02 c0       	push   0xc0022611
c001537b:	53                   	push   ebx
c001537c:	e8 bd b3 ff ff       	call   c001073e <Device::setName(char const*)>
c0015381:	b1 c1                	mov    cl,0xc1
c0015383:	88 c8                	mov    al,cl
c0015385:	e6 22                	out    0x22,al
c0015387:	e4 23                	in     al,0x23
c0015389:	88 c2                	mov    dl,al
c001538b:	88 c8                	mov    al,cl
c001538d:	e6 22                	out    0x22,al
c001538f:	88 d0                	mov    al,dl
c0015391:	83 c8 10             	or     eax,0x10
c0015394:	e6 23                	out    0x23,al
c0015396:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001539d:	89 d0                	mov    eax,edx
c001539f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00153a2:	40                   	inc    eax
c00153a3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00153a9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00153ad:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00153b3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00153b8:	e9 a8 00 00 00       	jmp    c0015465 <CPU::detectFeatures()+0x93d>
c00153bd:	83 f8 06             	cmp    eax,0x6
c00153c0:	75 0c                	jne    c00153ce <CPU::detectFeatures()+0x8a6>
c00153c2:	56                   	push   esi
c00153c3:	56                   	push   esi
c00153c4:	68 c2 25 02 c0       	push   0xc00225c2
c00153c9:	e9 91 00 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00153ce:	83 f9 04             	cmp    ecx,0x4
c00153d1:	75 0c                	jne    c00153df <CPU::detectFeatures()+0x8b7>
c00153d3:	51                   	push   ecx
c00153d4:	51                   	push   ecx
c00153d5:	68 ce 25 02 c0       	push   0xc00225ce
c00153da:	e9 80 00 00 00       	jmp    c001545f <CPU::detectFeatures()+0x937>
c00153df:	52                   	push   edx
c00153e0:	52                   	push   edx
c00153e1:	68 1c 26 02 c0       	push   0xc002261c
c00153e6:	eb 77                	jmp    c001545f <CPU::detectFeatures()+0x937>
c00153e8:	83 f8 07             	cmp    eax,0x7
c00153eb:	75 09                	jne    c00153f6 <CPU::detectFeatures()+0x8ce>
c00153ed:	50                   	push   eax
c00153ee:	50                   	push   eax
c00153ef:	68 26 26 02 c0       	push   0xc0022626
c00153f4:	eb 69                	jmp    c001545f <CPU::detectFeatures()+0x937>
c00153f6:	83 f8 0a             	cmp    eax,0xa
c00153f9:	75 09                	jne    c0015404 <CPU::detectFeatures()+0x8dc>
c00153fb:	50                   	push   eax
c00153fc:	50                   	push   eax
c00153fd:	68 31 26 02 c0       	push   0xc0022631
c0015402:	eb 5b                	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015404:	83 f8 0b             	cmp    eax,0xb
c0015407:	75 09                	jne    c0015412 <CPU::detectFeatures()+0x8ea>
c0015409:	50                   	push   eax
c001540a:	50                   	push   eax
c001540b:	68 39 26 02 c0       	push   0xc0022639
c0015410:	eb 4d                	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015412:	83 f8 08             	cmp    eax,0x8
c0015415:	75 09                	jne    c0015420 <CPU::detectFeatures()+0x8f8>
c0015417:	50                   	push   eax
c0015418:	50                   	push   eax
c0015419:	68 42 26 02 c0       	push   0xc0022642
c001541e:	eb 3f                	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015420:	83 f8 09             	cmp    eax,0x9
c0015423:	75 09                	jne    c001542e <CPU::detectFeatures()+0x906>
c0015425:	50                   	push   eax
c0015426:	50                   	push   eax
c0015427:	68 4a 26 02 c0       	push   0xc002264a
c001542c:	eb 31                	jmp    c001545f <CPU::detectFeatures()+0x937>
c001542e:	83 f8 05             	cmp    eax,0x5
c0015431:	75 09                	jne    c001543c <CPU::detectFeatures()+0x914>
c0015433:	50                   	push   eax
c0015434:	50                   	push   eax
c0015435:	68 52 26 02 c0       	push   0xc0022652
c001543a:	eb 23                	jmp    c001545f <CPU::detectFeatures()+0x937>
c001543c:	83 f8 0c             	cmp    eax,0xc
c001543f:	75 09                	jne    c001544a <CPU::detectFeatures()+0x922>
c0015441:	55                   	push   ebp
c0015442:	55                   	push   ebp
c0015443:	68 60 26 02 c0       	push   0xc0022660
c0015448:	eb 15                	jmp    c001545f <CPU::detectFeatures()+0x937>
c001544a:	83 f8 0d             	cmp    eax,0xd
c001544d:	75 09                	jne    c0015458 <CPU::detectFeatures()+0x930>
c001544f:	57                   	push   edi
c0015450:	57                   	push   edi
c0015451:	68 6b 26 02 c0       	push   0xc002266b
c0015456:	eb 07                	jmp    c001545f <CPU::detectFeatures()+0x937>
c0015458:	56                   	push   esi
c0015459:	56                   	push   esi
c001545a:	68 7f 26 02 c0       	push   0xc002267f
c001545f:	53                   	push   ebx
c0015460:	e8 d9 b2 ff ff       	call   c001073e <Device::setName(char const*)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	e9 82 00 00 00       	jmp    c00154ef <CPU::detectFeatures()+0x9c7>
c001546d:	51                   	push   ecx
c001546e:	51                   	push   ecx
c001546f:	68 cb 24 02 c0       	push   0xc00224cb
c0015474:	57                   	push   edi
c0015475:	e8 df b2 fe ff       	call   c0000759 <strcpy>
c001547a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015484:	e8 a8 ad fe ff       	call   c0000231 <is486>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	85 c0                	test   eax,eax
c001548e:	74 2d                	je     c00154bd <CPU::detectFeatures()+0x995>
c0015490:	52                   	push   edx
c0015491:	52                   	push   edx
c0015492:	68 8b 26 02 c0       	push   0xc002268b
c0015497:	53                   	push   ebx
c0015498:	e8 a1 b2 ff ff       	call   c001073e <Device::setName(char const*)>
c001549d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00154a4:	e8 9f a5 00 00       	call   c001fa48 <CPU::readCR0()>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	83 e0 14             	and    eax,0x14
c00154af:	83 f8 04             	cmp    eax,0x4
c00154b2:	75 1f                	jne    c00154d3 <CPU::detectFeatures()+0x9ab>
c00154b4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00154bb:	eb 32                	jmp    c00154ef <CPU::detectFeatures()+0x9c7>
c00154bd:	50                   	push   eax
c00154be:	50                   	push   eax
c00154bf:	68 96 26 02 c0       	push   0xc0022696
c00154c4:	53                   	push   ebx
c00154c5:	e8 74 b2 ff ff       	call   c001073e <Device::setName(char const*)>
c00154ca:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00154d1:	eb d1                	jmp    c00154a4 <CPU::detectFeatures()+0x97c>
c00154d3:	e8 34 ad fe ff       	call   c000020c <hasLegacyFPU>
c00154d8:	83 e0 01             	and    eax,0x1
c00154db:	8d 14 00             	lea    edx,[eax+eax*1]
c00154de:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00154e4:	83 e0 fd             	and    eax,0xfffffffd
c00154e7:	09 d0                	or     eax,edx
c00154e9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00154ef:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00154f6:	83 c4 4c             	add    esp,0x4c
c00154f9:	5b                   	pop    ebx
c00154fa:	5e                   	pop    esi
c00154fb:	5f                   	pop    edi
c00154fc:	5d                   	pop    ebp
c00154fd:	c3                   	ret    

c00154fe <CPU::setupSMEP()>:
c00154fe:	83 ec 0c             	sub    esp,0xc
c0015501:	e8 0c a8 00 00       	call   c001fd12 <CPU::readCR4()>
c0015506:	0d 00 00 10 00       	or     eax,0x100000
c001550b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001550f:	83 c4 0c             	add    esp,0xc
c0015512:	e9 16 a8 00 00       	jmp    c001fd2d <CPU::writeCR4(unsigned long)>
c0015517:	90                   	nop

c0015518 <CPU::setupUMIP()>:
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	e8 f2 a7 00 00       	call   c001fd12 <CPU::readCR4()>
c0015520:	80 cc 08             	or     ah,0x8
c0015523:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015527:	83 c4 0c             	add    esp,0xc
c001552a:	e9 fe a7 00 00       	jmp    c001fd2d <CPU::writeCR4(unsigned long)>
c001552f:	90                   	nop

c0015530 <CPU::setupTSC()>:
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	e8 da a7 00 00       	call   c001fd12 <CPU::readCR4()>
c0015538:	83 c8 04             	or     eax,0x4
c001553b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001553f:	83 c4 0c             	add    esp,0xc
c0015542:	e9 e6 a7 00 00       	jmp    c001fd2d <CPU::writeCR4(unsigned long)>
c0015547:	90                   	nop

c0015548 <CPU::setupLargePages()>:
c0015548:	83 ec 0c             	sub    esp,0xc
c001554b:	e8 c2 a7 00 00       	call   c001fd12 <CPU::readCR4()>
c0015550:	83 c8 10             	or     eax,0x10
c0015553:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015557:	83 c4 0c             	add    esp,0xc
c001555a:	e9 ce a7 00 00       	jmp    c001fd2d <CPU::writeCR4(unsigned long)>
c001555f:	90                   	nop

c0015560 <CPU::setupPAT()>:
c0015560:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0015565:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001556c:	74 2c                	je     c001559a <CPU::setupPAT()+0x3a>
c001556e:	53                   	push   ebx
c001556f:	83 ec 10             	sub    esp,0x10
c0015572:	68 77 02 00 00       	push   0x277
c0015577:	50                   	push   eax
c0015578:	e8 f9 5f ff ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c001557d:	83 e2 f8             	and    edx,0xfffffff8
c0015580:	83 ca 01             	or     edx,0x1
c0015583:	52                   	push   edx
c0015584:	50                   	push   eax
c0015585:	68 77 02 00 00       	push   0x277
c001558a:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c0015590:	e8 0d 60 ff ff       	call   c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015595:	83 c4 28             	add    esp,0x28
c0015598:	5b                   	pop    ebx
c0015599:	c3                   	ret    
c001559a:	c3                   	ret    
c001559b:	90                   	nop

c001559c <CPU::setupMTRR()>:
c001559c:	c3                   	ret    
c001559d:	90                   	nop

c001559e <CPU::setupGlobalPages()>:
c001559e:	83 ec 0c             	sub    esp,0xc
c00155a1:	e8 6c a7 00 00       	call   c001fd12 <CPU::readCR4()>
c00155a6:	0c 80                	or     al,0x80
c00155a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155ac:	83 c4 0c             	add    esp,0xc
c00155af:	e9 79 a7 00 00       	jmp    c001fd2d <CPU::writeCR4(unsigned long)>

c00155b4 <CPU::allowUsermodeDataAccess()>:
c00155b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155b8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00155bf:	74 03                	je     c00155c4 <CPU::allowUsermodeDataAccess()+0x10>
c00155c1:	0f 01 cb             	stac   
c00155c4:	c3                   	ret    
c00155c5:	90                   	nop

c00155c6 <CPU::prohibitUsermodeDataAccess()>:
c00155c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155ca:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00155d1:	74 03                	je     c00155d6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00155d3:	0f 01 ca             	clac   
c00155d6:	c3                   	ret    
c00155d7:	90                   	nop

c00155d8 <CPU::setupSMAP()>:
c00155d8:	53                   	push   ebx
c00155d9:	83 ec 08             	sub    esp,0x8
c00155dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155e0:	e8 2d a7 00 00       	call   c001fd12 <CPU::readCR4()>
c00155e5:	83 ec 0c             	sub    esp,0xc
c00155e8:	0d 00 00 20 00       	or     eax,0x200000
c00155ed:	50                   	push   eax
c00155ee:	e8 3a a7 00 00       	call   c001fd2d <CPU::writeCR4(unsigned long)>
c00155f3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00155f7:	83 c4 18             	add    esp,0x18
c00155fa:	5b                   	pop    ebx
c00155fb:	eb c9                	jmp    c00155c6 <CPU::prohibitUsermodeDataAccess()>
c00155fd:	90                   	nop

c00155fe <CPU::setupFeatures()>:
c00155fe:	53                   	push   ebx
c00155ff:	83 ec 08             	sub    esp,0x8
c0015602:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015606:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001560d:	74 0c                	je     c001561b <CPU::setupFeatures()+0x1d>
c001560f:	83 ec 0c             	sub    esp,0xc
c0015612:	53                   	push   ebx
c0015613:	e8 e6 fe ff ff       	call   c00154fe <CPU::setupSMEP()>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0015622:	74 0c                	je     c0015630 <CPU::setupFeatures()+0x32>
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	53                   	push   ebx
c0015628:	e8 ab ff ff ff       	call   c00155d8 <CPU::setupSMAP()>
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015637:	74 0c                	je     c0015645 <CPU::setupFeatures()+0x47>
c0015639:	83 ec 0c             	sub    esp,0xc
c001563c:	53                   	push   ebx
c001563d:	e8 d6 fe ff ff       	call   c0015518 <CPU::setupUMIP()>
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001564c:	74 0c                	je     c001565a <CPU::setupFeatures()+0x5c>
c001564e:	83 ec 0c             	sub    esp,0xc
c0015651:	53                   	push   ebx
c0015652:	e8 d9 fe ff ff       	call   c0015530 <CPU::setupTSC()>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015661:	74 0c                	je     c001566f <CPU::setupFeatures()+0x71>
c0015663:	83 ec 0c             	sub    esp,0xc
c0015666:	53                   	push   ebx
c0015667:	e8 dc fe ff ff       	call   c0015548 <CPU::setupLargePages()>
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015676:	74 0c                	je     c0015684 <CPU::setupFeatures()+0x86>
c0015678:	83 ec 0c             	sub    esp,0xc
c001567b:	53                   	push   ebx
c001567c:	e8 1d ff ff ff       	call   c001559e <CPU::setupGlobalPages()>
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001568b:	74 0d                	je     c001569a <CPU::setupFeatures()+0x9c>
c001568d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015691:	83 c4 08             	add    esp,0x8
c0015694:	5b                   	pop    ebx
c0015695:	e9 c6 fe ff ff       	jmp    c0015560 <CPU::setupPAT()>
c001569a:	83 c4 08             	add    esp,0x8
c001569d:	5b                   	pop    ebx
c001569e:	c3                   	ret    
c001569f:	90                   	nop

c00156a0 <CPU::open(int, int, void*)>:
c00156a0:	57                   	push   edi
c00156a1:	56                   	push   esi
c00156a2:	53                   	push   ebx
c00156a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00156b4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00156ba:	50                   	push   eax
c00156bb:	e8 a6 61 ff ff       	call   c000b866 <GDT::setup()>
c00156c0:	83 c4 0c             	add    esp,0xc
c00156c3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00156c9:	6a 00                	push   0x0
c00156cb:	68 ef be ad de       	push   0xdeadbeef
c00156d0:	57                   	push   edi
c00156d1:	e8 26 84 ff ff       	call   c000dafc <TSS::setup(unsigned long, unsigned long)>
c00156d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156d9:	e8 fe 83 ff ff       	call   c000dadc <TSS::flush()>
c00156de:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00156e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00156e7:	e8 d4 63 ff ff       	call   c000bac0 <IDT::setup()>
c00156ec:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00156f3:	e8 2c a6 00 00       	call   c001fd24 <CPU::writeDR7(unsigned long)>
c00156f8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0015702:	e8 a8 6e ff ff       	call   c000c5af <Phys::allocatePage()>
c0015707:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001570d:	89 30                	mov    DWORD PTR [eax],esi
c001570f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015715:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015718:	58                   	pop    eax
c0015719:	5a                   	pop    edx
c001571a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0015720:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015724:	e8 a3 93 ff ff       	call   c000eacc <VAS::setCPUSpecific(unsigned long)>
c0015729:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001572c:	e8 f7 f3 ff ff       	call   c0014b28 <CPU::detectFeatures()>
c0015731:	e8 22 c3 ff ff       	call   c0011a58 <setupInterruptController()>
c0015736:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001573c:	a1 c0 45 02 c0       	mov    eax,ds:0xc00245c0
c0015741:	83 e0 10             	and    eax,0x10
c0015744:	83 f8 01             	cmp    eax,0x1
c0015747:	19 c0                	sbb    eax,eax
c0015749:	83 e0 46             	and    eax,0x46
c001574c:	83 c0 1e             	add    eax,0x1e
c001574f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015752:	e8 a7 d6 ff ff       	call   c0012dfe <setupTimer(int)>
c0015757:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001575d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015760:	e8 99 fe ff ff       	call   c00155fe <CPU::setupFeatures()>
c0015765:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015768:	e8 3f f1 ff ff       	call   c00148ac <CPU::displayFeatures()>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	5b                   	pop    ebx
c0015771:	31 c0                	xor    eax,eax
c0015773:	5e                   	pop    esi
c0015774:	5f                   	pop    edi
c0015775:	c3                   	ret    

c0015776 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015776:	56                   	push   esi
c0015777:	53                   	push   ebx
c0015778:	51                   	push   ecx
c0015779:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001577d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015781:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015784:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015787:	88 c1                	mov    cl,al
c0015789:	c0 e9 06             	shr    cl,0x6
c001578c:	88 0c 24             	mov    BYTE PTR [esp],cl
c001578f:	88 c1                	mov    cl,al
c0015791:	66 c1 e8 03          	shr    ax,0x3
c0015795:	83 e1 07             	and    ecx,0x7
c0015798:	83 e0 07             	and    eax,0x7
c001579b:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001579f:	88 06                	mov    BYTE PTR [esi],al
c00157a1:	74 7f                	je     c0015822 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157a3:	80 f9 04             	cmp    cl,0x4
c00157a6:	74 7a                	je     c0015822 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157a8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00157ac:	75 05                	jne    c00157b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c00157ae:	80 f9 05             	cmp    cl,0x5
c00157b1:	74 6f                	je     c0015822 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157b3:	84 c9                	test   cl,cl
c00157b5:	75 05                	jne    c00157bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c00157b7:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00157ba:	eb 3c                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157bc:	80 f9 01             	cmp    cl,0x1
c00157bf:	75 05                	jne    c00157c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c00157c1:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00157c4:	eb 32                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157c6:	80 f9 02             	cmp    cl,0x2
c00157c9:	75 05                	jne    c00157d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00157cb:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00157ce:	eb 28                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157d0:	31 c0                	xor    eax,eax
c00157d2:	80 f9 03             	cmp    cl,0x3
c00157d5:	75 05                	jne    c00157dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00157d7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157da:	eb 1c                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157dc:	80 f9 05             	cmp    cl,0x5
c00157df:	75 05                	jne    c00157e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00157e1:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00157e4:	eb 12                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157e6:	80 f9 06             	cmp    cl,0x6
c00157e9:	75 05                	jne    c00157f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00157eb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00157ee:	eb 08                	jmp    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157f0:	80 f9 07             	cmp    cl,0x7
c00157f3:	75 03                	jne    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157f5:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00157f8:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00157fc:	75 10                	jne    c001580e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00157fe:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015802:	b9 03 00 00 00       	mov    ecx,0x3
c0015807:	01 d0                	add    eax,edx
c0015809:	e9 42 01 00 00       	jmp    c0015950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001580e:	b9 02 00 00 00       	mov    ecx,0x2
c0015813:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c0015817:	0f 85 33 01 00 00    	jne    c0015950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001581d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0015820:	eb 18                	jmp    c001583a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c0015822:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015826:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c001582b:	80 f9 05             	cmp    cl,0x5
c001582e:	0f 94 c0             	sete   al
c0015831:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015835:	74 0d                	je     c0015844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015837:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001583a:	b9 06 00 00 00       	mov    ecx,0x6
c001583f:	e9 0c 01 00 00       	jmp    c0015950 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015844:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015848:	0f 84 06 01 00 00    	je     c0015954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001584e:	80 f9 04             	cmp    cl,0x4
c0015851:	0f 85 06 01 00 00    	jne    c001595d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015857:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c001585a:	89 c6                	mov    esi,eax
c001585c:	88 c1                	mov    cl,al
c001585e:	66 c1 ee 03          	shr    si,0x3
c0015862:	c0 e9 06             	shr    cl,0x6
c0015865:	83 e6 07             	and    esi,0x7
c0015868:	24 07                	and    al,0x7
c001586a:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001586e:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015872:	89 f1                	mov    ecx,esi
c0015874:	75 05                	jne    c001587b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015876:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015879:	eb 4b                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001587b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015880:	75 05                	jne    c0015887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015882:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015885:	eb 3f                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015887:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001588c:	75 05                	jne    c0015893 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001588e:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015891:	eb 33                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015893:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015898:	75 05                	jne    c001589f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c001589a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001589d:	eb 27                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001589f:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c00158a4:	75 05                	jne    c00158ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c00158a6:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c00158a9:	eb 1b                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158ab:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00158b0:	75 05                	jne    c00158b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c00158b2:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c00158b5:	eb 0f                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158b7:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c00158bc:	75 05                	jne    c00158c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c00158be:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c00158c1:	eb 03                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158c3:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00158c6:	84 c9                	test   cl,cl
c00158c8:	75 05                	jne    c00158cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00158ca:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00158cd:	eb 3c                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158cf:	80 f9 01             	cmp    cl,0x1
c00158d2:	75 05                	jne    c00158d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00158d4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158d7:	eb 32                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158d9:	80 f9 02             	cmp    cl,0x2
c00158dc:	75 05                	jne    c00158e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00158de:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158e1:	eb 28                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158e3:	80 f9 03             	cmp    cl,0x3
c00158e6:	75 05                	jne    c00158ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00158e8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158eb:	eb 1e                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158ed:	31 c0                	xor    eax,eax
c00158ef:	80 f9 04             	cmp    cl,0x4
c00158f2:	74 17                	je     c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158f4:	80 f9 05             	cmp    cl,0x5
c00158f7:	75 05                	jne    c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00158f9:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158fc:	eb 0d                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158fe:	80 f9 06             	cmp    cl,0x6
c0015901:	75 05                	jne    c0015908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c0015903:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015906:	eb 03                	jmp    c001590b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015908:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001590b:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015910:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c0015914:	0f 94 c2             	sete   dl
c0015917:	d3 e0                	shl    eax,cl
c0015919:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c001591d:	74 07                	je     c0015926 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c001591f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015922:	31 d2                	xor    edx,edx
c0015924:	eb 23                	jmp    c0015949 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0015926:	01 f0                	add    eax,esi
c0015928:	b9 03 00 00 00       	mov    ecx,0x3
c001592d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015931:	74 33                	je     c0015966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015933:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015937:	75 0d                	jne    c0015946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015939:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001593d:	01 c8                	add    eax,ecx
c001593f:	b9 04 00 00 00       	mov    ecx,0x4
c0015944:	eb 20                	jmp    c0015966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015946:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015949:	b9 07 00 00 00       	mov    ecx,0x7
c001594e:	eb 16                	jmp    c0015966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015950:	31 d2                	xor    edx,edx
c0015952:	eb 12                	jmp    c0015966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015954:	b9 02 00 00 00       	mov    ecx,0x2
c0015959:	b2 01                	mov    dl,0x1
c001595b:	eb 07                	jmp    c0015964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c001595d:	31 d2                	xor    edx,edx
c001595f:	b9 02 00 00 00       	mov    ecx,0x2
c0015964:	31 c0                	xor    eax,eax
c0015966:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001596a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001596c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015970:	88 11                	mov    BYTE PTR [ecx],dl
c0015972:	5a                   	pop    edx
c0015973:	5b                   	pop    ebx
c0015974:	5e                   	pop    esi
c0015975:	c3                   	ret    

c0015976 <Krnl::panic(char const*)>:
c0015976:	55                   	push   ebp
c0015977:	89 e5                	mov    ebp,esp
c0015979:	53                   	push   ebx
c001597a:	51                   	push   ecx
c001597b:	a1 f0 4f 02 c0       	mov    eax,ds:0xc0024ff0
c0015980:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015983:	85 c0                	test   eax,eax
c0015985:	74 02                	je     c0015989 <Krnl::panic(char const*)+0x13>
c0015987:	ff d0                	call   eax
c0015989:	fa                   	cli    
c001598a:	50                   	push   eax
c001598b:	c6 05 f4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024ff4,0x1
c0015992:	50                   	push   eax
c0015993:	c6 05 e0 39 02 c0 00 	mov    BYTE PTR ds:0xc00239e0,0x0
c001599a:	53                   	push   ebx
c001599b:	68 d0 26 02 c0       	push   0xc00226d0
c00159a0:	e8 a2 97 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00159a5:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00159aa:	5a                   	pop    edx
c00159ab:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159b1:	51                   	push   ecx
c00159b2:	e8 84 79 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c00159b7:	83 c4 0c             	add    esp,0xc
c00159ba:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00159bf:	6a 01                	push   0x1
c00159c1:	6a 0f                	push   0xf
c00159c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159c9:	50                   	push   eax
c00159ca:	e8 ab 73 ff ff       	call   c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00159cf:	58                   	pop    eax
c00159d0:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00159d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159db:	50                   	push   eax
c00159dc:	e8 fd 7b ff ff       	call   c000d5de <VgaText::clearScreen()>
c00159e1:	58                   	pop    eax
c00159e2:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00159e7:	5a                   	pop    edx
c00159e8:	68 e9 26 02 c0       	push   0xc00226e9
c00159ed:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159f3:	51                   	push   ecx
c00159f4:	e8 63 7d ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00159f9:	58                   	pop    eax
c00159fa:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c00159ff:	5a                   	pop    edx
c0015a00:	68 90 27 02 c0       	push   0xc0022790
c0015a05:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a0b:	51                   	push   ecx
c0015a0c:	e8 4b 7d ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a11:	58                   	pop    eax
c0015a12:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a17:	5a                   	pop    edx
c0015a18:	68 05 27 02 c0       	push   0xc0022705
c0015a1d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a23:	51                   	push   ecx
c0015a24:	e8 33 7d ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a29:	58                   	pop    eax
c0015a2a:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a2f:	5a                   	pop    edx
c0015a30:	53                   	push   ebx
c0015a31:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a37:	51                   	push   ecx
c0015a38:	e8 1f 7d ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a3d:	5b                   	pop    ebx
c0015a3e:	58                   	pop    eax
c0015a3f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a44:	68 25 27 02 c0       	push   0xc0022725
c0015a49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a4f:	50                   	push   eax
c0015a50:	e8 07 7d ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a55:	58                   	pop    eax
c0015a56:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a5b:	5a                   	pop    edx
c0015a5c:	68 cc 27 02 c0       	push   0xc00227cc
c0015a61:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a67:	51                   	push   ecx
c0015a68:	e8 ef 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a6d:	5b                   	pop    ebx
c0015a6e:	58                   	pop    eax
c0015a6f:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a74:	68 05 27 02 c0       	push   0xc0022705
c0015a79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a7f:	50                   	push   eax
c0015a80:	e8 d7 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015a85:	58                   	pop    eax
c0015a86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a8b:	5a                   	pop    edx
c0015a8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a8f:	83 c0 0c             	add    eax,0xc
c0015a92:	50                   	push   eax
c0015a93:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015a98:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a9e:	51                   	push   ecx
c0015a9f:	e8 b8 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015aa4:	5b                   	pop    ebx
c0015aa5:	58                   	pop    eax
c0015aa6:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015aab:	68 24 27 02 c0       	push   0xc0022724
c0015ab0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab6:	50                   	push   eax
c0015ab7:	e8 a0 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015abc:	58                   	pop    eax
c0015abd:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015ac2:	5a                   	pop    edx
c0015ac3:	68 f8 27 02 c0       	push   0xc00227f8
c0015ac8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ace:	51                   	push   ecx
c0015acf:	e8 88 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015ad4:	5b                   	pop    ebx
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015adb:	68 38 28 02 c0       	push   0xc0022838
c0015ae0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ae6:	50                   	push   eax
c0015ae7:	e8 70 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015aec:	58                   	pop    eax
c0015aed:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015af2:	5a                   	pop    edx
c0015af3:	68 10 27 02 c0       	push   0xc0022710
c0015af8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015afe:	51                   	push   ecx
c0015aff:	e8 58 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b04:	5b                   	pop    ebx
c0015b05:	58                   	pop    eax
c0015b06:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015b09:	50                   	push   eax
c0015b0a:	68 28 27 02 c0       	push   0xc0022728
c0015b0f:	e8 33 96 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0015b14:	58                   	pop    eax
c0015b15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b18:	5a                   	pop    edx
c0015b19:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015b1c:	51                   	push   ecx
c0015b1d:	68 31 27 02 c0       	push   0xc0022731
c0015b22:	e8 20 96 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0015b27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b2a:	5b                   	pop    ebx
c0015b2b:	5a                   	pop    edx
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015b31:	51                   	push   ecx
c0015b32:	68 3a 27 02 c0       	push   0xc002273a
c0015b37:	e8 0b 96 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0015b3c:	5b                   	pop    ebx
c0015b3d:	58                   	pop    eax
c0015b3e:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015b43:	68 7c 28 02 c0       	push   0xc002287c
c0015b48:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b4e:	50                   	push   eax
c0015b4f:	e8 08 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b54:	58                   	pop    eax
c0015b55:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015b5a:	5a                   	pop    edx
c0015b5b:	68 43 27 02 c0       	push   0xc0022743
c0015b60:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b66:	51                   	push   ecx
c0015b67:	e8 f0 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b6c:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015b71:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b77:	e8 cc 9e 00 00       	call   c001fa48 <CPU::readCR0()>
c0015b7c:	5a                   	pop    edx
c0015b7d:	59                   	pop    ecx
c0015b7e:	50                   	push   eax
c0015b7f:	53                   	push   ebx
c0015b80:	e8 fd 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015b85:	5b                   	pop    ebx
c0015b86:	58                   	pop    eax
c0015b87:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015b8c:	68 4d 27 02 c0       	push   0xc002274d
c0015b91:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b97:	50                   	push   eax
c0015b98:	e8 bf 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b9d:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015ba2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ba8:	e8 89 a1 00 00       	call   c001fd36 <CPU::readCR2()>
c0015bad:	5a                   	pop    edx
c0015bae:	59                   	pop    ecx
c0015baf:	50                   	push   eax
c0015bb0:	53                   	push   ebx
c0015bb1:	e8 cc 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015bb6:	5b                   	pop    ebx
c0015bb7:	58                   	pop    eax
c0015bb8:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015bbd:	68 57 27 02 c0       	push   0xc0022757
c0015bc2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bc8:	50                   	push   eax
c0015bc9:	e8 8e 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015bce:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015bd3:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015bd9:	e8 f7 9a 00 00       	call   c001f6d5 <CPU::readCR3()>
c0015bde:	5a                   	pop    edx
c0015bdf:	59                   	pop    ecx
c0015be0:	50                   	push   eax
c0015be1:	53                   	push   ebx
c0015be2:	e8 9b 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015be7:	5b                   	pop    ebx
c0015be8:	58                   	pop    eax
c0015be9:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015bee:	68 6a 27 02 c0       	push   0xc002276a
c0015bf3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bf9:	50                   	push   eax
c0015bfa:	e8 5d 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015bff:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c04:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c0a:	e8 03 a1 00 00       	call   c001fd12 <CPU::readCR4()>
c0015c0f:	5a                   	pop    edx
c0015c10:	59                   	pop    ecx
c0015c11:	50                   	push   eax
c0015c12:	53                   	push   ebx
c0015c13:	e8 6a 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015c18:	5b                   	pop    ebx
c0015c19:	58                   	pop    eax
c0015c1a:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c1f:	68 74 27 02 c0       	push   0xc0022774
c0015c24:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c2a:	50                   	push   eax
c0015c2b:	e8 2c 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c30:	5a                   	pop    edx
c0015c31:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c36:	59                   	pop    ecx
c0015c37:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015c3a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c40:	53                   	push   ebx
c0015c41:	50                   	push   eax
c0015c42:	e8 3b 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015c47:	58                   	pop    eax
c0015c48:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c4d:	5a                   	pop    edx
c0015c4e:	68 8b 27 02 c0       	push   0xc002278b
c0015c53:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c59:	51                   	push   ecx
c0015c5a:	e8 fd 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c5f:	5b                   	pop    ebx
c0015c60:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c65:	5a                   	pop    edx
c0015c66:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c69:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c6f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015c72:	51                   	push   ecx
c0015c73:	50                   	push   eax
c0015c74:	e8 09 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015c79:	5b                   	pop    ebx
c0015c7a:	58                   	pop    eax
c0015c7b:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c80:	68 8b 27 02 c0       	push   0xc002278b
c0015c85:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c8b:	50                   	push   eax
c0015c8c:	e8 cb 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c91:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c94:	59                   	pop    ecx
c0015c95:	a1 f4 59 02 c0       	mov    eax,ds:0xc00259f4
c0015c9a:	5b                   	pop    ebx
c0015c9b:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ca3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015ca6:	52                   	push   edx
c0015ca7:	50                   	push   eax
c0015ca8:	e8 d5 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	b2 fe                	mov    dl,0xfe
c0015cb2:	e4 60                	in     al,0x60
c0015cb4:	3c 1c                	cmp    al,0x1c
c0015cb6:	74 04                	je     c0015cbc <Krnl::panic(char const*)+0x346>
c0015cb8:	3c 5a                	cmp    al,0x5a
c0015cba:	75 f6                	jne    c0015cb2 <Krnl::panic(char const*)+0x33c>
c0015cbc:	e4 64                	in     al,0x64
c0015cbe:	a8 02                	test   al,0x2
c0015cc0:	75 fa                	jne    c0015cbc <Krnl::panic(char const*)+0x346>
c0015cc2:	88 d0                	mov    al,dl
c0015cc4:	e6 64                	out    0x64,al
c0015cc6:	fa                   	cli    
c0015cc7:	f4                   	hlt    
c0015cc8:	eb e8                	jmp    c0015cb2 <Krnl::panic(char const*)+0x33c>

c0015cca <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015cca:	55                   	push   ebp
c0015ccb:	57                   	push   edi
c0015ccc:	56                   	push   esi
c0015ccd:	53                   	push   ebx
c0015cce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015cd4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015cdb:	8d 46 01             	lea    eax,[esi+0x1]
c0015cde:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015ce0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ce4:	80 fb 40             	cmp    bl,0x40
c0015ce7:	75 19                	jne    c0015d02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015ce9:	8a 06                	mov    al,BYTE PTR [esi]
c0015ceb:	84 c0                	test   al,al
c0015ced:	74 07                	je     c0015cf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cef:	3c 3a                	cmp    al,0x3a
c0015cf1:	74 03                	je     c0015cf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015cf3:	46                   	inc    esi
c0015cf4:	eb f3                	jmp    c0015ce9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015cf6:	84 c0                	test   al,al
c0015cf8:	0f 84 1f 01 00 00    	je     c0015e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015cfe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015d01:	46                   	inc    esi
c0015d02:	50                   	push   eax
c0015d03:	6a 40                	push   0x40
c0015d05:	6a 00                	push   0x0
c0015d07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d0b:	50                   	push   eax
c0015d0c:	e8 a9 a9 fe ff       	call   c00006ba <memset>
c0015d11:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015d18:	31 d2                	xor    edx,edx
c0015d1a:	83 c4 10             	add    esp,0x10
c0015d1d:	8a 07                	mov    al,BYTE PTR [edi]
c0015d1f:	84 c0                	test   al,al
c0015d21:	0f 84 f6 00 00 00    	je     c0015e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d27:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015d2d:	0f 8f ea 00 00 00    	jg     c0015e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d33:	3c 0a                	cmp    al,0xa
c0015d35:	0f 85 d3 00 00 00    	jne    c0015e0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015d3b:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015d40:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015d44:	f6 c1 df             	test   cl,0xdf
c0015d47:	0f 94 c2             	sete   dl
c0015d4a:	80 f9 23             	cmp    cl,0x23
c0015d4d:	0f 94 c0             	sete   al
c0015d50:	08 c2                	or     dl,al
c0015d52:	75 47                	jne    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d54:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015d57:	3c 01                	cmp    al,0x1
c0015d59:	76 40                	jbe    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d5b:	80 f9 5b             	cmp    cl,0x5b
c0015d5e:	75 3f                	jne    c0015d9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015d60:	80 fb 40             	cmp    bl,0x40
c0015d63:	75 36                	jne    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d65:	83 ec 0c             	sub    esp,0xc
c0015d68:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015d6c:	55                   	push   ebp
c0015d6d:	e8 65 a9 fe ff       	call   c00006d7 <strlen>
c0015d72:	83 c4 10             	add    esp,0x10
c0015d75:	83 f8 3f             	cmp    eax,0x3f
c0015d78:	0f 87 9f 00 00 00    	ja     c0015e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d7e:	50                   	push   eax
c0015d7f:	50                   	push   eax
c0015d80:	55                   	push   ebp
c0015d81:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015d85:	55                   	push   ebp
c0015d86:	e8 ce a9 fe ff       	call   c0000759 <strcpy>
c0015d8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d8e:	e8 44 a9 fe ff       	call   c00006d7 <strlen>
c0015d93:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	31 c9                	xor    ecx,ecx
c0015d9d:	eb 76                	jmp    c0015e15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015d9f:	80 fb 40             	cmp    bl,0x40
c0015da2:	74 06                	je     c0015daa <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015da4:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015da8:	eb 19                	jmp    c0015dc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015daa:	51                   	push   ecx
c0015dab:	51                   	push   ecx
c0015dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015db0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015db4:	50                   	push   eax
c0015db5:	e8 f0 a9 fe ff       	call   c00007aa <strcmp>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	85 c0                	test   eax,eax
c0015dbf:	75 da                	jne    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015dc1:	eb e1                	jmp    c0015da4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015dc3:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015dc6:	84 c0                	test   al,al
c0015dc8:	0f 94 c1             	sete   cl
c0015dcb:	3c 3d                	cmp    al,0x3d
c0015dcd:	0f 94 c2             	sete   dl
c0015dd0:	08 d1                	or     cl,dl
c0015dd2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015dd6:	75 03                	jne    c0015ddb <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015dd8:	45                   	inc    ebp
c0015dd9:	eb e8                	jmp    c0015dc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015ddb:	84 c0                	test   al,al
c0015ddd:	74 3e                	je     c0015e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ddf:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015de3:	52                   	push   edx
c0015de4:	52                   	push   edx
c0015de5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015de9:	50                   	push   eax
c0015dea:	56                   	push   esi
c0015deb:	e8 ba a9 fe ff       	call   c00007aa <strcmp>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	85 c0                	test   eax,eax
c0015df5:	75 a4                	jne    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015df7:	50                   	push   eax
c0015df8:	8d 55 01             	lea    edx,[ebp+0x1]
c0015dfb:	50                   	push   eax
c0015dfc:	52                   	push   edx
c0015dfd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015e04:	e8 50 a9 fe ff       	call   c0000759 <strcpy>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	eb 14                	jmp    c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015e0e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e11:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015e15:	47                   	inc    edi
c0015e16:	89 ca                	mov    edx,ecx
c0015e18:	e9 00 ff ff ff       	jmp    c0015d1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015e1d:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015e22:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015e26:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e2c:	5b                   	pop    ebx
c0015e2d:	5e                   	pop    esi
c0015e2e:	5f                   	pop    edi
c0015e2f:	5d                   	pop    ebp
c0015e30:	c3                   	ret    

c0015e31 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e31:	57                   	push   edi
c0015e32:	56                   	push   esi
c0015e33:	53                   	push   ebx
c0015e34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015e3a:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015e41:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015e48:	53                   	push   ebx
c0015e49:	e8 89 a8 fe ff       	call   c00006d7 <strlen>
c0015e4e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e51:	89 c7                	mov    edi,eax
c0015e53:	e8 7f a8 fe ff       	call   c00006d7 <strlen>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e5f:	31 ff                	xor    edi,edi
c0015e61:	3d ff 00 00 00       	cmp    eax,0xff
c0015e66:	0f 87 18 01 00 00    	ja     c0015f84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e6c:	51                   	push   ecx
c0015e6d:	51                   	push   ecx
c0015e6e:	56                   	push   esi
c0015e6f:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015e73:	56                   	push   esi
c0015e74:	e8 e0 a8 fe ff       	call   c0000759 <strcpy>
c0015e79:	58                   	pop    eax
c0015e7a:	5a                   	pop    edx
c0015e7b:	68 74 2c 02 c0       	push   0xc0022c74
c0015e80:	56                   	push   esi
c0015e81:	e8 8a a9 fe ff       	call   c0000810 <strcat>
c0015e86:	59                   	pop    ecx
c0015e87:	58                   	pop    eax
c0015e88:	53                   	push   ebx
c0015e89:	56                   	push   esi
c0015e8a:	e8 81 a9 fe ff       	call   c0000810 <strcat>
c0015e8f:	58                   	pop    eax
c0015e90:	5a                   	pop    edx
c0015e91:	68 a2 28 02 c0       	push   0xc00228a2
c0015e96:	56                   	push   esi
c0015e97:	e8 74 a9 fe ff       	call   c0000810 <strcat>
c0015e9c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ea3:	e8 6a 91 ff ff       	call   c000f012 <operator new(unsigned long)>
c0015ea8:	83 c4 0c             	add    esp,0xc
c0015eab:	89 c3                	mov    ebx,eax
c0015ead:	ff 35 f4 59 02 c0    	push   DWORD PTR ds:0xc00259f4
c0015eb3:	56                   	push   esi
c0015eb4:	50                   	push   eax
c0015eb5:	e8 c4 97 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0015eba:	59                   	pop    ecx
c0015ebb:	5e                   	pop    esi
c0015ebc:	6a 01                	push   0x1
c0015ebe:	53                   	push   ebx
c0015ebf:	e8 1e 98 ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	85 c0                	test   eax,eax
c0015ec9:	74 08                	je     c0015ed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015ecb:	83 ec 0c             	sub    esp,0xc
c0015ece:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed0:	53                   	push   ebx
c0015ed1:	eb 2e                	jmp    c0015f01 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015ed3:	52                   	push   edx
c0015ed4:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015ed8:	50                   	push   eax
c0015ed9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015edd:	50                   	push   eax
c0015ede:	53                   	push   ebx
c0015edf:	e8 aa 9a ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c0015ee4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	89 c1                	mov    ecx,eax
c0015eed:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015ef1:	75 13                	jne    c0015f06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015ef3:	83 ec 0c             	sub    esp,0xc
c0015ef6:	53                   	push   ebx
c0015ef7:	e8 44 98 ff ff       	call   c000f740 <File::close()>
c0015efc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015efe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f04:	eb 7b                	jmp    c0015f81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015f06:	83 ec 0c             	sub    esp,0xc
c0015f09:	50                   	push   eax
c0015f0a:	e8 ca 60 ff ff       	call   c000bfd9 <malloc>
c0015f0f:	89 c6                	mov    esi,eax
c0015f11:	58                   	pop    eax
c0015f12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f14:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015f18:	52                   	push   edx
c0015f19:	56                   	push   esi
c0015f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f22:	53                   	push   ebx
c0015f23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f26:	83 c4 20             	add    esp,0x20
c0015f29:	85 c0                	test   eax,eax
c0015f2b:	75 0a                	jne    c0015f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f31:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015f35:	74 18                	je     c0015f4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015f37:	83 ec 0c             	sub    esp,0xc
c0015f3a:	31 ff                	xor    edi,edi
c0015f3c:	53                   	push   ebx
c0015f3d:	e8 fe 97 ff ff       	call   c000f740 <File::close()>
c0015f42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f4a:	83 c4 10             	add    esp,0x10
c0015f4d:	eb 35                	jmp    c0015f84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f4f:	83 ec 0c             	sub    esp,0xc
c0015f52:	53                   	push   ebx
c0015f53:	e8 e8 97 ff ff       	call   c000f740 <File::close()>
c0015f58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f60:	83 c4 0c             	add    esp,0xc
c0015f63:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f6a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f71:	56                   	push   esi
c0015f72:	e8 53 fd ff ff       	call   c0015cca <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f77:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f7a:	89 c7                	mov    edi,eax
c0015f7c:	e8 68 60 ff ff       	call   c000bfe9 <free>
c0015f81:	83 c4 10             	add    esp,0x10
c0015f84:	81 c4 10 01 00 00    	add    esp,0x110
c0015f8a:	89 f8                	mov    eax,edi
c0015f8c:	5b                   	pop    ebx
c0015f8d:	5e                   	pop    esi
c0015f8e:	5f                   	pop    edi
c0015f8f:	c3                   	ret    

c0015f90 <Reg::getLine(char*, char*, char*)>:
c0015f90:	57                   	push   edi
c0015f91:	56                   	push   esi
c0015f92:	53                   	push   ebx
c0015f93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f9f:	57                   	push   edi
c0015fa0:	56                   	push   esi
c0015fa1:	53                   	push   ebx
c0015fa2:	68 a7 28 02 c0       	push   0xc00228a7
c0015fa7:	e8 85 fe ff ff       	call   c0015e31 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	84 c0                	test   al,al
c0015fb1:	75 10                	jne    c0015fc3 <Reg::getLine(char*, char*, char*)+0x33>
c0015fb3:	57                   	push   edi
c0015fb4:	56                   	push   esi
c0015fb5:	53                   	push   ebx
c0015fb6:	68 cc 28 02 c0       	push   0xc00228cc
c0015fbb:	e8 71 fe ff ff       	call   c0015e31 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	5b                   	pop    ebx
c0015fc4:	5e                   	pop    esi
c0015fc5:	5f                   	pop    edi
c0015fc6:	c3                   	ret    

c0015fc7 <Reg::readInt(char*, char*, int*)>:
c0015fc7:	55                   	push   ebp
c0015fc8:	57                   	push   edi
c0015fc9:	56                   	push   esi
c0015fca:	53                   	push   ebx
c0015fcb:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015fd1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fd5:	57                   	push   edi
c0015fd6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fdd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fe4:	e8 a7 ff ff ff       	call   c0015f90 <Reg::getLine(char*, char*, char*)>
c0015fe9:	83 c4 10             	add    esp,0x10
c0015fec:	84 c0                	test   al,al
c0015fee:	0f 84 b2 00 00 00    	je     c00160a6 <Reg::readInt(char*, char*, int*)+0xdf>
c0015ff4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015ff8:	80 fa 2b             	cmp    dl,0x2b
c0015ffb:	74 0c                	je     c0016009 <Reg::readInt(char*, char*, int*)+0x42>
c0015ffd:	80 fa 2d             	cmp    dl,0x2d
c0016000:	75 0e                	jne    c0016010 <Reg::readInt(char*, char*, int*)+0x49>
c0016002:	ba 01 00 00 00       	mov    edx,0x1
c0016007:	eb 0b                	jmp    c0016014 <Reg::readInt(char*, char*, int*)+0x4d>
c0016009:	ba 01 00 00 00       	mov    edx,0x1
c001600e:	eb 02                	jmp    c0016012 <Reg::readInt(char*, char*, int*)+0x4b>
c0016010:	31 d2                	xor    edx,edx
c0016012:	31 c0                	xor    eax,eax
c0016014:	be 0a 00 00 00       	mov    esi,0xa
c0016019:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001601e:	75 20                	jne    c0016040 <Reg::readInt(char*, char*, int*)+0x79>
c0016020:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016024:	80 f9 78             	cmp    cl,0x78
c0016027:	75 0a                	jne    c0016033 <Reg::readInt(char*, char*, int*)+0x6c>
c0016029:	83 c2 02             	add    edx,0x2
c001602c:	be 10 00 00 00       	mov    esi,0x10
c0016031:	eb 0d                	jmp    c0016040 <Reg::readInt(char*, char*, int*)+0x79>
c0016033:	80 f9 62             	cmp    cl,0x62
c0016036:	75 08                	jne    c0016040 <Reg::readInt(char*, char*, int*)+0x79>
c0016038:	83 c2 02             	add    edx,0x2
c001603b:	be 02 00 00 00       	mov    esi,0x2
c0016040:	01 d7                	add    edi,edx
c0016042:	31 d2                	xor    edx,edx
c0016044:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016046:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001604a:	84 db                	test   bl,bl
c001604c:	0f 94 c3             	sete   bl
c001604f:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016054:	0f 94 c1             	sete   cl
c0016057:	08 cb                	or     bl,cl
c0016059:	75 3a                	jne    c0016095 <Reg::readInt(char*, char*, int*)+0xce>
c001605b:	0f af d6             	imul   edx,esi
c001605e:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016063:	83 fe 10             	cmp    esi,0x10
c0016066:	75 26                	jne    c001608e <Reg::readInt(char*, char*, int*)+0xc7>
c0016068:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001606c:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001606f:	89 e9                	mov    ecx,ebp
c0016071:	80 f9 05             	cmp    cl,0x5
c0016074:	77 06                	ja     c001607c <Reg::readInt(char*, char*, int*)+0xb5>
c0016076:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001607a:	eb 16                	jmp    c0016092 <Reg::readInt(char*, char*, int*)+0xcb>
c001607c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016080:	83 e9 61             	sub    ecx,0x61
c0016083:	80 f9 05             	cmp    cl,0x5
c0016086:	77 06                	ja     c001608e <Reg::readInt(char*, char*, int*)+0xc7>
c0016088:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001608c:	eb 04                	jmp    c0016092 <Reg::readInt(char*, char*, int*)+0xcb>
c001608e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016092:	47                   	inc    edi
c0016093:	eb af                	jmp    c0016044 <Reg::readInt(char*, char*, int*)+0x7d>
c0016095:	84 c0                	test   al,al
c0016097:	74 02                	je     c001609b <Reg::readInt(char*, char*, int*)+0xd4>
c0016099:	f7 da                	neg    edx
c001609b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00160a2:	89 10                	mov    DWORD PTR [eax],edx
c00160a4:	88 d8                	mov    al,bl
c00160a6:	81 c4 ec 00 00 00    	add    esp,0xec
c00160ac:	5b                   	pop    ebx
c00160ad:	5e                   	pop    esi
c00160ae:	5f                   	pop    edi
c00160af:	5d                   	pop    ebp
c00160b0:	c3                   	ret    

c00160b1 <Reg::readString(char*, char*, char*, int)>:
c00160b1:	57                   	push   edi
c00160b2:	56                   	push   esi
c00160b3:	53                   	push   ebx
c00160b4:	81 ec d4 00 00 00    	sub    esp,0xd4
c00160ba:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00160be:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00160c5:	57                   	push   edi
c00160c6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160cd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160d4:	e8 b7 fe ff ff       	call   c0015f90 <Reg::getLine(char*, char*, char*)>
c00160d9:	83 c4 10             	add    esp,0x10
c00160dc:	89 c6                	mov    esi,eax
c00160de:	84 c0                	test   al,al
c00160e0:	74 44                	je     c0016126 <Reg::readString(char*, char*, char*, int)+0x75>
c00160e2:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160e9:	31 c0                	xor    eax,eax
c00160eb:	4a                   	dec    edx
c00160ec:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160ef:	84 c9                	test   cl,cl
c00160f1:	74 0f                	je     c0016102 <Reg::readString(char*, char*, char*, int)+0x51>
c00160f3:	39 c2                	cmp    edx,eax
c00160f5:	7e 0b                	jle    c0016102 <Reg::readString(char*, char*, char*, int)+0x51>
c00160f7:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00160fa:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00160ff:	40                   	inc    eax
c0016100:	eb ea                	jmp    c00160ec <Reg::readString(char*, char*, char*, int)+0x3b>
c0016102:	83 ec 0c             	sub    esp,0xc
c0016105:	53                   	push   ebx
c0016106:	e8 cc a5 fe ff       	call   c00006d7 <strlen>
c001610b:	83 c4 10             	add    esp,0x10
c001610e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016113:	75 11                	jne    c0016126 <Reg::readString(char*, char*, char*, int)+0x75>
c0016115:	83 ec 0c             	sub    esp,0xc
c0016118:	53                   	push   ebx
c0016119:	e8 b9 a5 fe ff       	call   c00006d7 <strlen>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016126:	81 c4 d0 00 00 00    	add    esp,0xd0
c001612c:	89 f0                	mov    eax,esi
c001612e:	5b                   	pop    ebx
c001612f:	5e                   	pop    esi
c0016130:	5f                   	pop    edi
c0016131:	c3                   	ret    

c0016132 <Reg::readBool(char*, char*, bool*)>:
c0016132:	83 ec 20             	sub    esp,0x20
c0016135:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016139:	50                   	push   eax
c001613a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001613e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016142:	e8 80 fe ff ff       	call   c0015fc7 <Reg::readInt(char*, char*, int*)>
c0016147:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001614b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016150:	0f 95 02             	setne  BYTE PTR [edx]
c0016153:	83 c4 2c             	add    esp,0x2c
c0016156:	c3                   	ret    

c0016157 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016157:	53                   	push   ebx
c0016158:	83 ec 1c             	sub    esp,0x1c
c001615b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001615f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016163:	50                   	push   eax
c0016164:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001616c:	e8 c1 ff ff ff       	call   c0016132 <Reg::readBool(char*, char*, bool*)>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	84 c0                	test   al,al
c0016176:	74 04                	je     c001617c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016178:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001617c:	83 c4 18             	add    esp,0x18
c001617f:	88 d8                	mov    al,bl
c0016181:	5b                   	pop    ebx
c0016182:	c3                   	ret    

c0016183 <Reg::readIntWithDefault(char*, char*, int)>:
c0016183:	53                   	push   ebx
c0016184:	83 ec 1c             	sub    esp,0x1c
c0016187:	8d 44 24 10          	lea    eax,[esp+0x10]
c001618b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001618f:	50                   	push   eax
c0016190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016194:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016198:	e8 2a fe ff ff       	call   c0015fc7 <Reg::readInt(char*, char*, int*)>
c001619d:	83 c4 10             	add    esp,0x10
c00161a0:	84 c0                	test   al,al
c00161a2:	74 04                	je     c00161a8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00161a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00161a8:	83 c4 18             	add    esp,0x18
c00161ab:	89 d8                	mov    eax,ebx
c00161ad:	5b                   	pop    ebx
c00161ae:	c3                   	ret    

c00161af <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00161af:	56                   	push   esi
c00161b0:	53                   	push   ebx
c00161b1:	51                   	push   ecx
c00161b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00161b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161be:	56                   	push   esi
c00161bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c7:	e8 e5 fe ff ff       	call   c00160b1 <Reg::readString(char*, char*, char*, int)>
c00161cc:	83 c4 10             	add    esp,0x10
c00161cf:	84 c0                	test   al,al
c00161d1:	74 02                	je     c00161d5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00161d3:	89 f3                	mov    ebx,esi
c00161d5:	5a                   	pop    edx
c00161d6:	89 d8                	mov    eax,ebx
c00161d8:	5b                   	pop    ebx
c00161d9:	5e                   	pop    esi
c00161da:	c3                   	ret    

c00161db <Sys::exit(regs*)>:
c00161db:	83 ec 18             	sub    esp,0x18
c00161de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161e5:	e8 a6 31 00 00       	call   c0019390 <terminateTask(int)>
c00161ea:	83 c8 ff             	or     eax,0xffffffff
c00161ed:	89 c2                	mov    edx,eax
c00161ef:	83 c4 1c             	add    esp,0x1c
c00161f2:	c3                   	ret    

c00161f3 <Sys::loadDLL(regs*)>:
c00161f3:	56                   	push   esi
c00161f4:	31 d2                	xor    edx,edx
c00161f6:	53                   	push   ebx
c00161f7:	b8 01 00 00 00       	mov    eax,0x1
c00161fc:	51                   	push   ecx
c00161fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016201:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016205:	74 7d                	je     c0016284 <Sys::loadDLL(regs*)+0x91>
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	68 14 01 00 00       	push   0x114
c001620f:	e8 fe 8d ff ff       	call   c000f012 <operator new(unsigned long)>
c0016214:	89 c3                	mov    ebx,eax
c0016216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001621b:	83 c4 0c             	add    esp,0xc
c001621e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016221:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016224:	53                   	push   ebx
c0016225:	e8 54 94 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c001622a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001622d:	e8 1e 97 ff ff       	call   c000f950 <File::exists()>
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	84 c0                	test   al,al
c0016237:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016239:	75 11                	jne    c001624c <Sys::loadDLL(regs*)+0x59>
c001623b:	83 ec 0c             	sub    esp,0xc
c001623e:	53                   	push   ebx
c001623f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	b8 03 00 00 00       	mov    eax,0x3
c001624a:	eb 36                	jmp    c0016282 <Sys::loadDLL(regs*)+0x8f>
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	53                   	push   ebx
c0016250:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016253:	58                   	pop    eax
c0016254:	5a                   	pop    edx
c0016255:	6a 00                	push   0x0
c0016257:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001625a:	e8 1f 21 00 00       	call   c001837e <Thr::loadDLL(char const*, bool)>
c001625f:	83 c4 10             	add    esp,0x10
c0016262:	89 c1                	mov    ecx,eax
c0016264:	31 d2                	xor    edx,edx
c0016266:	b8 04 00 00 00       	mov    eax,0x4
c001626b:	85 c9                	test   ecx,ecx
c001626d:	74 15                	je     c0016284 <Sys::loadDLL(regs*)+0x91>
c001626f:	53                   	push   ebx
c0016270:	53                   	push   ebx
c0016271:	ff 35 a8 45 02 c0    	push   DWORD PTR ds:0xc00245a8
c0016277:	51                   	push   ecx
c0016278:	e8 c7 22 00 00       	call   c0018544 <Thr::executeDLL(unsigned long, void*)>
c001627d:	83 c4 10             	add    esp,0x10
c0016280:	31 c0                	xor    eax,eax
c0016282:	31 d2                	xor    edx,edx
c0016284:	59                   	pop    ecx
c0016285:	5b                   	pop    ebx
c0016286:	5e                   	pop    esi
c0016287:	c3                   	ret    

c0016288 <Sys::read(regs*)>:
c0016288:	57                   	push   edi
c0016289:	56                   	push   esi
c001628a:	53                   	push   ebx
c001628b:	83 ec 10             	sub    esp,0x10
c001628e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016292:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016295:	83 f8 02             	cmp    eax,0x2
c0016298:	77 10                	ja     c00162aa <Sys::read(regs*)+0x22>
c001629a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001629f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162a2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00162a8:	eb 0e                	jmp    c00162b8 <Sys::read(regs*)+0x30>
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	50                   	push   eax
c00162ae:	e8 1e 7d ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	89 c1                	mov    ecx,eax
c00162b8:	83 c8 ff             	or     eax,0xffffffff
c00162bb:	85 c9                	test   ecx,ecx
c00162bd:	89 c2                	mov    edx,eax
c00162bf:	74 28                	je     c00162e9 <Sys::read(regs*)+0x61>
c00162c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162c9:	83 ec 0c             	sub    esp,0xc
c00162cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00162ce:	31 ff                	xor    edi,edi
c00162d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162d4:	52                   	push   edx
c00162d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162d8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162db:	57                   	push   edi
c00162dc:	56                   	push   esi
c00162dd:	51                   	push   ecx
c00162de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162e5:	83 c4 20             	add    esp,0x20
c00162e8:	99                   	cdq    
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	5b                   	pop    ebx
c00162ed:	5e                   	pop    esi
c00162ee:	5f                   	pop    edi
c00162ef:	c3                   	ret    

c00162f0 <Sys::sbrk(regs*)>:
c00162f0:	56                   	push   esi
c00162f1:	53                   	push   ebx
c00162f2:	50                   	push   eax
c00162f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162ff:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016302:	85 db                	test   ebx,ebx
c0016304:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001630a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001630d:	74 02                	je     c0016311 <Sys::sbrk(regs*)+0x21>
c001630f:	79 06                	jns    c0016317 <Sys::sbrk(regs*)+0x27>
c0016311:	89 f0                	mov    eax,esi
c0016313:	31 d2                	xor    edx,edx
c0016315:	eb 2a                	jmp    c0016341 <Sys::sbrk(regs*)+0x51>
c0016317:	83 c8 ff             	or     eax,0xffffffff
c001631a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016320:	89 c2                	mov    edx,eax
c0016322:	77 1d                	ja     c0016341 <Sys::sbrk(regs*)+0x51>
c0016324:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001632a:	50                   	push   eax
c001632b:	c1 ea 0c             	shr    edx,0xc
c001632e:	68 07 04 00 00       	push   0x407
c0016333:	52                   	push   edx
c0016334:	51                   	push   ecx
c0016335:	e8 c0 85 ff ff       	call   c000e8fa <VAS::allocatePages(int, int)>
c001633a:	89 f0                	mov    eax,esi
c001633c:	31 d2                	xor    edx,edx
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	59                   	pop    ecx
c0016342:	5b                   	pop    ebx
c0016343:	5e                   	pop    esi
c0016344:	c3                   	ret    

c0016345 <Sys::write(regs*)>:
c0016345:	57                   	push   edi
c0016346:	56                   	push   esi
c0016347:	53                   	push   ebx
c0016348:	83 ec 10             	sub    esp,0x10
c001634b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001634f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016352:	83 f8 02             	cmp    eax,0x2
c0016355:	77 10                	ja     c0016367 <Sys::write(regs*)+0x22>
c0016357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001635f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016365:	eb 0e                	jmp    c0016375 <Sys::write(regs*)+0x30>
c0016367:	83 ec 0c             	sub    esp,0xc
c001636a:	50                   	push   eax
c001636b:	e8 61 7c ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	89 c1                	mov    ecx,eax
c0016375:	83 c8 ff             	or     eax,0xffffffff
c0016378:	85 c9                	test   ecx,ecx
c001637a:	89 c2                	mov    edx,eax
c001637c:	74 28                	je     c00163a6 <Sys::write(regs*)+0x61>
c001637e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016386:	31 ff                	xor    edi,edi
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001638d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016391:	52                   	push   edx
c0016392:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016395:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016398:	57                   	push   edi
c0016399:	56                   	push   esi
c001639a:	51                   	push   ecx
c001639b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001639e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163a2:	83 c4 20             	add    esp,0x20
c00163a5:	99                   	cdq    
c00163a6:	83 c4 10             	add    esp,0x10
c00163a9:	5b                   	pop    ebx
c00163aa:	5e                   	pop    esi
c00163ab:	5f                   	pop    edi
c00163ac:	c3                   	ret    

c00163ad <Sys::yield(regs*)>:
c00163ad:	83 ec 0c             	sub    esp,0xc
c00163b0:	e8 ae 25 00 00       	call   c0018963 <lockScheduler()>
c00163b5:	e8 f2 28 00 00       	call   c0018cac <schedule()>
c00163ba:	e8 a6 25 00 00       	call   c0018965 <unlockScheduler()>
c00163bf:	31 c0                	xor    eax,eax
c00163c1:	31 d2                	xor    edx,edx
c00163c3:	83 c4 0c             	add    esp,0xc
c00163c6:	c3                   	ret    

c00163c7 <sysCallGetPID(regs*)>:
c00163c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00163d1:	89 c2                	mov    edx,eax
c00163d3:	c1 fa 1f             	sar    edx,0x1f
c00163d6:	c3                   	ret    

c00163d7 <sysCallSeekDir(regs*)>:
c00163d7:	31 c0                	xor    eax,eax
c00163d9:	31 d2                	xor    edx,edx
c00163db:	c3                   	ret    

c00163dc <sysCallTellDir(regs*)>:
c00163dc:	31 c0                	xor    eax,eax
c00163de:	31 d2                	xor    edx,edx
c00163e0:	c3                   	ret    

c00163e1 <sysCallVerify(regs*)>:
c00163e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e5:	31 d2                	xor    edx,edx
c00163e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163ea:	c3                   	ret    

c00163eb <sysCallFork(regs*)>:
c00163eb:	83 c8 ff             	or     eax,0xffffffff
c00163ee:	83 ca ff             	or     edx,0xffffffff
c00163f1:	c3                   	ret    

c00163f2 <sysCallExecve(regs*)>:
c00163f2:	83 c8 ff             	or     eax,0xffffffff
c00163f5:	83 ca ff             	or     edx,0xffffffff
c00163f8:	c3                   	ret    

c00163f9 <sysCallGetArgc(regs*)>:
c00163f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016401:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0016407:	89 c2                	mov    edx,eax
c0016409:	c1 fa 1f             	sar    edx,0x1f
c001640c:	c3                   	ret    

c001640d <sysFormatDisk(regs*)>:
c001640d:	56                   	push   esi
c001640e:	53                   	push   ebx
c001640f:	50                   	push   eax
c0016410:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016414:	8b 1d 08 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024708
c001641a:	eb 2a                	jmp    c0016446 <sysFormatDisk(regs*)+0x39>
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016422:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016427:	51                   	push   ecx
c0016428:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001642b:	51                   	push   ecx
c001642c:	50                   	push   eax
c001642d:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c0016434:	50                   	push   eax
c0016435:	53                   	push   ebx
c0016436:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016439:	83 c4 20             	add    esp,0x20
c001643c:	89 c1                	mov    ecx,eax
c001643e:	83 f8 08             	cmp    eax,0x8
c0016441:	75 12                	jne    c0016455 <sysFormatDisk(regs*)+0x48>
c0016443:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016446:	85 db                	test   ebx,ebx
c0016448:	75 d2                	jne    c001641c <sysFormatDisk(regs*)+0xf>
c001644a:	b8 03 00 00 00       	mov    eax,0x3
c001644f:	31 d2                	xor    edx,edx
c0016451:	59                   	pop    ecx
c0016452:	5b                   	pop    ebx
c0016453:	5e                   	pop    esi
c0016454:	c3                   	ret    
c0016455:	85 c0                	test   eax,eax
c0016457:	74 13                	je     c001646c <sysFormatDisk(regs*)+0x5f>
c0016459:	31 d2                	xor    edx,edx
c001645b:	b8 01 00 00 00       	mov    eax,0x1
c0016460:	83 f9 09             	cmp    ecx,0x9
c0016463:	74 ec                	je     c0016451 <sysFormatDisk(regs*)+0x44>
c0016465:	b8 02 00 00 00       	mov    eax,0x2
c001646a:	eb e3                	jmp    c001644f <sysFormatDisk(regs*)+0x42>
c001646c:	31 c0                	xor    eax,eax
c001646e:	eb df                	jmp    c001644f <sysFormatDisk(regs*)+0x42>

c0016470 <sysSetDiskVolumeLabel(regs*)>:
c0016470:	56                   	push   esi
c0016471:	53                   	push   ebx
c0016472:	53                   	push   ebx
c0016473:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016477:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001647a:	83 f8 19             	cmp    eax,0x19
c001647d:	77 2d                	ja     c00164ac <sysSetDiskVolumeLabel(regs*)+0x3c>
c001647f:	8b 0c 85 a0 4b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb460]
c0016486:	85 c9                	test   ecx,ecx
c0016488:	74 22                	je     c00164ac <sysSetDiskVolumeLabel(regs*)+0x3c>
c001648a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001648d:	85 d2                	test   edx,edx
c001648f:	74 1b                	je     c00164ac <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016491:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016497:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016499:	52                   	push   edx
c001649a:	50                   	push   eax
c001649b:	51                   	push   ecx
c001649c:	53                   	push   ebx
c001649d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00164a0:	83 c4 10             	add    esp,0x10
c00164a3:	89 c2                	mov    edx,eax
c00164a5:	c1 fa 1f             	sar    edx,0x1f
c00164a8:	59                   	pop    ecx
c00164a9:	5b                   	pop    ebx
c00164aa:	5e                   	pop    esi
c00164ab:	c3                   	ret    
c00164ac:	59                   	pop    ecx
c00164ad:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164b2:	5b                   	pop    ebx
c00164b3:	83 ca ff             	or     edx,0xffffffff
c00164b6:	5e                   	pop    esi
c00164b7:	c3                   	ret    

c00164b8 <sysGetDiskVolumeLabel(regs*)>:
c00164b8:	57                   	push   edi
c00164b9:	56                   	push   esi
c00164ba:	53                   	push   ebx
c00164bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bf:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164c2:	83 fa 19             	cmp    edx,0x19
c00164c5:	77 38                	ja     c00164ff <sysGetDiskVolumeLabel(regs*)+0x47>
c00164c7:	8b 0c 95 a0 4b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb460]
c00164ce:	85 c9                	test   ecx,ecx
c00164d0:	74 2d                	je     c00164ff <sysGetDiskVolumeLabel(regs*)+0x47>
c00164d2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00164d5:	85 db                	test   ebx,ebx
c00164d7:	74 26                	je     c00164ff <sysGetDiskVolumeLabel(regs*)+0x47>
c00164d9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164dc:	85 c0                	test   eax,eax
c00164de:	74 1f                	je     c00164ff <sysGetDiskVolumeLabel(regs*)+0x47>
c00164e0:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00164eb:	50                   	push   eax
c00164ec:	53                   	push   ebx
c00164ed:	52                   	push   edx
c00164ee:	51                   	push   ecx
c00164ef:	56                   	push   esi
c00164f0:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00164f3:	83 c4 20             	add    esp,0x20
c00164f6:	89 c2                	mov    edx,eax
c00164f8:	c1 fa 1f             	sar    edx,0x1f
c00164fb:	5b                   	pop    ebx
c00164fc:	5e                   	pop    esi
c00164fd:	5f                   	pop    edi
c00164fe:	c3                   	ret    
c00164ff:	5b                   	pop    ebx
c0016500:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016505:	5e                   	pop    esi
c0016506:	83 ca ff             	or     edx,0xffffffff
c0016509:	5f                   	pop    edi
c001650a:	c3                   	ret    

c001650b <sysShutdown(regs*)>:
c001650b:	57                   	push   edi
c001650c:	56                   	push   esi
c001650d:	56                   	push   esi
c001650e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016512:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016515:	85 c0                	test   eax,eax
c0016517:	74 18                	je     c0016531 <sysShutdown(regs*)+0x26>
c0016519:	83 f8 01             	cmp    eax,0x1
c001651c:	74 51                	je     c001656f <sysShutdown(regs*)+0x64>
c001651e:	83 ce ff             	or     esi,0xffffffff
c0016521:	83 cf ff             	or     edi,0xffffffff
c0016524:	83 f8 02             	cmp    eax,0x2
c0016527:	74 2a                	je     c0016553 <sysShutdown(regs*)+0x48>
c0016529:	59                   	pop    ecx
c001652a:	89 f0                	mov    eax,esi
c001652c:	5e                   	pop    esi
c001652d:	89 fa                	mov    edx,edi
c001652f:	5f                   	pop    edi
c0016530:	c3                   	ret    
c0016531:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0016536:	83 ce ff             	or     esi,0xffffffff
c0016539:	83 cf ff             	or     edi,0xffffffff
c001653c:	8b 10                	mov    edx,DWORD PTR [eax]
c001653e:	6a 00                	push   0x0
c0016540:	6a 00                	push   0x0
c0016542:	6a 00                	push   0x0
c0016544:	50                   	push   eax
c0016545:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016548:	83 c4 10             	add    esp,0x10
c001654b:	89 f0                	mov    eax,esi
c001654d:	89 fa                	mov    edx,edi
c001654f:	59                   	pop    ecx
c0016550:	5e                   	pop    esi
c0016551:	5f                   	pop    edi
c0016552:	c3                   	ret    
c0016553:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0016558:	8b 10                	mov    edx,DWORD PTR [eax]
c001655a:	6a 00                	push   0x0
c001655c:	6a 00                	push   0x0
c001655e:	6a 01                	push   0x1
c0016560:	50                   	push   eax
c0016561:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	89 f0                	mov    eax,esi
c0016569:	89 fa                	mov    edx,edi
c001656b:	59                   	pop    ecx
c001656c:	5e                   	pop    esi
c001656d:	5f                   	pop    edi
c001656e:	c3                   	ret    
c001656f:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c0016574:	85 c0                	test   eax,eax
c0016576:	74 02                	je     c001657a <sysShutdown(regs*)+0x6f>
c0016578:	ff d0                	call   eax
c001657a:	31 f6                	xor    esi,esi
c001657c:	59                   	pop    ecx
c001657d:	31 ff                	xor    edi,edi
c001657f:	89 f0                	mov    eax,esi
c0016581:	5e                   	pop    esi
c0016582:	89 fa                	mov    edx,edi
c0016584:	5f                   	pop    edi
c0016585:	c3                   	ret    

c0016586 <sysCallGetCwd(regs*)>:
c0016586:	83 ec 10             	sub    esp,0x10
c0016589:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001658d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016590:	52                   	push   edx
c0016591:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016594:	51                   	push   ecx
c0016595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001659a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001659d:	50                   	push   eax
c001659e:	e8 4c 94 ff ff       	call   c000f9ef <getcwd(Process*, char*, int)>
c00165a3:	89 c2                	mov    edx,eax
c00165a5:	83 c4 1c             	add    esp,0x1c
c00165a8:	c1 fa 1f             	sar    edx,0x1f
c00165ab:	c3                   	ret    

c00165ac <sysCallSetCwd(regs*)>:
c00165ac:	83 ec 14             	sub    esp,0x14
c00165af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165b6:	50                   	push   eax
c00165b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165bc:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00165bf:	52                   	push   edx
c00165c0:	e8 54 94 ff ff       	call   c000fa19 <setcwd(Process*, char*)>
c00165c5:	89 c2                	mov    edx,eax
c00165c7:	83 c4 1c             	add    esp,0x1c
c00165ca:	c1 fa 1f             	sar    edx,0x1f
c00165cd:	c3                   	ret    

c00165ce <sysCallRealpath(regs*)>:
c00165ce:	53                   	push   ebx
c00165cf:	83 ec 08             	sub    esp,0x8
c00165d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00165d9:	85 c9                	test   ecx,ecx
c00165db:	74 35                	je     c0016612 <sysCallRealpath(regs*)+0x44>
c00165dd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165e0:	31 d2                	xor    edx,edx
c00165e2:	b8 01 00 00 00       	mov    eax,0x1
c00165e7:	85 db                	test   ebx,ebx
c00165e9:	75 05                	jne    c00165f0 <sysCallRealpath(regs*)+0x22>
c00165eb:	83 c4 08             	add    esp,0x8
c00165ee:	5b                   	pop    ebx
c00165ef:	c3                   	ret    
c00165f0:	50                   	push   eax
c00165f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165f9:	05 0c 01 00 00       	add    eax,0x10c
c00165fe:	50                   	push   eax
c00165ff:	51                   	push   ecx
c0016600:	53                   	push   ebx
c0016601:	e8 ce 8e ff ff       	call   c000f4d4 <standardiseFiles(char*, char const*, char const*)>
c0016606:	83 c4 10             	add    esp,0x10
c0016609:	31 c0                	xor    eax,eax
c001660b:	31 d2                	xor    edx,edx
c001660d:	83 c4 08             	add    esp,0x8
c0016610:	5b                   	pop    ebx
c0016611:	c3                   	ret    
c0016612:	b8 01 00 00 00       	mov    eax,0x1
c0016617:	31 d2                	xor    edx,edx
c0016619:	eb f2                	jmp    c001660d <sysCallRealpath(regs*)+0x3f>

c001661b <sysCallReadDir(regs*)>:
c001661b:	53                   	push   ebx
c001661c:	83 ec 18             	sub    esp,0x18
c001661f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016623:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016626:	83 f8 02             	cmp    eax,0x2
c0016629:	76 56                	jbe    c0016681 <sysCallReadDir(regs*)+0x66>
c001662b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001662e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016634:	77 57                	ja     c001668d <sysCallReadDir(regs*)+0x72>
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	50                   	push   eax
c001663a:	e8 92 79 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	85 c0                	test   eax,eax
c0016644:	74 57                	je     c001669d <sysCallReadDir(regs*)+0x82>
c0016646:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	8b 10                	mov    edx,DWORD PTR [eax]
c0016653:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016657:	51                   	push   ecx
c0016658:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001665b:	51                   	push   ecx
c001665c:	6a 00                	push   0x0
c001665e:	68 10 01 00 00       	push   0x110
c0016663:	50                   	push   eax
c0016664:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016667:	83 c4 20             	add    esp,0x20
c001666a:	89 c1                	mov    ecx,eax
c001666c:	85 c0                	test   eax,eax
c001666e:	74 38                	je     c00166a8 <sysCallReadDir(regs*)+0x8d>
c0016670:	31 d2                	xor    edx,edx
c0016672:	b8 02 00 00 00       	mov    eax,0x2
c0016677:	83 f9 07             	cmp    ecx,0x7
c001667a:	74 05                	je     c0016681 <sysCallReadDir(regs*)+0x66>
c001667c:	83 c4 18             	add    esp,0x18
c001667f:	5b                   	pop    ebx
c0016680:	c3                   	ret    
c0016681:	b8 01 00 00 00       	mov    eax,0x1
c0016686:	31 d2                	xor    edx,edx
c0016688:	83 c4 18             	add    esp,0x18
c001668b:	5b                   	pop    ebx
c001668c:	c3                   	ret    
c001668d:	53                   	push   ebx
c001668e:	53                   	push   ebx
c001668f:	52                   	push   edx
c0016690:	68 e8 28 02 c0       	push   0xc00228e8
c0016695:	e8 ad 8a ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	83 c4 18             	add    esp,0x18
c00166a0:	83 c8 ff             	or     eax,0xffffffff
c00166a3:	83 ca ff             	or     edx,0xffffffff
c00166a6:	5b                   	pop    ebx
c00166a7:	c3                   	ret    
c00166a8:	31 c0                	xor    eax,eax
c00166aa:	31 d2                	xor    edx,edx
c00166ac:	eb da                	jmp    c0016688 <sysCallReadDir(regs*)+0x6d>

c00166ae <sysCallIsATTY(regs*)>:
c00166ae:	83 ec 0c             	sub    esp,0xc
c00166b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166b8:	83 f8 02             	cmp    eax,0x2
c00166bb:	76 07                	jbe    c00166c4 <sysCallIsATTY(regs*)+0x16>
c00166bd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00166c2:	75 28                	jne    c00166ec <sysCallIsATTY(regs*)+0x3e>
c00166c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00166d2:	85 c0                	test   eax,eax
c00166d4:	74 26                	je     c00166fc <sysCallIsATTY(regs*)+0x4e>
c00166d6:	83 ec 0c             	sub    esp,0xc
c00166d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00166db:	50                   	push   eax
c00166dc:	ff 12                	call   DWORD PTR [edx]
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	25 ff 00 00 00       	and    eax,0xff
c00166e6:	31 d2                	xor    edx,edx
c00166e8:	83 c4 0c             	add    esp,0xc
c00166eb:	c3                   	ret    
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	50                   	push   eax
c00166f0:	e8 dc 78 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	85 c0                	test   eax,eax
c00166fa:	75 da                	jne    c00166d6 <sysCallIsATTY(regs*)+0x28>
c00166fc:	83 c8 ff             	or     eax,0xffffffff
c00166ff:	83 ca ff             	or     edx,0xffffffff
c0016702:	83 c4 0c             	add    esp,0xc
c0016705:	c3                   	ret    

c0016706 <sysCallSeek(regs*)>:
c0016706:	53                   	push   ebx
c0016707:	83 ec 08             	sub    esp,0x8
c001670a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001670e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016711:	83 f8 02             	cmp    eax,0x2
c0016714:	76 4b                	jbe    c0016761 <sysCallSeek(regs*)+0x5b>
c0016716:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001671b:	77 34                	ja     c0016751 <sysCallSeek(regs*)+0x4b>
c001671d:	83 ec 0c             	sub    esp,0xc
c0016720:	50                   	push   eax
c0016721:	e8 ab 78 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c0016726:	83 c4 0c             	add    esp,0xc
c0016729:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001672c:	31 db                	xor    ebx,ebx
c001672e:	53                   	push   ebx
c001672f:	51                   	push   ecx
c0016730:	50                   	push   eax
c0016731:	e8 6a 90 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0016736:	83 c4 10             	add    esp,0x10
c0016739:	85 c0                	test   eax,eax
c001673b:	0f 95 c0             	setne  al
c001673e:	25 ff 00 00 00       	and    eax,0xff
c0016743:	31 d2                	xor    edx,edx
c0016745:	f7 d8                	neg    eax
c0016747:	83 d2 00             	adc    edx,0x0
c001674a:	83 c4 08             	add    esp,0x8
c001674d:	f7 da                	neg    edx
c001674f:	5b                   	pop    ebx
c0016750:	c3                   	ret    
c0016751:	52                   	push   edx
c0016752:	52                   	push   edx
c0016753:	50                   	push   eax
c0016754:	68 a4 29 02 c0       	push   0xc00229a4
c0016759:	e8 e9 89 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001675e:	83 c4 10             	add    esp,0x10
c0016761:	83 c4 08             	add    esp,0x8
c0016764:	83 c8 ff             	or     eax,0xffffffff
c0016767:	83 ca ff             	or     edx,0xffffffff
c001676a:	5b                   	pop    ebx
c001676b:	c3                   	ret    

c001676c <sysCallTell(regs*)>:
c001676c:	53                   	push   ebx
c001676d:	83 ec 08             	sub    esp,0x8
c0016770:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016774:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016777:	83 f8 02             	cmp    eax,0x2
c001677a:	76 60                	jbe    c00167dc <sysCallTell(regs*)+0x70>
c001677c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016781:	77 30                	ja     c00167b3 <sysCallTell(regs*)+0x47>
c0016783:	83 ec 0c             	sub    esp,0xc
c0016786:	50                   	push   eax
c0016787:	e8 45 78 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c001678c:	5a                   	pop    edx
c001678d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016790:	59                   	pop    ecx
c0016791:	53                   	push   ebx
c0016792:	50                   	push   eax
c0016793:	e8 5e 90 ff ff       	call   c000f7f6 <File::tell(unsigned long long*)>
c0016798:	83 c4 10             	add    esp,0x10
c001679b:	85 c0                	test   eax,eax
c001679d:	0f 95 c0             	setne  al
c00167a0:	25 ff 00 00 00       	and    eax,0xff
c00167a5:	31 d2                	xor    edx,edx
c00167a7:	f7 d8                	neg    eax
c00167a9:	83 d2 00             	adc    edx,0x0
c00167ac:	83 c4 08             	add    esp,0x8
c00167af:	f7 da                	neg    edx
c00167b1:	5b                   	pop    ebx
c00167b2:	c3                   	ret    
c00167b3:	52                   	push   edx
c00167b4:	52                   	push   edx
c00167b5:	50                   	push   eax
c00167b6:	68 be 29 02 c0       	push   0xc00229be
c00167bb:	e8 87 89 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00167c0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	31 d2                	xor    edx,edx
c00167c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167d5:	83 c4 08             	add    esp,0x8
c00167d8:	31 c0                	xor    eax,eax
c00167da:	5b                   	pop    ebx
c00167db:	c3                   	ret    
c00167dc:	83 c4 08             	add    esp,0x8
c00167df:	83 c8 ff             	or     eax,0xffffffff
c00167e2:	83 ca ff             	or     edx,0xffffffff
c00167e5:	5b                   	pop    ebx
c00167e6:	c3                   	ret    

c00167e7 <sysCallSizeFromFilename(regs*)>:
c00167e7:	57                   	push   edi
c00167e8:	56                   	push   esi
c00167e9:	53                   	push   ebx
c00167ea:	83 ec 10             	sub    esp,0x10
c00167ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00167f1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00167f4:	83 fb 02             	cmp    ebx,0x2
c00167f7:	0f 86 8b 00 00 00    	jbe    c0016888 <sysCallSizeFromFilename(regs*)+0xa1>
c00167fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016803:	77 58                	ja     c001685d <sysCallSizeFromFilename(regs*)+0x76>
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	68 14 01 00 00       	push   0x114
c001680d:	e8 00 88 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016812:	89 c7                	mov    edi,eax
c0016814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016819:	83 c4 0c             	add    esp,0xc
c001681c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001681f:	50                   	push   eax
c0016820:	53                   	push   ebx
c0016821:	57                   	push   edi
c0016822:	e8 57 8e ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0016827:	83 c4 0c             	add    esp,0xc
c001682a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001682e:	50                   	push   eax
c001682f:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016832:	52                   	push   edx
c0016833:	57                   	push   edi
c0016834:	e8 55 91 ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c0016839:	89 c3                	mov    ebx,eax
c001683b:	8b 07                	mov    eax,DWORD PTR [edi]
c001683d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016840:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016843:	31 c0                	xor    eax,eax
c0016845:	83 c4 10             	add    esp,0x10
c0016848:	85 db                	test   ebx,ebx
c001684a:	0f 95 c0             	setne  al
c001684d:	31 d2                	xor    edx,edx
c001684f:	f7 d8                	neg    eax
c0016851:	83 d2 00             	adc    edx,0x0
c0016854:	83 c4 10             	add    esp,0x10
c0016857:	f7 da                	neg    edx
c0016859:	5b                   	pop    ebx
c001685a:	5e                   	pop    esi
c001685b:	5f                   	pop    edi
c001685c:	c3                   	ret    
c001685d:	51                   	push   ecx
c001685e:	51                   	push   ecx
c001685f:	53                   	push   ebx
c0016860:	68 d8 29 02 c0       	push   0xc00229d8
c0016865:	e8 dd 88 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001686a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	31 d2                	xor    edx,edx
c0016872:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016878:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	31 c0                	xor    eax,eax
c0016884:	5b                   	pop    ebx
c0016885:	5e                   	pop    esi
c0016886:	5f                   	pop    edi
c0016887:	c3                   	ret    
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	83 c8 ff             	or     eax,0xffffffff
c001688e:	83 ca ff             	or     edx,0xffffffff
c0016891:	5b                   	pop    ebx
c0016892:	5e                   	pop    esi
c0016893:	5f                   	pop    edi
c0016894:	c3                   	ret    

c0016895 <sysCallSize(regs*)>:
c0016895:	53                   	push   ebx
c0016896:	83 ec 18             	sub    esp,0x18
c0016899:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001689d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168a0:	83 f8 02             	cmp    eax,0x2
c00168a3:	76 66                	jbe    c001690b <sysCallSize(regs*)+0x76>
c00168a5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00168aa:	77 36                	ja     c00168e2 <sysCallSize(regs*)+0x4d>
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	50                   	push   eax
c00168b0:	e8 1c 77 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c00168b5:	83 c4 0c             	add    esp,0xc
c00168b8:	8d 54 24 13          	lea    edx,[esp+0x13]
c00168bc:	52                   	push   edx
c00168bd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00168c0:	52                   	push   edx
c00168c1:	50                   	push   eax
c00168c2:	e8 c7 90 ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	85 c0                	test   eax,eax
c00168cc:	0f 95 c0             	setne  al
c00168cf:	25 ff 00 00 00       	and    eax,0xff
c00168d4:	31 d2                	xor    edx,edx
c00168d6:	f7 d8                	neg    eax
c00168d8:	83 d2 00             	adc    edx,0x0
c00168db:	83 c4 18             	add    esp,0x18
c00168de:	f7 da                	neg    edx
c00168e0:	5b                   	pop    ebx
c00168e1:	c3                   	ret    
c00168e2:	51                   	push   ecx
c00168e3:	51                   	push   ecx
c00168e4:	50                   	push   eax
c00168e5:	68 d8 29 02 c0       	push   0xc00229d8
c00168ea:	e8 58 88 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00168ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168f2:	83 c4 10             	add    esp,0x10
c00168f5:	31 d2                	xor    edx,edx
c00168f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016904:	83 c4 18             	add    esp,0x18
c0016907:	31 c0                	xor    eax,eax
c0016909:	5b                   	pop    ebx
c001690a:	c3                   	ret    
c001690b:	83 c4 18             	add    esp,0x18
c001690e:	83 c8 ff             	or     eax,0xffffffff
c0016911:	83 ca ff             	or     edx,0xffffffff
c0016914:	5b                   	pop    ebx
c0016915:	c3                   	ret    

c0016916 <sysCallClose(regs*)>:
c0016916:	53                   	push   ebx
c0016917:	83 ec 08             	sub    esp,0x8
c001691a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016921:	83 f8 02             	cmp    eax,0x2
c0016924:	76 4f                	jbe    c0016975 <sysCallClose(regs*)+0x5f>
c0016926:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001692b:	74 53                	je     c0016980 <sysCallClose(regs*)+0x6a>
c001692d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016932:	74 5b                	je     c001698f <sysCallClose(regs*)+0x79>
c0016934:	77 2f                	ja     c0016965 <sysCallClose(regs*)+0x4f>
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	50                   	push   eax
c001693a:	e8 92 76 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c001693f:	89 c3                	mov    ebx,eax
c0016941:	89 04 24             	mov    DWORD PTR [esp],eax
c0016944:	e8 f7 8d ff ff       	call   c000f740 <File::close()>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	85 db                	test   ebx,ebx
c001694e:	74 0c                	je     c001695c <sysCallClose(regs*)+0x46>
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016955:	53                   	push   ebx
c0016956:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	83 c4 08             	add    esp,0x8
c001695f:	31 c0                	xor    eax,eax
c0016961:	31 d2                	xor    edx,edx
c0016963:	5b                   	pop    ebx
c0016964:	c3                   	ret    
c0016965:	52                   	push   edx
c0016966:	52                   	push   edx
c0016967:	50                   	push   eax
c0016968:	68 0c 29 02 c0       	push   0xc002290c
c001696d:	e8 d5 87 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	83 c4 08             	add    esp,0x8
c0016978:	83 c8 ff             	or     eax,0xffffffff
c001697b:	83 ca ff             	or     edx,0xffffffff
c001697e:	5b                   	pop    ebx
c001697f:	c3                   	ret    
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	68 f3 29 02 c0       	push   0xc00229f3
c0016988:	e8 ba 87 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001698d:	eb ca                	jmp    c0016959 <sysCallClose(regs*)+0x43>
c001698f:	83 ec 0c             	sub    esp,0xc
c0016992:	68 01 2a 02 c0       	push   0xc0022a01
c0016997:	eb ef                	jmp    c0016988 <sysCallClose(regs*)+0x72>

c0016999 <sysCallOpenDir(regs*)>:
c0016999:	56                   	push   esi
c001699a:	53                   	push   ebx
c001699b:	50                   	push   eax
c001699c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169a3:	85 c0                	test   eax,eax
c00169a5:	74 53                	je     c00169fa <sysCallOpenDir(regs*)+0x61>
c00169a7:	83 ec 0c             	sub    esp,0xc
c00169aa:	68 14 01 00 00       	push   0x114
c00169af:	e8 5e 86 ff ff       	call   c000f012 <operator new(unsigned long)>
c00169b4:	89 c6                	mov    esi,eax
c00169b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169bb:	83 c4 0c             	add    esp,0xc
c00169be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169c1:	50                   	push   eax
c00169c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169c5:	50                   	push   eax
c00169c6:	56                   	push   esi
c00169c7:	e8 74 91 ff ff       	call   c000fb40 <Directory::Directory(char const*, Process*)>
c00169cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00169cf:	e8 d0 91 ff ff       	call   c000fba4 <Directory::open()>
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	85 c0                	test   eax,eax
c00169d9:	75 1f                	jne    c00169fa <sysCallOpenDir(regs*)+0x61>
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	56                   	push   esi
c00169df:	e8 38 73 ff ff       	call   c000dd1c <UnixFile::getFileDescriptor()>
c00169e4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	89 02                	mov    DWORD PTR [edx],eax
c00169ec:	c1 f8 1f             	sar    eax,0x1f
c00169ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169f2:	31 c0                	xor    eax,eax
c00169f4:	59                   	pop    ecx
c00169f5:	31 d2                	xor    edx,edx
c00169f7:	5b                   	pop    ebx
c00169f8:	5e                   	pop    esi
c00169f9:	c3                   	ret    
c00169fa:	59                   	pop    ecx
c00169fb:	83 c8 ff             	or     eax,0xffffffff
c00169fe:	5b                   	pop    ebx
c00169ff:	83 ca ff             	or     edx,0xffffffff
c0016a02:	5e                   	pop    esi
c0016a03:	c3                   	ret    

c0016a04 <sysCallMakeDir(regs*)>:
c0016a04:	56                   	push   esi
c0016a05:	53                   	push   ebx
c0016a06:	83 ec 10             	sub    esp,0x10
c0016a09:	68 14 01 00 00       	push   0x114
c0016a0e:	e8 ff 85 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016a13:	89 c3                	mov    ebx,eax
c0016a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a1a:	83 c4 0c             	add    esp,0xc
c0016a1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a20:	50                   	push   eax
c0016a21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a25:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016a28:	52                   	push   edx
c0016a29:	53                   	push   ebx
c0016a2a:	e8 11 91 ff ff       	call   c000fb40 <Directory::Directory(char const*, Process*)>
c0016a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a32:	e8 4d 93 ff ff       	call   c000fd84 <Directory::create()>
c0016a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a3a:	89 c6                	mov    esi,eax
c0016a3c:	e8 bf 91 ff ff       	call   c000fc00 <Directory::close()>
c0016a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a49:	31 c0                	xor    eax,eax
c0016a4b:	85 f6                	test   esi,esi
c0016a4d:	0f 95 c0             	setne  al
c0016a50:	31 d2                	xor    edx,edx
c0016a52:	f7 d8                	neg    eax
c0016a54:	83 d2 00             	adc    edx,0x0
c0016a57:	83 c4 14             	add    esp,0x14
c0016a5a:	f7 da                	neg    edx
c0016a5c:	5b                   	pop    ebx
c0016a5d:	5e                   	pop    esi
c0016a5e:	c3                   	ret    

c0016a5f <sysCallCloseDir(regs*)>:
c0016a5f:	53                   	push   ebx
c0016a60:	83 ec 08             	sub    esp,0x8
c0016a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a67:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a6a:	83 f8 02             	cmp    eax,0x2
c0016a6d:	76 46                	jbe    c0016ab5 <sysCallCloseDir(regs*)+0x56>
c0016a6f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a74:	77 2f                	ja     c0016aa5 <sysCallCloseDir(regs*)+0x46>
c0016a76:	83 ec 0c             	sub    esp,0xc
c0016a79:	50                   	push   eax
c0016a7a:	e8 52 75 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c0016a7f:	89 c3                	mov    ebx,eax
c0016a81:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a84:	e8 77 91 ff ff       	call   c000fc00 <Directory::close()>
c0016a89:	83 c4 10             	add    esp,0x10
c0016a8c:	85 db                	test   ebx,ebx
c0016a8e:	74 0c                	je     c0016a9c <sysCallCloseDir(regs*)+0x3d>
c0016a90:	83 ec 0c             	sub    esp,0xc
c0016a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a95:	53                   	push   ebx
c0016a96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a99:	83 c4 10             	add    esp,0x10
c0016a9c:	83 c4 08             	add    esp,0x8
c0016a9f:	31 c0                	xor    eax,eax
c0016aa1:	31 d2                	xor    edx,edx
c0016aa3:	5b                   	pop    ebx
c0016aa4:	c3                   	ret    
c0016aa5:	52                   	push   edx
c0016aa6:	52                   	push   edx
c0016aa7:	50                   	push   eax
c0016aa8:	68 34 29 02 c0       	push   0xc0022934
c0016aad:	e8 95 86 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	83 c4 08             	add    esp,0x8
c0016ab8:	83 c8 ff             	or     eax,0xffffffff
c0016abb:	83 ca ff             	or     edx,0xffffffff
c0016abe:	5b                   	pop    ebx
c0016abf:	c3                   	ret    

c0016ac0 <sysCallWait(regs*)>:
c0016ac0:	83 ec 10             	sub    esp,0x10
c0016ac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ac7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016aca:	52                   	push   edx
c0016acb:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016ace:	51                   	push   ecx
c0016acf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016ad2:	50                   	push   eax
c0016ad3:	e8 4e 23 00 00       	call   c0018e26 <waitTask(int, int*, int)>
c0016ad8:	89 c2                	mov    edx,eax
c0016ada:	83 c4 1c             	add    esp,0x1c
c0016add:	c1 fa 1f             	sar    edx,0x1f
c0016ae0:	c3                   	ret    

c0016ae1 <sysCallRmdir(regs*)>:
c0016ae1:	56                   	push   esi
c0016ae2:	53                   	push   ebx
c0016ae3:	83 ec 10             	sub    esp,0x10
c0016ae6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016aed:	68 14 01 00 00       	push   0x114
c0016af2:	e8 1b 85 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016af7:	83 c4 0c             	add    esp,0xc
c0016afa:	89 c3                	mov    ebx,eax
c0016afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b04:	50                   	push   eax
c0016b05:	56                   	push   esi
c0016b06:	53                   	push   ebx
c0016b07:	e8 72 8b ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0016b0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b0f:	e8 46 8d ff ff       	call   c000f85a <File::unlink()>
c0016b14:	89 c6                	mov    esi,eax
c0016b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b1e:	31 c0                	xor    eax,eax
c0016b20:	85 f6                	test   esi,esi
c0016b22:	0f 95 c0             	setne  al
c0016b25:	31 d2                	xor    edx,edx
c0016b27:	f7 d8                	neg    eax
c0016b29:	83 d2 00             	adc    edx,0x0
c0016b2c:	83 c4 14             	add    esp,0x14
c0016b2f:	f7 da                	neg    edx
c0016b31:	5b                   	pop    ebx
c0016b32:	5e                   	pop    esi
c0016b33:	c3                   	ret    

c0016b34 <sysCallUnlink(regs*)>:
c0016b34:	56                   	push   esi
c0016b35:	53                   	push   ebx
c0016b36:	83 ec 10             	sub    esp,0x10
c0016b39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b3d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016b40:	68 14 01 00 00       	push   0x114
c0016b45:	e8 c8 84 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016b4a:	83 c4 0c             	add    esp,0xc
c0016b4d:	89 c3                	mov    ebx,eax
c0016b4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b57:	50                   	push   eax
c0016b58:	56                   	push   esi
c0016b59:	53                   	push   ebx
c0016b5a:	e8 1f 8b ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0016b5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b62:	e8 f3 8c ff ff       	call   c000f85a <File::unlink()>
c0016b67:	89 c6                	mov    esi,eax
c0016b69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b71:	31 c0                	xor    eax,eax
c0016b73:	85 f6                	test   esi,esi
c0016b75:	0f 95 c0             	setne  al
c0016b78:	31 d2                	xor    edx,edx
c0016b7a:	f7 d8                	neg    eax
c0016b7c:	83 d2 00             	adc    edx,0x0
c0016b7f:	83 c4 14             	add    esp,0x14
c0016b82:	f7 da                	neg    edx
c0016b84:	5b                   	pop    ebx
c0016b85:	5e                   	pop    esi
c0016b86:	c3                   	ret    

c0016b87 <sysCallGetArgv(regs*)>:
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b8e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016b91:	85 c0                	test   eax,eax
c0016b93:	78 2b                	js     c0016bc0 <sysCallGetArgv(regs*)+0x39>
c0016b95:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b9b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016b9e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016ba4:	7d 1a                	jge    c0016bc0 <sysCallGetArgv(regs*)+0x39>
c0016ba6:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016bad:	85 c0                	test   eax,eax
c0016baf:	74 17                	je     c0016bc8 <sysCallGetArgv(regs*)+0x41>
c0016bb1:	51                   	push   ecx
c0016bb2:	51                   	push   ecx
c0016bb3:	50                   	push   eax
c0016bb4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016bb7:	50                   	push   eax
c0016bb8:	e8 9c 9b fe ff       	call   c0000759 <strcpy>
c0016bbd:	83 c4 10             	add    esp,0x10
c0016bc0:	31 c0                	xor    eax,eax
c0016bc2:	31 d2                	xor    edx,edx
c0016bc4:	83 c4 0c             	add    esp,0xc
c0016bc7:	c3                   	ret    
c0016bc8:	b8 01 00 00 00       	mov    eax,0x1
c0016bcd:	31 d2                	xor    edx,edx
c0016bcf:	83 c4 0c             	add    esp,0xc
c0016bd2:	c3                   	ret    

c0016bd3 <sysCallTTYName(regs*)>:
c0016bd3:	56                   	push   esi
c0016bd4:	53                   	push   ebx
c0016bd5:	50                   	push   eax
c0016bd6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bda:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016bdd:	85 c0                	test   eax,eax
c0016bdf:	74 4d                	je     c0016c2e <sysCallTTYName(regs*)+0x5b>
c0016be1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016be4:	83 f8 02             	cmp    eax,0x2
c0016be7:	76 07                	jbe    c0016bf0 <sysCallTTYName(regs*)+0x1d>
c0016be9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016bee:	75 54                	jne    c0016c44 <sysCallTTYName(regs*)+0x71>
c0016bf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bf5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bf8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016bfe:	85 db                	test   ebx,ebx
c0016c00:	74 2c                	je     c0016c2e <sysCallTTYName(regs*)+0x5b>
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c07:	53                   	push   ebx
c0016c08:	ff 10                	call   DWORD PTR [eax]
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	84 c0                	test   al,al
c0016c0f:	74 28                	je     c0016c39 <sysCallTTYName(regs*)+0x66>
c0016c11:	50                   	push   eax
c0016c12:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016c18:	50                   	push   eax
c0016c19:	53                   	push   ebx
c0016c1a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016c1d:	50                   	push   eax
c0016c1e:	e8 36 9b fe ff       	call   c0000759 <strcpy>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	31 c0                	xor    eax,eax
c0016c28:	31 d2                	xor    edx,edx
c0016c2a:	59                   	pop    ecx
c0016c2b:	5b                   	pop    ebx
c0016c2c:	5e                   	pop    esi
c0016c2d:	c3                   	ret    
c0016c2e:	59                   	pop    ecx
c0016c2f:	b8 01 00 00 00       	mov    eax,0x1
c0016c34:	5b                   	pop    ebx
c0016c35:	31 d2                	xor    edx,edx
c0016c37:	5e                   	pop    esi
c0016c38:	c3                   	ret    
c0016c39:	59                   	pop    ecx
c0016c3a:	b8 02 00 00 00       	mov    eax,0x2
c0016c3f:	5b                   	pop    ebx
c0016c40:	31 d2                	xor    edx,edx
c0016c42:	5e                   	pop    esi
c0016c43:	c3                   	ret    
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	50                   	push   eax
c0016c48:	e8 84 73 ff ff       	call   c000dfd1 <getFromFileDescriptor(int)>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	89 c3                	mov    ebx,eax
c0016c52:	eb aa                	jmp    c0016bfe <sysCallTTYName(regs*)+0x2b>

c0016c54 <sysCallGetEnv(regs*)>:
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016c5e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c61:	85 d2                	test   edx,edx
c0016c63:	75 22                	jne    c0016c87 <sysCallGetEnv(regs*)+0x33>
c0016c65:	31 c0                	xor    eax,eax
c0016c67:	31 d2                	xor    edx,edx
c0016c69:	85 c9                	test   ecx,ecx
c0016c6b:	74 04                	je     c0016c71 <sysCallGetEnv(regs*)+0x1d>
c0016c6d:	83 c4 0c             	add    esp,0xc
c0016c70:	c3                   	ret    
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	68 58 29 02 c0       	push   0xc0022958
c0016c79:	e8 59 9a fe ff       	call   c00006d7 <strlen>
c0016c7e:	83 c4 10             	add    esp,0x10
c0016c81:	31 d2                	xor    edx,edx
c0016c83:	83 c4 0c             	add    esp,0xc
c0016c86:	c3                   	ret    
c0016c87:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016c8a:	85 c9                	test   ecx,ecx
c0016c8c:	74 0b                	je     c0016c99 <sysCallGetEnv(regs*)+0x45>
c0016c8e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016c91:	31 c0                	xor    eax,eax
c0016c93:	31 d2                	xor    edx,edx
c0016c95:	83 c4 0c             	add    esp,0xc
c0016c98:	c3                   	ret    
c0016c99:	52                   	push   edx
c0016c9a:	52                   	push   edx
c0016c9b:	68 58 29 02 c0       	push   0xc0022958
c0016ca0:	50                   	push   eax
c0016ca1:	e8 b3 9a fe ff       	call   c0000759 <strcpy>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	eb e6                	jmp    c0016c91 <sysCallGetEnv(regs*)+0x3d>

c0016cab <sysCallUSleep(regs*)>:
c0016cab:	57                   	push   edi
c0016cac:	56                   	push   esi
c0016cad:	53                   	push   ebx
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	52                   	push   edx
c0016cb3:	52                   	push   edx
c0016cb4:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016cb7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016cba:	89 c8                	mov    eax,ecx
c0016cbc:	89 da                	mov    edx,ebx
c0016cbe:	0f a4 c2 05          	shld   edx,eax,0x5
c0016cc2:	c1 e0 05             	shl    eax,0x5
c0016cc5:	29 c8                	sub    eax,ecx
c0016cc7:	19 da                	sbb    edx,ebx
c0016cc9:	0f a4 c2 02          	shld   edx,eax,0x2
c0016ccd:	c1 e0 02             	shl    eax,0x2
c0016cd0:	01 c8                	add    eax,ecx
c0016cd2:	11 da                	adc    edx,ebx
c0016cd4:	0f a4 c2 03          	shld   edx,eax,0x3
c0016cd8:	c1 e0 03             	shl    eax,0x3
c0016cdb:	52                   	push   edx
c0016cdc:	50                   	push   eax
c0016cdd:	e8 df 21 00 00       	call   c0018ec1 <nanoSleep(unsigned long long)>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	31 c0                	xor    eax,eax
c0016ce7:	31 d2                	xor    edx,edx
c0016ce9:	5b                   	pop    ebx
c0016cea:	5e                   	pop    esi
c0016ceb:	5f                   	pop    edi
c0016cec:	c3                   	ret    

c0016ced <sysCallSpawn(regs*)>:
c0016ced:	56                   	push   esi
c0016cee:	53                   	push   ebx
c0016cef:	50                   	push   eax
c0016cf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016cf4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cf7:	85 c0                	test   eax,eax
c0016cf9:	75 08                	jne    c0016d03 <sysCallSpawn(regs*)+0x16>
c0016cfb:	59                   	pop    ecx
c0016cfc:	31 c0                	xor    eax,eax
c0016cfe:	5b                   	pop    ebx
c0016cff:	31 d2                	xor    edx,edx
c0016d01:	5e                   	pop    esi
c0016d02:	c3                   	ret    
c0016d03:	83 ec 0c             	sub    esp,0xc
c0016d06:	68 3b 07 00 00       	push   0x73b
c0016d0b:	e8 02 83 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016d10:	89 c6                	mov    esi,eax
c0016d12:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016d15:	50                   	push   eax
c0016d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d1e:	50                   	push   eax
c0016d1f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d22:	50                   	push   eax
c0016d23:	56                   	push   esi
c0016d24:	e8 d5 18 00 00       	call   c00185fe <Process::Process(char const*, Process*, char**)>
c0016d29:	83 c4 20             	add    esp,0x20
c0016d2c:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016d33:	75 c6                	jne    c0016cfb <sysCallSpawn(regs*)+0xe>
c0016d35:	83 ec 0c             	sub    esp,0xc
c0016d38:	56                   	push   esi
c0016d39:	e8 3c 1e 00 00       	call   c0018b7a <Process::createUserThread()>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d43:	89 c2                	mov    edx,eax
c0016d45:	c1 fa 1f             	sar    edx,0x1f
c0016d48:	59                   	pop    ecx
c0016d49:	5b                   	pop    ebx
c0016d4a:	5e                   	pop    esi
c0016d4b:	c3                   	ret    

c0016d4c <sysAppSettings(regs*)>:
c0016d4c:	53                   	push   ebx
c0016d4d:	31 d2                	xor    edx,edx
c0016d4f:	83 ec 08             	sub    esp,0x8
c0016d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d56:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016d59:	b8 01 00 00 00       	mov    eax,0x1
c0016d5e:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016d64:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016d6a:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016d6f:	75 30                	jne    c0016da1 <sysAppSettings(regs*)+0x55>
c0016d71:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016d77:	83 e0 1f             	and    eax,0x1f
c0016d7a:	3c 01                	cmp    al,0x1
c0016d7c:	74 28                	je     c0016da6 <sysAppSettings(regs*)+0x5a>
c0016d7e:	3c 07                	cmp    al,0x7
c0016d80:	0f 84 be 00 00 00    	je     c0016e44 <sysAppSettings(regs*)+0xf8>
c0016d86:	84 c0                	test   al,al
c0016d88:	0f 84 da 00 00 00    	je     c0016e68 <sysAppSettings(regs*)+0x11c>
c0016d8e:	3c 08                	cmp    al,0x8
c0016d90:	74 6d                	je     c0016dff <sysAppSettings(regs*)+0xb3>
c0016d92:	25 ff 00 00 00       	and    eax,0xff
c0016d97:	05 e8 03 00 00       	add    eax,0x3e8
c0016d9c:	89 c2                	mov    edx,eax
c0016d9e:	c1 fa 1f             	sar    edx,0x1f
c0016da1:	83 c4 08             	add    esp,0x8
c0016da4:	5b                   	pop    ebx
c0016da5:	c3                   	ret    
c0016da6:	50                   	push   eax
c0016da7:	68 00 01 00 00       	push   0x100
c0016dac:	6a 00                	push   0x0
c0016dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016db6:	83 c0 0c             	add    eax,0xc
c0016db9:	50                   	push   eax
c0016dba:	e8 fb 98 fe ff       	call   c00006ba <memset>
c0016dbf:	83 c4 0c             	add    esp,0xc
c0016dc2:	68 ff 00 00 00       	push   0xff
c0016dc7:	53                   	push   ebx
c0016dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016dd0:	83 c0 0c             	add    eax,0xc
c0016dd3:	50                   	push   eax
c0016dd4:	e8 ab 98 fe ff       	call   c0000684 <memcpy>
c0016dd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dde:	5a                   	pop    edx
c0016ddf:	59                   	pop    ecx
c0016de0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016de3:	8d 50 0c             	lea    edx,[eax+0xc]
c0016de6:	52                   	push   edx
c0016de7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ded:	53                   	push   ebx
c0016dee:	e8 bb 63 ff ff       	call   c000d1ae <VgaText::setTitle(char*)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	31 c0                	xor    eax,eax
c0016df8:	31 d2                	xor    edx,edx
c0016dfa:	83 c4 08             	add    esp,0x8
c0016dfd:	5b                   	pop    ebx
c0016dfe:	c3                   	ret    
c0016dff:	50                   	push   eax
c0016e00:	50                   	push   eax
c0016e01:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016e07:	83 e0 0f             	and    eax,0xf
c0016e0a:	50                   	push   eax
c0016e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e13:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016e19:	50                   	push   eax
c0016e1a:	e8 7f 63 ff ff       	call   c000d19e <VgaText::setTitleColour(VgaColour)>
c0016e1f:	58                   	pop    eax
c0016e20:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016e26:	c1 e8 04             	shr    eax,0x4
c0016e29:	5a                   	pop    edx
c0016e2a:	83 e0 0f             	and    eax,0xf
c0016e2d:	50                   	push   eax
c0016e2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e36:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016e3c:	51                   	push   ecx
c0016e3d:	e8 4c 63 ff ff       	call   c000d18e <VgaText::setTitleTextColour(VgaColour)>
c0016e42:	eb af                	jmp    c0016df3 <sysAppSettings(regs*)+0xa7>
c0016e44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e4c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016e52:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016e58:	c0 e8 06             	shr    al,0x6
c0016e5b:	83 e0 01             	and    eax,0x1
c0016e5e:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016e64:	31 c0                	xor    eax,eax
c0016e66:	eb 90                	jmp    c0016df8 <sysAppSettings(regs*)+0xac>
c0016e68:	b8 02 00 00 00       	mov    eax,0x2
c0016e6d:	31 d2                	xor    edx,edx
c0016e6f:	eb 89                	jmp    c0016dfa <sysAppSettings(regs*)+0xae>

c0016e71 <sysSetFatAttrib(regs*)>:
c0016e71:	57                   	push   edi
c0016e72:	56                   	push   esi
c0016e73:	53                   	push   ebx
c0016e74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e7e:	68 14 01 00 00       	push   0x114
c0016e83:	e8 8a 81 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016e88:	83 c4 0c             	add    esp,0xc
c0016e8b:	89 c3                	mov    ebx,eax
c0016e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e95:	50                   	push   eax
c0016e96:	57                   	push   edi
c0016e97:	53                   	push   ebx
c0016e98:	e8 e1 87 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0016e9d:	83 c4 0c             	add    esp,0xc
c0016ea0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016ea3:	0f b6 d4             	movzx  edx,ah
c0016ea6:	52                   	push   edx
c0016ea7:	25 ff 00 00 00       	and    eax,0xff
c0016eac:	50                   	push   eax
c0016ead:	53                   	push   ebx
c0016eae:	e8 41 8a ff ff       	call   c000f8f4 <File::chfatattr(unsigned char, unsigned char)>
c0016eb3:	89 c6                	mov    esi,eax
c0016eb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016eba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ebd:	83 c4 10             	add    esp,0x10
c0016ec0:	31 c0                	xor    eax,eax
c0016ec2:	85 f6                	test   esi,esi
c0016ec4:	0f 95 c0             	setne  al
c0016ec7:	5b                   	pop    ebx
c0016ec8:	31 d2                	xor    edx,edx
c0016eca:	f7 d8                	neg    eax
c0016ecc:	83 d2 00             	adc    edx,0x0
c0016ecf:	5e                   	pop    esi
c0016ed0:	f7 da                	neg    edx
c0016ed2:	5f                   	pop    edi
c0016ed3:	c3                   	ret    

c0016ed4 <sysPanic(regs*)>:
c0016ed4:	83 ec 18             	sub    esp,0x18
c0016ed7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016edb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016ede:	50                   	push   eax
c0016edf:	e8 92 ea ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0016ee4:	c7 04 24 0f 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a0f
c0016eeb:	e8 86 ea ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0016ef0:	b8 01 00 00 00       	mov    eax,0x1
c0016ef5:	31 d2                	xor    edx,edx
c0016ef7:	83 c4 1c             	add    esp,0x1c
c0016efa:	c3                   	ret    

c0016efb <sysPipe(regs*)>:
c0016efb:	57                   	push   edi
c0016efc:	56                   	push   esi
c0016efd:	53                   	push   ebx
c0016efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f02:	83 ec 0c             	sub    esp,0xc
c0016f05:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016f08:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016f0b:	6a 20                	push   0x20
c0016f0d:	e8 00 81 ff ff       	call   c000f012 <operator new(unsigned long)>
c0016f12:	89 c3                	mov    ebx,eax
c0016f14:	58                   	pop    eax
c0016f15:	5a                   	pop    edx
c0016f16:	68 00 50 00 00       	push   0x5000
c0016f1b:	53                   	push   ebx
c0016f1c:	e8 cb 5b ff ff       	call   c000caec <Pipe::Pipe(int)>
c0016f21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f24:	e8 f3 6d ff ff       	call   c000dd1c <UnixFile::getFileDescriptor()>
c0016f29:	89 07                	mov    DWORD PTR [edi],eax
c0016f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f2e:	e8 e9 6d ff ff       	call   c000dd1c <UnixFile::getFileDescriptor()>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	89 06                	mov    DWORD PTR [esi],eax
c0016f38:	31 d2                	xor    edx,edx
c0016f3a:	5b                   	pop    ebx
c0016f3b:	31 c0                	xor    eax,eax
c0016f3d:	5e                   	pop    esi
c0016f3e:	5f                   	pop    edi
c0016f3f:	c3                   	ret    

c0016f40 <sysGetUnixTime(regs*)>:
c0016f40:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c0016f45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f4f:	e9 f2 90 ff ff       	jmp    c0010046 <Clock::timeInSecondsLocal()>

c0016f54 <string_ends_with(char const*, char const*)>:
c0016f54:	57                   	push   edi
c0016f55:	56                   	push   esi
c0016f56:	53                   	push   ebx
c0016f57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f5f:	83 ec 0c             	sub    esp,0xc
c0016f62:	53                   	push   ebx
c0016f63:	e8 6f 97 fe ff       	call   c00006d7 <strlen>
c0016f68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f6b:	89 c6                	mov    esi,eax
c0016f6d:	e8 65 97 fe ff       	call   c00006d7 <strlen>
c0016f72:	83 c4 10             	add    esp,0x10
c0016f75:	31 d2                	xor    edx,edx
c0016f77:	39 c6                	cmp    esi,eax
c0016f79:	7d 06                	jge    c0016f81 <string_ends_with(char const*, char const*)+0x2d>
c0016f7b:	5b                   	pop    ebx
c0016f7c:	89 d0                	mov    eax,edx
c0016f7e:	5e                   	pop    esi
c0016f7f:	5f                   	pop    edi
c0016f80:	c3                   	ret    
c0016f81:	52                   	push   edx
c0016f82:	29 c6                	sub    esi,eax
c0016f84:	52                   	push   edx
c0016f85:	01 f3                	add    ebx,esi
c0016f87:	57                   	push   edi
c0016f88:	53                   	push   ebx
c0016f89:	e8 1c 98 fe ff       	call   c00007aa <strcmp>
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	31 d2                	xor    edx,edx
c0016f93:	85 c0                	test   eax,eax
c0016f95:	5b                   	pop    ebx
c0016f96:	0f 94 c2             	sete   dl
c0016f99:	5e                   	pop    esi
c0016f9a:	89 d0                	mov    eax,edx
c0016f9c:	5f                   	pop    edi
c0016f9d:	c3                   	ret    

c0016f9e <sysCallOpen(regs*)>:
c0016f9e:	56                   	push   esi
c0016f9f:	53                   	push   ebx
c0016fa0:	81 ec 04 01 00 00    	sub    esp,0x104
c0016fa6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016fad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016fb0:	85 c9                	test   ecx,ecx
c0016fb2:	0f 84 bb 00 00 00    	je     c0017073 <sysCallOpen(regs*)+0xd5>
c0016fb8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fbb:	85 c0                	test   eax,eax
c0016fbd:	0f 84 b0 00 00 00    	je     c0017073 <sysCallOpen(regs*)+0xd5>
c0016fc3:	52                   	push   edx
c0016fc4:	68 1e 2a 02 c0       	push   0xc0022a1e
c0016fc9:	50                   	push   eax
c0016fca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016fce:	56                   	push   esi
c0016fcf:	e8 00 85 ff ff       	call   c000f4d4 <standardiseFiles(char*, char const*, char const*)>
c0016fd4:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fd7:	e8 fb 96 fe ff       	call   c00006d7 <strlen>
c0016fdc:	83 c4 10             	add    esp,0x10
c0016fdf:	48                   	dec    eax
c0016fe0:	74 25                	je     c0017007 <sysCallOpen(regs*)+0x69>
c0016fe2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016fe5:	80 fa 2e             	cmp    dl,0x2e
c0016fe8:	74 19                	je     c0017003 <sysCallOpen(regs*)+0x65>
c0016fea:	80 fa 3a             	cmp    dl,0x3a
c0016fed:	74 14                	je     c0017003 <sysCallOpen(regs*)+0x65>
c0016fef:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016ff3:	48                   	dec    eax
c0016ff4:	74 11                	je     c0017007 <sysCallOpen(regs*)+0x69>
c0016ff6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016ff9:	80 fa 3a             	cmp    dl,0x3a
c0016ffc:	74 05                	je     c0017003 <sysCallOpen(regs*)+0x65>
c0016ffe:	80 fa 2e             	cmp    dl,0x2e
c0017001:	75 ec                	jne    c0016fef <sysCallOpen(regs*)+0x51>
c0017003:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0017007:	51                   	push   ecx
c0017008:	51                   	push   ecx
c0017009:	68 22 2a 02 c0       	push   0xc0022a22
c001700e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017011:	50                   	push   eax
c0017012:	e8 3d ff ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	85 c0                	test   eax,eax
c001701c:	75 17                	jne    c0017035 <sysCallOpen(regs*)+0x97>
c001701e:	50                   	push   eax
c001701f:	50                   	push   eax
c0017020:	68 43 2a 02 c0       	push   0xc0022a43
c0017025:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017028:	50                   	push   eax
c0017029:	e8 26 ff ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c001702e:	83 c4 10             	add    esp,0x10
c0017031:	85 c0                	test   eax,eax
c0017033:	74 4d                	je     c0017082 <sysCallOpen(regs*)+0xe4>
c0017035:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017038:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001703e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017045:	50                   	push   eax
c0017046:	50                   	push   eax
c0017047:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001704a:	8b 10                	mov    edx,DWORD PTR [eax]
c001704c:	52                   	push   edx
c001704d:	68 27 2a 02 c0       	push   0xc0022a27
c0017052:	e8 f0 80 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0017057:	c7 04 24 36 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a36
c001705e:	e8 e4 80 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	81 c4 04 01 00 00    	add    esp,0x104
c001706c:	31 c0                	xor    eax,eax
c001706e:	31 d2                	xor    edx,edx
c0017070:	5b                   	pop    ebx
c0017071:	5e                   	pop    esi
c0017072:	c3                   	ret    
c0017073:	81 c4 04 01 00 00    	add    esp,0x104
c0017079:	83 c8 ff             	or     eax,0xffffffff
c001707c:	83 ca ff             	or     edx,0xffffffff
c001707f:	5b                   	pop    ebx
c0017080:	5e                   	pop    esi
c0017081:	c3                   	ret    
c0017082:	50                   	push   eax
c0017083:	50                   	push   eax
c0017084:	68 23 2a 02 c0       	push   0xc0022a23
c0017089:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001708c:	50                   	push   eax
c001708d:	e8 18 97 fe ff       	call   c00007aa <strcmp>
c0017092:	83 c4 10             	add    esp,0x10
c0017095:	85 c0                	test   eax,eax
c0017097:	74 9c                	je     c0017035 <sysCallOpen(regs*)+0x97>
c0017099:	50                   	push   eax
c001709a:	50                   	push   eax
c001709b:	68 22 2a 02 c0       	push   0xc0022a22
c00170a0:	56                   	push   esi
c00170a1:	e8 ae fe ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	85 c0                	test   eax,eax
c00170ab:	75 88                	jne    c0017035 <sysCallOpen(regs*)+0x97>
c00170ad:	52                   	push   edx
c00170ae:	52                   	push   edx
c00170af:	68 48 2a 02 c0       	push   0xc0022a48
c00170b4:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00170b7:	51                   	push   ecx
c00170b8:	e8 97 fe ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c00170bd:	83 c4 10             	add    esp,0x10
c00170c0:	85 c0                	test   eax,eax
c00170c2:	0f 85 d5 00 00 00    	jne    c001719d <sysCallOpen(regs*)+0x1ff>
c00170c8:	50                   	push   eax
c00170c9:	50                   	push   eax
c00170ca:	68 4d 2a 02 c0       	push   0xc0022a4d
c00170cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170d2:	50                   	push   eax
c00170d3:	e8 7c fe ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c00170d8:	83 c4 10             	add    esp,0x10
c00170db:	85 c0                	test   eax,eax
c00170dd:	0f 85 ba 00 00 00    	jne    c001719d <sysCallOpen(regs*)+0x1ff>
c00170e3:	50                   	push   eax
c00170e4:	50                   	push   eax
c00170e5:	68 49 2a 02 c0       	push   0xc0022a49
c00170ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ed:	50                   	push   eax
c00170ee:	e8 b7 96 fe ff       	call   c00007aa <strcmp>
c00170f3:	83 c4 10             	add    esp,0x10
c00170f6:	85 c0                	test   eax,eax
c00170f8:	0f 84 9f 00 00 00    	je     c001719d <sysCallOpen(regs*)+0x1ff>
c00170fe:	50                   	push   eax
c00170ff:	50                   	push   eax
c0017100:	68 48 2a 02 c0       	push   0xc0022a48
c0017105:	56                   	push   esi
c0017106:	e8 49 fe ff ff       	call   c0016f54 <string_ends_with(char const*, char const*)>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	85 c0                	test   eax,eax
c0017110:	0f 85 87 00 00 00    	jne    c001719d <sysCallOpen(regs*)+0x1ff>
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	68 14 01 00 00       	push   0x114
c001711e:	e8 ef 7e ff ff       	call   c000f012 <operator new(unsigned long)>
c0017123:	89 c6                	mov    esi,eax
c0017125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001712a:	83 c4 0c             	add    esp,0xc
c001712d:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017130:	51                   	push   ecx
c0017131:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017134:	50                   	push   eax
c0017135:	56                   	push   esi
c0017136:	e8 43 85 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c001713b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001713e:	83 c4 10             	add    esp,0x10
c0017141:	89 d0                	mov    eax,edx
c0017143:	25 ff 00 00 00       	and    eax,0xff
c0017148:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001714b:	89 d0                	mov    eax,edx
c001714d:	83 e0 01             	and    eax,0x1
c0017150:	f6 c2 02             	test   dl,0x2
c0017153:	74 03                	je     c0017158 <sysCallOpen(regs*)+0x1ba>
c0017155:	83 c8 02             	or     eax,0x2
c0017158:	f6 c2 04             	test   dl,0x4
c001715b:	74 03                	je     c0017160 <sysCallOpen(regs*)+0x1c2>
c001715d:	83 c8 04             	or     eax,0x4
c0017160:	f6 c2 08             	test   dl,0x8
c0017163:	74 03                	je     c0017168 <sysCallOpen(regs*)+0x1ca>
c0017165:	83 c8 0a             	or     eax,0xa
c0017168:	83 e2 10             	and    edx,0x10
c001716b:	74 03                	je     c0017170 <sysCallOpen(regs*)+0x1d2>
c001716d:	83 c8 12             	or     eax,0x12
c0017170:	52                   	push   edx
c0017171:	52                   	push   edx
c0017172:	50                   	push   eax
c0017173:	56                   	push   esi
c0017174:	e8 69 85 ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c0017179:	83 c4 10             	add    esp,0x10
c001717c:	85 c0                	test   eax,eax
c001717e:	0f 85 ef fe ff ff    	jne    c0017073 <sysCallOpen(regs*)+0xd5>
c0017184:	83 ec 0c             	sub    esp,0xc
c0017187:	56                   	push   esi
c0017188:	e8 8f 6b ff ff       	call   c000dd1c <UnixFile::getFileDescriptor()>
c001718d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017190:	89 02                	mov    DWORD PTR [edx],eax
c0017192:	c1 f8 1f             	sar    eax,0x1f
c0017195:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017198:	e9 c6 fe ff ff       	jmp    c0017063 <sysCallOpen(regs*)+0xc5>
c001719d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00171a0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00171a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00171ad:	e9 b4 fe ff ff       	jmp    c0017066 <sysCallOpen(regs*)+0xc8>

c00171b2 <setupSystemCalls()>:
c00171b2:	c7 05 00 50 02 c0 ad 63 01 c0 	mov    DWORD PTR ds:0xc0025000,0xc00163ad
c00171bc:	c7 05 04 50 02 c0 db 61 01 c0 	mov    DWORD PTR ds:0xc0025004,0xc00161db
c00171c6:	c7 05 08 50 02 c0 f0 62 01 c0 	mov    DWORD PTR ds:0xc0025008,0xc00162f0
c00171d0:	c7 05 0c 50 02 c0 45 63 01 c0 	mov    DWORD PTR ds:0xc002500c,0xc0016345
c00171da:	c7 05 10 50 02 c0 88 62 01 c0 	mov    DWORD PTR ds:0xc0025010,0xc0016288
c00171e4:	c7 05 14 50 02 c0 c7 63 01 c0 	mov    DWORD PTR ds:0xc0025014,0xc00163c7
c00171ee:	c7 05 18 50 02 c0 86 65 01 c0 	mov    DWORD PTR ds:0xc0025018,0xc0016586
c00171f8:	c7 05 1c 50 02 c0 ac 65 01 c0 	mov    DWORD PTR ds:0xc002501c,0xc00165ac
c0017202:	c7 05 24 50 02 c0 16 69 01 c0 	mov    DWORD PTR ds:0xc0025024,0xc0016916
c001720c:	c7 05 20 50 02 c0 9e 6f 01 c0 	mov    DWORD PTR ds:0xc0025020,0xc0016f9e
c0017216:	c7 05 28 50 02 c0 99 69 01 c0 	mov    DWORD PTR ds:0xc0025028,0xc0016999
c0017220:	c7 05 2c 50 02 c0 1b 66 01 c0 	mov    DWORD PTR ds:0xc002502c,0xc001661b
c001722a:	c7 05 30 50 02 c0 d7 63 01 c0 	mov    DWORD PTR ds:0xc0025030,0xc00163d7
c0017234:	c7 05 34 50 02 c0 dc 63 01 c0 	mov    DWORD PTR ds:0xc0025034,0xc00163dc
c001723e:	c7 05 38 50 02 c0 04 6a 01 c0 	mov    DWORD PTR ds:0xc0025038,0xc0016a04
c0017248:	c7 05 3c 50 02 c0 5f 6a 01 c0 	mov    DWORD PTR ds:0xc002503c,0xc0016a5f
c0017252:	c7 05 40 50 02 c0 06 67 01 c0 	mov    DWORD PTR ds:0xc0025040,0xc0016706
c001725c:	c7 05 44 50 02 c0 6c 67 01 c0 	mov    DWORD PTR ds:0xc0025044,0xc001676c
c0017266:	c7 05 48 50 02 c0 95 68 01 c0 	mov    DWORD PTR ds:0xc0025048,0xc0016895
c0017270:	c7 05 4c 50 02 c0 e1 63 01 c0 	mov    DWORD PTR ds:0xc002504c,0xc00163e1
c001727a:	c7 05 50 50 02 c0 c0 6a 01 c0 	mov    DWORD PTR ds:0xc0025050,0xc0016ac0
c0017284:	c7 05 54 50 02 c0 eb 63 01 c0 	mov    DWORD PTR ds:0xc0025054,0xc00163eb
c001728e:	c7 05 58 50 02 c0 f2 63 01 c0 	mov    DWORD PTR ds:0xc0025058,0xc00163f2
c0017298:	c7 05 5c 50 02 c0 e1 6a 01 c0 	mov    DWORD PTR ds:0xc002505c,0xc0016ae1
c00172a2:	c7 05 60 50 02 c0 34 6b 01 c0 	mov    DWORD PTR ds:0xc0025060,0xc0016b34
c00172ac:	c7 05 64 50 02 c0 f9 63 01 c0 	mov    DWORD PTR ds:0xc0025064,0xc00163f9
c00172b6:	c7 05 68 50 02 c0 87 6b 01 c0 	mov    DWORD PTR ds:0xc0025068,0xc0016b87
c00172c0:	c7 05 6c 50 02 c0 ce 65 01 c0 	mov    DWORD PTR ds:0xc002506c,0xc00165ce
c00172ca:	c7 05 70 50 02 c0 d3 6b 01 c0 	mov    DWORD PTR ds:0xc0025070,0xc0016bd3
c00172d4:	c7 05 74 50 02 c0 ae 66 01 c0 	mov    DWORD PTR ds:0xc0025074,0xc00166ae
c00172de:	c7 05 78 50 02 c0 ab 6c 01 c0 	mov    DWORD PTR ds:0xc0025078,0xc0016cab
c00172e8:	c7 05 7c 50 02 c0 e7 67 01 c0 	mov    DWORD PTR ds:0xc002507c,0xc00167e7
c00172f2:	c7 05 80 50 02 c0 ed 6c 01 c0 	mov    DWORD PTR ds:0xc0025080,0xc0016ced
c00172fc:	c7 05 84 50 02 c0 54 6c 01 c0 	mov    DWORD PTR ds:0xc0025084,0xc0016c54
c0017306:	c7 05 88 50 02 c0 4c 6d 01 c0 	mov    DWORD PTR ds:0xc0025088,0xc0016d4c
c0017310:	c7 05 8c 50 02 c0 0d 64 01 c0 	mov    DWORD PTR ds:0xc002508c,0xc001640d
c001731a:	c7 05 90 50 02 c0 70 64 01 c0 	mov    DWORD PTR ds:0xc0025090,0xc0016470
c0017324:	c7 05 94 50 02 c0 b8 64 01 c0 	mov    DWORD PTR ds:0xc0025094,0xc00164b8
c001732e:	c7 05 98 50 02 c0 71 6e 01 c0 	mov    DWORD PTR ds:0xc0025098,0xc0016e71
c0017338:	c7 05 9c 50 02 c0 d4 6e 01 c0 	mov    DWORD PTR ds:0xc002509c,0xc0016ed4
c0017342:	c7 05 a0 50 02 c0 0b 65 01 c0 	mov    DWORD PTR ds:0xc00250a0,0xc001650b
c001734c:	c7 05 a4 50 02 c0 fb 6e 01 c0 	mov    DWORD PTR ds:0xc00250a4,0xc0016efb
c0017356:	c7 05 a8 50 02 c0 40 6f 01 c0 	mov    DWORD PTR ds:0xc00250a8,0xc0016f40
c0017360:	c7 05 ac 50 02 c0 f3 61 01 c0 	mov    DWORD PTR ds:0xc00250ac,0xc00161f3
c001736a:	c3                   	ret    

c001736b <systemCall(regs*, void*)>:
c001736b:	53                   	push   ebx
c001736c:	83 ec 08             	sub    esp,0x8
c001736f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017373:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017376:	83 f8 7f             	cmp    eax,0x7f
c0017379:	77 16                	ja     c0017391 <systemCall(regs*, void*)+0x26>
c001737b:	8b 14 85 00 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb000]
c0017382:	85 d2                	test   edx,edx
c0017384:	74 0b                	je     c0017391 <systemCall(regs*, void*)+0x26>
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	53                   	push   ebx
c001738a:	ff d2                	call   edx
c001738c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001738f:	eb 0d                	jmp    c001739e <systemCall(regs*, void*)+0x33>
c0017391:	52                   	push   edx
c0017392:	52                   	push   edx
c0017393:	50                   	push   eax
c0017394:	68 52 2a 02 c0       	push   0xc0022a52
c0017399:	e8 a9 7d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173a6:	83 c4 08             	add    esp,0x8
c00173a9:	31 d2                	xor    edx,edx
c00173ab:	5b                   	pop    ebx
c00173ac:	c3                   	ret    

c00173ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00173ad:	55                   	push   ebp
c00173ae:	89 e5                	mov    ebp,esp
c00173b0:	57                   	push   edi
c00173b1:	56                   	push   esi
c00173b2:	53                   	push   ebx
c00173b3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00173b9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00173bc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00173bf:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00173c6:	74 27                	je     c00173ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173c8:	85 c0                	test   eax,eax
c00173ca:	74 23                	je     c00173ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173cc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00173d0:	75 1d                	jne    c00173ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00173d5:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00173db:	89 d1                	mov    ecx,edx
c00173dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173e3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00173e9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00173ec:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00173ef:	83 ec 0c             	sub    esp,0xc
c00173f2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00173f5:	05 ff 0f 00 00       	add    eax,0xfff
c00173fa:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0017400:	6a 01                	push   0x1
c0017402:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0017408:	e8 1f 6d ff ff       	call   c000e12c <Virt::allocateKernelVirtualPages(int)>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	89 c6                	mov    esi,eax
c0017412:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0017418:	0f 86 21 01 00 00    	jbe    c001753f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c001741e:	c1 eb 0c             	shr    ebx,0xc
c0017421:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001742b:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017431:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017434:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017437:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001743d:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017440:	29 d8                	sub    eax,ebx
c0017442:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017448:	0f 83 f4 00 00 00    	jae    c0017542 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c001744e:	83 ec 0c             	sub    esp,0xc
c0017451:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017454:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001745a:	3d 00 10 00 00       	cmp    eax,0x1000
c001745f:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017461:	52                   	push   edx
c0017462:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017468:	52                   	push   edx
c0017469:	76 05                	jbe    c0017470 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001746b:	b8 00 10 00 00       	mov    eax,0x1000
c0017470:	31 d2                	xor    edx,edx
c0017472:	52                   	push   edx
c0017473:	50                   	push   eax
c0017474:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017477:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001747a:	83 c4 20             	add    esp,0x20
c001747d:	85 c0                	test   eax,eax
c001747f:	74 1f                	je     c00174a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017481:	51                   	push   ecx
c0017482:	51                   	push   ecx
c0017483:	50                   	push   eax
c0017484:	68 66 2a 02 c0       	push   0xc0022a66
c0017489:	e8 b9 7c ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001748e:	89 34 24             	mov    DWORD PTR [esp],esi
c0017491:	e8 e3 6f ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	31 c0                	xor    eax,eax
c001749b:	e9 7c 01 00 00       	jmp    c001761c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c00174a0:	e8 be 14 00 00       	call   c0018963 <lockScheduler()>
c00174a5:	e8 05 51 ff ff       	call   c000c5af <Phys::allocatePage()>
c00174aa:	6a 07                	push   0x7
c00174ac:	56                   	push   esi
c00174ad:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00174b3:	50                   	push   eax
c00174b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174ba:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174bd:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174c3:	e8 30 73 ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174c8:	83 c4 0c             	add    esp,0xc
c00174cb:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174d1:	6a 00                	push   0x0
c00174d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174d9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174dc:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174e2:	e8 6f 71 ff ff       	call   c000e656 <VAS::mapOtherVASIn(bool, VAS*)>
c00174e7:	58                   	pop    eax
c00174e8:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00174ee:	5a                   	pop    edx
c00174ef:	68 07 04 00 00       	push   0x407
c00174f4:	53                   	push   ebx
c00174f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174fb:	50                   	push   eax
c00174fc:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017502:	6a 00                	push   0x0
c0017504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017509:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001750c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017512:	e8 9d 76 ff ff       	call   c000ebb4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017517:	83 c4 1c             	add    esp,0x1c
c001751a:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017520:	68 00 10 00 00       	push   0x1000
c0017525:	50                   	push   eax
c0017526:	56                   	push   esi
c0017527:	e8 58 91 fe ff       	call   c0000684 <memcpy>
c001752c:	e8 34 14 00 00       	call   c0018965 <unlockScheduler()>
c0017531:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017537:	83 c4 10             	add    esp,0x10
c001753a:	e9 f5 fe ff ff       	jmp    c0017434 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c001753f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017542:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001754c:	0f 86 bc 00 00 00    	jbe    c001760e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017552:	e8 0c 14 00 00       	call   c0018963 <lockScheduler()>
c0017557:	51                   	push   ecx
c0017558:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001755e:	6a 00                	push   0x0
c0017560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017565:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017568:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001756e:	e8 e3 70 ff ff       	call   c000e656 <VAS::mapOtherVASIn(bool, VAS*)>
c0017573:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017579:	c1 e8 0c             	shr    eax,0xc
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017585:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001758f:	e8 1b 50 ff ff       	call   c000c5af <Phys::allocatePage()>
c0017594:	6a 07                	push   0x7
c0017596:	56                   	push   esi
c0017597:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001759d:	50                   	push   eax
c001759e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00175a4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00175a7:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00175ad:	e8 46 72 ff ff       	call   c000e7f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175b2:	58                   	pop    eax
c00175b3:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00175b9:	5a                   	pop    edx
c00175ba:	68 07 04 00 00       	push   0x407
c00175bf:	53                   	push   ebx
c00175c0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175c6:	50                   	push   eax
c00175c7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175cd:	6a 00                	push   0x0
c00175cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175d7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175dd:	e8 d2 75 ff ff       	call   c000ebb4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175e2:	83 c4 1c             	add    esp,0x1c
c00175e5:	68 00 10 00 00       	push   0x1000
c00175ea:	6a 00                	push   0x0
c00175ec:	56                   	push   esi
c00175ed:	e8 c8 90 fe ff       	call   c00006ba <memset>
c00175f2:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00175f8:	83 c4 10             	add    esp,0x10
c00175fb:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017601:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0017607:	77 86                	ja     c001758f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c0017609:	e8 57 13 00 00       	call   c0018965 <unlockScheduler()>
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	56                   	push   esi
c0017612:	e8 62 6e ff ff       	call   c000e479 <Virt::freeKernelVirtualPages(unsigned long)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	b0 01                	mov    al,0x1
c001761c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001761f:	5b                   	pop    ebx
c0017620:	5e                   	pop    esi
c0017621:	5f                   	pop    edi
c0017622:	5d                   	pop    ebp
c0017623:	c3                   	ret    

c0017624 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017624:	55                   	push   ebp
c0017625:	57                   	push   edi
c0017626:	56                   	push   esi
c0017627:	53                   	push   ebx
c0017628:	83 ec 48             	sub    esp,0x48
c001762b:	68 14 01 00 00       	push   0x114
c0017630:	e8 dd 79 ff ff       	call   c000f012 <operator new(unsigned long)>
c0017635:	83 c4 0c             	add    esp,0xc
c0017638:	89 c6                	mov    esi,eax
c001763a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001763e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017642:	50                   	push   eax
c0017643:	e8 36 80 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0017648:	58                   	pop    eax
c0017649:	5a                   	pop    edx
c001764a:	6a 01                	push   0x1
c001764c:	56                   	push   esi
c001764d:	e8 90 80 ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	85 c0                	test   eax,eax
c0017657:	0f 85 47 01 00 00    	jne    c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001765d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017665:	83 ec 0c             	sub    esp,0xc
c0017668:	6a 34                	push   0x34
c001766a:	e8 6a 49 ff ff       	call   c000bfd9 <malloc>
c001766f:	89 c3                	mov    ebx,eax
c0017671:	58                   	pop    eax
c0017672:	8b 06                	mov    eax,DWORD PTR [esi]
c0017674:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017678:	57                   	push   edi
c0017679:	53                   	push   ebx
c001767a:	6a 00                	push   0x0
c001767c:	6a 34                	push   0x34
c001767e:	56                   	push   esi
c001767f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017682:	83 c4 20             	add    esp,0x20
c0017685:	85 c0                	test   eax,eax
c0017687:	0f 85 17 01 00 00    	jne    c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001768d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017693:	0f 85 0b 01 00 00    	jne    c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017699:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001769c:	85 c0                	test   eax,eax
c001769e:	0f 84 00 01 00 00    	je     c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176a4:	31 d2                	xor    edx,edx
c00176a6:	55                   	push   ebp
c00176a7:	52                   	push   edx
c00176a8:	50                   	push   eax
c00176a9:	56                   	push   esi
c00176aa:	e8 f1 80 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c00176af:	83 c4 10             	add    esp,0x10
c00176b2:	85 c0                	test   eax,eax
c00176b4:	0f 85 ea 00 00 00    	jne    c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ba:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00176bd:	83 ec 0c             	sub    esp,0xc
c00176c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176c4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176c8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176cc:	0f af c2             	imul   eax,edx
c00176cf:	50                   	push   eax
c00176d0:	e8 04 49 ff ff       	call   c000bfd9 <malloc>
c00176d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176e0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176e4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176e8:	0f af c2             	imul   eax,edx
c00176eb:	99                   	cdq    
c00176ec:	52                   	push   edx
c00176ed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00176ef:	50                   	push   eax
c00176f0:	56                   	push   esi
c00176f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176f4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00176f7:	83 c4 20             	add    esp,0x20
c00176fa:	85 c0                	test   eax,eax
c00176fc:	0f 84 a2 00 00 00    	je     c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017702:	31 d2                	xor    edx,edx
c0017704:	51                   	push   ecx
c0017705:	52                   	push   edx
c0017706:	50                   	push   eax
c0017707:	56                   	push   esi
c0017708:	e8 93 80 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c001770d:	83 c4 10             	add    esp,0x10
c0017710:	85 c0                	test   eax,eax
c0017712:	0f 85 8c 00 00 00    	jne    c00177a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017718:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001771c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017720:	0f af c2             	imul   eax,edx
c0017723:	83 ec 0c             	sub    esp,0xc
c0017726:	31 ed                	xor    ebp,ebp
c0017728:	50                   	push   eax
c0017729:	e8 ab 48 ff ff       	call   c000bfd9 <malloc>
c001772e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017732:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017735:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017739:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001773d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017741:	0f af c2             	imul   eax,edx
c0017744:	99                   	cdq    
c0017745:	52                   	push   edx
c0017746:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017748:	50                   	push   eax
c0017749:	56                   	push   esi
c001774a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001774d:	83 c4 20             	add    esp,0x20
c0017750:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017758:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001775c:	0f 86 80 00 00 00    	jbe    c00177e2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017762:	0f b7 fd             	movzx  edi,bp
c0017765:	c1 e7 05             	shl    edi,0x5
c0017768:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001776c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001776f:	75 6b                	jne    c00177dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017771:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017778:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001777b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001777f:	52                   	push   edx
c0017780:	31 d2                	xor    edx,edx
c0017782:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017785:	52                   	push   edx
c0017786:	50                   	push   eax
c0017787:	56                   	push   esi
c0017788:	e8 13 80 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c001778d:	83 c4 10             	add    esp,0x10
c0017790:	85 c0                	test   eax,eax
c0017792:	74 17                	je     c00177ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017794:	83 ec 0c             	sub    esp,0xc
c0017797:	68 91 2a 02 c0       	push   0xc0022a91
c001779c:	e8 a6 79 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00177a1:	83 c4 10             	add    esp,0x10
c00177a4:	31 c0                	xor    eax,eax
c00177a6:	e9 87 00 00 00       	jmp    c0017832 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00177ab:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00177b4:	50                   	push   eax
c00177b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177bd:	56                   	push   esi
c00177be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00177c2:	e8 e6 fb ff ff       	call   c00173ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00177c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177cb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00177cf:	83 c4 20             	add    esp,0x20
c00177d2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00177d6:	73 04                	jae    c00177dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177dc:	45                   	inc    ebp
c00177dd:	e9 76 ff ff ff       	jmp    c0017758 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00177e2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00177e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177ee:	83 ec 0c             	sub    esp,0xc
c00177f1:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00177f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177fc:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017802:	05 00 10 00 00       	add    eax,0x1000
c0017807:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001780a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001780e:	e8 d6 47 ff ff       	call   c000bfe9 <free>
c0017813:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017816:	e8 ce 47 ff ff       	call   c000bfe9 <free>
c001781b:	58                   	pop    eax
c001781c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017820:	e8 c4 47 ff ff       	call   c000bfe9 <free>
c0017825:	89 34 24             	mov    DWORD PTR [esp],esi
c0017828:	e8 13 7f ff ff       	call   c000f740 <File::close()>
c001782d:	83 c4 10             	add    esp,0x10
c0017830:	b0 01                	mov    al,0x1
c0017832:	83 c4 3c             	add    esp,0x3c
c0017835:	5b                   	pop    ebx
c0017836:	5e                   	pop    esi
c0017837:	5f                   	pop    edi
c0017838:	5d                   	pop    ebp
c0017839:	c3                   	ret    

c001783a <Thr::runtimeReferenceHelper()>:
c001783a:	83 ec 18             	sub    esp,0x18
c001783d:	68 99 2a 02 c0       	push   0xc0022a99
c0017842:	e8 00 79 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0017847:	fa                   	cli    
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	eb fe                	jmp    c001784b <Thr::runtimeReferenceHelper()+0x11>

c001784d <Thr::getAddressOfKernelSymbol(char const*)>:
c001784d:	57                   	push   edi
c001784e:	56                   	push   esi
c001784f:	53                   	push   ebx
c0017850:	31 db                	xor    ebx,ebx
c0017852:	39 1d a0 59 02 c0    	cmp    DWORD PTR ds:0xc00259a0,ebx
c0017858:	7e 3c                	jle    c0017896 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001785a:	8b 34 9d 20 59 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda6e0]
c0017861:	31 ff                	xor    edi,edi
c0017863:	39 3c 9d 20 58 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda7e0],edi
c001786a:	7e 27                	jle    c0017893 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001786c:	50                   	push   eax
c001786d:	50                   	push   eax
c001786e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017872:	8b 06                	mov    eax,DWORD PTR [esi]
c0017874:	03 04 9d a0 58 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda760]
c001787b:	50                   	push   eax
c001787c:	e8 29 8f fe ff       	call   c00007aa <strcmp>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	85 c0                	test   eax,eax
c0017886:	75 05                	jne    c001788d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017888:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001788b:	eb 0b                	jmp    c0017898 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001788d:	83 c6 10             	add    esi,0x10
c0017890:	47                   	inc    edi
c0017891:	eb d0                	jmp    c0017863 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017893:	43                   	inc    ebx
c0017894:	eb bc                	jmp    c0017852 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017896:	31 c0                	xor    eax,eax
c0017898:	5b                   	pop    ebx
c0017899:	5e                   	pop    esi
c001789a:	5f                   	pop    edi
c001789b:	c3                   	ret    

c001789c <Thr::loadKernelSymbolTable(char const*)>:
c001789c:	55                   	push   ebp
c001789d:	57                   	push   edi
c001789e:	56                   	push   esi
c001789f:	53                   	push   ebx
c00178a0:	83 ec 68             	sub    esp,0x68
c00178a3:	8b 35 f4 59 02 c0    	mov    esi,DWORD PTR ds:0xc00259f4
c00178a9:	68 14 01 00 00       	push   0x114
c00178ae:	e8 5f 77 ff ff       	call   c000f012 <operator new(unsigned long)>
c00178b3:	83 c4 0c             	add    esp,0xc
c00178b6:	89 c3                	mov    ebx,eax
c00178b8:	56                   	push   esi
c00178b9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00178bd:	50                   	push   eax
c00178be:	e8 bb 7d ff ff       	call   c000f67e <File::File(char const*, Process*)>
c00178c3:	5e                   	pop    esi
c00178c4:	5f                   	pop    edi
c00178c5:	6a 01                	push   0x1
c00178c7:	53                   	push   ebx
c00178c8:	e8 15 7e ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	31 d2                	xor    edx,edx
c00178d2:	85 c0                	test   eax,eax
c00178d4:	0f 85 79 02 00 00    	jne    c0017b53 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178da:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	6a 34                	push   0x34
c00178e7:	e8 ed 46 ff ff       	call   c000bfd9 <malloc>
c00178ec:	59                   	pop    ecx
c00178ed:	89 c7                	mov    edi,eax
c00178ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178f1:	8d 74 24 34          	lea    esi,[esp+0x34]
c00178f5:	56                   	push   esi
c00178f6:	57                   	push   edi
c00178f7:	6a 00                	push   0x0
c00178f9:	6a 34                	push   0x34
c00178fb:	53                   	push   ebx
c00178fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178ff:	83 c4 20             	add    esp,0x20
c0017902:	85 c0                	test   eax,eax
c0017904:	74 17                	je     c001791d <Thr::loadKernelSymbolTable(char const*)+0x81>
c0017906:	83 ec 0c             	sub    esp,0xc
c0017909:	68 bb 2a 02 c0       	push   0xc0022abb
c001790e:	e8 63 e0 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	31 d2                	xor    edx,edx
c0017918:	e9 36 02 00 00       	jmp    c0017b53 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001791d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017923:	75 e1                	jne    c0017906 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017925:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017928:	85 c0                	test   eax,eax
c001792a:	74 da                	je     c0017906 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001792c:	52                   	push   edx
c001792d:	31 d2                	xor    edx,edx
c001792f:	52                   	push   edx
c0017930:	50                   	push   eax
c0017931:	53                   	push   ebx
c0017932:	e8 69 7e ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	85 c0                	test   eax,eax
c001793c:	75 c8                	jne    c0017906 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001793e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017942:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017946:	0f af c2             	imul   eax,edx
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	31 ed                	xor    ebp,ebp
c001794e:	50                   	push   eax
c001794f:	e8 85 46 ff ff       	call   c000bfd9 <malloc>
c0017954:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017958:	89 34 24             	mov    DWORD PTR [esp],esi
c001795b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001795f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017963:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017967:	0f af c2             	imul   eax,edx
c001796a:	99                   	cdq    
c001796b:	52                   	push   edx
c001796c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001796e:	50                   	push   eax
c001796f:	53                   	push   ebx
c0017970:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017973:	83 c4 20             	add    esp,0x20
c0017976:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001797e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017986:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001798e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017996:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001799a:	0f 86 aa 00 00 00    	jbe    c0017a4a <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00179a0:	0f b7 f5             	movzx  esi,bp
c00179a3:	6b f6 28             	imul   esi,esi,0x28
c00179a6:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00179aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00179ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b1:	50                   	push   eax
c00179b2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00179b6:	6b c0 28             	imul   eax,eax,0x28
c00179b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00179bd:	8b 16                	mov    edx,DWORD PTR [esi]
c00179bf:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00179c3:	89 d0                	mov    eax,edx
c00179c5:	31 d2                	xor    edx,edx
c00179c7:	52                   	push   edx
c00179c8:	50                   	push   eax
c00179c9:	53                   	push   ebx
c00179ca:	e8 d1 7d ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c00179cf:	83 c4 0c             	add    esp,0xc
c00179d2:	6a 20                	push   0x20
c00179d4:	6a 00                	push   0x0
c00179d6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179da:	52                   	push   edx
c00179db:	e8 da 8c fe ff       	call   c00006ba <memset>
c00179e0:	58                   	pop    eax
c00179e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179e3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00179e7:	51                   	push   ecx
c00179e8:	8d 54 24 40          	lea    edx,[esp+0x40]
c00179ec:	52                   	push   edx
c00179ed:	6a 00                	push   0x0
c00179ef:	6a 1f                	push   0x1f
c00179f1:	53                   	push   ebx
c00179f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179f5:	83 c4 18             	add    esp,0x18
c00179f8:	68 d2 2a 02 c0       	push   0xc0022ad2
c00179fd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017a01:	52                   	push   edx
c0017a02:	e8 a3 8d fe ff       	call   c00007aa <strcmp>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	85 c0                	test   eax,eax
c0017a0c:	75 0f                	jne    c0017a1d <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017a0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a1d:	50                   	push   eax
c0017a1e:	50                   	push   eax
c0017a1f:	68 da 2a 02 c0       	push   0xc0022ada
c0017a24:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017a28:	50                   	push   eax
c0017a29:	e8 7c 8d fe ff       	call   c00007aa <strcmp>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	85 c0                	test   eax,eax
c0017a33:	75 0f                	jne    c0017a44 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017a35:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a44:	45                   	inc    ebp
c0017a45:	e9 4c ff ff ff       	jmp    c0017996 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017a4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017a4f:	75 10                	jne    c0017a61 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017a51:	83 ec 0c             	sub    esp,0xc
c0017a54:	68 e2 2a 02 c0       	push   0xc0022ae2
c0017a59:	e8 18 df ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0017a5e:	83 c4 10             	add    esp,0x10
c0017a61:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a66:	75 10                	jne    c0017a78 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	68 e2 2a 02 c0       	push   0xc0022ae2
c0017a70:	e8 01 df ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	31 d2                	xor    edx,edx
c0017a7a:	50                   	push   eax
c0017a7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a7f:	52                   	push   edx
c0017a80:	50                   	push   eax
c0017a81:	53                   	push   ebx
c0017a82:	e8 19 7d ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017a87:	5a                   	pop    edx
c0017a88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a8c:	e8 48 45 ff ff       	call   c000bfd9 <malloc>
c0017a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a99:	89 c1                	mov    ecx,eax
c0017a9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017aa3:	5e                   	pop    esi
c0017aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aa6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017aaa:	55                   	push   ebp
c0017aab:	51                   	push   ecx
c0017aac:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017ab0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ab4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ab8:	53                   	push   ebx
c0017ab9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017abc:	83 c4 14             	add    esp,0x14
c0017abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ac3:	e8 11 45 ff ff       	call   c000bfd9 <malloc>
c0017ac8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017acb:	89 c6                	mov    esi,eax
c0017acd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017acf:	56                   	push   esi
c0017ad0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ad4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ad8:	53                   	push   ebx
c0017ad9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017adc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ae0:	8b 15 a0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a0
c0017ae6:	c1 e8 04             	shr    eax,0x4
c0017ae9:	83 c4 1c             	add    esp,0x1c
c0017aec:	89 04 95 20 58 02 c0 	mov    DWORD PTR [edx*4-0x3ffda7e0],eax
c0017af3:	31 d2                	xor    edx,edx
c0017af5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af9:	52                   	push   edx
c0017afa:	50                   	push   eax
c0017afb:	53                   	push   ebx
c0017afc:	e8 9f 7c ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017b01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b04:	31 d2                	xor    edx,edx
c0017b06:	56                   	push   esi
c0017b07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0b:	52                   	push   edx
c0017b0c:	50                   	push   eax
c0017b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b0f:	53                   	push   ebx
c0017b10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b13:	83 c4 14             	add    esp,0x14
c0017b16:	53                   	push   ebx
c0017b17:	e8 24 7c ff ff       	call   c000f740 <File::close()>
c0017b1c:	5d                   	pop    ebp
c0017b1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b21:	e8 c3 44 ff ff       	call   c000bfe9 <free>
c0017b26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b29:	e8 bb 44 ff ff       	call   c000bfe9 <free>
c0017b2e:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0017b33:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b37:	8d 50 01             	lea    edx,[eax+0x1]
c0017b3a:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0017b40:	89 0c 85 20 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda6e0],ecx
c0017b47:	89 34 85 a0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda760],esi
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	b2 01                	mov    dl,0x1
c0017b53:	83 c4 5c             	add    esp,0x5c
c0017b56:	88 d0                	mov    al,dl
c0017b58:	5b                   	pop    ebx
c0017b59:	5e                   	pop    esi
c0017b5a:	5f                   	pop    edi
c0017b5b:	5d                   	pop    ebp
c0017b5c:	c3                   	ret    

c0017b5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b5d:	55                   	push   ebp
c0017b5e:	57                   	push   edi
c0017b5f:	56                   	push   esi
c0017b60:	53                   	push   ebx
c0017b61:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b67:	8b 1d f4 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259f4
c0017b6d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b74:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b78:	68 14 01 00 00       	push   0x114
c0017b7d:	e8 90 74 ff ff       	call   c000f012 <operator new(unsigned long)>
c0017b82:	83 c4 0c             	add    esp,0xc
c0017b85:	53                   	push   ebx
c0017b86:	89 c7                	mov    edi,eax
c0017b88:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017b8f:	50                   	push   eax
c0017b90:	e8 e9 7a ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0017b95:	5e                   	pop    esi
c0017b96:	5d                   	pop    ebp
c0017b97:	6a 01                	push   0x1
c0017b99:	57                   	push   edi
c0017b9a:	e8 43 7b ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	85 c0                	test   eax,eax
c0017ba4:	0f 85 10 07 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017baa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017bb2:	83 ec 0c             	sub    esp,0xc
c0017bb5:	6a 34                	push   0x34
c0017bb7:	e8 1d 44 ff ff       	call   c000bfd9 <malloc>
c0017bbc:	5b                   	pop    ebx
c0017bbd:	89 c5                	mov    ebp,eax
c0017bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0017bc1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017bc5:	53                   	push   ebx
c0017bc6:	55                   	push   ebp
c0017bc7:	6a 00                	push   0x0
c0017bc9:	6a 34                	push   0x34
c0017bcb:	57                   	push   edi
c0017bcc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bcf:	83 c4 20             	add    esp,0x20
c0017bd2:	85 c0                	test   eax,eax
c0017bd4:	0f 85 e0 06 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bda:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017be1:	0f 85 d3 06 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017be7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017bea:	85 c0                	test   eax,eax
c0017bec:	0f 84 c8 06 00 00    	je     c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bf2:	31 d2                	xor    edx,edx
c0017bf4:	51                   	push   ecx
c0017bf5:	52                   	push   edx
c0017bf6:	50                   	push   eax
c0017bf7:	57                   	push   edi
c0017bf8:	e8 a3 7b ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017bfd:	83 c4 10             	add    esp,0x10
c0017c00:	85 c0                	test   eax,eax
c0017c02:	0f 85 b2 06 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c08:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017c0b:	83 ec 0c             	sub    esp,0xc
c0017c0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c12:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017c16:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c1a:	0f af c2             	imul   eax,edx
c0017c1d:	50                   	push   eax
c0017c1e:	e8 b6 43 ff ff       	call   c000bfd9 <malloc>
c0017c23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c2e:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017c32:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c36:	0f af c2             	imul   eax,edx
c0017c39:	99                   	cdq    
c0017c3a:	52                   	push   edx
c0017c3b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c3d:	50                   	push   eax
c0017c3e:	57                   	push   edi
c0017c3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c42:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017c45:	83 c4 20             	add    esp,0x20
c0017c48:	85 c0                	test   eax,eax
c0017c4a:	0f 84 6a 06 00 00    	je     c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c50:	52                   	push   edx
c0017c51:	31 d2                	xor    edx,edx
c0017c53:	52                   	push   edx
c0017c54:	50                   	push   eax
c0017c55:	57                   	push   edi
c0017c56:	e8 45 7b ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017c5b:	83 c4 10             	add    esp,0x10
c0017c5e:	85 c0                	test   eax,eax
c0017c60:	0f 85 54 06 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c66:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c6a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c6e:	0f af c2             	imul   eax,edx
c0017c71:	83 ec 0c             	sub    esp,0xc
c0017c74:	31 f6                	xor    esi,esi
c0017c76:	50                   	push   eax
c0017c77:	e8 5d 43 ff ff       	call   c000bfd9 <malloc>
c0017c7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c87:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c8b:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c8f:	0f af c2             	imul   eax,edx
c0017c92:	99                   	cdq    
c0017c93:	52                   	push   edx
c0017c94:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c96:	50                   	push   eax
c0017c97:	57                   	push   edi
c0017c98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c9b:	83 c4 20             	add    esp,0x20
c0017c9e:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017ca2:	0f 86 af 00 00 00    	jbe    c0017d57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017ca8:	0f b7 de             	movzx  ebx,si
c0017cab:	c1 e3 05             	shl    ebx,0x5
c0017cae:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017cb2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017cb5:	0f 85 96 00 00 00    	jne    c0017d51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017cbb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017cbe:	31 d2                	xor    edx,edx
c0017cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cc4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017cc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ccb:	50                   	push   eax
c0017ccc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ccf:	52                   	push   edx
c0017cd0:	50                   	push   eax
c0017cd1:	57                   	push   edi
c0017cd2:	e8 c9 7a ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	85 c0                	test   eax,eax
c0017cdc:	0f 85 d8 05 00 00    	jne    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce2:	52                   	push   edx
c0017ce3:	52                   	push   edx
c0017ce4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ce8:	68 fc 2a 02 c0       	push   0xc0022afc
c0017ced:	e8 55 74 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0017cf2:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017cf9:	31 d2                	xor    edx,edx
c0017cfb:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017cff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017d03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d07:	59                   	pop    ecx
c0017d08:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d0a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d11:	50                   	push   eax
c0017d12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d1a:	52                   	push   edx
c0017d1b:	50                   	push   eax
c0017d1c:	57                   	push   edi
c0017d1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d23:	83 c4 18             	add    esp,0x18
c0017d26:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d29:	50                   	push   eax
c0017d2a:	68 20 2b 02 c0       	push   0xc0022b20
c0017d2f:	e8 13 74 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0017d34:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d37:	83 c4 0c             	add    esp,0xc
c0017d3a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d3d:	50                   	push   eax
c0017d3e:	6a 00                	push   0x0
c0017d40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d44:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017d48:	50                   	push   eax
c0017d49:	e8 6c 89 fe ff       	call   c00006ba <memset>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	46                   	inc    esi
c0017d52:	e9 47 ff ff ff       	jmp    c0017c9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017d57:	50                   	push   eax
c0017d58:	31 db                	xor    ebx,ebx
c0017d5a:	68 00 01 00 00       	push   0x100
c0017d5f:	6a 00                	push   0x0
c0017d61:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d65:	50                   	push   eax
c0017d66:	e8 4f 89 fe ff       	call   c00006ba <memset>
c0017d6b:	83 c4 0c             	add    esp,0xc
c0017d6e:	68 00 01 00 00       	push   0x100
c0017d73:	6a 00                	push   0x0
c0017d75:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d7c:	50                   	push   eax
c0017d7d:	e8 38 89 fe ff       	call   c00006ba <memset>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d8d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017d95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017d9d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017da5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dad:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017db1:	0f 86 2f 01 00 00    	jbe    c0017ee6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017db7:	0f b7 f3             	movzx  esi,bx
c0017dba:	6b f6 28             	imul   esi,esi,0x28
c0017dbd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017dc1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017dc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dc8:	50                   	push   eax
c0017dc9:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017dcd:	6b d2 28             	imul   edx,edx,0x28
c0017dd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017dd4:	8b 06                	mov    eax,DWORD PTR [esi]
c0017dd6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017dda:	31 d2                	xor    edx,edx
c0017ddc:	52                   	push   edx
c0017ddd:	50                   	push   eax
c0017dde:	57                   	push   edi
c0017ddf:	e8 bc 79 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017de4:	83 c4 0c             	add    esp,0xc
c0017de7:	6a 20                	push   0x20
c0017de9:	6a 00                	push   0x0
c0017deb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017df2:	51                   	push   ecx
c0017df3:	e8 c2 88 fe ff       	call   c00006ba <memset>
c0017df8:	58                   	pop    eax
c0017df9:	8b 07                	mov    eax,DWORD PTR [edi]
c0017dfb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017dff:	52                   	push   edx
c0017e00:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017e07:	51                   	push   ecx
c0017e08:	6a 00                	push   0x0
c0017e0a:	6a 1f                	push   0x1f
c0017e0c:	57                   	push   edi
c0017e0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e10:	83 c4 1c             	add    esp,0x1c
c0017e13:	6a 09                	push   0x9
c0017e15:	68 3d 2b 02 c0       	push   0xc0022b3d
c0017e1a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017e21:	51                   	push   ecx
c0017e22:	e8 fa 87 fe ff       	call   c0000621 <memcmp>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	75 21                	jne    c0017e4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e3a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e3e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e41:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e48:	89 c8                	mov    eax,ecx
c0017e4a:	40                   	inc    eax
c0017e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e4f:	50                   	push   eax
c0017e50:	6a 09                	push   0x9
c0017e52:	68 47 2b 02 c0       	push   0xc0022b47
c0017e57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e5e:	50                   	push   eax
c0017e5f:	e8 bd 87 fe ff       	call   c0000621 <memcmp>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	85 c0                	test   eax,eax
c0017e69:	75 21                	jne    c0017e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017e6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e77:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e7b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e7e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e85:	89 c8                	mov    eax,ecx
c0017e87:	40                   	inc    eax
c0017e88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e8c:	50                   	push   eax
c0017e8d:	50                   	push   eax
c0017e8e:	68 d2 2a 02 c0       	push   0xc0022ad2
c0017e93:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e9a:	50                   	push   eax
c0017e9b:	e8 0a 89 fe ff       	call   c00007aa <strcmp>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	85 c0                	test   eax,eax
c0017ea5:	75 0f                	jne    c0017eb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017ea7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eb6:	50                   	push   eax
c0017eb7:	50                   	push   eax
c0017eb8:	68 da 2a 02 c0       	push   0xc0022ada
c0017ebd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ec4:	50                   	push   eax
c0017ec5:	e8 e0 88 fe ff       	call   c00007aa <strcmp>
c0017eca:	83 c4 10             	add    esp,0x10
c0017ecd:	85 c0                	test   eax,eax
c0017ecf:	75 0f                	jne    c0017ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017ed1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ed4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017edc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ee0:	43                   	inc    ebx
c0017ee1:	e9 c7 fe ff ff       	jmp    c0017dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017ee6:	31 d2                	xor    edx,edx
c0017ee8:	50                   	push   eax
c0017ee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eed:	52                   	push   edx
c0017eee:	50                   	push   eax
c0017eef:	57                   	push   edi
c0017ef0:	e8 ab 78 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017ef5:	5a                   	pop    edx
c0017ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017efa:	e8 da 40 ff ff       	call   c000bfd9 <malloc>
c0017eff:	31 d2                	xor    edx,edx
c0017f01:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017f05:	59                   	pop    ecx
c0017f06:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f08:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017f0c:	53                   	push   ebx
c0017f0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017f11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f15:	52                   	push   edx
c0017f16:	50                   	push   eax
c0017f17:	57                   	push   edi
c0017f18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f1b:	83 c4 14             	add    esp,0x14
c0017f1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f22:	e8 b2 40 ff ff       	call   c000bfd9 <malloc>
c0017f27:	31 d2                	xor    edx,edx
c0017f29:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017f2d:	83 c4 0c             	add    esp,0xc
c0017f30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f34:	52                   	push   edx
c0017f35:	50                   	push   eax
c0017f36:	57                   	push   edi
c0017f37:	e8 64 78 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017f3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f3f:	31 d2                	xor    edx,edx
c0017f41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f49:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f4b:	52                   	push   edx
c0017f4c:	50                   	push   eax
c0017f4d:	57                   	push   edi
c0017f4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f51:	83 c4 20             	add    esp,0x20
c0017f54:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f60:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017f64:	0f 84 54 03 00 00    	je     c00182be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017f6a:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017f71:	31 d2                	xor    edx,edx
c0017f73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f77:	c1 e8 03             	shr    eax,0x3
c0017f7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f7e:	50                   	push   eax
c0017f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f83:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f87:	52                   	push   edx
c0017f88:	50                   	push   eax
c0017f89:	57                   	push   edi
c0017f8a:	e8 11 78 ff ff       	call   c000f7a0 <File::seek(unsigned long long)>
c0017f8f:	58                   	pop    eax
c0017f90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f94:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017f9b:	e8 39 40 ff ff       	call   c000bfd9 <malloc>
c0017fa0:	31 d2                	xor    edx,edx
c0017fa2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fa6:	58                   	pop    eax
c0017fa7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fa9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017fad:	50                   	push   eax
c0017fae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017fb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fb6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017fbd:	52                   	push   edx
c0017fbe:	50                   	push   eax
c0017fbf:	57                   	push   edi
c0017fc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017fc3:	83 c4 20             	add    esp,0x20
c0017fc6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017fce:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017fd2:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017fd6:	0f 8d c6 02 00 00    	jge    c00182a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017fdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fe4:	31 db                	xor    ebx,ebx
c0017fe6:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017fe9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017fed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ff1:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017ff5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ff9:	c1 e8 08             	shr    eax,0x8
c0017ffc:	89 c6                	mov    esi,eax
c0017ffe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018002:	c1 e6 04             	shl    esi,0x4
c0018005:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0018009:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001800c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018010:	85 c0                	test   eax,eax
c0018012:	0f 85 17 01 00 00    	jne    c001812f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	b3 01                	mov    bl,0x1
c001801d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018021:	03 06                	add    eax,DWORD PTR [esi]
c0018023:	50                   	push   eax
c0018024:	e8 24 f8 ff ff       	call   c001784d <Thr::getAddressOfKernelSymbol(char const*)>
c0018029:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018035:	0f 85 f4 00 00 00    	jne    c001812f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001803b:	50                   	push   eax
c001803c:	50                   	push   eax
c001803d:	68 51 2b 02 c0       	push   0xc0022b51
c0018042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018046:	03 06                	add    eax,DWORD PTR [esi]
c0018048:	50                   	push   eax
c0018049:	e8 5c 87 fe ff       	call   c00007aa <strcmp>
c001804e:	83 c4 10             	add    esp,0x10
c0018051:	85 c0                	test   eax,eax
c0018053:	75 0a                	jne    c001805f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018055:	b8 fc f3 01 c0       	mov    eax,0xc001f3fc
c001805a:	e9 ca 00 00 00       	jmp    c0018129 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001805f:	50                   	push   eax
c0018060:	50                   	push   eax
c0018061:	68 5b 2b 02 c0       	push   0xc0022b5b
c0018066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001806a:	03 06                	add    eax,DWORD PTR [esi]
c001806c:	50                   	push   eax
c001806d:	e8 38 87 fe ff       	call   c00007aa <strcmp>
c0018072:	83 c4 10             	add    esp,0x10
c0018075:	85 c0                	test   eax,eax
c0018077:	75 0a                	jne    c0018083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018079:	b8 30 f1 01 c0       	mov    eax,0xc001f130
c001807e:	e9 a6 00 00 00       	jmp    c0018129 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018083:	53                   	push   ebx
c0018084:	53                   	push   ebx
c0018085:	68 64 2b 02 c0       	push   0xc0022b64
c001808a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001808e:	03 06                	add    eax,DWORD PTR [esi]
c0018090:	50                   	push   eax
c0018091:	e8 14 87 fe ff       	call   c00007aa <strcmp>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	85 c0                	test   eax,eax
c001809b:	75 0a                	jne    c00180a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001809d:	b8 fc f4 01 c0       	mov    eax,0xc001f4fc
c00180a2:	e9 82 00 00 00       	jmp    c0018129 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00180a7:	51                   	push   ecx
c00180a8:	51                   	push   ecx
c00180a9:	68 6e 2b 02 c0       	push   0xc0022b6e
c00180ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180b2:	03 06                	add    eax,DWORD PTR [esi]
c00180b4:	50                   	push   eax
c00180b5:	e8 f0 86 fe ff       	call   c00007aa <strcmp>
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	85 c0                	test   eax,eax
c00180bf:	74 63                	je     c0018124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00180c1:	50                   	push   eax
c00180c2:	50                   	push   eax
c00180c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180c7:	03 06                	add    eax,DWORD PTR [esi]
c00180c9:	50                   	push   eax
c00180ca:	68 77 2b 02 c0       	push   0xc0022b77
c00180cf:	e8 73 70 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00180d4:	58                   	pop    eax
c00180d5:	5a                   	pop    edx
c00180d6:	68 91 2b 02 c0       	push   0xc0022b91
c00180db:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00180e2:	53                   	push   ebx
c00180e3:	e8 71 86 fe ff       	call   c0000759 <strcpy>
c00180e8:	59                   	pop    ecx
c00180e9:	58                   	pop    eax
c00180ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180ee:	03 06                	add    eax,DWORD PTR [esi]
c00180f0:	50                   	push   eax
c00180f1:	53                   	push   ebx
c00180f2:	e8 19 87 fe ff       	call   c0000810 <strcat>
c00180f7:	58                   	pop    eax
c00180f8:	5a                   	pop    edx
c00180f9:	68 27 2c 02 c0       	push   0xc0022c27
c00180fe:	53                   	push   ebx
c00180ff:	e8 0c 87 fe ff       	call   c0000810 <strcat>
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001810c:	0f 84 4b 01 00 00    	je     c001825d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018112:	83 ec 0c             	sub    esp,0xc
c0018115:	53                   	push   ebx
c0018116:	e8 5b d8 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018122:	eb 0b                	jmp    c001812f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018124:	b8 7c f2 01 c0       	mov    eax,0xc001f27c
c0018129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001812d:	b3 01                	mov    bl,0x1
c001812f:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018134:	0f 85 80 00 00 00    	jne    c00181ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001813a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018141:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018145:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018149:	01 ce                	add    esi,ecx
c001814b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018153:	0f 94 c2             	sete   dl
c0018156:	8b 06                	mov    eax,DWORD PTR [esi]
c0018158:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018160:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018165:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018169:	84 db                	test   bl,bl
c001816b:	74 31                	je     c001819e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001816d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018171:	01 c3                	add    ebx,eax
c0018173:	84 d2                	test   dl,dl
c0018175:	75 0a                	jne    c0018181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018177:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001817b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001817f:	76 32                	jbe    c00181b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018181:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018186:	0f 84 d1 00 00 00    	je     c001825d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001818c:	83 ec 0c             	sub    esp,0xc
c001818f:	68 a8 2b 02 c0       	push   0xc0022ba8
c0018194:	e8 dd d7 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	eb 15                	jmp    c00181b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001819e:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c00181a1:	84 d2                	test   dl,dl
c00181a3:	75 0e                	jne    c00181b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00181a5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00181ad:	77 04                	ja     c00181b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00181af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00181b3:	89 1e                	mov    DWORD PTR [esi],ebx
c00181b5:	e9 df 00 00 00       	jmp    c0018299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00181ba:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00181bf:	75 6e                	jne    c001822f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00181c1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00181c8:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00181cc:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00181d0:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00181d8:	74 17                	je     c00181f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181da:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00181e2:	74 0d                	je     c00181f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181e4:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181e8:	83 e8 04             	sub    eax,0x4
c00181eb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00181ef:	76 17                	jbe    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00181f1:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181f6:	74 65                	je     c001825d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181f8:	83 ec 0c             	sub    esp,0xc
c00181fb:	68 c4 2b 02 c0       	push   0xc0022bc4
c0018200:	e8 71 d7 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	8b 16                	mov    edx,DWORD PTR [esi]
c001820a:	84 db                	test   bl,bl
c001820c:	74 13                	je     c0018221 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001820e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018212:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0018219:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001821d:	01 d0                	add    eax,edx
c001821f:	eb 06                	jmp    c0018227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018221:	89 d0                	mov    eax,edx
c0018223:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018227:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001822b:	89 06                	mov    DWORD PTR [esi],eax
c001822d:	eb 6a                	jmp    c0018299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001822f:	50                   	push   eax
c0018230:	50                   	push   eax
c0018231:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018236:	50                   	push   eax
c0018237:	68 e0 2b 02 c0       	push   0xc0022be0
c001823c:	e8 06 6f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018249:	74 12                	je     c001825d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001824b:	83 ec 0c             	sub    esp,0xc
c001824e:	68 eb 2b 02 c0       	push   0xc0022beb
c0018253:	e8 1e d7 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	eb 3c                	jmp    c0018299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	57                   	push   edi
c0018261:	e8 da 74 ff ff       	call   c000f740 <File::close()>
c0018266:	8b 07                	mov    eax,DWORD PTR [edi]
c0018268:	89 3c 24             	mov    DWORD PTR [esp],edi
c001826b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001826e:	59                   	pop    ecx
c001826f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018273:	e8 71 3d ff ff       	call   c000bfe9 <free>
c0018278:	5b                   	pop    ebx
c0018279:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001827d:	e8 67 3d ff ff       	call   c000bfe9 <free>
c0018282:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018285:	e8 5f 3d ff ff       	call   c000bfe9 <free>
c001828a:	5e                   	pop    esi
c001828b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001828f:	e8 55 3d ff ff       	call   c000bfe9 <free>
c0018294:	83 c4 10             	add    esp,0x10
c0018297:	eb 21                	jmp    c00182ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018299:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001829d:	e9 2c fd ff ff       	jmp    c0017fce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c00182a2:	83 ec 0c             	sub    esp,0xc
c00182a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00182a9:	e8 3b 3d ff ff       	call   c000bfe9 <free>
c00182ae:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00182b2:	83 c4 10             	add    esp,0x10
c00182b5:	e9 a2 fc ff ff       	jmp    c0017f5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00182ba:	31 c0                	xor    eax,eax
c00182bc:	eb 32                	jmp    c00182f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00182be:	83 ec 0c             	sub    esp,0xc
c00182c1:	57                   	push   edi
c00182c2:	e8 79 74 ff ff       	call   c000f740 <File::close()>
c00182c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00182c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00182cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182cf:	58                   	pop    eax
c00182d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182d4:	e8 10 3d ff ff       	call   c000bfe9 <free>
c00182d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00182dc:	e8 08 3d ff ff       	call   c000bfe9 <free>
c00182e1:	5a                   	pop    edx
c00182e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182e6:	e8 fe 3c ff ff       	call   c000bfe9 <free>
c00182eb:	83 c4 10             	add    esp,0x10
c00182ee:	b0 01                	mov    al,0x1
c00182f0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	5f                   	pop    edi
c00182f9:	5d                   	pop    ebp
c00182fa:	c3                   	ret    

c00182fb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00182fb:	56                   	push   esi
c00182fc:	31 d2                	xor    edx,edx
c00182fe:	53                   	push   ebx
c00182ff:	8b 1d 00 52 02 c0    	mov    ebx,DWORD PTR ds:0xc0025200
c0018305:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018309:	39 d3                	cmp    ebx,edx
c001830b:	7e 1b                	jle    c0018328 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001830d:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c0018314:	39 c8                	cmp    eax,ecx
c0018316:	77 0d                	ja     c0018325 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018318:	8b 34 95 20 52 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdade0]
c001831f:	01 c6                	add    esi,eax
c0018321:	39 ce                	cmp    esi,ecx
c0018323:	77 05                	ja     c001832a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018325:	42                   	inc    edx
c0018326:	eb e1                	jmp    c0018309 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018328:	31 c0                	xor    eax,eax
c001832a:	5b                   	pop    ebx
c001832b:	5e                   	pop    esi
c001832c:	c3                   	ret    

c001832d <Thr::getDriverNameFromAddress(unsigned long)>:
c001832d:	53                   	push   ebx
c001832e:	31 c0                	xor    eax,eax
c0018330:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018334:	8b 1d 00 52 02 c0    	mov    ebx,DWORD PTR ds:0xc0025200
c001833a:	39 c3                	cmp    ebx,eax
c001833c:	7e 22                	jle    c0018360 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001833e:	8b 14 85 20 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018345:	39 ca                	cmp    edx,ecx
c0018347:	77 14                	ja     c001835d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018349:	03 14 85 20 52 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdade0]
c0018350:	39 ca                	cmp    edx,ecx
c0018352:	76 09                	jbe    c001835d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018354:	8b 04 85 20 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda9e0]
c001835b:	eb 05                	jmp    c0018362 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001835d:	40                   	inc    eax
c001835e:	eb da                	jmp    c001833a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018360:	31 c0                	xor    eax,eax
c0018362:	5b                   	pop    ebx
c0018363:	c3                   	ret    

c0018364 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018364:	53                   	push   ebx
c0018365:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018369:	53                   	push   ebx
c001836a:	e8 8c ff ff ff       	call   c00182fb <Thr::getDriverBaseFromAddress(unsigned long)>
c001836f:	5a                   	pop    edx
c0018370:	31 d2                	xor    edx,edx
c0018372:	85 c0                	test   eax,eax
c0018374:	74 04                	je     c001837a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018376:	89 da                	mov    edx,ebx
c0018378:	29 c2                	sub    edx,eax
c001837a:	89 d0                	mov    eax,edx
c001837c:	5b                   	pop    ebx
c001837d:	c3                   	ret    

c001837e <Thr::loadDLL(char const*, bool)>:
c001837e:	55                   	push   ebp
c001837f:	57                   	push   edi
c0018380:	56                   	push   esi
c0018381:	53                   	push   ebx
c0018382:	81 ec 34 01 00 00    	sub    esp,0x134
c0018388:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001838f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018396:	56                   	push   esi
c0018397:	68 03 2c 02 c0       	push   0xc0022c03
c001839c:	e8 a6 6d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00183a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00183a8:	e8 65 6c ff ff       	call   c000f012 <operator new(unsigned long)>
c00183ad:	83 c4 0c             	add    esp,0xc
c00183b0:	89 c3                	mov    ebx,eax
c00183b2:	ff 35 f4 59 02 c0    	push   DWORD PTR ds:0xc00259f4
c00183b8:	56                   	push   esi
c00183b9:	50                   	push   eax
c00183ba:	e8 bf 72 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c00183bf:	83 c4 0c             	add    esp,0xc
c00183c2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00183c6:	50                   	push   eax
c00183c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00183cb:	50                   	push   eax
c00183cc:	53                   	push   ebx
c00183cd:	e8 bc 75 ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c00183d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00183e2:	75 0a                	jne    c00183ee <Thr::loadDLL(char const*, bool)+0x70>
c00183e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183e8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00183ec:	75 3c                	jne    c001842a <Thr::loadDLL(char const*, bool)+0xac>
c00183ee:	89 e8                	mov    eax,ebp
c00183f0:	84 c0                	test   al,al
c00183f2:	0f 84 3d 01 00 00    	je     c0018535 <Thr::loadDLL(char const*, bool)+0x1b7>
c00183f8:	50                   	push   eax
c00183f9:	50                   	push   eax
c00183fa:	68 14 2c 02 c0       	push   0xc0022c14
c00183ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018403:	53                   	push   ebx
c0018404:	e8 50 83 fe ff       	call   c0000759 <strcpy>
c0018409:	58                   	pop    eax
c001840a:	5a                   	pop    edx
c001840b:	56                   	push   esi
c001840c:	53                   	push   ebx
c001840d:	e8 fe 83 fe ff       	call   c0000810 <strcat>
c0018412:	59                   	pop    ecx
c0018413:	5f                   	pop    edi
c0018414:	68 27 2c 02 c0       	push   0xc0022c27
c0018419:	53                   	push   ebx
c001841a:	e8 f1 83 fe ff       	call   c0000810 <strcat>
c001841f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018422:	e8 4f d5 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018427:	83 c4 10             	add    esp,0x10
c001842a:	e8 8a 5e ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c001842f:	51                   	push   ecx
c0018430:	6a 03                	push   0x3
c0018432:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018436:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001843a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018440:	83 d3 00             	adc    ebx,0x0
c0018443:	89 ca                	mov    edx,ecx
c0018445:	89 d1                	mov    ecx,edx
c0018447:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001844b:	51                   	push   ecx
c001844c:	50                   	push   eax
c001844d:	e8 a8 64 ff ff       	call   c000e8fa <VAS::allocatePages(int, int)>
c0018452:	89 34 24             	mov    DWORD PTR [esp],esi
c0018455:	89 c3                	mov    ebx,eax
c0018457:	e8 7b 82 fe ff       	call   c00006d7 <strlen>
c001845c:	8b 3d 00 52 02 c0    	mov    edi,DWORD PTR ds:0xc0025200
c0018462:	40                   	inc    eax
c0018463:	89 04 24             	mov    DWORD PTR [esp],eax
c0018466:	e8 6e 3b ff ff       	call   c000bfd9 <malloc>
c001846b:	89 04 bd 20 56 02 c0 	mov    DWORD PTR [edi*4-0x3ffda9e0],eax
c0018472:	5f                   	pop    edi
c0018473:	58                   	pop    eax
c0018474:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0018479:	56                   	push   esi
c001847a:	ff 34 85 20 56 02 c0 	push   DWORD PTR [eax*4-0x3ffda9e0]
c0018481:	e8 d3 82 fe ff       	call   c0000759 <strcpy>
c0018486:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c001848b:	8d 50 01             	lea    edx,[eax+0x1]
c001848e:	89 1c 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],ebx
c0018495:	89 15 00 52 02 c0    	mov    DWORD PTR ds:0xc0025200,edx
c001849b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001849f:	83 c4 0c             	add    esp,0xc
c00184a2:	89 14 85 20 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdade0],edx
c00184a9:	6a 01                	push   0x1
c00184ab:	53                   	push   ebx
c00184ac:	56                   	push   esi
c00184ad:	e8 ab f6 ff ff       	call   c0017b5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	89 c7                	mov    edi,eax
c00184b7:	fe c8                	dec    al
c00184b9:	74 16                	je     c00184d1 <Thr::loadDLL(char const*, bool)+0x153>
c00184bb:	89 e8                	mov    eax,ebp
c00184bd:	84 c0                	test   al,al
c00184bf:	74 10                	je     c00184d1 <Thr::loadDLL(char const*, bool)+0x153>
c00184c1:	83 ec 0c             	sub    esp,0xc
c00184c4:	68 29 2c 02 c0       	push   0xc0022c29
c00184c9:	e8 a8 d4 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	31 f6                	xor    esi,esi
c00184d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184db:	05 ff 0f 00 00       	add    eax,0xfff
c00184e0:	83 d2 00             	adc    edx,0x0
c00184e3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00184e7:	c1 ea 0c             	shr    edx,0xc
c00184ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184f2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00184f6:	ba 00 00 00 00       	mov    edx,0x0
c00184fb:	89 d0                	mov    eax,edx
c00184fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0018501:	73 2c                	jae    c001852f <Thr::loadDLL(char const*, bool)+0x1b1>
c0018503:	e8 b1 5d ff ff       	call   c000e2b9 <Virt::getAKernelVAS()>
c0018508:	89 f5                	mov    ebp,esi
c001850a:	c1 e5 0c             	shl    ebp,0xc
c001850d:	52                   	push   edx
c001850e:	52                   	push   edx
c001850f:	01 dd                	add    ebp,ebx
c0018511:	55                   	push   ebp
c0018512:	50                   	push   eax
c0018513:	e8 42 5f ff ff       	call   c000e45a <VAS::getPageTableEntry(unsigned long)>
c0018518:	83 c4 10             	add    esp,0x10
c001851b:	f6 00 60             	test   BYTE PTR [eax],0x60
c001851e:	75 0c                	jne    c001852c <Thr::loadDLL(char const*, bool)+0x1ae>
c0018520:	83 ec 0c             	sub    esp,0xc
c0018523:	55                   	push   ebp
c0018524:	e8 f9 3f ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	46                   	inc    esi
c001852d:	eb a4                	jmp    c00184d3 <Thr::loadDLL(char const*, bool)+0x155>
c001852f:	89 f8                	mov    eax,edi
c0018531:	84 c0                	test   al,al
c0018533:	75 02                	jne    c0018537 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018535:	31 db                	xor    ebx,ebx
c0018537:	81 c4 2c 01 00 00    	add    esp,0x12c
c001853d:	89 d8                	mov    eax,ebx
c001853f:	5b                   	pop    ebx
c0018540:	5e                   	pop    esi
c0018541:	5f                   	pop    edi
c0018542:	5d                   	pop    ebp
c0018543:	c3                   	ret    

c0018544 <Thr::executeDLL(unsigned long, void*)>:
c0018544:	56                   	push   esi
c0018545:	53                   	push   ebx
c0018546:	51                   	push   ecx
c0018547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001854b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001854f:	85 db                	test   ebx,ebx
c0018551:	75 10                	jne    c0018563 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018553:	83 ec 0c             	sub    esp,0xc
c0018556:	68 48 2c 02 c0       	push   0xc0022c48
c001855b:	e8 16 d4 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018567:	5a                   	pop    edx
c0018568:	89 d8                	mov    eax,ebx
c001856a:	5b                   	pop    ebx
c001856b:	5e                   	pop    esi
c001856c:	ff e0                	jmp    eax

c001856e <changeTSS>:
c001856e:	83 ec 0c             	sub    esp,0xc
c0018571:	e8 94 c2 ff ff       	call   c001480a <thisCPU()>
c0018576:	52                   	push   edx
c0018577:	05 7c 11 00 00       	add    eax,0x117c
c001857c:	52                   	push   edx
c001857d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018583:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018586:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001858b:	c1 e1 15             	shl    ecx,0x15
c001858e:	29 ca                	sub    edx,ecx
c0018590:	52                   	push   edx
c0018591:	50                   	push   eax
c0018592:	e8 33 55 ff ff       	call   c000daca <TSS::setESP(unsigned long)>
c0018597:	83 c4 1c             	add    esp,0x1c
c001859a:	c3                   	ret    
c001859b:	90                   	nop

c001859c <Process::addArgs(char**)>:
c001859c:	57                   	push   edi
c001859d:	56                   	push   esi
c001859e:	53                   	push   ebx
c001859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00185a7:	85 ff                	test   edi,edi
c00185a9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00185b3:	74 45                	je     c00185fa <Process::addArgs(char**)+0x5e>
c00185b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00185b7:	85 c0                	test   eax,eax
c00185b9:	74 3f                	je     c00185fa <Process::addArgs(char**)+0x5e>
c00185bb:	31 db                	xor    ebx,ebx
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	50                   	push   eax
c00185c1:	e8 11 81 fe ff       	call   c00006d7 <strlen>
c00185c6:	40                   	inc    eax
c00185c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00185ca:	e8 0a 3a ff ff       	call   c000bfd9 <malloc>
c00185cf:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00185d6:	5a                   	pop    edx
c00185d7:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00185da:	59                   	pop    ecx
c00185db:	43                   	inc    ebx
c00185dc:	52                   	push   edx
c00185dd:	50                   	push   eax
c00185de:	e8 76 81 fe ff       	call   c0000759 <strcpy>
c00185e3:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	41                   	inc    ecx
c00185ed:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00185f3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00185f6:	85 c0                	test   eax,eax
c00185f8:	75 c3                	jne    c00185bd <Process::addArgs(char**)+0x21>
c00185fa:	5b                   	pop    ebx
c00185fb:	5e                   	pop    esi
c00185fc:	5f                   	pop    edi
c00185fd:	c3                   	ret    

c00185fe <Process::Process(char const*, Process*, char**)>:
c00185fe:	56                   	push   esi
c00185ff:	53                   	push   ebx
c0018600:	83 ec 14             	sub    esp,0x14
c0018603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018607:	05 0c 02 00 00       	add    eax,0x20c
c001860c:	bb 07 00 00 00       	mov    ebx,0x7
c0018611:	89 c6                	mov    esi,eax
c0018613:	85 db                	test   ebx,ebx
c0018615:	78 12                	js     c0018629 <Process::Process(char const*, Process*, char**)+0x2b>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	56                   	push   esi
c001861b:	e8 2a 77 00 00       	call   c001fd4a <ThreadControlBlock::ThreadControlBlock()>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	83 c6 63             	add    esi,0x63
c0018626:	4b                   	dec    ebx
c0018627:	eb ea                	jmp    c0018613 <Process::Process(char const*, Process*, char**)+0x15>
c0018629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001862d:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018638:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018641:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c0018646:	8d 50 01             	lea    edx,[eax+0x1]
c0018649:	89 15 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,edx
c001864f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018653:	89 02                	mov    DWORD PTR [edx],eax
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	6a 10                	push   0x10
c001865a:	e8 b3 69 ff ff       	call   c000f012 <operator new(unsigned long)>
c001865f:	83 c4 10             	add    esp,0x10
c0018662:	89 c3                	mov    ebx,eax
c0018664:	83 ec 08             	sub    esp,0x8
c0018667:	6a 00                	push   0x0
c0018669:	53                   	push   ebx
c001866a:	e8 37 66 ff ff       	call   c000eca6 <VAS::VAS(bool)>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018676:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001867c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018680:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001868a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018692:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001869c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186a2:	85 c0                	test   eax,eax
c00186a4:	74 42                	je     c00186e8 <Process::Process(char const*, Process*, char**)+0xea>
c00186a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186aa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186b0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00186b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ba:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00186c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00186d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d4:	05 0c 01 00 00       	add    eax,0x10c
c00186d9:	83 ec 08             	sub    esp,0x8
c00186dc:	52                   	push   edx
c00186dd:	50                   	push   eax
c00186de:	e8 76 80 fe ff       	call   c0000759 <strcpy>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	eb 5c                	jmp    c0018744 <Process::Process(char const*, Process*, char**)+0x146>
c00186e8:	83 ec 0c             	sub    esp,0xc
c00186eb:	68 60 12 00 00       	push   0x1260
c00186f0:	e8 1d 69 ff ff       	call   c000f012 <operator new(unsigned long)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	89 c3                	mov    ebx,eax
c00186fa:	83 ec 08             	sub    esp,0x8
c00186fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018701:	53                   	push   ebx
c0018702:	e8 c1 50 ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018718:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001871e:	83 ec 0c             	sub    esp,0xc
c0018721:	50                   	push   eax
c0018722:	e8 a0 44 ff ff       	call   c000cbc7 <addToTerminalCycle(VgaText*)>
c0018727:	83 c4 10             	add    esp,0x10
c001872a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872e:	05 0c 01 00 00       	add    eax,0x10c
c0018733:	83 ec 08             	sub    esp,0x8
c0018736:	68 72 2c 02 c0       	push   0xc0022c72
c001873b:	50                   	push   eax
c001873c:	e8 18 80 fe ff       	call   c0000759 <strcpy>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018748:	83 c0 0c             	add    eax,0xc
c001874b:	83 ec 08             	sub    esp,0x8
c001874e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018752:	50                   	push   eax
c0018753:	e8 01 80 fe ff       	call   c0000759 <strcpy>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	83 ec 08             	sub    esp,0x8
c001875e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018762:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018766:	e8 31 fe ff ff       	call   c001859c <Process::addArgs(char**)>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	83 ec 08             	sub    esp,0x8
c0018771:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018779:	e8 a6 ee ff ff       	call   c0017624 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018785:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018789:	83 f0 01             	xor    eax,0x1
c001878c:	88 c2                	mov    dl,al
c001878e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018792:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018798:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001879c:	25 ff 00 00 00       	and    eax,0xff
c00187a1:	83 ec 08             	sub    esp,0x8
c00187a4:	50                   	push   eax
c00187a5:	68 70 2d 02 c0       	push   0xc0022d70
c00187aa:	e8 98 69 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	90                   	nop
c00187b3:	83 c4 14             	add    esp,0x14
c00187b6:	5b                   	pop    ebx
c00187b7:	5e                   	pop    esi
c00187b8:	c3                   	ret    
c00187b9:	90                   	nop

c00187ba <Process::Process(bool, char const*, Process*, char**)>:
c00187ba:	56                   	push   esi
c00187bb:	53                   	push   ebx
c00187bc:	83 ec 14             	sub    esp,0x14
c00187bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00187c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187cb:	05 0c 02 00 00       	add    eax,0x20c
c00187d0:	bb 07 00 00 00       	mov    ebx,0x7
c00187d5:	89 c6                	mov    esi,eax
c00187d7:	85 db                	test   ebx,ebx
c00187d9:	78 12                	js     c00187ed <Process::Process(bool, char const*, Process*, char**)+0x33>
c00187db:	83 ec 0c             	sub    esp,0xc
c00187de:	56                   	push   esi
c00187df:	e8 66 75 00 00       	call   c001fd4a <ThreadControlBlock::ThreadControlBlock()>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	83 c6 63             	add    esi,0x63
c00187ea:	4b                   	dec    ebx
c00187eb:	eb ea                	jmp    c00187d7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00187ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00187f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018805:	a1 c4 3f 02 c0       	mov    eax,ds:0xc0023fc4
c001880a:	8d 50 01             	lea    edx,[eax+0x1]
c001880d:	89 15 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,edx
c0018813:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018817:	89 02                	mov    DWORD PTR [edx],eax
c0018819:	83 ec 0c             	sub    esp,0xc
c001881c:	6a 10                	push   0x10
c001881e:	e8 ef 67 ff ff       	call   c000f012 <operator new(unsigned long)>
c0018823:	83 c4 10             	add    esp,0x10
c0018826:	89 c3                	mov    ebx,eax
c0018828:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001882c:	25 ff 00 00 00       	and    eax,0xff
c0018831:	83 ec 08             	sub    esp,0x8
c0018834:	50                   	push   eax
c0018835:	53                   	push   ebx
c0018836:	e8 6b 64 ff ff       	call   c000eca6 <VAS::VAS(bool)>
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018842:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001884c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001885a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001885e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018868:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001886e:	85 c0                	test   eax,eax
c0018870:	74 42                	je     c00188b4 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018876:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001887c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018886:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001888c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018890:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018896:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001889c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a0:	05 0c 01 00 00       	add    eax,0x10c
c00188a5:	83 ec 08             	sub    esp,0x8
c00188a8:	52                   	push   edx
c00188a9:	50                   	push   eax
c00188aa:	e8 aa 7e fe ff       	call   c0000759 <strcpy>
c00188af:	83 c4 10             	add    esp,0x10
c00188b2:	eb 5c                	jmp    c0018910 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00188b4:	83 ec 0c             	sub    esp,0xc
c00188b7:	68 60 12 00 00       	push   0x1260
c00188bc:	e8 51 67 ff ff       	call   c000f012 <operator new(unsigned long)>
c00188c1:	83 c4 10             	add    esp,0x10
c00188c4:	89 c3                	mov    ebx,eax
c00188c6:	83 ec 08             	sub    esp,0x8
c00188c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188cd:	53                   	push   ebx
c00188ce:	e8 f5 4e ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188da:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00188e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00188ea:	83 ec 0c             	sub    esp,0xc
c00188ed:	50                   	push   eax
c00188ee:	e8 d4 42 ff ff       	call   c000cbc7 <addToTerminalCycle(VgaText*)>
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188fa:	05 0c 01 00 00       	add    eax,0x10c
c00188ff:	83 ec 08             	sub    esp,0x8
c0018902:	68 72 2c 02 c0       	push   0xc0022c72
c0018907:	50                   	push   eax
c0018908:	e8 4c 7e fe ff       	call   c0000759 <strcpy>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018914:	83 c0 0c             	add    eax,0xc
c0018917:	83 ec 08             	sub    esp,0x8
c001891a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001891e:	50                   	push   eax
c001891f:	e8 35 7e fe ff       	call   c0000759 <strcpy>
c0018924:	83 c4 10             	add    esp,0x10
c0018927:	83 ec 08             	sub    esp,0x8
c001892a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001892e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018932:	e8 65 fc ff ff       	call   c001859c <Process::addArgs(char**)>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	90                   	nop
c001893b:	83 c4 14             	add    esp,0x14
c001893e:	5b                   	pop    ebx
c001893f:	5e                   	pop    esi
c0018940:	c3                   	ret    

c0018941 <disableIRQs()>:
c0018941:	fa                   	cli    
c0018942:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c0018947:	40                   	inc    eax
c0018948:	a3 cc 59 02 c0       	mov    ds:0xc00259cc,eax
c001894d:	c3                   	ret    

c001894e <getIRQNestingLevel()>:
c001894e:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c0018953:	c3                   	ret    

c0018954 <enableIRQs()>:
c0018954:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c0018959:	48                   	dec    eax
c001895a:	a3 cc 59 02 c0       	mov    ds:0xc00259cc,eax
c001895f:	75 01                	jne    c0018962 <enableIRQs()+0xe>
c0018961:	fb                   	sti    
c0018962:	c3                   	ret    

c0018963 <lockScheduler()>:
c0018963:	eb dc                	jmp    c0018941 <disableIRQs()>

c0018965 <unlockScheduler()>:
c0018965:	eb ed                	jmp    c0018954 <enableIRQs()>

c0018967 <userModeEntryPoint(void*)>:
c0018967:	83 ec 0c             	sub    esp,0xc
c001896a:	e8 f6 ff ff ff       	call   c0018965 <unlockScheduler()>
c001896f:	fb                   	sti    
c0018970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018975:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018978:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001897e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018982:	83 c4 0c             	add    esp,0xc
c0018985:	e9 0e 79 fe ff       	jmp    c0000298 <goToUsermode>

c001898a <lockStuff()>:
c001898a:	e8 b2 ff ff ff       	call   c0018941 <disableIRQs()>
c001898f:	a1 c8 59 02 c0       	mov    eax,ds:0xc00259c8
c0018994:	40                   	inc    eax
c0018995:	a3 c8 59 02 c0       	mov    ds:0xc00259c8,eax
c001899a:	c3                   	ret    

c001899b <taskStartupFunction>:
c001899b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189a0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00189a3:	c3                   	ret    

c00189a4 <updateTimeUsed()>:
c00189a4:	57                   	push   edi
c00189a5:	56                   	push   esi
c00189a6:	53                   	push   ebx
c00189a7:	e8 5e be ff ff       	call   c001480a <thisCPU()>
c00189ac:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00189b3:	74 49                	je     c00189fe <updateTimeUsed()+0x5a>
c00189b5:	0f 31                	rdtsc  
c00189b7:	89 c1                	mov    ecx,eax
c00189b9:	a3 08 5a 02 c0       	mov    ds:0xc0025a08,eax
c00189be:	2b 0d f8 59 02 c0    	sub    ecx,DWORD PTR ds:0xc00259f8
c00189c4:	a3 f8 59 02 c0       	mov    ds:0xc00259f8,eax
c00189c9:	89 0d 00 5a 02 c0    	mov    DWORD PTR ds:0xc0025a00,ecx
c00189cf:	89 d3                	mov    ebx,edx
c00189d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189d6:	89 15 0c 5a 02 c0    	mov    DWORD PTR ds:0xc0025a0c,edx
c00189dc:	1b 1d fc 59 02 c0    	sbb    ebx,DWORD PTR ds:0xc00259fc
c00189e2:	89 15 fc 59 02 c0    	mov    DWORD PTR ds:0xc00259fc,edx
c00189e8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00189eb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00189ee:	01 f1                	add    ecx,esi
c00189f0:	89 1d 04 5a 02 c0    	mov    DWORD PTR ds:0xc0025a04,ebx
c00189f6:	11 fb                	adc    ebx,edi
c00189f8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00189fb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00189fe:	5b                   	pop    ebx
c00189ff:	5e                   	pop    esi
c0018a00:	5f                   	pop    edi
c0018a01:	c3                   	ret    

c0018a02 <switchToThread(ThreadControlBlock*)>:
c0018a02:	53                   	push   ebx
c0018a03:	83 ec 08             	sub    esp,0x8
c0018a06:	a1 c8 59 02 c0       	mov    eax,ds:0xc00259c8
c0018a0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a0f:	85 c0                	test   eax,eax
c0018a11:	75 36                	jne    c0018a49 <switchToThread(ThreadControlBlock*)+0x47>
c0018a13:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018a16:	80 fa ff             	cmp    dl,0xff
c0018a19:	74 2a                	je     c0018a45 <switchToThread(ThreadControlBlock*)+0x43>
c0018a1b:	81 e2 ff 00 00 00    	and    edx,0xff
c0018a21:	b8 84 03 00 00       	mov    eax,0x384
c0018a26:	29 d0                	sub    eax,edx
c0018a28:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018a2b:	c1 e0 10             	shl    eax,0x10
c0018a2e:	01 c8                	add    eax,ecx
c0018a30:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018a33:	e8 6c ff ff ff       	call   c00189a4 <updateTimeUsed()>
c0018a38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018a3c:	83 c4 08             	add    esp,0x8
c0018a3f:	5b                   	pop    ebx
c0018a40:	e9 8c 78 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018a45:	31 c0                	xor    eax,eax
c0018a47:	eb e7                	jmp    c0018a30 <switchToThread(ThreadControlBlock*)+0x2e>
c0018a49:	c7 05 c4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259c4,0x1
c0018a53:	83 c4 08             	add    esp,0x8
c0018a56:	5b                   	pop    ebx
c0018a57:	c3                   	ret    

c0018a58 <Semaphore::Semaphore(int)>:
c0018a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a60:	89 10                	mov    DWORD PTR [eax],edx
c0018a62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a66:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a83:	90                   	nop
c0018a84:	c3                   	ret    
c0018a85:	90                   	nop

c0018a86 <Mutex::Mutex()>:
c0018a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8a:	6a 01                	push   0x1
c0018a8c:	50                   	push   eax
c0018a8d:	e8 c6 ff ff ff       	call   c0018a58 <Semaphore::Semaphore(int)>
c0018a92:	83 c4 08             	add    esp,0x8
c0018a95:	90                   	nop
c0018a96:	c3                   	ret    
c0018a97:	90                   	nop

c0018a98 <Process::createThread(void (*)(void*), void*, int)>:
c0018a98:	55                   	push   ebp
c0018a99:	31 c9                	xor    ecx,ecx
c0018a9b:	57                   	push   edi
c0018a9c:	56                   	push   esi
c0018a9d:	53                   	push   ebx
c0018a9e:	83 ec 1c             	sub    esp,0x1c
c0018aa1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018aa5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018aac:	89 f2                	mov    edx,esi
c0018aae:	31 c0                	xor    eax,eax
c0018ab0:	66 89 d0             	mov    ax,dx
c0018ab3:	83 e2 01             	and    edx,0x1
c0018ab6:	74 14                	je     c0018acc <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018ab8:	d1 f8                	sar    eax,1
c0018aba:	41                   	inc    ecx
c0018abb:	89 c2                	mov    edx,eax
c0018abd:	83 f9 10             	cmp    ecx,0x10
c0018ac0:	75 ec                	jne    c0018aae <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018ac2:	83 c4 1c             	add    esp,0x1c
c0018ac5:	31 c0                	xor    eax,eax
c0018ac7:	5b                   	pop    ebx
c0018ac8:	5e                   	pop    esi
c0018ac9:	5f                   	pop    edi
c0018aca:	5d                   	pop    ebp
c0018acb:	c3                   	ret    
c0018acc:	b8 01 00 00 00       	mov    eax,0x1
c0018ad1:	d3 e0                	shl    eax,cl
c0018ad3:	09 c6                	or     esi,eax
c0018ad5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018adb:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018ae2:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018ae5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018ae8:	89 f0                	mov    eax,esi
c0018aea:	c1 e0 05             	shl    eax,0x5
c0018aed:	01 c6                	add    esi,eax
c0018aef:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018af2:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018af8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018afc:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018b02:	89 ca                	mov    edx,ecx
c0018b04:	f7 da                	neg    edx
c0018b06:	c1 e2 15             	shl    edx,0x15
c0018b09:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018b0f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018b15:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018b1b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018b21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018b25:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018b2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b2f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018b39:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018b3f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018b49:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018b53:	52                   	push   edx
c0018b54:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018b5b:	52                   	push   edx
c0018b5c:	50                   	push   eax
c0018b5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b61:	68 e8 59 02 c0       	push   0xc00259e8
c0018b66:	e8 37 70 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b72:	83 c4 1c             	add    esp,0x1c
c0018b75:	5b                   	pop    ebx
c0018b76:	5e                   	pop    esi
c0018b77:	5f                   	pop    edi
c0018b78:	5d                   	pop    ebp
c0018b79:	c3                   	ret    

c0018b7a <Process::createUserThread()>:
c0018b7a:	83 ec 0c             	sub    esp,0xc
c0018b7d:	68 80 00 00 00       	push   0x80
c0018b82:	6a 00                	push   0x0
c0018b84:	68 67 89 01 c0       	push   0xc0018967
c0018b89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b8d:	50                   	push   eax
c0018b8e:	e8 05 ff ff ff       	call   c0018a98 <Process::createThread(void (*)(void*), void*, int)>
c0018b93:	83 c4 1c             	add    esp,0x1c
c0018b96:	c3                   	ret    

c0018b97 <setupMultitasking(void (*)())>:
c0018b97:	56                   	push   esi
c0018b98:	53                   	push   ebx
c0018b99:	51                   	push   ecx
c0018b9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b9e:	eb 10                	jmp    c0018bb0 <setupMultitasking(void (*)())+0x19>
c0018ba0:	83 ec 0c             	sub    esp,0xc
c0018ba3:	68 e8 59 02 c0       	push   0xc00259e8
c0018ba8:	e8 47 6f 00 00       	call   c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bad:	83 c4 10             	add    esp,0x10
c0018bb0:	83 ec 0c             	sub    esp,0xc
c0018bb3:	68 e8 59 02 c0       	push   0xc00259e8
c0018bb8:	e8 1b 6f 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018bbd:	83 c4 10             	add    esp,0x10
c0018bc0:	84 c0                	test   al,al
c0018bc2:	74 dc                	je     c0018ba0 <setupMultitasking(void (*)())+0x9>
c0018bc4:	83 ec 0c             	sub    esp,0xc
c0018bc7:	68 3b 07 00 00       	push   0x73b
c0018bcc:	e8 41 64 ff ff       	call   c000f012 <operator new(unsigned long)>
c0018bd1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018bd8:	6a 00                	push   0x0
c0018bda:	68 76 2c 02 c0       	push   0xc0022c76
c0018bdf:	89 c3                	mov    ebx,eax
c0018be1:	6a 01                	push   0x1
c0018be3:	50                   	push   eax
c0018be4:	e8 d1 fb ff ff       	call   c00187ba <Process::Process(bool, char const*, Process*, char**)>
c0018be9:	83 c4 18             	add    esp,0x18
c0018bec:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018bf2:	89 1d f4 59 02 c0    	mov    DWORD PTR ds:0xc00259f4,ebx
c0018bf8:	50                   	push   eax
c0018bf9:	68 98 2d 02 c0       	push   0xc0022d98
c0018bfe:	e8 44 65 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018c03:	5a                   	pop    edx
c0018c04:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018c0a:	51                   	push   ecx
c0018c0b:	e8 2b 47 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c0018c10:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018c17:	83 c8 01             	or     eax,0x1
c0018c1a:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018c21:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018c27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c2a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018c34:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018c3a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018c44:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018c4e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018c54:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018c5a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018c64:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018c6a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018c74:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018c7e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018c84:	58                   	pop    eax
c0018c85:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018c8b:	5a                   	pop    edx
c0018c8c:	68 72 2c 02 c0       	push   0xc0022c72
c0018c91:	50                   	push   eax
c0018c92:	e8 c2 7a fe ff       	call   c0000759 <strcpy>
c0018c97:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018c9e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018ca2:	83 c4 14             	add    esp,0x14
c0018ca5:	5b                   	pop    ebx
c0018ca6:	5e                   	pop    esi
c0018ca7:	e9 17 76 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018cac <schedule()>:
c0018cac:	a1 c8 59 02 c0       	mov    eax,ds:0xc00259c8
c0018cb1:	85 c0                	test   eax,eax
c0018cb3:	74 0b                	je     c0018cc0 <schedule()+0x14>
c0018cb5:	c7 05 c4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259c4,0x1
c0018cbf:	c3                   	ret    
c0018cc0:	53                   	push   ebx
c0018cc1:	83 ec 14             	sub    esp,0x14
c0018cc4:	68 e8 59 02 c0       	push   0xc00259e8
c0018cc9:	e8 0a 6e 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018cce:	83 c4 10             	add    esp,0x10
c0018cd1:	84 c0                	test   al,al
c0018cd3:	75 38                	jne    c0018d0d <schedule()+0x61>
c0018cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018cdd:	4a                   	dec    edx
c0018cde:	74 32                	je     c0018d12 <schedule()+0x66>
c0018ce0:	83 ec 0c             	sub    esp,0xc
c0018ce3:	68 e8 59 02 c0       	push   0xc00259e8
c0018ce8:	e8 e3 6d 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ced:	89 c3                	mov    ebx,eax
c0018cef:	c7 04 24 e8 59 02 c0 	mov    DWORD PTR [esp],0xc00259e8
c0018cf6:	e8 f9 6d 00 00       	call   c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018cfb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018d02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d05:	e8 f8 fc ff ff       	call   c0018a02 <switchToThread(ThreadControlBlock*)>
c0018d0a:	83 c4 10             	add    esp,0x10
c0018d0d:	83 c4 08             	add    esp,0x8
c0018d10:	5b                   	pop    ebx
c0018d11:	c3                   	ret    
c0018d12:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018d19:	51                   	push   ecx
c0018d1a:	51                   	push   ecx
c0018d1b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018d21:	53                   	push   ebx
c0018d22:	68 e8 59 02 c0       	push   0xc00259e8
c0018d27:	e8 76 6e 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	eb af                	jmp    c0018ce0 <schedule()+0x34>

c0018d31 <unlockStuff()>:
c0018d31:	a1 c8 59 02 c0       	mov    eax,ds:0xc00259c8
c0018d36:	48                   	dec    eax
c0018d37:	a3 c8 59 02 c0       	mov    ds:0xc00259c8,eax
c0018d3c:	75 09                	jne    c0018d47 <unlockStuff()+0x16>
c0018d3e:	a1 c4 59 02 c0       	mov    eax,ds:0xc00259c4
c0018d43:	85 c0                	test   eax,eax
c0018d45:	75 05                	jne    c0018d4c <unlockStuff()+0x1b>
c0018d47:	e9 08 fc ff ff       	jmp    c0018954 <enableIRQs()>
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	c7 05 c4 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00259c4,0x0
c0018d59:	e8 4e ff ff ff       	call   c0018cac <schedule()>
c0018d5e:	83 c4 0c             	add    esp,0xc
c0018d61:	e9 ee fb ff ff       	jmp    c0018954 <enableIRQs()>

c0018d66 <Semaphore::tryAcquire()>:
c0018d66:	83 ec 0c             	sub    esp,0xc
c0018d69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d6d:	e8 18 fc ff ff       	call   c001898a <lockStuff()>
c0018d72:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018d75:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018d77:	7c 0b                	jl     c0018d84 <Semaphore::tryAcquire()+0x1e>
c0018d79:	e8 b3 ff ff ff       	call   c0018d31 <unlockStuff()>
c0018d7e:	31 c0                	xor    eax,eax
c0018d80:	83 c4 0c             	add    esp,0xc
c0018d83:	c3                   	ret    
c0018d84:	40                   	inc    eax
c0018d85:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018d88:	e8 a4 ff ff ff       	call   c0018d31 <unlockStuff()>
c0018d8d:	b0 01                	mov    al,0x1
c0018d8f:	83 c4 0c             	add    esp,0xc
c0018d92:	c3                   	ret    
c0018d93:	90                   	nop

c0018d94 <Semaphore::assertLocked(char const*)>:
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d9b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018d9f:	e8 e6 fb ff ff       	call   c001898a <lockStuff()>
c0018da4:	8b 02                	mov    eax,DWORD PTR [edx]
c0018da6:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018da9:	7c 05                	jl     c0018db0 <Semaphore::assertLocked(char const*)+0x1c>
c0018dab:	83 c4 0c             	add    esp,0xc
c0018dae:	eb 81                	jmp    c0018d31 <unlockStuff()>
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	51                   	push   ecx
c0018db4:	e8 bd cb ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018db9:	83 c4 10             	add    esp,0x10
c0018dbc:	83 c4 0c             	add    esp,0xc
c0018dbf:	e9 6d ff ff ff       	jmp    c0018d31 <unlockStuff()>

c0018dc4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	e8 82 fb ff ff       	call   c001894e <getIRQNestingLevel()>
c0018dcc:	52                   	push   edx
c0018dcd:	52                   	push   edx
c0018dce:	50                   	push   eax
c0018dcf:	68 cc 2d 02 c0       	push   0xc0022dcc
c0018dd4:	e8 6e 63 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018dd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dde:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018de2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018de5:	e8 c2 fe ff ff       	call   c0018cac <schedule()>
c0018dea:	e8 76 fb ff ff       	call   c0018965 <unlockScheduler()>
c0018def:	e8 5a fb ff ff       	call   c001894e <getIRQNestingLevel()>
c0018df4:	59                   	pop    ecx
c0018df5:	5a                   	pop    edx
c0018df6:	50                   	push   eax
c0018df7:	68 00 2e 02 c0       	push   0xc0022e00
c0018dfc:	e8 46 63 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018e01:	83 c4 1c             	add    esp,0x1c
c0018e04:	c3                   	ret    

c0018e05 <blockTask(TaskState)>:
c0018e05:	83 ec 0c             	sub    esp,0xc
c0018e08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e0c:	e8 52 fb ff ff       	call   c0018963 <lockScheduler()>
c0018e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018e19:	e8 8e fe ff ff       	call   c0018cac <schedule()>
c0018e1e:	83 c4 0c             	add    esp,0xc
c0018e21:	e9 3f fb ff ff       	jmp    c0018965 <unlockScheduler()>

c0018e26 <waitTask(int, int*, int)>:
c0018e26:	83 ec 18             	sub    esp,0x18
c0018e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e32:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e3e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018e41:	6a 07                	push   0x7
c0018e43:	e8 bd ff ff ff       	call   c0018e05 <blockTask(TaskState)>
c0018e48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e4d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018e50:	83 c4 10             	add    esp,0x10
c0018e53:	85 d2                	test   edx,edx
c0018e55:	74 0a                	je     c0018e61 <waitTask(int, int*, int)+0x3b>
c0018e57:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018e5a:	89 02                	mov    DWORD PTR [edx],eax
c0018e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e61:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018e64:	83 c4 0c             	add    esp,0xc
c0018e67:	c3                   	ret    

c0018e68 <nanoSleepUntil(unsigned long long)>:
c0018e68:	53                   	push   ebx
c0018e69:	83 ec 08             	sub    esp,0x8
c0018e6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018e70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e74:	3b 0d 10 4c 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024c10
c0018e7a:	89 d8                	mov    eax,ebx
c0018e7c:	1b 05 14 4c 02 c0    	sbb    eax,DWORD PTR ds:0xc0024c14
c0018e82:	73 05                	jae    c0018e89 <nanoSleepUntil(unsigned long long)+0x21>
c0018e84:	83 c4 08             	add    esp,0x8
c0018e87:	5b                   	pop    ebx
c0018e88:	c3                   	ret    
c0018e89:	e8 fc fa ff ff       	call   c001898a <lockStuff()>
c0018e8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018e96:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018e99:	51                   	push   ecx
c0018e9a:	51                   	push   ecx
c0018e9b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018ea1:	53                   	push   ebx
c0018ea2:	68 dc 59 02 c0       	push   0xc00259dc
c0018ea7:	e8 f6 6c 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018eac:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018eb3:	e8 4d ff ff ff       	call   c0018e05 <blockTask(TaskState)>
c0018eb8:	83 c4 18             	add    esp,0x18
c0018ebb:	5b                   	pop    ebx
c0018ebc:	e9 70 fe ff ff       	jmp    c0018d31 <unlockStuff()>

c0018ec1 <nanoSleep(unsigned long long)>:
c0018ec1:	a1 10 4c 02 c0       	mov    eax,ds:0xc0024c10
c0018ec6:	8b 15 14 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c14
c0018ecc:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018ed0:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018ed4:	eb 92                	jmp    c0018e68 <nanoSleepUntil(unsigned long long)>

c0018ed6 <sleep(unsigned long long)>:
c0018ed6:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018edb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018ee3:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018ee7:	01 ca                	add    edx,ecx
c0018ee9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ef1:	eb ce                	jmp    c0018ec1 <nanoSleep(unsigned long long)>
c0018ef3:	90                   	nop

c0018ef4 <Semaphore::acquire()>:
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018efb:	e8 8a fa ff ff       	call   c001898a <lockStuff()>
c0018f00:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018f03:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018f05:	7d 0c                	jge    c0018f13 <Semaphore::acquire()+0x1f>
c0018f07:	40                   	inc    eax
c0018f08:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018f0b:	83 c4 0c             	add    esp,0xc
c0018f0e:	e9 1e fe ff ff       	jmp    c0018d31 <unlockStuff()>
c0018f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f18:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018f1f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018f22:	85 c0                	test   eax,eax
c0018f24:	74 29                	je     c0018f4f <Semaphore::acquire()+0x5b>
c0018f26:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018f29:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018f2f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018f32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018f3d:	6a 05                	push   0x5
c0018f3f:	e8 c1 fe ff ff       	call   c0018e05 <blockTask(TaskState)>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	83 c4 0c             	add    esp,0xc
c0018f4a:	e9 e2 fd ff ff       	jmp    c0018d31 <unlockStuff()>
c0018f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f54:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018f57:	eb d9                	jmp    c0018f32 <Semaphore::acquire()+0x3e>

c0018f59 <taskReturned>:
c0018f59:	83 ec 18             	sub    esp,0x18
c0018f5c:	68 34 2e 02 c0       	push   0xc0022e34
c0018f61:	e8 10 ca ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0018f66:	83 c4 10             	add    esp,0x10
c0018f69:	83 ec 0c             	sub    esp,0xc
c0018f6c:	6a 02                	push   0x2
c0018f6e:	e8 92 fe ff ff       	call   c0018e05 <blockTask(TaskState)>
c0018f73:	e8 eb f9 ff ff       	call   c0018963 <lockScheduler()>
c0018f78:	e8 2f fd ff ff       	call   c0018cac <schedule()>
c0018f7d:	e8 e3 f9 ff ff       	call   c0018965 <unlockScheduler()>
c0018f82:	83 c4 10             	add    esp,0x10
c0018f85:	eb e2                	jmp    c0018f69 <taskReturned+0x10>

c0018f87 <unblockTask(ThreadControlBlock*)>:
c0018f87:	53                   	push   ebx
c0018f88:	83 ec 08             	sub    esp,0x8
c0018f8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f8f:	e8 cf f9 ff ff       	call   c0018963 <lockScheduler()>
c0018f94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f97:	85 c0                	test   eax,eax
c0018f99:	74 5b                	je     c0018ff6 <unblockTask(ThreadControlBlock*)+0x6f>
c0018f9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018f9e:	48                   	dec    eax
c0018f9f:	74 30                	je     c0018fd1 <unblockTask(ThreadControlBlock*)+0x4a>
c0018fa1:	83 ec 0c             	sub    esp,0xc
c0018fa4:	68 e8 59 02 c0       	push   0xc00259e8
c0018fa9:	e8 22 6b 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fae:	83 c4 10             	add    esp,0x10
c0018fb1:	85 c0                	test   eax,eax
c0018fb3:	75 16                	jne    c0018fcb <unblockTask(ThreadControlBlock*)+0x44>
c0018fb5:	eb 64                	jmp    c001901b <unblockTask(ThreadControlBlock*)+0x94>
c0018fb7:	52                   	push   edx
c0018fb8:	52                   	push   edx
c0018fb9:	50                   	push   eax
c0018fba:	68 e8 59 02 c0       	push   0xc00259e8
c0018fbf:	e8 1c 6e 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018fc4:	83 c4 10             	add    esp,0x10
c0018fc7:	85 c0                	test   eax,eax
c0018fc9:	74 50                	je     c001901b <unblockTask(ThreadControlBlock*)+0x94>
c0018fcb:	39 c3                	cmp    ebx,eax
c0018fcd:	75 e8                	jne    c0018fb7 <unblockTask(ThreadControlBlock*)+0x30>
c0018fcf:	eb 1c                	jmp    c0018fed <unblockTask(ThreadControlBlock*)+0x66>
c0018fd1:	83 ec 0c             	sub    esp,0xc
c0018fd4:	68 24 2f 02 c0       	push   0xc0022f24
c0018fd9:	e8 69 61 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018fde:	c7 04 24 b0 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eb0
c0018fe5:	e8 5d 61 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	83 c4 08             	add    esp,0x8
c0018ff0:	5b                   	pop    ebx
c0018ff1:	e9 6f f9 ff ff       	jmp    c0018965 <unlockScheduler()>
c0018ff6:	83 ec 0c             	sub    esp,0xc
c0018ff9:	68 68 2e 02 c0       	push   0xc0022e68
c0018ffe:	e8 44 61 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019003:	c7 04 24 b0 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eb0
c001900a:	e8 38 61 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	83 c4 08             	add    esp,0x8
c0019015:	5b                   	pop    ebx
c0019016:	e9 4a f9 ff ff       	jmp    c0018965 <unlockScheduler()>
c001901b:	50                   	push   eax
c001901c:	50                   	push   eax
c001901d:	53                   	push   ebx
c001901e:	68 e8 59 02 c0       	push   0xc00259e8
c0019023:	e8 7a 6b 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	83 c4 08             	add    esp,0x8
c001902e:	5b                   	pop    ebx
c001902f:	e9 31 f9 ff ff       	jmp    c0018965 <unlockScheduler()>

c0019034 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019034:	55                   	push   ebp
c0019035:	57                   	push   edi
c0019036:	56                   	push   esi
c0019037:	53                   	push   ebx
c0019038:	83 ec 1c             	sub    esp,0x1c
c001903b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001903f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019042:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019048:	85 ed                	test   ebp,ebp
c001904a:	7e 21                	jle    c001906d <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001904c:	31 f6                	xor    esi,esi
c001904e:	83 ec 0c             	sub    esp,0xc
c0019051:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019058:	46                   	inc    esi
c0019059:	57                   	push   edi
c001905a:	e8 8a 2f ff ff       	call   c000bfe9 <free>
c001905f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001906b:	7f e1                	jg     c001904e <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001906d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019077:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001907c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001907f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019082:	d3 c0                	rol    eax,cl
c0019084:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001908b:	21 c1                	and    ecx,eax
c001908d:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019094:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019097:	89 f7                	mov    edi,esi
c0019099:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00190a1:	0f 85 4f 01 00 00    	jne    c00191f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c00190a7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190ad:	85 c0                	test   eax,eax
c00190af:	0f 84 aa 00 00 00    	je     c001915f <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00190b5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00190b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00190bc:	31 c9                	xor    ecx,ecx
c00190be:	eb 10                	jmp    c00190d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00190c0:	41                   	inc    ecx
c00190c1:	83 f9 10             	cmp    ecx,0x10
c00190c4:	0f 84 95 00 00 00    	je     c001915f <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00190ca:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190d0:	31 d2                	xor    edx,edx
c00190d2:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00190d9:	d3 fa                	sar    edx,cl
c00190db:	83 e2 01             	and    edx,0x1
c00190de:	74 e0                	je     c00190c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190e0:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00190e3:	89 d5                	mov    ebp,edx
c00190e5:	c1 e5 05             	shl    ebp,0x5
c00190e8:	01 ea                	add    edx,ebp
c00190ea:	01 d0                	add    eax,edx
c00190ec:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00190f2:	83 fd 07             	cmp    ebp,0x7
c00190f5:	75 c9                	jne    c00190c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190f7:	05 40 02 00 00       	add    eax,0x240
c00190fc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00190ff:	83 fd ff             	cmp    ebp,0xffffffff
c0019102:	0f 8c 07 01 00 00    	jl     c001920f <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0019108:	0f 84 b4 01 00 00    	je     c00192c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c001910e:	85 ed                	test   ebp,ebp
c0019110:	0f 84 9b 01 00 00    	je     c00192b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0019116:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0019118:	75 a6                	jne    c00190c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001911a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019120:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019124:	01 d0                	add    eax,edx
c0019126:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001912a:	83 ec 0c             	sub    esp,0xc
c001912d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019133:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019136:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001913c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019143:	50                   	push   eax
c0019144:	e8 3e fe ff ff       	call   c0018f87 <unblockTask(ThreadControlBlock*)>
c0019149:	83 c4 10             	add    esp,0x10
c001914c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019150:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019153:	41                   	inc    ecx
c0019154:	89 f7                	mov    edi,esi
c0019156:	83 f9 10             	cmp    ecx,0x10
c0019159:	0f 85 6b ff ff ff    	jne    c00190ca <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c001915f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019165:	85 c0                	test   eax,eax
c0019167:	74 5d                	je     c00191c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019169:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001916f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019175:	74 4f                	je     c00191c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019177:	83 ec 0c             	sub    esp,0xc
c001917a:	68 e8 59 02 c0       	push   0xc00259e8
c001917f:	e8 4c 69 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019184:	c7 04 24 e8 59 02 c0 	mov    DWORD PTR [esp],0xc00259e8
c001918b:	89 c7                	mov    edi,eax
c001918d:	e8 46 69 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019192:	83 c4 10             	add    esp,0x10
c0019195:	84 c0                	test   al,al
c0019197:	0f 84 e2 00 00 00    	je     c001927f <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c001919d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00191a0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00191a6:	85 d2                	test   edx,edx
c00191a8:	74 0f                	je     c00191b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c00191aa:	83 ec 0c             	sub    esp,0xc
c00191ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00191af:	52                   	push   edx
c00191b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00191b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00191c3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00191c6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00191cc:	85 db                	test   ebx,ebx
c00191ce:	74 16                	je     c00191e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	53                   	push   ebx
c00191d4:	e8 b3 54 ff ff       	call   c000e68c <VAS::~VAS()>
c00191d9:	5a                   	pop    edx
c00191da:	59                   	pop    ecx
c00191db:	6a 10                	push   0x10
c00191dd:	53                   	push   ebx
c00191de:	e8 3e 5e ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	83 ec 0c             	sub    esp,0xc
c00191e9:	68 7d 2c 02 c0       	push   0xc0022c7d
c00191ee:	e8 54 5f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00191f3:	83 c4 10             	add    esp,0x10
c00191f6:	50                   	push   eax
c00191f7:	50                   	push   eax
c00191f8:	68 3b 07 00 00       	push   0x73b
c00191fd:	68 8b 2c 02 c0       	push   0xc0022c8b
c0019202:	e8 40 5f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019207:	83 c4 2c             	add    esp,0x2c
c001920a:	5b                   	pop    ebx
c001920b:	5e                   	pop    esi
c001920c:	5f                   	pop    edi
c001920d:	5d                   	pop    ebp
c001920e:	c3                   	ret    
c001920f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019213:	83 ec 0c             	sub    esp,0xc
c0019216:	68 68 2f 02 c0       	push   0xc0022f68
c001921b:	e8 56 c7 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c0019220:	83 c4 10             	add    esp,0x10
c0019223:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019226:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001922a:	89 f7                	mov    edi,esi
c001922c:	e9 8f fe ff ff       	jmp    c00190c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019231:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019237:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001923d:	75 1c                	jne    c001925b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001923f:	83 ec 0c             	sub    esp,0xc
c0019242:	68 d0 2f 02 c0       	push   0xc0022fd0
c0019247:	e8 fb 5e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001924c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019253:	e8 ad fb ff ff       	call   c0018e05 <blockTask(TaskState)>
c0019258:	83 c4 10             	add    esp,0x10
c001925b:	55                   	push   ebp
c001925c:	55                   	push   ebp
c001925d:	56                   	push   esi
c001925e:	68 e8 59 02 c0       	push   0xc00259e8
c0019263:	e8 3a 69 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019268:	c7 04 24 e8 59 02 c0 	mov    DWORD PTR [esp],0xc00259e8
c001926f:	e8 5c 68 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019274:	83 c4 10             	add    esp,0x10
c0019277:	39 f8                	cmp    eax,edi
c0019279:	0f 84 1e ff ff ff    	je     c001919d <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c001927f:	83 ec 0c             	sub    esp,0xc
c0019282:	68 e8 59 02 c0       	push   0xc00259e8
c0019287:	e8 44 68 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001928c:	89 c6                	mov    esi,eax
c001928e:	c7 04 24 e8 59 02 c0 	mov    DWORD PTR [esp],0xc00259e8
c0019295:	e8 5a 68 00 00       	call   c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	39 f3                	cmp    ebx,esi
c001929f:	74 ba                	je     c001925b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00192a1:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00192a4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192a7:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00192ad:	75 ac                	jne    c001925b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00192af:	eb 80                	jmp    c0019231 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c00192b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192b5:	83 ec 0c             	sub    esp,0xc
c00192b8:	68 9c 2f 02 c0       	push   0xc0022f9c
c00192bd:	e9 59 ff ff ff       	jmp    c001921b <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00192c2:	8b 36                	mov    esi,DWORD PTR [esi]
c00192c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192c8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00192cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192ce:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00192d4:	01 d7                	add    edi,edx
c00192d6:	89 f8                	mov    eax,edi
c00192d8:	e9 49 fe ff ff       	jmp    c0019126 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00192dd <cleanerTaskFunction(void*)>:
c00192dd:	53                   	push   ebx
c00192de:	83 ec 08             	sub    esp,0x8
c00192e1:	e8 7f f6 ff ff       	call   c0018965 <unlockScheduler()>
c00192e6:	e8 78 f6 ff ff       	call   c0018963 <lockScheduler()>
c00192eb:	80 3d ac 59 02 c0 00 	cmp    BYTE PTR ds:0xc00259ac,0x0
c00192f2:	0f 85 8e 00 00 00    	jne    c0019386 <cleanerTaskFunction(void*)+0xa9>
c00192f8:	83 ec 0c             	sub    esp,0xc
c00192fb:	6a 02                	push   0x2
c00192fd:	e8 c2 fa ff ff       	call   c0018dc4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	c6 05 ac 59 02 c0 00 	mov    BYTE PTR ds:0xc00259ac,0x0
c001930c:	e8 79 f6 ff ff       	call   c001898a <lockStuff()>
c0019311:	e8 4d f6 ff ff       	call   c0018963 <lockScheduler()>
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	68 d0 59 02 c0       	push   0xc00259d0
c001931e:	e8 b5 67 00 00       	call   c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	84 c0                	test   al,al
c0019328:	75 40                	jne    c001936a <cleanerTaskFunction(void*)+0x8d>
c001932a:	83 ec 0c             	sub    esp,0xc
c001932d:	68 d0 59 02 c0       	push   0xc00259d0
c0019332:	e8 99 67 00 00       	call   c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019337:	89 c3                	mov    ebx,eax
c0019339:	c7 04 24 d0 59 02 c0 	mov    DWORD PTR [esp],0xc00259d0
c0019340:	e8 af 67 00 00       	call   c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019345:	c7 04 24 a1 2c 02 c0 	mov    DWORD PTR [esp],0xc0022ca1
c001934c:	e8 f6 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019351:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019354:	e8 db fc ff ff       	call   c0019034 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019359:	c7 04 24 ba 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cba
c0019360:	e8 e2 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	eb ac                	jmp    c0019316 <cleanerTaskFunction(void*)+0x39>
c001936a:	e8 f6 f5 ff ff       	call   c0018965 <unlockScheduler()>
c001936f:	e8 bd f9 ff ff       	call   c0018d31 <unlockStuff()>
c0019374:	e8 ea f5 ff ff       	call   c0018963 <lockScheduler()>
c0019379:	80 3d ac 59 02 c0 00 	cmp    BYTE PTR ds:0xc00259ac,0x0
c0019380:	0f 84 72 ff ff ff    	je     c00192f8 <cleanerTaskFunction(void*)+0x1b>
c0019386:	e8 da f5 ff ff       	call   c0018965 <unlockScheduler()>
c001938b:	e9 75 ff ff ff       	jmp    c0019305 <cleanerTaskFunction(void*)+0x28>

c0019390 <terminateTask(int)>:
c0019390:	83 ec 14             	sub    esp,0x14
c0019393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019398:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001939b:	83 c0 0c             	add    eax,0xc
c001939e:	50                   	push   eax
c001939f:	68 f8 2f 02 c0       	push   0xc0022ff8
c00193a4:	e8 9e 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00193a9:	e8 dc f5 ff ff       	call   c001898a <lockStuff()>
c00193ae:	e8 b0 f5 ff ff       	call   c0018963 <lockScheduler()>
c00193b3:	c7 04 24 cd 2c 02 c0 	mov    DWORD PTR [esp],0xc0022ccd
c00193ba:	e8 88 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00193bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00193c8:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00193cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193d0:	59                   	pop    ecx
c00193d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00193d4:	5a                   	pop    edx
c00193d5:	50                   	push   eax
c00193d6:	68 d0 59 02 c0       	push   0xc00259d0
c00193db:	e8 c2 67 00 00       	call   c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193e5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00193ec:	c7 04 24 e7 2c 02 c0 	mov    DWORD PTR [esp],0xc0022ce7
c00193f3:	e8 4f 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c00193f8:	8b 0d a8 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259a8
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	85 c9                	test   ecx,ecx
c0019403:	74 5b                	je     c0019460 <terminateTask(int)+0xd0>
c0019405:	83 ec 0c             	sub    esp,0xc
c0019408:	68 01 2d 02 c0       	push   0xc0022d01
c001940d:	e8 35 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019412:	58                   	pop    eax
c0019413:	8b 15 a8 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a8
c0019419:	52                   	push   edx
c001941a:	c6 05 ac 59 02 c0 01 	mov    BYTE PTR ds:0xc00259ac,0x1
c0019421:	e8 61 fb ff ff       	call   c0018f87 <unblockTask(ThreadControlBlock*)>
c0019426:	c7 04 24 1b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d1b
c001942d:	e8 15 5d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	e8 2b f5 ff ff       	call   c0018965 <unlockScheduler()>
c001943a:	e8 f2 f8 ff ff       	call   c0018d31 <unlockStuff()>
c001943f:	83 ec 0c             	sub    esp,0xc
c0019442:	68 53 2d 02 c0       	push   0xc0022d53
c0019447:	e8 fb 5c ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	e8 0f f5 ff ff       	call   c0018963 <lockScheduler()>
c0019454:	e8 53 f8 ff ff       	call   c0018cac <schedule()>
c0019459:	e8 07 f5 ff ff       	call   c0018965 <unlockScheduler()>
c001945e:	eb ef                	jmp    c001944f <terminateTask(int)+0xbf>
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	68 35 2d 02 c0       	push   0xc0022d35
c0019468:	e8 da 5c ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001946d:	83 c4 10             	add    esp,0x10
c0019470:	eb c3                	jmp    c0019435 <terminateTask(int)+0xa5>

c0019472 <Thr::terminateFromIRQ(int)>:
c0019472:	83 ec 18             	sub    esp,0x18
c0019475:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019479:	50                   	push   eax
c001947a:	e8 11 ff ff ff       	call   c0019390 <terminateTask(int)>
c001947f:	90                   	nop

c0019480 <Semaphore::release()>:
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019487:	e8 fe f4 ff ff       	call   c001898a <lockStuff()>
c001948c:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001948f:	85 c0                	test   eax,eax
c0019491:	74 1a                	je     c00194ad <Semaphore::release()+0x2d>
c0019493:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c001949c:	50                   	push   eax
c001949d:	e8 e5 fa ff ff       	call   c0018f87 <unblockTask(ThreadControlBlock*)>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	83 c4 0c             	add    esp,0xc
c00194a8:	e9 84 f8 ff ff       	jmp    c0018d31 <unlockStuff()>
c00194ad:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00194b0:	48                   	dec    eax
c00194b1:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00194b4:	83 c4 0c             	add    esp,0xc
c00194b7:	e9 75 f8 ff ff       	jmp    c0018d31 <unlockStuff()>

c00194bc <__static_initialization_and_destruction_0(int, int)>:
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00194c4:	0f 85 88 00 00 00    	jne    c0019552 <__static_initialization_and_destruction_0(int, int)+0x96>
c00194ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00194d2:	75 7e                	jne    c0019552 <__static_initialization_and_destruction_0(int, int)+0x96>
c00194d4:	83 ec 0c             	sub    esp,0xc
c00194d7:	68 e8 59 02 c0       	push   0xc00259e8
c00194dc:	e8 a7 68 00 00       	call   c001fd88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	83 ec 04             	sub    esp,0x4
c00194e7:	68 bc 39 02 c0       	push   0xc00239bc
c00194ec:	68 e8 59 02 c0       	push   0xc00259e8
c00194f1:	68 48 fd 01 c0       	push   0xc001fd48
c00194f6:	e8 a2 5a ff ff       	call   c000ef9d <__cxa_atexit>
c00194fb:	83 c4 10             	add    esp,0x10
c00194fe:	83 ec 0c             	sub    esp,0xc
c0019501:	68 dc 59 02 c0       	push   0xc00259dc
c0019506:	e8 7d 68 00 00       	call   c001fd88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	83 ec 04             	sub    esp,0x4
c0019511:	68 bc 39 02 c0       	push   0xc00239bc
c0019516:	68 dc 59 02 c0       	push   0xc00259dc
c001951b:	68 48 fd 01 c0       	push   0xc001fd48
c0019520:	e8 78 5a ff ff       	call   c000ef9d <__cxa_atexit>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	83 ec 0c             	sub    esp,0xc
c001952b:	68 d0 59 02 c0       	push   0xc00259d0
c0019530:	e8 53 68 00 00       	call   c001fd88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019535:	83 c4 10             	add    esp,0x10
c0019538:	83 ec 04             	sub    esp,0x4
c001953b:	68 bc 39 02 c0       	push   0xc00239bc
c0019540:	68 d0 59 02 c0       	push   0xc00259d0
c0019545:	68 48 fd 01 c0       	push   0xc001fd48
c001954a:	e8 4e 5a ff ff       	call   c000ef9d <__cxa_atexit>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	90                   	nop
c0019553:	83 c4 0c             	add    esp,0xc
c0019556:	c3                   	ret    

c0019557 <_GLOBAL__sub_I_kernelProcess>:
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	83 ec 08             	sub    esp,0x8
c001955d:	68 ff ff 00 00       	push   0xffff
c0019562:	6a 01                	push   0x1
c0019564:	e8 53 ff ff ff       	call   c00194bc <__static_initialization_and_destruction_0(int, int)>
c0019569:	83 c4 10             	add    esp,0x10
c001956c:	83 c4 0c             	add    esp,0xc
c001956f:	c3                   	ret    

c0019570 <Vm::vm8086EntryPoint(void*)>:
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	e8 ed f3 ff ff       	call   c0018965 <unlockScheduler()>
c0019578:	fb                   	sti    
c0019579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001957e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019582:	52                   	push   edx
c0019583:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019587:	52                   	push   edx
c0019588:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001958c:	52                   	push   edx
c001958d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019591:	50                   	push   eax
c0019592:	e8 d0 6c fe ff       	call   c0000267 <goToVM86>
c0019597:	83 c4 1c             	add    esp,0x1c
c001959a:	c3                   	ret    

c001959b <Vm::inbv(unsigned short)>:
c001959b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001959f:	ec                   	in     al,dx
c00195a0:	c3                   	ret    

c00195a1 <Vm::outbv(unsigned short, unsigned char)>:
c00195a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195a9:	ee                   	out    dx,al
c00195aa:	c3                   	ret    

c00195ab <Vm::realToLinear(unsigned short, unsigned short)>:
c00195ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195b5:	c1 e0 04             	shl    eax,0x4
c00195b8:	01 d0                	add    eax,edx
c00195ba:	c3                   	ret    

c00195bb <Vm::getSegment(unsigned int)>:
c00195bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195bf:	c1 e8 10             	shr    eax,0x10
c00195c2:	c3                   	ret    

c00195c3 <Vm::getOffset(unsigned int)>:
c00195c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c7:	c3                   	ret    

c00195c8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00195c8:	55                   	push   ebp
c00195c9:	57                   	push   edi
c00195ca:	56                   	push   esi
c00195cb:	53                   	push   ebx
c00195cc:	83 ec 2c             	sub    esp,0x2c
c00195cf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00195d3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00195d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195db:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00195df:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00195e3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00195e7:	e8 77 f3 ff ff       	call   c0018963 <lockScheduler()>
c00195ec:	68 80 00 00 00       	push   0x80
c00195f1:	6a 00                	push   0x0
c00195f3:	68 70 95 01 c0       	push   0xc0019570
c00195f8:	55                   	push   ebp
c00195f9:	e8 9a f4 ff ff       	call   c0018a98 <Process::createThread(void (*)(void*), void*, int)>
c00195fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019602:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0019606:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001960a:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001960e:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0019612:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019616:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001961d:	e8 f0 59 ff ff       	call   c000f012 <operator new(unsigned long)>
c0019622:	83 c4 0c             	add    esp,0xc
c0019625:	55                   	push   ebp
c0019626:	89 c3                	mov    ebx,eax
c0019628:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001962c:	50                   	push   eax
c001962d:	e8 4c 60 ff ff       	call   c000f67e <File::File(char const*, Process*)>
c0019632:	83 c4 0c             	add    esp,0xc
c0019635:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019639:	50                   	push   eax
c001963a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001963e:	50                   	push   eax
c001963f:	53                   	push   ebx
c0019640:	e8 49 63 ff ff       	call   c000f98e <File::stat(unsigned long long*, bool*)>
c0019645:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	84 d2                	test   dl,dl
c001964e:	74 1c                	je     c001966c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	68 17 30 02 c0       	push   0xc0023017
c0019658:	e8 19 c3 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001965d:	e8 03 f3 ff ff       	call   c0018965 <unlockScheduler()>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	31 d2                	xor    edx,edx
c0019667:	e9 81 00 00 00       	jmp    c00196ed <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001966c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019670:	51                   	push   ecx
c0019671:	51                   	push   ecx
c0019672:	6a 01                	push   0x1
c0019674:	53                   	push   ebx
c0019675:	e8 68 60 ff ff       	call   c000f6e2 <File::open(FileOpenMode)>
c001967a:	83 c4 10             	add    esp,0x10
c001967d:	85 c0                	test   eax,eax
c001967f:	74 1b                	je     c001969c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019681:	83 ec 0c             	sub    esp,0xc
c0019684:	68 30 30 02 c0       	push   0xc0023030
c0019689:	e8 e8 c2 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001968e:	e8 d2 f2 ff ff       	call   c0018965 <unlockScheduler()>
c0019693:	83 c4 10             	add    esp,0x10
c0019696:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001969a:	eb 51                	jmp    c00196ed <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	0f b7 ff             	movzx  edi,di
c00196a2:	6a 07                	push   0x7
c00196a4:	68 00 01 00 00       	push   0x100
c00196a9:	6a 00                	push   0x0
c00196ab:	6a 00                	push   0x0
c00196ad:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00196b3:	e8 32 54 ff ff       	call   c000eaea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196b8:	83 c4 18             	add    esp,0x18
c00196bb:	0f b7 f6             	movzx  esi,si
c00196be:	57                   	push   edi
c00196bf:	56                   	push   esi
c00196c0:	e8 e6 fe ff ff       	call   c00195ab <Vm::realToLinear(unsigned short, unsigned short)>
c00196c5:	5a                   	pop    edx
c00196c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00196cc:	51                   	push   ecx
c00196cd:	50                   	push   eax
c00196ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196d6:	53                   	push   ebx
c00196d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196da:	83 c4 14             	add    esp,0x14
c00196dd:	53                   	push   ebx
c00196de:	e8 5d 60 ff ff       	call   c000f740 <File::close()>
c00196e3:	e8 7d f2 ff ff       	call   c0018965 <unlockScheduler()>
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	b2 01                	mov    dl,0x1
c00196ed:	83 c4 2c             	add    esp,0x2c
c00196f0:	88 d0                	mov    al,dl
c00196f2:	5b                   	pop    ebx
c00196f3:	5e                   	pop    esi
c00196f4:	5f                   	pop    edi
c00196f5:	5d                   	pop    ebp
c00196f6:	c3                   	ret    

c00196f7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00196f7:	57                   	push   edi
c00196f8:	56                   	push   esi
c00196f9:	53                   	push   ebx
c00196fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019702:	83 e8 06             	sub    eax,0x6
c0019705:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019709:	0f b7 c0             	movzx  eax,ax
c001970c:	50                   	push   eax
c001970d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019712:	50                   	push   eax
c0019713:	e8 93 fe ff ff       	call   c00195ab <Vm::realToLinear(unsigned short, unsigned short)>
c0019718:	5a                   	pop    edx
c0019719:	5e                   	pop    esi
c001971a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001971d:	8d 56 fa             	lea    edx,[esi-0x6]
c0019720:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019726:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019729:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001972c:	83 c2 02             	add    edx,0x2
c001972f:	66 89 10             	mov    WORD PTR [eax],dx
c0019732:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019735:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019739:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001973c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019740:	89 d6                	mov    esi,edx
c0019742:	66 81 e6 ff fd       	and    si,0xfdff
c0019747:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001974d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019751:	74 07                	je     c001975a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019753:	89 d6                	mov    esi,edx
c0019755:	66 81 ce 00 02       	or     si,0x200
c001975a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001975e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019763:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019767:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001976f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019772:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001977a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001977d:	5b                   	pop    ebx
c001977e:	5e                   	pop    esi
c001977f:	5f                   	pop    edi
c0019780:	c3                   	ret    

c0019781 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019781:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019786:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001978b:	c1 e0 04             	shl    eax,0x4
c001978e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019791:	c3                   	ret    

c0019792 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019792:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019797:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001979c:	c1 e0 04             	shl    eax,0x4
c001979f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00197a3:	c3                   	ret    

c00197a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00197a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197ae:	c1 e0 04             	shl    eax,0x4
c00197b1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00197b4:	c3                   	ret    

c00197b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00197b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197bf:	c1 e0 04             	shl    eax,0x4
c00197c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197c6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00197c9:	c3                   	ret    

c00197ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00197ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197d4:	c1 e0 04             	shl    eax,0x4
c00197d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197db:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00197df:	c3                   	ret    

c00197e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00197e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197ea:	c1 e0 04             	shl    eax,0x4
c00197ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197f1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00197f4:	c3                   	ret    

c00197f5 <Vm::faultHandler(regs*)>:
c00197f5:	55                   	push   ebp
c00197f6:	57                   	push   edi
c00197f7:	56                   	push   esi
c00197f8:	53                   	push   ebx
c00197f9:	83 ec 1c             	sub    esp,0x1c
c00197fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019800:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019804:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019807:	52                   	push   edx
c0019808:	0f b7 f0             	movzx  esi,ax
c001980b:	0f b7 c0             	movzx  eax,ax
c001980e:	50                   	push   eax
c001980f:	e8 97 fd ff ff       	call   c00195ab <Vm::realToLinear(unsigned short, unsigned short)>
c0019814:	5a                   	pop    edx
c0019815:	89 c7                	mov    edi,eax
c0019817:	59                   	pop    ecx
c0019818:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001981b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001981f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019822:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001982b:	0f b7 c5             	movzx  eax,bp
c001982e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019832:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019836:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001983a:	e8 6c fd ff ff       	call   c00195ab <Vm::realToLinear(unsigned short, unsigned short)>
c001983f:	5a                   	pop    edx
c0019840:	59                   	pop    ecx
c0019841:	b1 06                	mov    cl,0x6
c0019843:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019848:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001984d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019850:	80 fa 9d             	cmp    dl,0x9d
c0019853:	0f 84 1d 02 00 00    	je     c0019a76 <Vm::faultHandler(regs*)+0x281>
c0019859:	0f 87 8e 00 00 00    	ja     c00198ed <Vm::faultHandler(regs*)+0xf8>
c001985f:	80 fa 66             	cmp    dl,0x66
c0019862:	0f 84 89 01 00 00    	je     c00199f1 <Vm::faultHandler(regs*)+0x1fc>
c0019868:	77 44                	ja     c00198ae <Vm::faultHandler(regs*)+0xb9>
c001986a:	80 fa 36             	cmp    dl,0x36
c001986d:	0f 84 74 01 00 00    	je     c00199e7 <Vm::faultHandler(regs*)+0x1f2>
c0019873:	77 1a                	ja     c001988f <Vm::faultHandler(regs*)+0x9a>
c0019875:	80 fa 26             	cmp    dl,0x26
c0019878:	0f 84 4b 01 00 00    	je     c00199c9 <Vm::faultHandler(regs*)+0x1d4>
c001987e:	80 fa 2e             	cmp    dl,0x2e
c0019881:	0f 85 4a 05 00 00    	jne    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c0019887:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001988a:	31 c9                	xor    ecx,ecx
c001988c:	47                   	inc    edi
c001988d:	eb be                	jmp    c001984d <Vm::faultHandler(regs*)+0x58>
c001988f:	80 fa 64             	cmp    dl,0x64
c0019892:	0f 84 3b 01 00 00    	je     c00199d3 <Vm::faultHandler(regs*)+0x1de>
c0019898:	0f 87 3f 01 00 00    	ja     c00199dd <Vm::faultHandler(regs*)+0x1e8>
c001989e:	80 fa 3e             	cmp    dl,0x3e
c00198a1:	0f 85 2a 05 00 00    	jne    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c00198a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198aa:	b1 01                	mov    cl,0x1
c00198ac:	eb de                	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00198ae:	80 fa 6d             	cmp    dl,0x6d
c00198b1:	0f 84 bf 02 00 00    	je     c0019b76 <Vm::faultHandler(regs*)+0x381>
c00198b7:	77 17                	ja     c00198d0 <Vm::faultHandler(regs*)+0xdb>
c00198b9:	80 fa 67             	cmp    dl,0x67
c00198bc:	0f 84 3c 01 00 00    	je     c00199fe <Vm::faultHandler(regs*)+0x209>
c00198c2:	80 fa 6c             	cmp    dl,0x6c
c00198c5:	0f 84 5d 02 00 00    	je     c0019b28 <Vm::faultHandler(regs*)+0x333>
c00198cb:	e9 01 05 00 00       	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c00198d0:	80 fa 6f             	cmp    dl,0x6f
c00198d3:	0f 84 8b 03 00 00    	je     c0019c64 <Vm::faultHandler(regs*)+0x46f>
c00198d9:	0f 82 0f 03 00 00    	jb     c0019bee <Vm::faultHandler(regs*)+0x3f9>
c00198df:	80 fa 9c             	cmp    dl,0x9c
c00198e2:	0f 84 23 01 00 00    	je     c0019a0b <Vm::faultHandler(regs*)+0x216>
c00198e8:	e9 e4 04 00 00       	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c00198ed:	80 fa ec             	cmp    dl,0xec
c00198f0:	0f 84 7f 04 00 00    	je     c0019d75 <Vm::faultHandler(regs*)+0x580>
c00198f6:	77 7b                	ja     c0019973 <Vm::faultHandler(regs*)+0x17e>
c00198f8:	80 fa e4             	cmp    dl,0xe4
c00198fb:	0f 84 fe 03 00 00    	je     c0019cff <Vm::faultHandler(regs*)+0x50a>
c0019901:	77 53                	ja     c0019956 <Vm::faultHandler(regs*)+0x161>
c0019903:	80 fa cd             	cmp    dl,0xcd
c0019906:	0f 84 cd 01 00 00    	je     c0019ad9 <Vm::faultHandler(regs*)+0x2e4>
c001990c:	80 fa cf             	cmp    dl,0xcf
c001990f:	0f 85 bc 04 00 00    	jne    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c0019915:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019918:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001991b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001991f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019922:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019926:	81 ca 00 02 02 00    	or     edx,0x20200
c001992c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001992f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019933:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019939:	66 c1 e8 09          	shr    ax,0x9
c001993d:	83 e0 01             	and    eax,0x1
c0019940:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019943:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019946:	83 c0 06             	add    eax,0x6
c0019949:	25 ff ff 00 00       	and    eax,0xffff
c001994e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019951:	e9 77 04 00 00       	jmp    c0019dcd <Vm::faultHandler(regs*)+0x5d8>
c0019956:	80 fa e6             	cmp    dl,0xe6
c0019959:	0f 84 ea 03 00 00    	je     c0019d49 <Vm::faultHandler(regs*)+0x554>
c001995f:	0f 82 b6 03 00 00    	jb     c0019d1b <Vm::faultHandler(regs*)+0x526>
c0019965:	80 fa e7             	cmp    dl,0xe7
c0019968:	0f 84 f2 03 00 00    	je     c0019d60 <Vm::faultHandler(regs*)+0x56b>
c001996e:	e9 5e 04 00 00       	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c0019973:	80 fa ef             	cmp    dl,0xef
c0019976:	0f 84 3c 04 00 00    	je     c0019db8 <Vm::faultHandler(regs*)+0x5c3>
c001997c:	77 28                	ja     c00199a6 <Vm::faultHandler(regs*)+0x1b1>
c001997e:	80 fa ed             	cmp    dl,0xed
c0019981:	0f 84 0a 04 00 00    	je     c0019d91 <Vm::faultHandler(regs*)+0x59c>
c0019987:	80 fa ee             	cmp    dl,0xee
c001998a:	0f 85 41 04 00 00    	jne    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c0019990:	50                   	push   eax
c0019991:	50                   	push   eax
c0019992:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019996:	50                   	push   eax
c0019997:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001999b:	50                   	push   eax
c001999c:	e8 00 fc ff ff       	call   c00195a1 <Vm::outbv(unsigned short, unsigned char)>
c00199a1:	e9 0a 04 00 00       	jmp    c0019db0 <Vm::faultHandler(regs*)+0x5bb>
c00199a6:	80 fa fa             	cmp    dl,0xfa
c00199a9:	0f 84 5d 01 00 00    	je     c0019b0c <Vm::faultHandler(regs*)+0x317>
c00199af:	80 fa fb             	cmp    dl,0xfb
c00199b2:	0f 84 62 01 00 00    	je     c0019b1a <Vm::faultHandler(regs*)+0x325>
c00199b8:	80 fa f3             	cmp    dl,0xf3
c00199bb:	0f 85 10 04 00 00    	jne    c0019dd1 <Vm::faultHandler(regs*)+0x5dc>
c00199c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c4:	e9 c3 fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199cc:	b1 02                	mov    cl,0x2
c00199ce:	e9 b9 fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199d6:	b1 03                	mov    cl,0x3
c00199d8:	e9 af fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199e0:	b1 04                	mov    cl,0x4
c00199e2:	e9 a5 fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199ea:	b1 05                	mov    cl,0x5
c00199ec:	e9 9b fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199f4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00199f9:	e9 8e fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c00199fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a01:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019a06:	e9 81 fe ff ff       	jmp    c001988c <Vm::faultHandler(regs*)+0x97>
c0019a0b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019a0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019a12:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a17:	74 30                	je     c0019a49 <Vm::faultHandler(regs*)+0x254>
c0019a19:	83 e9 04             	sub    ecx,0x4
c0019a1c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a22:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a28:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a2b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a34:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a38:	0f 84 8c 03 00 00    	je     c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019a3e:	80 ce 02             	or     dh,0x2
c0019a41:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a44:	e9 81 03 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019a49:	83 e9 02             	sub    ecx,0x2
c0019a4c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a52:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a55:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a5f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a63:	74 05                	je     c0019a6a <Vm::faultHandler(regs*)+0x275>
c0019a65:	80 ce 02             	or     dh,0x2
c0019a68:	eb 03                	jmp    c0019a6d <Vm::faultHandler(regs*)+0x278>
c0019a6a:	80 e6 fd             	and    dh,0xfd
c0019a6d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a71:	e9 54 03 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019a76:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a7b:	74 2a                	je     c0019aa7 <Vm::faultHandler(regs*)+0x2b2>
c0019a7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a7f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a85:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a8b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a96:	c1 e8 09             	shr    eax,0x9
c0019a99:	83 e0 01             	and    eax,0x1
c0019a9c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a9f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019aa2:	83 c0 04             	add    eax,0x4
c0019aa5:	eb 25                	jmp    c0019acc <Vm::faultHandler(regs*)+0x2d7>
c0019aa7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019aaa:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ab0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019ab3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019ab6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019abc:	66 c1 e8 09          	shr    ax,0x9
c0019ac0:	83 e0 01             	and    eax,0x1
c0019ac3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019ac6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ac9:	83 c0 02             	add    eax,0x2
c0019acc:	25 ff ff 00 00       	and    eax,0xffff
c0019ad1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019ad4:	e9 f1 02 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019ad9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019add:	3c ff                	cmp    al,0xff
c0019adf:	75 10                	jne    c0019af1 <Vm::faultHandler(regs*)+0x2fc>
c0019ae1:	83 ec 0c             	sub    esp,0xc
c0019ae4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019ae7:	e8 86 f9 ff ff       	call   c0019472 <Thr::terminateFromIRQ(int)>
c0019aec:	e9 c2 02 00 00       	jmp    c0019db3 <Vm::faultHandler(regs*)+0x5be>
c0019af1:	83 ec 0c             	sub    esp,0xc
c0019af4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019afc:	57                   	push   edi
c0019afd:	50                   	push   eax
c0019afe:	53                   	push   ebx
c0019aff:	e8 f3 fb ff ff       	call   c00196f7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019b04:	83 c4 20             	add    esp,0x20
c0019b07:	e9 c1 02 00 00       	jmp    c0019dcd <Vm::faultHandler(regs*)+0x5d8>
c0019b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b11:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019b15:	e9 b0 02 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019b1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b1f:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019b23:	e9 a2 02 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019b28:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b2d:	74 0d                	je     c0019b3c <Vm::faultHandler(regs*)+0x347>
c0019b2f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019b36:	0f 87 e9 02 00 00    	ja     c0019e25 <Vm::faultHandler(regs*)+0x630>
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019b42:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b46:	50                   	push   eax
c0019b47:	e8 4f fa ff ff       	call   c001959b <Vm::inbv(unsigned short)>
c0019b4c:	83 c4 0c             	add    esp,0xc
c0019b4f:	0f b6 c0             	movzx  eax,al
c0019b52:	50                   	push   eax
c0019b53:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019b57:	0f b7 c9             	movzx  ecx,cx
c0019b5a:	50                   	push   eax
c0019b5b:	51                   	push   ecx
c0019b5c:	e8 54 fc ff ff       	call   c00197b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019b61:	83 c4 10             	add    esp,0x10
c0019b64:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b67:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b6b:	74 03                	je     c0019b70 <Vm::faultHandler(regs*)+0x37b>
c0019b6d:	48                   	dec    eax
c0019b6e:	eb 01                	jmp    c0019b71 <Vm::faultHandler(regs*)+0x37c>
c0019b70:	40                   	inc    eax
c0019b71:	0f b7 c0             	movzx  eax,ax
c0019b74:	eb 70                	jmp    c0019be6 <Vm::faultHandler(regs*)+0x3f1>
c0019b76:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b79:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019b7c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b81:	74 0c                	je     c0019b8f <Vm::faultHandler(regs*)+0x39a>
c0019b83:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b89:	0f 87 96 02 00 00    	ja     c0019e25 <Vm::faultHandler(regs*)+0x630>
c0019b8f:	0f b7 c9             	movzx  ecx,cx
c0019b92:	0f b7 f6             	movzx  esi,si
c0019b95:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b9d:	74 20                	je     c0019bbf <Vm::faultHandler(regs*)+0x3ca>
c0019b9f:	ed                   	in     eax,dx
c0019ba0:	55                   	push   ebp
c0019ba1:	50                   	push   eax
c0019ba2:	51                   	push   ecx
c0019ba3:	56                   	push   esi
c0019ba4:	e8 37 fc ff ff       	call   c00197e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019ba9:	83 c4 10             	add    esp,0x10
c0019bac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019baf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019bb3:	74 05                	je     c0019bba <Vm::faultHandler(regs*)+0x3c5>
c0019bb5:	83 e8 04             	sub    eax,0x4
c0019bb8:	eb 27                	jmp    c0019be1 <Vm::faultHandler(regs*)+0x3ec>
c0019bba:	83 c0 04             	add    eax,0x4
c0019bbd:	eb 22                	jmp    c0019be1 <Vm::faultHandler(regs*)+0x3ec>
c0019bbf:	66 ed                	in     ax,dx
c0019bc1:	0f b7 c0             	movzx  eax,ax
c0019bc4:	57                   	push   edi
c0019bc5:	50                   	push   eax
c0019bc6:	51                   	push   ecx
c0019bc7:	56                   	push   esi
c0019bc8:	e8 fd fb ff ff       	call   c00197ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019bcd:	83 c4 10             	add    esp,0x10
c0019bd0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019bd3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019bd7:	74 05                	je     c0019bde <Vm::faultHandler(regs*)+0x3e9>
c0019bd9:	83 e8 02             	sub    eax,0x2
c0019bdc:	eb 03                	jmp    c0019be1 <Vm::faultHandler(regs*)+0x3ec>
c0019bde:	83 c0 02             	add    eax,0x2
c0019be1:	25 ff ff 00 00       	and    eax,0xffff
c0019be6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019be9:	e9 dc 01 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019bee:	49                   	dec    ecx
c0019bef:	80 f9 05             	cmp    cl,0x5
c0019bf2:	77 24                	ja     c0019c18 <Vm::faultHandler(regs*)+0x423>
c0019bf4:	0f b6 c9             	movzx  ecx,cl
c0019bf7:	ff 24 8d 78 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf88]
c0019bfe:	0f b7 f5             	movzx  esi,bp
c0019c01:	eb 15                	jmp    c0019c18 <Vm::faultHandler(regs*)+0x423>
c0019c03:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019c07:	eb 0f                	jmp    c0019c18 <Vm::faultHandler(regs*)+0x423>
c0019c09:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019c0d:	eb 09                	jmp    c0019c18 <Vm::faultHandler(regs*)+0x423>
c0019c0f:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019c13:	eb 03                	jmp    c0019c18 <Vm::faultHandler(regs*)+0x423>
c0019c15:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019c18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c1b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c20:	74 0b                	je     c0019c2d <Vm::faultHandler(regs*)+0x438>
c0019c22:	3d ff ff 00 00       	cmp    eax,0xffff
c0019c27:	0f 87 f8 01 00 00    	ja     c0019e25 <Vm::faultHandler(regs*)+0x630>
c0019c2d:	52                   	push   edx
c0019c2e:	52                   	push   edx
c0019c2f:	0f b7 c0             	movzx  eax,ax
c0019c32:	50                   	push   eax
c0019c33:	56                   	push   esi
c0019c34:	e8 48 fb ff ff       	call   c0019781 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019c39:	59                   	pop    ecx
c0019c3a:	5e                   	pop    esi
c0019c3b:	0f b6 c0             	movzx  eax,al
c0019c3e:	50                   	push   eax
c0019c3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c43:	50                   	push   eax
c0019c44:	e8 58 f9 ff ff       	call   c00195a1 <Vm::outbv(unsigned short, unsigned char)>
c0019c49:	83 c4 10             	add    esp,0x10
c0019c4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c4f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c53:	74 03                	je     c0019c58 <Vm::faultHandler(regs*)+0x463>
c0019c55:	48                   	dec    eax
c0019c56:	eb 01                	jmp    c0019c59 <Vm::faultHandler(regs*)+0x464>
c0019c58:	40                   	inc    eax
c0019c59:	0f b7 c0             	movzx  eax,ax
c0019c5c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019c5f:	e9 66 01 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019c64:	49                   	dec    ecx
c0019c65:	80 f9 05             	cmp    cl,0x5
c0019c68:	77 1f                	ja     c0019c89 <Vm::faultHandler(regs*)+0x494>
c0019c6a:	0f b6 c9             	movzx  ecx,cl
c0019c6d:	ff 24 8d 90 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf70]
c0019c74:	89 ee                	mov    esi,ebp
c0019c76:	eb 11                	jmp    c0019c89 <Vm::faultHandler(regs*)+0x494>
c0019c78:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019c7b:	eb 0c                	jmp    c0019c89 <Vm::faultHandler(regs*)+0x494>
c0019c7d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c80:	eb 07                	jmp    c0019c89 <Vm::faultHandler(regs*)+0x494>
c0019c82:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019c85:	eb 02                	jmp    c0019c89 <Vm::faultHandler(regs*)+0x494>
c0019c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019c89:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019c8c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c91:	74 0c                	je     c0019c9f <Vm::faultHandler(regs*)+0x4aa>
c0019c93:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c99:	0f 87 86 01 00 00    	ja     c0019e25 <Vm::faultHandler(regs*)+0x630>
c0019c9f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019ca2:	0f b7 d6             	movzx  edx,si
c0019ca5:	81 e7 00 04 00 00    	and    edi,0x400
c0019cab:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cae:	0f b7 c1             	movzx  eax,cx
c0019cb1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cb6:	74 1d                	je     c0019cd5 <Vm::faultHandler(regs*)+0x4e0>
c0019cb8:	55                   	push   ebp
c0019cb9:	55                   	push   ebp
c0019cba:	50                   	push   eax
c0019cbb:	52                   	push   edx
c0019cbc:	e8 e3 fa ff ff       	call   c00197a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	89 f2                	mov    edx,esi
c0019cc6:	ef                   	out    dx,eax
c0019cc7:	85 ff                	test   edi,edi
c0019cc9:	74 05                	je     c0019cd0 <Vm::faultHandler(regs*)+0x4db>
c0019ccb:	83 e9 04             	sub    ecx,0x4
c0019cce:	eb 21                	jmp    c0019cf1 <Vm::faultHandler(regs*)+0x4fc>
c0019cd0:	83 c1 04             	add    ecx,0x4
c0019cd3:	eb 1c                	jmp    c0019cf1 <Vm::faultHandler(regs*)+0x4fc>
c0019cd5:	55                   	push   ebp
c0019cd6:	55                   	push   ebp
c0019cd7:	50                   	push   eax
c0019cd8:	52                   	push   edx
c0019cd9:	e8 b4 fa ff ff       	call   c0019792 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019cde:	83 c4 10             	add    esp,0x10
c0019ce1:	89 f2                	mov    edx,esi
c0019ce3:	66 ef                	out    dx,ax
c0019ce5:	85 ff                	test   edi,edi
c0019ce7:	74 05                	je     c0019cee <Vm::faultHandler(regs*)+0x4f9>
c0019ce9:	83 e9 02             	sub    ecx,0x2
c0019cec:	eb 03                	jmp    c0019cf1 <Vm::faultHandler(regs*)+0x4fc>
c0019cee:	83 c1 02             	add    ecx,0x2
c0019cf1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019cf7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019cfa:	e9 cb 00 00 00       	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019cff:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d06:	83 ec 0c             	sub    esp,0xc
c0019d09:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d0d:	50                   	push   eax
c0019d0e:	e8 88 f8 ff ff       	call   c001959b <Vm::inbv(unsigned short)>
c0019d13:	0f b6 c0             	movzx  eax,al
c0019d16:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d19:	eb 3f                	jmp    c0019d5a <Vm::faultHandler(regs*)+0x565>
c0019d1b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d20:	74 07                	je     c0019d29 <Vm::faultHandler(regs*)+0x534>
c0019d22:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d26:	ed                   	in     eax,dx
c0019d27:	eb 14                	jmp    c0019d3d <Vm::faultHandler(regs*)+0x548>
c0019d29:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019d2c:	66 31 c9             	xor    cx,cx
c0019d2f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019d32:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d36:	66 ed                	in     ax,dx
c0019d38:	0f b7 c0             	movzx  eax,ax
c0019d3b:	09 c8                	or     eax,ecx
c0019d3d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d44:	e9 84 00 00 00       	jmp    c0019dcd <Vm::faultHandler(regs*)+0x5d8>
c0019d49:	52                   	push   edx
c0019d4a:	52                   	push   edx
c0019d4b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019d4f:	50                   	push   eax
c0019d50:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d54:	50                   	push   eax
c0019d55:	e8 47 f8 ff ff       	call   c00195a1 <Vm::outbv(unsigned short, unsigned char)>
c0019d5a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d5e:	eb 53                	jmp    c0019db3 <Vm::faultHandler(regs*)+0x5be>
c0019d60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d63:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d67:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d6c:	74 03                	je     c0019d71 <Vm::faultHandler(regs*)+0x57c>
c0019d6e:	ef                   	out    dx,eax
c0019d6f:	eb cf                	jmp    c0019d40 <Vm::faultHandler(regs*)+0x54b>
c0019d71:	66 ef                	out    dx,ax
c0019d73:	eb cb                	jmp    c0019d40 <Vm::faultHandler(regs*)+0x54b>
c0019d75:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d7c:	83 ec 0c             	sub    esp,0xc
c0019d7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d83:	50                   	push   eax
c0019d84:	e8 12 f8 ff ff       	call   c001959b <Vm::inbv(unsigned short)>
c0019d89:	0f b6 c0             	movzx  eax,al
c0019d8c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d8f:	eb 1f                	jmp    c0019db0 <Vm::faultHandler(regs*)+0x5bb>
c0019d91:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019d94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d99:	74 03                	je     c0019d9e <Vm::faultHandler(regs*)+0x5a9>
c0019d9b:	ed                   	in     eax,dx
c0019d9c:	eb 0d                	jmp    c0019dab <Vm::faultHandler(regs*)+0x5b6>
c0019d9e:	66 ed                	in     ax,dx
c0019da0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019da3:	66 31 d2             	xor    dx,dx
c0019da6:	0f b7 c0             	movzx  eax,ax
c0019da9:	09 d0                	or     eax,edx
c0019dab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019dae:	eb 1a                	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019db0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019db3:	83 c4 10             	add    esp,0x10
c0019db6:	eb 15                	jmp    c0019dcd <Vm::faultHandler(regs*)+0x5d8>
c0019db8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019dbb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019dbe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dc3:	74 03                	je     c0019dc8 <Vm::faultHandler(regs*)+0x5d3>
c0019dc5:	ef                   	out    dx,eax
c0019dc6:	eb 02                	jmp    c0019dca <Vm::faultHandler(regs*)+0x5d5>
c0019dc8:	66 ef                	out    dx,ax
c0019dca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dcd:	b0 01                	mov    al,0x1
c0019dcf:	eb 56                	jmp    c0019e27 <Vm::faultHandler(regs*)+0x632>
c0019dd1:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019dd5:	50                   	push   eax
c0019dd6:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019dda:	50                   	push   eax
c0019ddb:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ddf:	50                   	push   eax
c0019de0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019de4:	50                   	push   eax
c0019de5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019de9:	50                   	push   eax
c0019dea:	52                   	push   edx
c0019deb:	52                   	push   edx
c0019dec:	68 49 30 02 c0       	push   0xc0023049
c0019df1:	e8 51 53 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c0019df6:	83 c4 20             	add    esp,0x20
c0019df9:	83 ec 0c             	sub    esp,0xc
c0019dfc:	6a 60                	push   0x60
c0019dfe:	e8 98 f7 ff ff       	call   c001959b <Vm::inbv(unsigned short)>
c0019e03:	83 c4 10             	add    esp,0x10
c0019e06:	3c 1c                	cmp    al,0x1c
c0019e08:	74 04                	je     c0019e0e <Vm::faultHandler(regs*)+0x619>
c0019e0a:	3c 5a                	cmp    al,0x5a
c0019e0c:	75 eb                	jne    c0019df9 <Vm::faultHandler(regs*)+0x604>
c0019e0e:	3c 1c                	cmp    al,0x1c
c0019e10:	74 04                	je     c0019e16 <Vm::faultHandler(regs*)+0x621>
c0019e12:	3c 5a                	cmp    al,0x5a
c0019e14:	75 0f                	jne    c0019e25 <Vm::faultHandler(regs*)+0x630>
c0019e16:	83 ec 0c             	sub    esp,0xc
c0019e19:	6a 60                	push   0x60
c0019e1b:	e8 7b f7 ff ff       	call   c001959b <Vm::inbv(unsigned short)>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	eb e9                	jmp    c0019e0e <Vm::faultHandler(regs*)+0x619>
c0019e25:	31 c0                	xor    eax,eax
c0019e27:	83 c4 1c             	add    esp,0x1c
c0019e2a:	5b                   	pop    ebx
c0019e2b:	5e                   	pop    esi
c0019e2c:	5f                   	pop    edi
c0019e2d:	5d                   	pop    ebp
c0019e2e:	c3                   	ret    
c0019e2f:	90                   	nop

c0019e30 <FAT::getName()>:
c0019e30:	b8 a8 30 02 c0       	mov    eax,0xc00230a8
c0019e35:	c3                   	ret    

c0019e36 <FAT::tell(void*, unsigned long long*)>:
c0019e36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e3b:	75 06                	jne    c0019e43 <FAT::tell(void*, unsigned long long*)+0xd>
c0019e3d:	b8 04 00 00 00       	mov    eax,0x4
c0019e42:	c3                   	ret    
c0019e43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e48:	75 06                	jne    c0019e50 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019e4a:	b8 04 00 00 00       	mov    eax,0x4
c0019e4f:	c3                   	ret    
c0019e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e54:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019e57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019e5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e5e:	89 01                	mov    DWORD PTR [ecx],eax
c0019e60:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e63:	b8 00 00 00 00       	mov    eax,0x0
c0019e68:	c3                   	ret    
c0019e69:	90                   	nop

c0019e6a <FAT::stat(void*, unsigned long long*)>:
c0019e6a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e6f:	75 06                	jne    c0019e77 <FAT::stat(void*, unsigned long long*)+0xd>
c0019e71:	b8 04 00 00 00       	mov    eax,0x4
c0019e76:	c3                   	ret    
c0019e77:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e7c:	75 06                	jne    c0019e84 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019e7e:	b8 04 00 00 00       	mov    eax,0x4
c0019e83:	c3                   	ret    
c0019e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019e8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e92:	89 01                	mov    DWORD PTR [ecx],eax
c0019e94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e97:	b8 00 00 00 00       	mov    eax,0x0
c0019e9c:	c3                   	ret    
c0019e9d:	90                   	nop

c0019e9e <FAT::~FAT()>:
c0019e9e:	83 ec 0c             	sub    esp,0xc
c0019ea1:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c0019ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eaa:	89 10                	mov    DWORD PTR [eax],edx
c0019eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb0:	83 ec 0c             	sub    esp,0xc
c0019eb3:	50                   	push   eax
c0019eb4:	e8 bf 55 ff ff       	call   c000f478 <Filesystem::~Filesystem()>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	90                   	nop
c0019ebd:	83 c4 0c             	add    esp,0xc
c0019ec0:	c3                   	ret    
c0019ec1:	90                   	nop

c0019ec2 <FAT::~FAT()>:
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	83 ec 0c             	sub    esp,0xc
c0019ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ecc:	e8 cd ff ff ff       	call   c0019e9e <FAT::~FAT()>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	83 ec 08             	sub    esp,0x8
c0019ed7:	6a 08                	push   0x8
c0019ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019edd:	e8 3f 51 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0019ee2:	83 c4 10             	add    esp,0x10
c0019ee5:	83 c4 0c             	add    esp,0xc
c0019ee8:	c3                   	ret    
c0019ee9:	90                   	nop

c0019eea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019eea:	83 ec 1c             	sub    esp,0x1c
c0019eed:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019ef4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ef9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019efd:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c0019f04:	83 f8 ff             	cmp    eax,0xffffffff
c0019f07:	75 34                	jne    c0019f3d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019f09:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f0d:	88 c2                	mov    dl,al
c0019f0f:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c0019f14:	01 d0                	add    eax,edx
c0019f16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f1a:	8b 15 20 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a20
c0019f20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f24:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c0019f2b:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c0019f30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019f34:	89 14 85 c0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda540],edx
c0019f3b:	eb 17                	jmp    c0019f54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019f3d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f41:	88 c2                	mov    dl,al
c0019f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f47:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c0019f4e:	01 d0                	add    eax,edx
c0019f50:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f54:	83 ec 04             	sub    esp,0x4
c0019f57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f5f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019f63:	50                   	push   eax
c0019f64:	e8 64 cb fe ff       	call   c0006acd <f_getlabel>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f75:	75 07                	jne    c0019f7e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019f77:	b8 00 00 00 00       	mov    eax,0x0
c0019f7c:	eb 05                	jmp    c0019f83 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019f7e:	b8 01 00 00 00       	mov    eax,0x1
c0019f83:	83 c4 1c             	add    esp,0x1c
c0019f86:	c3                   	ret    
c0019f87:	90                   	nop

c0019f88 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019f88:	57                   	push   edi
c0019f89:	83 ec 58             	sub    esp,0x58
c0019f8c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019f94:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f98:	b8 00 00 00 00       	mov    eax,0x0
c0019f9d:	b9 0f 00 00 00       	mov    ecx,0xf
c0019fa2:	fc                   	cld    
c0019fa3:	89 d7                	mov    edi,edx
c0019fa5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019fa7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fab:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c0019fb2:	83 f8 ff             	cmp    eax,0xffffffff
c0019fb5:	75 34                	jne    c0019feb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019fb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fbb:	88 c2                	mov    dl,al
c0019fbd:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c0019fc2:	01 d0                	add    eax,edx
c0019fc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fc8:	8b 15 20 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a20
c0019fce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fd2:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c0019fd9:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c0019fde:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019fe2:	89 14 85 c0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda540],edx
c0019fe9:	eb 17                	jmp    c001a002 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019feb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fef:	88 c2                	mov    dl,al
c0019ff1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ff5:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c0019ffc:	01 d0                	add    eax,edx
c0019ffe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a002:	83 ec 08             	sub    esp,0x8
c001a005:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a009:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a00d:	50                   	push   eax
c001a00e:	e8 fd 67 fe ff       	call   c0000810 <strcat>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a01d:	50                   	push   eax
c001a01e:	e8 9e cc fe ff       	call   c0006cc1 <f_setlabel>
c001a023:	83 c4 10             	add    esp,0x10
c001a026:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a02a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a02f:	75 07                	jne    c001a038 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a031:	b8 00 00 00 00       	mov    eax,0x0
c001a036:	eb 05                	jmp    c001a03d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a038:	b8 01 00 00 00       	mov    eax,0x1
c001a03d:	83 c4 58             	add    esp,0x58
c001a040:	5f                   	pop    edi
c001a041:	c3                   	ret    

c001a042 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a042:	83 ec 2c             	sub    esp,0x2c
c001a045:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a04d:	83 ec 08             	sub    esp,0x8
c001a050:	68 cc 30 02 c0       	push   0xc00230cc
c001a055:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a059:	e8 4c 67 fe ff       	call   c00007aa <strcmp>
c001a05e:	83 c4 10             	add    esp,0x10
c001a061:	85 c0                	test   eax,eax
c001a063:	0f 94 c0             	sete   al
c001a066:	84 c0                	test   al,al
c001a068:	74 0d                	je     c001a077 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a06a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a072:	e9 a6 00 00 00       	jmp    c001a11d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a077:	83 ec 08             	sub    esp,0x8
c001a07a:	68 be 30 02 c0       	push   0xc00230be
c001a07f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a083:	e8 22 67 fe ff       	call   c00007aa <strcmp>
c001a088:	83 c4 10             	add    esp,0x10
c001a08b:	85 c0                	test   eax,eax
c001a08d:	0f 94 c0             	sete   al
c001a090:	84 c0                	test   al,al
c001a092:	74 0a                	je     c001a09e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a094:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a09c:	eb 7f                	jmp    c001a11d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a09e:	83 ec 08             	sub    esp,0x8
c001a0a1:	68 c4 30 02 c0       	push   0xc00230c4
c001a0a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0aa:	e8 fb 66 fe ff       	call   c00007aa <strcmp>
c001a0af:	83 c4 10             	add    esp,0x10
c001a0b2:	85 c0                	test   eax,eax
c001a0b4:	0f 94 c0             	sete   al
c001a0b7:	84 c0                	test   al,al
c001a0b9:	74 0a                	je     c001a0c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a0bb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a0c3:	eb 58                	jmp    c001a11d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0c5:	83 ec 08             	sub    esp,0x8
c001a0c8:	68 4c 04 02 c0       	push   0xc002044c
c001a0cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0d1:	e8 d4 66 fe ff       	call   c00007aa <strcmp>
c001a0d6:	83 c4 10             	add    esp,0x10
c001a0d9:	85 c0                	test   eax,eax
c001a0db:	0f 94 c0             	sete   al
c001a0de:	84 c0                	test   al,al
c001a0e0:	74 0a                	je     c001a0ec <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a0e2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a0ea:	eb 31                	jmp    c001a11d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0ec:	83 ec 08             	sub    esp,0x8
c001a0ef:	68 ca 30 02 c0       	push   0xc00230ca
c001a0f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0f8:	e8 ad 66 fe ff       	call   c00007aa <strcmp>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	85 c0                	test   eax,eax
c001a102:	0f 94 c0             	sete   al
c001a105:	84 c0                	test   al,al
c001a107:	74 0a                	je     c001a113 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a109:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a111:	eb 0a                	jmp    c001a11d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a113:	b8 08 00 00 00       	mov    eax,0x8
c001a118:	e9 04 01 00 00       	jmp    c001a221 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a11d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a124:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a129:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a12d:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c001a134:	83 f8 ff             	cmp    eax,0xffffffff
c001a137:	75 34                	jne    c001a16d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a139:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a13d:	88 c2                	mov    dl,al
c001a13f:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a144:	01 d0                	add    eax,edx
c001a146:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a14a:	8b 15 20 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a20
c001a150:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a154:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c001a15b:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a160:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a164:	89 14 85 c0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda540],edx
c001a16b:	eb 17                	jmp    c001a184 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a16d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a171:	88 c2                	mov    dl,al
c001a173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a177:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c001a17e:	01 d0                	add    eax,edx
c001a180:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a188:	88 04 24             	mov    BYTE PTR [esp],al
c001a18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a18f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a193:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a19b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a1a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a1a8:	83 ec 0c             	sub    esp,0xc
c001a1ab:	68 00 20 00 00       	push   0x2000
c001a1b0:	e8 24 1e ff ff       	call   c000bfd9 <malloc>
c001a1b5:	83 c4 10             	add    esp,0x10
c001a1b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1bc:	68 00 20 00 00       	push   0x2000
c001a1c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a1c9:	50                   	push   eax
c001a1ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a1ce:	50                   	push   eax
c001a1cf:	e8 38 cf fe ff       	call   c000710c <f_mkfs>
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1e0:	75 07                	jne    c001a1e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a1e2:	b8 00 00 00 00       	mov    eax,0x0
c001a1e7:	eb 38                	jmp    c001a221 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1e9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a1ee:	75 17                	jne    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a1f0:	83 ec 0c             	sub    esp,0xc
c001a1f3:	68 fc 30 02 c0       	push   0xc00230fc
c001a1f8:	e8 4a 4f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001a1fd:	83 c4 10             	add    esp,0x10
c001a200:	b8 09 00 00 00       	mov    eax,0x9
c001a205:	eb 1a                	jmp    c001a221 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a20b:	83 ec 08             	sub    esp,0x8
c001a20e:	50                   	push   eax
c001a20f:	68 d0 30 02 c0       	push   0xc00230d0
c001a214:	e8 2e 4f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	b8 01 00 00 00       	mov    eax,0x1
c001a221:	83 c4 2c             	add    esp,0x2c
c001a224:	c3                   	ret    
c001a225:	90                   	nop

c001a226 <FAT::tryMount(LogicalDisk*, int)>:
c001a226:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a22c:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a231:	83 f8 14             	cmp    eax,0x14
c001a234:	75 17                	jne    c001a24d <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a236:	83 ec 0c             	sub    esp,0xc
c001a239:	68 e2 30 02 c0       	push   0xc00230e2
c001a23e:	e8 33 b7 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	b0 00                	mov    al,0x0
c001a248:	e9 d7 01 00 00       	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a24d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a254:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a25a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a260:	3d 00 02 00 00       	cmp    eax,0x200
c001a265:	74 07                	je     c001a26e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a267:	b0 00                	mov    al,0x0
c001a269:	e9 b6 01 00 00       	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a26e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a276:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a27d:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c001a284:	83 f8 ff             	cmp    eax,0xffffffff
c001a287:	74 07                	je     c001a290 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a289:	b0 01                	mov    al,0x1
c001a28b:	e9 94 01 00 00       	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a290:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a29a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a2a2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a2a9:	88 c2                	mov    dl,al
c001a2ab:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a2b0:	01 d0                	add    eax,edx
c001a2b2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a2b9:	8b 15 20 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a20
c001a2bf:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a2c6:	89 14 85 40 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5c0],edx
c001a2cd:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a2d2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a2d9:	89 14 85 c0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda540],edx
c001a2e0:	83 ec 0c             	sub    esp,0xc
c001a2e3:	68 54 02 00 00       	push   0x254
c001a2e8:	e8 ec 1c ff ff       	call   c000bfd9 <malloc>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a2f7:	83 ec 04             	sub    esp,0x4
c001a2fa:	6a 00                	push   0x0
c001a2fc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a303:	50                   	push   eax
c001a304:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a30b:	e8 eb a9 fe ff       	call   c0004cfb <f_mount>
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a31a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a322:	74 19                	je     c001a33d <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a324:	83 ec 0c             	sub    esp,0xc
c001a327:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a32e:	e8 c6 1c ff ff       	call   c000bff9 <rfree>
c001a333:	83 c4 10             	add    esp,0x10
c001a336:	b0 00                	mov    al,0x0
c001a338:	e9 e7 00 00 00       	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a33d:	83 ec 04             	sub    esp,0x4
c001a340:	68 00 01 00 00       	push   0x100
c001a345:	6a 00                	push   0x0
c001a347:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a34e:	50                   	push   eax
c001a34f:	e8 66 63 fe ff       	call   c00006ba <memset>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	83 ec 08             	sub    esp,0x8
c001a35a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a361:	50                   	push   eax
c001a362:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a369:	50                   	push   eax
c001a36a:	e8 a1 64 fe ff       	call   c0000810 <strcat>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	83 ec 08             	sub    esp,0x8
c001a375:	68 f0 30 02 c0       	push   0xc00230f0
c001a37a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a381:	50                   	push   eax
c001a382:	e8 89 64 fe ff       	call   c0000810 <strcat>
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	83 ec 04             	sub    esp,0x4
c001a38d:	6a 01                	push   0x1
c001a38f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a396:	50                   	push   eax
c001a397:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a39b:	50                   	push   eax
c001a39c:	e8 bc a9 fe ff       	call   c0004d5d <f_open>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3ab:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a3b2:	85 c0                	test   eax,eax
c001a3b4:	74 0a                	je     c001a3c0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a3b6:	78 2d                	js     c001a3e5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a3b8:	83 e8 04             	sub    eax,0x4
c001a3bb:	83 f8 01             	cmp    eax,0x1
c001a3be:	77 25                	ja     c001a3e5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a3c0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3cf:	50                   	push   eax
c001a3d0:	e8 da b4 fe ff       	call   c00058af <f_close>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	90                   	nop
c001a3d9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a3e1:	74 3a                	je     c001a41d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a3e3:	eb 2d                	jmp    c001a412 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a3e5:	83 ec 0c             	sub    esp,0xc
c001a3e8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3ef:	e8 05 1c ff ff       	call   c000bff9 <rfree>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	83 ec 04             	sub    esp,0x4
c001a3fa:	6a 00                	push   0x0
c001a3fc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a403:	50                   	push   eax
c001a404:	6a 00                	push   0x0
c001a406:	e8 f0 a8 fe ff       	call   c0004cfb <f_mount>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	b0 00                	mov    al,0x0
c001a410:	eb 12                	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a412:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c001a417:	40                   	inc    eax
c001a418:	a3 20 5a 02 c0       	mov    ds:0xc0025a20,eax
c001a41d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a424:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a42a:	c3                   	ret    
c001a42b:	90                   	nop

c001a42c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a42c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a432:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a43a:	74 0a                	je     c001a446 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a43c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a444:	75 0a                	jne    c001a450 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a446:	b8 04 00 00 00       	mov    eax,0x4
c001a44b:	e9 dd 00 00 00       	jmp    c001a52d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a450:	83 ec 08             	sub    esp,0x8
c001a453:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a45a:	50                   	push   eax
c001a45b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a462:	e8 00 ba fe ff       	call   c0005e67 <f_readdir>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a471:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a477:	83 ec 0c             	sub    esp,0xc
c001a47a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a481:	83 c0 1a             	add    eax,0x1a
c001a484:	50                   	push   eax
c001a485:	e8 4d 62 fe ff       	call   c00006d7 <strlen>
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	ba 00 00 00 00       	mov    edx,0x0
c001a492:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a496:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a49a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a4a1:	25 ff 00 00 00       	and    eax,0xff
c001a4a6:	83 e0 10             	and    eax,0x10
c001a4a9:	74 07                	je     c001a4b2 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a4ab:	b8 02 00 00 00       	mov    eax,0x2
c001a4b0:	eb 05                	jmp    c001a4b7 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a4b2:	b8 01 00 00 00       	mov    eax,0x1
c001a4b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4bb:	83 ec 08             	sub    esp,0x8
c001a4be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a4c5:	83 c0 1a             	add    eax,0x1a
c001a4c8:	50                   	push   eax
c001a4c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4cd:	83 c0 10             	add    eax,0x10
c001a4d0:	50                   	push   eax
c001a4d1:	e8 83 62 fe ff       	call   c0000759 <strcpy>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	83 ec 04             	sub    esp,0x4
c001a4dc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a4e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4e7:	50                   	push   eax
c001a4e8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a4ef:	e8 90 61 fe ff       	call   c0000684 <memcpy>
c001a4f4:	83 c4 10             	add    esp,0x10
c001a4f7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a4fe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a504:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a50b:	84 c0                	test   al,al
c001a50d:	75 07                	jne    c001a516 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a50f:	b8 07 00 00 00       	mov    eax,0x7
c001a514:	eb 17                	jmp    c001a52d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a516:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a51d:	85 c0                	test   eax,eax
c001a51f:	75 07                	jne    c001a528 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a521:	b8 00 00 00 00       	mov    eax,0x0
c001a526:	eb 05                	jmp    c001a52d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a528:	b8 01 00 00 00       	mov    eax,0x1
c001a52d:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a533:	c3                   	ret    

c001a534 <FAT::read(void*, unsigned long, void*, int*)>:
c001a534:	83 ec 1c             	sub    esp,0x1c
c001a537:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a53c:	74 07                	je     c001a545 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a53e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a543:	75 07                	jne    c001a54c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a545:	b8 04 00 00 00       	mov    eax,0x4
c001a54a:	eb 3d                	jmp    c001a589 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a54c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a550:	50                   	push   eax
c001a551:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a559:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a55d:	e8 37 ac fe ff       	call   c0005199 <f_read>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a56d:	89 c2                	mov    edx,eax
c001a56f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a573:	89 10                	mov    DWORD PTR [eax],edx
c001a575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a579:	85 c0                	test   eax,eax
c001a57b:	75 07                	jne    c001a584 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a57d:	b8 00 00 00 00       	mov    eax,0x0
c001a582:	eb 05                	jmp    c001a589 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a584:	b8 01 00 00 00       	mov    eax,0x1
c001a589:	83 c4 1c             	add    esp,0x1c
c001a58c:	c3                   	ret    
c001a58d:	90                   	nop

c001a58e <FAT::write(void*, unsigned long, void*, int*)>:
c001a58e:	83 ec 1c             	sub    esp,0x1c
c001a591:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a596:	74 07                	je     c001a59f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a598:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a59d:	75 07                	jne    c001a5a6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a59f:	b8 04 00 00 00       	mov    eax,0x4
c001a5a4:	eb 3d                	jmp    c001a5e3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5aa:	50                   	push   eax
c001a5ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5b7:	e8 5d ae fe ff       	call   c0005419 <f_write>
c001a5bc:	83 c4 10             	add    esp,0x10
c001a5bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c7:	89 c2                	mov    edx,eax
c001a5c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5cd:	89 10                	mov    DWORD PTR [eax],edx
c001a5cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5d3:	85 c0                	test   eax,eax
c001a5d5:	75 07                	jne    c001a5de <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a5d7:	b8 00 00 00 00       	mov    eax,0x0
c001a5dc:	eb 05                	jmp    c001a5e3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5de:	b8 01 00 00 00       	mov    eax,0x1
c001a5e3:	83 c4 1c             	add    esp,0x1c
c001a5e6:	c3                   	ret    
c001a5e7:	90                   	nop

c001a5e8 <FAT::close(void*)>:
c001a5e8:	83 ec 1c             	sub    esp,0x1c
c001a5eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a5f0:	75 07                	jne    c001a5f9 <FAT::close(void*)+0x11>
c001a5f2:	b8 04 00 00 00       	mov    eax,0x4
c001a5f7:	eb 36                	jmp    c001a62f <FAT::close(void*)+0x47>
c001a5f9:	83 ec 0c             	sub    esp,0xc
c001a5fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a600:	e8 aa b2 fe ff       	call   c00058af <f_close>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a60c:	83 ec 0c             	sub    esp,0xc
c001a60f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a613:	e8 d1 19 ff ff       	call   c000bfe9 <free>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a61f:	85 c0                	test   eax,eax
c001a621:	75 07                	jne    c001a62a <FAT::close(void*)+0x42>
c001a623:	b8 00 00 00 00       	mov    eax,0x0
c001a628:	eb 05                	jmp    c001a62f <FAT::close(void*)+0x47>
c001a62a:	b8 01 00 00 00       	mov    eax,0x1
c001a62f:	83 c4 1c             	add    esp,0x1c
c001a632:	c3                   	ret    
c001a633:	90                   	nop

c001a634 <FAT::closeDir(void*)>:
c001a634:	83 ec 1c             	sub    esp,0x1c
c001a637:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a63c:	75 07                	jne    c001a645 <FAT::closeDir(void*)+0x11>
c001a63e:	b8 04 00 00 00       	mov    eax,0x4
c001a643:	eb 36                	jmp    c001a67b <FAT::closeDir(void*)+0x47>
c001a645:	83 ec 0c             	sub    esp,0xc
c001a648:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a64c:	e8 f4 b7 fe ff       	call   c0005e45 <f_closedir>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a658:	83 ec 0c             	sub    esp,0xc
c001a65b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a65f:	e8 85 19 ff ff       	call   c000bfe9 <free>
c001a664:	83 c4 10             	add    esp,0x10
c001a667:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a66b:	85 c0                	test   eax,eax
c001a66d:	75 07                	jne    c001a676 <FAT::closeDir(void*)+0x42>
c001a66f:	b8 00 00 00 00       	mov    eax,0x0
c001a674:	eb 05                	jmp    c001a67b <FAT::closeDir(void*)+0x47>
c001a676:	b8 01 00 00 00       	mov    eax,0x1
c001a67b:	83 c4 1c             	add    esp,0x1c
c001a67e:	c3                   	ret    
c001a67f:	90                   	nop

c001a680 <FAT::seek(void*, unsigned long long)>:
c001a680:	83 ec 2c             	sub    esp,0x2c
c001a683:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a68b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a693:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a698:	75 07                	jne    c001a6a1 <FAT::seek(void*, unsigned long long)+0x21>
c001a69a:	b8 04 00 00 00       	mov    eax,0x4
c001a69f:	eb 2f                	jmp    c001a6d0 <FAT::seek(void*, unsigned long long)+0x50>
c001a6a1:	83 ec 04             	sub    esp,0x4
c001a6a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a6b0:	e8 29 b2 fe ff       	call   c00058de <f_lseek>
c001a6b5:	83 c4 10             	add    esp,0x10
c001a6b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6c0:	85 c0                	test   eax,eax
c001a6c2:	75 07                	jne    c001a6cb <FAT::seek(void*, unsigned long long)+0x4b>
c001a6c4:	b8 00 00 00 00       	mov    eax,0x0
c001a6c9:	eb 05                	jmp    c001a6d0 <FAT::seek(void*, unsigned long long)+0x50>
c001a6cb:	b8 01 00 00 00       	mov    eax,0x1
c001a6d0:	83 c4 2c             	add    esp,0x2c
c001a6d3:	c3                   	ret    

c001a6d4 <fatWrapperReadDisk>:
c001a6d4:	83 ec 1c             	sub    esp,0x1c
c001a6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6ee:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6f2:	25 ff 00 00 00       	and    eax,0xff
c001a6f7:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c001a6fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a709:	52                   	push   edx
c001a70a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a70e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a712:	50                   	push   eax
c001a713:	e8 8a 80 ff ff       	call   c00127a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a718:	83 c4 20             	add    esp,0x20
c001a71b:	83 c4 1c             	add    esp,0x1c
c001a71e:	c3                   	ret    

c001a71f <fatWrapperWriteDisk>:
c001a71f:	83 ec 1c             	sub    esp,0x1c
c001a722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a726:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a72a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a72e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a731:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a735:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a739:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a73d:	25 ff 00 00 00       	and    eax,0xff
c001a742:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c001a749:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a74d:	83 ec 0c             	sub    esp,0xc
c001a750:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a754:	52                   	push   edx
c001a755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a75d:	50                   	push   eax
c001a75e:	e8 ab 80 ff ff       	call   c001280e <LogicalDisk::write(unsigned long long, int, void*)>
c001a763:	83 c4 20             	add    esp,0x20
c001a766:	83 c4 1c             	add    esp,0x1c
c001a769:	c3                   	ret    

c001a76a <fatWrapperIoctl>:
c001a76a:	53                   	push   ebx
c001a76b:	83 ec 28             	sub    esp,0x28
c001a76e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a772:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a776:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a77a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a77e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a783:	75 35                	jne    c001a7ba <fatWrapperIoctl+0x50>
c001a785:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a789:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a78d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a791:	25 ff 00 00 00       	and    eax,0xff
c001a796:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c001a79d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a7a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7ad:	66 89 02             	mov    WORD PTR [edx],ax
c001a7b0:	b8 00 00 00 00       	mov    eax,0x0
c001a7b5:	e9 bb 00 00 00       	jmp    c001a875 <fatWrapperIoctl+0x10b>
c001a7ba:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a7bf:	75 73                	jne    c001a834 <fatWrapperIoctl+0xca>
c001a7c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7c9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7cd:	25 ff 00 00 00       	and    eax,0xff
c001a7d2:	8b 04 85 a0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb460]
c001a7d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7df:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a7e5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a7eb:	89 c8                	mov    eax,ecx
c001a7ed:	89 da                	mov    edx,ebx
c001a7ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a7f3:	c1 e0 0a             	shl    eax,0xa
c001a7f6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7fa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a800:	8b 0c 8d a0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb460]
c001a807:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a80d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a813:	89 cb                	mov    ebx,ecx
c001a815:	c1 fb 1f             	sar    ebx,0x1f
c001a818:	53                   	push   ebx
c001a819:	51                   	push   ecx
c001a81a:	52                   	push   edx
c001a81b:	50                   	push   eax
c001a81c:	e8 db 4b 00 00       	call   c001f3fc <__udivdi3>
c001a821:	83 c4 10             	add    esp,0x10
c001a824:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a828:	89 01                	mov    DWORD PTR [ecx],eax
c001a82a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a82d:	b8 00 00 00 00       	mov    eax,0x0
c001a832:	eb 41                	jmp    c001a875 <fatWrapperIoctl+0x10b>
c001a834:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a839:	75 07                	jne    c001a842 <fatWrapperIoctl+0xd8>
c001a83b:	b8 00 00 00 00       	mov    eax,0x0
c001a840:	eb 33                	jmp    c001a875 <fatWrapperIoctl+0x10b>
c001a842:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a847:	75 19                	jne    c001a862 <fatWrapperIoctl+0xf8>
c001a849:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a84d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a855:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a85b:	b8 00 00 00 00       	mov    eax,0x0
c001a860:	eb 13                	jmp    c001a875 <fatWrapperIoctl+0x10b>
c001a862:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a867:	75 07                	jne    c001a870 <fatWrapperIoctl+0x106>
c001a869:	b8 00 00 00 00       	mov    eax,0x0
c001a86e:	eb 05                	jmp    c001a875 <fatWrapperIoctl+0x10b>
c001a870:	b8 04 00 00 00       	mov    eax,0x4
c001a875:	83 c4 28             	add    esp,0x28
c001a878:	5b                   	pop    ebx
c001a879:	c3                   	ret    

c001a87a <FAT::FAT()>:
c001a87a:	83 ec 1c             	sub    esp,0x1c
c001a87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a881:	83 ec 0c             	sub    esp,0xc
c001a884:	50                   	push   eax
c001a885:	e8 ca 4b ff ff       	call   c000f454 <Filesystem::Filesystem()>
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c001a892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a896:	89 10                	mov    DWORD PTR [eax],edx
c001a898:	c7 05 20 5a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025a20,0x0
c001a8a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8aa:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a8af:	7f 15                	jg     c001a8c6 <FAT::FAT()+0x4c>
c001a8b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8b5:	c7 04 85 40 5a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda5c0],0xffffffff
c001a8c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8c4:	eb e4                	jmp    c001a8aa <FAT::FAT()+0x30>
c001a8c6:	90                   	nop
c001a8c7:	83 c4 1c             	add    esp,0x1c
c001a8ca:	c3                   	ret    
c001a8cb:	90                   	nop

c001a8cc <FAT::fixFilepath(char*)>:
c001a8cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8d0:	8a 00                	mov    al,BYTE PTR [eax]
c001a8d2:	3c 40                	cmp    al,0x40
c001a8d4:	7e 2c                	jle    c001a902 <FAT::fixFilepath(char*)+0x36>
c001a8d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8da:	8a 00                	mov    al,BYTE PTR [eax]
c001a8dc:	83 e8 41             	sub    eax,0x41
c001a8df:	88 c2                	mov    dl,al
c001a8e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8e5:	88 10                	mov    BYTE PTR [eax],dl
c001a8e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8eb:	8a 00                	mov    al,BYTE PTR [eax]
c001a8ed:	0f be c0             	movsx  eax,al
c001a8f0:	8b 04 85 40 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5c0]
c001a8f7:	83 c0 30             	add    eax,0x30
c001a8fa:	88 c2                	mov    dl,al
c001a8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a900:	88 10                	mov    BYTE PTR [eax],dl
c001a902:	90                   	nop
c001a903:	c3                   	ret    

c001a904 <FAT::open(char const*, void**, FileOpenMode)>:
c001a904:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a90a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a912:	74 0a                	je     c001a91e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a914:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a91c:	75 0a                	jne    c001a928 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a91e:	b8 04 00 00 00       	mov    eax,0x4
c001a923:	e9 00 01 00 00       	jmp    c001aa28 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a928:	83 ec 08             	sub    esp,0x8
c001a92b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a932:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a936:	50                   	push   eax
c001a937:	e8 1d 5e fe ff       	call   c0000759 <strcpy>
c001a93c:	83 c4 10             	add    esp,0x10
c001a93f:	83 ec 08             	sub    esp,0x8
c001a942:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a946:	50                   	push   eax
c001a947:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a94e:	e8 79 ff ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001a953:	83 c4 10             	add    esp,0x10
c001a956:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a95e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a965:	83 e0 01             	and    eax,0x1
c001a968:	74 08                	je     c001a972 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a96a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a972:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a979:	83 e0 04             	and    eax,0x4
c001a97c:	74 10                	je     c001a98e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a97e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a986:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a98e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a995:	83 e0 02             	and    eax,0x2
c001a998:	74 08                	je     c001a9a2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a99a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a9a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a9a9:	83 e0 08             	and    eax,0x8
c001a9ac:	74 08                	je     c001a9b6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a9ae:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a9b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a9bd:	83 e0 10             	and    eax,0x10
c001a9c0:	74 08                	je     c001a9ca <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a9c2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a9ca:	83 ec 0c             	sub    esp,0xc
c001a9cd:	68 50 02 00 00       	push   0x250
c001a9d2:	e8 02 16 ff ff       	call   c000bfd9 <malloc>
c001a9d7:	83 c4 10             	add    esp,0x10
c001a9da:	89 c2                	mov    edx,eax
c001a9dc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9e3:	89 10                	mov    DWORD PTR [eax],edx
c001a9e5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a9ec:	31 d2                	xor    edx,edx
c001a9ee:	88 c2                	mov    dl,al
c001a9f0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9f9:	83 ec 04             	sub    esp,0x4
c001a9fc:	52                   	push   edx
c001a9fd:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aa01:	52                   	push   edx
c001aa02:	50                   	push   eax
c001aa03:	e8 55 a3 fe ff       	call   c0004d5d <f_open>
c001aa08:	83 c4 10             	add    esp,0x10
c001aa0b:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aa12:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aa1a:	74 07                	je     c001aa23 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001aa1c:	b8 01 00 00 00       	mov    eax,0x1
c001aa21:	eb 05                	jmp    c001aa28 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa23:	b8 00 00 00 00       	mov    eax,0x0
c001aa28:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa2e:	c3                   	ret    
c001aa2f:	90                   	nop

c001aa30 <FAT::openDir(char const*, void**)>:
c001aa30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa3e:	74 0a                	je     c001aa4a <FAT::openDir(char const*, void**)+0x1a>
c001aa40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa48:	75 07                	jne    c001aa51 <FAT::openDir(char const*, void**)+0x21>
c001aa4a:	b8 04 00 00 00       	mov    eax,0x4
c001aa4f:	eb 7d                	jmp    c001aace <FAT::openDir(char const*, void**)+0x9e>
c001aa51:	83 ec 08             	sub    esp,0x8
c001aa54:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa5b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa5f:	50                   	push   eax
c001aa60:	e8 f4 5c fe ff       	call   c0000759 <strcpy>
c001aa65:	83 c4 10             	add    esp,0x10
c001aa68:	83 ec 08             	sub    esp,0x8
c001aa6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa6f:	50                   	push   eax
c001aa70:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa77:	e8 50 fe ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001aa7c:	83 c4 10             	add    esp,0x10
c001aa7f:	83 ec 0c             	sub    esp,0xc
c001aa82:	6a 4c                	push   0x4c
c001aa84:	e8 50 15 ff ff       	call   c000bfd9 <malloc>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	89 c2                	mov    edx,eax
c001aa8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa95:	89 10                	mov    DWORD PTR [eax],edx
c001aa97:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaa0:	83 ec 08             	sub    esp,0x8
c001aaa3:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aaa7:	52                   	push   edx
c001aaa8:	50                   	push   eax
c001aaa9:	e8 95 b2 fe ff       	call   c0005d43 <f_opendir>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aab8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aac0:	74 07                	je     c001aac9 <FAT::openDir(char const*, void**)+0x99>
c001aac2:	b8 01 00 00 00       	mov    eax,0x1
c001aac7:	eb 05                	jmp    c001aace <FAT::openDir(char const*, void**)+0x9e>
c001aac9:	b8 00 00 00 00       	mov    eax,0x0
c001aace:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aad4:	c3                   	ret    
c001aad5:	90                   	nop

c001aad6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aad6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aadc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aae4:	75 0a                	jne    c001aaf0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001aae6:	b8 04 00 00 00       	mov    eax,0x4
c001aaeb:	e9 cb 00 00 00       	jmp    c001abbb <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aaf0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aaf8:	75 0a                	jne    c001ab04 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001aafa:	b8 04 00 00 00       	mov    eax,0x4
c001aaff:	e9 b7 00 00 00       	jmp    c001abbb <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab04:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ab0c:	75 0a                	jne    c001ab18 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ab0e:	b8 04 00 00 00       	mov    eax,0x4
c001ab13:	e9 a3 00 00 00       	jmp    c001abbb <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab18:	83 ec 08             	sub    esp,0x8
c001ab1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab22:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab29:	50                   	push   eax
c001ab2a:	e8 2a 5c fe ff       	call   c0000759 <strcpy>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	83 ec 08             	sub    esp,0x8
c001ab35:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ab3c:	50                   	push   eax
c001ab3d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab44:	e8 83 fd ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	83 ec 08             	sub    esp,0x8
c001ab4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab53:	50                   	push   eax
c001ab54:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab5b:	50                   	push   eax
c001ab5c:	e8 a1 b3 fe ff       	call   c0005f02 <f_stat>
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab6b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab72:	85 c0                	test   eax,eax
c001ab74:	74 07                	je     c001ab7d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ab76:	83 f8 04             	cmp    eax,0x4
c001ab79:	74 34                	je     c001abaf <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ab7b:	eb 39                	jmp    c001abb6 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab7d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab81:	25 ff 00 00 00       	and    eax,0xff
c001ab86:	83 e0 10             	and    eax,0x10
c001ab89:	0f 95 c2             	setne  dl
c001ab8c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ab93:	88 10                	mov    BYTE PTR [eax],dl
c001ab95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab9c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aba3:	89 01                	mov    DWORD PTR [ecx],eax
c001aba5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aba8:	b8 00 00 00 00       	mov    eax,0x0
c001abad:	eb 0c                	jmp    c001abbb <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abaf:	b8 02 00 00 00       	mov    eax,0x2
c001abb4:	eb 05                	jmp    c001abbb <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abb6:	b8 01 00 00 00       	mov    eax,0x1
c001abbb:	81 c4 2c 02 00 00    	add    esp,0x22c
c001abc1:	c3                   	ret    

c001abc2 <FAT::unlink(char const*)>:
c001abc2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001abc8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001abd0:	75 07                	jne    c001abd9 <FAT::unlink(char const*)+0x17>
c001abd2:	b8 04 00 00 00       	mov    eax,0x4
c001abd7:	eb 5c                	jmp    c001ac35 <FAT::unlink(char const*)+0x73>
c001abd9:	83 ec 08             	sub    esp,0x8
c001abdc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abe3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abe7:	50                   	push   eax
c001abe8:	e8 6c 5b fe ff       	call   c0000759 <strcpy>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	83 ec 08             	sub    esp,0x8
c001abf3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abf7:	50                   	push   eax
c001abf8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abff:	e8 c8 fc ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	83 ec 0c             	sub    esp,0xc
c001ac0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac0e:	50                   	push   eax
c001ac0f:	e8 5d b6 fe ff       	call   c0006271 <f_unlink>
c001ac14:	83 c4 10             	add    esp,0x10
c001ac17:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ac1e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ac25:	85 c0                	test   eax,eax
c001ac27:	75 07                	jne    c001ac30 <FAT::unlink(char const*)+0x6e>
c001ac29:	b8 00 00 00 00       	mov    eax,0x0
c001ac2e:	eb 05                	jmp    c001ac35 <FAT::unlink(char const*)+0x73>
c001ac30:	b8 01 00 00 00       	mov    eax,0x1
c001ac35:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac3b:	c3                   	ret    

c001ac3c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac42:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ac49:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ac50:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ac54:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac58:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ac60:	75 0a                	jne    c001ac6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ac62:	b8 04 00 00 00       	mov    eax,0x4
c001ac67:	e9 43 01 00 00       	jmp    c001adaf <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ac6c:	83 ec 08             	sub    esp,0x8
c001ac6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac76:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac7a:	50                   	push   eax
c001ac7b:	e8 d9 5a fe ff       	call   c0000759 <strcpy>
c001ac80:	83 c4 10             	add    esp,0x10
c001ac83:	83 ec 08             	sub    esp,0x8
c001ac86:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac8a:	50                   	push   eax
c001ac8b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac92:	e8 35 fc ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001aca2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001acaa:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acae:	25 ff 00 00 00       	and    eax,0xff
c001acb3:	83 e0 01             	and    eax,0x1
c001acb6:	74 08                	je     c001acc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001acb8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001acc0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acc4:	25 ff 00 00 00       	and    eax,0xff
c001acc9:	83 e0 02             	and    eax,0x2
c001accc:	74 08                	je     c001acd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001acce:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001acd6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acda:	25 ff 00 00 00       	and    eax,0xff
c001acdf:	83 e0 04             	and    eax,0x4
c001ace2:	74 08                	je     c001acec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001ace4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001acec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acf0:	25 ff 00 00 00       	and    eax,0xff
c001acf5:	83 e0 08             	and    eax,0x8
c001acf8:	74 08                	je     c001ad02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001acfa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ad02:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad06:	25 ff 00 00 00       	and    eax,0xff
c001ad0b:	83 e0 01             	and    eax,0x1
c001ad0e:	74 08                	je     c001ad18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ad10:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ad18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad1c:	25 ff 00 00 00       	and    eax,0xff
c001ad21:	83 e0 02             	and    eax,0x2
c001ad24:	74 08                	je     c001ad2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ad26:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ad2e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad32:	25 ff 00 00 00       	and    eax,0xff
c001ad37:	83 e0 04             	and    eax,0x4
c001ad3a:	74 08                	je     c001ad44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ad3c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ad44:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad48:	25 ff 00 00 00       	and    eax,0xff
c001ad4d:	83 e0 08             	and    eax,0x8
c001ad50:	74 08                	je     c001ad5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ad52:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ad5a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad61:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ad68:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad6f:	31 d2                	xor    edx,edx
c001ad71:	88 c2                	mov    dl,al
c001ad73:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad7a:	25 ff 00 00 00       	and    eax,0xff
c001ad7f:	83 ec 04             	sub    esp,0x4
c001ad82:	52                   	push   edx
c001ad83:	50                   	push   eax
c001ad84:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad88:	50                   	push   eax
c001ad89:	e8 83 bb fe ff       	call   c0006911 <f_chmod>
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ad98:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ad9f:	85 c0                	test   eax,eax
c001ada1:	75 07                	jne    c001adaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ada3:	b8 00 00 00 00       	mov    eax,0x0
c001ada8:	eb 05                	jmp    c001adaf <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001adaa:	b8 01 00 00 00       	mov    eax,0x1
c001adaf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001adb5:	c3                   	ret    

c001adb6 <FAT::rename(char const*, char const*)>:
c001adb6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001adbc:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001adc4:	74 0a                	je     c001add0 <FAT::rename(char const*, char const*)+0x1a>
c001adc6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001adce:	75 0a                	jne    c001adda <FAT::rename(char const*, char const*)+0x24>
c001add0:	b8 04 00 00 00       	mov    eax,0x4
c001add5:	e9 98 00 00 00       	jmp    c001ae72 <FAT::rename(char const*, char const*)+0xbc>
c001adda:	83 ec 08             	sub    esp,0x8
c001addd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ade4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001adeb:	50                   	push   eax
c001adec:	e8 68 59 fe ff       	call   c0000759 <strcpy>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	83 ec 08             	sub    esp,0x8
c001adf7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001adfe:	50                   	push   eax
c001adff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae06:	e8 c1 fa ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	83 ec 08             	sub    esp,0x8
c001ae11:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ae18:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae1c:	50                   	push   eax
c001ae1d:	e8 37 59 fe ff       	call   c0000759 <strcpy>
c001ae22:	83 c4 10             	add    esp,0x10
c001ae25:	83 ec 08             	sub    esp,0x8
c001ae28:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae2c:	50                   	push   eax
c001ae2d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae34:	e8 93 fa ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001ae39:	83 c4 10             	add    esp,0x10
c001ae3c:	83 ec 08             	sub    esp,0x8
c001ae3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae43:	50                   	push   eax
c001ae44:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae4b:	50                   	push   eax
c001ae4c:	e8 cd b7 fe ff       	call   c000661e <f_rename>
c001ae51:	83 c4 10             	add    esp,0x10
c001ae54:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ae5b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ae62:	85 c0                	test   eax,eax
c001ae64:	75 07                	jne    c001ae6d <FAT::rename(char const*, char const*)+0xb7>
c001ae66:	b8 00 00 00 00       	mov    eax,0x0
c001ae6b:	eb 05                	jmp    c001ae72 <FAT::rename(char const*, char const*)+0xbc>
c001ae6d:	b8 01 00 00 00       	mov    eax,0x1
c001ae72:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae78:	c3                   	ret    
c001ae79:	90                   	nop

c001ae7a <FAT::mkdir(char const*)>:
c001ae7a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae80:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae88:	75 07                	jne    c001ae91 <FAT::mkdir(char const*)+0x17>
c001ae8a:	b8 04 00 00 00       	mov    eax,0x4
c001ae8f:	eb 5c                	jmp    c001aeed <FAT::mkdir(char const*)+0x73>
c001ae91:	83 ec 08             	sub    esp,0x8
c001ae94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ae9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae9f:	50                   	push   eax
c001aea0:	e8 b4 58 fe ff       	call   c0000759 <strcpy>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	83 ec 08             	sub    esp,0x8
c001aeab:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aeaf:	50                   	push   eax
c001aeb0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aeb7:	e8 10 fa ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001aebc:	83 c4 10             	add    esp,0x10
c001aebf:	83 ec 0c             	sub    esp,0xc
c001aec2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aec6:	50                   	push   eax
c001aec7:	e8 26 b5 fe ff       	call   c00063f2 <f_mkdir>
c001aecc:	83 c4 10             	add    esp,0x10
c001aecf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aed6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aedd:	85 c0                	test   eax,eax
c001aedf:	75 07                	jne    c001aee8 <FAT::mkdir(char const*)+0x6e>
c001aee1:	b8 00 00 00 00       	mov    eax,0x0
c001aee6:	eb 05                	jmp    c001aeed <FAT::mkdir(char const*)+0x73>
c001aee8:	b8 01 00 00 00       	mov    eax,0x1
c001aeed:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aef3:	c3                   	ret    

c001aef4 <FAT::exists(char const*)>:
c001aef4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aefa:	83 ec 08             	sub    esp,0x8
c001aefd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af08:	50                   	push   eax
c001af09:	e8 4b 58 fe ff       	call   c0000759 <strcpy>
c001af0e:	83 c4 10             	add    esp,0x10
c001af11:	83 ec 08             	sub    esp,0x8
c001af14:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af18:	50                   	push   eax
c001af19:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af20:	e8 a7 f9 ff ff       	call   c001a8cc <FAT::fixFilepath(char*)>
c001af25:	83 c4 10             	add    esp,0x10
c001af28:	83 ec 08             	sub    esp,0x8
c001af2b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001af32:	50                   	push   eax
c001af33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af37:	50                   	push   eax
c001af38:	e8 c5 af fe ff       	call   c0005f02 <f_stat>
c001af3d:	83 c4 10             	add    esp,0x10
c001af40:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001af47:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001af4e:	85 c0                	test   eax,eax
c001af50:	75 04                	jne    c001af56 <FAT::exists(char const*)+0x62>
c001af52:	b0 01                	mov    al,0x1
c001af54:	eb 02                	jmp    c001af58 <FAT::exists(char const*)+0x64>
c001af56:	b0 00                	mov    al,0x0
c001af58:	81 c4 2c 02 00 00    	add    esp,0x22c
c001af5e:	c3                   	ret    
c001af5f:	90                   	nop

c001af60 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af60:	b8 08 00 00 00       	mov    eax,0x8
c001af65:	c3                   	ret    

c001af66 <ISO9660::seek(void*, unsigned long long)>:
c001af66:	53                   	push   ebx
c001af67:	b8 04 00 00 00       	mov    eax,0x4
c001af6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af78:	85 d2                	test   edx,edx
c001af7a:	74 17                	je     c001af93 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af7c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001af7f:	89 c8                	mov    eax,ecx
c001af81:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001af84:	b8 01 00 00 00       	mov    eax,0x1
c001af89:	73 08                	jae    c001af93 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af8b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001af8e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001af91:	31 c0                	xor    eax,eax
c001af93:	5b                   	pop    ebx
c001af94:	c3                   	ret    
c001af95:	90                   	nop

c001af96 <ISO9660::tell(void*, unsigned long long*)>:
c001af96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9e:	85 d2                	test   edx,edx
c001afa0:	74 12                	je     c001afb4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001afa2:	85 c0                	test   eax,eax
c001afa4:	74 0e                	je     c001afb4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001afa6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afa9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001afac:	89 10                	mov    DWORD PTR [eax],edx
c001afae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afb1:	31 c0                	xor    eax,eax
c001afb3:	c3                   	ret    
c001afb4:	b8 04 00 00 00       	mov    eax,0x4
c001afb9:	c3                   	ret    

c001afba <ISO9660::getName()>:
c001afba:	b8 88 31 02 c0       	mov    eax,0xc0023188
c001afbf:	c3                   	ret    

c001afc0 <ISO9660::stat(void*, unsigned long long*)>:
c001afc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afc8:	85 d2                	test   edx,edx
c001afca:	74 12                	je     c001afde <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001afcc:	85 c0                	test   eax,eax
c001afce:	74 0e                	je     c001afde <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001afd0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001afd3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001afd6:	89 10                	mov    DWORD PTR [eax],edx
c001afd8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afdb:	31 c0                	xor    eax,eax
c001afdd:	c3                   	ret    
c001afde:	b8 04 00 00 00       	mov    eax,0x4
c001afe3:	c3                   	ret    

c001afe4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001afe4:	b8 01 00 00 00       	mov    eax,0x1
c001afe9:	c3                   	ret    

c001afea <ISO9660::unlink(char const*)>:
c001afea:	b8 01 00 00 00       	mov    eax,0x1
c001afef:	c3                   	ret    

c001aff0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001aff0:	b8 01 00 00 00       	mov    eax,0x1
c001aff5:	c3                   	ret    

c001aff6 <ISO9660::rename(char const*, char const*)>:
c001aff6:	b8 01 00 00 00       	mov    eax,0x1
c001affb:	c3                   	ret    

c001affc <ISO9660::mkdir(char const*)>:
c001affc:	b8 01 00 00 00       	mov    eax,0x1
c001b001:	c3                   	ret    

c001b002 <ISO9660::close(void*)>:
c001b002:	83 ec 0c             	sub    esp,0xc
c001b005:	b8 04 00 00 00       	mov    eax,0x4
c001b00a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b00e:	85 d2                	test   edx,edx
c001b010:	74 0e                	je     c001b020 <ISO9660::close(void*)+0x1e>
c001b012:	83 ec 0c             	sub    esp,0xc
c001b015:	52                   	push   edx
c001b016:	e8 ce 0f ff ff       	call   c000bfe9 <free>
c001b01b:	83 c4 10             	add    esp,0x10
c001b01e:	31 c0                	xor    eax,eax
c001b020:	83 c4 0c             	add    esp,0xc
c001b023:	c3                   	ret    

c001b024 <ISO9660::closeDir(void*)>:
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	b8 04 00 00 00       	mov    eax,0x4
c001b02c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b030:	85 d2                	test   edx,edx
c001b032:	74 0e                	je     c001b042 <ISO9660::closeDir(void*)+0x1e>
c001b034:	83 ec 0c             	sub    esp,0xc
c001b037:	52                   	push   edx
c001b038:	e8 ac 0f ff ff       	call   c000bfe9 <free>
c001b03d:	83 c4 10             	add    esp,0x10
c001b040:	31 c0                	xor    eax,eax
c001b042:	83 c4 0c             	add    esp,0xc
c001b045:	c3                   	ret    

c001b046 <ISO9660::~ISO9660()>:
c001b046:	83 ec 0c             	sub    esp,0xc
c001b049:	ba dc 31 02 c0       	mov    edx,0xc00231dc
c001b04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b052:	89 10                	mov    DWORD PTR [eax],edx
c001b054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	50                   	push   eax
c001b05c:	e8 17 44 ff ff       	call   c000f478 <Filesystem::~Filesystem()>
c001b061:	83 c4 10             	add    esp,0x10
c001b064:	90                   	nop
c001b065:	83 c4 0c             	add    esp,0xc
c001b068:	c3                   	ret    
c001b069:	90                   	nop

c001b06a <ISO9660::~ISO9660()>:
c001b06a:	83 ec 0c             	sub    esp,0xc
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b074:	e8 cd ff ff ff       	call   c001b046 <ISO9660::~ISO9660()>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	83 ec 08             	sub    esp,0x8
c001b07f:	6a 08                	push   0x8
c001b081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b085:	e8 97 3f ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	83 c4 0c             	add    esp,0xc
c001b090:	c3                   	ret    

c001b091 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b091:	55                   	push   ebp
c001b092:	31 c9                	xor    ecx,ecx
c001b094:	57                   	push   edi
c001b095:	56                   	push   esi
c001b096:	53                   	push   ebx
c001b097:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b09b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b09f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b0a3:	89 eb                	mov    ebx,ebp
c001b0a5:	39 ce                	cmp    esi,ecx
c001b0a7:	7e 17                	jle    c001b0c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b0a9:	31 d2                	xor    edx,edx
c001b0ab:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b0af:	7d 13                	jge    c001b0c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b0b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b0b5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b0b8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b0bb:	75 0d                	jne    c001b0ca <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b0bd:	42                   	inc    edx
c001b0be:	eb eb                	jmp    c001b0ab <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b0c0:	31 c0                	xor    eax,eax
c001b0c2:	eb 0a                	jmp    c001b0ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b0c4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b0c8:	eb 04                	jmp    c001b0ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b0ca:	41                   	inc    ecx
c001b0cb:	43                   	inc    ebx
c001b0cc:	eb d7                	jmp    c001b0a5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b0ce:	5b                   	pop    ebx
c001b0cf:	5e                   	pop    esi
c001b0d0:	5f                   	pop    edi
c001b0d1:	5d                   	pop    ebp
c001b0d2:	c3                   	ret    

c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b0d3:	56                   	push   esi
c001b0d4:	53                   	push   ebx
c001b0d5:	52                   	push   edx
c001b0d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0e2:	39 0d 20 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b20,ecx
c001b0e8:	75 08                	jne    c001b0f2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b0ea:	38 05 c8 3f 02 c0    	cmp    BYTE PTR ds:0xc0023fc8,al
c001b0f0:	74 2b                	je     c001b11d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b0f2:	83 ec 0c             	sub    esp,0xc
c001b0f5:	31 db                	xor    ebx,ebx
c001b0f7:	a2 c8 3f 02 c0       	mov    ds:0xc0023fc8,al
c001b0fc:	89 0d 20 5b 02 c0    	mov    DWORD PTR ds:0xc0025b20,ecx
c001b102:	68 40 5b 02 c0       	push   0xc0025b40
c001b107:	6a 01                	push   0x1
c001b109:	53                   	push   ebx
c001b10a:	0f be c0             	movsx  eax,al
c001b10d:	51                   	push   ecx
c001b10e:	ff 34 85 9c 4a 02 c0 	push   DWORD PTR [eax*4-0x3ffdb564]
c001b115:	e8 88 76 ff ff       	call   c00127a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001b11a:	83 c4 20             	add    esp,0x20
c001b11d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b125:	c7 44 24 14 40 5b 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025b40
c001b12d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b131:	58                   	pop    eax
c001b132:	5b                   	pop    ebx
c001b133:	5e                   	pop    esi
c001b134:	e9 4b 55 fe ff       	jmp    c0000684 <memcpy>
c001b139:	90                   	nop

c001b13a <ISO9660::tryMount(LogicalDisk*, int)>:
c001b13a:	81 ec 10 08 00 00    	sub    esp,0x810
c001b140:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b147:	83 c0 41             	add    eax,0x41
c001b14a:	0f be c0             	movsx  eax,al
c001b14d:	50                   	push   eax
c001b14e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b152:	50                   	push   eax
c001b153:	6a 10                	push   0x10
c001b155:	e8 79 ff ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b15a:	83 c4 10             	add    esp,0x10
c001b15d:	31 c0                	xor    eax,eax
c001b15f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b164:	75 1d                	jne    c001b183 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b166:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b16b:	75 16                	jne    c001b183 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b16d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b172:	75 0f                	jne    c001b183 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b174:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b179:	75 08                	jne    c001b183 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b17b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b180:	0f 94 c0             	sete   al
c001b183:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b189:	c3                   	ret    

c001b18a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b18a:	55                   	push   ebp
c001b18b:	57                   	push   edi
c001b18c:	56                   	push   esi
c001b18d:	53                   	push   ebx
c001b18e:	81 ec 34 08 00 00    	sub    esp,0x834
c001b194:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b19b:	55                   	push   ebp
c001b19c:	68 a3 31 02 c0       	push   0xc00231a3
c001b1a1:	e8 a1 3f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001b1a6:	83 c4 10             	add    esp,0x10
c001b1a9:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b1b1:	0f 84 06 02 00 00    	je     c001b3bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b1b7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b1bf:	0f 84 f8 01 00 00    	je     c001b3bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b1c5:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b1cc:	b8 01 00 00 00       	mov    eax,0x1
c001b1d1:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b1d5:	0f 85 e7 01 00 00    	jne    c001b3c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b1db:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b1de:	31 d2                	xor    edx,edx
c001b1e0:	89 e9                	mov    ecx,ebp
c001b1e2:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b1e5:	01 f1                	add    ecx,esi
c001b1e7:	89 d3                	mov    ebx,edx
c001b1e9:	11 fb                	adc    ebx,edi
c001b1eb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1ef:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1f3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b1fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b1fd:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b200:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b204:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b208:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b20c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b210:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b214:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b218:	72 19                	jb     c001b233 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b21a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b226:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b22d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b231:	eb 13                	jmp    c001b246 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b233:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b237:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b23b:	29 f0                	sub    eax,esi
c001b23d:	19 fa                	sbb    edx,edi
c001b23f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b242:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b246:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b24d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b250:	8b 00                	mov    eax,DWORD PTR [eax]
c001b252:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b256:	c1 e0 0b             	shl    eax,0xb
c001b259:	53                   	push   ebx
c001b25a:	01 c6                	add    esi,eax
c001b25c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b263:	11 d7                	adc    edi,edx
c001b265:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b269:	50                   	push   eax
c001b26a:	89 fa                	mov    edx,edi
c001b26c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b270:	50                   	push   eax
c001b271:	89 f0                	mov    eax,esi
c001b273:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b277:	50                   	push   eax
c001b278:	e8 56 fe ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b27d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b284:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b288:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b292:	b8 00 08 00 00       	mov    eax,0x800
c001b297:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b29d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b2a1:	29 d0                	sub    eax,edx
c001b2a3:	39 c1                	cmp    ecx,eax
c001b2a5:	83 db 00             	sbb    ebx,0x0
c001b2a8:	7d 19                	jge    c001b2c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b2aa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b2af:	75 16                	jne    c001b2c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b2b1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b2b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2be:	e9 f6 00 00 00       	jmp    c001b3b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b2c3:	89 c5                	mov    ebp,eax
c001b2c5:	eb 03                	jmp    c001b2ca <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b2c7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b2ca:	51                   	push   ecx
c001b2cb:	55                   	push   ebp
c001b2cc:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b2d0:	50                   	push   eax
c001b2d1:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b2d8:	e8 a7 53 fe ff       	call   c0000684 <memcpy>
c001b2dd:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b2e4:	01 e8                	add    eax,ebp
c001b2e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2ee:	89 e8                	mov    eax,ebp
c001b2f0:	99                   	cdq    
c001b2f1:	01 ee                	add    esi,ebp
c001b2f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b2f7:	11 d7                	adc    edi,edx
c001b2f9:	29 e9                	sub    ecx,ebp
c001b2fb:	19 d3                	sbb    ebx,edx
c001b2fd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b301:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b305:	83 c4 10             	add    esp,0x10
c001b308:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b30d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b310:	b8 00 00 00 00       	mov    eax,0x0
c001b315:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b319:	7d 3f                	jge    c001b35a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b31b:	52                   	push   edx
c001b31c:	89 fa                	mov    edx,edi
c001b31e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b325:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b329:	50                   	push   eax
c001b32a:	89 f0                	mov    eax,esi
c001b32c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b330:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b334:	50                   	push   eax
c001b335:	e8 99 fd ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b33a:	81 c6 00 08 00 00    	add    esi,0x800
c001b340:	83 d7 00             	adc    edi,0x0
c001b343:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b34b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b353:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b358:	eb ab                	jmp    c001b305 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b35e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b361:	74 34                	je     c001b397 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b363:	50                   	push   eax
c001b364:	89 fa                	mov    edx,edi
c001b366:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b36d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b371:	50                   	push   eax
c001b372:	89 f0                	mov    eax,esi
c001b374:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b378:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b37c:	55                   	push   ebp
c001b37d:	50                   	push   eax
c001b37e:	e8 50 fd ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b38a:	55                   	push   ebp
c001b38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b38f:	e8 f0 52 fe ff       	call   c0000684 <memcpy>
c001b394:	83 c4 10             	add    esp,0x10
c001b397:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b39e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b3a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3a6:	89 38                	mov    DWORD PTR [eax],edi
c001b3a8:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b3af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3b3:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b3b6:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b3b9:	31 c0                	xor    eax,eax
c001b3bb:	eb 05                	jmp    c001b3c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b3bd:	b8 04 00 00 00       	mov    eax,0x4
c001b3c2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b3c8:	5b                   	pop    ebx
c001b3c9:	5e                   	pop    esi
c001b3ca:	5f                   	pop    edi
c001b3cb:	5d                   	pop    ebp
c001b3cc:	c3                   	ret    
c001b3cd:	90                   	nop

c001b3ce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b3ce:	55                   	push   ebp
c001b3cf:	57                   	push   edi
c001b3d0:	56                   	push   esi
c001b3d1:	53                   	push   ebx
c001b3d2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b3d8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b3df:	85 f6                	test   esi,esi
c001b3e1:	0f 84 62 02 00 00    	je     c001b649 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3e7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b3ef:	0f 84 54 02 00 00    	je     c001b649 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b3f8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b3fb:	75 0a                	jne    c001b407 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b3fd:	b8 07 00 00 00       	mov    eax,0x7
c001b402:	e9 47 02 00 00       	jmp    c001b64e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b407:	50                   	push   eax
c001b408:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b40c:	50                   	push   eax
c001b40d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b414:	53                   	push   ebx
c001b415:	8b 06                	mov    eax,DWORD PTR [esi]
c001b417:	c1 e0 0b             	shl    eax,0xb
c001b41a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b41d:	c1 e8 0b             	shr    eax,0xb
c001b420:	50                   	push   eax
c001b421:	e8 ad fc ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b426:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	89 c1                	mov    ecx,eax
c001b42e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b431:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b437:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b43a:	84 db                	test   bl,bl
c001b43c:	0f 85 90 00 00 00    	jne    c001b4d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b442:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b448:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b44e:	29 c7                	sub    edi,eax
c001b450:	89 fb                	mov    ebx,edi
c001b452:	c1 fb 1f             	sar    ebx,0x1f
c001b455:	01 f8                	add    eax,edi
c001b457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b45b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b45e:	11 da                	adc    edx,ebx
c001b460:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b463:	89 04 24             	mov    DWORD PTR [esp],eax
c001b466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b46a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b46d:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b470:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b473:	89 d8                	mov    eax,ebx
c001b475:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b479:	ba 00 00 00 00       	mov    edx,0x0
c001b47e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b482:	b8 00 00 00 00       	mov    eax,0x0
c001b487:	73 0b                	jae    c001b494 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b489:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b48c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b490:	29 f8                	sub    eax,edi
c001b492:	19 da                	sbb    edx,ebx
c001b494:	89 d3                	mov    ebx,edx
c001b496:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b499:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b49c:	09 c3                	or     ebx,eax
c001b49e:	0f 84 59 ff ff ff    	je     c001b3fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b4a4:	55                   	push   ebp
c001b4a5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4a9:	50                   	push   eax
c001b4aa:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4b1:	53                   	push   ebx
c001b4b2:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4b4:	c1 e0 0b             	shl    eax,0xb
c001b4b7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b4bb:	c1 e8 0b             	shr    eax,0xb
c001b4be:	50                   	push   eax
c001b4bf:	e8 0f fc ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b4c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	25 ff 07 00 00       	and    eax,0x7ff
c001b4cf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b4d2:	57                   	push   edi
c001b4d3:	6a 28                	push   0x28
c001b4d5:	6a 00                	push   0x0
c001b4d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4db:	50                   	push   eax
c001b4dc:	e8 d9 51 fe ff       	call   c00006ba <memset>
c001b4e1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b4e4:	31 d2                	xor    edx,edx
c001b4e6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b4ec:	89 f8                	mov    eax,edi
c001b4ee:	83 c0 21             	add    eax,0x21
c001b4f1:	83 d2 00             	adc    edx,0x0
c001b4f4:	89 c7                	mov    edi,eax
c001b4f6:	89 d5                	mov    ebp,edx
c001b4f8:	83 c4 10             	add    esp,0x10
c001b4fb:	31 c9                	xor    ecx,ecx
c001b4fd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b504:	83 f9 28             	cmp    ecx,0x28
c001b507:	0f 94 c2             	sete   dl
c001b50a:	88 04 24             	mov    BYTE PTR [esp],al
c001b50d:	88 d0                	mov    al,dl
c001b50f:	ba ff 07 00 00       	mov    edx,0x7ff
c001b514:	39 fa                	cmp    edx,edi
c001b516:	ba 00 00 00 00       	mov    edx,0x0
c001b51b:	19 ea                	sbb    edx,ebp
c001b51d:	0f 92 c2             	setb   dl
c001b520:	09 c2                	or     edx,eax
c001b522:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b526:	0f 94 c0             	sete   al
c001b529:	08 d0                	or     al,dl
c001b52b:	75 16                	jne    c001b543 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b52d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b531:	74 10                	je     c001b543 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b533:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b536:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b53a:	41                   	inc    ecx
c001b53b:	83 c7 01             	add    edi,0x1
c001b53e:	83 d5 00             	adc    ebp,0x0
c001b541:	eb ba                	jmp    c001b4fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b543:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b54a:	83 ec 0c             	sub    esp,0xc
c001b54d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b551:	57                   	push   edi
c001b552:	e8 80 51 fe ff       	call   c00006d7 <strlen>
c001b557:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b55b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b55e:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b565:	25 ff 07 00 00       	and    eax,0x7ff
c001b56a:	01 c8                	add    eax,ecx
c001b56c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b574:	5a                   	pop    edx
c001b575:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b57c:	59                   	pop    ecx
c001b57d:	0f 95 c0             	setne  al
c001b580:	0f b6 c0             	movzx  eax,al
c001b583:	40                   	inc    eax
c001b584:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b588:	57                   	push   edi
c001b589:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b58d:	50                   	push   eax
c001b58e:	e8 c6 51 fe ff       	call   c0000759 <strcpy>
c001b593:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	84 c0                	test   al,al
c001b59c:	75 21                	jne    c001b5bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b59e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b5a6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b5ae:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5b6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b5bd:	eb 28                	jmp    c001b5e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b5bf:	fe c8                	dec    al
c001b5c1:	75 24                	jne    c001b5e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b5c3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b5cb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b5d3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5db:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b5e2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b5e7:	50                   	push   eax
c001b5e8:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b5ef:	0f b6 fb             	movzx  edi,bl
c001b5f2:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b5f6:	31 db                	xor    ebx,ebx
c001b5f8:	50                   	push   eax
c001b5f9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b600:	e8 7f 50 fe ff       	call   c0000684 <memcpy>
c001b605:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b60c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b612:	89 f9                	mov    ecx,edi
c001b614:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b617:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b61a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b61d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	39 c7                	cmp    edi,eax
c001b625:	89 df                	mov    edi,ebx
c001b627:	19 d7                	sbb    edi,edx
c001b629:	72 10                	jb     c001b63b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b62b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b632:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b639:	eb 0a                	jmp    c001b645 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b63b:	29 c8                	sub    eax,ecx
c001b63d:	19 da                	sbb    edx,ebx
c001b63f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b642:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b645:	31 c0                	xor    eax,eax
c001b647:	eb 05                	jmp    c001b64e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b649:	b8 04 00 00 00       	mov    eax,0x4
c001b64e:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b654:	5b                   	pop    ebx
c001b655:	5e                   	pop    esi
c001b656:	5f                   	pop    edi
c001b657:	5d                   	pop    ebp
c001b658:	c3                   	ret    

c001b659 <readRoot(unsigned int*, unsigned int*, char)>:
c001b659:	81 ec 40 08 00 00    	sub    esp,0x840
c001b65f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b667:	50                   	push   eax
c001b668:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b66c:	50                   	push   eax
c001b66d:	6a 10                	push   0x10
c001b66f:	e8 5f fa ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b674:	83 c4 0c             	add    esp,0xc
c001b677:	6a 22                	push   0x22
c001b679:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b680:	50                   	push   eax
c001b681:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b685:	50                   	push   eax
c001b686:	e8 f9 4f fe ff       	call   c0000684 <memcpy>
c001b68b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b692:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b696:	89 10                	mov    DWORD PTR [eax],edx
c001b698:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b69f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6a3:	89 10                	mov    DWORD PTR [eax],edx
c001b6a5:	b0 01                	mov    al,0x1
c001b6a7:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b6ad:	c3                   	ret    

c001b6ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b6ae:	55                   	push   ebp
c001b6af:	57                   	push   edi
c001b6b0:	56                   	push   esi
c001b6b1:	53                   	push   ebx
c001b6b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b6b8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b6bf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b6c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6ca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b6ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b6d2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b6d6:	75 03                	jne    c001b6db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6d8:	83 c3 02             	add    ebx,0x2
c001b6db:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b6de:	75 03                	jne    c001b6e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b6e0:	43                   	inc    ebx
c001b6e1:	eb f8                	jmp    c001b6db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6e3:	51                   	push   ecx
c001b6e4:	68 00 01 00 00       	push   0x100
c001b6e9:	6a 00                	push   0x0
c001b6eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b6ef:	50                   	push   eax
c001b6f0:	e8 c5 4f fe ff       	call   c00006ba <memset>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	31 d2                	xor    edx,edx
c001b6fa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b6fd:	84 c0                	test   al,al
c001b6ff:	74 21                	je     c001b722 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b701:	3c 2f                	cmp    al,0x2f
c001b703:	75 0b                	jne    c001b710 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b705:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b709:	bd 01 00 00 00       	mov    ebp,0x1
c001b70e:	eb 14                	jmp    c001b724 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b710:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b713:	80 f9 19             	cmp    cl,0x19
c001b716:	77 03                	ja     c001b71b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b718:	83 e8 20             	sub    eax,0x20
c001b71b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b71f:	42                   	inc    edx
c001b720:	eb d8                	jmp    c001b6fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b722:	31 ed                	xor    ebp,ebp
c001b724:	83 ec 0c             	sub    esp,0xc
c001b727:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b72e:	e8 a6 08 ff ff       	call   c000bfd9 <malloc>
c001b733:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b73a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b740:	89 c6                	mov    esi,eax
c001b742:	c1 ef 0b             	shr    edi,0xb
c001b745:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b74c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b750:	83 c4 10             	add    esp,0x10
c001b753:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b75c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b763:	74 28                	je     c001b78d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b765:	52                   	push   edx
c001b766:	57                   	push   edi
c001b767:	50                   	push   eax
c001b768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b76c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b773:	e8 5b f9 ff ff       	call   c001b0d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b77c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b783:	05 00 08 00 00       	add    eax,0x800
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	eb cb                	jmp    c001b758 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b78d:	83 ec 0c             	sub    esp,0xc
c001b790:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b794:	57                   	push   edi
c001b795:	e8 3d 4f fe ff       	call   c00006d7 <strlen>
c001b79a:	50                   	push   eax
c001b79b:	57                   	push   edi
c001b79c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b7a3:	56                   	push   esi
c001b7a4:	e8 e8 f8 ff ff       	call   c001b091 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b7a9:	83 c4 20             	add    esp,0x20
c001b7ac:	85 c0                	test   eax,eax
c001b7ae:	75 13                	jne    c001b7c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b7b0:	83 ec 0c             	sub    esp,0xc
c001b7b3:	56                   	push   esi
c001b7b4:	e8 30 08 ff ff       	call   c000bfe9 <free>
c001b7b9:	83 c4 10             	add    esp,0x10
c001b7bc:	31 c0                	xor    eax,eax
c001b7be:	e9 b3 00 00 00       	jmp    c001b876 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b7c3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b7c7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b7cb:	c1 e7 08             	shl    edi,0x8
c001b7ce:	c1 e2 10             	shl    edx,0x10
c001b7d1:	09 d7                	or     edi,edx
c001b7d3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b7d7:	09 d7                	or     edi,edx
c001b7d9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b7dd:	c1 e2 18             	shl    edx,0x18
c001b7e0:	09 d7                	or     edi,edx
c001b7e2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b7e6:	89 d1                	mov    ecx,edx
c001b7e8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b7ec:	c1 e1 08             	shl    ecx,0x8
c001b7ef:	c1 e2 10             	shl    edx,0x10
c001b7f2:	09 ca                	or     edx,ecx
c001b7f4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b7f8:	09 ca                	or     edx,ecx
c001b7fa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b7fe:	c1 e1 18             	shl    ecx,0x18
c001b801:	09 ca                	or     edx,ecx
c001b803:	89 e9                	mov    ecx,ebp
c001b805:	84 c9                	test   cl,cl
c001b807:	74 3c                	je     c001b845 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b809:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b80d:	83 ec 0c             	sub    esp,0xc
c001b810:	56                   	push   esi
c001b811:	e8 d3 07 ff ff       	call   c000bfe9 <free>
c001b816:	83 c4 0c             	add    esp,0xc
c001b819:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b820:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b825:	50                   	push   eax
c001b826:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b82d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b834:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b838:	52                   	push   edx
c001b839:	57                   	push   edi
c001b83a:	53                   	push   ebx
c001b83b:	e8 6e fe ff ff       	call   c001b6ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b840:	83 c4 20             	add    esp,0x20
c001b843:	eb 31                	jmp    c001b876 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b845:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b84c:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b84f:	d0 e8                	shr    al,1
c001b851:	83 ec 0c             	sub    esp,0xc
c001b854:	89 3b                	mov    DWORD PTR [ebx],edi
c001b856:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b85d:	83 e0 01             	and    eax,0x1
c001b860:	89 13                	mov    DWORD PTR [ebx],edx
c001b862:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b869:	89 03                	mov    DWORD PTR [ebx],eax
c001b86b:	56                   	push   esi
c001b86c:	e8 78 07 ff ff       	call   c000bfe9 <free>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	b0 01                	mov    al,0x1
c001b876:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b87c:	5b                   	pop    ebx
c001b87d:	5e                   	pop    esi
c001b87e:	5f                   	pop    edi
c001b87f:	5d                   	pop    ebp
c001b880:	c3                   	ret    

c001b881 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b881:	55                   	push   ebp
c001b882:	57                   	push   edi
c001b883:	56                   	push   esi
c001b884:	53                   	push   ebx
c001b885:	83 ec 20             	sub    esp,0x20
c001b888:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b88c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b890:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b895:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b899:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b8a9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b8af:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b8b5:	57                   	push   edi
c001b8b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8ba:	50                   	push   eax
c001b8bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8bf:	50                   	push   eax
c001b8c0:	e8 94 fd ff ff       	call   c001b659 <readRoot(unsigned int*, unsigned int*, char)>
c001b8c5:	5a                   	pop    edx
c001b8c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b8ca:	e8 08 4e fe ff       	call   c00006d7 <strlen>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	83 f8 03             	cmp    eax,0x3
c001b8d5:	77 17                	ja     c001b8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b8d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8db:	89 03                	mov    DWORD PTR [ebx],eax
c001b8dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8e1:	89 06                	mov    DWORD PTR [esi],eax
c001b8e3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b8ea:	b0 01                	mov    al,0x1
c001b8ec:	eb 19                	jmp    c001b907 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b8ee:	50                   	push   eax
c001b8ef:	55                   	push   ebp
c001b8f0:	57                   	push   edi
c001b8f1:	56                   	push   esi
c001b8f2:	53                   	push   ebx
c001b8f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b8ff:	e8 aa fd ff ff       	call   c001b6ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b904:	83 c4 20             	add    esp,0x20
c001b907:	83 c4 1c             	add    esp,0x1c
c001b90a:	5b                   	pop    ebx
c001b90b:	5e                   	pop    esi
c001b90c:	5f                   	pop    edi
c001b90d:	5d                   	pop    ebp
c001b90e:	c3                   	ret    
c001b90f:	90                   	nop

c001b910 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b910:	57                   	push   edi
c001b911:	56                   	push   esi
c001b912:	53                   	push   ebx
c001b913:	83 ec 10             	sub    esp,0x10
c001b916:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b91a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b91e:	85 f6                	test   esi,esi
c001b920:	74 7b                	je     c001b99d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b922:	85 ff                	test   edi,edi
c001b924:	74 77                	je     c001b99d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b926:	83 ec 0c             	sub    esp,0xc
c001b929:	6a 1c                	push   0x1c
c001b92b:	e8 a9 06 ff ff       	call   c000bfd9 <malloc>
c001b930:	89 07                	mov    DWORD PTR [edi],eax
c001b932:	89 c3                	mov    ebx,eax
c001b934:	58                   	pop    eax
c001b935:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b939:	50                   	push   eax
c001b93a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b93d:	50                   	push   eax
c001b93e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b942:	50                   	push   eax
c001b943:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b947:	50                   	push   eax
c001b948:	56                   	push   esi
c001b949:	e8 33 ff ff ff       	call   c001b881 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b94e:	83 c4 20             	add    esp,0x20
c001b951:	84 c0                	test   al,al
c001b953:	74 07                	je     c001b95c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b955:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b95a:	74 0b                	je     c001b967 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b95c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b960:	b8 01 00 00 00       	mov    eax,0x1
c001b965:	eb 3b                	jmp    c001b9a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b96b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b96f:	89 03                	mov    DWORD PTR [ebx],eax
c001b971:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b97c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b983:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b98a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b98d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b994:	8a 06                	mov    al,BYTE PTR [esi]
c001b996:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b999:	31 c0                	xor    eax,eax
c001b99b:	eb 05                	jmp    c001b9a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b99d:	b8 04 00 00 00       	mov    eax,0x4
c001b9a2:	83 c4 10             	add    esp,0x10
c001b9a5:	5b                   	pop    ebx
c001b9a6:	5e                   	pop    esi
c001b9a7:	5f                   	pop    edi
c001b9a8:	c3                   	ret    
c001b9a9:	90                   	nop

c001b9aa <ISO9660::exists(char const*)>:
c001b9aa:	83 ec 28             	sub    esp,0x28
c001b9ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b9b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9b5:	52                   	push   edx
c001b9b6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b9b9:	52                   	push   edx
c001b9ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b9be:	52                   	push   edx
c001b9bf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b9c3:	52                   	push   edx
c001b9c4:	50                   	push   eax
c001b9c5:	e8 b7 fe ff ff       	call   c001b881 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b9ca:	83 c4 3c             	add    esp,0x3c
c001b9cd:	c3                   	ret    

c001b9ce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b9ce:	56                   	push   esi
c001b9cf:	53                   	push   ebx
c001b9d0:	83 ec 14             	sub    esp,0x14
c001b9d3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b9d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9db:	85 db                	test   ebx,ebx
c001b9dd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9e1:	0f 94 c2             	sete   dl
c001b9e4:	85 f6                	test   esi,esi
c001b9e6:	0f 94 c0             	sete   al
c001b9e9:	08 c2                	or     dl,al
c001b9eb:	75 68                	jne    c001ba55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9ed:	85 c9                	test   ecx,ecx
c001b9ef:	74 64                	je     c001ba55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9f1:	83 ec 0c             	sub    esp,0xc
c001b9f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9f7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b9fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba04:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba08:	50                   	push   eax
c001ba09:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ba0c:	50                   	push   eax
c001ba0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba11:	50                   	push   eax
c001ba12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba16:	50                   	push   eax
c001ba17:	51                   	push   ecx
c001ba18:	e8 64 fe ff ff       	call   c001b881 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba1d:	83 c4 20             	add    esp,0x20
c001ba20:	ba 01 00 00 00       	mov    edx,0x1
c001ba25:	84 c0                	test   al,al
c001ba27:	74 31                	je     c001ba5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba34:	89 03                	mov    DWORD PTR [ebx],eax
c001ba36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba3a:	85 c0                	test   eax,eax
c001ba3c:	ba 00 00 00 00       	mov    edx,0x0
c001ba41:	0f 95 06             	setne  BYTE PTR [esi]
c001ba44:	74 14                	je     c001ba5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba46:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ba4c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba53:	eb 05                	jmp    c001ba5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba55:	ba 04 00 00 00       	mov    edx,0x4
c001ba5a:	83 c4 14             	add    esp,0x14
c001ba5d:	89 d0                	mov    eax,edx
c001ba5f:	5b                   	pop    ebx
c001ba60:	5e                   	pop    esi
c001ba61:	c3                   	ret    

c001ba62 <ISO9660::openDir(char const*, void**)>:
c001ba62:	57                   	push   edi
c001ba63:	56                   	push   esi
c001ba64:	53                   	push   ebx
c001ba65:	83 ec 10             	sub    esp,0x10
c001ba68:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba6c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba70:	85 f6                	test   esi,esi
c001ba72:	0f 84 95 00 00 00    	je     c001bb0d <ISO9660::openDir(char const*, void**)+0xab>
c001ba78:	85 ff                	test   edi,edi
c001ba7a:	0f 84 8d 00 00 00    	je     c001bb0d <ISO9660::openDir(char const*, void**)+0xab>
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	6a 1c                	push   0x1c
c001ba85:	e8 4f 05 ff ff       	call   c000bfd9 <malloc>
c001ba8a:	89 07                	mov    DWORD PTR [edi],eax
c001ba8c:	89 c3                	mov    ebx,eax
c001ba8e:	59                   	pop    ecx
c001ba8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba93:	50                   	push   eax
c001ba94:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba97:	50                   	push   eax
c001ba98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba9c:	50                   	push   eax
c001ba9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baa1:	50                   	push   eax
c001baa2:	56                   	push   esi
c001baa3:	e8 d9 fd ff ff       	call   c001b881 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baa8:	83 c4 20             	add    esp,0x20
c001baab:	84 c0                	test   al,al
c001baad:	74 07                	je     c001bab6 <ISO9660::openDir(char const*, void**)+0x54>
c001baaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bab4:	75 21                	jne    c001bad7 <ISO9660::openDir(char const*, void**)+0x75>
c001bab6:	52                   	push   edx
c001bab7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001babb:	0f b6 c0             	movzx  eax,al
c001babe:	50                   	push   eax
c001babf:	68 b6 31 02 c0       	push   0xc00231b6
c001bac4:	e8 7e 36 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001bac9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bacd:	83 c4 10             	add    esp,0x10
c001bad0:	b8 01 00 00 00       	mov    eax,0x1
c001bad5:	eb 3b                	jmp    c001bb12 <ISO9660::openDir(char const*, void**)+0xb0>
c001bad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001badf:	89 03                	mov    DWORD PTR [ebx],eax
c001bae1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001baf3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bafa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bafd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bb04:	8a 06                	mov    al,BYTE PTR [esi]
c001bb06:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bb09:	31 c0                	xor    eax,eax
c001bb0b:	eb 05                	jmp    c001bb12 <ISO9660::openDir(char const*, void**)+0xb0>
c001bb0d:	b8 04 00 00 00       	mov    eax,0x4
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	5b                   	pop    ebx
c001bb16:	5e                   	pop    esi
c001bb17:	5f                   	pop    edi
c001bb18:	c3                   	ret    
c001bb19:	90                   	nop

c001bb1a <ISO9660::ISO9660()>:
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb21:	83 ec 0c             	sub    esp,0xc
c001bb24:	50                   	push   eax
c001bb25:	e8 2a 39 ff ff       	call   c000f454 <Filesystem::Filesystem()>
c001bb2a:	83 c4 10             	add    esp,0x10
c001bb2d:	ba dc 31 02 c0       	mov    edx,0xc00231dc
c001bb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb36:	89 10                	mov    DWORD PTR [eax],edx
c001bb38:	90                   	nop
c001bb39:	83 c4 0c             	add    esp,0xc
c001bb3c:	c3                   	ret    
c001bb3d:	90                   	nop

c001bb3e <SoundChannel::~SoundChannel()>:
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb45:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bb48:	83 ec 0c             	sub    esp,0xc
c001bb4b:	50                   	push   eax
c001bb4c:	e8 98 04 ff ff       	call   c000bfe9 <free>
c001bb51:	83 c4 10             	add    esp,0x10
c001bb54:	90                   	nop
c001bb55:	83 c4 0c             	add    esp,0xc
c001bb58:	c3                   	ret    
c001bb59:	90                   	nop

c001bb5a <SoundChannel::setSpeed(float)>:
c001bb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb5e:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bb62:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bb65:	c3                   	ret    

c001bb66 <SoundChannel::getSpeed()>:
c001bb66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb6a:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bb6d:	c3                   	ret    

c001bb6e <SoundChannel::setVolume(int)>:
c001bb6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb72:	83 f8 64             	cmp    eax,0x64
c001bb75:	7e 05                	jle    c001bb7c <SoundChannel::setVolume(int)+0xe>
c001bb77:	b8 64 00 00 00       	mov    eax,0x64
c001bb7c:	85 c0                	test   eax,eax
c001bb7e:	79 02                	jns    c001bb82 <SoundChannel::setVolume(int)+0x14>
c001bb80:	31 c0                	xor    eax,eax
c001bb82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb86:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bb89:	c3                   	ret    

c001bb8a <SoundChannel::getVolume()>:
c001bb8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb91:	c3                   	ret    

c001bb92 <SoundChannel::pause()>:
c001bb92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb96:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bb9a:	c3                   	ret    
c001bb9b:	90                   	nop

c001bb9c <SoundChannel::SoundChannel(int, int, int, int)>:
c001bb9c:	83 ec 1c             	sub    esp,0x1c
c001bb9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bba3:	e8 ea ff ff ff       	call   c001bb92 <SoundChannel::pause()>
c001bba8:	83 c4 04             	add    esp,0x4
c001bbab:	6a 50                	push   0x50
c001bbad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbb1:	e8 b8 ff ff ff       	call   c001bb6e <SoundChannel::setVolume(int)>
c001bbb6:	83 c4 08             	add    esp,0x8
c001bbb9:	d9 e8                	fld1   
c001bbbb:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bbbf:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bbc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbc6:	e8 8f ff ff ff       	call   c001bb5a <SoundChannel::setSpeed(float)>
c001bbcb:	83 c4 08             	add    esp,0x8
c001bbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbd6:	89 10                	mov    DWORD PTR [eax],edx
c001bbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbe0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbe7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbeb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbee:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bbf3:	75 26                	jne    c001bc1b <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf9:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc02:	0f af c2             	imul   eax,edx
c001bc05:	89 c2                	mov    edx,eax
c001bc07:	c1 fa 1f             	sar    edx,0x1f
c001bc0a:	83 e2 03             	and    edx,0x3
c001bc0d:	01 d0                	add    eax,edx
c001bc0f:	c1 f8 02             	sar    eax,0x2
c001bc12:	05 a0 0f 00 00       	add    eax,0xfa0
c001bc17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bc23:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc2a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc35:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc43:	c1 e0 02             	shl    eax,0x2
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	50                   	push   eax
c001bc4a:	e8 8a 03 ff ff       	call   c000bfd9 <malloc>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	89 c2                	mov    edx,eax
c001bc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc58:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc5b:	83 ec 04             	sub    esp,0x4
c001bc5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc62:	50                   	push   eax
c001bc63:	6a 01                	push   0x1
c001bc65:	6a 04                	push   0x4
c001bc67:	e8 76 cc fe ff       	call   c00088e2 <src_new>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	89 c2                	mov    edx,eax
c001bc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc7c:	85 c0                	test   eax,eax
c001bc7e:	74 10                	je     c001bc90 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bc80:	83 ec 0c             	sub    esp,0xc
c001bc83:	68 38 32 02 c0       	push   0xc0023238
c001bc88:	e8 e9 9c ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001bc8d:	83 c4 10             	add    esp,0x10
c001bc90:	90                   	nop
c001bc91:	83 c4 1c             	add    esp,0x1c
c001bc94:	c3                   	ret    
c001bc95:	90                   	nop

c001bc96 <SoundChannel::play()>:
c001bc96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc9a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bc9e:	c3                   	ret    
c001bc9f:	90                   	nop

c001bca0 <SoundChannel::paused()>:
c001bca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca4:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bca7:	c3                   	ret    

c001bca8 <SoundChannel::getSampleRate()>:
c001bca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcac:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcae:	c3                   	ret    
c001bcaf:	90                   	nop

c001bcb0 <SoundChannel::getBits()>:
c001bcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcb7:	c3                   	ret    

c001bcb8 <SoundChannel::getBufferUsed()>:
c001bcb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcbc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bcbf:	c3                   	ret    

c001bcc0 <SoundChannel::getBufferSize()>:
c001bcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bcc7:	c3                   	ret    

c001bcc8 <SoundChannel::unbuffer(float*, int, int)>:
c001bcc8:	53                   	push   ebx
c001bcc9:	83 ec 40             	sub    esp,0x40
c001bccc:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bcd0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bcd8:	db 03                	fild   DWORD PTR [ebx]
c001bcda:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bcde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bce1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bce5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bcf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bcf4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bcf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd00:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bd03:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bd07:	50                   	push   eax
c001bd08:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bd0b:	e8 8c c8 fe ff       	call   c000859c <src_process>
c001bd10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bd17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bd1a:	83 c4 0c             	add    esp,0xc
c001bd1d:	29 d0                	sub    eax,edx
c001bd1f:	c1 e0 02             	shl    eax,0x2
c001bd22:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bd25:	50                   	push   eax
c001bd26:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bd29:	50                   	push   eax
c001bd2a:	51                   	push   ecx
c001bd2b:	e8 1c 49 fe ff       	call   c000064c <memmove>
c001bd30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd34:	83 c4 48             	add    esp,0x48
c001bd37:	5b                   	pop    ebx
c001bd38:	c3                   	ret    
c001bd39:	90                   	nop

c001bd3a <SoundChannel::buffer8(unsigned char*, int)>:
c001bd3a:	53                   	push   ebx
c001bd3b:	31 c0                	xor    eax,eax
c001bd3d:	83 ec 08             	sub    esp,0x8
c001bd40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd44:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bd47:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bd4a:	74 35                	je     c001bd81 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd4c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bd50:	7d 2f                	jge    c001bd81 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd56:	d9 05 54 32 02 c0    	fld    DWORD PTR ds:0xc0023254
c001bd5c:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bd60:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bd65:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bd68:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bd6c:	40                   	inc    eax
c001bd6d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd70:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bd73:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bd76:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bd79:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd7c:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bd7f:	eb c9                	jmp    c001bd4a <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bd81:	83 c4 08             	add    esp,0x8
c001bd84:	5b                   	pop    ebx
c001bd85:	c3                   	ret    

c001bd86 <SoundDevice::SoundDevice(char const*)>:
c001bd86:	83 ec 1c             	sub    esp,0x1c
c001bd89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd8d:	83 ec 08             	sub    esp,0x8
c001bd90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd94:	50                   	push   eax
c001bd95:	e8 b2 49 ff ff       	call   c001074c <Device::Device(char const*)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	ba 60 32 02 c0       	mov    edx,0xc0023260
c001bda2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bda6:	89 10                	mov    DWORD PTR [eax],edx
c001bda8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdac:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bdb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bdc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bdcc:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bdd1:	7f 19                	jg     c001bdec <SoundDevice::SoundDevice(char const*)+0x66>
c001bdd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bddb:	83 c2 54             	add    edx,0x54
c001bdde:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bde6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bdea:	eb e0                	jmp    c001bdcc <SoundDevice::SoundDevice(char const*)+0x46>
c001bdec:	90                   	nop
c001bded:	83 c4 1c             	add    esp,0x1c
c001bdf0:	c3                   	ret    
c001bdf1:	90                   	nop

c001bdf2 <SoundDevice::~SoundDevice()>:
c001bdf2:	53                   	push   ebx
c001bdf3:	83 ec 18             	sub    esp,0x18
c001bdf6:	ba 60 32 02 c0       	mov    edx,0xc0023260
c001bdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdff:	89 10                	mov    DWORD PTR [eax],edx
c001be01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be09:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001be0e:	7f 46                	jg     c001be56 <SoundDevice::~SoundDevice()+0x64>
c001be10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be18:	83 c2 54             	add    edx,0x54
c001be1b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001be1f:	85 c0                	test   eax,eax
c001be21:	74 2d                	je     c001be50 <SoundDevice::~SoundDevice()+0x5e>
c001be23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be2b:	83 c2 54             	add    edx,0x54
c001be2e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001be32:	85 db                	test   ebx,ebx
c001be34:	74 1a                	je     c001be50 <SoundDevice::~SoundDevice()+0x5e>
c001be36:	83 ec 0c             	sub    esp,0xc
c001be39:	53                   	push   ebx
c001be3a:	e8 ff fc ff ff       	call   c001bb3e <SoundChannel::~SoundChannel()>
c001be3f:	83 c4 10             	add    esp,0x10
c001be42:	83 ec 08             	sub    esp,0x8
c001be45:	6a 2c                	push   0x2c
c001be47:	53                   	push   ebx
c001be48:	e8 d4 31 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001be54:	eb b3                	jmp    c001be09 <SoundDevice::~SoundDevice()+0x17>
c001be56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	50                   	push   eax
c001be5e:	e8 9f 45 ff ff       	call   c0010402 <Device::~Device()>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	90                   	nop
c001be67:	83 c4 18             	add    esp,0x18
c001be6a:	5b                   	pop    ebx
c001be6b:	c3                   	ret    

c001be6c <SoundDevice::~SoundDevice()>:
c001be6c:	83 ec 0c             	sub    esp,0xc
c001be6f:	83 ec 0c             	sub    esp,0xc
c001be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be76:	e8 77 ff ff ff       	call   c001bdf2 <SoundDevice::~SoundDevice()>
c001be7b:	83 c4 10             	add    esp,0x10
c001be7e:	83 ec 08             	sub    esp,0x8
c001be81:	68 e4 01 00 00       	push   0x1e4
c001be86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be8a:	e8 92 31 ff ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	83 c4 0c             	add    esp,0xc
c001be95:	c3                   	ret    

c001be96 <SoundDevice::getFreeChannelNum()>:
c001be96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be9a:	31 c0                	xor    eax,eax
c001be9c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bea4:	74 09                	je     c001beaf <SoundDevice::getFreeChannelNum()+0x19>
c001bea6:	40                   	inc    eax
c001bea7:	83 f8 20             	cmp    eax,0x20
c001beaa:	75 f0                	jne    c001be9c <SoundDevice::getFreeChannelNum()+0x6>
c001beac:	83 c8 ff             	or     eax,0xffffffff
c001beaf:	c3                   	ret    

c001beb0 <SoundDevice::addChannel(SoundChannel*)>:
c001beb0:	56                   	push   esi
c001beb1:	53                   	push   ebx
c001beb2:	51                   	push   ecx
c001beb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bebb:	53                   	push   ebx
c001bebc:	e8 d5 ff ff ff       	call   c001be96 <SoundDevice::getFreeChannelNum()>
c001bec1:	5a                   	pop    edx
c001bec2:	83 f8 ff             	cmp    eax,0xffffffff
c001bec5:	74 51                	je     c001bf18 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bec7:	85 f6                	test   esi,esi
c001bec9:	74 4d                	je     c001bf18 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001becb:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bed2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bed9:	75 30                	jne    c001bf0b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	56                   	push   esi
c001bedf:	e8 c4 fd ff ff       	call   c001bca8 <SoundChannel::getSampleRate()>
c001bee4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001beea:	89 34 24             	mov    DWORD PTR [esp],esi
c001beed:	e8 be fd ff ff       	call   c001bcb0 <SoundChannel::getBits()>
c001bef2:	83 c4 0c             	add    esp,0xc
c001bef5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001befb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001befd:	50                   	push   eax
c001befe:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bf04:	53                   	push   ebx
c001bf05:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bf08:	83 c4 10             	add    esp,0x10
c001bf0b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bf11:	b8 01 00 00 00       	mov    eax,0x1
c001bf16:	eb 03                	jmp    c001bf1b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bf18:	83 c8 ff             	or     eax,0xffffffff
c001bf1b:	5a                   	pop    edx
c001bf1c:	5b                   	pop    ebx
c001bf1d:	5e                   	pop    esi
c001bf1e:	c3                   	ret    
c001bf1f:	90                   	nop

c001bf20 <SoundDevice::removeChannel(int)>:
c001bf20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf28:	83 fa 1f             	cmp    edx,0x1f
c001bf2b:	77 23                	ja     c001bf50 <SoundDevice::removeChannel(int)+0x30>
c001bf2d:	8d 14 90             	lea    edx,[eax+edx*4]
c001bf30:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bf37:	74 17                	je     c001bf50 <SoundDevice::removeChannel(int)+0x30>
c001bf39:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bf43:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bf49:	75 05                	jne    c001bf50 <SoundDevice::removeChannel(int)+0x30>
c001bf4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf4d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bf50:	c3                   	ret    
c001bf51:	90                   	nop

c001bf52 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bf52:	56                   	push   esi
c001bf53:	53                   	push   ebx
c001bf54:	31 db                	xor    ebx,ebx
c001bf56:	83 ec 14             	sub    esp,0x14
c001bf59:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bf5d:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bf61:	7d 55                	jge    c001bfb8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bf63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf67:	d9 e8                	fld1   
c001bf69:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bf6c:	d8 0d 90 32 02 c0    	fmul   DWORD PTR ds:0xc0023290
c001bf72:	d8 0d 94 32 02 c0    	fmul   DWORD PTR ds:0xc0023294
c001bf78:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bf7c:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf80:	d8 15 98 32 02 c0    	fcom   DWORD PTR ds:0xc0023298
c001bf86:	df e0                	fnstsw ax
c001bf88:	9e                   	sahf   
c001bf89:	72 08                	jb     c001bf93 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bf8b:	dd d8                	fstp   st(0)
c001bf8d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bf91:	eb 22                	jmp    c001bfb5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bf93:	d9 ee                	fldz   
c001bf95:	d8 d9                	fcomp  st(1)
c001bf97:	df e0                	fnstsw ax
c001bf99:	9e                   	sahf   
c001bf9a:	72 08                	jb     c001bfa4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bf9c:	dd d8                	fstp   st(0)
c001bf9e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bfa2:	eb 11                	jmp    c001bfb5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bfa4:	83 ec 10             	sub    esp,0x10
c001bfa7:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bfaa:	e8 9d 36 00 00       	call   c001f64c <lrintf>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bfb5:	43                   	inc    ebx
c001bfb6:	eb a5                	jmp    c001bf5d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bfb8:	83 c4 14             	add    esp,0x14
c001bfbb:	5b                   	pop    ebx
c001bfbc:	5e                   	pop    esi
c001bfbd:	c3                   	ret    

c001bfbe <SoundDevice::getAudio(int, float*, float*)>:
c001bfbe:	55                   	push   ebp
c001bfbf:	57                   	push   edi
c001bfc0:	56                   	push   esi
c001bfc1:	53                   	push   ebx
c001bfc2:	31 db                	xor    ebx,ebx
c001bfc4:	83 ec 20             	sub    esp,0x20
c001bfc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bfcf:	c1 e0 02             	shl    eax,0x2
c001bfd2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bfd6:	50                   	push   eax
c001bfd7:	6a 00                	push   0x0
c001bfd9:	55                   	push   ebp
c001bfda:	e8 db 46 fe ff       	call   c00006ba <memset>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bfe6:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bfed:	85 c0                	test   eax,eax
c001bfef:	0f 84 8c 00 00 00    	je     c001c081 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	50                   	push   eax
c001bff9:	e8 a2 fc ff ff       	call   c001bca0 <SoundChannel::paused()>
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	84 c0                	test   al,al
c001c003:	75 7c                	jne    c001c081 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c005:	83 ec 0c             	sub    esp,0xc
c001c008:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c00f:	e8 76 fb ff ff       	call   c001bb8a <SoundChannel::getVolume()>
c001c014:	83 c4 10             	add    esp,0x10
c001c017:	85 c0                	test   eax,eax
c001c019:	74 66                	je     c001c081 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c01b:	83 ec 0c             	sub    esp,0xc
c001c01e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c025:	e8 60 fb ff ff       	call   c001bb8a <SoundChannel::getVolume()>
c001c02a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c02e:	d9 05 9c 32 02 c0    	fld    DWORD PTR ds:0xc002329c
c001c034:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c038:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c03c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c040:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c046:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c04a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c051:	e8 72 fc ff ff       	call   c001bcc8 <SoundChannel::unbuffer(float*, int, int)>
c001c056:	83 c4 20             	add    esp,0x20
c001c059:	31 d2                	xor    edx,edx
c001c05b:	39 c2                	cmp    edx,eax
c001c05d:	7d 1c                	jge    c001c07b <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c05f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c063:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c067:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c06a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c070:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c074:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c078:	42                   	inc    edx
c001c079:	eb e0                	jmp    c001c05b <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c07b:	39 c7                	cmp    edi,eax
c001c07d:	7e 02                	jle    c001c081 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c07f:	89 c7                	mov    edi,eax
c001c081:	43                   	inc    ebx
c001c082:	83 fb 20             	cmp    ebx,0x20
c001c085:	0f 85 5b ff ff ff    	jne    c001bfe6 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c08b:	83 c4 1c             	add    esp,0x1c
c001c08e:	89 f8                	mov    eax,edi
c001c090:	5b                   	pop    ebx
c001c091:	5e                   	pop    esi
c001c092:	5f                   	pop    edi
c001c093:	5d                   	pop    ebp
c001c094:	c3                   	ret    
c001c095:	90                   	nop

c001c096 <PCI::open(int, int, void*)>:
c001c096:	83 ec 18             	sub    esp,0x18
c001c099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c09d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c09f:	50                   	push   eax
c001c0a0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c0a3:	31 c0                	xor    eax,eax
c001c0a5:	83 c4 1c             	add    esp,0x1c
c001c0a8:	c3                   	ret    
c001c0a9:	90                   	nop

c001c0aa <PCI::close(int, int, void*)>:
c001c0aa:	31 c0                	xor    eax,eax
c001c0ac:	c3                   	ret    
c001c0ad:	90                   	nop

c001c0ae <PCI::PCI()>:
c001c0ae:	83 ec 0c             	sub    esp,0xc
c001c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b5:	83 ec 08             	sub    esp,0x8
c001c0b8:	68 a0 32 02 c0       	push   0xc00232a0
c001c0bd:	50                   	push   eax
c001c0be:	e8 13 3d ff ff       	call   c000fdd6 <Bus::Bus(char const*)>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c001c0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cf:	89 10                	mov    DWORD PTR [eax],edx
c001c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0db:	0f b6 d0             	movzx  edx,al
c001c0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0f3:	0f b6 d0             	movzx  edx,al
c001c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fa:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c103:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c109:	8d 50 01             	lea    edx,[eax+0x1]
c001c10c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c110:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c116:	0f b6 d0             	movzx  edx,al
c001c119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c121:	83 c9 c0             	or     ecx,0xffffffc0
c001c124:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c128:	90                   	nop
c001c129:	83 c4 0c             	add    esp,0xc
c001c12c:	c3                   	ret    
c001c12d:	90                   	nop

c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c12e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c132:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c137:	89 ca                	mov    edx,ecx
c001c139:	c1 e0 10             	shl    eax,0x10
c001c13c:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c142:	09 d0                	or     eax,edx
c001c144:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c149:	c1 e2 08             	shl    edx,0x8
c001c14c:	09 d0                	or     eax,edx
c001c14e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c153:	c1 e2 0b             	shl    edx,0xb
c001c156:	09 d0                	or     eax,edx
c001c158:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c15d:	0d 00 00 00 80       	or     eax,0x80000000
c001c162:	ef                   	out    dx,eax
c001c163:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c168:	ed                   	in     eax,dx
c001c169:	83 e1 02             	and    ecx,0x2
c001c16c:	0f b6 c9             	movzx  ecx,cl
c001c16f:	c1 e1 03             	shl    ecx,0x3
c001c172:	d3 e8                	shr    eax,cl
c001c174:	c3                   	ret    
c001c175:	90                   	nop

c001c176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c176:	6a 00                	push   0x0
c001c178:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c17d:	50                   	push   eax
c001c17e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c183:	50                   	push   eax
c001c184:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c189:	50                   	push   eax
c001c18a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c18e:	e8 9b ff ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c193:	83 c4 14             	add    esp,0x14
c001c196:	c3                   	ret    
c001c197:	90                   	nop

c001c198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c198:	6a 0e                	push   0xe
c001c19a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c19f:	50                   	push   eax
c001c1a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1a5:	50                   	push   eax
c001c1a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1ab:	50                   	push   eax
c001c1ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1b0:	e8 79 ff ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1b5:	83 c4 14             	add    esp,0x14
c001c1b8:	0f b6 c0             	movzx  eax,al
c001c1bb:	c3                   	ret    

c001c1bc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c1bc:	55                   	push   ebp
c001c1bd:	57                   	push   edi
c001c1be:	56                   	push   esi
c001c1bf:	53                   	push   ebx
c001c1c0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c1c5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c1ca:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c1cf:	6a 0a                	push   0xa
c001c1d1:	56                   	push   esi
c001c1d2:	55                   	push   ebp
c001c1d3:	57                   	push   edi
c001c1d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1d8:	e8 51 ff ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1dd:	6a 0a                	push   0xa
c001c1df:	89 c3                	mov    ebx,eax
c001c1e1:	56                   	push   esi
c001c1e2:	0f b6 db             	movzx  ebx,bl
c001c1e5:	55                   	push   ebp
c001c1e6:	57                   	push   edi
c001c1e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c1eb:	e8 3e ff ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1f0:	83 c4 28             	add    esp,0x28
c001c1f3:	25 00 ff 00 00       	and    eax,0xff00
c001c1f8:	09 d8                	or     eax,ebx
c001c1fa:	5b                   	pop    ebx
c001c1fb:	5e                   	pop    esi
c001c1fc:	5f                   	pop    edi
c001c1fd:	5d                   	pop    ebp
c001c1fe:	c3                   	ret    
c001c1ff:	90                   	nop

c001c200 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c200:	6a 08                	push   0x8
c001c202:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c207:	50                   	push   eax
c001c208:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c20d:	50                   	push   eax
c001c20e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c213:	50                   	push   eax
c001c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c218:	e8 11 ff ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c21d:	83 c4 14             	add    esp,0x14
c001c220:	0f b6 c4             	movzx  eax,ah
c001c223:	c3                   	ret    

c001c224 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c224:	6a 08                	push   0x8
c001c226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c22b:	50                   	push   eax
c001c22c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c231:	50                   	push   eax
c001c232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c237:	50                   	push   eax
c001c238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c23c:	e8 ed fe ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c241:	83 c4 14             	add    esp,0x14
c001c244:	c3                   	ret    
c001c245:	90                   	nop

c001c246 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c246:	6a 3c                	push   0x3c
c001c248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c24d:	50                   	push   eax
c001c24e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c253:	50                   	push   eax
c001c254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c259:	50                   	push   eax
c001c25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c25e:	e8 cb fe ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c263:	83 c4 14             	add    esp,0x14
c001c266:	c3                   	ret    
c001c267:	90                   	nop

c001c268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c268:	6a 18                	push   0x18
c001c26a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26f:	50                   	push   eax
c001c270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c275:	50                   	push   eax
c001c276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27b:	50                   	push   eax
c001c27c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c280:	e8 a9 fe ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c285:	83 c4 14             	add    esp,0x14
c001c288:	0f b6 c4             	movzx  eax,ah
c001c28b:	c3                   	ret    

c001c28c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c28c:	55                   	push   ebp
c001c28d:	57                   	push   edi
c001c28e:	56                   	push   esi
c001c28f:	53                   	push   ebx
c001c290:	50                   	push   eax
c001c291:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c295:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c29a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c29f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c2a4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c2ab:	8d 43 12             	lea    eax,[ebx+0x12]
c001c2ae:	83 c3 10             	add    ebx,0x10
c001c2b1:	0f b6 c0             	movzx  eax,al
c001c2b4:	0f b6 db             	movzx  ebx,bl
c001c2b7:	50                   	push   eax
c001c2b8:	51                   	push   ecx
c001c2b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2bd:	57                   	push   edi
c001c2be:	55                   	push   ebp
c001c2bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c2c3:	e8 66 fe ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c8:	53                   	push   ebx
c001c2c9:	89 c6                	mov    esi,eax
c001c2cb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2cf:	c1 e6 10             	shl    esi,0x10
c001c2d2:	51                   	push   ecx
c001c2d3:	57                   	push   edi
c001c2d4:	55                   	push   ebp
c001c2d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2d9:	e8 50 fe ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2de:	83 c4 2c             	add    esp,0x2c
c001c2e1:	0f b7 c0             	movzx  eax,ax
c001c2e4:	5b                   	pop    ebx
c001c2e5:	09 f0                	or     eax,esi
c001c2e7:	5e                   	pop    esi
c001c2e8:	5f                   	pop    edi
c001c2e9:	5d                   	pop    ebp
c001c2ea:	c3                   	ret    
c001c2eb:	90                   	nop

c001c2ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c2ec:	53                   	push   ebx
c001c2ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c2f2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c2f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2fb:	c1 e1 10             	shl    ecx,0x10
c001c2fe:	25 fc 00 00 00       	and    eax,0xfc
c001c303:	09 c1                	or     ecx,eax
c001c305:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c30a:	c1 e0 08             	shl    eax,0x8
c001c30d:	09 c1                	or     ecx,eax
c001c30f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c314:	c1 e0 0b             	shl    eax,0xb
c001c317:	09 c1                	or     ecx,eax
c001c319:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c31f:	89 c8                	mov    eax,ecx
c001c321:	ef                   	out    dx,eax
c001c322:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c327:	ed                   	in     eax,dx
c001c328:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c32d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c332:	74 0a                	je     c001c33e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c334:	0f b7 d8             	movzx  ebx,ax
c001c337:	89 d0                	mov    eax,edx
c001c339:	c1 e0 10             	shl    eax,0x10
c001c33c:	eb 05                	jmp    c001c343 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c33e:	66 31 c0             	xor    ax,ax
c001c341:	89 d3                	mov    ebx,edx
c001c343:	09 c3                	or     ebx,eax
c001c345:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c34a:	89 c8                	mov    eax,ecx
c001c34c:	ef                   	out    dx,eax
c001c34d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c352:	89 d8                	mov    eax,ebx
c001c354:	ef                   	out    dx,eax
c001c355:	5b                   	pop    ebx
c001c356:	c3                   	ret    
c001c357:	90                   	nop

c001c358 <PCI::checkBus(unsigned char)>:
c001c358:	56                   	push   esi
c001c359:	53                   	push   ebx
c001c35a:	31 db                	xor    ebx,ebx
c001c35c:	51                   	push   ecx
c001c35d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c362:	52                   	push   edx
c001c363:	53                   	push   ebx
c001c364:	43                   	inc    ebx
c001c365:	56                   	push   esi
c001c366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c36a:	e8 29 03 00 00       	call   c001c698 <PCI::checkDevice(unsigned char, unsigned char)>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	83 fb 20             	cmp    ebx,0x20
c001c375:	75 eb                	jne    c001c362 <PCI::checkBus(unsigned char)+0xa>
c001c377:	58                   	pop    eax
c001c378:	5b                   	pop    ebx
c001c379:	5e                   	pop    esi
c001c37a:	c3                   	ret    
c001c37b:	90                   	nop

c001c37c <PCI::foundDevice(PCIDeviceInfo)>:
c001c37c:	55                   	push   ebp
c001c37d:	57                   	push   edi
c001c37e:	56                   	push   esi
c001c37f:	53                   	push   ebx
c001c380:	83 ec 1c             	sub    esp,0x1c
c001c383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c387:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c38d:	0f 84 51 01 00 00    	je     c001c4e4 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c393:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c397:	66 81 f9 06 04       	cmp    cx,0x406
c001c39c:	75 2c                	jne    c001c3ca <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c39e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c3a3:	50                   	push   eax
c001c3a4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c3a9:	50                   	push   eax
c001c3aa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c3af:	50                   	push   eax
c001c3b0:	56                   	push   esi
c001c3b1:	e8 b2 fe ff ff       	call   c001c268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c3b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c3ba:	0f b6 c0             	movzx  eax,al
c001c3bd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c3c1:	83 c4 2c             	add    esp,0x2c
c001c3c4:	5b                   	pop    ebx
c001c3c5:	5e                   	pop    esi
c001c3c6:	5f                   	pop    edi
c001c3c7:	5d                   	pop    ebp
c001c3c8:	eb 8e                	jmp    c001c358 <PCI::checkBus(unsigned char)>
c001c3ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c3ce:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c3d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c3dc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c3e0:	88 d3                	mov    bl,dl
c001c3e2:	85 c0                	test   eax,eax
c001c3e4:	74 33                	je     c001c419 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c3e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3e9:	85 d2                	test   edx,edx
c001c3eb:	74 28                	je     c001c415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3ed:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c3f3:	31 ef                	xor    edi,ebp
c001c3f5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c3fb:	75 18                	jne    c001c415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c401:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c407:	75 0c                	jne    c001c415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c409:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c40f:	0f 84 cf 00 00 00    	je     c001c4e4 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c415:	8b 00                	mov    eax,DWORD PTR [eax]
c001c417:	eb c9                	jmp    c001c3e2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c419:	66 81 f9 01 06       	cmp    cx,0x601
c001c41e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c422:	75 18                	jne    c001c43c <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	68 58 01 00 00       	push   0x158
c001c42c:	e8 e1 2b ff ff       	call   c000f012 <operator new(unsigned long)>
c001c431:	59                   	pop    ecx
c001c432:	89 c5                	mov    ebp,eax
c001c434:	5f                   	pop    edi
c001c435:	68 a8 32 02 c0       	push   0xc00232a8
c001c43a:	eb 7d                	jmp    c001c4b9 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c43c:	66 81 f9 01 01       	cmp    cx,0x101
c001c441:	75 60                	jne    c001c4a3 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c443:	83 ec 0c             	sub    esp,0xc
c001c446:	68 70 02 00 00       	push   0x270
c001c44b:	e8 c2 2b ff ff       	call   c000f012 <operator new(unsigned long)>
c001c450:	89 04 24             	mov    DWORD PTR [esp],eax
c001c453:	89 c5                	mov    ebp,eax
c001c455:	e8 02 03 00 00       	call   c001c75c <IDE::IDE()>
c001c45a:	58                   	pop    eax
c001c45b:	5a                   	pop    edx
c001c45c:	55                   	push   ebp
c001c45d:	56                   	push   esi
c001c45e:	e8 f9 40 ff ff       	call   c001055c <Device::addChild(Device*)>
c001c463:	83 ec 1c             	sub    esp,0x1c
c001c466:	b9 09 00 00 00       	mov    ecx,0x9
c001c46b:	fc                   	cld    
c001c46c:	89 e7                	mov    edi,esp
c001c46e:	89 de                	mov    esi,ebx
c001c470:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c472:	55                   	push   ebp
c001c473:	e8 c2 3f ff ff       	call   c001043a <Device::preOpenPCI(PCIDeviceInfo)>
c001c478:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c47b:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c47f:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c487:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c48f:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c497:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c49a:	83 c4 4c             	add    esp,0x4c
c001c49d:	5b                   	pop    ebx
c001c49e:	5e                   	pop    esi
c001c49f:	5f                   	pop    edi
c001c4a0:	5d                   	pop    ebp
c001c4a1:	ff e0                	jmp    eax
c001c4a3:	83 ec 0c             	sub    esp,0xc
c001c4a6:	68 58 01 00 00       	push   0x158
c001c4ab:	e8 62 2b ff ff       	call   c000f012 <operator new(unsigned long)>
c001c4b0:	59                   	pop    ecx
c001c4b1:	89 c5                	mov    ebp,eax
c001c4b3:	5f                   	pop    edi
c001c4b4:	68 c7 32 02 c0       	push   0xc00232c7
c001c4b9:	55                   	push   ebp
c001c4ba:	e8 89 43 ff ff       	call   c0010848 <DriverlessDevice::DriverlessDevice(char const*)>
c001c4bf:	58                   	pop    eax
c001c4c0:	5a                   	pop    edx
c001c4c1:	55                   	push   ebp
c001c4c2:	56                   	push   esi
c001c4c3:	e8 94 40 ff ff       	call   c001055c <Device::addChild(Device*)>
c001c4c8:	b9 09 00 00 00       	mov    ecx,0x9
c001c4cd:	fc                   	cld    
c001c4ce:	89 df                	mov    edi,ebx
c001c4d0:	89 de                	mov    esi,ebx
c001c4d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4d4:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c4d8:	83 c4 2c             	add    esp,0x2c
c001c4db:	5b                   	pop    ebx
c001c4dc:	5e                   	pop    esi
c001c4dd:	5f                   	pop    edi
c001c4de:	5d                   	pop    ebp
c001c4df:	e9 56 3f ff ff       	jmp    c001043a <Device::preOpenPCI(PCIDeviceInfo)>
c001c4e4:	83 c4 1c             	add    esp,0x1c
c001c4e7:	5b                   	pop    ebx
c001c4e8:	5e                   	pop    esi
c001c4e9:	5f                   	pop    edi
c001c4ea:	5d                   	pop    ebp
c001c4eb:	c3                   	ret    

c001c4ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c4ec:	55                   	push   ebp
c001c4ed:	57                   	push   edi
c001c4ee:	56                   	push   esi
c001c4ef:	53                   	push   ebx
c001c4f0:	83 ec 5c             	sub    esp,0x5c
c001c4f3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c4f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4fb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c4ff:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c504:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c508:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c50c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c511:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c515:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c51a:	6a 0c                	push   0xc
c001c51c:	55                   	push   ebp
c001c51d:	53                   	push   ebx
c001c51e:	57                   	push   edi
c001c51f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c526:	e8 03 fc ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c52b:	55                   	push   ebp
c001c52c:	53                   	push   ebx
c001c52d:	57                   	push   edi
c001c52e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c535:	e8 82 fc ff ff       	call   c001c1bc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c53a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c53f:	83 c4 24             	add    esp,0x24
c001c542:	55                   	push   ebp
c001c543:	53                   	push   ebx
c001c544:	57                   	push   edi
c001c545:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c549:	e8 f8 fc ff ff       	call   c001c246 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c54e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c552:	6a 3c                	push   0x3c
c001c554:	55                   	push   ebp
c001c555:	53                   	push   ebx
c001c556:	57                   	push   edi
c001c557:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c55e:	e8 cb fb ff ff       	call   c001c12e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c563:	0f b6 c4             	movzx  eax,ah
c001c566:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c56a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c56e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c572:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001c577:	83 c4 24             	add    esp,0x24
c001c57a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c580:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c587:	74 6c                	je     c001c5f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c589:	31 f6                	xor    esi,esi
c001c58b:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c001c591:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c597:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c59d:	7e 56                	jle    c001c5f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c59f:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c5a2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c5a9:	39 cb                	cmp    ebx,ecx
c001c5ab:	75 45                	jne    c001c5f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c5ad:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c5b4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c5b8:	75 38                	jne    c001c5f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	68 e1 32 02 c0       	push   0xc00232e1
c001c5c2:	e8 80 2b ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001c5c7:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c001c5cd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c5d3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c5db:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c5df:	52                   	push   edx
c001c5e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5e4:	53                   	push   ebx
c001c5e5:	68 06 33 02 c0       	push   0xc0023306
c001c5ea:	e8 58 2b ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001c5ef:	83 c4 20             	add    esp,0x20
c001c5f2:	46                   	inc    esi
c001c5f3:	eb 96                	jmp    c001c58b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c5f5:	31 d2                	xor    edx,edx
c001c5f7:	83 ec 0c             	sub    esp,0xc
c001c5fa:	55                   	push   ebp
c001c5fb:	53                   	push   ebx
c001c5fc:	57                   	push   edi
c001c5fd:	52                   	push   edx
c001c5fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c602:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c609:	e8 7e fc ff ff       	call   c001c28c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c60e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c612:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c616:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c61a:	42                   	inc    edx
c001c61b:	83 c4 20             	add    esp,0x20
c001c61e:	83 fa 06             	cmp    edx,0x6
c001c621:	75 d4                	jne    c001c5f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c623:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c627:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c62b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c62f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c633:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c637:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c63b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c640:	86 e0                	xchg   al,ah
c001c642:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c647:	55                   	push   ebp
c001c648:	53                   	push   ebx
c001c649:	57                   	push   edi
c001c64a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c64e:	e8 ad fb ff ff       	call   c001c200 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c653:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c657:	55                   	push   ebp
c001c658:	53                   	push   ebx
c001c659:	57                   	push   edi
c001c65a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c661:	e8 10 fb ff ff       	call   c001c176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c66e:	b9 09 00 00 00       	mov    ecx,0x9
c001c673:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c677:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c67b:	fc                   	cld    
c001c67c:	89 e7                	mov    edi,esp
c001c67e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c680:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c687:	e8 f0 fc ff ff       	call   c001c37c <PCI::foundDevice(PCIDeviceInfo)>
c001c68c:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	5d                   	pop    ebp
c001c696:	c3                   	ret    
c001c697:	90                   	nop

c001c698 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c698:	55                   	push   ebp
c001c699:	57                   	push   edi
c001c69a:	56                   	push   esi
c001c69b:	53                   	push   ebx
c001c69c:	83 ec 0c             	sub    esp,0xc
c001c69f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c6a3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c6a8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c6ad:	6a 00                	push   0x0
c001c6af:	56                   	push   esi
c001c6b0:	57                   	push   edi
c001c6b1:	55                   	push   ebp
c001c6b2:	e8 bf fa ff ff       	call   c001c176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6b7:	6a 00                	push   0x0
c001c6b9:	56                   	push   esi
c001c6ba:	57                   	push   edi
c001c6bb:	55                   	push   ebp
c001c6bc:	e8 2b fe ff ff       	call   c001c4ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c6c1:	83 c4 20             	add    esp,0x20
c001c6c4:	6a 00                	push   0x0
c001c6c6:	56                   	push   esi
c001c6c7:	57                   	push   edi
c001c6c8:	55                   	push   ebp
c001c6c9:	e8 ca fa ff ff       	call   c001c198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6ce:	83 c4 10             	add    esp,0x10
c001c6d1:	84 c0                	test   al,al
c001c6d3:	79 27                	jns    c001c6fc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c6d5:	bb 01 00 00 00       	mov    ebx,0x1
c001c6da:	53                   	push   ebx
c001c6db:	56                   	push   esi
c001c6dc:	57                   	push   edi
c001c6dd:	55                   	push   ebp
c001c6de:	e8 93 fa ff ff       	call   c001c176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6e3:	83 c4 10             	add    esp,0x10
c001c6e6:	66 40                	inc    ax
c001c6e8:	74 0c                	je     c001c6f6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c6ea:	53                   	push   ebx
c001c6eb:	56                   	push   esi
c001c6ec:	57                   	push   edi
c001c6ed:	55                   	push   ebp
c001c6ee:	e8 f9 fd ff ff       	call   c001c4ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	43                   	inc    ebx
c001c6f7:	83 fb 08             	cmp    ebx,0x8
c001c6fa:	75 de                	jne    c001c6da <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c6fc:	83 c4 0c             	add    esp,0xc
c001c6ff:	5b                   	pop    ebx
c001c700:	5e                   	pop    esi
c001c701:	5f                   	pop    edi
c001c702:	5d                   	pop    ebp
c001c703:	c3                   	ret    

c001c704 <PCI::detect()>:
c001c704:	56                   	push   esi
c001c705:	53                   	push   ebx
c001c706:	53                   	push   ebx
c001c707:	31 db                	xor    ebx,ebx
c001c709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c70d:	6a 00                	push   0x0
c001c70f:	6a 00                	push   0x0
c001c711:	6a 00                	push   0x0
c001c713:	56                   	push   esi
c001c714:	e8 7f fa ff ff       	call   c001c198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	a8 80                	test   al,0x80
c001c71e:	75 21                	jne    c001c741 <PCI::detect()+0x3d>
c001c720:	51                   	push   ecx
c001c721:	51                   	push   ecx
c001c722:	6a 00                	push   0x0
c001c724:	56                   	push   esi
c001c725:	e8 2e fc ff ff       	call   c001c358 <PCI::checkBus(unsigned char)>
c001c72a:	83 c4 10             	add    esp,0x10
c001c72d:	eb 24                	jmp    c001c753 <PCI::detect()+0x4f>
c001c72f:	52                   	push   edx
c001c730:	52                   	push   edx
c001c731:	53                   	push   ebx
c001c732:	43                   	inc    ebx
c001c733:	56                   	push   esi
c001c734:	e8 1f fc ff ff       	call   c001c358 <PCI::checkBus(unsigned char)>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	83 fb 08             	cmp    ebx,0x8
c001c73f:	74 12                	je     c001c753 <PCI::detect()+0x4f>
c001c741:	53                   	push   ebx
c001c742:	6a 00                	push   0x0
c001c744:	6a 00                	push   0x0
c001c746:	56                   	push   esi
c001c747:	e8 2a fa ff ff       	call   c001c176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c74c:	83 c4 10             	add    esp,0x10
c001c74f:	66 40                	inc    ax
c001c751:	74 dc                	je     c001c72f <PCI::detect()+0x2b>
c001c753:	58                   	pop    eax
c001c754:	5b                   	pop    ebx
c001c755:	5e                   	pop    esi
c001c756:	c3                   	ret    
c001c757:	90                   	nop

c001c758 <IDE::close(int, int, void*)>:
c001c758:	83 c8 ff             	or     eax,0xffffffff
c001c75b:	c3                   	ret    

c001c75c <IDE::IDE()>:
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c763:	83 ec 08             	sub    esp,0x8
c001c766:	68 50 33 02 c0       	push   0xc0023350
c001c76b:	50                   	push   eax
c001c76c:	e8 6d 41 ff ff       	call   c00108de <HardDiskController::HardDiskController(char const*)>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	ba 90 35 02 c0       	mov    edx,0xc0023590
c001c779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77d:	89 10                	mov    DWORD PTR [eax],edx
c001c77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c783:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c78a:	90                   	nop
c001c78b:	83 c4 0c             	add    esp,0xc
c001c78e:	c3                   	ret    
c001c78f:	90                   	nop

c001c790 <IDE::prepareInterrupt(unsigned char)>:
c001c790:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c795:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c799:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c7a1:	c3                   	ret    

c001c7a2 <selectDrive(unsigned char, unsigned char)>:
c001c7a2:	c3                   	ret    
c001c7a3:	90                   	nop

c001c7a4 <IDE::getBase(unsigned char)>:
c001c7a4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c7a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ad:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c7b5:	c3                   	ret    

c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c7b6:	55                   	push   ebp
c001c7b7:	57                   	push   edi
c001c7b8:	56                   	push   esi
c001c7b9:	53                   	push   ebx
c001c7ba:	83 ec 1c             	sub    esp,0x1c
c001c7bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c7c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c7c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c7c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7cd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c7d0:	80 f9 03             	cmp    cl,0x3
c001c7d3:	77 51                	ja     c001c826 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c7d5:	0f b6 f2             	movzx  esi,dl
c001c7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7dc:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c7df:	0f b6 db             	movzx  ebx,bl
c001c7e2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c7e6:	83 ca 80             	or     edx,0xffffff80
c001c7e9:	0f b6 d2             	movzx  edx,dl
c001c7ec:	52                   	push   edx
c001c7ed:	6a 0c                	push   0xc
c001c7ef:	56                   	push   esi
c001c7f0:	57                   	push   edi
c001c7f1:	e8 c0 ff ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7ff:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c803:	ee                   	out    dx,al
c001c804:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c809:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c80d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c811:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c815:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c81d:	83 c4 2c             	add    esp,0x2c
c001c820:	5b                   	pop    ebx
c001c821:	5e                   	pop    esi
c001c822:	5f                   	pop    edi
c001c823:	5d                   	pop    ebp
c001c824:	eb 90                	jmp    c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c826:	80 fb 07             	cmp    bl,0x7
c001c829:	77 12                	ja     c001c83d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c82b:	0f b6 d2             	movzx  edx,dl
c001c82e:	0f b6 db             	movzx  ebx,bl
c001c831:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c839:	89 da                	mov    edx,ebx
c001c83b:	eb 2f                	jmp    c001c86c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c83d:	80 fb 0d             	cmp    bl,0xd
c001c840:	77 13                	ja     c001c855 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c842:	0f b6 d2             	movzx  edx,dl
c001c845:	0f b6 db             	movzx  ebx,bl
c001c848:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c84f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c853:	eb 17                	jmp    c001c86c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c855:	80 fb 15             	cmp    bl,0x15
c001c858:	77 13                	ja     c001c86d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c85a:	0f b6 d2             	movzx  edx,dl
c001c85d:	0f b6 db             	movzx  ebx,bl
c001c860:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c868:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c86c:	ee                   	out    dx,al
c001c86d:	83 c4 1c             	add    esp,0x1c
c001c870:	5b                   	pop    ebx
c001c871:	5e                   	pop    esi
c001c872:	5f                   	pop    edi
c001c873:	5d                   	pop    ebp
c001c874:	c3                   	ret    
c001c875:	90                   	nop

c001c876 <IDE::read(unsigned char, unsigned char)>:
c001c876:	55                   	push   ebp
c001c877:	57                   	push   edi
c001c878:	56                   	push   esi
c001c879:	53                   	push   ebx
c001c87a:	83 ec 1c             	sub    esp,0x1c
c001c87d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c881:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c889:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c88c:	3c 03                	cmp    al,0x3
c001c88e:	77 43                	ja     c001c8d3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c890:	0f b6 f2             	movzx  esi,dl
c001c893:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c896:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c89a:	83 c8 80             	or     eax,0xffffff80
c001c89d:	0f b6 c0             	movzx  eax,al
c001c8a0:	50                   	push   eax
c001c8a1:	6a 0c                	push   0xc
c001c8a3:	56                   	push   esi
c001c8a4:	57                   	push   edi
c001c8a5:	e8 0c ff ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8aa:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c8af:	0f b6 c3             	movzx  eax,bl
c001c8b2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c8b6:	ec                   	in     al,dx
c001c8b7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c8bc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c8c0:	52                   	push   edx
c001c8c1:	6a 0c                	push   0xc
c001c8c3:	56                   	push   esi
c001c8c4:	57                   	push   edi
c001c8c5:	e8 ec fe ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ca:	83 c4 20             	add    esp,0x20
c001c8cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c8d1:	eb 49                	jmp    c001c91c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c8d3:	80 fb 07             	cmp    bl,0x7
c001c8d6:	77 12                	ja     c001c8ea <IDE::read(unsigned char, unsigned char)+0x74>
c001c8d8:	0f b6 d2             	movzx  edx,dl
c001c8db:	0f b6 c3             	movzx  eax,bl
c001c8de:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c8e6:	89 c2                	mov    edx,eax
c001c8e8:	eb 31                	jmp    c001c91b <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8ea:	80 fb 0d             	cmp    bl,0xd
c001c8ed:	77 13                	ja     c001c902 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c8ef:	0f b6 d2             	movzx  edx,dl
c001c8f2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c8f9:	0f b6 d3             	movzx  edx,bl
c001c8fc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c900:	eb 19                	jmp    c001c91b <IDE::read(unsigned char, unsigned char)+0xa5>
c001c902:	31 c0                	xor    eax,eax
c001c904:	80 fb 15             	cmp    bl,0x15
c001c907:	77 13                	ja     c001c91c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c909:	0f b6 d2             	movzx  edx,dl
c001c90c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c914:	0f b6 d3             	movzx  edx,bl
c001c917:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c91b:	ec                   	in     al,dx
c001c91c:	83 c4 1c             	add    esp,0x1c
c001c91f:	5b                   	pop    ebx
c001c920:	5e                   	pop    esi
c001c921:	5f                   	pop    edi
c001c922:	5d                   	pop    ebp
c001c923:	c3                   	ret    

c001c924 <IDE::waitInterrupt(unsigned char)>:
c001c924:	57                   	push   edi
c001c925:	56                   	push   esi
c001c926:	31 f6                	xor    esi,esi
c001c928:	53                   	push   ebx
c001c929:	83 ec 10             	sub    esp,0x10
c001c92c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c930:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c934:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c938:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c93d:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c944:	84 db                	test   bl,bl
c001c946:	75 37                	jne    c001c97f <IDE::waitInterrupt(unsigned char)+0x5b>
c001c948:	52                   	push   edx
c001c949:	6a 0c                	push   0xc
c001c94b:	50                   	push   eax
c001c94c:	57                   	push   edi
c001c94d:	e8 24 ff ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001c952:	83 c4 10             	add    esp,0x10
c001c955:	a8 01                	test   al,0x1
c001c957:	75 2e                	jne    c001c987 <IDE::waitInterrupt(unsigned char)+0x63>
c001c959:	f7 c6 04 00 00 00    	test   esi,0x4
c001c95f:	75 16                	jne    c001c977 <IDE::waitInterrupt(unsigned char)+0x53>
c001c961:	83 fe 32             	cmp    esi,0x32
c001c964:	7e 11                	jle    c001c977 <IDE::waitInterrupt(unsigned char)+0x53>
c001c966:	50                   	push   eax
c001c967:	50                   	push   eax
c001c968:	6a 00                	push   0x0
c001c96a:	68 80 96 98 00       	push   0x989680
c001c96f:	e8 4d c5 ff ff       	call   c0018ec1 <nanoSleep(unsigned long long)>
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	83 fe 3c             	cmp    esi,0x3c
c001c97a:	74 0b                	je     c001c987 <IDE::waitInterrupt(unsigned char)+0x63>
c001c97c:	46                   	inc    esi
c001c97d:	eb b9                	jmp    c001c938 <IDE::waitInterrupt(unsigned char)+0x14>
c001c97f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c987:	83 c4 10             	add    esp,0x10
c001c98a:	88 d8                	mov    al,bl
c001c98c:	5b                   	pop    ebx
c001c98d:	5e                   	pop    esi
c001c98e:	5f                   	pop    edi
c001c98f:	c3                   	ret    

c001c990 <ideChannel0IRQHandler(regs*, void*)>:
c001c990:	83 ec 10             	sub    esp,0x10
c001c993:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c997:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c99e:	6a 07                	push   0x7
c001c9a0:	6a 00                	push   0x0
c001c9a2:	50                   	push   eax
c001c9a3:	e8 ce fe ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001c9a8:	83 c4 1c             	add    esp,0x1c
c001c9ab:	c3                   	ret    

c001c9ac <ideChannel1IRQHandler(regs*, void*)>:
c001c9ac:	83 ec 10             	sub    esp,0x10
c001c9af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9b3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c9ba:	6a 07                	push   0x7
c001c9bc:	6a 01                	push   0x1
c001c9be:	50                   	push   eax
c001c9bf:	e8 b2 fe ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001c9c4:	83 c4 1c             	add    esp,0x1c
c001c9c7:	c3                   	ret    

c001c9c8 <IDE::enableIRQs(unsigned char, bool)>:
c001c9c8:	57                   	push   edi
c001c9c9:	56                   	push   esi
c001c9ca:	be 04 00 00 00       	mov    esi,0x4
c001c9cf:	53                   	push   ebx
c001c9d0:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c9d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c9da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9de:	0f 94 c0             	sete   al
c001c9e1:	01 c0                	add    eax,eax
c001c9e3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c9ea:	0f b6 c0             	movzx  eax,al
c001c9ed:	50                   	push   eax
c001c9ee:	6a 0c                	push   0xc
c001c9f0:	57                   	push   edi
c001c9f1:	53                   	push   ebx
c001c9f2:	e8 bf fd ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	50                   	push   eax
c001c9fb:	6a 0c                	push   0xc
c001c9fd:	57                   	push   edi
c001c9fe:	53                   	push   ebx
c001c9ff:	e8 72 fe ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	4e                   	dec    esi
c001ca08:	75 f0                	jne    c001c9fa <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ca0a:	5b                   	pop    ebx
c001ca0b:	5e                   	pop    esi
c001ca0c:	5f                   	pop    edi
c001ca0d:	c3                   	ret    

c001ca0e <IDE::open(int, int, void*)>:
c001ca0e:	55                   	push   ebp
c001ca0f:	57                   	push   edi
c001ca10:	56                   	push   esi
c001ca11:	53                   	push   ebx
c001ca12:	83 ec 1c             	sub    esp,0x1c
c001ca15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca19:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ca22:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ca2b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ca32:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ca39:	0f 85 b2 02 00 00    	jne    c001ccf1 <IDE::open(int, int, void*)+0x2e3>
c001ca3f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ca45:	88 04 24             	mov    BYTE PTR [esp],al
c001ca48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ca4b:	83 e0 7f             	and    eax,0x7f
c001ca4e:	83 f8 05             	cmp    eax,0x5
c001ca51:	74 05                	je     c001ca58 <IDE::open(int, int, void*)+0x4a>
c001ca53:	83 f8 0f             	cmp    eax,0xf
c001ca56:	75 32                	jne    c001ca8a <IDE::open(int, int, void*)+0x7c>
c001ca58:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ca5e:	83 e0 fc             	and    eax,0xfffffffc
c001ca61:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca68:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ca6e:	83 e0 fc             	and    eax,0xfffffffc
c001ca71:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca78:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ca7e:	83 e0 fc             	and    eax,0xfffffffc
c001ca81:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca88:	eb 14                	jmp    c001ca9e <IDE::open(int, int, void*)+0x90>
c001ca8a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ca94:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ca9e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001caa5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001caac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cab0:	89 c6                	mov    esi,eax
c001cab2:	89 e8                	mov    eax,ebp
c001cab4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cab9:	c1 e6 10             	shl    esi,0x10
c001cabc:	89 fa                	mov    edx,edi
c001cabe:	c1 e0 0b             	shl    eax,0xb
c001cac1:	09 f0                	or     eax,esi
c001cac3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001caca:	c1 e6 08             	shl    esi,0x8
c001cacd:	09 c6                	or     esi,eax
c001cacf:	89 f0                	mov    eax,esi
c001cad1:	0d 08 00 00 80       	or     eax,0x80000008
c001cad6:	ef                   	out    dx,eax
c001cad7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cadc:	89 ca                	mov    edx,ecx
c001cade:	ed                   	in     eax,dx
c001cadf:	c1 e8 10             	shr    eax,0x10
c001cae2:	3d ff ff 00 00       	cmp    eax,0xffff
c001cae7:	0f 84 f3 00 00 00    	je     c001cbe0 <IDE::open(int, int, void*)+0x1d2>
c001caed:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001caf3:	89 fa                	mov    edx,edi
c001caf5:	89 f0                	mov    eax,esi
c001caf7:	ef                   	out    dx,eax
c001caf8:	b0 fe                	mov    al,0xfe
c001cafa:	89 ca                	mov    edx,ecx
c001cafc:	ee                   	out    dx,al
c001cafd:	89 f0                	mov    eax,esi
c001caff:	89 fa                	mov    edx,edi
c001cb01:	ef                   	out    dx,eax
c001cb02:	89 ca                	mov    edx,ecx
c001cb04:	ed                   	in     eax,dx
c001cb05:	3c fe                	cmp    al,0xfe
c001cb07:	0f 85 a9 00 00 00    	jne    c001cbb6 <IDE::open(int, int, void*)+0x1a8>
c001cb0d:	8b 15 a8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245a8
c001cb13:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cb1a:	74 33                	je     c001cb4f <IDE::open(int, int, void*)+0x141>
c001cb1c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cb22:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cb26:	40                   	inc    eax
c001cb27:	83 ec 0c             	sub    esp,0xc
c001cb2a:	0f b6 c0             	movzx  eax,al
c001cb2d:	50                   	push   eax
c001cb2e:	55                   	push   ebp
c001cb2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb33:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cb39:	51                   	push   ecx
c001cb3a:	e8 61 72 ff ff       	call   c0013da0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cb3f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cb44:	83 c4 1c             	add    esp,0x1c
c001cb47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb4d:	eb 0a                	jmp    c001cb59 <IDE::open(int, int, void*)+0x14b>
c001cb4f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cb59:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cb60:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb67:	c1 e1 10             	shl    ecx,0x10
c001cb6a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb6f:	c1 e0 08             	shl    eax,0x8
c001cb72:	89 fa                	mov    edx,edi
c001cb74:	09 c1                	or     ecx,eax
c001cb76:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb7d:	c1 e0 0b             	shl    eax,0xb
c001cb80:	09 c1                	or     ecx,eax
c001cb82:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cb88:	89 c8                	mov    eax,ecx
c001cb8a:	ef                   	out    dx,eax
c001cb8b:	be fc 0c 00 00       	mov    esi,0xcfc
c001cb90:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cb96:	89 f2                	mov    edx,esi
c001cb98:	ee                   	out    dx,al
c001cb99:	89 c8                	mov    eax,ecx
c001cb9b:	89 fa                	mov    edx,edi
c001cb9d:	ef                   	out    dx,eax
c001cb9e:	89 f2                	mov    edx,esi
c001cba0:	ed                   	in     eax,dx
c001cba1:	0f b6 c0             	movzx  eax,al
c001cba4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cbaa:	74 44                	je     c001cbf0 <IDE::open(int, int, void*)+0x1e2>
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	68 68 33 02 c0       	push   0xc0023368
c001cbb4:	eb 32                	jmp    c001cbe8 <IDE::open(int, int, void*)+0x1da>
c001cbb6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cbbf:	75 15                	jne    c001cbd6 <IDE::open(int, int, void*)+0x1c8>
c001cbc1:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cbc5:	74 06                	je     c001cbcd <IDE::open(int, int, void*)+0x1bf>
c001cbc7:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cbcb:	75 09                	jne    c001cbd6 <IDE::open(int, int, void*)+0x1c8>
c001cbcd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cbd4:	eb 1a                	jmp    c001cbf0 <IDE::open(int, int, void*)+0x1e2>
c001cbd6:	83 ec 0c             	sub    esp,0xc
c001cbd9:	68 70 33 02 c0       	push   0xc0023370
c001cbde:	eb 08                	jmp    c001cbe8 <IDE::open(int, int, void*)+0x1da>
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	68 a1 33 02 c0       	push   0xc00233a1
c001cbe8:	e8 89 8d ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cbf7:	79 1a                	jns    c001cc13 <IDE::open(int, int, void*)+0x205>
c001cbf9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cbff:	83 e0 fc             	and    eax,0xfffffffc
c001cc02:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cc09:	83 c0 08             	add    eax,0x8
c001cc0c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cc13:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cc19:	89 c2                	mov    edx,eax
c001cc1b:	83 e2 0f             	and    edx,0xf
c001cc1e:	66 83 fa 08          	cmp    dx,0x8
c001cc22:	75 0a                	jne    c001cc2e <IDE::open(int, int, void*)+0x220>
c001cc24:	83 e8 02             	sub    eax,0x2
c001cc27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cc2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cc34:	89 c2                	mov    edx,eax
c001cc36:	83 e2 0f             	and    edx,0xf
c001cc39:	66 83 fa 08          	cmp    dx,0x8
c001cc3d:	75 0a                	jne    c001cc49 <IDE::open(int, int, void*)+0x23b>
c001cc3f:	83 e8 02             	sub    eax,0x2
c001cc42:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cc49:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cc50:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cc57:	89 d0                	mov    eax,edx
c001cc59:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc5c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc60:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cc64:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cc67:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc6c:	0f b6 c9             	movzx  ecx,cl
c001cc6f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc76:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc7d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc81:	8d 50 02             	lea    edx,[eax+0x2]
c001cc84:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc89:	0f b6 d2             	movzx  edx,dl
c001cc8c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc92:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc95:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc99:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cc9d:	8d 48 03             	lea    ecx,[eax+0x3]
c001cca0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cca5:	0f b6 c9             	movzx  ecx,cl
c001cca8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ccae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ccb1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ccb5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ccb9:	8d 50 04             	lea    edx,[eax+0x4]
c001ccbc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ccc2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ccc7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ccce:	66 85 f6             	test   si,si
c001ccd1:	74 3e                	je     c001cd11 <IDE::open(int, int, void*)+0x303>
c001ccd3:	0f b6 d2             	movzx  edx,dl
c001ccd6:	83 c0 05             	add    eax,0x5
c001ccd9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ccdc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cce0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cce4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ccea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ccef:	eb 20                	jmp    c001cd11 <IDE::open(int, int, void*)+0x303>
c001ccf1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ccfb:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cd05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cd0c:	e9 02 ff ff ff       	jmp    c001cc13 <IDE::open(int, int, void*)+0x205>
c001cd11:	52                   	push   edx
c001cd12:	52                   	push   edx
c001cd13:	6a 00                	push   0x0
c001cd15:	53                   	push   ebx
c001cd16:	e8 75 fa ff ff       	call   c001c790 <IDE::prepareInterrupt(unsigned char)>
c001cd1b:	59                   	pop    ecx
c001cd1c:	5e                   	pop    esi
c001cd1d:	6a 01                	push   0x1
c001cd1f:	53                   	push   ebx
c001cd20:	e8 6b fa ff ff       	call   c001c790 <IDE::prepareInterrupt(unsigned char)>
c001cd25:	83 c4 0c             	add    esp,0xc
c001cd28:	6a 00                	push   0x0
c001cd2a:	6a 00                	push   0x0
c001cd2c:	53                   	push   ebx
c001cd2d:	e8 96 fc ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001cd32:	83 c4 0c             	add    esp,0xc
c001cd35:	6a 00                	push   0x0
c001cd37:	6a 01                	push   0x1
c001cd39:	53                   	push   ebx
c001cd3a:	e8 89 fc ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cd49:	74 40                	je     c001cd8b <IDE::open(int, int, void*)+0x37d>
c001cd4b:	83 ec 0c             	sub    esp,0xc
c001cd4e:	68 cb 33 02 c0       	push   0xc00233cb
c001cd53:	e8 ef 23 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001cd58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd5b:	6a 01                	push   0x1
c001cd5d:	68 90 c9 01 c0       	push   0xc001c990
c001cd62:	6a 0e                	push   0xe
c001cd64:	53                   	push   ebx
c001cd65:	e8 46 37 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd6a:	83 c4 14             	add    esp,0x14
c001cd6d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd73:	53                   	push   ebx
c001cd74:	6a 01                	push   0x1
c001cd76:	68 ac c9 01 c0       	push   0xc001c9ac
c001cd7b:	6a 0f                	push   0xf
c001cd7d:	53                   	push   ebx
c001cd7e:	e8 2d 37 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd83:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd89:	eb 4a                	jmp    c001cdd5 <IDE::open(int, int, void*)+0x3c7>
c001cd8b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cd95:	50                   	push   eax
c001cd96:	6a 0f                	push   0xf
c001cd98:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cd9e:	68 e7 33 02 c0       	push   0xc00233e7
c001cda3:	e8 9f 23 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001cda8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdab:	6a 00                	push   0x0
c001cdad:	68 90 c9 01 c0       	push   0xc001c990
c001cdb2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cdb8:	53                   	push   ebx
c001cdb9:	e8 f2 36 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cdbe:	83 c4 14             	add    esp,0x14
c001cdc1:	53                   	push   ebx
c001cdc2:	6a 00                	push   0x0
c001cdc4:	68 ac c9 01 c0       	push   0xc001c9ac
c001cdc9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cdcf:	53                   	push   ebx
c001cdd0:	e8 db 36 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cdd5:	83 c4 20             	add    esp,0x20
c001cdd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	53                   	push   ebx
c001cdde:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cde1:	83 c4 0c             	add    esp,0xc
c001cde4:	6a 07                	push   0x7
c001cde6:	6a 00                	push   0x0
c001cde8:	53                   	push   ebx
c001cde9:	e8 88 fa ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cdee:	83 c4 0c             	add    esp,0xc
c001cdf1:	6a 07                	push   0x7
c001cdf3:	6a 01                	push   0x1
c001cdf5:	53                   	push   ebx
c001cdf6:	e8 7b fa ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cdfb:	83 c4 0c             	add    esp,0xc
c001cdfe:	6a 01                	push   0x1
c001ce00:	6a 00                	push   0x0
c001ce02:	53                   	push   ebx
c001ce03:	e8 c0 fb ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001ce08:	83 c4 0c             	add    esp,0xc
c001ce0b:	6a 01                	push   0x1
c001ce0d:	6a 01                	push   0x1
c001ce0f:	53                   	push   ebx
c001ce10:	e8 b3 fb ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001ce15:	83 c4 2c             	add    esp,0x2c
c001ce18:	31 c0                	xor    eax,eax
c001ce1a:	5b                   	pop    ebx
c001ce1b:	5e                   	pop    esi
c001ce1c:	5f                   	pop    edi
c001ce1d:	5d                   	pop    ebp
c001ce1e:	c3                   	ret    
c001ce1f:	90                   	nop

c001ce20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ce20:	55                   	push   ebp
c001ce21:	57                   	push   edi
c001ce22:	56                   	push   esi
c001ce23:	53                   	push   ebx
c001ce24:	83 ec 1c             	sub    esp,0x1c
c001ce27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ce2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce33:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ce37:	8d 50 f8             	lea    edx,[eax-0x8]
c001ce3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ce3e:	80 fa 03             	cmp    dl,0x3
c001ce41:	77 5d                	ja     c001cea0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ce43:	0f b6 db             	movzx  ebx,bl
c001ce46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ce4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce4e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ce51:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ce55:	83 ca 80             	or     edx,0xffffff80
c001ce58:	0f b6 d2             	movzx  edx,dl
c001ce5b:	52                   	push   edx
c001ce5c:	6a 0c                	push   0xc
c001ce5e:	53                   	push   ebx
c001ce5f:	56                   	push   esi
c001ce60:	e8 51 f9 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce69:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ce6e:	0f b6 c0             	movzx  eax,al
c001ce71:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce75:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ce79:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce7b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce80:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce84:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce8c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ce94:	83 c4 2c             	add    esp,0x2c
c001ce97:	5b                   	pop    ebx
c001ce98:	5e                   	pop    esi
c001ce99:	5f                   	pop    edi
c001ce9a:	5d                   	pop    ebp
c001ce9b:	e9 16 f9 ff ff       	jmp    c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea0:	3c 07                	cmp    al,0x7
c001cea2:	77 10                	ja     c001ceb4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cea4:	0f b6 db             	movzx  ebx,bl
c001cea7:	0f b6 d0             	movzx  edx,al
c001ceaa:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ceb2:	eb 2d                	jmp    c001cee1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ceb4:	3c 0d                	cmp    al,0xd
c001ceb6:	77 13                	ja     c001cecb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ceb8:	0f b6 db             	movzx  ebx,bl
c001cebb:	0f b6 c0             	movzx  eax,al
c001cebe:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cec5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cec9:	eb 16                	jmp    c001cee1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cecb:	3c 15                	cmp    al,0x15
c001cecd:	77 14                	ja     c001cee3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cecf:	0f b6 db             	movzx  ebx,bl
c001ced2:	0f b6 c0             	movzx  eax,al
c001ced5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cedd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cee1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cee3:	83 c4 1c             	add    esp,0x1c
c001cee6:	5b                   	pop    ebx
c001cee7:	5e                   	pop    esi
c001cee8:	5f                   	pop    edi
c001cee9:	5d                   	pop    ebp
c001ceea:	c3                   	ret    
c001ceeb:	90                   	nop

c001ceec <IDE::detect()>:
c001ceec:	55                   	push   ebp
c001ceed:	57                   	push   edi
c001ceee:	56                   	push   esi
c001ceef:	53                   	push   ebx
c001cef0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cef6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cefd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cf04:	0f 85 c0 02 00 00    	jne    c001d1ca <IDE::detect()+0x2de>
c001cf0a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cf11:	31 f6                	xor    esi,esi
c001cf13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cf1b:	31 ed                	xor    ebp,ebp
c001cf1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf21:	c1 e0 06             	shl    eax,0x6
c001cf24:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cf2c:	89 e8                	mov    eax,ebp
c001cf2e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cf32:	c1 e0 04             	shl    eax,0x4
c001cf35:	83 c8 a0             	or     eax,0xffffffa0
c001cf38:	0f b6 c0             	movzx  eax,al
c001cf3b:	50                   	push   eax
c001cf3c:	6a 06                	push   0x6
c001cf3e:	56                   	push   esi
c001cf3f:	53                   	push   ebx
c001cf40:	e8 71 f8 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf45:	83 c4 0c             	add    esp,0xc
c001cf48:	6a 0c                	push   0xc
c001cf4a:	56                   	push   esi
c001cf4b:	53                   	push   ebx
c001cf4c:	e8 25 f9 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf51:	83 c4 0c             	add    esp,0xc
c001cf54:	6a 0c                	push   0xc
c001cf56:	56                   	push   esi
c001cf57:	53                   	push   ebx
c001cf58:	e8 19 f9 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf5d:	83 c4 0c             	add    esp,0xc
c001cf60:	6a 0c                	push   0xc
c001cf62:	56                   	push   esi
c001cf63:	53                   	push   ebx
c001cf64:	e8 0d f9 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf69:	83 c4 0c             	add    esp,0xc
c001cf6c:	6a 0c                	push   0xc
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	e8 01 f9 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf75:	68 ec 00 00 00       	push   0xec
c001cf7a:	6a 07                	push   0x7
c001cf7c:	56                   	push   esi
c001cf7d:	53                   	push   ebx
c001cf7e:	e8 33 f8 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf83:	83 c4 1c             	add    esp,0x1c
c001cf86:	6a 0c                	push   0xc
c001cf88:	56                   	push   esi
c001cf89:	53                   	push   ebx
c001cf8a:	e8 e7 f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf8f:	83 c4 0c             	add    esp,0xc
c001cf92:	6a 0c                	push   0xc
c001cf94:	56                   	push   esi
c001cf95:	53                   	push   ebx
c001cf96:	e8 db f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cf9b:	83 c4 0c             	add    esp,0xc
c001cf9e:	6a 0c                	push   0xc
c001cfa0:	56                   	push   esi
c001cfa1:	53                   	push   ebx
c001cfa2:	e8 cf f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cfa7:	83 c4 0c             	add    esp,0xc
c001cfaa:	6a 0c                	push   0xc
c001cfac:	56                   	push   esi
c001cfad:	53                   	push   ebx
c001cfae:	e8 c3 f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cfb3:	83 c4 0c             	add    esp,0xc
c001cfb6:	6a 0c                	push   0xc
c001cfb8:	56                   	push   esi
c001cfb9:	53                   	push   ebx
c001cfba:	e8 b7 f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cfbf:	83 c4 10             	add    esp,0x10
c001cfc2:	84 c0                	test   al,al
c001cfc4:	0f 84 8b 01 00 00    	je     c001d155 <IDE::detect()+0x269>
c001cfca:	31 ff                	xor    edi,edi
c001cfcc:	50                   	push   eax
c001cfcd:	6a 0c                	push   0xc
c001cfcf:	56                   	push   esi
c001cfd0:	53                   	push   ebx
c001cfd1:	e8 a0 f8 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001cfd6:	83 c4 10             	add    esp,0x10
c001cfd9:	a8 01                	test   al,0x1
c001cfdb:	0f 85 8e 01 00 00    	jne    c001d16f <IDE::detect()+0x283>
c001cfe1:	84 c0                	test   al,al
c001cfe3:	78 04                	js     c001cfe9 <IDE::detect()+0xfd>
c001cfe5:	a8 08                	test   al,0x8
c001cfe7:	75 27                	jne    c001d010 <IDE::detect()+0x124>
c001cfe9:	47                   	inc    edi
c001cfea:	81 ff 17 01 00 00    	cmp    edi,0x117
c001cff0:	7e da                	jle    c001cfcc <IDE::detect()+0xe0>
c001cff2:	50                   	push   eax
c001cff3:	50                   	push   eax
c001cff4:	6a 00                	push   0x0
c001cff6:	68 40 4b 4c 00       	push   0x4c4b40
c001cffb:	e8 c1 be ff ff       	call   c0018ec1 <nanoSleep(unsigned long long)>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d009:	75 c1                	jne    c001cfcc <IDE::detect()+0xe0>
c001d00b:	e9 5f 01 00 00       	jmp    c001d16f <IDE::detect()+0x283>
c001d010:	31 c9                	xor    ecx,ecx
c001d012:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d016:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d01a:	83 ec 0c             	sub    esp,0xc
c001d01d:	68 80 00 00 00       	push   0x80
c001d022:	57                   	push   edi
c001d023:	6a 00                	push   0x0
c001d025:	56                   	push   esi
c001d026:	53                   	push   ebx
c001d027:	e8 f4 fd ff ff       	call   c001ce20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d02c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d030:	c1 e0 06             	shl    eax,0x6
c001d033:	01 d8                	add    eax,ebx
c001d035:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d03a:	89 d1                	mov    ecx,edx
c001d03c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d043:	89 f2                	mov    edx,esi
c001d045:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d04c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d052:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d056:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d05c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d060:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d067:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d06f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d076:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d07e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d084:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d08b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d091:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d095:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d099:	83 c4 20             	add    esp,0x20
c001d09c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d09f:	83 c7 02             	add    edi,0x2
c001d0a2:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d0a8:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d0ab:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d0b1:	83 c0 02             	add    eax,0x2
c001d0b4:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d0b8:	75 e2                	jne    c001d09c <IDE::detect()+0x1b0>
c001d0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0be:	c1 e0 06             	shl    eax,0x6
c001d0c1:	01 d8                	add    eax,ebx
c001d0c3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d0c9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d0d0:	66 c1 ea 09          	shr    dx,0x9
c001d0d4:	83 e2 01             	and    edx,0x1
c001d0d7:	84 c9                	test   cl,cl
c001d0d9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d0df:	75 2f                	jne    c001d110 <IDE::detect()+0x224>
c001d0e1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d0e7:	85 c0                	test   eax,eax
c001d0e9:	74 66                	je     c001d151 <IDE::detect()+0x265>
c001d0eb:	50                   	push   eax
c001d0ec:	55                   	push   ebp
c001d0ed:	56                   	push   esi
c001d0ee:	68 03 34 02 c0       	push   0xc0023403
c001d0f3:	e8 4f 20 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d0f8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d0ff:	e8 0e 1f ff ff       	call   c000f012 <operator new(unsigned long)>
c001d104:	89 c7                	mov    edi,eax
c001d106:	89 04 24             	mov    DWORD PTR [esp],eax
c001d109:	e8 f4 02 00 00       	call   c001d402 <ATA::ATA()>
c001d10e:	eb 28                	jmp    c001d138 <IDE::detect()+0x24c>
c001d110:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d116:	55                   	push   ebp
c001d117:	56                   	push   esi
c001d118:	68 32 34 02 c0       	push   0xc0023432
c001d11d:	e8 25 20 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d122:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d129:	e8 e4 1e ff ff       	call   c000f012 <operator new(unsigned long)>
c001d12e:	89 c7                	mov    edi,eax
c001d130:	89 04 24             	mov    DWORD PTR [esp],eax
c001d133:	e8 1e 09 00 00       	call   c001da56 <ATAPI::ATAPI()>
c001d138:	5a                   	pop    edx
c001d139:	59                   	pop    ecx
c001d13a:	57                   	push   edi
c001d13b:	53                   	push   ebx
c001d13c:	e8 1b 34 ff ff       	call   c001055c <Device::addChild(Device*)>
c001d141:	8b 07                	mov    eax,DWORD PTR [edi]
c001d143:	53                   	push   ebx
c001d144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d148:	6a 00                	push   0x0
c001d14a:	57                   	push   edi
c001d14b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d14e:	83 c4 20             	add    esp,0x20
c001d151:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d155:	4d                   	dec    ebp
c001d156:	74 0a                	je     c001d162 <IDE::detect()+0x276>
c001d158:	bd 01 00 00 00       	mov    ebp,0x1
c001d15d:	e9 bb fd ff ff       	jmp    c001cf1d <IDE::detect()+0x31>
c001d162:	4e                   	dec    esi
c001d163:	74 65                	je     c001d1ca <IDE::detect()+0x2de>
c001d165:	be 01 00 00 00       	mov    esi,0x1
c001d16a:	e9 ac fd ff ff       	jmp    c001cf1b <IDE::detect()+0x2f>
c001d16f:	50                   	push   eax
c001d170:	6a 04                	push   0x4
c001d172:	56                   	push   esi
c001d173:	53                   	push   ebx
c001d174:	e8 fd f6 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d179:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d17d:	83 c4 0c             	add    esp,0xc
c001d180:	6a 05                	push   0x5
c001d182:	56                   	push   esi
c001d183:	53                   	push   ebx
c001d184:	e8 ed f6 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d189:	83 c4 10             	add    esp,0x10
c001d18c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d190:	80 fa 14             	cmp    dl,0x14
c001d193:	74 2f                	je     c001d1c4 <IDE::detect()+0x2d8>
c001d195:	80 fa 69             	cmp    dl,0x69
c001d198:	75 bb                	jne    c001d155 <IDE::detect()+0x269>
c001d19a:	3c 96                	cmp    al,0x96
c001d19c:	75 b7                	jne    c001d155 <IDE::detect()+0x269>
c001d19e:	68 a1 00 00 00       	push   0xa1
c001d1a3:	6a 07                	push   0x7
c001d1a5:	56                   	push   esi
c001d1a6:	53                   	push   ebx
c001d1a7:	e8 0a f6 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1ac:	5f                   	pop    edi
c001d1ad:	58                   	pop    eax
c001d1ae:	6a 00                	push   0x0
c001d1b0:	68 40 42 0f 00       	push   0xf4240
c001d1b5:	e8 07 bd ff ff       	call   c0018ec1 <nanoSleep(unsigned long long)>
c001d1ba:	83 c4 10             	add    esp,0x10
c001d1bd:	b1 01                	mov    cl,0x1
c001d1bf:	e9 4e fe ff ff       	jmp    c001d012 <IDE::detect()+0x126>
c001d1c4:	3c eb                	cmp    al,0xeb
c001d1c6:	75 cd                	jne    c001d195 <IDE::detect()+0x2a9>
c001d1c8:	eb d4                	jmp    c001d19e <IDE::detect()+0x2b2>
c001d1ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d1d0:	5b                   	pop    ebx
c001d1d1:	5e                   	pop    esi
c001d1d2:	5f                   	pop    edi
c001d1d3:	5d                   	pop    ebp
c001d1d4:	c3                   	ret    
c001d1d5:	90                   	nop

c001d1d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d1d6:	55                   	push   ebp
c001d1d7:	57                   	push   edi
c001d1d8:	56                   	push   esi
c001d1d9:	53                   	push   ebx
c001d1da:	83 ec 1c             	sub    esp,0x1c
c001d1dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d1e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1e9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d1ed:	88 c3                	mov    bl,al
c001d1ef:	84 c0                	test   al,al
c001d1f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1f5:	0f 84 67 01 00 00    	je     c001d362 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d1fb:	83 ec 0c             	sub    esp,0xc
c001d1fe:	68 63 34 02 c0       	push   0xc0023463
c001d203:	e8 3f 1f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d20f:	3c 01                	cmp    al,0x1
c001d211:	75 17                	jne    c001d22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d213:	83 ec 0c             	sub    esp,0xc
c001d216:	b3 13                	mov    bl,0x13
c001d218:	68 6f 34 02 c0       	push   0xc002346f
c001d21d:	e8 25 1f ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d222:	83 c4 10             	add    esp,0x10
c001d225:	e9 25 01 00 00       	jmp    c001d34f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d22a:	3c 02                	cmp    al,0x2
c001d22c:	0f 85 ef 00 00 00    	jne    c001d321 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d232:	01 f6                	add    esi,esi
c001d234:	52                   	push   edx
c001d235:	09 ee                	or     esi,ebp
c001d237:	6a 01                	push   0x1
c001d239:	89 f0                	mov    eax,esi
c001d23b:	0f b6 f0             	movzx  esi,al
c001d23e:	c1 e6 06             	shl    esi,0x6
c001d241:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d249:	50                   	push   eax
c001d24a:	57                   	push   edi
c001d24b:	e8 26 f6 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d250:	83 c4 10             	add    esp,0x10
c001d253:	89 c6                	mov    esi,eax
c001d255:	a8 01                	test   al,0x1
c001d257:	74 12                	je     c001d26b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d259:	83 ec 0c             	sub    esp,0xc
c001d25c:	b3 07                	mov    bl,0x7
c001d25e:	68 84 34 02 c0       	push   0xc0023484
c001d263:	e8 df 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d268:	83 c4 10             	add    esp,0x10
c001d26b:	f7 c6 02 00 00 00    	test   esi,0x2
c001d271:	74 12                	je     c001d285 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	b3 03                	mov    bl,0x3
c001d278:	68 a2 34 02 c0       	push   0xc00234a2
c001d27d:	e8 c5 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	f7 c6 04 00 00 00    	test   esi,0x4
c001d28b:	74 12                	je     c001d29f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d28d:	83 ec 0c             	sub    esp,0xc
c001d290:	b3 14                	mov    bl,0x14
c001d292:	68 c2 34 02 c0       	push   0xc00234c2
c001d297:	e8 ab 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	f7 c6 08 00 00 00    	test   esi,0x8
c001d2a5:	74 12                	je     c001d2b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d2a7:	83 ec 0c             	sub    esp,0xc
c001d2aa:	b3 03                	mov    bl,0x3
c001d2ac:	68 a2 34 02 c0       	push   0xc00234a2
c001d2b1:	e8 91 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	f7 c6 10 00 00 00    	test   esi,0x10
c001d2bf:	74 12                	je     c001d2d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	b3 15                	mov    bl,0x15
c001d2c6:	68 da 34 02 c0       	push   0xc00234da
c001d2cb:	e8 77 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	f7 c6 20 00 00 00    	test   esi,0x20
c001d2d9:	74 12                	je     c001d2ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	b3 03                	mov    bl,0x3
c001d2e0:	68 a2 34 02 c0       	push   0xc00234a2
c001d2e5:	e8 5d 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	f7 c6 40 00 00 00    	test   esi,0x40
c001d2f3:	74 12                	je     c001d307 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d2f5:	83 ec 0c             	sub    esp,0xc
c001d2f8:	b3 16                	mov    bl,0x16
c001d2fa:	68 f4 34 02 c0       	push   0xc00234f4
c001d2ff:	e8 43 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d304:	83 c4 10             	add    esp,0x10
c001d307:	89 f0                	mov    eax,esi
c001d309:	84 c0                	test   al,al
c001d30b:	79 42                	jns    c001d34f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d30d:	83 ec 0c             	sub    esp,0xc
c001d310:	b3 0d                	mov    bl,0xd
c001d312:	68 15 35 02 c0       	push   0xc0023515
c001d317:	e8 2b 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d31c:	83 c4 10             	add    esp,0x10
c001d31f:	eb 2e                	jmp    c001d34f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d321:	3c 03                	cmp    al,0x3
c001d323:	75 14                	jne    c001d339 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	b3 17                	mov    bl,0x17
c001d32a:	68 29 35 02 c0       	push   0xc0023529
c001d32f:	e8 13 1e ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	eb 16                	jmp    c001d34f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d339:	3c 04                	cmp    al,0x4
c001d33b:	75 12                	jne    c001d34f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d33d:	83 ec 0c             	sub    esp,0xc
c001d340:	b3 08                	mov    bl,0x8
c001d342:	68 3f 35 02 c0       	push   0xc002353f
c001d347:	e8 fb 1d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d34c:	83 c4 10             	add    esp,0x10
c001d34f:	50                   	push   eax
c001d350:	50                   	push   eax
c001d351:	0f b6 c3             	movzx  eax,bl
c001d354:	50                   	push   eax
c001d355:	68 57 35 02 c0       	push   0xc0023557
c001d35a:	e8 e8 1d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d35f:	83 c4 10             	add    esp,0x10
c001d362:	83 c4 1c             	add    esp,0x1c
c001d365:	88 d8                	mov    al,bl
c001d367:	5b                   	pop    ebx
c001d368:	5e                   	pop    esi
c001d369:	5f                   	pop    edi
c001d36a:	5d                   	pop    ebp
c001d36b:	c3                   	ret    

c001d36c <IDE::polling(unsigned char, unsigned int)>:
c001d36c:	55                   	push   ebp
c001d36d:	bd 04 00 00 00       	mov    ebp,0x4
c001d372:	57                   	push   edi
c001d373:	56                   	push   esi
c001d374:	53                   	push   ebx
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d37c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d380:	52                   	push   edx
c001d381:	6a 0c                	push   0xc
c001d383:	0f b6 f3             	movzx  esi,bl
c001d386:	56                   	push   esi
c001d387:	57                   	push   edi
c001d388:	e8 e9 f4 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d38d:	83 c4 10             	add    esp,0x10
c001d390:	4d                   	dec    ebp
c001d391:	75 ed                	jne    c001d380 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d393:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d398:	50                   	push   eax
c001d399:	6a 0c                	push   0xc
c001d39b:	56                   	push   esi
c001d39c:	57                   	push   edi
c001d39d:	e8 d4 f4 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	a8 01                	test   al,0x1
c001d3a7:	74 12                	je     c001d3bb <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d3a9:	83 ec 0c             	sub    esp,0xc
c001d3ac:	68 71 35 02 c0       	push   0xc0023571
c001d3b1:	e8 91 1d ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	eb 17                	jmp    c001d3d2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d3bb:	a8 20                	test   al,0x20
c001d3bd:	75 0f                	jne    c001d3ce <IDE::polling(unsigned char, unsigned int)+0x62>
c001d3bf:	4b                   	dec    ebx
c001d3c0:	74 10                	je     c001d3d2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d3c2:	84 c0                	test   al,al
c001d3c4:	78 d2                	js     c001d398 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d3c6:	a8 08                	test   al,0x8
c001d3c8:	74 ce                	je     c001d398 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d3ca:	31 c0                	xor    eax,eax
c001d3cc:	eb 06                	jmp    c001d3d4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3ce:	b0 01                	mov    al,0x1
c001d3d0:	eb 02                	jmp    c001d3d4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3d2:	b0 02                	mov    al,0x2
c001d3d4:	83 c4 0c             	add    esp,0xc
c001d3d7:	5b                   	pop    ebx
c001d3d8:	5e                   	pop    esi
c001d3d9:	5f                   	pop    edi
c001d3da:	5d                   	pop    ebp
c001d3db:	c3                   	ret    

c001d3dc <ATA::close(int, int, void*)>:
c001d3dc:	83 ec 0c             	sub    esp,0xc
c001d3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3e9:	85 c0                	test   eax,eax
c001d3eb:	74 0c                	je     c001d3f9 <ATA::close(int, int, void*)+0x1d>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3f2:	50                   	push   eax
c001d3f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	31 c0                	xor    eax,eax
c001d3fb:	83 c4 0c             	add    esp,0xc
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <ATA::powerSaving(PowerSavingLevel)>:
c001d400:	c3                   	ret    
c001d401:	90                   	nop

c001d402 <ATA::ATA()>:
c001d402:	83 ec 0c             	sub    esp,0xc
c001d405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d409:	83 ec 04             	sub    esp,0x4
c001d40c:	68 00 02 00 00       	push   0x200
c001d411:	68 b4 35 02 c0       	push   0xc00235b4
c001d416:	50                   	push   eax
c001d417:	e8 46 35 ff ff       	call   c0010962 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d41c:	83 c4 10             	add    esp,0x10
c001d41f:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c001d424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d428:	89 10                	mov    DWORD PTR [eax],edx
c001d42a:	90                   	nop
c001d42b:	83 c4 0c             	add    esp,0xc
c001d42e:	c3                   	ret    
c001d42f:	90                   	nop

c001d430 <ATA::flush(bool)>:
c001d430:	53                   	push   ebx
c001d431:	83 ec 08             	sub    esp,0x8
c001d434:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d439:	19 c0                	sbb    eax,eax
c001d43b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d43f:	83 e0 fd             	and    eax,0xfffffffd
c001d442:	05 ea 00 00 00       	add    eax,0xea
c001d447:	50                   	push   eax
c001d448:	6a 07                	push   0x7
c001d44a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d451:	50                   	push   eax
c001d452:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d458:	e8 59 f3 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d45d:	83 c4 0c             	add    esp,0xc
c001d460:	6a 00                	push   0x0
c001d462:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d469:	50                   	push   eax
c001d46a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d470:	e8 f7 fe ff ff       	call   c001d36c <IDE::polling(unsigned char, unsigned int)>
c001d475:	83 c4 18             	add    esp,0x18
c001d478:	5b                   	pop    ebx
c001d479:	c3                   	ret    

c001d47a <ATA::readyForCommand()>:
c001d47a:	56                   	push   esi
c001d47b:	53                   	push   ebx
c001d47c:	31 db                	xor    ebx,ebx
c001d47e:	50                   	push   eax
c001d47f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d483:	50                   	push   eax
c001d484:	6a 0c                	push   0xc
c001d486:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d48d:	50                   	push   eax
c001d48e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d494:	e8 dd f3 ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	a8 88                	test   al,0x88
c001d49e:	74 23                	je     c001d4c3 <ATA::readyForCommand()+0x49>
c001d4a0:	43                   	inc    ebx
c001d4a1:	83 fb 63             	cmp    ebx,0x63
c001d4a4:	7e dd                	jle    c001d483 <ATA::readyForCommand()+0x9>
c001d4a6:	51                   	push   ecx
c001d4a7:	51                   	push   ecx
c001d4a8:	6a 00                	push   0x0
c001d4aa:	68 40 42 0f 00       	push   0xf4240
c001d4af:	e8 0d ba ff ff       	call   c0018ec1 <nanoSleep(unsigned long long)>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d4bd:	75 c4                	jne    c001d483 <ATA::readyForCommand()+0x9>
c001d4bf:	31 c0                	xor    eax,eax
c001d4c1:	eb 02                	jmp    c001d4c5 <ATA::readyForCommand()+0x4b>
c001d4c3:	b0 01                	mov    al,0x1
c001d4c5:	5a                   	pop    edx
c001d4c6:	5b                   	pop    ebx
c001d4c7:	5e                   	pop    esi
c001d4c8:	c3                   	ret    
c001d4c9:	90                   	nop

c001d4ca <ATA::access(unsigned long long, int, void*, bool)>:
c001d4ca:	55                   	push   ebp
c001d4cb:	57                   	push   edi
c001d4cc:	56                   	push   esi
c001d4cd:	53                   	push   ebx
c001d4ce:	83 ec 2c             	sub    esp,0x2c
c001d4d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d4d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d4d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4dc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d4e0:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d4e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d4e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d4eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d4f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4f5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d4fb:	c1 e0 06             	shl    eax,0x6
c001d4fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d502:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d50a:	74 5d                	je     c001d569 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d50c:	89 fa                	mov    edx,edi
c001d50e:	89 f0                	mov    eax,esi
c001d510:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d514:	c1 ea 1c             	shr    edx,0x1c
c001d517:	89 d1                	mov    ecx,edx
c001d519:	09 c1                	or     ecx,eax
c001d51b:	74 25                	je     c001d542 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d51d:	31 ed                	xor    ebp,ebp
c001d51f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d526:	89 fa                	mov    edx,edi
c001d528:	89 f0                	mov    eax,esi
c001d52a:	0f ad d0             	shrd   eax,edx,cl
c001d52d:	d3 ea                	shr    edx,cl
c001d52f:	f6 c1 20             	test   cl,0x20
c001d532:	74 02                	je     c001d536 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d534:	89 d0                	mov    eax,edx
c001d536:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d53a:	45                   	inc    ebp
c001d53b:	83 fd 06             	cmp    ebp,0x6
c001d53e:	75 df                	jne    c001d51f <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d540:	eb 73                	jmp    c001d5b5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d542:	89 f0                	mov    eax,esi
c001d544:	89 fa                	mov    edx,edi
c001d546:	0f ac d0 10          	shrd   eax,edx,0x10
c001d54a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d54f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d553:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d55a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d55f:	c1 ee 18             	shr    esi,0x18
c001d562:	bf 01 00 00 00       	mov    edi,0x1
c001d567:	eb 53                	jmp    c001d5bc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d569:	6a 00                	push   0x0
c001d56b:	6a 3f                	push   0x3f
c001d56d:	57                   	push   edi
c001d56e:	56                   	push   esi
c001d56f:	e8 88 1f 00 00       	call   c001f4fc <__umoddi3>
c001d574:	83 c4 10             	add    esp,0x10
c001d577:	40                   	inc    eax
c001d578:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d57c:	6a 00                	push   0x0
c001d57e:	68 f0 03 00 00       	push   0x3f0
c001d583:	57                   	push   edi
c001d584:	56                   	push   esi
c001d585:	e8 72 1e 00 00       	call   c001f3fc <__udivdi3>
c001d58a:	83 c4 10             	add    esp,0x10
c001d58d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d592:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d599:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d59e:	6a 00                	push   0x0
c001d5a0:	6a 3f                	push   0x3f
c001d5a2:	57                   	push   edi
c001d5a3:	31 ff                	xor    edi,edi
c001d5a5:	56                   	push   esi
c001d5a6:	e8 51 1e 00 00       	call   c001f3fc <__udivdi3>
c001d5ab:	89 c6                	mov    esi,eax
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	83 e6 0f             	and    esi,0xf
c001d5b3:	eb 07                	jmp    c001d5bc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d5b5:	31 f6                	xor    esi,esi
c001d5b7:	bf 02 00 00 00       	mov    edi,0x2
c001d5bc:	50                   	push   eax
c001d5bd:	6a 00                	push   0x0
c001d5bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5c6:	50                   	push   eax
c001d5c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5cb:	e8 f8 f3 ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001d5d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5d3:	e8 a2 fe ff ff       	call   c001d47a <ATA::readyForCommand()>
c001d5d8:	83 c4 10             	add    esp,0x10
c001d5db:	84 c0                	test   al,al
c001d5dd:	75 0a                	jne    c001d5e9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d5df:	be 01 00 00 00       	mov    esi,0x1
c001d5e4:	e9 79 02 00 00       	jmp    c001d862 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d5e9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d5ef:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d5f5:	c1 e0 04             	shl    eax,0x4
c001d5f8:	09 c6                	or     esi,eax
c001d5fa:	89 f8                	mov    eax,edi
c001d5fc:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d603:	84 c0                	test   al,al
c001d605:	75 05                	jne    c001d60c <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d607:	83 ce a0             	or     esi,0xffffffa0
c001d60a:	eb 03                	jmp    c001d60f <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d60c:	83 ce e0             	or     esi,0xffffffe0
c001d60f:	89 f0                	mov    eax,esi
c001d611:	0f b6 f0             	movzx  esi,al
c001d614:	56                   	push   esi
c001d615:	6a 06                	push   0x6
c001d617:	51                   	push   ecx
c001d618:	52                   	push   edx
c001d619:	e8 98 f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	6a 00                	push   0x0
c001d623:	6a 01                	push   0x1
c001d625:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d62c:	50                   	push   eax
c001d62d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d633:	e8 7e f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d638:	89 f8                	mov    eax,edi
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	3c 02                	cmp    al,0x2
c001d63f:	75 6e                	jne    c001d6af <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d641:	6a 00                	push   0x0
c001d643:	6a 08                	push   0x8
c001d645:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d64c:	50                   	push   eax
c001d64d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d653:	e8 5e f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d658:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d65d:	50                   	push   eax
c001d65e:	6a 09                	push   0x9
c001d660:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d667:	50                   	push   eax
c001d668:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d66e:	e8 43 f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d673:	83 c4 20             	add    esp,0x20
c001d676:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d67b:	50                   	push   eax
c001d67c:	6a 0a                	push   0xa
c001d67e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d685:	50                   	push   eax
c001d686:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d68c:	e8 25 f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d691:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d696:	50                   	push   eax
c001d697:	6a 0b                	push   0xb
c001d699:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6a0:	50                   	push   eax
c001d6a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6a7:	e8 0a f1 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ac:	83 c4 20             	add    esp,0x20
c001d6af:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d6b4:	50                   	push   eax
c001d6b5:	6a 02                	push   0x2
c001d6b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6be:	50                   	push   eax
c001d6bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6c5:	e8 ec f0 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ca:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d6cf:	50                   	push   eax
c001d6d0:	6a 03                	push   0x3
c001d6d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6d9:	50                   	push   eax
c001d6da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6e0:	e8 d1 f0 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6e5:	83 c4 20             	add    esp,0x20
c001d6e8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d6ed:	50                   	push   eax
c001d6ee:	6a 04                	push   0x4
c001d6f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6f7:	50                   	push   eax
c001d6f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6fe:	e8 b3 f0 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d703:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d708:	50                   	push   eax
c001d709:	6a 05                	push   0x5
c001d70b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d712:	50                   	push   eax
c001d713:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d719:	e8 98 f0 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d71e:	83 c4 20             	add    esp,0x20
c001d721:	89 f8                	mov    eax,edi
c001d723:	3c 02                	cmp    al,0x2
c001d725:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d72a:	75 06                	jne    c001d732 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d72c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d730:	75 40                	jne    c001d772 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d732:	89 f8                	mov    eax,edi
c001d734:	3c 02                	cmp    al,0x2
c001d736:	0f 95 c1             	setne  cl
c001d739:	74 0b                	je     c001d746 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d73b:	b8 30 00 00 00       	mov    eax,0x30
c001d740:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d744:	75 31                	jne    c001d777 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d746:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d749:	83 f2 01             	xor    edx,0x1
c001d74c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d751:	74 09                	je     c001d75c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d753:	b8 24 00 00 00       	mov    eax,0x24
c001d758:	84 d2                	test   dl,dl
c001d75a:	75 1b                	jne    c001d777 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d75c:	84 c9                	test   cl,cl
c001d75e:	0f 84 7b fe ff ff    	je     c001d5df <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d764:	b8 20 00 00 00       	mov    eax,0x20
c001d769:	84 d2                	test   dl,dl
c001d76b:	75 0a                	jne    c001d777 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d76d:	e9 6d fe ff ff       	jmp    c001d5df <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d772:	b8 34 00 00 00       	mov    eax,0x34
c001d777:	50                   	push   eax
c001d778:	6a 07                	push   0x7
c001d77a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d781:	50                   	push   eax
c001d782:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d788:	e8 29 f0 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d78d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d791:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d795:	83 c4 10             	add    esp,0x10
c001d798:	85 f6                	test   esi,esi
c001d79a:	0f 84 a9 00 00 00    	je     c001d849 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d7a0:	50                   	push   eax
c001d7a1:	6a 01                	push   0x1
c001d7a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7aa:	50                   	push   eax
c001d7ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7b1:	e8 b6 fb ff ff       	call   c001d36c <IDE::polling(unsigned char, unsigned int)>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7bf:	84 c0                	test   al,al
c001d7c1:	74 1d                	je     c001d7e0 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d7c3:	0f b6 f0             	movzx  esi,al
c001d7c6:	56                   	push   esi
c001d7c7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d7ce:	0f b6 d2             	movzx  edx,dl
c001d7d1:	50                   	push   eax
c001d7d2:	52                   	push   edx
c001d7d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d9:	e8 f8 f9 ff ff       	call   c001d1d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7de:	eb 7f                	jmp    c001d85f <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d7e0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d7e5:	74 41                	je     c001d828 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d7e7:	31 c9                	xor    ecx,ecx
c001d7e9:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d7ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7f1:	50                   	push   eax
c001d7f2:	50                   	push   eax
c001d7f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7fa:	50                   	push   eax
c001d7fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d801:	e8 9e ef ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001d806:	89 c2                	mov    edx,eax
c001d808:	89 e8                	mov    eax,ebp
c001d80a:	66 ef                	out    dx,ax
c001d80c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d810:	83 c4 10             	add    esp,0x10
c001d813:	41                   	inc    ecx
c001d814:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d81a:	75 cd                	jne    c001d7e9 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d81c:	4e                   	dec    esi
c001d81d:	81 c7 00 02 00 00    	add    edi,0x200
c001d823:	e9 70 ff ff ff       	jmp    c001d798 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d828:	51                   	push   ecx
c001d829:	51                   	push   ecx
c001d82a:	0f b6 d2             	movzx  edx,dl
c001d82d:	52                   	push   edx
c001d82e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d834:	e8 6b ef ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001d839:	b9 00 01 00 00       	mov    ecx,0x100
c001d83e:	89 c2                	mov    edx,eax
c001d840:	fc                   	cld    
c001d841:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d844:	83 c4 10             	add    esp,0x10
c001d847:	eb d3                	jmp    c001d81c <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d849:	31 f6                	xor    esi,esi
c001d84b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d84f:	74 11                	je     c001d862 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d851:	50                   	push   eax
c001d852:	50                   	push   eax
c001d853:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d858:	50                   	push   eax
c001d859:	53                   	push   ebx
c001d85a:	e8 d1 fb ff ff       	call   c001d430 <ATA::flush(bool)>
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	83 c4 2c             	add    esp,0x2c
c001d865:	89 f0                	mov    eax,esi
c001d867:	5b                   	pop    ebx
c001d868:	5e                   	pop    esi
c001d869:	5f                   	pop    edi
c001d86a:	5d                   	pop    ebp
c001d86b:	c3                   	ret    

c001d86c <ATA::read(unsigned long long, int, void*)>:
c001d86c:	57                   	push   edi
c001d86d:	b8 04 00 00 00       	mov    eax,0x4
c001d872:	56                   	push   esi
c001d873:	53                   	push   ebx
c001d874:	83 ec 10             	sub    esp,0x10
c001d877:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d87b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d87f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d883:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d887:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d88a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d890:	77 3b                	ja     c001d8cd <ATA::read(unsigned long long, int, void*)+0x61>
c001d892:	b8 06 00 00 00       	mov    eax,0x6
c001d897:	85 d2                	test   edx,edx
c001d899:	74 32                	je     c001d8cd <ATA::read(unsigned long long, int, void*)+0x61>
c001d89b:	50                   	push   eax
c001d89c:	50                   	push   eax
c001d89d:	6a 00                	push   0x0
c001d89f:	52                   	push   edx
c001d8a0:	53                   	push   ebx
c001d8a1:	57                   	push   edi
c001d8a2:	56                   	push   esi
c001d8a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8a7:	e8 1e fc ff ff       	call   c001d4ca <ATA::access(unsigned long long, int, void*, bool)>
c001d8ac:	83 c4 20             	add    esp,0x20
c001d8af:	85 c0                	test   eax,eax
c001d8b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8b5:	75 11                	jne    c001d8c8 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d8b7:	01 1d 44 63 02 c0    	add    DWORD PTR ds:0xc0026344,ebx
c001d8bd:	e8 20 f7 fe ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c001d8c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8c6:	eb 05                	jmp    c001d8cd <ATA::read(unsigned long long, int, void*)+0x61>
c001d8c8:	b8 01 00 00 00       	mov    eax,0x1
c001d8cd:	83 c4 10             	add    esp,0x10
c001d8d0:	5b                   	pop    ebx
c001d8d1:	5e                   	pop    esi
c001d8d2:	5f                   	pop    edi
c001d8d3:	c3                   	ret    

c001d8d4 <ATA::write(unsigned long long, int, void*)>:
c001d8d4:	57                   	push   edi
c001d8d5:	b8 04 00 00 00       	mov    eax,0x4
c001d8da:	56                   	push   esi
c001d8db:	53                   	push   ebx
c001d8dc:	83 ec 10             	sub    esp,0x10
c001d8df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8e3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d8e7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d8eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8ef:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d8f2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d8f8:	77 3b                	ja     c001d935 <ATA::write(unsigned long long, int, void*)+0x61>
c001d8fa:	b8 06 00 00 00       	mov    eax,0x6
c001d8ff:	85 d2                	test   edx,edx
c001d901:	74 32                	je     c001d935 <ATA::write(unsigned long long, int, void*)+0x61>
c001d903:	50                   	push   eax
c001d904:	50                   	push   eax
c001d905:	6a 01                	push   0x1
c001d907:	52                   	push   edx
c001d908:	53                   	push   ebx
c001d909:	57                   	push   edi
c001d90a:	56                   	push   esi
c001d90b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d90f:	e8 b6 fb ff ff       	call   c001d4ca <ATA::access(unsigned long long, int, void*, bool)>
c001d914:	83 c4 20             	add    esp,0x20
c001d917:	85 c0                	test   eax,eax
c001d919:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d91d:	75 11                	jne    c001d930 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d91f:	01 1d 40 63 02 c0    	add    DWORD PTR ds:0xc0026340,ebx
c001d925:	e8 b8 f6 fe ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c001d92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d92e:	eb 05                	jmp    c001d935 <ATA::write(unsigned long long, int, void*)+0x61>
c001d930:	b8 01 00 00 00       	mov    eax,0x1
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	5b                   	pop    ebx
c001d939:	5e                   	pop    esi
c001d93a:	5f                   	pop    edi
c001d93b:	c3                   	ret    

c001d93c <ATA::detectCHS()>:
c001d93c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d940:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d946:	c1 e0 06             	shl    eax,0x6
c001d949:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d94f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d959:	c7 44 24 04 c3 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235c3
c001d961:	e9 10 80 ff ff       	jmp    c0015976 <Krnl::panic(char const*)>

c001d966 <ATA::open(int, int, void*)>:
c001d966:	53                   	push   ebx
c001d967:	83 ec 08             	sub    esp,0x8
c001d96a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d96e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d976:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d97c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d982:	c1 e0 06             	shl    eax,0x6
c001d985:	01 d0                	add    eax,edx
c001d987:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d98e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d994:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d99b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d9a5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d9ab:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d9b2:	75 0c                	jne    c001d9c0 <ATA::open(int, int, void*)+0x5a>
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	53                   	push   ebx
c001d9b8:	e8 7f ff ff ff       	call   c001d93c <ATA::detectCHS()>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d9c6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d9cc:	c1 e0 06             	shl    eax,0x6
c001d9cf:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d9d6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9e0:	d1 e8                	shr    eax,1
c001d9e2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d9e8:	6a 04                	push   0x4
c001d9ea:	6a 0c                	push   0xc
c001d9ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9f3:	50                   	push   eax
c001d9f4:	52                   	push   edx
c001d9f5:	e8 bc ed ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9fa:	90                   	nop
c001d9fb:	90                   	nop
c001d9fc:	6a 00                	push   0x0
c001d9fe:	6a 0c                	push   0xc
c001da00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da07:	50                   	push   eax
c001da08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da0e:	e8 a3 ed ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da13:	83 c4 14             	add    esp,0x14
c001da16:	53                   	push   ebx
c001da17:	e8 ae 2f ff ff       	call   c00109ca <PhysicalDisk::startCache()>
c001da1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da1f:	e8 82 4f ff ff       	call   c00129a6 <createPartitionsForDisk(PhysicalDisk*)>
c001da24:	83 c4 18             	add    esp,0x18
c001da27:	31 c0                	xor    eax,eax
c001da29:	5b                   	pop    ebx
c001da2a:	c3                   	ret    
c001da2b:	90                   	nop

c001da2c <ATAPI::write(unsigned long long, int, void*)>:
c001da2c:	b8 03 00 00 00       	mov    eax,0x3
c001da31:	c3                   	ret    

c001da32 <ATAPI::close(int, int, void*)>:
c001da32:	83 ec 0c             	sub    esp,0xc
c001da35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da3f:	85 c0                	test   eax,eax
c001da41:	74 0c                	je     c001da4f <ATAPI::close(int, int, void*)+0x1d>
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	8b 10                	mov    edx,DWORD PTR [eax]
c001da48:	50                   	push   eax
c001da49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	31 c0                	xor    eax,eax
c001da51:	83 c4 0c             	add    esp,0xc
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <ATAPI::ATAPI()>:
c001da56:	83 ec 0c             	sub    esp,0xc
c001da59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da5d:	83 ec 04             	sub    esp,0x4
c001da60:	68 00 08 00 00       	push   0x800
c001da65:	68 0c 36 02 c0       	push   0xc002360c
c001da6a:	50                   	push   eax
c001da6b:	e8 f2 2e ff ff       	call   c0010962 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da70:	83 c4 10             	add    esp,0x10
c001da73:	ba 4c 36 02 c0       	mov    edx,0xc002364c
c001da78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da7c:	89 10                	mov    DWORD PTR [eax],edx
c001da7e:	90                   	nop
c001da7f:	83 c4 0c             	add    esp,0xc
c001da82:	c3                   	ret    
c001da83:	90                   	nop

c001da84 <ATAPI::readyForCommand()>:
c001da84:	56                   	push   esi
c001da85:	53                   	push   ebx
c001da86:	31 db                	xor    ebx,ebx
c001da88:	50                   	push   eax
c001da89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da8d:	50                   	push   eax
c001da8e:	6a 0c                	push   0xc
c001da90:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001da97:	50                   	push   eax
c001da98:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001da9e:	e8 d3 ed ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001daa3:	83 c4 10             	add    esp,0x10
c001daa6:	a8 88                	test   al,0x88
c001daa8:	74 23                	je     c001dacd <ATAPI::readyForCommand()+0x49>
c001daaa:	43                   	inc    ebx
c001daab:	83 fb 63             	cmp    ebx,0x63
c001daae:	7e dd                	jle    c001da8d <ATAPI::readyForCommand()+0x9>
c001dab0:	51                   	push   ecx
c001dab1:	51                   	push   ecx
c001dab2:	6a 00                	push   0x0
c001dab4:	68 40 42 0f 00       	push   0xf4240
c001dab9:	e8 03 b4 ff ff       	call   c0018ec1 <nanoSleep(unsigned long long)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dac7:	75 c4                	jne    c001da8d <ATAPI::readyForCommand()+0x9>
c001dac9:	31 c0                	xor    eax,eax
c001dacb:	eb 02                	jmp    c001dacf <ATAPI::readyForCommand()+0x4b>
c001dacd:	b0 01                	mov    al,0x1
c001dacf:	5a                   	pop    edx
c001dad0:	5b                   	pop    ebx
c001dad1:	5e                   	pop    esi
c001dad2:	c3                   	ret    
c001dad3:	90                   	nop

c001dad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dad4:	55                   	push   ebp
c001dad5:	57                   	push   edi
c001dad6:	56                   	push   esi
c001dad7:	53                   	push   ebx
c001dad8:	83 ec 20             	sub    esp,0x20
c001dadb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dadf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dae3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dae7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001daeb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001daef:	6a 01                	push   0x1
c001daf1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daf8:	50                   	push   eax
c001daf9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001daff:	e8 c4 ee ff ff       	call   c001c9c8 <IDE::enableIRQs(unsigned char, bool)>
c001db04:	5e                   	pop    esi
c001db05:	58                   	pop    eax
c001db06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db0d:	50                   	push   eax
c001db0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db14:	e8 77 ec ff ff       	call   c001c790 <IDE::prepareInterrupt(unsigned char)>
c001db19:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db1c:	e8 63 ff ff ff       	call   c001da84 <ATAPI::readyForCommand()>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	84 c0                	test   al,al
c001db26:	75 0a                	jne    c001db32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001db28:	bb 01 00 00 00       	mov    ebx,0x1
c001db2d:	e9 57 02 00 00       	jmp    c001dd89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001db32:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001db38:	c1 e0 04             	shl    eax,0x4
c001db3b:	0f b6 c0             	movzx  eax,al
c001db3e:	50                   	push   eax
c001db3f:	6a 06                	push   0x6
c001db41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db48:	50                   	push   eax
c001db49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db4f:	e8 62 ec ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db54:	6a 00                	push   0x0
c001db56:	6a 01                	push   0x1
c001db58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db5f:	50                   	push   eax
c001db60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db66:	e8 4b ec ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db6b:	83 c4 20             	add    esp,0x20
c001db6e:	0f b6 c3             	movzx  eax,bl
c001db71:	50                   	push   eax
c001db72:	6a 04                	push   0x4
c001db74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db7b:	50                   	push   eax
c001db7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db82:	0f b6 df             	movzx  ebx,bh
c001db85:	e8 2c ec ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db8a:	53                   	push   ebx
c001db8b:	6a 05                	push   0x5
c001db8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db94:	50                   	push   eax
c001db95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db9b:	e8 16 ec ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dba0:	83 c4 20             	add    esp,0x20
c001dba3:	68 a0 00 00 00       	push   0xa0
c001dba8:	6a 07                	push   0x7
c001dbaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbb1:	50                   	push   eax
c001dbb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbb8:	e8 f9 eb ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbbd:	83 c4 0c             	add    esp,0xc
c001dbc0:	6a 01                	push   0x1
c001dbc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbc9:	50                   	push   eax
c001dbca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbd0:	e8 97 f7 ff ff       	call   c001d36c <IDE::polling(unsigned char, unsigned int)>
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dbde:	84 c0                	test   al,al
c001dbe0:	74 23                	je     c001dc05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dbe2:	0f b6 d8             	movzx  ebx,al
c001dbe5:	53                   	push   ebx
c001dbe6:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dbed:	0f b6 d2             	movzx  edx,dl
c001dbf0:	50                   	push   eax
c001dbf1:	52                   	push   edx
c001dbf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbf8:	e8 d9 f5 ff ff       	call   c001d1d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dbfd:	83 c4 10             	add    esp,0x10
c001dc00:	e9 84 01 00 00       	jmp    c001dd89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc05:	53                   	push   ebx
c001dc06:	53                   	push   ebx
c001dc07:	0f b6 d2             	movzx  edx,dl
c001dc0a:	52                   	push   edx
c001dc0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc11:	e8 8e eb ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001dc16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dc1a:	b9 06 00 00 00       	mov    ecx,0x6
c001dc1f:	89 c2                	mov    edx,eax
c001dc21:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dc24:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dc28:	83 c4 10             	add    esp,0x10
c001dc2b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc31:	85 db                	test   ebx,ebx
c001dc33:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc3a:	0f 84 ec 00 00 00    	je     c001dd2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dc40:	51                   	push   ecx
c001dc41:	51                   	push   ecx
c001dc42:	52                   	push   edx
c001dc43:	50                   	push   eax
c001dc44:	e8 db ec ff ff       	call   c001c924 <IDE::waitInterrupt(unsigned char)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	84 c0                	test   al,al
c001dc4e:	0f 84 d4 fe ff ff    	je     c001db28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dc54:	56                   	push   esi
c001dc55:	56                   	push   esi
c001dc56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc5d:	50                   	push   eax
c001dc5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc64:	e8 27 eb ff ff       	call   c001c790 <IDE::prepareInterrupt(unsigned char)>
c001dc69:	83 c4 0c             	add    esp,0xc
c001dc6c:	6a 04                	push   0x4
c001dc6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc75:	50                   	push   eax
c001dc76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc7c:	e8 f5 eb ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001dc81:	83 c4 0c             	add    esp,0xc
c001dc84:	6a 05                	push   0x5
c001dc86:	89 c6                	mov    esi,eax
c001dc88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc8f:	50                   	push   eax
c001dc90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc96:	e8 db eb ff ff       	call   c001c876 <IDE::read(unsigned char, unsigned char)>
c001dc9b:	89 f1                	mov    ecx,esi
c001dc9d:	0f b6 c0             	movzx  eax,al
c001dca0:	c1 e0 08             	shl    eax,0x8
c001dca3:	0f b6 f1             	movzx  esi,cl
c001dca6:	09 c6                	or     esi,eax
c001dca8:	d1 fe                	sar    esi,1
c001dcaa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dcae:	83 c4 10             	add    esp,0x10
c001dcb1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dcb6:	74 41                	je     c001dcf9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dcb8:	31 c9                	xor    ecx,ecx
c001dcba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dcc0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dcc4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dccb:	75 0a                	jne    c001dcd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dccd:	01 c9                	add    ecx,ecx
c001dccf:	01 cd                	add    ebp,ecx
c001dcd1:	4b                   	dec    ebx
c001dcd2:	e9 54 ff ff ff       	jmp    c001dc2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dcd7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dcdc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dce0:	51                   	push   ecx
c001dce1:	51                   	push   ecx
c001dce2:	52                   	push   edx
c001dce3:	50                   	push   eax
c001dce4:	e8 bb ea ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001dce9:	89 c2                	mov    edx,eax
c001dceb:	89 f0                	mov    eax,esi
c001dced:	66 ef                	out    dx,ax
c001dcef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dcf3:	83 c4 10             	add    esp,0x10
c001dcf6:	41                   	inc    ecx
c001dcf7:	eb c1                	jmp    c001dcba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dcf9:	31 f6                	xor    esi,esi
c001dcfb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd01:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dd05:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd0c:	75 06                	jne    c001dd14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001dd0e:	01 f6                	add    esi,esi
c001dd10:	01 f5                	add    ebp,esi
c001dd12:	eb bd                	jmp    c001dcd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dd14:	51                   	push   ecx
c001dd15:	51                   	push   ecx
c001dd16:	52                   	push   edx
c001dd17:	50                   	push   eax
c001dd18:	e8 87 ea ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001dd1d:	89 c2                	mov    edx,eax
c001dd1f:	66 ed                	in     ax,dx
c001dd21:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dd26:	83 c4 10             	add    esp,0x10
c001dd29:	46                   	inc    esi
c001dd2a:	eb cf                	jmp    c001dcfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dd2c:	51                   	push   ecx
c001dd2d:	51                   	push   ecx
c001dd2e:	52                   	push   edx
c001dd2f:	50                   	push   eax
c001dd30:	e8 ef eb ff ff       	call   c001c924 <IDE::waitInterrupt(unsigned char)>
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	84 c0                	test   al,al
c001dd3a:	0f 84 e8 fd ff ff    	je     c001db28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd40:	52                   	push   edx
c001dd41:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dd46:	52                   	push   edx
c001dd47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd4e:	50                   	push   eax
c001dd4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd55:	e8 36 ea ff ff       	call   c001c790 <IDE::prepareInterrupt(unsigned char)>
c001dd5a:	83 c4 10             	add    esp,0x10
c001dd5d:	50                   	push   eax
c001dd5e:	50                   	push   eax
c001dd5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd66:	50                   	push   eax
c001dd67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd6d:	e8 32 ea ff ff       	call   c001c7a4 <IDE::getBase(unsigned char)>
c001dd72:	8d 50 07             	lea    edx,[eax+0x7]
c001dd75:	ec                   	in     al,dx
c001dd76:	83 c4 10             	add    esp,0x10
c001dd79:	a8 88                	test   al,0x88
c001dd7b:	74 0a                	je     c001dd87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dd7d:	4b                   	dec    ebx
c001dd7e:	75 dd                	jne    c001dd5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dd80:	bb 02 00 00 00       	mov    ebx,0x2
c001dd85:	eb 02                	jmp    c001dd89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd87:	31 db                	xor    ebx,ebx
c001dd89:	83 c4 1c             	add    esp,0x1c
c001dd8c:	89 d8                	mov    eax,ebx
c001dd8e:	5b                   	pop    ebx
c001dd8f:	5e                   	pop    esi
c001dd90:	5f                   	pop    edi
c001dd91:	5d                   	pop    ebp
c001dd92:	c3                   	ret    
c001dd93:	90                   	nop

c001dd94 <ATAPI::diskRemoved()>:
c001dd94:	83 ec 18             	sub    esp,0x18
c001dd97:	68 17 36 02 c0       	push   0xc0023617
c001dd9c:	e8 a6 13 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001dda1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dda5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ddac:	83 c4 1c             	add    esp,0x1c
c001ddaf:	c3                   	ret    

c001ddb0 <ATAPI::eject()>:
c001ddb0:	57                   	push   edi
c001ddb1:	b9 03 00 00 00       	mov    ecx,0x3
c001ddb6:	53                   	push   ebx
c001ddb7:	83 ec 14             	sub    esp,0x14
c001ddba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ddbe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ddc2:	fc                   	cld    
c001ddc3:	31 c0                	xor    eax,eax
c001ddc5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ddc7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ddcc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ddd1:	50                   	push   eax
c001ddd2:	50                   	push   eax
c001ddd3:	6a 00                	push   0x0
c001ddd5:	6a 00                	push   0x0
c001ddd7:	6a 00                	push   0x0
c001ddd9:	6a 02                	push   0x2
c001dddb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dddf:	50                   	push   eax
c001dde0:	53                   	push   ebx
c001dde1:	e8 ee fc ff ff       	call   c001dad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dde6:	83 c4 14             	add    esp,0x14
c001dde9:	53                   	push   ebx
c001ddea:	e8 a5 ff ff ff       	call   c001dd94 <ATAPI::diskRemoved()>
c001ddef:	83 c4 24             	add    esp,0x24
c001ddf2:	5b                   	pop    ebx
c001ddf3:	5f                   	pop    edi
c001ddf4:	c3                   	ret    
c001ddf5:	90                   	nop

c001ddf6 <ATAPI::diskInserted()>:
c001ddf6:	53                   	push   ebx
c001ddf7:	83 ec 14             	sub    esp,0x14
c001ddfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ddfe:	68 2d 36 02 c0       	push   0xc002362d
c001de03:	e8 3f 13 ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001de08:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001de0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de12:	e8 b3 2b ff ff       	call   c00109ca <PhysicalDisk::startCache()>
c001de17:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001de1b:	83 c4 18             	add    esp,0x18
c001de1e:	5b                   	pop    ebx
c001de1f:	e9 82 4b ff ff       	jmp    c00129a6 <createPartitionsForDisk(PhysicalDisk*)>

c001de24 <ATAPI::detectMedia()>:
c001de24:	56                   	push   esi
c001de25:	53                   	push   ebx
c001de26:	83 ec 28             	sub    esp,0x28
c001de29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de2d:	6a 0c                	push   0xc
c001de2f:	6a 00                	push   0x0
c001de31:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001de35:	56                   	push   esi
c001de36:	e8 7f 28 fe ff       	call   c00006ba <memset>
c001de3b:	58                   	pop    eax
c001de3c:	5a                   	pop    edx
c001de3d:	6a 00                	push   0x0
c001de3f:	6a 00                	push   0x0
c001de41:	6a 00                	push   0x0
c001de43:	6a 00                	push   0x0
c001de45:	56                   	push   esi
c001de46:	53                   	push   ebx
c001de47:	e8 88 fc ff ff       	call   c001dad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de4c:	83 c4 1c             	add    esp,0x1c
c001de4f:	6a 0c                	push   0xc
c001de51:	6a 00                	push   0x0
c001de53:	56                   	push   esi
c001de54:	e8 61 28 fe ff       	call   c00006ba <memset>
c001de59:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001de5e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001de63:	59                   	pop    ecx
c001de64:	58                   	pop    eax
c001de65:	6a 01                	push   0x1
c001de67:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001de6b:	50                   	push   eax
c001de6c:	6a 00                	push   0x0
c001de6e:	6a 12                	push   0x12
c001de70:	56                   	push   esi
c001de71:	53                   	push   ebx
c001de72:	e8 5d fc ff ff       	call   c001dad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de77:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001de7b:	83 c4 20             	add    esp,0x20
c001de7e:	83 e0 7f             	and    eax,0x7f
c001de81:	3c 70                	cmp    al,0x70
c001de83:	74 15                	je     c001de9a <ATAPI::detectMedia()+0x76>
c001de85:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de8c:	75 0c                	jne    c001de9a <ATAPI::detectMedia()+0x76>
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	53                   	push   ebx
c001de92:	e8 5f ff ff ff       	call   c001ddf6 <ATAPI::diskInserted()>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001de9e:	83 e0 0f             	and    eax,0xf
c001dea1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dea6:	75 18                	jne    c001dec0 <ATAPI::detectMedia()+0x9c>
c001dea8:	3c 02                	cmp    al,0x2
c001deaa:	75 14                	jne    c001dec0 <ATAPI::detectMedia()+0x9c>
c001deac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001deb3:	74 24                	je     c001ded9 <ATAPI::detectMedia()+0xb5>
c001deb5:	83 ec 0c             	sub    esp,0xc
c001deb8:	53                   	push   ebx
c001deb9:	e8 d6 fe ff ff       	call   c001dd94 <ATAPI::diskRemoved()>
c001debe:	eb 16                	jmp    c001ded6 <ATAPI::detectMedia()+0xb2>
c001dec0:	84 c0                	test   al,al
c001dec2:	75 15                	jne    c001ded9 <ATAPI::detectMedia()+0xb5>
c001dec4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001decb:	75 0c                	jne    c001ded9 <ATAPI::detectMedia()+0xb5>
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	53                   	push   ebx
c001ded1:	e8 20 ff ff ff       	call   c001ddf6 <ATAPI::diskInserted()>
c001ded6:	83 c4 10             	add    esp,0x10
c001ded9:	83 c4 24             	add    esp,0x24
c001dedc:	5b                   	pop    ebx
c001dedd:	5e                   	pop    esi
c001dede:	c3                   	ret    
c001dedf:	90                   	nop

c001dee0 <ATAPI::open(int, int, void*)>:
c001dee0:	53                   	push   ebx
c001dee1:	83 ec 08             	sub    esp,0x8
c001dee4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001def0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001def6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001defc:	c1 e0 06             	shl    eax,0x6
c001deff:	01 d0                	add    eax,edx
c001df01:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001df08:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001df0e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001df15:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001df1f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001df25:	6a 04                	push   0x4
c001df27:	6a 0c                	push   0xc
c001df29:	51                   	push   ecx
c001df2a:	52                   	push   edx
c001df2b:	e8 86 e8 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df30:	90                   	nop
c001df31:	90                   	nop
c001df32:	6a 00                	push   0x0
c001df34:	6a 0c                	push   0xc
c001df36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df3d:	50                   	push   eax
c001df3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df44:	e8 6d e8 ff ff       	call   c001c7b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df49:	83 c4 14             	add    esp,0x14
c001df4c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001df53:	53                   	push   ebx
c001df54:	e8 cb fe ff ff       	call   c001de24 <ATAPI::detectMedia()>
c001df59:	83 c4 18             	add    esp,0x18
c001df5c:	31 c0                	xor    eax,eax
c001df5e:	5b                   	pop    ebx
c001df5f:	c3                   	ret    

c001df60 <ATAPI::read(unsigned long long, int, void*)>:
c001df60:	55                   	push   ebp
c001df61:	57                   	push   edi
c001df62:	56                   	push   esi
c001df63:	53                   	push   ebx
c001df64:	83 ec 1c             	sub    esp,0x1c
c001df67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df6b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df6f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df73:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df7a:	74 3c                	je     c001dfb8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001df7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001df80:	b9 03 00 00 00       	mov    ecx,0x3
c001df85:	fc                   	cld    
c001df86:	31 c0                	xor    eax,eax
c001df88:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df8a:	0f ce                	bswap  esi
c001df8c:	89 e8                	mov    eax,ebp
c001df8e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001df93:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001df97:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001df9b:	50                   	push   eax
c001df9c:	50                   	push   eax
c001df9d:	55                   	push   ebp
c001df9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfa2:	c1 e5 0b             	shl    ebp,0xb
c001dfa5:	6a 00                	push   0x0
c001dfa7:	55                   	push   ebp
c001dfa8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dfac:	50                   	push   eax
c001dfad:	53                   	push   ebx
c001dfae:	e8 21 fb ff ff       	call   c001dad4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dfb3:	83 c4 20             	add    esp,0x20
c001dfb6:	eb 1a                	jmp    c001dfd2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dfb8:	83 ec 0c             	sub    esp,0xc
c001dfbb:	53                   	push   ebx
c001dfbc:	e8 63 fe ff ff       	call   c001de24 <ATAPI::detectMedia()>
c001dfc1:	83 c4 10             	add    esp,0x10
c001dfc4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfcb:	75 af                	jne    c001df7c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dfcd:	b8 02 00 00 00       	mov    eax,0x2
c001dfd2:	83 c4 1c             	add    esp,0x1c
c001dfd5:	5b                   	pop    ebx
c001dfd6:	5e                   	pop    esi
c001dfd7:	5f                   	pop    edi
c001dfd8:	5d                   	pop    ebp
c001dfd9:	c3                   	ret    

c001dfda <AVX::open(int, int, void*)>:
c001dfda:	83 ec 0c             	sub    esp,0xc
c001dfdd:	e8 96 10 00 00       	call   c001f078 <avxInit>
c001dfe2:	b8 00 00 00 00       	mov    eax,0x0
c001dfe7:	83 c4 0c             	add    esp,0xc
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <AVX::close(int, int, void*)>:
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	e8 85 10 00 00       	call   c001f079 <avxClose>
c001dff4:	b8 00 00 00 00       	mov    eax,0x0
c001dff9:	83 c4 0c             	add    esp,0xc
c001dffc:	c3                   	ret    
c001dffd:	90                   	nop

c001dffe <AVX::available()>:
c001dffe:	83 ec 0c             	sub    esp,0xc
c001e001:	e8 6a 10 00 00       	call   c001f070 <avxDetect>
c001e006:	85 c0                	test   eax,eax
c001e008:	0f 95 c0             	setne  al
c001e00b:	83 c4 0c             	add    esp,0xc
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <AVX::save(void*)>:
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e017:	83 ec 0c             	sub    esp,0xc
c001e01a:	50                   	push   eax
c001e01b:	e8 56 10 00 00       	call   c001f076 <avxSave>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	90                   	nop
c001e024:	83 c4 0c             	add    esp,0xc
c001e027:	c3                   	ret    

c001e028 <AVX::load(void*)>:
c001e028:	83 ec 0c             	sub    esp,0xc
c001e02b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e02f:	83 ec 0c             	sub    esp,0xc
c001e032:	50                   	push   eax
c001e033:	e8 3f 10 00 00       	call   c001f077 <avxLoad>
c001e038:	83 c4 10             	add    esp,0x10
c001e03b:	90                   	nop
c001e03c:	83 c4 0c             	add    esp,0xc
c001e03f:	c3                   	ret    

c001e040 <AVX::AVX()>:
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e047:	83 ec 08             	sub    esp,0x8
c001e04a:	68 78 36 02 c0       	push   0xc0023678
c001e04f:	50                   	push   eax
c001e050:	e8 eb 29 ff ff       	call   c0010a40 <FPU::FPU(char const*)>
c001e055:	83 c4 10             	add    esp,0x10
c001e058:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001e05d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e061:	89 10                	mov    DWORD PTR [eax],edx
c001e063:	90                   	nop
c001e064:	83 c4 0c             	add    esp,0xc
c001e067:	c3                   	ret    

c001e068 <MMX::available()>:
c001e068:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001e06d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e073:	83 e0 20             	and    eax,0x20
c001e076:	84 c0                	test   al,al
c001e078:	0f 95 c0             	setne  al
c001e07b:	c3                   	ret    

c001e07c <MMX::open(int, int, void*)>:
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	e8 68 10 00 00       	call   c001f0ec <x87Init>
c001e084:	b8 00 00 00 00       	mov    eax,0x0
c001e089:	83 c4 0c             	add    esp,0xc
c001e08c:	c3                   	ret    
c001e08d:	90                   	nop

c001e08e <MMX::close(int, int, void*)>:
c001e08e:	83 ec 0c             	sub    esp,0xc
c001e091:	e8 70 10 00 00       	call   c001f106 <x87Close>
c001e096:	b8 00 00 00 00       	mov    eax,0x0
c001e09b:	83 c4 0c             	add    esp,0xc
c001e09e:	c3                   	ret    
c001e09f:	90                   	nop

c001e0a0 <MMX::save(void*)>:
c001e0a0:	83 ec 0c             	sub    esp,0xc
c001e0a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	50                   	push   eax
c001e0ab:	e8 31 10 00 00       	call   c001f0e1 <x87Save>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	90                   	nop
c001e0b4:	83 c4 0c             	add    esp,0xc
c001e0b7:	c3                   	ret    

c001e0b8 <MMX::load(void*)>:
c001e0b8:	83 ec 0c             	sub    esp,0xc
c001e0bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0bf:	83 ec 0c             	sub    esp,0xc
c001e0c2:	50                   	push   eax
c001e0c3:	e8 1f 10 00 00       	call   c001f0e7 <x87Load>
c001e0c8:	83 c4 10             	add    esp,0x10
c001e0cb:	90                   	nop
c001e0cc:	83 c4 0c             	add    esp,0xc
c001e0cf:	c3                   	ret    

c001e0d0 <MMX::MMX()>:
c001e0d0:	83 ec 0c             	sub    esp,0xc
c001e0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d7:	83 ec 08             	sub    esp,0x8
c001e0da:	68 b8 36 02 c0       	push   0xc00236b8
c001e0df:	50                   	push   eax
c001e0e0:	e8 5b 29 ff ff       	call   c0010a40 <FPU::FPU(char const*)>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001e0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f1:	89 10                	mov    DWORD PTR [eax],edx
c001e0f3:	90                   	nop
c001e0f4:	83 c4 0c             	add    esp,0xc
c001e0f7:	c3                   	ret    

c001e0f8 <SSE::open(int, int, void*)>:
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	e8 a7 0f 00 00       	call   c001f0a7 <sseInit>
c001e100:	b8 00 00 00 00       	mov    eax,0x0
c001e105:	83 c4 0c             	add    esp,0xc
c001e108:	c3                   	ret    
c001e109:	90                   	nop

c001e10a <SSE::close(int, int, void*)>:
c001e10a:	83 ec 0c             	sub    esp,0xc
c001e10d:	e8 a5 0f 00 00       	call   c001f0b7 <sseClose>
c001e112:	b8 00 00 00 00       	mov    eax,0x0
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	c3                   	ret    
c001e11b:	90                   	nop

c001e11c <SSE::available()>:
c001e11c:	83 ec 1c             	sub    esp,0x1c
c001e11f:	e8 5c 0f 00 00       	call   c001f080 <sseDetect>
c001e124:	85 c0                	test   eax,eax
c001e126:	0f 95 c0             	setne  al
c001e129:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e12d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e131:	83 c4 1c             	add    esp,0x1c
c001e134:	c3                   	ret    
c001e135:	90                   	nop

c001e136 <SSE::save(void*)>:
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e13d:	83 ec 0c             	sub    esp,0xc
c001e140:	50                   	push   eax
c001e141:	e8 55 0f 00 00       	call   c001f09b <sseSave>
c001e146:	83 c4 10             	add    esp,0x10
c001e149:	90                   	nop
c001e14a:	83 c4 0c             	add    esp,0xc
c001e14d:	c3                   	ret    

c001e14e <SSE::load(void*)>:
c001e14e:	83 ec 0c             	sub    esp,0xc
c001e151:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e155:	83 ec 0c             	sub    esp,0xc
c001e158:	50                   	push   eax
c001e159:	e8 43 0f 00 00       	call   c001f0a1 <sseLoad>
c001e15e:	83 c4 10             	add    esp,0x10
c001e161:	90                   	nop
c001e162:	83 c4 0c             	add    esp,0xc
c001e165:	c3                   	ret    

c001e166 <SSE::SSE()>:
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16d:	83 ec 08             	sub    esp,0x8
c001e170:	68 f8 36 02 c0       	push   0xc00236f8
c001e175:	50                   	push   eax
c001e176:	e8 c5 28 ff ff       	call   c0010a40 <FPU::FPU(char const*)>
c001e17b:	83 c4 10             	add    esp,0x10
c001e17e:	ba 08 37 02 c0       	mov    edx,0xc0023708
c001e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e187:	89 10                	mov    DWORD PTR [eax],edx
c001e189:	90                   	nop
c001e18a:	83 c4 0c             	add    esp,0xc
c001e18d:	c3                   	ret    

c001e18e <x87::open(int, int, void*)>:
c001e18e:	83 ec 0c             	sub    esp,0xc
c001e191:	e8 56 0f 00 00       	call   c001f0ec <x87Init>
c001e196:	b8 00 00 00 00       	mov    eax,0x0
c001e19b:	83 c4 0c             	add    esp,0xc
c001e19e:	c3                   	ret    
c001e19f:	90                   	nop

c001e1a0 <x87::close(int, int, void*)>:
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	e8 5e 0f 00 00       	call   c001f106 <x87Close>
c001e1a8:	b8 00 00 00 00       	mov    eax,0x0
c001e1ad:	83 c4 0c             	add    esp,0xc
c001e1b0:	c3                   	ret    
c001e1b1:	90                   	nop

c001e1b2 <x87::available()>:
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	e8 0c 0f 00 00       	call   c001f0c6 <x87Detect>
c001e1ba:	85 c0                	test   eax,eax
c001e1bc:	0f 95 c0             	setne  al
c001e1bf:	83 c4 0c             	add    esp,0xc
c001e1c2:	c3                   	ret    
c001e1c3:	90                   	nop

c001e1c4 <x87::save(void*)>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1cb:	83 ec 0c             	sub    esp,0xc
c001e1ce:	50                   	push   eax
c001e1cf:	e8 0d 0f 00 00       	call   c001f0e1 <x87Save>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	90                   	nop
c001e1d8:	83 c4 0c             	add    esp,0xc
c001e1db:	c3                   	ret    

c001e1dc <x87::load(void*)>:
c001e1dc:	83 ec 0c             	sub    esp,0xc
c001e1df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1e3:	83 ec 0c             	sub    esp,0xc
c001e1e6:	50                   	push   eax
c001e1e7:	e8 fb 0e 00 00       	call   c001f0e7 <x87Load>
c001e1ec:	83 c4 10             	add    esp,0x10
c001e1ef:	90                   	nop
c001e1f0:	83 c4 0c             	add    esp,0xc
c001e1f3:	c3                   	ret    

c001e1f4 <x87::x87()>:
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fb:	83 ec 08             	sub    esp,0x8
c001e1fe:	68 38 37 02 c0       	push   0xc0023738
c001e203:	50                   	push   eax
c001e204:	e8 37 28 ff ff       	call   c0010a40 <FPU::FPU(char const*)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	ba 48 37 02 c0       	mov    edx,0xc0023748
c001e211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e215:	89 10                	mov    DWORD PTR [eax],edx
c001e217:	90                   	nop
c001e218:	83 c4 0c             	add    esp,0xc
c001e21b:	c3                   	ret    

c001e21c <APIC::disable()>:
c001e21c:	90                   	nop
c001e21d:	c3                   	ret    

c001e21e <APIC::close(int, int, void*)>:
c001e21e:	55                   	push   ebp
c001e21f:	89 e5                	mov    ebp,esp
c001e221:	83 ec 08             	sub    esp,0x8
c001e224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e227:	8b 00                	mov    eax,DWORD PTR [eax]
c001e229:	83 c0 3c             	add    eax,0x3c
c001e22c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e22e:	83 ec 0c             	sub    esp,0xc
c001e231:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e234:	ff d0                	call   eax
c001e236:	83 c4 10             	add    esp,0x10
c001e239:	b8 00 00 00 00       	mov    eax,0x0
c001e23e:	c9                   	leave  
c001e23f:	c3                   	ret    

c001e240 <IOAPIC::close(int, int, void*)>:
c001e240:	b8 00 00 00 00       	mov    eax,0x0
c001e245:	c3                   	ret    

c001e246 <APIC::io_wait()>:
c001e246:	eb 00                	jmp    c001e248 <APIC::io_wait()+0x2>
c001e248:	eb 00                	jmp    c001e24a <APIC::io_wait()+0x4>
c001e24a:	90                   	nop
c001e24b:	c3                   	ret    

c001e24c <APIC::getBase()>:
c001e24c:	55                   	push   ebp
c001e24d:	89 e5                	mov    ebp,esp
c001e24f:	83 ec 18             	sub    esp,0x18
c001e252:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001e257:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e25d:	83 e0 08             	and    eax,0x8
c001e260:	84 c0                	test   al,al
c001e262:	75 07                	jne    c001e26b <APIC::getBase()+0x1f>
c001e264:	b8 00 00 00 00       	mov    eax,0x0
c001e269:	eb 21                	jmp    c001e28c <APIC::getBase()+0x40>
c001e26b:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001e270:	83 ec 08             	sub    esp,0x8
c001e273:	6a 1b                	push   0x1b
c001e275:	50                   	push   eax
c001e276:	e8 fb d2 fe ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c001e27b:	83 c4 10             	add    esp,0x10
c001e27e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e281:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e284:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e287:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e28c:	c9                   	leave  
c001e28d:	c3                   	ret    

c001e28e <APIC::eoi(unsigned char)>:
c001e28e:	55                   	push   ebp
c001e28f:	89 e5                	mov    ebp,esp
c001e291:	83 ec 28             	sub    esp,0x28
c001e294:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e297:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2a0:	e8 a7 ff ff ff       	call   c001e24c <APIC::getBase()>
c001e2a5:	83 c4 10             	add    esp,0x10
c001e2a8:	05 b0 00 00 00       	add    eax,0xb0
c001e2ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e2b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e2b3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e2b9:	90                   	nop
c001e2ba:	c9                   	leave  
c001e2bb:	c3                   	ret    

c001e2bc <APIC::open(int, int, void*)>:
c001e2bc:	55                   	push   ebp
c001e2bd:	89 e5                	mov    ebp,esp
c001e2bf:	57                   	push   edi
c001e2c0:	56                   	push   esi
c001e2c1:	53                   	push   ebx
c001e2c2:	83 ec 1c             	sub    esp,0x1c
c001e2c5:	83 ec 0c             	sub    esp,0xc
c001e2c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2cb:	e8 7c ff ff ff       	call   c001e24c <APIC::getBase()>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	05 f0 00 00 00       	add    eax,0xf0
c001e2d8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e2db:	83 ec 0c             	sub    esp,0xc
c001e2de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2e1:	e8 66 ff ff ff       	call   c001e24c <APIC::getBase()>
c001e2e6:	83 c4 10             	add    esp,0x10
c001e2e9:	89 c2                	mov    edx,eax
c001e2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2ee:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e2f4:	89 c7                	mov    edi,eax
c001e2f6:	81 e7 ff 00 00 00    	and    edi,0xff
c001e2fc:	89 d0                	mov    eax,edx
c001e2fe:	ba 00 00 00 00       	mov    edx,0x0
c001e303:	89 c1                	mov    ecx,eax
c001e305:	80 e5 ff             	and    ch,0xff
c001e308:	89 cb                	mov    ebx,ecx
c001e30a:	89 d0                	mov    eax,edx
c001e30c:	25 ff 00 00 00       	and    eax,0xff
c001e311:	89 c6                	mov    esi,eax
c001e313:	89 d8                	mov    eax,ebx
c001e315:	89 f2                	mov    edx,esi
c001e317:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e31a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e31d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e321:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e325:	83 e0 00             	and    eax,0x0
c001e328:	09 d0                	or     eax,edx
c001e32a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e32e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e331:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e337:	8d 50 01             	lea    edx,[eax+0x1]
c001e33a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e33d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e343:	31 d2                	xor    edx,edx
c001e345:	88 c2                	mov    dl,al
c001e347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e34a:	83 c2 08             	add    edx,0x8
c001e34d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e351:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e357:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e35d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e361:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e364:	8b 00                	mov    eax,DWORD PTR [eax]
c001e366:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e369:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e370:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e373:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e376:	89 10                	mov    DWORD PTR [eax],edx
c001e378:	b8 00 00 00 00       	mov    eax,0x0
c001e37d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e380:	5b                   	pop    ebx
c001e381:	5e                   	pop    esi
c001e382:	5f                   	pop    edi
c001e383:	5d                   	pop    ebp
c001e384:	c3                   	ret    
c001e385:	90                   	nop

c001e386 <IOAPIC::IOAPIC()>:
c001e386:	83 ec 0c             	sub    esp,0xc
c001e389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38d:	83 ec 08             	sub    esp,0x8
c001e390:	68 78 37 02 c0       	push   0xc0023778
c001e395:	50                   	push   eax
c001e396:	e8 b1 23 ff ff       	call   c001074c <Device::Device(char const*)>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c001e3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a7:	89 10                	mov    DWORD PTR [eax],edx
c001e3a9:	90                   	nop
c001e3aa:	83 c4 0c             	add    esp,0xc
c001e3ad:	c3                   	ret    

c001e3ae <APIC::APIC()>:
c001e3ae:	53                   	push   ebx
c001e3af:	83 ec 18             	sub    esp,0x18
c001e3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3b6:	83 ec 08             	sub    esp,0x8
c001e3b9:	68 80 37 02 c0       	push   0xc0023780
c001e3be:	50                   	push   eax
c001e3bf:	e8 d6 2a ff ff       	call   c0010e9a <InterruptController::InterruptController(char const*)>
c001e3c4:	83 c4 10             	add    esp,0x10
c001e3c7:	ba 58 38 02 c0       	mov    edx,0xc0023858
c001e3cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3d0:	89 10                	mov    DWORD PTR [eax],edx
c001e3d2:	a0 a0 63 02 c0       	mov    al,ds:0xc00263a0
c001e3d7:	83 f0 01             	xor    eax,0x1
c001e3da:	84 c0                	test   al,al
c001e3dc:	0f 84 a2 00 00 00    	je     c001e484 <APIC::APIC()+0xd6>
c001e3e2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e3e7:	a0 50 4e 02 c0       	mov    al,ds:0xc0024e50
c001e3ec:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e3f0:	0f 83 87 00 00 00    	jae    c001e47d <APIC::APIC()+0xcf>
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	68 68 01 00 00       	push   0x168
c001e3fe:	e8 0f 0c ff ff       	call   c000f012 <operator new(unsigned long)>
c001e403:	83 c4 10             	add    esp,0x10
c001e406:	89 c3                	mov    ebx,eax
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	53                   	push   ebx
c001e40c:	e8 75 ff ff ff       	call   c001e386 <IOAPIC::IOAPIC()>
c001e411:	83 c4 10             	add    esp,0x10
c001e414:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e418:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e41c:	25 ff 00 00 00       	and    eax,0xff
c001e421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e425:	89 14 85 80 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c80],edx
c001e42c:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c001e431:	40                   	inc    eax
c001e432:	a3 60 63 02 c0       	mov    ds:0xc0026360,eax
c001e437:	a1 a8 45 02 c0       	mov    eax,ds:0xc00245a8
c001e43c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e442:	83 ec 08             	sub    esp,0x8
c001e445:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e449:	50                   	push   eax
c001e44a:	e8 0d 21 ff ff       	call   c001055c <Device::addChild(Device*)>
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e456:	8b 00                	mov    eax,DWORD PTR [eax]
c001e458:	83 c0 08             	add    eax,0x8
c001e45b:	8b 10                	mov    edx,DWORD PTR [eax]
c001e45d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e461:	25 ff 00 00 00       	and    eax,0xff
c001e466:	6a 00                	push   0x0
c001e468:	6a 00                	push   0x0
c001e46a:	50                   	push   eax
c001e46b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e46f:	ff d2                	call   edx
c001e471:	83 c4 10             	add    esp,0x10
c001e474:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e478:	e9 6a ff ff ff       	jmp    c001e3e7 <APIC::APIC()+0x39>
c001e47d:	c6 05 a0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263a0,0x1
c001e484:	90                   	nop
c001e485:	83 c4 18             	add    esp,0x18
c001e488:	5b                   	pop    ebx
c001e489:	c3                   	ret    

c001e48a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e48a:	55                   	push   ebp
c001e48b:	89 e5                	mov    ebp,esp
c001e48d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e490:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e496:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e499:	72 1d                	jb     c001e4b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e49e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4a7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e4ad:	01 d0                	add    eax,edx
c001e4af:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e4b2:	73 04                	jae    c001e4b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e4b4:	b0 01                	mov    al,0x1
c001e4b6:	eb 02                	jmp    c001e4ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e4b8:	b0 00                	mov    al,0x0
c001e4ba:	5d                   	pop    ebp
c001e4bb:	c3                   	ret    

c001e4bc <IOAPIC::read(int)>:
c001e4bc:	55                   	push   ebp
c001e4bd:	89 e5                	mov    ebp,esp
c001e4bf:	83 ec 10             	sub    esp,0x10
c001e4c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e4cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e4ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4d1:	31 d2                	xor    edx,edx
c001e4d3:	88 c2                	mov    dl,al
c001e4d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4d8:	89 10                	mov    DWORD PTR [eax],edx
c001e4da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4dd:	83 c0 10             	add    eax,0x10
c001e4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e2:	c9                   	leave  
c001e4e3:	c3                   	ret    

c001e4e4 <IOAPIC::open(int, int, void*)>:
c001e4e4:	55                   	push   ebp
c001e4e5:	89 e5                	mov    ebp,esp
c001e4e7:	57                   	push   edi
c001e4e8:	56                   	push   esi
c001e4e9:	53                   	push   ebx
c001e4ea:	83 ec 0c             	sub    esp,0xc
c001e4ed:	83 ec 0c             	sub    esp,0xc
c001e4f0:	68 ab 37 02 c0       	push   0xc00237ab
c001e4f5:	e8 4d 0c ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e500:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e503:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e50c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e512:	8b 14 85 80 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb180]
c001e519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e51c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e525:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e52b:	8b 14 85 00 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb100]
c001e532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e535:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e53e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e547:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e54d:	89 c7                	mov    edi,eax
c001e54f:	81 e7 ff 00 00 00    	and    edi,0xff
c001e555:	89 d0                	mov    eax,edx
c001e557:	ba 00 00 00 00       	mov    edx,0x0
c001e55c:	89 c1                	mov    ecx,eax
c001e55e:	80 e5 ff             	and    ch,0xff
c001e561:	89 cb                	mov    ebx,ecx
c001e563:	89 d0                	mov    eax,edx
c001e565:	25 ff 00 00 00       	and    eax,0xff
c001e56a:	89 c6                	mov    esi,eax
c001e56c:	89 d8                	mov    eax,ebx
c001e56e:	89 f2                	mov    edx,esi
c001e570:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e573:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e576:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e57a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e57e:	83 e0 00             	and    eax,0x0
c001e581:	09 d0                	or     eax,edx
c001e583:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e58a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e590:	8d 50 01             	lea    edx,[eax+0x1]
c001e593:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e596:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e59c:	31 d2                	xor    edx,edx
c001e59e:	88 c2                	mov    dl,al
c001e5a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a3:	83 c2 08             	add    edx,0x8
c001e5a6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e5aa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e5b0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e5b6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e5ba:	83 ec 08             	sub    esp,0x8
c001e5bd:	6a 01                	push   0x1
c001e5bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5c2:	e8 f5 fe ff ff       	call   c001e4bc <IOAPIC::read(int)>
c001e5c7:	83 c4 10             	add    esp,0x10
c001e5ca:	c1 f8 10             	sar    eax,0x10
c001e5cd:	25 ff 00 00 00       	and    eax,0xff
c001e5d2:	8d 50 01             	lea    edx,[eax+0x1]
c001e5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e5de:	b8 00 00 00 00       	mov    eax,0x0
c001e5e3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e5e6:	5b                   	pop    ebx
c001e5e7:	5e                   	pop    esi
c001e5e8:	5f                   	pop    edi
c001e5e9:	5d                   	pop    ebp
c001e5ea:	c3                   	ret    
c001e5eb:	90                   	nop

c001e5ec <IOAPIC::write(int, int)>:
c001e5ec:	55                   	push   ebp
c001e5ed:	89 e5                	mov    ebp,esp
c001e5ef:	83 ec 10             	sub    esp,0x10
c001e5f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e601:	31 d2                	xor    edx,edx
c001e603:	88 c2                	mov    dl,al
c001e605:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e608:	89 10                	mov    DWORD PTR [eax],edx
c001e60a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e60d:	8d 50 10             	lea    edx,[eax+0x10]
c001e610:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e613:	89 02                	mov    DWORD PTR [edx],eax
c001e615:	90                   	nop
c001e616:	c9                   	leave  
c001e617:	c3                   	ret    

c001e618 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e618:	55                   	push   ebp
c001e619:	89 e5                	mov    ebp,esp
c001e61b:	83 ec 20             	sub    esp,0x20
c001e61e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e621:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e624:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e627:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e62a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e62d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e630:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e633:	88 d0                	mov    al,dl
c001e635:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e638:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e63b:	25 ff 00 00 00       	and    eax,0xff
c001e640:	83 c0 08             	add    eax,0x8
c001e643:	01 c0                	add    eax,eax
c001e645:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e648:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e64b:	25 ff 00 00 00       	and    eax,0xff
c001e650:	83 c0 08             	add    eax,0x8
c001e653:	01 c0                	add    eax,eax
c001e655:	40                   	inc    eax
c001e656:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e659:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e65c:	50                   	push   eax
c001e65d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e660:	e8 57 fe ff ff       	call   c001e4bc <IOAPIC::read(int)>
c001e665:	83 c4 08             	add    esp,0x8
c001e668:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e66b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e672:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e675:	c1 e0 18             	shl    eax,0x18
c001e678:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e67b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e67e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e681:	52                   	push   edx
c001e682:	50                   	push   eax
c001e683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e686:	e8 61 ff ff ff       	call   c001e5ec <IOAPIC::write(int, int)>
c001e68b:	83 c4 0c             	add    esp,0xc
c001e68e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e691:	50                   	push   eax
c001e692:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e695:	e8 22 fe ff ff       	call   c001e4bc <IOAPIC::read(int)>
c001e69a:	83 c4 08             	add    esp,0x8
c001e69d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6a0:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e6a7:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e6ae:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e6b5:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e6bc:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e6bf:	25 ff 00 00 00       	and    eax,0xff
c001e6c4:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e6c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e6ca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6cd:	52                   	push   edx
c001e6ce:	50                   	push   eax
c001e6cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6d2:	e8 15 ff ff ff       	call   c001e5ec <IOAPIC::write(int, int)>
c001e6d7:	83 c4 0c             	add    esp,0xc
c001e6da:	90                   	nop
c001e6db:	c9                   	leave  
c001e6dc:	c3                   	ret    
c001e6dd:	90                   	nop

c001e6de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e6de:	55                   	push   ebp
c001e6df:	89 e5                	mov    ebp,esp
c001e6e1:	56                   	push   esi
c001e6e2:	53                   	push   ebx
c001e6e3:	83 ec 20             	sub    esp,0x20
c001e6e6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6ec:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e6f0:	74 2a                	je     c001e71c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e6f2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e6f6:	7f 14                	jg     c001e70c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e6f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6fb:	05 00 3d 02 c0       	add    eax,0xc0023d00
c001e700:	8a 00                	mov    al,BYTE PTR [eax]
c001e702:	25 ff 00 00 00       	and    eax,0xff
c001e707:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e70a:	eb 10                	jmp    c001e71c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e70c:	83 ec 0c             	sub    esp,0xc
c001e70f:	68 bc 37 02 c0       	push   0xc00237bc
c001e714:	e8 5d 72 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001e719:	83 c4 10             	add    esp,0x10
c001e71c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e720:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c001e725:	83 ec 08             	sub    esp,0x8
c001e728:	50                   	push   eax
c001e729:	68 f4 37 02 c0       	push   0xc00237f4
c001e72e:	e8 14 0a ff ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001e733:	83 c4 10             	add    esp,0x10
c001e736:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e73d:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c001e742:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e745:	7d 64                	jge    c001e7ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e747:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e74a:	8b 04 85 80 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c80]
c001e751:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e754:	83 ec 08             	sub    esp,0x8
c001e757:	52                   	push   edx
c001e758:	50                   	push   eax
c001e759:	e8 2c fd ff ff       	call   c001e48a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e75e:	83 c4 10             	add    esp,0x10
c001e761:	84 c0                	test   al,al
c001e763:	74 41                	je     c001e7a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e768:	8b 1c 85 80 63 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9c80]
c001e76f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e772:	83 c0 20             	add    eax,0x20
c001e775:	89 c6                	mov    esi,eax
c001e777:	81 e6 ff 00 00 00    	and    esi,0xff
c001e77d:	e8 85 60 ff ff       	call   c0014807 <getCPUNumber()>
c001e782:	89 c2                	mov    edx,eax
c001e784:	c1 fa 1f             	sar    edx,0x1f
c001e787:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e78a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e790:	83 ec 0c             	sub    esp,0xc
c001e793:	56                   	push   esi
c001e794:	52                   	push   edx
c001e795:	50                   	push   eax
c001e796:	51                   	push   ecx
c001e797:	53                   	push   ebx
c001e798:	e8 7b fe ff ff       	call   c001e618 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e79d:	83 c4 20             	add    esp,0x20
c001e7a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e7a4:	eb 05                	jmp    c001e7ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e7a6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e7a9:	eb 92                	jmp    c001e73d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e7ab:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e7ae:	83 f0 01             	xor    eax,0x1
c001e7b1:	84 c0                	test   al,al
c001e7b3:	74 10                	je     c001e7c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e7b5:	83 ec 0c             	sub    esp,0xc
c001e7b8:	68 0b 38 02 c0       	push   0xc002380b
c001e7bd:	e8 b4 71 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001e7c2:	83 c4 10             	add    esp,0x10
c001e7c5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e7c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e7d0:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e7d4:	7f 65                	jg     c001e83b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7dc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7e6:	01 ca                	add    edx,ecx
c001e7e8:	83 c2 54             	add    edx,0x54
c001e7eb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e7ef:	85 c0                	test   eax,eax
c001e7f1:	75 43                	jne    c001e836 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e800:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e803:	01 ca                	add    edx,ecx
c001e805:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e808:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e80b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e812:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e815:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e81c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e81f:	01 ca                	add    edx,ecx
c001e821:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e827:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e82a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e82e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e831:	83 e8 20             	sub    eax,0x20
c001e834:	eb 1a                	jmp    c001e850 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e836:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e839:	eb 95                	jmp    c001e7d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e83b:	83 ec 0c             	sub    esp,0xc
c001e83e:	68 18 38 02 c0       	push   0xc0023818
c001e843:	e8 2e 71 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e850:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e853:	5b                   	pop    ebx
c001e854:	5e                   	pop    esi
c001e855:	5d                   	pop    ebp
c001e856:	c3                   	ret    
c001e857:	90                   	nop

c001e858 <PIC::disable()>:
c001e858:	55                   	push   ebp
c001e859:	89 e5                	mov    ebp,esp
c001e85b:	83 ec 10             	sub    esp,0x10
c001e85e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e864:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e868:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e86b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e86f:	ee                   	out    dx,al
c001e870:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e876:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e87a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e87d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e881:	ee                   	out    dx,al
c001e882:	90                   	nop
c001e883:	c9                   	leave  
c001e884:	c3                   	ret    
c001e885:	90                   	nop

c001e886 <PIC::close(int, int, void*)>:
c001e886:	55                   	push   ebp
c001e887:	89 e5                	mov    ebp,esp
c001e889:	83 ec 08             	sub    esp,0x8
c001e88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e88f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e891:	83 c0 3c             	add    eax,0x3c
c001e894:	8b 00                	mov    eax,DWORD PTR [eax]
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e89c:	ff d0                	call   eax
c001e89e:	83 c4 10             	add    esp,0x10
c001e8a1:	b8 00 00 00 00       	mov    eax,0x0
c001e8a6:	c9                   	leave  
c001e8a7:	c3                   	ret    

c001e8a8 <PIC::PIC()>:
c001e8a8:	83 ec 0c             	sub    esp,0xc
c001e8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8af:	83 ec 08             	sub    esp,0x8
c001e8b2:	68 c4 38 02 c0       	push   0xc00238c4
c001e8b7:	50                   	push   eax
c001e8b8:	e8 dd 25 ff ff       	call   c0010e9a <InterruptController::InterruptController(char const*)>
c001e8bd:	83 c4 10             	add    esp,0x10
c001e8c0:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c001e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c9:	89 10                	mov    DWORD PTR [eax],edx
c001e8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8d5:	31 d2                	xor    edx,edx
c001e8d7:	88 c2                	mov    dl,al
c001e8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8dd:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8ee:	31 d2                	xor    edx,edx
c001e8f0:	88 c2                	mov    dl,al
c001e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e905:	8d 50 01             	lea    edx,[eax+0x1]
c001e908:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e90c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e912:	31 d2                	xor    edx,edx
c001e914:	88 c2                	mov    dl,al
c001e916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e91e:	83 e1 3f             	and    ecx,0x3f
c001e921:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e92f:	31 d2                	xor    edx,edx
c001e931:	88 c2                	mov    dl,al
c001e933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e937:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e942:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e948:	31 d2                	xor    edx,edx
c001e94a:	88 c2                	mov    dl,al
c001e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e950:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e95f:	8d 50 01             	lea    edx,[eax+0x1]
c001e962:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e966:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e96c:	31 d2                	xor    edx,edx
c001e96e:	88 c2                	mov    dl,al
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e978:	83 e1 3f             	and    ecx,0x3f
c001e97b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e97f:	90                   	nop
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	c3                   	ret    

c001e984 <PIC::ioWait()>:
c001e984:	eb 00                	jmp    c001e986 <PIC::ioWait()+0x2>
c001e986:	eb 00                	jmp    c001e988 <PIC::ioWait()+0x4>
c001e988:	90                   	nop
c001e989:	c3                   	ret    

c001e98a <PIC::getIRQReg(int)>:
c001e98a:	55                   	push   ebp
c001e98b:	89 e5                	mov    ebp,esp
c001e98d:	83 ec 10             	sub    esp,0x10
c001e990:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e993:	25 ff 00 00 00       	and    eax,0xff
c001e998:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e99e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e9a1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e9a4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e9a8:	ee                   	out    dx,al
c001e9a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9ac:	25 ff 00 00 00       	and    eax,0xff
c001e9b1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e9b7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e9ba:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e9bd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e9c1:	ee                   	out    dx,al
c001e9c2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e9c8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e9cc:	89 c2                	mov    edx,eax
c001e9ce:	ec                   	in     al,dx
c001e9cf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e9d2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e9d5:	25 ff 00 00 00       	and    eax,0xff
c001e9da:	c1 e0 08             	shl    eax,0x8
c001e9dd:	89 c1                	mov    ecx,eax
c001e9df:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e9e5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9e9:	89 c2                	mov    edx,eax
c001e9eb:	ec                   	in     al,dx
c001e9ec:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e9ef:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e9f2:	25 ff 00 00 00       	and    eax,0xff
c001e9f7:	09 c8                	or     eax,ecx
c001e9f9:	c9                   	leave  
c001e9fa:	c3                   	ret    
c001e9fb:	90                   	nop

c001e9fc <PIC::eoi(unsigned char)>:
c001e9fc:	55                   	push   ebp
c001e9fd:	89 e5                	mov    ebp,esp
c001e9ff:	83 ec 14             	sub    esp,0x14
c001ea02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea05:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001ea08:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea0c:	75 23                	jne    c001ea31 <PIC::eoi(unsigned char)+0x35>
c001ea0e:	6a 0b                	push   0xb
c001ea10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea13:	e8 72 ff ff ff       	call   c001e98a <PIC::getIRQReg(int)>
c001ea18:	83 c4 08             	add    esp,0x8
c001ea1b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001ea1f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001ea23:	25 ff ff 00 00       	and    eax,0xffff
c001ea28:	25 80 00 00 00       	and    eax,0x80
c001ea2d:	85 c0                	test   eax,eax
c001ea2f:	74 5f                	je     c001ea90 <PIC::eoi(unsigned char)+0x94>
c001ea31:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ea35:	75 2d                	jne    c001ea64 <PIC::eoi(unsigned char)+0x68>
c001ea37:	6a 0b                	push   0xb
c001ea39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea3c:	e8 49 ff ff ff       	call   c001e98a <PIC::getIRQReg(int)>
c001ea41:	83 c4 08             	add    esp,0x8
c001ea44:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ea48:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea4b:	66 85 c0             	test   ax,ax
c001ea4e:	78 14                	js     c001ea64 <PIC::eoi(unsigned char)+0x68>
c001ea50:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ea56:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ea5a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ea5d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ea61:	ee                   	out    dx,al
c001ea62:	eb 2d                	jmp    c001ea91 <PIC::eoi(unsigned char)+0x95>
c001ea64:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea68:	76 12                	jbe    c001ea7c <PIC::eoi(unsigned char)+0x80>
c001ea6a:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ea70:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ea74:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea77:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea7b:	ee                   	out    dx,al
c001ea7c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea82:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ea86:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea89:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea8d:	ee                   	out    dx,al
c001ea8e:	eb 01                	jmp    c001ea91 <PIC::eoi(unsigned char)+0x95>
c001ea90:	90                   	nop
c001ea91:	c9                   	leave  
c001ea92:	c3                   	ret    
c001ea93:	90                   	nop

c001ea94 <PIC::remap()>:
c001ea94:	55                   	push   ebp
c001ea95:	89 e5                	mov    ebp,esp
c001ea97:	83 ec 48             	sub    esp,0x48
c001ea9a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001eaa1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001eaa8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001eaae:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001eab1:	89 c2                	mov    edx,eax
c001eab3:	ec                   	in     al,dx
c001eab4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001eab7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001eaba:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001eabd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001eac3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001eac6:	89 c2                	mov    edx,eax
c001eac8:	ec                   	in     al,dx
c001eac9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001eacc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001eacf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ead2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ead8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001eadc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001eadf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001eae2:	ee                   	out    dx,al
c001eae3:	83 ec 0c             	sub    esp,0xc
c001eae6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eae9:	e8 96 fe ff ff       	call   c001e984 <PIC::ioWait()>
c001eaee:	83 c4 10             	add    esp,0x10
c001eaf1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001eaf7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001eafb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001eafe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001eb01:	ee                   	out    dx,al
c001eb02:	83 ec 0c             	sub    esp,0xc
c001eb05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb08:	e8 77 fe ff ff       	call   c001e984 <PIC::ioWait()>
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001eb13:	25 ff 00 00 00       	and    eax,0xff
c001eb18:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001eb1e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001eb21:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001eb24:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001eb27:	ee                   	out    dx,al
c001eb28:	83 ec 0c             	sub    esp,0xc
c001eb2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb2e:	e8 51 fe ff ff       	call   c001e984 <PIC::ioWait()>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb39:	25 ff 00 00 00       	and    eax,0xff
c001eb3e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001eb44:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001eb47:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001eb4a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb4d:	ee                   	out    dx,al
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb54:	e8 2b fe ff ff       	call   c001e984 <PIC::ioWait()>
c001eb59:	83 c4 10             	add    esp,0x10
c001eb5c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001eb62:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001eb66:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001eb69:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001eb6c:	ee                   	out    dx,al
c001eb6d:	83 ec 0c             	sub    esp,0xc
c001eb70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb73:	e8 0c fe ff ff       	call   c001e984 <PIC::ioWait()>
c001eb78:	83 c4 10             	add    esp,0x10
c001eb7b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eb81:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eb85:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eb88:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eb8b:	ee                   	out    dx,al
c001eb8c:	83 ec 0c             	sub    esp,0xc
c001eb8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb92:	e8 ed fd ff ff       	call   c001e984 <PIC::ioWait()>
c001eb97:	83 c4 10             	add    esp,0x10
c001eb9a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eba0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001eba4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001eba7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ebaa:	ee                   	out    dx,al
c001ebab:	83 ec 0c             	sub    esp,0xc
c001ebae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebb1:	e8 ce fd ff ff       	call   c001e984 <PIC::ioWait()>
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ebbf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ebc3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ebc6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ebc9:	ee                   	out    dx,al
c001ebca:	83 ec 0c             	sub    esp,0xc
c001ebcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebd0:	e8 af fd ff ff       	call   c001e984 <PIC::ioWait()>
c001ebd5:	83 c4 10             	add    esp,0x10
c001ebd8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ebdb:	25 ff 00 00 00       	and    eax,0xff
c001ebe0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ebe6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ebe9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ebec:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ebef:	ee                   	out    dx,al
c001ebf0:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ebf3:	25 ff 00 00 00       	and    eax,0xff
c001ebf8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ebfe:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ec01:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ec04:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ec07:	ee                   	out    dx,al
c001ec08:	90                   	nop
c001ec09:	c9                   	leave  
c001ec0a:	c3                   	ret    
c001ec0b:	90                   	nop

c001ec0c <PIC::open(int, int, void*)>:
c001ec0c:	55                   	push   ebp
c001ec0d:	89 e5                	mov    ebp,esp
c001ec0f:	83 ec 18             	sub    esp,0x18
c001ec12:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ec18:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ec1c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ec1f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ec23:	ee                   	out    dx,al
c001ec24:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ec2a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ec2e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ec31:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ec35:	ee                   	out    dx,al
c001ec36:	83 ec 0c             	sub    esp,0xc
c001ec39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec3c:	e8 53 fe ff ff       	call   c001ea94 <PIC::remap()>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	b8 00 00 00 00       	mov    eax,0x0
c001ec49:	c9                   	leave  
c001ec4a:	c3                   	ret    
c001ec4b:	90                   	nop

c001ec4c <APICTimer::close(int, int, void*)>:
c001ec4c:	b8 00 00 00 00       	mov    eax,0x0
c001ec51:	c3                   	ret    

c001ec52 <apicTimerHandler(regs*, void*)>:
c001ec52:	83 ec 0c             	sub    esp,0xc
c001ec55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5b:	89 c2                	mov    edx,eax
c001ec5d:	c1 fa 1f             	sar    edx,0x1f
c001ec60:	52                   	push   edx
c001ec61:	50                   	push   eax
c001ec62:	6a 00                	push   0x0
c001ec64:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ec69:	e8 8e 07 00 00       	call   c001f3fc <__udivdi3>
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	83 ec 08             	sub    esp,0x8
c001ec74:	52                   	push   edx
c001ec75:	50                   	push   eax
c001ec76:	e8 4c 40 ff ff       	call   c0012cc7 <timerHandler(unsigned long long)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	90                   	nop
c001ec7f:	83 c4 0c             	add    esp,0xc
c001ec82:	c3                   	ret    
c001ec83:	90                   	nop

c001ec84 <APICTimer::write(int)>:
c001ec84:	53                   	push   ebx
c001ec85:	83 ec 28             	sub    esp,0x28
c001ec88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec90:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec96:	e8 6f 5b ff ff       	call   c001480a <thisCPU()>
c001ec9b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eca1:	83 ec 0c             	sub    esp,0xc
c001eca4:	50                   	push   eax
c001eca5:	e8 a2 f5 ff ff       	call   c001e24c <APIC::getBase()>
c001ecaa:	83 c4 10             	add    esp,0x10
c001ecad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ecb1:	a1 10 4c 02 c0       	mov    eax,ds:0xc0024c10
c001ecb6:	8b 15 14 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c14
c001ecbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ecc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ecc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecc8:	05 e0 03 00 00       	add    eax,0x3e0
c001eccd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ecd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecd7:	05 80 03 00 00       	add    eax,0x380
c001ecdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ece2:	fb                   	sti    
c001ece3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eceb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ecf0:	83 d2 00             	adc    edx,0x0
c001ecf3:	89 c1                	mov    ecx,eax
c001ecf5:	89 d3                	mov    ebx,edx
c001ecf7:	a1 10 4c 02 c0       	mov    eax,ds:0xc0024c10
c001ecfc:	8b 15 14 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c14
c001ed02:	39 c8                	cmp    eax,ecx
c001ed04:	89 d0                	mov    eax,edx
c001ed06:	19 d8                	sbb    eax,ebx
c001ed08:	73 02                	jae    c001ed0c <APICTimer::write(int)+0x88>
c001ed0a:	eb d7                	jmp    c001ece3 <APICTimer::write(int)+0x5f>
c001ed0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed10:	05 20 03 00 00       	add    eax,0x320
c001ed15:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ed1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed1f:	05 90 03 00 00       	add    eax,0x390
c001ed24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed26:	f7 d0                	not    eax
c001ed28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed2c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed34:	ba 00 00 00 00       	mov    edx,0x0
c001ed39:	f7 f3                	div    ebx
c001ed3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed49:	0d 00 00 02 00       	or     eax,0x20000
c001ed4e:	89 c2                	mov    edx,eax
c001ed50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed54:	05 20 03 00 00       	add    eax,0x320
c001ed59:	89 10                	mov    DWORD PTR [eax],edx
c001ed5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed5f:	05 e0 03 00 00       	add    eax,0x3e0
c001ed64:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ed6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed6e:	05 80 03 00 00       	add    eax,0x380
c001ed73:	89 c2                	mov    edx,eax
c001ed75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed79:	89 02                	mov    DWORD PTR [edx],eax
c001ed7b:	90                   	nop
c001ed7c:	83 c4 28             	add    esp,0x28
c001ed7f:	5b                   	pop    ebx
c001ed80:	c3                   	ret    
c001ed81:	90                   	nop

c001ed82 <APICTimer::open(int, int, void*)>:
c001ed82:	57                   	push   edi
c001ed83:	56                   	push   esi
c001ed84:	53                   	push   ebx
c001ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed89:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8b:	83 c0 24             	add    eax,0x24
c001ed8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed90:	83 ec 08             	sub    esp,0x8
c001ed93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9b:	ff d0                	call   eax
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	e8 65 5a ff ff       	call   c001480a <thisCPU()>
c001eda5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edab:	83 ec 0c             	sub    esp,0xc
c001edae:	50                   	push   eax
c001edaf:	e8 98 f4 ff ff       	call   c001e24c <APIC::getBase()>
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001edc7:	89 c7                	mov    edi,eax
c001edc9:	81 e7 ff 00 00 00    	and    edi,0xff
c001edcf:	89 d0                	mov    eax,edx
c001edd1:	ba 00 00 00 00       	mov    edx,0x0
c001edd6:	89 c1                	mov    ecx,eax
c001edd8:	80 e5 ff             	and    ch,0xff
c001eddb:	89 cb                	mov    ebx,ecx
c001eddd:	89 d0                	mov    eax,edx
c001eddf:	25 ff 00 00 00       	and    eax,0xff
c001ede4:	89 c6                	mov    esi,eax
c001ede6:	89 d8                	mov    eax,ebx
c001ede8:	89 f2                	mov    edx,esi
c001edea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edee:	8d 5f 08             	lea    ebx,[edi+0x8]
c001edf1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001edf5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001edf9:	83 e0 00             	and    eax,0x0
c001edfc:	09 d0                	or     eax,edx
c001edfe:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ee02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee06:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ee0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ee0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee13:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ee19:	31 d2                	xor    edx,edx
c001ee1b:	88 c2                	mov    dl,al
c001ee1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee21:	83 c2 08             	add    edx,0x8
c001ee24:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ee28:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ee2e:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ee34:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ee38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee40:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee4e:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee58:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee5e:	83 ec 0c             	sub    esp,0xc
c001ee61:	51                   	push   ecx
c001ee62:	6a 01                	push   0x1
c001ee64:	68 52 ec 01 c0       	push   0xc001ec52
c001ee69:	52                   	push   edx
c001ee6a:	50                   	push   eax
c001ee6b:	e8 40 16 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee70:	83 c4 20             	add    esp,0x20
c001ee73:	89 c2                	mov    edx,eax
c001ee75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee79:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee7f:	b8 00 00 00 00       	mov    eax,0x0
c001ee84:	5b                   	pop    ebx
c001ee85:	5e                   	pop    esi
c001ee86:	5f                   	pop    edi
c001ee87:	c3                   	ret    

c001ee88 <APICTimer::APICTimer()>:
c001ee88:	83 ec 0c             	sub    esp,0xc
c001ee8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8f:	83 ec 08             	sub    esp,0x8
c001ee92:	68 30 39 02 c0       	push   0xc0023930
c001ee97:	50                   	push   eax
c001ee98:	e8 9b 3d ff ff       	call   c0012c38 <Timer::Timer(char const*)>
c001ee9d:	83 c4 10             	add    esp,0x10
c001eea0:	ba 44 39 02 c0       	mov    edx,0xc0023944
c001eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea9:	89 10                	mov    DWORD PTR [eax],edx
c001eeab:	90                   	nop
c001eeac:	83 c4 0c             	add    esp,0xc
c001eeaf:	c3                   	ret    

c001eeb0 <PIT::write(int)>:
c001eeb0:	83 ec 10             	sub    esp,0x10
c001eeb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eeb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eebb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eec5:	a3 a4 63 02 c0       	mov    ds:0xc00263a4,eax
c001eeca:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eecf:	89 c2                	mov    edx,eax
c001eed1:	c1 fa 1f             	sar    edx,0x1f
c001eed4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eed8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eedc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eee3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eee8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eeec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eef1:	ee                   	out    dx,al
c001eef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eef6:	25 ff 00 00 00       	and    eax,0xff
c001eefb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef02:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef06:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef0a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef0f:	ee                   	out    dx,al
c001ef10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef14:	c1 f8 08             	sar    eax,0x8
c001ef17:	25 ff 00 00 00       	and    eax,0xff
c001ef1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef30:	ee                   	out    dx,al
c001ef31:	90                   	nop
c001ef32:	83 c4 10             	add    esp,0x10
c001ef35:	c3                   	ret    

c001ef36 <pitHandler(regs*, void*)>:
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	a1 a4 63 02 c0       	mov    eax,ds:0xc00263a4
c001ef3e:	89 c2                	mov    edx,eax
c001ef40:	c1 fa 1f             	sar    edx,0x1f
c001ef43:	52                   	push   edx
c001ef44:	50                   	push   eax
c001ef45:	6a 00                	push   0x0
c001ef47:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ef4c:	e8 ab 04 00 00       	call   c001f3fc <__udivdi3>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	83 ec 08             	sub    esp,0x8
c001ef57:	52                   	push   edx
c001ef58:	50                   	push   eax
c001ef59:	e8 69 3d ff ff       	call   c0012cc7 <timerHandler(unsigned long long)>
c001ef5e:	83 c4 10             	add    esp,0x10
c001ef61:	90                   	nop
c001ef62:	83 c4 0c             	add    esp,0xc
c001ef65:	c3                   	ret    

c001ef66 <PIT::open(int, int, void*)>:
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef6f:	83 c0 24             	add    eax,0x24
c001ef72:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef74:	83 ec 08             	sub    esp,0x8
c001ef77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef7f:	ff d0                	call   eax
c001ef81:	83 c4 10             	add    esp,0x10
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	6a 00                	push   0x0
c001ef8d:	6a 01                	push   0x1
c001ef8f:	68 36 ef 01 c0       	push   0xc001ef36
c001ef94:	6a 00                	push   0x0
c001ef96:	50                   	push   eax
c001ef97:	e8 14 15 ff ff       	call   c00104b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef9c:	83 c4 20             	add    esp,0x20
c001ef9f:	89 c2                	mov    edx,eax
c001efa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efab:	b8 00 00 00 00       	mov    eax,0x0
c001efb0:	83 c4 0c             	add    esp,0xc
c001efb3:	c3                   	ret    

c001efb4 <PIT::close(int, int, void*)>:
c001efb4:	83 ec 0c             	sub    esp,0xc
c001efb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	6a 01                	push   0x1
c001efcb:	68 36 ef 01 c0       	push   0xc001ef36
c001efd0:	6a 00                	push   0x0
c001efd2:	50                   	push   eax
c001efd3:	e8 36 15 ff ff       	call   c001050e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efd8:	83 c4 10             	add    esp,0x10
c001efdb:	b8 00 00 00 00       	mov    eax,0x0
c001efe0:	83 c4 0c             	add    esp,0xc
c001efe3:	c3                   	ret    

c001efe4 <PIT::PIT()>:
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efeb:	83 ec 08             	sub    esp,0x8
c001efee:	68 6c 39 02 c0       	push   0xc002396c
c001eff3:	50                   	push   eax
c001eff4:	e8 3f 3c ff ff       	call   c0012c38 <Timer::Timer(char const*)>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	ba 94 39 02 c0       	mov    edx,0xc0023994
c001f001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f005:	89 10                	mov    DWORD PTR [eax],edx
c001f007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f011:	31 d2                	xor    edx,edx
c001f013:	88 c2                	mov    dl,al
c001f015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f019:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f02a:	31 d2                	xor    edx,edx
c001f02c:	88 c2                	mov    dl,al
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f041:	8d 50 01             	lea    edx,[eax+0x1]
c001f044:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f048:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f04e:	31 d2                	xor    edx,edx
c001f050:	88 c2                	mov    dl,al
c001f052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f056:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f05a:	83 e1 3f             	and    ecx,0x3f
c001f05d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f061:	90                   	nop
c001f062:	83 c4 0c             	add    esp,0xc
c001f065:	c3                   	ret    
c001f066:	66 90                	xchg   ax,ax
c001f068:	66 90                	xchg   ax,ax
c001f06a:	66 90                	xchg   ax,ax
c001f06c:	66 90                	xchg   ax,ax
c001f06e:	66 90                	xchg   ax,ax

c001f070 <avxDetect>:
c001f070:	b8 00 00 00 00       	mov    eax,0x0
c001f075:	c3                   	ret    

c001f076 <avxSave>:
c001f076:	c3                   	ret    

c001f077 <avxLoad>:
c001f077:	c3                   	ret    

c001f078 <avxInit>:
c001f078:	c3                   	ret    

c001f079 <avxClose>:
c001f079:	c3                   	ret    
c001f07a:	66 90                	xchg   ax,ax
c001f07c:	66 90                	xchg   ax,ax
c001f07e:	66 90                	xchg   ax,ax

c001f080 <sseDetect>:
c001f080:	b8 01 00 00 00       	mov    eax,0x1
c001f085:	0f a2                	cpuid  
c001f087:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f08d:	74 06                	je     c001f095 <sseDetect.noSSE>
c001f08f:	b8 01 00 00 00       	mov    eax,0x1
c001f094:	c3                   	ret    

c001f095 <sseDetect.noSSE>:
c001f095:	b8 00 00 00 00       	mov    eax,0x0
c001f09a:	c3                   	ret    

c001f09b <sseSave>:
c001f09b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f0a0:	c3                   	ret    

c001f0a1 <sseLoad>:
c001f0a1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f0a6:	c3                   	ret    

c001f0a7 <sseInit>:
c001f0a7:	e8 40 00 00 00       	call   c001f0ec <x87Init>
c001f0ac:	0f 20 e0             	mov    eax,cr4
c001f0af:	66 0d 00 06          	or     ax,0x600
c001f0b3:	0f 22 e0             	mov    cr4,eax
c001f0b6:	c3                   	ret    

c001f0b7 <sseClose>:
c001f0b7:	c3                   	ret    
c001f0b8:	66 90                	xchg   ax,ax
c001f0ba:	66 90                	xchg   ax,ax
c001f0bc:	66 90                	xchg   ax,ax
c001f0be:	66 90                	xchg   ax,ax

c001f0c0 <value_37F>:
c001f0c0:	7f 03                	jg     c001f0c5 <value_37A+0x1>

c001f0c2 <value_37E>:
c001f0c2:	7e 03                	jle    c001f0c7 <x87Detect+0x1>

c001f0c4 <value_37A>:
c001f0c4:	7a 03                	jp     c001f0c9 <x87Detect+0x3>

c001f0c6 <x87Detect>:
c001f0c6:	b8 01 00 00 00       	mov    eax,0x1
c001f0cb:	0f a2                	cpuid  
c001f0cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f0d3:	74 06                	je     c001f0db <x87Detect.nox87>
c001f0d5:	b8 01 00 00 00       	mov    eax,0x1
c001f0da:	c3                   	ret    

c001f0db <x87Detect.nox87>:
c001f0db:	b8 00 00 00 00       	mov    eax,0x0
c001f0e0:	c3                   	ret    

c001f0e1 <x87Save>:
c001f0e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f0e6:	c3                   	ret    

c001f0e7 <x87Load>:
c001f0e7:	dd 64 24 08          	frstor [esp+0x8]
c001f0eb:	c3                   	ret    

c001f0ec <x87Init>:
c001f0ec:	9b db e3             	finit  
c001f0ef:	0f 20 c0             	mov    eax,cr0
c001f0f2:	66 25 fb ff          	and    ax,0xfffb
c001f0f6:	66 0d 22 00          	or     ax,0x22
c001f0fa:	0f 22 c0             	mov    cr0,eax
c001f0fd:	0f 06                	clts   
c001f0ff:	d9 2d c4 f0 01 c0    	fldcw  WORD PTR ds:0xc001f0c4
c001f105:	c3                   	ret    

c001f106 <x87Close>:
c001f106:	c3                   	ret    
c001f107:	90                   	nop

c001f108 <__do_global_ctors_aux>:
c001f108:	a1 e8 01 02 c0       	mov    eax,ds:0xc00201e8
c001f10d:	83 f8 ff             	cmp    eax,0xffffffff
c001f110:	74 1a                	je     c001f12c <__do_global_ctors_aux+0x24>
c001f112:	55                   	push   ebp
c001f113:	89 e5                	mov    ebp,esp
c001f115:	53                   	push   ebx
c001f116:	52                   	push   edx
c001f117:	bb e8 01 02 c0       	mov    ebx,0xc00201e8
c001f11c:	ff d0                	call   eax
c001f11e:	83 eb 04             	sub    ebx,0x4
c001f121:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f123:	83 f8 ff             	cmp    eax,0xffffffff
c001f126:	75 f4                	jne    c001f11c <__do_global_ctors_aux+0x14>
c001f128:	58                   	pop    eax
c001f129:	5b                   	pop    ebx
c001f12a:	5d                   	pop    ebp
c001f12b:	c3                   	ret    
c001f12c:	c3                   	ret    
c001f12d:	66 90                	xchg   ax,ax
c001f12f:	90                   	nop

c001f130 <__divdi3>:
c001f130:	55                   	push   ebp
c001f131:	57                   	push   edi
c001f132:	56                   	push   esi
c001f133:	53                   	push   ebx
c001f134:	83 ec 1c             	sub    esp,0x1c
c001f137:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f13b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f13f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f142:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f146:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f14a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f14e:	85 db                	test   ebx,ebx
c001f150:	0f 88 8e 00 00 00    	js     c001f1e4 <__divdi3+0xb4>
c001f156:	89 dd                	mov    ebp,ebx
c001f158:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f160:	89 d3                	mov    ebx,edx
c001f162:	85 d2                	test   edx,edx
c001f164:	79 0d                	jns    c001f173 <__divdi3+0x43>
c001f166:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f16a:	f7 d8                	neg    eax
c001f16c:	83 d2 00             	adc    edx,0x0
c001f16f:	f7 da                	neg    edx
c001f171:	89 d3                	mov    ebx,edx
c001f173:	89 c7                	mov    edi,eax
c001f175:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f178:	85 db                	test   ebx,ebx
c001f17a:	75 48                	jne    c001f1c4 <__divdi3+0x94>
c001f17c:	39 ef                	cmp    edi,ebp
c001f17e:	76 24                	jbe    c001f1a4 <__divdi3+0x74>
c001f180:	89 ea                	mov    edx,ebp
c001f182:	f7 f7                	div    edi
c001f184:	89 c1                	mov    ecx,eax
c001f186:	31 f6                	xor    esi,esi
c001f188:	89 c8                	mov    eax,ecx
c001f18a:	89 f2                	mov    edx,esi
c001f18c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f190:	85 c9                	test   ecx,ecx
c001f192:	74 07                	je     c001f19b <__divdi3+0x6b>
c001f194:	f7 d8                	neg    eax
c001f196:	83 d2 00             	adc    edx,0x0
c001f199:	f7 da                	neg    edx
c001f19b:	83 c4 1c             	add    esp,0x1c
c001f19e:	5b                   	pop    ebx
c001f19f:	5e                   	pop    esi
c001f1a0:	5f                   	pop    edi
c001f1a1:	5d                   	pop    ebp
c001f1a2:	c3                   	ret    
c001f1a3:	90                   	nop
c001f1a4:	85 ff                	test   edi,edi
c001f1a6:	75 0b                	jne    c001f1b3 <__divdi3+0x83>
c001f1a8:	b8 01 00 00 00       	mov    eax,0x1
c001f1ad:	31 d2                	xor    edx,edx
c001f1af:	f7 f3                	div    ebx
c001f1b1:	89 c7                	mov    edi,eax
c001f1b3:	31 d2                	xor    edx,edx
c001f1b5:	89 e8                	mov    eax,ebp
c001f1b7:	f7 f7                	div    edi
c001f1b9:	89 c6                	mov    esi,eax
c001f1bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f1be:	f7 f7                	div    edi
c001f1c0:	89 c1                	mov    ecx,eax
c001f1c2:	eb c4                	jmp    c001f188 <__divdi3+0x58>
c001f1c4:	39 eb                	cmp    ebx,ebp
c001f1c6:	77 3c                	ja     c001f204 <__divdi3+0xd4>
c001f1c8:	0f bd f3             	bsr    esi,ebx
c001f1cb:	83 f6 1f             	xor    esi,0x1f
c001f1ce:	75 40                	jne    c001f210 <__divdi3+0xe0>
c001f1d0:	39 eb                	cmp    ebx,ebp
c001f1d2:	72 09                	jb     c001f1dd <__divdi3+0xad>
c001f1d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f1d7:	0f 87 97 00 00 00    	ja     c001f274 <__divdi3+0x144>
c001f1dd:	b9 01 00 00 00       	mov    ecx,0x1
c001f1e2:	eb a4                	jmp    c001f188 <__divdi3+0x58>
c001f1e4:	f7 d9                	neg    ecx
c001f1e6:	83 d3 00             	adc    ebx,0x0
c001f1e9:	f7 db                	neg    ebx
c001f1eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f1ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f1f2:	89 dd                	mov    ebp,ebx
c001f1f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f1fc:	e9 5f ff ff ff       	jmp    c001f160 <__divdi3+0x30>
c001f201:	8d 76 00             	lea    esi,[esi+0x0]
c001f204:	31 f6                	xor    esi,esi
c001f206:	31 c9                	xor    ecx,ecx
c001f208:	e9 7b ff ff ff       	jmp    c001f188 <__divdi3+0x58>
c001f20d:	8d 76 00             	lea    esi,[esi+0x0]
c001f210:	b8 20 00 00 00       	mov    eax,0x20
c001f215:	29 f0                	sub    eax,esi
c001f217:	89 f1                	mov    ecx,esi
c001f219:	d3 e3                	shl    ebx,cl
c001f21b:	89 fa                	mov    edx,edi
c001f21d:	88 c1                	mov    cl,al
c001f21f:	d3 ea                	shr    edx,cl
c001f221:	09 da                	or     edx,ebx
c001f223:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f227:	89 f1                	mov    ecx,esi
c001f229:	d3 e7                	shl    edi,cl
c001f22b:	89 eb                	mov    ebx,ebp
c001f22d:	88 c1                	mov    cl,al
c001f22f:	d3 eb                	shr    ebx,cl
c001f231:	89 f1                	mov    ecx,esi
c001f233:	d3 e5                	shl    ebp,cl
c001f235:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f238:	88 c1                	mov    cl,al
c001f23a:	d3 ea                	shr    edx,cl
c001f23c:	09 d5                	or     ebp,edx
c001f23e:	89 e8                	mov    eax,ebp
c001f240:	89 da                	mov    edx,ebx
c001f242:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f246:	89 d3                	mov    ebx,edx
c001f248:	89 c5                	mov    ebp,eax
c001f24a:	f7 e7                	mul    edi
c001f24c:	39 d3                	cmp    ebx,edx
c001f24e:	72 18                	jb     c001f268 <__divdi3+0x138>
c001f250:	74 0a                	je     c001f25c <__divdi3+0x12c>
c001f252:	89 e9                	mov    ecx,ebp
c001f254:	31 f6                	xor    esi,esi
c001f256:	e9 2d ff ff ff       	jmp    c001f188 <__divdi3+0x58>
c001f25b:	90                   	nop
c001f25c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f25f:	89 f1                	mov    ecx,esi
c001f261:	d3 e7                	shl    edi,cl
c001f263:	39 c7                	cmp    edi,eax
c001f265:	73 eb                	jae    c001f252 <__divdi3+0x122>
c001f267:	90                   	nop
c001f268:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f26b:	31 f6                	xor    esi,esi
c001f26d:	e9 16 ff ff ff       	jmp    c001f188 <__divdi3+0x58>
c001f272:	66 90                	xchg   ax,ax
c001f274:	31 c9                	xor    ecx,ecx
c001f276:	e9 0d ff ff ff       	jmp    c001f188 <__divdi3+0x58>
c001f27b:	90                   	nop

c001f27c <__moddi3>:
c001f27c:	55                   	push   ebp
c001f27d:	57                   	push   edi
c001f27e:	56                   	push   esi
c001f27f:	53                   	push   ebx
c001f280:	83 ec 2c             	sub    esp,0x2c
c001f283:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f287:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f28b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f28f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f293:	85 db                	test   ebx,ebx
c001f295:	0f 88 85 00 00 00    	js     c001f320 <__moddi3+0xa4>
c001f29b:	89 de                	mov    esi,ebx
c001f29d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f2a5:	89 d7                	mov    edi,edx
c001f2a7:	85 d2                	test   edx,edx
c001f2a9:	79 09                	jns    c001f2b4 <__moddi3+0x38>
c001f2ab:	f7 d8                	neg    eax
c001f2ad:	83 d2 00             	adc    edx,0x0
c001f2b0:	f7 da                	neg    edx
c001f2b2:	89 d7                	mov    edi,edx
c001f2b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2b8:	89 cd                	mov    ebp,ecx
c001f2ba:	85 ff                	test   edi,edi
c001f2bc:	75 52                	jne    c001f310 <__moddi3+0x94>
c001f2be:	89 c3                	mov    ebx,eax
c001f2c0:	39 f0                	cmp    eax,esi
c001f2c2:	76 24                	jbe    c001f2e8 <__moddi3+0x6c>
c001f2c4:	89 c8                	mov    eax,ecx
c001f2c6:	89 f2                	mov    edx,esi
c001f2c8:	f7 f3                	div    ebx
c001f2ca:	89 d6                	mov    esi,edx
c001f2cc:	89 f0                	mov    eax,esi
c001f2ce:	31 d2                	xor    edx,edx
c001f2d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2d4:	85 c9                	test   ecx,ecx
c001f2d6:	74 07                	je     c001f2df <__moddi3+0x63>
c001f2d8:	f7 d8                	neg    eax
c001f2da:	83 d2 00             	adc    edx,0x0
c001f2dd:	f7 da                	neg    edx
c001f2df:	83 c4 2c             	add    esp,0x2c
c001f2e2:	5b                   	pop    ebx
c001f2e3:	5e                   	pop    esi
c001f2e4:	5f                   	pop    edi
c001f2e5:	5d                   	pop    ebp
c001f2e6:	c3                   	ret    
c001f2e7:	90                   	nop
c001f2e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f2ec:	85 db                	test   ebx,ebx
c001f2ee:	75 0d                	jne    c001f2fd <__moddi3+0x81>
c001f2f0:	b8 01 00 00 00       	mov    eax,0x1
c001f2f5:	31 d2                	xor    edx,edx
c001f2f7:	f7 f7                	div    edi
c001f2f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2fd:	89 f0                	mov    eax,esi
c001f2ff:	31 d2                	xor    edx,edx
c001f301:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f305:	f7 f7                	div    edi
c001f307:	89 e8                	mov    eax,ebp
c001f309:	f7 f7                	div    edi
c001f30b:	89 d6                	mov    esi,edx
c001f30d:	eb bd                	jmp    c001f2cc <__moddi3+0x50>
c001f30f:	90                   	nop
c001f310:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f314:	39 f7                	cmp    edi,esi
c001f316:	76 20                	jbe    c001f338 <__moddi3+0xbc>
c001f318:	89 c8                	mov    eax,ecx
c001f31a:	89 f2                	mov    edx,esi
c001f31c:	eb b2                	jmp    c001f2d0 <__moddi3+0x54>
c001f31e:	66 90                	xchg   ax,ax
c001f320:	f7 d9                	neg    ecx
c001f322:	83 d3 00             	adc    ebx,0x0
c001f325:	f7 db                	neg    ebx
c001f327:	89 de                	mov    esi,ebx
c001f329:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f331:	e9 6f ff ff ff       	jmp    c001f2a5 <__moddi3+0x29>
c001f336:	66 90                	xchg   ax,ax
c001f338:	0f bd c7             	bsr    eax,edi
c001f33b:	83 f0 1f             	xor    eax,0x1f
c001f33e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f342:	75 24                	jne    c001f368 <__moddi3+0xec>
c001f344:	39 f7                	cmp    edi,esi
c001f346:	72 06                	jb     c001f34e <__moddi3+0xd2>
c001f348:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f34c:	77 0c                	ja     c001f35a <__moddi3+0xde>
c001f34e:	89 e9                	mov    ecx,ebp
c001f350:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f354:	19 fe                	sbb    esi,edi
c001f356:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f35a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f35e:	89 f2                	mov    edx,esi
c001f360:	e9 6b ff ff ff       	jmp    c001f2d0 <__moddi3+0x54>
c001f365:	8d 76 00             	lea    esi,[esi+0x0]
c001f368:	b8 20 00 00 00       	mov    eax,0x20
c001f36d:	89 c2                	mov    edx,eax
c001f36f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f373:	29 da                	sub    edx,ebx
c001f375:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f379:	88 d9                	mov    cl,bl
c001f37b:	d3 e7                	shl    edi,cl
c001f37d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f381:	88 d1                	mov    cl,dl
c001f383:	d3 e8                	shr    eax,cl
c001f385:	09 c7                	or     edi,eax
c001f387:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f38f:	89 d8                	mov    eax,ebx
c001f391:	88 d9                	mov    cl,bl
c001f393:	d3 e7                	shl    edi,cl
c001f395:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f399:	89 f3                	mov    ebx,esi
c001f39b:	88 d1                	mov    cl,dl
c001f39d:	d3 eb                	shr    ebx,cl
c001f39f:	89 c7                	mov    edi,eax
c001f3a1:	88 c1                	mov    cl,al
c001f3a3:	d3 e6                	shl    esi,cl
c001f3a5:	89 e8                	mov    eax,ebp
c001f3a7:	88 d1                	mov    cl,dl
c001f3a9:	d3 e8                	shr    eax,cl
c001f3ab:	09 f0                	or     eax,esi
c001f3ad:	89 f9                	mov    ecx,edi
c001f3af:	d3 e5                	shl    ebp,cl
c001f3b1:	89 da                	mov    edx,ebx
c001f3b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f3b7:	89 d3                	mov    ebx,edx
c001f3b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3bd:	89 c6                	mov    esi,eax
c001f3bf:	89 d1                	mov    ecx,edx
c001f3c1:	39 d3                	cmp    ebx,edx
c001f3c3:	72 27                	jb     c001f3ec <__moddi3+0x170>
c001f3c5:	74 21                	je     c001f3e8 <__moddi3+0x16c>
c001f3c7:	29 f5                	sub    ebp,esi
c001f3c9:	19 cb                	sbb    ebx,ecx
c001f3cb:	89 de                	mov    esi,ebx
c001f3cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f3d1:	d3 e6                	shl    esi,cl
c001f3d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3d7:	89 f9                	mov    ecx,edi
c001f3d9:	d3 ed                	shr    ebp,cl
c001f3db:	09 ee                	or     esi,ebp
c001f3dd:	89 f0                	mov    eax,esi
c001f3df:	d3 eb                	shr    ebx,cl
c001f3e1:	89 da                	mov    edx,ebx
c001f3e3:	e9 e8 fe ff ff       	jmp    c001f2d0 <__moddi3+0x54>
c001f3e8:	39 c5                	cmp    ebp,eax
c001f3ea:	73 db                	jae    c001f3c7 <__moddi3+0x14b>
c001f3ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f3f4:	89 d1                	mov    ecx,edx
c001f3f6:	89 c6                	mov    esi,eax
c001f3f8:	eb cd                	jmp    c001f3c7 <__moddi3+0x14b>
c001f3fa:	66 90                	xchg   ax,ax

c001f3fc <__udivdi3>:
c001f3fc:	55                   	push   ebp
c001f3fd:	57                   	push   edi
c001f3fe:	56                   	push   esi
c001f3ff:	53                   	push   ebx
c001f400:	83 ec 1c             	sub    esp,0x1c
c001f403:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f407:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f40b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f40f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f413:	85 d2                	test   edx,edx
c001f415:	75 41                	jne    c001f458 <__udivdi3+0x5c>
c001f417:	39 f7                	cmp    edi,esi
c001f419:	76 15                	jbe    c001f430 <__udivdi3+0x34>
c001f41b:	89 e8                	mov    eax,ebp
c001f41d:	89 f2                	mov    edx,esi
c001f41f:	f7 f7                	div    edi
c001f421:	31 db                	xor    ebx,ebx
c001f423:	89 da                	mov    edx,ebx
c001f425:	83 c4 1c             	add    esp,0x1c
c001f428:	5b                   	pop    ebx
c001f429:	5e                   	pop    esi
c001f42a:	5f                   	pop    edi
c001f42b:	5d                   	pop    ebp
c001f42c:	c3                   	ret    
c001f42d:	8d 76 00             	lea    esi,[esi+0x0]
c001f430:	89 f9                	mov    ecx,edi
c001f432:	85 ff                	test   edi,edi
c001f434:	75 0b                	jne    c001f441 <__udivdi3+0x45>
c001f436:	b8 01 00 00 00       	mov    eax,0x1
c001f43b:	31 d2                	xor    edx,edx
c001f43d:	f7 f7                	div    edi
c001f43f:	89 c1                	mov    ecx,eax
c001f441:	31 d2                	xor    edx,edx
c001f443:	89 f0                	mov    eax,esi
c001f445:	f7 f1                	div    ecx
c001f447:	89 c3                	mov    ebx,eax
c001f449:	89 e8                	mov    eax,ebp
c001f44b:	f7 f1                	div    ecx
c001f44d:	89 da                	mov    edx,ebx
c001f44f:	83 c4 1c             	add    esp,0x1c
c001f452:	5b                   	pop    ebx
c001f453:	5e                   	pop    esi
c001f454:	5f                   	pop    edi
c001f455:	5d                   	pop    ebp
c001f456:	c3                   	ret    
c001f457:	90                   	nop
c001f458:	39 f2                	cmp    edx,esi
c001f45a:	77 1c                	ja     c001f478 <__udivdi3+0x7c>
c001f45c:	0f bd da             	bsr    ebx,edx
c001f45f:	83 f3 1f             	xor    ebx,0x1f
c001f462:	75 24                	jne    c001f488 <__udivdi3+0x8c>
c001f464:	39 f2                	cmp    edx,esi
c001f466:	72 08                	jb     c001f470 <__udivdi3+0x74>
c001f468:	39 ef                	cmp    edi,ebp
c001f46a:	0f 87 84 00 00 00    	ja     c001f4f4 <__udivdi3+0xf8>
c001f470:	b8 01 00 00 00       	mov    eax,0x1
c001f475:	eb ac                	jmp    c001f423 <__udivdi3+0x27>
c001f477:	90                   	nop
c001f478:	31 db                	xor    ebx,ebx
c001f47a:	31 c0                	xor    eax,eax
c001f47c:	89 da                	mov    edx,ebx
c001f47e:	83 c4 1c             	add    esp,0x1c
c001f481:	5b                   	pop    ebx
c001f482:	5e                   	pop    esi
c001f483:	5f                   	pop    edi
c001f484:	5d                   	pop    ebp
c001f485:	c3                   	ret    
c001f486:	66 90                	xchg   ax,ax
c001f488:	b8 20 00 00 00       	mov    eax,0x20
c001f48d:	29 d8                	sub    eax,ebx
c001f48f:	88 d9                	mov    cl,bl
c001f491:	d3 e2                	shl    edx,cl
c001f493:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f497:	89 fa                	mov    edx,edi
c001f499:	88 c1                	mov    cl,al
c001f49b:	d3 ea                	shr    edx,cl
c001f49d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4a1:	09 d1                	or     ecx,edx
c001f4a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f4a7:	88 d9                	mov    cl,bl
c001f4a9:	d3 e7                	shl    edi,cl
c001f4ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4af:	89 f7                	mov    edi,esi
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 ef                	shr    edi,cl
c001f4b5:	88 d9                	mov    cl,bl
c001f4b7:	d3 e6                	shl    esi,cl
c001f4b9:	89 ea                	mov    edx,ebp
c001f4bb:	88 c1                	mov    cl,al
c001f4bd:	d3 ea                	shr    edx,cl
c001f4bf:	09 d6                	or     esi,edx
c001f4c1:	89 f0                	mov    eax,esi
c001f4c3:	89 fa                	mov    edx,edi
c001f4c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4c9:	89 d7                	mov    edi,edx
c001f4cb:	89 c6                	mov    esi,eax
c001f4cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4d1:	39 d7                	cmp    edi,edx
c001f4d3:	72 13                	jb     c001f4e8 <__udivdi3+0xec>
c001f4d5:	74 09                	je     c001f4e0 <__udivdi3+0xe4>
c001f4d7:	89 f0                	mov    eax,esi
c001f4d9:	31 db                	xor    ebx,ebx
c001f4db:	e9 43 ff ff ff       	jmp    c001f423 <__udivdi3+0x27>
c001f4e0:	88 d9                	mov    cl,bl
c001f4e2:	d3 e5                	shl    ebp,cl
c001f4e4:	39 c5                	cmp    ebp,eax
c001f4e6:	73 ef                	jae    c001f4d7 <__udivdi3+0xdb>
c001f4e8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4eb:	31 db                	xor    ebx,ebx
c001f4ed:	e9 31 ff ff ff       	jmp    c001f423 <__udivdi3+0x27>
c001f4f2:	66 90                	xchg   ax,ax
c001f4f4:	31 c0                	xor    eax,eax
c001f4f6:	e9 28 ff ff ff       	jmp    c001f423 <__udivdi3+0x27>
c001f4fb:	90                   	nop

c001f4fc <__umoddi3>:
c001f4fc:	55                   	push   ebp
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	53                   	push   ebx
c001f500:	83 ec 1c             	sub    esp,0x1c
c001f503:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f507:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f50b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f50f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f513:	89 da                	mov    edx,ebx
c001f515:	85 c0                	test   eax,eax
c001f517:	75 37                	jne    c001f550 <__umoddi3+0x54>
c001f519:	39 df                	cmp    edi,ebx
c001f51b:	76 13                	jbe    c001f530 <__umoddi3+0x34>
c001f51d:	89 f0                	mov    eax,esi
c001f51f:	f7 f7                	div    edi
c001f521:	89 d0                	mov    eax,edx
c001f523:	31 d2                	xor    edx,edx
c001f525:	83 c4 1c             	add    esp,0x1c
c001f528:	5b                   	pop    ebx
c001f529:	5e                   	pop    esi
c001f52a:	5f                   	pop    edi
c001f52b:	5d                   	pop    ebp
c001f52c:	c3                   	ret    
c001f52d:	8d 76 00             	lea    esi,[esi+0x0]
c001f530:	89 fd                	mov    ebp,edi
c001f532:	85 ff                	test   edi,edi
c001f534:	75 0b                	jne    c001f541 <__umoddi3+0x45>
c001f536:	b8 01 00 00 00       	mov    eax,0x1
c001f53b:	31 d2                	xor    edx,edx
c001f53d:	f7 f7                	div    edi
c001f53f:	89 c5                	mov    ebp,eax
c001f541:	89 d8                	mov    eax,ebx
c001f543:	31 d2                	xor    edx,edx
c001f545:	f7 f5                	div    ebp
c001f547:	89 f0                	mov    eax,esi
c001f549:	f7 f5                	div    ebp
c001f54b:	89 d0                	mov    eax,edx
c001f54d:	eb d4                	jmp    c001f523 <__umoddi3+0x27>
c001f54f:	90                   	nop
c001f550:	89 f1                	mov    ecx,esi
c001f552:	39 d8                	cmp    eax,ebx
c001f554:	76 0a                	jbe    c001f560 <__umoddi3+0x64>
c001f556:	89 f0                	mov    eax,esi
c001f558:	83 c4 1c             	add    esp,0x1c
c001f55b:	5b                   	pop    ebx
c001f55c:	5e                   	pop    esi
c001f55d:	5f                   	pop    edi
c001f55e:	5d                   	pop    ebp
c001f55f:	c3                   	ret    
c001f560:	0f bd e8             	bsr    ebp,eax
c001f563:	83 f5 1f             	xor    ebp,0x1f
c001f566:	75 1c                	jne    c001f584 <__umoddi3+0x88>
c001f568:	39 d8                	cmp    eax,ebx
c001f56a:	72 04                	jb     c001f570 <__umoddi3+0x74>
c001f56c:	39 f7                	cmp    edi,esi
c001f56e:	77 08                	ja     c001f578 <__umoddi3+0x7c>
c001f570:	89 da                	mov    edx,ebx
c001f572:	29 fe                	sub    esi,edi
c001f574:	19 c2                	sbb    edx,eax
c001f576:	89 f1                	mov    ecx,esi
c001f578:	89 c8                	mov    eax,ecx
c001f57a:	83 c4 1c             	add    esp,0x1c
c001f57d:	5b                   	pop    ebx
c001f57e:	5e                   	pop    esi
c001f57f:	5f                   	pop    edi
c001f580:	5d                   	pop    ebp
c001f581:	c3                   	ret    
c001f582:	66 90                	xchg   ax,ax
c001f584:	ba 20 00 00 00       	mov    edx,0x20
c001f589:	29 ea                	sub    edx,ebp
c001f58b:	89 e9                	mov    ecx,ebp
c001f58d:	d3 e0                	shl    eax,cl
c001f58f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f593:	89 f8                	mov    eax,edi
c001f595:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f599:	88 d1                	mov    cl,dl
c001f59b:	d3 e8                	shr    eax,cl
c001f59d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5a1:	09 c1                	or     ecx,eax
c001f5a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5a7:	89 e9                	mov    ecx,ebp
c001f5a9:	d3 e7                	shl    edi,cl
c001f5ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5af:	89 d8                	mov    eax,ebx
c001f5b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f5b5:	88 d1                	mov    cl,dl
c001f5b7:	d3 e8                	shr    eax,cl
c001f5b9:	89 c7                	mov    edi,eax
c001f5bb:	89 e9                	mov    ecx,ebp
c001f5bd:	d3 e3                	shl    ebx,cl
c001f5bf:	89 f0                	mov    eax,esi
c001f5c1:	88 d1                	mov    cl,dl
c001f5c3:	d3 e8                	shr    eax,cl
c001f5c5:	09 d8                	or     eax,ebx
c001f5c7:	89 e9                	mov    ecx,ebp
c001f5c9:	d3 e6                	shl    esi,cl
c001f5cb:	89 f3                	mov    ebx,esi
c001f5cd:	89 fa                	mov    edx,edi
c001f5cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5d3:	89 d1                	mov    ecx,edx
c001f5d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5d9:	89 c6                	mov    esi,eax
c001f5db:	89 d7                	mov    edi,edx
c001f5dd:	39 d1                	cmp    ecx,edx
c001f5df:	72 27                	jb     c001f608 <__umoddi3+0x10c>
c001f5e1:	74 21                	je     c001f604 <__umoddi3+0x108>
c001f5e3:	89 ca                	mov    edx,ecx
c001f5e5:	29 f3                	sub    ebx,esi
c001f5e7:	19 fa                	sbb    edx,edi
c001f5e9:	89 d0                	mov    eax,edx
c001f5eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f5ef:	d3 e0                	shl    eax,cl
c001f5f1:	89 e9                	mov    ecx,ebp
c001f5f3:	d3 eb                	shr    ebx,cl
c001f5f5:	09 d8                	or     eax,ebx
c001f5f7:	d3 ea                	shr    edx,cl
c001f5f9:	83 c4 1c             	add    esp,0x1c
c001f5fc:	5b                   	pop    ebx
c001f5fd:	5e                   	pop    esi
c001f5fe:	5f                   	pop    edi
c001f5ff:	5d                   	pop    ebp
c001f600:	c3                   	ret    
c001f601:	8d 76 00             	lea    esi,[esi+0x0]
c001f604:	39 c3                	cmp    ebx,eax
c001f606:	73 db                	jae    c001f5e3 <__umoddi3+0xe7>
c001f608:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f60c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f610:	89 d7                	mov    edi,edx
c001f612:	89 c6                	mov    esi,eax
c001f614:	eb cd                	jmp    c001f5e3 <__umoddi3+0xe7>
c001f616:	66 90                	xchg   ax,ax
c001f618:	66 90                	xchg   ax,ax
c001f61a:	66 90                	xchg   ax,ax
c001f61c:	66 90                	xchg   ax,ax
c001f61e:	66 90                	xchg   ax,ax

c001f620 <fabs>:
c001f620:	83 ec 0c             	sub    esp,0xc
c001f623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f627:	89 04 24             	mov    DWORD PTR [esp],eax
c001f62a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f62e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f633:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f637:	dd 04 24             	fld    QWORD PTR [esp]
c001f63a:	83 c4 0c             	add    esp,0xc
c001f63d:	c3                   	ret    
c001f63e:	66 90                	xchg   ax,ax

c001f640 <lrint>:
c001f640:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f644:	83 ec 04             	sub    esp,0x4
c001f647:	db 1c 24             	fistp  DWORD PTR [esp]
c001f64a:	58                   	pop    eax
c001f64b:	c3                   	ret    

c001f64c <lrintf>:
c001f64c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f650:	83 ec 04             	sub    esp,0x4
c001f653:	db 1c 24             	fistp  DWORD PTR [esp]
c001f656:	58                   	pop    eax
c001f657:	c3                   	ret    

Disassembly of section .init:

c001f658 <_init>:
c001f658:	55                   	push   ebp
c001f659:	89 e5                	mov    ebp,esp
c001f65b:	e8 b8 0a fe ff       	call   c0000118 <frame_dummy>
c001f660:	e8 a3 fa ff ff       	call   c001f108 <__do_global_ctors_aux>
c001f665:	5d                   	pop    ebp
c001f666:	c3                   	ret    

Disassembly of section .fini:

c001f667 <_fini>:
c001f667:	55                   	push   ebp
c001f668:	89 e5                	mov    ebp,esp
c001f66a:	e8 39 0a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f66f:	5d                   	pop    ebp
c001f670:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f672 <Computer::~Computer()>:
c001f672:	83 ec 0c             	sub    esp,0xc
c001f675:	ba 84 11 02 c0       	mov    edx,0xc0021184
c001f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67e:	89 10                	mov    DWORD PTR [eax],edx
c001f680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f684:	83 ec 0c             	sub    esp,0xc
c001f687:	50                   	push   eax
c001f688:	e8 75 0d ff ff       	call   c0010402 <Device::~Device()>
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	90                   	nop
c001f691:	83 c4 0c             	add    esp,0xc
c001f694:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f696 <Computer::~Computer()>:
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	83 ec 0c             	sub    esp,0xc
c001f69c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6a0:	e8 cd ff ff ff       	call   c001f672 <Computer::~Computer()>
c001f6a5:	83 c4 10             	add    esp,0x10
c001f6a8:	83 ec 08             	sub    esp,0x8
c001f6ab:	68 ec 01 00 00       	push   0x1ec
c001f6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b4:	e8 68 f9 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	83 c4 0c             	add    esp,0xc
c001f6bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f6c0 <idleCommon()>:
c001f6c0:	83 ec 0c             	sub    esp,0xc
c001f6c3:	e8 9b 92 ff ff       	call   c0018963 <lockScheduler()>
c001f6c8:	e8 df 95 ff ff       	call   c0018cac <schedule()>
c001f6cd:	83 c4 0c             	add    esp,0xc
c001f6d0:	e9 90 92 ff ff       	jmp    c0018965 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f6d5 <CPU::readCR3()>:
c001f6d5:	83 ec 10             	sub    esp,0x10
c001f6d8:	0f 20 d8             	mov    eax,cr3
c001f6db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6e3:	83 c4 10             	add    esp,0x10
c001f6e6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f6e7 <CPU::writeCR3(unsigned long)>:
c001f6e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6eb:	0f 22 d8             	mov    cr3,eax
c001f6ee:	90                   	nop
c001f6ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f6f0 <LinkedList<UnixFile>::~LinkedList()>:
c001f6f0:	90                   	nop
c001f6f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f6f2 <LinkedList<UnixFile>::LinkedList()>:
c001f6f2:	83 ec 0c             	sub    esp,0xc
c001f6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f703:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f719:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f735:	83 ec 0c             	sub    esp,0xc
c001f738:	68 fa 13 02 c0       	push   0xc00213fa
c001f73d:	e8 05 fa fe ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001f742:	83 c4 10             	add    esp,0x10
c001f745:	90                   	nop
c001f746:	83 c4 0c             	add    esp,0xc
c001f749:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f74a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f74a:	83 ec 0c             	sub    esp,0xc
c001f74d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f752:	75 10                	jne    c001f764 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	68 14 14 02 c0       	push   0xc0021414
c001f75c:	e8 15 62 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f761:	83 c4 10             	add    esp,0x10
c001f764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f768:	8b 00                	mov    eax,DWORD PTR [eax]
c001f76a:	85 c0                	test   eax,eax
c001f76c:	74 34                	je     c001f7a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f775:	85 c0                	test   eax,eax
c001f777:	74 29                	je     c001f7a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f780:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f784:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f799:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7a0:	eb 65                	jmp    c001f807 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7a8:	85 c0                	test   eax,eax
c001f7aa:	75 4b                	jne    c001f7f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7b3:	85 c0                	test   eax,eax
c001f7b5:	75 40                	jne    c001f7f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7bf:	89 10                	mov    DWORD PTR [eax],edx
c001f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7e1:	85 c0                	test   eax,eax
c001f7e3:	74 22                	je     c001f807 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7e5:	83 ec 0c             	sub    esp,0xc
c001f7e8:	68 36 14 02 c0       	push   0xc0021436
c001f7ed:	e8 84 61 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f7f2:	83 c4 10             	add    esp,0x10
c001f7f5:	eb 10                	jmp    c001f807 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7f7:	83 ec 0c             	sub    esp,0xc
c001f7fa:	68 40 14 02 c0       	push   0xc0021440
c001f7ff:	e8 72 61 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f804:	83 c4 10             	add    esp,0x10
c001f807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f80e:	8d 50 01             	lea    edx,[eax+0x1]
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f818:	90                   	nop
c001f819:	83 c4 0c             	add    esp,0xc
c001f81c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f81e <LinkedList<UnixFile>::getFirstElement()>:
c001f81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f822:	8b 00                	mov    eax,DWORD PTR [eax]
c001f824:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f826 <LinkedList<UnixFile>::removeFirst()>:
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f82f:	85 c0                	test   eax,eax
c001f831:	75 12                	jne    c001f845 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f833:	83 ec 0c             	sub    esp,0xc
c001f836:	68 4c 14 02 c0       	push   0xc002144c
c001f83b:	e8 36 61 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f840:	83 c4 10             	add    esp,0x10
c001f843:	eb 7e                	jmp    c001f8c3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f849:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f84f:	85 c0                	test   eax,eax
c001f851:	74 10                	je     c001f863 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f853:	83 ec 0c             	sub    esp,0xc
c001f856:	68 97 14 02 c0       	push   0xc0021497
c001f85b:	e8 16 61 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f860:	83 c4 10             	add    esp,0x10
c001f863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f867:	8b 00                	mov    eax,DWORD PTR [eax]
c001f869:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f86c:	85 c0                	test   eax,eax
c001f86e:	75 33                	jne    c001f8a3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f874:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f889:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f88c:	83 f8 01             	cmp    eax,0x1
c001f88f:	74 21                	je     c001f8b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f891:	83 ec 0c             	sub    esp,0xc
c001f894:	68 70 14 02 c0       	push   0xc0021470
c001f899:	e8 d8 60 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f89e:	83 c4 10             	add    esp,0x10
c001f8a1:	eb 0f                	jmp    c001f8b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b0:	89 10                	mov    DWORD PTR [eax],edx
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8b9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8c3:	83 c4 0c             	add    esp,0xc
c001f8c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f8c8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f8c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f8d0 <DriverlessDevice::~DriverlessDevice()>:
c001f8d0:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c001f8d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8d9:	89 10                	mov    DWORD PTR [eax],edx
c001f8db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8df:	50                   	push   eax
c001f8e0:	e8 1d 0b ff ff       	call   c0010402 <Device::~Device()>
c001f8e5:	83 c4 04             	add    esp,0x4
c001f8e8:	90                   	nop
c001f8e9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8ea <DriverlessDevice::~DriverlessDevice()>:
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	83 ec 0c             	sub    esp,0xc
c001f8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f4:	e8 d7 ff ff ff       	call   c001f8d0 <DriverlessDevice::~DriverlessDevice()>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	83 ec 08             	sub    esp,0x8
c001f8ff:	68 58 01 00 00       	push   0x158
c001f904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f908:	e8 14 f7 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001f90d:	83 c4 10             	add    esp,0x10
c001f910:	83 c4 0c             	add    esp,0xc
c001f913:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f914 <LinkedList<Device>::addElement(Device*)>:
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f91c:	75 10                	jne    c001f92e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f91e:	83 ec 0c             	sub    esp,0xc
c001f921:	68 14 14 02 c0       	push   0xc0021414
c001f926:	e8 4b 60 ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	85 c0                	test   eax,eax
c001f936:	74 3a                	je     c001f972 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f93f:	85 c0                	test   eax,eax
c001f941:	74 2f                	je     c001f972 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f947:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f94e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f958:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f95c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f963:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f966:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f970:	eb 68                	jmp    c001f9da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	8b 00                	mov    eax,DWORD PTR [eax]
c001f978:	85 c0                	test   eax,eax
c001f97a:	75 4e                	jne    c001f9ca <LinkedList<Device>::addElement(Device*)+0xb6>
c001f97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f983:	85 c0                	test   eax,eax
c001f985:	75 43                	jne    c001f9ca <LinkedList<Device>::addElement(Device*)+0xb6>
c001f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f98f:	89 10                	mov    DWORD PTR [eax],edx
c001f991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f995:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f999:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b4:	85 c0                	test   eax,eax
c001f9b6:	74 22                	je     c001f9da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	68 36 14 02 c0       	push   0xc0021436
c001f9c0:	e8 b1 5f ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f9c5:	83 c4 10             	add    esp,0x10
c001f9c8:	eb 10                	jmp    c001f9da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9ca:	83 ec 0c             	sub    esp,0xc
c001f9cd:	68 40 14 02 c0       	push   0xc0021440
c001f9d2:	e8 9f 5f ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001f9d7:	83 c4 10             	add    esp,0x10
c001f9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9e1:	8d 50 01             	lea    edx,[eax+0x1]
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9eb:	90                   	nop
c001f9ec:	83 c4 0c             	add    esp,0xc
c001f9ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f9f0 <LinkedList<Device>::LinkedList()>:
c001f9f0:	83 ec 0c             	sub    esp,0xc
c001f9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	68 fa 13 02 c0       	push   0xc00213fa
c001fa3b:	e8 07 f7 fe ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001fa40:	83 c4 10             	add    esp,0x10
c001fa43:	90                   	nop
c001fa44:	83 c4 0c             	add    esp,0xc
c001fa47:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fa48 <CPU::readCR0()>:
c001fa48:	83 ec 10             	sub    esp,0x10
c001fa4b:	0f 20 c0             	mov    eax,cr0
c001fa4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa56:	83 c4 10             	add    esp,0x10
c001fa59:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fa5a <CPU::writeCR0(unsigned long)>:
c001fa5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5e:	0f 22 c0             	mov    cr0,eax
c001fa61:	90                   	nop
c001fa62:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fa63 <CPU::readDR0()>:
c001fa63:	83 ec 10             	sub    esp,0x10
c001fa66:	0f 21 c0             	mov    eax,db0
c001fa69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fa75 <CPU::readDR1()>:
c001fa75:	83 ec 10             	sub    esp,0x10
c001fa78:	0f 21 c8             	mov    eax,db1
c001fa7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa83:	83 c4 10             	add    esp,0x10
c001fa86:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fa87 <CPU::readDR2()>:
c001fa87:	83 ec 10             	sub    esp,0x10
c001fa8a:	0f 21 d0             	mov    eax,db2
c001fa8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa95:	83 c4 10             	add    esp,0x10
c001fa98:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fa99 <CPU::readDR3()>:
c001fa99:	83 ec 10             	sub    esp,0x10
c001fa9c:	0f 21 d8             	mov    eax,db3
c001fa9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faa7:	83 c4 10             	add    esp,0x10
c001faaa:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001faab <CPU::readDR6()>:
c001faab:	83 ec 10             	sub    esp,0x10
c001faae:	0f 21 f0             	mov    eax,db6
c001fab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fab9:	83 c4 10             	add    esp,0x10
c001fabc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fabd <CPU::readDR7()>:
c001fabd:	83 ec 10             	sub    esp,0x10
c001fac0:	0f 21 f8             	mov    eax,db7
c001fac3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001facb:	83 c4 10             	add    esp,0x10
c001face:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fad0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fad8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fadc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fade:	85 c0                	test   eax,eax
c001fae0:	75 0e                	jne    c001faf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae9:	85 c0                	test   eax,eax
c001faeb:	75 03                	jne    c001faf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001faed:	b0 01                	mov    al,0x1
c001faef:	c3                   	ret    
c001faf0:	b0 00                	mov    al,0x0
c001faf2:	90                   	nop
c001faf3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001faf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fafd:	85 c0                	test   eax,eax
c001faff:	75 15                	jne    c001fb16 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 4c 14 02 c0       	push   0xc002144c
c001fb09:	e8 68 5e ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	e9 88 00 00 00       	jmp    c001fb9e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb20:	85 c0                	test   eax,eax
c001fb22:	0f 95 c0             	setne  al
c001fb25:	84 c0                	test   al,al
c001fb27:	74 10                	je     c001fb39 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fb29:	83 ec 0c             	sub    esp,0xc
c001fb2c:	68 97 14 02 c0       	push   0xc0021497
c001fb31:	e8 40 5e ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fb36:	83 c4 10             	add    esp,0x10
c001fb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb42:	85 c0                	test   eax,eax
c001fb44:	0f 94 c0             	sete   al
c001fb47:	84 c0                	test   al,al
c001fb49:	74 33                	je     c001fb7e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb67:	83 f8 01             	cmp    eax,0x1
c001fb6a:	74 21                	je     c001fb8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	68 70 14 02 c0       	push   0xc0021470
c001fb74:	e8 fd 5d ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	eb 0f                	jmp    c001fb8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb82:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	89 10                	mov    DWORD PTR [eax],edx
c001fb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb94:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb9e:	83 c4 0c             	add    esp,0xc
c001fba1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fba2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fba2:	83 ec 0c             	sub    esp,0xc
c001fba5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbaa:	75 10                	jne    c001fbbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	68 14 14 02 c0       	push   0xc0021414
c001fbb4:	e8 bd 5d ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc2:	85 c0                	test   eax,eax
c001fbc4:	74 34                	je     c001fbfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbcd:	85 c0                	test   eax,eax
c001fbcf:	74 29                	je     c001fbfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbdc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbe7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbf8:	eb 65                	jmp    c001fc5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc00:	85 c0                	test   eax,eax
c001fc02:	75 4b                	jne    c001fc4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0b:	85 c0                	test   eax,eax
c001fc0d:	75 40                	jne    c001fc4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc17:	89 10                	mov    DWORD PTR [eax],edx
c001fc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc39:	85 c0                	test   eax,eax
c001fc3b:	74 22                	je     c001fc5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc3d:	83 ec 0c             	sub    esp,0xc
c001fc40:	68 36 14 02 c0       	push   0xc0021436
c001fc45:	e8 2c 5d ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fc4a:	83 c4 10             	add    esp,0x10
c001fc4d:	eb 10                	jmp    c001fc5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc4f:	83 ec 0c             	sub    esp,0xc
c001fc52:	68 40 14 02 c0       	push   0xc0021440
c001fc57:	e8 1a 5d ff ff       	call   c0015976 <Krnl::panic(char const*)>
c001fc5c:	83 c4 10             	add    esp,0x10
c001fc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc66:	8d 50 01             	lea    edx,[eax+0x1]
c001fc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc70:	90                   	nop
c001fc71:	83 c4 0c             	add    esp,0xc
c001fc74:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fc76 <ACPI::~ACPI()>:
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	ba bc 22 02 c0       	mov    edx,0xc00222bc
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	89 10                	mov    DWORD PTR [eax],edx
c001fc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	50                   	push   eax
c001fc8c:	e8 71 07 ff ff       	call   c0010402 <Device::~Device()>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	90                   	nop
c001fc95:	83 c4 0c             	add    esp,0xc
c001fc98:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fc9a <ACPI::~ACPI()>:
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	83 ec 0c             	sub    esp,0xc
c001fca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca4:	e8 cd ff ff ff       	call   c001fc76 <ACPI::~ACPI()>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 ec 08             	sub    esp,0x8
c001fcaf:	68 68 22 00 00       	push   0x2268
c001fcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb8:	e8 64 f3 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	83 c4 0c             	add    esp,0xc
c001fcc3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fcc4 <CPU::~CPU()>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	ba ac 26 02 c0       	mov    edx,0xc00226ac
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	89 10                	mov    DWORD PTR [eax],edx
c001fcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	50                   	push   eax
c001fcda:	e8 23 07 ff ff       	call   c0010402 <Device::~Device()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	90                   	nop
c001fce3:	83 c4 0c             	add    esp,0xc
c001fce6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fce8 <CPU::~CPU()>:
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf2:	e8 cd ff ff ff       	call   c001fcc4 <CPU::~CPU()>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	83 ec 08             	sub    esp,0x8
c001fcfd:	68 98 11 00 00       	push   0x1198
c001fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd06:	e8 16 f3 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	83 c4 0c             	add    esp,0xc
c001fd11:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fd12 <CPU::readCR4()>:
c001fd12:	83 ec 10             	sub    esp,0x10
c001fd15:	0f 20 e0             	mov    eax,cr4
c001fd18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd20:	83 c4 10             	add    esp,0x10
c001fd23:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fd24 <CPU::writeDR7(unsigned long)>:
c001fd24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd28:	0f 23 f8             	mov    db7,eax
c001fd2b:	90                   	nop
c001fd2c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fd2d <CPU::writeCR4(unsigned long)>:
c001fd2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd31:	0f 22 e0             	mov    cr4,eax
c001fd34:	90                   	nop
c001fd35:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fd36 <CPU::readCR2()>:
c001fd36:	83 ec 10             	sub    esp,0x10
c001fd39:	0f 20 d0             	mov    eax,cr2
c001fd3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd44:	83 c4 10             	add    esp,0x10
c001fd47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd48:	90                   	nop
c001fd49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd4a <ThreadControlBlock::ThreadControlBlock()>:
c001fd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd64:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fd86:	90                   	nop
c001fd87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdcb:	83 ec 0c             	sub    esp,0xc
c001fdce:	68 fa 13 02 c0       	push   0xc00213fa
c001fdd3:	e8 6f f3 fe ff       	call   c000f147 <Dbg::kprintf(char const*, ...)>
c001fdd8:	83 c4 10             	add    esp,0x10
c001fddb:	90                   	nop
c001fddc:	83 c4 0c             	add    esp,0xc
c001fddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fde0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fde0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fde4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fde7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fde8 <PCI::~PCI()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c001fdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf4:	89 10                	mov    DWORD PTR [eax],edx
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	50                   	push   eax
c001fdfe:	e8 09 00 ff ff       	call   c000fe0c <Bus::~Bus()>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	90                   	nop
c001fe07:	83 c4 0c             	add    esp,0xc
c001fe0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fe0c <PCI::~PCI()>:
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 cd ff ff ff       	call   c001fde8 <PCI::~PCI()>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 ec 08             	sub    esp,0x8
c001fe21:	68 58 01 00 00       	push   0x158
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 f2 f1 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe36 <IDE::~IDE()>:
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	ba 90 35 02 c0       	mov    edx,0xc0023590
c001fe3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe42:	89 10                	mov    DWORD PTR [eax],edx
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	50                   	push   eax
c001fe4c:	e8 c3 0a ff ff       	call   c0010914 <HardDiskController::~HardDiskController()>
c001fe51:	83 c4 10             	add    esp,0x10
c001fe54:	90                   	nop
c001fe55:	83 c4 0c             	add    esp,0xc
c001fe58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe5a <IDE::~IDE()>:
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	83 ec 0c             	sub    esp,0xc
c001fe60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe64:	e8 cd ff ff ff       	call   c001fe36 <IDE::~IDE()>
c001fe69:	83 c4 10             	add    esp,0x10
c001fe6c:	83 ec 08             	sub    esp,0x8
c001fe6f:	68 70 02 00 00       	push   0x270
c001fe74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe78:	e8 a4 f1 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	83 c4 0c             	add    esp,0xc
c001fe83:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe84 <ATA::~ATA()>:
c001fe84:	83 ec 0c             	sub    esp,0xc
c001fe87:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c001fe8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe90:	89 10                	mov    DWORD PTR [eax],edx
c001fe92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	50                   	push   eax
c001fe9a:	e8 53 0b ff ff       	call   c00109f2 <PhysicalDisk::~PhysicalDisk()>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	90                   	nop
c001fea3:	83 c4 0c             	add    esp,0xc
c001fea6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fea8 <ATA::~ATA()>:
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	83 ec 0c             	sub    esp,0xc
c001feae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb2:	e8 cd ff ff ff       	call   c001fe84 <ATA::~ATA()>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	83 ec 08             	sub    esp,0x8
c001febd:	68 7c 01 00 00       	push   0x17c
c001fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec6:	e8 56 f1 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	83 c4 0c             	add    esp,0xc
c001fed1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fed2 <ATAPI::~ATAPI()>:
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	ba 4c 36 02 c0       	mov    edx,0xc002364c
c001feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fede:	89 10                	mov    DWORD PTR [eax],edx
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	50                   	push   eax
c001fee8:	e8 05 0b ff ff       	call   c00109f2 <PhysicalDisk::~PhysicalDisk()>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	90                   	nop
c001fef1:	83 c4 0c             	add    esp,0xc
c001fef4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fef6 <ATAPI::~ATAPI()>:
c001fef6:	83 ec 0c             	sub    esp,0xc
c001fef9:	83 ec 0c             	sub    esp,0xc
c001fefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff00:	e8 cd ff ff ff       	call   c001fed2 <ATAPI::~ATAPI()>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	83 ec 08             	sub    esp,0x8
c001ff0b:	68 80 01 00 00       	push   0x180
c001ff10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff14:	e8 08 f1 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001ff19:	83 c4 10             	add    esp,0x10
c001ff1c:	83 c4 0c             	add    esp,0xc
c001ff1f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ff20 <AVX::~AVX()>:
c001ff20:	83 ec 0c             	sub    esp,0xc
c001ff23:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2c:	89 10                	mov    DWORD PTR [eax],edx
c001ff2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff32:	83 ec 0c             	sub    esp,0xc
c001ff35:	50                   	push   eax
c001ff36:	e8 3b 0b ff ff       	call   c0010a76 <FPU::~FPU()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	90                   	nop
c001ff3f:	83 c4 0c             	add    esp,0xc
c001ff42:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ff44 <AVX::~AVX()>:
c001ff44:	83 ec 0c             	sub    esp,0xc
c001ff47:	83 ec 0c             	sub    esp,0xc
c001ff4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4e:	e8 cd ff ff ff       	call   c001ff20 <AVX::~AVX()>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	83 ec 08             	sub    esp,0x8
c001ff59:	68 58 01 00 00       	push   0x158
c001ff5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff62:	e8 ba f0 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	83 c4 0c             	add    esp,0xc
c001ff6d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ff6e <MMX::~MMX()>:
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	ba c8 36 02 c0       	mov    edx,0xc00236c8
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	89 10                	mov    DWORD PTR [eax],edx
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	50                   	push   eax
c001ff84:	e8 ed 0a ff ff       	call   c0010a76 <FPU::~FPU()>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	90                   	nop
c001ff8d:	83 c4 0c             	add    esp,0xc
c001ff90:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ff92 <MMX::~MMX()>:
c001ff92:	83 ec 0c             	sub    esp,0xc
c001ff95:	83 ec 0c             	sub    esp,0xc
c001ff98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9c:	e8 cd ff ff ff       	call   c001ff6e <MMX::~MMX()>
c001ffa1:	83 c4 10             	add    esp,0x10
c001ffa4:	83 ec 08             	sub    esp,0x8
c001ffa7:	68 58 01 00 00       	push   0x158
c001ffac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb0:	e8 6c f0 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c001ffb5:	83 c4 10             	add    esp,0x10
c001ffb8:	83 c4 0c             	add    esp,0xc
c001ffbb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ffbc <SSE::~SSE()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	ba 08 37 02 c0       	mov    edx,0xc0023708
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	89 10                	mov    DWORD PTR [eax],edx
c001ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	50                   	push   eax
c001ffd2:	e8 9f 0a ff ff       	call   c0010a76 <FPU::~FPU()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	90                   	nop
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ffe0 <SSE::~SSE()>:
c001ffe0:	83 ec 0c             	sub    esp,0xc
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffea:	e8 cd ff ff ff       	call   c001ffbc <SSE::~SSE()>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 08             	sub    esp,0x8
c001fff5:	68 58 01 00 00       	push   0x158
c001fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffe:	e8 1e f0 fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	83 c4 0c             	add    esp,0xc
c0020009:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002000a <x87::~x87()>:
c002000a:	83 ec 0c             	sub    esp,0xc
c002000d:	ba 48 37 02 c0       	mov    edx,0xc0023748
c0020012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020016:	89 10                	mov    DWORD PTR [eax],edx
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	50                   	push   eax
c0020020:	e8 51 0a ff ff       	call   c0010a76 <FPU::~FPU()>
c0020025:	83 c4 10             	add    esp,0x10
c0020028:	90                   	nop
c0020029:	83 c4 0c             	add    esp,0xc
c002002c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002002e <x87::~x87()>:
c002002e:	83 ec 0c             	sub    esp,0xc
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020038:	e8 cd ff ff ff       	call   c002000a <x87::~x87()>
c002003d:	83 c4 10             	add    esp,0x10
c0020040:	83 ec 08             	sub    esp,0x8
c0020043:	68 58 01 00 00       	push   0x158
c0020048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004c:	e8 d0 ef fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0020051:	83 c4 10             	add    esp,0x10
c0020054:	83 c4 0c             	add    esp,0xc
c0020057:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020058 <IOAPIC::~IOAPIC()>:
c0020058:	83 ec 0c             	sub    esp,0xc
c002005b:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c0020060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020064:	89 10                	mov    DWORD PTR [eax],edx
c0020066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006a:	83 ec 0c             	sub    esp,0xc
c002006d:	50                   	push   eax
c002006e:	e8 8f 03 ff ff       	call   c0010402 <Device::~Device()>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	90                   	nop
c0020077:	83 c4 0c             	add    esp,0xc
c002007a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002007c <IOAPIC::~IOAPIC()>:
c002007c:	83 ec 0c             	sub    esp,0xc
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020086:	e8 cd ff ff ff       	call   c0020058 <IOAPIC::~IOAPIC()>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	83 ec 08             	sub    esp,0x8
c0020091:	68 68 01 00 00       	push   0x168
c0020096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009a:	e8 82 ef fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	83 c4 0c             	add    esp,0xc
c00200a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00200a6 <APIC::~APIC()>:
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	ba 58 38 02 c0       	mov    edx,0xc0023858
c00200ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b2:	89 10                	mov    DWORD PTR [eax],edx
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	50                   	push   eax
c00200bc:	e8 7f 0e ff ff       	call   c0010f40 <InterruptController::~InterruptController()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	90                   	nop
c00200c5:	83 c4 0c             	add    esp,0xc
c00200c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00200ca <APIC::~APIC()>:
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d4:	e8 cd ff ff ff       	call   c00200a6 <APIC::~APIC()>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	83 ec 08             	sub    esp,0x8
c00200df:	68 58 21 00 00       	push   0x2158
c00200e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e8:	e8 34 ef fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	83 c4 0c             	add    esp,0xc
c00200f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00200f4 <PIC::~PIC()>:
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c00200fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020100:	89 10                	mov    DWORD PTR [eax],edx
c0020102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	50                   	push   eax
c002010a:	e8 31 0e ff ff       	call   c0010f40 <InterruptController::~InterruptController()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	90                   	nop
c0020113:	83 c4 0c             	add    esp,0xc
c0020116:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020118 <PIC::~PIC()>:
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020122:	e8 cd ff ff ff       	call   c00200f4 <PIC::~PIC()>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	83 ec 08             	sub    esp,0x8
c002012d:	68 58 21 00 00       	push   0x2158
c0020132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020136:	e8 e6 ee fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	83 c4 0c             	add    esp,0xc
c0020141:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020142 <APICTimer::~APICTimer()>:
c0020142:	83 ec 0c             	sub    esp,0xc
c0020145:	ba 44 39 02 c0       	mov    edx,0xc0023944
c002014a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002014e:	89 10                	mov    DWORD PTR [eax],edx
c0020150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020154:	83 ec 0c             	sub    esp,0xc
c0020157:	50                   	push   eax
c0020158:	e8 11 2b ff ff       	call   c0012c6e <Timer::~Timer()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	90                   	nop
c0020161:	83 c4 0c             	add    esp,0xc
c0020164:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020166 <APICTimer::~APICTimer()>:
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020170:	e8 cd ff ff ff       	call   c0020142 <APICTimer::~APICTimer()>
c0020175:	83 c4 10             	add    esp,0x10
c0020178:	83 ec 08             	sub    esp,0x8
c002017b:	68 60 01 00 00       	push   0x160
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	e8 98 ee fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	83 c4 0c             	add    esp,0xc
c002018f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020190 <PIT::~PIT()>:
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	ba 94 39 02 c0       	mov    edx,0xc0023994
c0020198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019c:	89 10                	mov    DWORD PTR [eax],edx
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	50                   	push   eax
c00201a6:	e8 c3 2a ff ff       	call   c0012c6e <Timer::~Timer()>
c00201ab:	83 c4 10             	add    esp,0x10
c00201ae:	90                   	nop
c00201af:	83 c4 0c             	add    esp,0xc
c00201b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00201b4 <PIT::~PIT()>:
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201be:	e8 cd ff ff ff       	call   c0020190 <PIT::~PIT()>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	83 ec 08             	sub    esp,0x8
c00201c9:	68 5c 01 00 00       	push   0x15c
c00201ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d2:	e8 4a ee fe ff       	call   c000f021 <operator delete(void*, unsigned long)>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	83 c4 0c             	add    esp,0xc
c00201dd:	c3                   	ret    
