
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 e4 01 00       	call   c001e478 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 f0 01 c0       	mov    ebx,0xc001f002
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c f0 01 c0    	cmp    ebx,0xc001f00c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 8c 2b 02 c0       	mov    eax,0xc0022b8c
c0000049:	3d 8c 2b 02 c0       	cmp    eax,0xc0022b8c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 8c 2b 02 c0       	push   0xc0022b8c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 8c 2b 02 c0       	mov    eax,0xc0022b8c
c0000075:	2d 8c 2b 02 c0       	sub    eax,0xc0022b8c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 8c 2b 02 c0       	push   0xc0022b8c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 2c 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d2c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 f0 01 c0       	mov    ebx,0xc001f014
c00000bb:	81 eb 10 f0 01 c0    	sub    ebx,0xc001f010
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 f0 01 c0       	mov    esi,0xc001f010
c00000ca:	a1 30 2d 02 c0       	mov    eax,ds:0xc0022d30
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 30 2d 02 c0       	mov    ds:0xc0022d30,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 30 2d 02 c0       	mov    eax,ds:0xc0022d30
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 8c 2b 02 c0       	push   0xc0022b8c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 2c 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d2c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 34 2d 02 c0       	push   0xc0022d34
c000012c:	68 8c 2b 02 c0       	push   0xc0022b8c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 3b e8 00 00       	call   c000ea9a <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 27 72 01 00       	call   c0017490 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 13 76 01 00       	call   c00178a3 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 b9 7b 01 00       	call   c0017e52 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 e8 71 01 00       	call   c0017490 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 70 31 02 c0 	lgdtd  ds:0xc0023170
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 67 09 01 c0       	mov    ecx,0xc0010967
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 67 09 01 c0       	mov    ecx,0xc0010967
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 4c 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022d4c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 4c 2d 02 c0       	mov    ds:0xc0022d4c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 4c 2d 02 c0       	mov    eax,ds:0xc0022d4c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 4c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d4c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 20 f0 01 c0 02 	test   BYTE PTR [edx-0x3ffe0fe0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 20 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0fe0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 20 f0 01 c0 08 	test   BYTE PTR [edx-0x3ffe0fe0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 20 f0 01 c0 04 	test   BYTE PTR [edi-0x3ffe0fe0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 20 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0fe0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 60 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022d60
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 60 2d 02 c0    	mov    DWORD PTR ds:0xc0022d60,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 64 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd29c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 64 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd29c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 60 2d 02 c0    	mov    DWORD PTR ds:0xc0022d60,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 8c 2d 02 c0    	cmp    DWORD PTR ds:0xc0022d8c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 9c 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022d9c
c0000b8d:	c7 42 0c 94 2d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022d94
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 9c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d9c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 8c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d8c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 60 2d 02 c0 02 	test   BYTE PTR ds:0xc0022d60,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 60 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d60
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 64 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd29c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 64 2d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd29c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 94 2d 02 c0 	lea    edx,[eax*8-0x3ffdd26c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d a0 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022da0
c0000f0f:	81 fb 94 2d 02 c0    	cmp    ebx,0xc0022d94
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 94 2d 02 c0       	cmp    eax,0xc0022d94
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 90 2d 02 c0    	cmp    DWORD PTR ds:0xc0022d90,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 9c 2d 02 c0       	mov    ds:0xc0022d9c,eax
c0000f4b:	a3 a0 2d 02 c0       	mov    ds:0xc0022da0,eax
c0000f50:	a3 90 2d 02 c0       	mov    ds:0xc0022d90,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 94 2d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022d94
c0000f5e:	c7 40 0c 94 2d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022d94
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 a0 2d 02 c0       	mov    ds:0xc0022da0,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 94 2d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022d94
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 58 2d 02 c0 	lea    ebp,[edx*4-0x3ffdd2a8]
c0000faf:	8b 14 95 60 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2a0]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 60 2d 02 c0 	lea    ecx,[edx*4-0x3ffdd2a0]
c0000fca:	8b 14 95 60 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd2a0]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 94 30 02 c0 	or     DWORD PTR [edi*4-0x3ffdcf6c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 94 2d 02 c0 	lea    eax,[eax*8-0x3ffdd26c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 9c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d9c,ecx
c0001084:	89 0d a0 2d 02 c0    	mov    DWORD PTR ds:0xc0022da0,ecx
c000108a:	c7 41 08 94 2d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022d94
c0001091:	c7 41 0c 94 2d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022d94
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 8c 2d 02 c0 	lea    edx,[ecx*8-0x3ffdd274]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 94 30 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcf6c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 94 30 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcf6c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 8c 2d 02 c0 	lea    edx,[eax*4-0x3ffdd274]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 94 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf6c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 9c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d9c,edi
c0001157:	89 3d a0 2d 02 c0    	mov    DWORD PTR ds:0xc0022da0,edi
c000115d:	c7 47 08 94 2d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022d94
c0001164:	c7 47 0c 94 2d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022d94
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 90 2d 02 c0    	mov    DWORD PTR ds:0xc0022d90,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 8c 2d 02 c0       	mov    eax,ds:0xc0022d8c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 8c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d8c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 60 2d 02 c0       	mov    edx,0xc0022d60
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 60 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022d60,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d b4 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230b4
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 b4 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00230b4,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d b4 30 02 c0    	mov    DWORD PTR ds:0xc00230b4,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 8c 2d 02 c0    	cmp    DWORD PTR ds:0xc0022d8c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 8c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d8c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 60 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022d60,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 bc 30 02 c0    	push   DWORD PTR ds:0xc00230bc
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 60 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022d60,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 bc 30 02 c0       	mov    eax,ds:0xc00230bc
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 8c 2d 02 c0 00 	cmp    DWORD PTR ds:0xc0022d8c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 8c 2d 02 c0       	mov    eax,ds:0xc0022d8c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 64 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd29c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 94 2d 02 c0       	mov    eax,0xc0022d94
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 8c 30 02 c0       	cmp    eax,0xc002308c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 c8 30 02 c0       	mov    eax,ds:0xc00230c8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 b0 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230b0
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 c4 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230c4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 d4 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230d4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 24 f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0edc]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 60 2d 02 c0       	mov    eax,ds:0xc0022d60
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 60 2d 02 c0       	mov    ds:0xc0022d60,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d a4 30 02 c0    	mov    DWORD PTR ds:0xc00230a4,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d a8 30 02 c0    	mov    DWORD PTR ds:0xc00230a8,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d ac 30 02 c0    	mov    DWORD PTR ds:0xc00230ac,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 b4 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00230b4,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 80 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb980]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 67 7c 01 00       	jmp    c00195c0 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 80 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb980]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 98 7c 01 00       	jmp    c0019607 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 80 46 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb980]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 c0 7c 01 00       	jmp    c001964e <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 ab c5 01 00       	call   c001e21c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 40 f2 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0dc0]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 40 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0dc0]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 40 f1 01 c0       	mov    edx,0xc001f140
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 6c f2 01 c0       	mov    edx,0xc001f26c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 50 f2 01 c0       	mov    edx,0xc001f250
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 00 31 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcf00]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 e0 30 02 c0    	mov    ax,ds:0xc00230e0
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 e0 30 02 c0    	mov    ds:0xc00230e0,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 a8 b3 01 00       	call   c001e21c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 72 f2 01 c0       	mov    eax,0xc001f272
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad c0 f1 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0e40]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 7b f2 01 c0       	mov    eax,0xc001f27b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 40 f2 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0dc0]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 73 9d 01 00       	call   c001e21c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 50 f2 01 c0       	mov    edx,0xc001f250
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 40 f1 01 c0       	mov    edx,0xc001f140
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 50 f1 01 c0       	mov    edx,0xc001f150
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 00 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf00]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 00 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcf00],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 3a 87 01 00       	call   c001e21c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 20 87 01 00       	call   c001e21c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 97 f1 01 c0       	mov    eax,0xc001f197
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 90 f1 01 c0       	mov    eax,0xc001f190
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 00 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf00]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 80 f1 01 c0       	mov    esi,0xc001f180
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 63 6e 01 00       	call   c001e21c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 60 f1 01 c0       	mov    edx,0xc001f160
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 70 f1 01 c0       	mov    edx,0xc001f170
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 82 f2 01 c0       	mov    edx,0xc001f282
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 8e f2 01 c0       	mov    edx,0xc001f28e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba a2 f2 01 c0       	mov    edx,0xc001f2a2
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c c0 f5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f5c0
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 c0 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f5c0
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 c0 f3 01 c0       	mov    eax,0xc001f3c0
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 00 f3 01 c0       	mov    eax,0xc001f300
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 c0 f2 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0d40]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 80 fb 01 c0    	fld    QWORD PTR ds:0xc001fb80
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 88 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb88
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 a0 fb 01 c0    	fld    DWORD PTR ds:0xc001fba0
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 6b 5e 01 00       	call   c001e440 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 90 fb 01 c0    	fld    QWORD PTR ds:0xc001fb90
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 20 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe04e0]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 a4 fb 01 c0    	fld    DWORD PTR ds:0xc001fba4
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 a8 fb 01 c0    	fld    DWORD PTR ds:0xc001fba8
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 98 fb 01 c0    	fcom   QWORD PTR ds:0xc001fb98
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 ac fb 01 c0    	fld    DWORD PTR ds:0xc001fbac
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 a9 59 01 00       	call   c001e460 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 b0 fb 01 c0    	fld    DWORD PTR ds:0xc001fbb0
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 a8 fb 01 c0    	fld    DWORD PTR ds:0xc001fba8
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 98 fb 01 c0    	fcom   QWORD PTR ds:0xc001fb98
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 ac fb 01 c0    	fld    DWORD PTR ds:0xc001fbac
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 1d 59 01 00       	call   c001e460 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 80 fb 01 c0    	fld    QWORD PTR ds:0xc001fb80
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 88 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb88
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 aa 58 01 00       	call   c001e460 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 76 57 01 00       	call   c001e440 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d f8 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fbf8
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 0f 57 01 00       	call   c001e460 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 9c 56 01 00       	call   c001e440 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d f8 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fbf8
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 b4 fb 01 c0       	mov    eax,0xc001fbb4
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 c8 fb 01 c0       	mov    eax,0xc001fbc8
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 80 fb 01 c0    	fld    QWORD PTR ds:0xc001fb80
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 88 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb88
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 88 fd 01 c0    	fld    DWORD PTR ds:0xc001fd88
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 00 fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0400]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 1c fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe03e4]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 38 fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe03c8]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 8c fd 01 c0    	fld    DWORD PTR ds:0xc001fd8c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 0e 4a 01 00       	jmp    c001e460 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 eb 49 01 00       	call   c001e460 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 90 fd 01 c0    	fld    DWORD PTR ds:0xc001fd90
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 96 47 01 00       	call   c001e460 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 61 47 01 00       	call   c001e460 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 f8 fb 01 c0    	fadd   QWORD PTR ds:0xc001fbf8
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 73 46 01 00       	call   c001e440 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 80 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd80
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 d6 45 01 00       	call   c001e460 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 90 fd 01 c0    	fld    DWORD PTR ds:0xc001fd90
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 12 45 01 00       	call   c001e460 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 dd 44 01 00       	call   c001e460 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 f8 fb 01 c0    	fadd   QWORD PTR ds:0xc001fbf8
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 ef 43 01 00       	call   c001e440 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 80 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd80
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 57 43 01 00       	call   c001e460 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 90 fd 01 c0    	fld    DWORD PTR ds:0xc001fd90
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 93 42 01 00       	call   c001e460 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 5e 42 01 00       	call   c001e460 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 f8 fb 01 c0    	fadd   QWORD PTR ds:0xc001fbf8
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 70 41 01 00       	call   c001e440 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 80 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd80
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 d8 40 01 00       	call   c001e460 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 90 fd 01 c0    	fld    DWORD PTR ds:0xc001fd90
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 14 40 01 00       	call   c001e460 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 df 3f 01 00       	call   c001e460 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 f8 fb 01 c0    	fadd   QWORD PTR ds:0xc001fbf8
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 f1 3e 01 00       	call   c001e440 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 80 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd80
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 59 3e 01 00       	call   c001e460 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 90 fd 01 c0    	fld    DWORD PTR ds:0xc001fd90
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 95 3d 01 00       	call   c001e460 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 60 3d 01 00       	call   c001e460 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 f8 fb 01 c0    	fadd   QWORD PTR ds:0xc001fbf8
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 79 3c 01 00       	call   c001e440 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 80 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fd80
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 db 3b 01 00       	call   c001e460 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 60 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03a0]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 54 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03ac]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 80 fb 01 c0    	fld    QWORD PTR ds:0xc001fb80
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 88 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb88
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 6e 3a 01 00       	call   c001e460 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 42 39 01 00       	call   c001e440 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d f8 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fbf8
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 e7 38 01 00       	call   c001e460 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 74 38 01 00       	call   c001e440 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d f8 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fbf8
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 94 fd 01 c0       	mov    eax,0xc001fd94
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 a5 fd 01 c0       	mov    eax,0xc001fda5
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 cb 54 00 00       	call   c0010246 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 dc fd 01 c0       	push   0xc001fddc
c000adb1:	50                   	push   eax
c000adb2:	e8 09 55 00 00       	call   c00102c0 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 64 c9 00 00       	call   c0017870 <lockScheduler()>
c000af0c:	e8 93 cc 00 00       	call   c0017ba4 <schedule()>
c000af11:	e8 5c c9 00 00       	call   c0017872 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 b2 3c 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 b4 45 02 c0    	push   DWORD PTR ds:0xc00245b4
c000af33:	68 e5 fd 01 c0       	push   0xc001fde5
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 90 c7 00 00       	call   c00176d0 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 45 ca 00 00       	call   c001799a <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 d3 81 01 c0       	push   0xc00181d3
c000af5e:	ff 35 b4 45 02 c0    	push   DWORD PTR ds:0xc00245b4
c000af64:	e8 31 ca 00 00       	call   c001799a <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 68 45 02 c0       	mov    ds:0xc0024568,eax
c000af71:	c6 05 6d 31 02 c0 01 	mov    BYTE PTR ds:0xc002316d,0x1
c000af78:	e8 a3 40 00 00       	call   c000f020 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 b0 b1 00 00       	call   c0016144 <setupSystemCalls()>
c000af94:	e8 85 4b 00 00       	call   c000fb1e <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 79 52 00 00       	call   c001021a <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 f2 fd 01 c0       	push   0xc001fdf2
c000afb0:	e8 5e c3 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 a8 c4 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 3c 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e3c
c000afc5:	e8 fb 3c 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 27 cd 00 00       	call   c0017cfe <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 81 31 02 c0 04 	test   BYTE PTR ds:0xc0023181,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 b1 2e 01 00       	call   c001dee6 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 2d 8b 00 00       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 06 8b 00 00       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 e4 8a 00 00       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 c2 8a 00 00       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 80 31 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023180,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 eb 89 00 00       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 c6 89 00 00       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 35 2d 01 00       	call   c001dea0 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 02 2d 01 00       	call   c001de90 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 e1 89 00 00       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 0e fe 01 c0       	push   0xc001fe0e
c000b1e8:	e8 6d 97 00 00       	call   c001495a <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 14 fe 01 c0       	push   0xc001fe14
c000b220:	e8 35 97 00 00       	call   c001495a <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 80 31 02 c0 04 	test   BYTE PTR ds:0xc0023180,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 a0 25 02 c0 	sete   BYTE PTR ds:0xc00225a0
c000b284:	e8 4d 39 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 27 7f 00 00       	call   c00131ba <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 2e 4e 00 00       	call   c00100d0 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 16 39 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 9e 89 00 00       	call   c0013c68 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 f7 4d 00 00       	call   c00100d0 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 43 53 00 00       	call   c0010638 <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 c7 4d 00 00       	call   c00100d0 <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 6f c7 00 00       	call   c0017a9a <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 1a fe 01 c0       	push   0xc001fe1a
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 4c 39 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 2b fe 01 c0       	push   0xc001fe2b
c000b396:	e8 bf 95 00 00       	call   c001495a <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 38 fe 01 c0       	push   0xc001fe38
c000b3ab:	e8 aa 95 00 00       	call   c001495a <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 42 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe42
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 93 95 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 7c fe 01 c0       	push   0xc001fe7c
c000b45c:	e8 64 38 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 72 31 02 c0       	mov    ds:0xc0023172,eax
c000b49d:	66 89 15 70 31 02 c0 	mov    WORD PTR ds:0xc0023170,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 be c2 00 00       	call   c0017872 <unlockScheduler()>
c000b5b4:	e8 9b 86 00 00       	call   c0013c54 <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 df 2e 01 00       	call   c001e4e0 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 d6 2e 01 00       	call   c001e4e0 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 78 31 02 c0 ff 07 	mov    WORD PTR ds:0xc0023178,0x7ff
c000b6f7:	a3 7a 31 02 c0       	mov    ds:0xc002317a,eax
c000b6fc:	0f 01 1d 78 31 02 c0 	lidtd  ds:0xc0023178
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 12 25 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 d2 2a 00 00       	call   c000e4c6 <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 d4 31 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 2a 1c 00 00       	call   c000d63c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 5b 1c 00 00       	call   c000d67c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 d3 81 00 00       	call   c0013c54 <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 8c 25 02 c0       	mov    eax,ds:0xc002258c
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 8c 25 02 c0       	mov    eax,ds:0xc002258c
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 98 fe 01 c0       	push   0xc001fe98
c000bac4:	e8 fc 31 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 8c 25 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002258c,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 09 24 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 8c 25 02 c0    	mov    ebp,DWORD PTR ds:0xc002258c
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 ba 28 00 00       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 8c 25 02 c0    	mov    ebx,DWORD PTR ds:0xc002258c
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 80 29 01 00       	call   c001e4f5 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 89 29 01 00       	call   c001e507 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 c8 fe 01 c0       	push   0xc001fec8
c000bb8b:	e8 ca 8d 00 00       	call   c001495a <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 cd fe 01 c0       	push   0xc001fecd
c000bba1:	e8 b4 8d 00 00       	call   c001495a <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 b9 bc 00 00       	call   c0017870 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 aa bc 00 00       	call   c0017872 <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 22 23 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 de 28 00 00       	call   c000e4c6 <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 07 23 00 00       	call   c000defb <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 e7 25 00 00       	call   c000e1e8 <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 d0 0a 00 00       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 a0 0a 00 00       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 35 0b 00 00       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 18 32 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc0023218,0xc000bd9c
c000bec6:	c7 05 04 32 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc0023204,0xc000bc78
c000bed0:	c7 05 00 32 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc0023200,0xc000bcbd
c000beda:	c7 05 0c 32 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc002320c,0xc000bdd8
c000bee4:	c7 05 14 32 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc0023214,0xc000bcff
c000beee:	c7 05 08 32 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc0023208,0xc000bd53
c000bef8:	c7 05 10 32 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc0023210,0xc000bd54
c000bf02:	c7 05 1c 32 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc002321c,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 57 08 00 00       	call   c000c776 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 08 1f 00 00       	call   c000de7c <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 7b 12 02 c0       	push   0xc002127b
c000bf9b:	e8 ba 89 00 00       	call   c001495a <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 80 31 02 c0    	mov    DWORD PTR ds:0xc0023180,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 70 20 00 00       	call   c000e026 <VAS::VAS()>
c000bfb6:	89 1d c4 32 02 c0    	mov    DWORD PTR ds:0xc00232c4,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 09 2c 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 68 31 02 c0    	mov    DWORD PTR ds:0xc0023168,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 68 22 00 00       	call   c000e25a <VAS::~VAS()>
c000bff2:	c7 04 24 d4 fe 01 c0 	mov    DWORD PTR [esp],0xc001fed4
c000bff9:	e8 5c 89 00 00       	call   c001495a <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba c0 31 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdce40],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be c0 31 02 c0       	mov    esi,0xc00231c0
c000c06f:	8d 90 c0 31 02 c0    	lea    edx,[eax-0x3ffdce40]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 c0 31 02 c0    	lea    eax,[edx-0x3ffdce40]
c000c0d5:	8d 94 11 c0 31 02 c0 	lea    edx,[ecx+edx*1-0x3ffdce40]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 90 25 02 c0    	mov    esi,DWORD PTR ds:0xc0022590
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 90 25 02 c0    	add    eax,DWORD PTR ds:0xc0022590
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 90 25 02 c0    	mov    edx,DWORD PTR ds:0xc0022590
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000c161:	48                   	dec    eax
c000c162:	a3 ac 31 02 c0       	mov    ds:0xc00231ac,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d b0 31 02 c0    	idiv   DWORD PTR ds:0xc00231b0
c000c177:	39 05 a8 31 02 c0    	cmp    DWORD PTR ds:0xc00231a8,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 a8 31 02 c0       	mov    ds:0xc00231a8,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 6a 09 00 00       	call   c000cb0a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 ef fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001feef
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 92 87 00 00       	jmp    c001495a <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 a0 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231a0
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d a0 31 02 c0    	mov    DWORD PTR ds:0xc00231a0,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 a0 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00231a0,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 05 ff 01 c0       	push   0xc001ff05
c000c21f:	e8 36 87 00 00       	call   c001495a <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d a0 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231a0
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 ac 31 02 c0       	mov    ds:0xc00231ac,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d b0 31 02 c0    	idiv   DWORD PTR ds:0xc00231b0
c000c25d:	39 05 a8 31 02 c0    	cmp    DWORD PTR ds:0xc00231a8,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 a0 31 02 c0       	mov    eax,ds:0xc00231a0
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 a8 31 02 c0       	mov    ds:0xc00231a8,eax
c000c279:	50                   	push   eax
c000c27a:	e8 8b 08 00 00       	call   c000cb0a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d a4 31 02 c0    	cmp    DWORD PTR ds:0xc00231a4,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 40             	sub    esp,0x40
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 c0 31 02 c0       	push   0xc00231c0
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 18 01 00 00    	je     c000c427 <Phys::physicalMemorySetup(unsigned int)+0x16b>
c000c30f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c313:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c31b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c31f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c328:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c330:	eb 15                	jmp    c000c347 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c332:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c336:	83 c3 18             	add    ebx,0x18
c000c339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c341:	0f 84 f0 00 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c347:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c349:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c34c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c34f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c352:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c356:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c35a:	01 f0                	add    eax,esi
c000c35c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000c360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c364:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c367:	11 fa                	adc    edx,edi
c000c369:	55                   	push   ebp
c000c36a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c36e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c372:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c376:	56                   	push   esi
c000c377:	68 40 ff 01 c0       	push   0xc001ff40
c000c37c:	e8 44 29 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000c381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c385:	83 c4 10             	add    esp,0x10
c000c388:	09 f8                	or     eax,edi
c000c38a:	0f 85 a7 00 00 00    	jne    c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c390:	4d                   	dec    ebp
c000c391:	75 9f                	jne    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c393:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c397:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000c39a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c39e:	39 ea                	cmp    edx,ebp
c000c3a0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c3a4:	72 8c                	jb     c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c3a6:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c3ab:	3b 54 24 10          	cmp    edx,DWORD PTR [esp+0x10]
c000c3af:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000c3b3:	0f 83 79 ff ff ff    	jae    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c3b9:	39 ee                	cmp    esi,ebp
c000c3bb:	89 e9                	mov    ecx,ebp
c000c3bd:	89 fe                	mov    esi,edi
c000c3bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000c3c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c3c7:	19 ee                	sbb    esi,ebp
c000c3c9:	73 17                	jae    c000c3e2 <Phys::physicalMemorySetup(unsigned int)+0x126>
c000c3cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c3ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c3d2:	29 f8                	sub    eax,edi
c000c3d4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c3d8:	19 ea                	sbb    edx,ebp
c000c3da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3e2:	83 ec 08             	sub    esp,0x8
c000c3e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ed:	e8 92 fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c3f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3fa:	83 c4 0c             	add    esp,0xc
c000c3fd:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c401:	03 05 b0 31 02 c0    	add    eax,DWORD PTR ds:0xc00231b0
c000c407:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c40e:	a3 b0 31 02 c0       	mov    ds:0xc00231b0,eax
c000c413:	52                   	push   edx
c000c414:	50                   	push   eax
c000c415:	68 21 ff 01 c0       	push   0xc001ff21
c000c41a:	e8 a6 28 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000c41f:	83 c4 10             	add    esp,0x10
c000c422:	e9 0b ff ff ff       	jmp    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c427:	83 ec 0c             	sub    esp,0xc
c000c42a:	68 13 ff 01 c0       	push   0xc001ff13
c000c42f:	e8 26 85 00 00       	call   c001495a <Krnl::panic(char const*)>
c000c434:	83 c4 10             	add    esp,0x10
c000c437:	bb 40 01 00 00       	mov    ebx,0x140
c000c43c:	83 ec 08             	sub    esp,0x8
c000c43f:	6a 00                	push   0x0
c000c441:	53                   	push   ebx
c000c442:	43                   	inc    ebx
c000c443:	e8 a8 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c448:	ff 05 b0 31 02 c0    	inc    DWORD PTR ds:0xc00231b0
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c457:	75 e3                	jne    c000c43c <Phys::physicalMemorySetup(unsigned int)+0x180>
c000c459:	83 c4 3c             	add    esp,0x3c
c000c45c:	5b                   	pop    ebx
c000c45d:	5e                   	pop    esi
c000c45e:	5f                   	pop    edi
c000c45f:	5d                   	pop    ebp
c000c460:	c3                   	ret    
c000c461:	90                   	nop

c000c462 <Pipe::isAtty()>:
c000c462:	31 c0                	xor    eax,eax
c000c464:	c3                   	ret    
c000c465:	90                   	nop

c000c466 <Pipe::~Pipe()>:
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	ba a4 ff 01 c0       	mov    edx,0xc001ffa4
c000c46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c472:	89 10                	mov    DWORD PTR [eax],edx
c000c474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c478:	83 ec 0c             	sub    esp,0xc
c000c47b:	50                   	push   eax
c000c47c:	e8 5b 16 00 00       	call   c000dadc <UnixFile::~UnixFile()>
c000c481:	83 c4 10             	add    esp,0x10
c000c484:	90                   	nop
c000c485:	83 c4 0c             	add    esp,0xc
c000c488:	c3                   	ret    
c000c489:	90                   	nop

c000c48a <Pipe::~Pipe()>:
c000c48a:	83 ec 0c             	sub    esp,0xc
c000c48d:	83 ec 0c             	sub    esp,0xc
c000c490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c494:	e8 cd ff ff ff       	call   c000c466 <Pipe::~Pipe()>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	83 ec 08             	sub    esp,0x8
c000c49f:	6a 20                	push   0x20
c000c4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a5:	e8 3b 27 00 00       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	83 c4 0c             	add    esp,0xc
c000c4b0:	c3                   	ret    
c000c4b1:	90                   	nop

c000c4b2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4b2:	55                   	push   ebp
c000c4b3:	57                   	push   edi
c000c4b4:	56                   	push   esi
c000c4b5:	53                   	push   ebx
c000c4b6:	83 ec 1c             	sub    esp,0x1c
c000c4b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4c5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4c8:	89 c8                	mov    eax,ecx
c000c4ca:	99                   	cdq    
c000c4cb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4cf:	74 19                	je     c000c4ea <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4d1:	39 f9                	cmp    ecx,edi
c000c4d3:	89 d1                	mov    ecx,edx
c000c4d5:	19 f1                	sbb    ecx,esi
c000c4d7:	73 11                	jae    c000c4ea <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4d9:	e8 92 b3 00 00       	call   c0017870 <lockScheduler()>
c000c4de:	e8 c1 b6 00 00       	call   c0017ba4 <schedule()>
c000c4e3:	e8 8a b3 00 00       	call   c0017872 <unlockScheduler()>
c000c4e8:	eb db                	jmp    c000c4c5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4ea:	39 f8                	cmp    eax,edi
c000c4ec:	89 d1                	mov    ecx,edx
c000c4ee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c4f2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c4f6:	19 f1                	sbb    ecx,esi
c000c4f8:	73 08                	jae    c000c502 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c4fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c505:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c508:	29 c6                	sub    esi,eax
c000c50a:	89 f1                	mov    ecx,esi
c000c50c:	c1 f9 1f             	sar    ecx,0x1f
c000c50f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c513:	89 ca                	mov    edx,ecx
c000c515:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c519:	19 d1                	sbb    ecx,edx
c000c51b:	73 04                	jae    c000c521 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c51d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c521:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c525:	89 fd                	mov    ebp,edi
c000c527:	29 f5                	sub    ebp,esi
c000c529:	85 f6                	test   esi,esi
c000c52b:	74 12                	je     c000c53f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c52d:	52                   	push   edx
c000c52e:	56                   	push   esi
c000c52f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c532:	50                   	push   eax
c000c533:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c537:	e8 96 40 ff ff       	call   c00005d2 <memcpy>
c000c53c:	83 c4 10             	add    esp,0x10
c000c53f:	85 ed                	test   ebp,ebp
c000c541:	74 12                	je     c000c555 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c543:	50                   	push   eax
c000c544:	55                   	push   ebp
c000c545:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c548:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c54c:	56                   	push   esi
c000c54d:	e8 80 40 ff ff       	call   c00005d2 <memcpy>
c000c552:	83 c4 10             	add    esp,0x10
c000c555:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c558:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c55b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c55e:	99                   	cdq    
c000c55f:	89 f7                	mov    edi,esi
c000c561:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c565:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c569:	c1 ff 1f             	sar    edi,0x1f
c000c56c:	57                   	push   edi
c000c56d:	56                   	push   esi
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	e8 a7 1d 01 00       	call   c001e31c <__umoddi3>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c57b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c580:	75 10                	jne    c000c592 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c582:	83 ec 0c             	sub    esp,0xc
c000c585:	68 61 ff 01 c0       	push   0xc001ff61
c000c58a:	e8 cb 83 00 00       	call   c001495a <Krnl::panic(char const*)>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c59a:	89 10                	mov    DWORD PTR [eax],edx
c000c59c:	83 c4 1c             	add    esp,0x1c
c000c59f:	31 c0                	xor    eax,eax
c000c5a1:	5b                   	pop    ebx
c000c5a2:	5e                   	pop    esi
c000c5a3:	5f                   	pop    edi
c000c5a4:	5d                   	pop    ebp
c000c5a5:	c3                   	ret    

c000c5a6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5a6:	55                   	push   ebp
c000c5a7:	57                   	push   edi
c000c5a8:	56                   	push   esi
c000c5a9:	53                   	push   ebx
c000c5aa:	83 ec 1c             	sub    esp,0x1c
c000c5ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5bc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5bf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5c6:	89 de                	mov    esi,ebx
c000c5c8:	89 df                	mov    edi,ebx
c000c5ca:	c1 ff 1f             	sar    edi,0x1f
c000c5cd:	01 c6                	add    esi,eax
c000c5cf:	89 c8                	mov    eax,ecx
c000c5d1:	11 d7                	adc    edi,edx
c000c5d3:	99                   	cdq    
c000c5d4:	39 f1                	cmp    ecx,esi
c000c5d6:	89 d0                	mov    eax,edx
c000c5d8:	19 f8                	sbb    eax,edi
c000c5da:	b8 01 00 00 00       	mov    eax,0x1
c000c5df:	0f 82 80 00 00 00    	jb     c000c665 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5e8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5eb:	01 d8                	add    eax,ebx
c000c5ed:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c5f1:	99                   	cdq    
c000c5f2:	f7 f9                	idiv   ecx
c000c5f4:	29 d1                	sub    ecx,edx
c000c5f6:	89 d7                	mov    edi,edx
c000c5f8:	89 c8                	mov    eax,ecx
c000c5fa:	99                   	cdq    
c000c5fb:	39 ce                	cmp    esi,ecx
c000c5fd:	19 d3                	sbb    ebx,edx
c000c5ff:	bb 00 00 00 00       	mov    ebx,0x0
c000c604:	72 04                	jb     c000c60a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c606:	89 f3                	mov    ebx,esi
c000c608:	29 cb                	sub    ebx,ecx
c000c60a:	89 f1                	mov    ecx,esi
c000c60c:	29 d9                	sub    ecx,ebx
c000c60e:	74 1a                	je     c000c62a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c610:	52                   	push   edx
c000c611:	51                   	push   ecx
c000c612:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c616:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c61a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c61d:	57                   	push   edi
c000c61e:	e8 af 3f ff ff       	call   c00005d2 <memcpy>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c62a:	85 db                	test   ebx,ebx
c000c62c:	74 12                	je     c000c640 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c62e:	50                   	push   eax
c000c62f:	53                   	push   ebx
c000c630:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c634:	51                   	push   ecx
c000c635:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c638:	e8 95 3f ff ff       	call   c00005d2 <memcpy>
c000c63d:	83 c4 10             	add    esp,0x10
c000c640:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c643:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c648:	75 10                	jne    c000c65a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c64a:	83 ec 0c             	sub    esp,0xc
c000c64d:	68 7d ff 01 c0       	push   0xc001ff7d
c000c652:	e8 03 83 00 00       	call   c001495a <Krnl::panic(char const*)>
c000c657:	83 c4 10             	add    esp,0x10
c000c65a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c65e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c661:	89 38                	mov    DWORD PTR [eax],edi
c000c663:	31 c0                	xor    eax,eax
c000c665:	83 c4 1c             	add    esp,0x1c
c000c668:	5b                   	pop    ebx
c000c669:	5e                   	pop    esi
c000c66a:	5f                   	pop    edi
c000c66b:	5d                   	pop    ebp
c000c66c:	c3                   	ret    
c000c66d:	90                   	nop

c000c66e <Pipe::Pipe(int)>:
c000c66e:	83 ec 0c             	sub    esp,0xc
c000c671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c675:	83 ec 08             	sub    esp,0x8
c000c678:	6a 00                	push   0x0
c000c67a:	50                   	push   eax
c000c67b:	e8 ba 12 00 00       	call   c000d93a <UnixFile::UnixFile(int)>
c000c680:	83 c4 10             	add    esp,0x10
c000c683:	ba a4 ff 01 c0       	mov    edx,0xc001ffa4
c000c688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c68c:	89 10                	mov    DWORD PTR [eax],edx
c000c68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c692:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c696:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6b3:	83 ec 0c             	sub    esp,0xc
c000c6b6:	50                   	push   eax
c000c6b7:	e8 62 f5 ff ff       	call   c000bc1e <malloc>
c000c6bc:	83 c4 10             	add    esp,0x10
c000c6bf:	89 c2                	mov    edx,eax
c000c6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6cc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6d0:	90                   	nop
c000c6d1:	83 c4 0c             	add    esp,0xc
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <VgaText::isAtty()>:
c000c6d6:	b0 01                	mov    al,0x1
c000c6d8:	c3                   	ret    
c000c6d9:	90                   	nop

c000c6da <VgaText::~VgaText()>:
c000c6da:	83 ec 0c             	sub    esp,0xc
c000c6dd:	ba 60 00 02 c0       	mov    edx,0xc0020060
c000c6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6e6:	89 10                	mov    DWORD PTR [eax],edx
c000c6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ec:	83 ec 0c             	sub    esp,0xc
c000c6ef:	50                   	push   eax
c000c6f0:	e8 e7 13 00 00       	call   c000dadc <UnixFile::~UnixFile()>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	90                   	nop
c000c6f9:	83 c4 0c             	add    esp,0xc
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <VgaText::~VgaText()>:
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	83 ec 0c             	sub    esp,0xc
c000c704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c708:	e8 cd ff ff ff       	call   c000c6da <VgaText::~VgaText()>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	83 ec 08             	sub    esp,0x8
c000c713:	68 60 12 00 00       	push   0x1260
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	e8 c4 24 00 00       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000c721:	83 c4 10             	add    esp,0x10
c000c724:	83 c4 0c             	add    esp,0xc
c000c727:	c3                   	ret    

c000c728 <VgaText::read(unsigned long long, void*, int*)>:
c000c728:	83 ec 10             	sub    esp,0x10
c000c72b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c72f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c733:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c737:	e8 ca 50 00 00       	call   c0011806 <readKeyboard(VgaText*, char*, unsigned long)>
c000c73c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c740:	89 02                	mov    DWORD PTR [edx],eax
c000c742:	31 c0                	xor    eax,eax
c000c744:	83 c4 1c             	add    esp,0x1c
c000c747:	c3                   	ret    

c000c748 <setTerminalScrollLock(bool)>:
c000c748:	c3                   	ret    

c000c749 <addToTerminalCycle(VgaText*)>:
c000c749:	8b 15 20 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023220
c000c74f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c753:	85 d2                	test   edx,edx
c000c755:	75 0c                	jne    c000c763 <addToTerminalCycle(VgaText*)+0x1a>
c000c757:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c75d:	a3 20 32 02 c0       	mov    ds:0xc0023220,eax
c000c762:	c3                   	ret    
c000c763:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c769:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c76f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c775:	c3                   	ret    

c000c776 <installVgaTextImplementation()>:
c000c776:	83 ec 10             	sub    esp,0x10
c000c779:	6a 20                	push   0x20
c000c77b:	6a 00                	push   0x0
c000c77d:	68 00 32 02 c0       	push   0xc0023200
c000c782:	e8 81 3e ff ff       	call   c0000608 <memset>
c000c787:	83 c4 1c             	add    esp,0x1c
c000c78a:	c3                   	ret    

c000c78b <scrollTerminalScrollLock(int)>:
c000c78b:	c3                   	ret    

c000c78c <VgaText::load()>:
c000c78c:	53                   	push   ebx
c000c78d:	31 c0                	xor    eax,eax
c000c78f:	83 ec 58             	sub    esp,0x58
c000c792:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c796:	89 e2                	mov    edx,esp
c000c798:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c79c:	40                   	inc    eax
c000c79d:	83 f8 50             	cmp    eax,0x50
c000c7a0:	75 f6                	jne    c000c798 <VgaText::load()+0xc>
c000c7a2:	31 c0                	xor    eax,eax
c000c7a4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7ab:	84 c9                	test   cl,cl
c000c7ad:	74 06                	je     c000c7b5 <VgaText::load()+0x29>
c000c7af:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7b2:	40                   	inc    eax
c000c7b3:	eb ef                	jmp    c000c7a4 <VgaText::load()+0x18>
c000c7b5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7bb:	85 c0                	test   eax,eax
c000c7bd:	74 09                	je     c000c7c8 <VgaText::load()+0x3c>
c000c7bf:	51                   	push   ecx
c000c7c0:	51                   	push   ecx
c000c7c1:	52                   	push   edx
c000c7c2:	53                   	push   ebx
c000c7c3:	ff d0                	call   eax
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7ce:	85 c0                	test   eax,eax
c000c7d0:	74 09                	je     c000c7db <VgaText::load()+0x4f>
c000c7d2:	83 ec 0c             	sub    esp,0xc
c000c7d5:	53                   	push   ebx
c000c7d6:	ff d0                	call   eax
c000c7d8:	83 c4 10             	add    esp,0x10
c000c7db:	83 c4 58             	add    esp,0x58
c000c7de:	5b                   	pop    ebx
c000c7df:	c3                   	ret    

c000c7e0 <VgaText::updateCursor()>:
c000c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7e4:	39 05 24 32 02 c0    	cmp    DWORD PTR ds:0xc0023224,eax
c000c7ea:	75 0c                	jne    c000c7f8 <VgaText::updateCursor()+0x18>
c000c7ec:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c7f2:	85 c0                	test   eax,eax
c000c7f4:	74 02                	je     c000c7f8 <VgaText::updateCursor()+0x18>
c000c7f6:	ff e0                	jmp    eax
c000c7f8:	c3                   	ret    
c000c7f9:	90                   	nop

c000c7fa <VgaText::showCursor(bool)>:
c000c7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c802:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::disableBlink(bool)>:
c000c80a:	56                   	push   esi
c000c80b:	53                   	push   ebx
c000c80c:	51                   	push   ecx
c000c80d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c811:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c815:	39 1d 24 32 02 c0    	cmp    DWORD PTR ds:0xc0023224,ebx
c000c81b:	75 18                	jne    c000c835 <VgaText::disableBlink(bool)+0x2b>
c000c81d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c823:	85 c0                	test   eax,eax
c000c825:	74 0e                	je     c000c835 <VgaText::disableBlink(bool)+0x2b>
c000c827:	89 f1                	mov    ecx,esi
c000c829:	52                   	push   edx
c000c82a:	52                   	push   edx
c000c82b:	0f b6 d1             	movzx  edx,cl
c000c82e:	52                   	push   edx
c000c82f:	53                   	push   ebx
c000c830:	ff d0                	call   eax
c000c832:	83 c4 10             	add    esp,0x10
c000c835:	89 f0                	mov    eax,esi
c000c837:	83 f0 01             	xor    eax,0x1
c000c83a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c840:	58                   	pop    eax
c000c841:	5b                   	pop    ebx
c000c842:	5e                   	pop    esi
c000c843:	c3                   	ret    

c000c844 <VgaText::doANSI_SGR(int)>:
c000c844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c84c:	85 d2                	test   edx,edx
c000c84e:	75 14                	jne    c000c864 <VgaText::doANSI_SGR(int)+0x20>
c000c850:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c856:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c85c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c862:	eb 65                	jmp    c000c8c9 <VgaText::doANSI_SGR(int)+0x85>
c000c864:	83 fa 07             	cmp    edx,0x7
c000c867:	75 14                	jne    c000c87d <VgaText::doANSI_SGR(int)+0x39>
c000c869:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c86f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c875:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c87b:	eb 4c                	jmp    c000c8c9 <VgaText::doANSI_SGR(int)+0x85>
c000c87d:	83 fa 1b             	cmp    edx,0x1b
c000c880:	74 ce                	je     c000c850 <VgaText::doANSI_SGR(int)+0xc>
c000c882:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c885:	83 f9 07             	cmp    ecx,0x7
c000c888:	77 09                	ja     c000c893 <VgaText::doANSI_SGR(int)+0x4f>
c000c88a:	8b 14 8d c0 25 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdda40]
c000c891:	eb 20                	jmp    c000c8b3 <VgaText::doANSI_SGR(int)+0x6f>
c000c893:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c896:	83 f9 07             	cmp    ecx,0x7
c000c899:	77 09                	ja     c000c8a4 <VgaText::doANSI_SGR(int)+0x60>
c000c89b:	8b 14 8d c0 25 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdda40]
c000c8a2:	eb 25                	jmp    c000c8c9 <VgaText::doANSI_SGR(int)+0x85>
c000c8a4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8a7:	83 f9 07             	cmp    ecx,0x7
c000c8aa:	77 0e                	ja     c000c8ba <VgaText::doANSI_SGR(int)+0x76>
c000c8ac:	8b 14 95 78 24 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddb88]
c000c8b3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8b9:	c3                   	ret    
c000c8ba:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8bd:	83 f9 07             	cmp    ecx,0x7
c000c8c0:	77 0d                	ja     c000c8cf <VgaText::doANSI_SGR(int)+0x8b>
c000c8c2:	8b 14 95 50 24 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddbb0]
c000c8c9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8cf:	c3                   	ret    

c000c8d0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8d8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8de:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8e4:	c3                   	ret    
c000c8e5:	90                   	nop

c000c8e6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8ee:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c8f4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c8fc:	53                   	push   ebx
c000c8fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c901:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c905:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c909:	51                   	push   ecx
c000c90a:	e8 c1 ff ff ff       	call   c000c8d0 <VgaText::setDefaultBgColour(VgaColour)>
c000c90f:	58                   	pop    eax
c000c910:	5a                   	pop    edx
c000c911:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c915:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c919:	5b                   	pop    ebx
c000c91a:	eb ca                	jmp    c000c8e6 <VgaText::setDefaultFgColour(VgaColour)>

c000c91c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c91c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c920:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c925:	83 e0 0f             	and    eax,0xf
c000c928:	c1 e2 04             	shl    edx,0x4
c000c92b:	09 d0                	or     eax,edx
c000c92d:	c3                   	ret    

c000c92e <VgaText::scrollScreen()>:
c000c92e:	57                   	push   edi
c000c92f:	56                   	push   esi
c000c930:	be 01 00 00 00       	mov    esi,0x1
c000c935:	53                   	push   ebx
c000c936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c93a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c940:	31 ff                	xor    edi,edi
c000c942:	01 d9                	add    ecx,ebx
c000c944:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c947:	83 fe 17             	cmp    esi,0x17
c000c94a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c950:	75 28                	jne    c000c97a <VgaText::scrollScreen()+0x4c>
c000c952:	f7 c7 01 00 00 00    	test   edi,0x1
c000c958:	74 1c                	je     c000c976 <VgaText::scrollScreen()+0x48>
c000c95a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c961:	50                   	push   eax
c000c962:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c969:	50                   	push   eax
c000c96a:	e8 ad ff ff ff       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000c96f:	5a                   	pop    edx
c000c970:	5a                   	pop    edx
c000c971:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c974:	eb 04                	jmp    c000c97a <VgaText::scrollScreen()+0x4c>
c000c976:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c97a:	47                   	inc    edi
c000c97b:	41                   	inc    ecx
c000c97c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c982:	75 c0                	jne    c000c944 <VgaText::scrollScreen()+0x16>
c000c984:	46                   	inc    esi
c000c985:	83 fe 18             	cmp    esi,0x18
c000c988:	75 b0                	jne    c000c93a <VgaText::scrollScreen()+0xc>
c000c98a:	39 1d 24 32 02 c0    	cmp    DWORD PTR ds:0xc0023224,ebx
c000c990:	75 24                	jne    c000c9b6 <VgaText::scrollScreen()+0x88>
c000c992:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c999:	74 08                	je     c000c9a3 <VgaText::scrollScreen()+0x75>
c000c99b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9a1:	eb 13                	jmp    c000c9b6 <VgaText::scrollScreen()+0x88>
c000c9a3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9a9:	85 c0                	test   eax,eax
c000c9ab:	74 09                	je     c000c9b6 <VgaText::scrollScreen()+0x88>
c000c9ad:	83 ec 0c             	sub    esp,0xc
c000c9b0:	53                   	push   ebx
c000c9b1:	ff d0                	call   eax
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ba:	5b                   	pop    ebx
c000c9bb:	5e                   	pop    esi
c000c9bc:	5f                   	pop    edi
c000c9bd:	e9 1e fe ff ff       	jmp    c000c7e0 <VgaText::updateCursor()>

c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9c7:	c1 e0 08             	shl    eax,0x8
c000c9ca:	89 c2                	mov    edx,eax
c000c9cc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9d1:	09 d0                	or     eax,edx
c000c9d3:	c3                   	ret    

c000c9d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9d4:	53                   	push   ebx
c000c9d5:	83 ec 08             	sub    esp,0x8
c000c9d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9dc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9e1:	50                   	push   eax
c000c9e2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9e7:	50                   	push   eax
c000c9e8:	e8 2f ff ff ff       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9ed:	5a                   	pop    edx
c000c9ee:	0f b6 c0             	movzx  eax,al
c000c9f1:	5b                   	pop    ebx
c000c9f2:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000c9f7:	50                   	push   eax
c000c9f8:	53                   	push   ebx
c000c9f9:	e8 c4 ff ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000c9fe:	5a                   	pop    edx
c000c9ff:	5a                   	pop    edx
c000ca00:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca06:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca0a:	0f b7 d2             	movzx  edx,dx
c000ca0d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca12:	39 0d 24 32 02 c0    	cmp    DWORD PTR ds:0xc0023224,ecx
c000ca18:	75 14                	jne    c000ca2e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca1a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca20:	85 c0                	test   eax,eax
c000ca22:	74 0a                	je     c000ca2e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca24:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca28:	83 c4 08             	add    esp,0x8
c000ca2b:	5b                   	pop    ebx
c000ca2c:	ff e0                	jmp    eax
c000ca2e:	83 c4 08             	add    esp,0x8
c000ca31:	5b                   	pop    ebx
c000ca32:	c3                   	ret    
c000ca33:	90                   	nop

c000ca34 <VgaText::getCursorX()>:
c000ca34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca38:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca3e:	c3                   	ret    
c000ca3f:	90                   	nop

c000ca40 <VgaText::getCursorY()>:
c000ca40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca44:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca4a:	c3                   	ret    
c000ca4b:	90                   	nop

c000ca4c <VgaText::setCursor(int, int)>:
c000ca4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca54:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca5e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca64:	e9 77 fd ff ff       	jmp    c000c7e0 <VgaText::updateCursor()>
c000ca69:	90                   	nop

c000ca6a <VgaText::setCursorX(int)>:
c000ca6a:	83 ec 10             	sub    esp,0x10
c000ca6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca71:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7b:	50                   	push   eax
c000ca7c:	e8 cb ff ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop

c000ca86 <VgaText::setCursorY(int)>:
c000ca86:	83 ec 10             	sub    esp,0x10
c000ca89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca91:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ca97:	50                   	push   eax
c000ca98:	e8 af ff ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000ca9d:	83 c4 1c             	add    esp,0x1c
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <VgaText::incrementCursor(bool)>:
c000caa2:	56                   	push   esi
c000caa3:	53                   	push   ebx
c000caa4:	51                   	push   ecx
c000caa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caa9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000caad:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cab3:	40                   	inc    eax
c000cab4:	83 f8 50             	cmp    eax,0x50
c000cab7:	74 08                	je     c000cac1 <VgaText::incrementCursor(bool)+0x1f>
c000cab9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cabf:	eb 33                	jmp    c000caf4 <VgaText::incrementCursor(bool)+0x52>
c000cac1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cac7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cad1:	8d 50 01             	lea    edx,[eax+0x1]
c000cad4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cada:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cae0:	75 12                	jne    c000caf4 <VgaText::incrementCursor(bool)+0x52>
c000cae2:	83 ec 0c             	sub    esp,0xc
c000cae5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000caeb:	53                   	push   ebx
c000caec:	e8 3d fe ff ff       	call   c000c92e <VgaText::scrollScreen()>
c000caf1:	83 c4 10             	add    esp,0x10
c000caf4:	89 f0                	mov    eax,esi
c000caf6:	84 c0                	test   al,al
c000caf8:	74 0c                	je     c000cb06 <VgaText::incrementCursor(bool)+0x64>
c000cafa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cafe:	5a                   	pop    edx
c000caff:	5b                   	pop    ebx
c000cb00:	5e                   	pop    esi
c000cb01:	e9 da fc ff ff       	jmp    c000c7e0 <VgaText::updateCursor()>
c000cb06:	58                   	pop    eax
c000cb07:	5b                   	pop    ebx
c000cb08:	5e                   	pop    esi
c000cb09:	c3                   	ret    

c000cb0a <VgaText::updateRAMUsageDisplay(int)>:
c000cb0a:	53                   	push   ebx
c000cb0b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb10:	6a 0f                	push   0xf
c000cb12:	6a 00                	push   0x0
c000cb14:	e8 03 fe ff ff       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb19:	5a                   	pop    edx
c000cb1a:	59                   	pop    ecx
c000cb1b:	0f b6 c8             	movzx  ecx,al
c000cb1e:	51                   	push   ecx
c000cb1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb23:	99                   	cdq    
c000cb24:	f7 fb                	idiv   ebx
c000cb26:	89 d3                	mov    ebx,edx
c000cb28:	83 c0 30             	add    eax,0x30
c000cb2b:	83 c3 30             	add    ebx,0x30
c000cb2e:	0f be c0             	movsx  eax,al
c000cb31:	0f b6 db             	movzx  ebx,bl
c000cb34:	50                   	push   eax
c000cb35:	e8 88 fe ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb3a:	5a                   	pop    edx
c000cb3b:	5a                   	pop    edx
c000cb3c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb42:	51                   	push   ecx
c000cb43:	53                   	push   ebx
c000cb44:	e8 79 fe ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb49:	5b                   	pop    ebx
c000cb4a:	5a                   	pop    edx
c000cb4b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb51:	51                   	push   ecx
c000cb52:	6a 25                	push   0x25
c000cb54:	e8 69 fe ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	59                   	pop    ecx
c000cb5a:	5b                   	pop    ebx
c000cb5b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb61:	5b                   	pop    ebx
c000cb62:	c3                   	ret    
c000cb63:	90                   	nop

c000cb64 <VgaText::updateDiskUsage()>:
c000cb64:	55                   	push   ebp
c000cb65:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb6a:	57                   	push   edi
c000cb6b:	56                   	push   esi
c000cb6c:	53                   	push   ebx
c000cb6d:	6a 0f                	push   0xf
c000cb6f:	6a 00                	push   0x0
c000cb71:	e8 a6 fd ff ff       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb76:	5a                   	pop    edx
c000cb77:	0f b6 d8             	movzx  ebx,al
c000cb7a:	59                   	pop    ecx
c000cb7b:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cb80:	53                   	push   ebx
c000cb81:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb86:	99                   	cdq    
c000cb87:	f7 fd                	idiv   ebp
c000cb89:	99                   	cdq    
c000cb8a:	f7 f9                	idiv   ecx
c000cb8c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb8f:	0f b6 c0             	movzx  eax,al
c000cb92:	50                   	push   eax
c000cb93:	e8 2a fe ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb98:	5e                   	pop    esi
c000cb99:	5f                   	pop    edi
c000cb9a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cba0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cba5:	53                   	push   ebx
c000cba6:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cbab:	99                   	cdq    
c000cbac:	f7 ff                	idiv   edi
c000cbae:	99                   	cdq    
c000cbaf:	f7 f9                	idiv   ecx
c000cbb1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbb4:	0f b6 c0             	movzx  eax,al
c000cbb7:	50                   	push   eax
c000cbb8:	e8 05 fe ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbbd:	5a                   	pop    edx
c000cbbe:	5e                   	pop    esi
c000cbbf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbc5:	be 64 00 00 00       	mov    esi,0x64
c000cbca:	53                   	push   ebx
c000cbcb:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cbd0:	99                   	cdq    
c000cbd1:	f7 fe                	idiv   esi
c000cbd3:	99                   	cdq    
c000cbd4:	f7 f9                	idiv   ecx
c000cbd6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbd9:	0f b6 c0             	movzx  eax,al
c000cbdc:	50                   	push   eax
c000cbdd:	e8 e0 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbe2:	5a                   	pop    edx
c000cbe3:	5a                   	pop    edx
c000cbe4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbea:	53                   	push   ebx
c000cbeb:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cbf0:	99                   	cdq    
c000cbf1:	f7 f9                	idiv   ecx
c000cbf3:	99                   	cdq    
c000cbf4:	f7 f9                	idiv   ecx
c000cbf6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbf9:	0f b6 c0             	movzx  eax,al
c000cbfc:	50                   	push   eax
c000cbfd:	e8 c0 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc02:	5a                   	pop    edx
c000cc03:	5a                   	pop    edx
c000cc04:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc0a:	53                   	push   ebx
c000cc0b:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000cc10:	99                   	cdq    
c000cc11:	f7 f9                	idiv   ecx
c000cc13:	8d 42 30             	lea    eax,[edx+0x30]
c000cc16:	0f b6 c0             	movzx  eax,al
c000cc19:	50                   	push   eax
c000cc1a:	e8 a3 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc1f:	5a                   	pop    edx
c000cc20:	5a                   	pop    edx
c000cc21:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc27:	53                   	push   ebx
c000cc28:	a1 00 4f 02 c0       	mov    eax,ds:0xc0024f00
c000cc2d:	99                   	cdq    
c000cc2e:	f7 fd                	idiv   ebp
c000cc30:	99                   	cdq    
c000cc31:	f7 f9                	idiv   ecx
c000cc33:	8d 42 30             	lea    eax,[edx+0x30]
c000cc36:	0f b6 c0             	movzx  eax,al
c000cc39:	50                   	push   eax
c000cc3a:	e8 83 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc3f:	5d                   	pop    ebp
c000cc40:	5a                   	pop    edx
c000cc41:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc47:	53                   	push   ebx
c000cc48:	a1 00 4f 02 c0       	mov    eax,ds:0xc0024f00
c000cc4d:	99                   	cdq    
c000cc4e:	f7 ff                	idiv   edi
c000cc50:	99                   	cdq    
c000cc51:	f7 f9                	idiv   ecx
c000cc53:	8d 42 30             	lea    eax,[edx+0x30]
c000cc56:	0f b6 c0             	movzx  eax,al
c000cc59:	50                   	push   eax
c000cc5a:	e8 63 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc5f:	5f                   	pop    edi
c000cc60:	5d                   	pop    ebp
c000cc61:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc67:	53                   	push   ebx
c000cc68:	a1 00 4f 02 c0       	mov    eax,ds:0xc0024f00
c000cc6d:	99                   	cdq    
c000cc6e:	f7 fe                	idiv   esi
c000cc70:	99                   	cdq    
c000cc71:	f7 f9                	idiv   ecx
c000cc73:	8d 42 30             	lea    eax,[edx+0x30]
c000cc76:	0f b6 c0             	movzx  eax,al
c000cc79:	50                   	push   eax
c000cc7a:	e8 43 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc7f:	5a                   	pop    edx
c000cc80:	5e                   	pop    esi
c000cc81:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc87:	53                   	push   ebx
c000cc88:	a1 00 4f 02 c0       	mov    eax,ds:0xc0024f00
c000cc8d:	99                   	cdq    
c000cc8e:	f7 f9                	idiv   ecx
c000cc90:	99                   	cdq    
c000cc91:	f7 f9                	idiv   ecx
c000cc93:	8d 42 30             	lea    eax,[edx+0x30]
c000cc96:	0f b6 c0             	movzx  eax,al
c000cc99:	50                   	push   eax
c000cc9a:	e8 23 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc9f:	5f                   	pop    edi
c000cca0:	5d                   	pop    ebp
c000cca1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000cca7:	53                   	push   ebx
c000cca8:	a1 00 4f 02 c0       	mov    eax,ds:0xc0024f00
c000ccad:	99                   	cdq    
c000ccae:	f7 f9                	idiv   ecx
c000ccb0:	83 c2 30             	add    edx,0x30
c000ccb3:	0f b6 d2             	movzx  edx,dl
c000ccb6:	52                   	push   edx
c000ccb7:	e8 06 fd ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccbc:	5a                   	pop    edx
c000ccbd:	59                   	pop    ecx
c000ccbe:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccc4:	5b                   	pop    ebx
c000ccc5:	5e                   	pop    esi
c000ccc6:	5f                   	pop    edi
c000ccc7:	5d                   	pop    ebp
c000ccc8:	c3                   	ret    
c000ccc9:	90                   	nop

c000ccca <VgaText::updateTitle()>:
c000ccca:	53                   	push   ebx
c000cccb:	31 c0                	xor    eax,eax
c000cccd:	83 ec 58             	sub    esp,0x58
c000ccd0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ccd4:	89 e1                	mov    ecx,esp
c000ccd6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccda:	40                   	inc    eax
c000ccdb:	83 f8 50             	cmp    eax,0x50
c000ccde:	75 f6                	jne    c000ccd6 <VgaText::updateTitle()+0xc>
c000cce0:	31 c0                	xor    eax,eax
c000cce2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cce9:	84 db                	test   bl,bl
c000cceb:	74 06                	je     c000ccf3 <VgaText::updateTitle()+0x29>
c000cced:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ccf0:	40                   	inc    eax
c000ccf1:	eb ef                	jmp    c000cce2 <VgaText::updateTitle()+0x18>
c000ccf3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000ccf9:	85 c0                	test   eax,eax
c000ccfb:	74 09                	je     c000cd06 <VgaText::updateTitle()+0x3c>
c000ccfd:	53                   	push   ebx
c000ccfe:	53                   	push   ebx
c000ccff:	51                   	push   ecx
c000cd00:	52                   	push   edx
c000cd01:	ff d0                	call   eax
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	e8 59 fe ff ff       	call   c000cb64 <VgaText::updateDiskUsage()>
c000cd0b:	83 c4 58             	add    esp,0x58
c000cd0e:	5b                   	pop    ebx
c000cd0f:	c3                   	ret    

c000cd10 <VgaText::setTitleTextColour(VgaColour)>:
c000cd10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd18:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd1e:	eb aa                	jmp    c000ccca <VgaText::updateTitle()>

c000cd20 <VgaText::setTitleColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd2e:	eb 9a                	jmp    c000ccca <VgaText::updateTitle()>

c000cd30 <VgaText::setTitle(char*)>:
c000cd30:	53                   	push   ebx
c000cd31:	83 ec 10             	sub    esp,0x10
c000cd34:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd42:	50                   	push   eax
c000cd43:	e8 5f 39 ff ff       	call   c00006a7 <strcpy>
c000cd48:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd4c:	83 c4 18             	add    esp,0x18
c000cd4f:	5b                   	pop    ebx
c000cd50:	e9 75 ff ff ff       	jmp    c000ccca <VgaText::updateTitle()>
c000cd55:	90                   	nop

c000cd56 <VgaText::decrementCursor(bool)>:
c000cd56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd5e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd64:	85 c0                	test   eax,eax
c000cd66:	74 07                	je     c000cd6f <VgaText::decrementCursor(bool)+0x19>
c000cd68:	48                   	dec    eax
c000cd69:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd6f:	84 c9                	test   cl,cl
c000cd71:	74 09                	je     c000cd7c <VgaText::decrementCursor(bool)+0x26>
c000cd73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd77:	e9 64 fa ff ff       	jmp    c000c7e0 <VgaText::updateCursor()>
c000cd7c:	c3                   	ret    
c000cd7d:	90                   	nop

c000cd7e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd7e:	53                   	push   ebx
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cd92:	3c 07                	cmp    al,0x7
c000cd94:	75 2a                	jne    c000cdc0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cd96:	a1 cc 32 02 c0       	mov    eax,ds:0xc00232cc
c000cd9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cda3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdab:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdb7:	83 c4 08             	add    esp,0x8
c000cdba:	5b                   	pop    ebx
c000cdbb:	e9 f0 2c 00 00       	jmp    c000fab0 <Buzzer::beep(int, int, bool)>
c000cdc0:	3c 0d                	cmp    al,0xd
c000cdc2:	75 0c                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdc4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdce:	eb 3b                	jmp    c000ce0b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cdd0:	3c 0a                	cmp    al,0xa
c000cdd2:	75 40                	jne    c000ce14 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cdd4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdda:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cde4:	8d 50 01             	lea    edx,[eax+0x1]
c000cde7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cded:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cdf3:	75 12                	jne    c000ce07 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000cdf5:	83 ec 0c             	sub    esp,0xc
c000cdf8:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cdfe:	53                   	push   ebx
c000cdff:	e8 2a fb ff ff       	call   c000c92e <VgaText::scrollScreen()>
c000ce04:	83 c4 10             	add    esp,0x10
c000ce07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce0b:	83 c4 08             	add    esp,0x8
c000ce0e:	5b                   	pop    ebx
c000ce0f:	e9 cc f9 ff ff       	jmp    c000c7e0 <VgaText::updateCursor()>
c000ce14:	3c 08                	cmp    al,0x8
c000ce16:	75 31                	jne    c000ce49 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce18:	50                   	push   eax
c000ce19:	50                   	push   eax
c000ce1a:	6a 01                	push   0x1
c000ce1c:	53                   	push   ebx
c000ce1d:	e8 34 ff ff ff       	call   c000cd56 <VgaText::decrementCursor(bool)>
c000ce22:	5a                   	pop    edx
c000ce23:	59                   	pop    ecx
c000ce24:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce2a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce30:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce36:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce3c:	6a 20                	push   0x20
c000ce3e:	53                   	push   ebx
c000ce3f:	e8 90 fb ff ff       	call   c000c9d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce44:	83 c4 28             	add    esp,0x28
c000ce47:	5b                   	pop    ebx
c000ce48:	c3                   	ret    
c000ce49:	83 ec 08             	sub    esp,0x8
c000ce4c:	0f be c0             	movsx  eax,al
c000ce4f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce55:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce5b:	51                   	push   ecx
c000ce5c:	52                   	push   edx
c000ce5d:	50                   	push   eax
c000ce5e:	53                   	push   ebx
c000ce5f:	e8 70 fb ff ff       	call   c000c9d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce64:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce68:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce70:	83 c4 28             	add    esp,0x28
c000ce73:	5b                   	pop    ebx
c000ce74:	e9 29 fc ff ff       	jmp    c000caa2 <VgaText::incrementCursor(bool)>
c000ce79:	90                   	nop

c000ce7a <VgaText::isShowingCursor()>:
c000ce7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce7e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce84:	c3                   	ret    
c000ce85:	90                   	nop

c000ce86 <VgaText::isBlinkDisabled()>:
c000ce86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000ce90:	83 f0 01             	xor    eax,0x1
c000ce93:	c3                   	ret    

c000ce94 <VgaText::setCursorHeight(int)>:
c000ce94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce9c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000cea2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cead:	e9 48 f9 ff ff       	jmp    c000c7fa <VgaText::showCursor(bool)>

c000ceb2 <VgaText::getCursorHeight()>:
c000ceb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cebc:	c3                   	ret    

c000cebd <setActiveTerminal(VgaText*)>:
c000cebd:	53                   	push   ebx
c000cebe:	83 ec 08             	sub    esp,0x8
c000cec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cec5:	85 db                	test   ebx,ebx
c000cec7:	75 11                	jne    c000ceda <setActiveTerminal(VgaText*)+0x1d>
c000cec9:	c7 44 24 10 b8 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffb8
c000ced1:	83 c4 08             	add    esp,0x8
c000ced4:	5b                   	pop    ebx
c000ced5:	e9 80 7a 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c000ceda:	50                   	push   eax
c000cedb:	50                   	push   eax
c000cedc:	53                   	push   ebx
c000cedd:	68 c6 ff 01 c0       	push   0xc001ffc6
c000cee2:	e8 de 1d 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000cee7:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c000ceec:	83 c4 10             	add    esp,0x10
c000ceef:	85 c0                	test   eax,eax
c000cef1:	74 0c                	je     c000ceff <setActiveTerminal(VgaText*)+0x42>
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	50                   	push   eax
c000cef7:	e8 e4 f8 ff ff       	call   c000c7e0 <VgaText::updateCursor()>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	89 1d 24 32 02 c0    	mov    DWORD PTR ds:0xc0023224,ebx
c000cf05:	51                   	push   ecx
c000cf06:	51                   	push   ecx
c000cf07:	53                   	push   ebx
c000cf08:	68 de ff 01 c0       	push   0xc001ffde
c000cf0d:	e8 b3 1d 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000cf12:	83 c4 0c             	add    esp,0xc
c000cf15:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf1b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf21:	53                   	push   ebx
c000cf22:	e8 25 fb ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000cf27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf2a:	e8 57 ff ff ff       	call   c000ce86 <VgaText::isBlinkDisabled()>
c000cf2f:	5a                   	pop    edx
c000cf30:	0f b6 c0             	movzx  eax,al
c000cf33:	59                   	pop    ecx
c000cf34:	50                   	push   eax
c000cf35:	53                   	push   ebx
c000cf36:	e8 cf f8 ff ff       	call   c000c80a <VgaText::disableBlink(bool)>
c000cf3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3e:	e8 6f ff ff ff       	call   c000ceb2 <VgaText::getCursorHeight()>
c000cf43:	5a                   	pop    edx
c000cf44:	59                   	pop    ecx
c000cf45:	50                   	push   eax
c000cf46:	53                   	push   ebx
c000cf47:	e8 48 ff ff ff       	call   c000ce94 <VgaText::setCursorHeight(int)>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf56:	75 0a                	jne    c000cf62 <setActiveTerminal(VgaText*)+0xa5>
c000cf58:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf66:	83 c4 08             	add    esp,0x8
c000cf69:	5b                   	pop    ebx
c000cf6a:	e9 1d f8 ff ff       	jmp    c000c78c <VgaText::load()>

c000cf6f <doTerminalCycle()>:
c000cf6f:	83 ec 18             	sub    esp,0x18
c000cf72:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c000cf77:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf7d:	50                   	push   eax
c000cf7e:	a3 20 32 02 c0       	mov    ds:0xc0023220,eax
c000cf83:	e8 35 ff ff ff       	call   c000cebd <setActiveTerminal(VgaText*)>
c000cf88:	83 c4 1c             	add    esp,0x1c
c000cf8b:	c3                   	ret    

c000cf8c <VgaText::doUpdate()>:
c000cf8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf90:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cf96:	85 c0                	test   eax,eax
c000cf98:	74 02                	je     c000cf9c <VgaText::doUpdate()+0x10>
c000cf9a:	ff e0                	jmp    eax
c000cf9c:	c3                   	ret    
c000cf9d:	90                   	nop

c000cf9e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cf9e:	55                   	push   ebp
c000cf9f:	57                   	push   edi
c000cfa0:	56                   	push   esi
c000cfa1:	53                   	push   ebx
c000cfa2:	83 ec 1c             	sub    esp,0x1c
c000cfa5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfa9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfae:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfb5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfb8:	50                   	push   eax
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	50                   	push   eax
c000cfbf:	e8 58 f9 ff ff       	call   c000c91c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfc4:	59                   	pop    ecx
c000cfc5:	0f b6 c0             	movzx  eax,al
c000cfc8:	5b                   	pop    ebx
c000cfc9:	31 c9                	xor    ecx,ecx
c000cfcb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfd3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfd7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe1:	0f b7 db             	movzx  ebx,bx
c000cfe4:	01 db                	add    ebx,ebx
c000cfe6:	01 fb                	add    ebx,edi
c000cfe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfeb:	84 c0                	test   al,al
c000cfed:	0f 84 38 01 00 00    	je     c000d12b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000cff3:	3c 0d                	cmp    al,0xd
c000cff5:	75 0f                	jne    c000d006 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000cff7:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d001:	e9 1f 01 00 00       	jmp    c000d125 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d006:	3c 0a                	cmp    al,0xa
c000d008:	75 5b                	jne    c000d065 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d00a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d010:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d01a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d01d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d023:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d029:	75 12                	jne    c000d03d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d02b:	83 ec 0c             	sub    esp,0xc
c000d02e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d034:	55                   	push   ebp
c000d035:	e8 f4 f8 ff ff       	call   c000c92e <VgaText::scrollScreen()>
c000d03a:	83 c4 10             	add    esp,0x10
c000d03d:	83 ec 0c             	sub    esp,0xc
c000d040:	55                   	push   ebp
c000d041:	e8 9a f7 ff ff       	call   c000c7e0 <VgaText::updateCursor()>
c000d046:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d04e:	83 c4 10             	add    esp,0x10
c000d051:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d057:	31 c9                	xor    ecx,ecx
c000d059:	0f b7 db             	movzx  ebx,bx
c000d05c:	01 db                	add    ebx,ebx
c000d05e:	01 fb                	add    ebx,edi
c000d060:	e9 c0 00 00 00       	jmp    c000d125 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d065:	3c 08                	cmp    al,0x8
c000d067:	75 4e                	jne    c000d0b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d069:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d06d:	53                   	push   ebx
c000d06e:	53                   	push   ebx
c000d06f:	6a 01                	push   0x1
c000d071:	55                   	push   ebp
c000d072:	e8 df fc ff ff       	call   c000cd56 <VgaText::decrementCursor(bool)>
c000d077:	58                   	pop    eax
c000d078:	5a                   	pop    edx
c000d079:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d07f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d085:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d08b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d091:	6a 20                	push   0x20
c000d093:	55                   	push   ebp
c000d094:	e8 3b f9 ff ff       	call   c000c9d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d099:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0a1:	83 c4 20             	add    esp,0x20
c000d0a4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0aa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0ae:	0f b7 db             	movzx  ebx,bx
c000d0b1:	01 db                	add    ebx,ebx
c000d0b3:	01 fb                	add    ebx,edi
c000d0b5:	eb 6e                	jmp    c000d125 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0b7:	51                   	push   ecx
c000d0b8:	51                   	push   ecx
c000d0b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0bd:	50                   	push   eax
c000d0be:	e8 ff f8 ff ff       	call   c000c9c2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0c9:	39 2d 24 32 02 c0    	cmp    DWORD PTR ds:0xc0023224,ebp
c000d0cf:	75 2a                	jne    c000d0fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0d1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0d7:	85 c0                	test   eax,eax
c000d0d9:	74 20                	je     c000d0fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0db:	52                   	push   edx
c000d0dc:	52                   	push   edx
c000d0dd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0e3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0f1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d0f4:	51                   	push   ecx
c000d0f5:	55                   	push   ebp
c000d0f6:	ff d0                	call   eax
c000d0f8:	83 c4 20             	add    esp,0x20
c000d0fb:	83 c3 02             	add    ebx,0x2
c000d0fe:	50                   	push   eax
c000d0ff:	50                   	push   eax
c000d100:	6a 00                	push   0x0
c000d102:	55                   	push   ebp
c000d103:	e8 9a f9 ff ff       	call   c000caa2 <VgaText::incrementCursor(bool)>
c000d108:	83 c4 10             	add    esp,0x10
c000d10b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d112:	75 0f                	jne    c000d123 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d114:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d11c:	0f b7 db             	movzx  ebx,bx
c000d11f:	01 db                	add    ebx,ebx
c000d121:	01 fb                	add    ebx,edi
c000d123:	b1 01                	mov    cl,0x1
c000d125:	46                   	inc    esi
c000d126:	e9 bd fe ff ff       	jmp    c000cfe8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d12b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d12f:	83 ec 0c             	sub    esp,0xc
c000d132:	55                   	push   ebp
c000d133:	e8 a8 f6 ff ff       	call   c000c7e0 <VgaText::updateCursor()>
c000d138:	83 c4 10             	add    esp,0x10
c000d13b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d13f:	84 c9                	test   cl,cl
c000d141:	74 0c                	je     c000d14f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d143:	83 ec 0c             	sub    esp,0xc
c000d146:	55                   	push   ebp
c000d147:	e8 40 fe ff ff       	call   c000cf8c <VgaText::doUpdate()>
c000d14c:	83 c4 10             	add    esp,0x10
c000d14f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d156:	83 c4 1c             	add    esp,0x1c
c000d159:	5b                   	pop    ebx
c000d15a:	5e                   	pop    esi
c000d15b:	5f                   	pop    edi
c000d15c:	5d                   	pop    ebp
c000d15d:	c3                   	ret    

c000d15e <VgaText::clearScreen()>:
c000d15e:	57                   	push   edi
c000d15f:	56                   	push   esi
c000d160:	31 f6                	xor    esi,esi
c000d162:	53                   	push   ebx
c000d163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d167:	52                   	push   edx
c000d168:	6a 00                	push   0x0
c000d16a:	6a 00                	push   0x0
c000d16c:	53                   	push   ebx
c000d16d:	e8 da f8 ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000d172:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d179:	83 c4 10             	add    esp,0x10
c000d17c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d182:	7e 26                	jle    c000d1aa <VgaText::clearScreen()+0x4c>
c000d184:	31 ff                	xor    edi,edi
c000d186:	50                   	push   eax
c000d187:	50                   	push   eax
c000d188:	56                   	push   esi
c000d189:	57                   	push   edi
c000d18a:	47                   	inc    edi
c000d18b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d191:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d197:	6a 20                	push   0x20
c000d199:	53                   	push   ebx
c000d19a:	e8 35 f8 ff ff       	call   c000c9d4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d19f:	83 c4 20             	add    esp,0x20
c000d1a2:	83 ff 50             	cmp    edi,0x50
c000d1a5:	75 df                	jne    c000d186 <VgaText::clearScreen()+0x28>
c000d1a7:	46                   	inc    esi
c000d1a8:	eb d2                	jmp    c000d17c <VgaText::clearScreen()+0x1e>
c000d1aa:	83 ec 0c             	sub    esp,0xc
c000d1ad:	53                   	push   ebx
c000d1ae:	e8 d9 fd ff ff       	call   c000cf8c <VgaText::doUpdate()>
c000d1b3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ba:	83 c4 10             	add    esp,0x10
c000d1bd:	5b                   	pop    ebx
c000d1be:	5e                   	pop    esi
c000d1bf:	5f                   	pop    edi
c000d1c0:	c3                   	ret    
c000d1c1:	90                   	nop

c000d1c2 <VgaText::putchar(char)>:
c000d1c2:	56                   	push   esi
c000d1c3:	53                   	push   ebx
c000d1c4:	83 ec 14             	sub    esp,0x14
c000d1c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1cf:	3c 5b                	cmp    al,0x5b
c000d1d1:	75 21                	jne    c000d1f4 <VgaText::putchar(char)+0x32>
c000d1d3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1da:	74 28                	je     c000d204 <VgaText::putchar(char)+0x42>
c000d1dc:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1e5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ef:	e9 e2 00 00 00       	jmp    c000d2d6 <VgaText::putchar(char)+0x114>
c000d1f4:	3c 1b                	cmp    al,0x1b
c000d1f6:	75 0c                	jne    c000d204 <VgaText::putchar(char)+0x42>
c000d1f8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d1ff:	e9 d2 00 00 00       	jmp    c000d2d6 <VgaText::putchar(char)+0x114>
c000d204:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d20a:	84 c9                	test   cl,cl
c000d20c:	0f 84 ab 00 00 00    	je     c000d2bd <VgaText::putchar(char)+0xfb>
c000d212:	8d 50 c0             	lea    edx,[eax-0x40]
c000d215:	80 fa 3e             	cmp    dl,0x3e
c000d218:	0f 87 82 00 00 00    	ja     c000d2a0 <VgaText::putchar(char)+0xde>
c000d21e:	3c 6d                	cmp    al,0x6d
c000d220:	75 4d                	jne    c000d26f <VgaText::putchar(char)+0xad>
c000d222:	31 f6                	xor    esi,esi
c000d224:	31 d2                	xor    edx,edx
c000d226:	31 c0                	xor    eax,eax
c000d228:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d22e:	7e 30                	jle    c000d260 <VgaText::putchar(char)+0x9e>
c000d230:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d238:	80 fa 3b             	cmp    dl,0x3b
c000d23b:	75 17                	jne    c000d254 <VgaText::putchar(char)+0x92>
c000d23d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d241:	50                   	push   eax
c000d242:	53                   	push   ebx
c000d243:	e8 fc f5 ff ff       	call   c000c844 <VgaText::doANSI_SGR(int)>
c000d248:	59                   	pop    ecx
c000d249:	31 d2                	xor    edx,edx
c000d24b:	58                   	pop    eax
c000d24c:	31 c0                	xor    eax,eax
c000d24e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d252:	eb 09                	jmp    c000d25d <VgaText::putchar(char)+0x9b>
c000d254:	6b c0 0a             	imul   eax,eax,0xa
c000d257:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d25b:	88 ca                	mov    dl,cl
c000d25d:	46                   	inc    esi
c000d25e:	eb c8                	jmp    c000d228 <VgaText::putchar(char)+0x66>
c000d260:	84 d2                	test   dl,dl
c000d262:	74 31                	je     c000d295 <VgaText::putchar(char)+0xd3>
c000d264:	50                   	push   eax
c000d265:	53                   	push   ebx
c000d266:	e8 d9 f5 ff ff       	call   c000c844 <VgaText::doANSI_SGR(int)>
c000d26b:	58                   	pop    eax
c000d26c:	5a                   	pop    edx
c000d26d:	eb 26                	jmp    c000d295 <VgaText::putchar(char)+0xd3>
c000d26f:	3c 4a                	cmp    al,0x4a
c000d271:	75 22                	jne    c000d295 <VgaText::putchar(char)+0xd3>
c000d273:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d27a:	75 19                	jne    c000d295 <VgaText::putchar(char)+0xd3>
c000d27c:	83 ec 0c             	sub    esp,0xc
c000d27f:	53                   	push   ebx
c000d280:	e8 d9 fe ff ff       	call   c000d15e <VgaText::clearScreen()>
c000d285:	83 c4 0c             	add    esp,0xc
c000d288:	6a 00                	push   0x0
c000d28a:	6a 00                	push   0x0
c000d28c:	53                   	push   ebx
c000d28d:	e8 ba f7 ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d29e:	eb 36                	jmp    c000d2d6 <VgaText::putchar(char)+0x114>
c000d2a0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2a6:	83 fa 0e             	cmp    edx,0xe
c000d2a9:	7f 2b                	jg     c000d2d6 <VgaText::putchar(char)+0x114>
c000d2ab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2ae:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2b4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2bb:	eb 19                	jmp    c000d2d6 <VgaText::putchar(char)+0x114>
c000d2bd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2c3:	0f be c0             	movsx  eax,al
c000d2c6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2cc:	50                   	push   eax
c000d2cd:	53                   	push   ebx
c000d2ce:	e8 ab fa ff ff       	call   c000cd7e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	83 c4 14             	add    esp,0x14
c000d2d9:	5b                   	pop    ebx
c000d2da:	5e                   	pop    esi
c000d2db:	c3                   	ret    

c000d2dc <VgaText::puts(char const*)>:
c000d2dc:	53                   	push   ebx
c000d2dd:	83 ec 08             	sub    esp,0x8
c000d2e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2e7:	84 c0                	test   al,al
c000d2e9:	74 12                	je     c000d2fd <VgaText::puts(char const*)+0x21>
c000d2eb:	43                   	inc    ebx
c000d2ec:	51                   	push   ecx
c000d2ed:	51                   	push   ecx
c000d2ee:	50                   	push   eax
c000d2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f3:	e8 ca fe ff ff       	call   c000d1c2 <VgaText::putchar(char)>
c000d2f8:	83 c4 10             	add    esp,0x10
c000d2fb:	eb e7                	jmp    c000d2e4 <VgaText::puts(char const*)+0x8>
c000d2fd:	83 c4 08             	add    esp,0x8
c000d300:	5b                   	pop    ebx
c000d301:	c3                   	ret    

c000d302 <VgaText::putx(unsigned int)>:
c000d302:	57                   	push   edi
c000d303:	b9 11 00 00 00       	mov    ecx,0x11
c000d308:	56                   	push   esi
c000d309:	be fa ff 01 c0       	mov    esi,0xc001fffa
c000d30e:	53                   	push   ebx
c000d30f:	83 ec 20             	sub    esp,0x20
c000d312:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d316:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d31a:	fc                   	cld    
c000d31b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d31d:	be 08 00 00 00       	mov    esi,0x8
c000d322:	50                   	push   eax
c000d323:	50                   	push   eax
c000d324:	89 d8                	mov    eax,ebx
c000d326:	c1 e3 04             	shl    ebx,0x4
c000d329:	c1 e8 1c             	shr    eax,0x1c
c000d32c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d331:	50                   	push   eax
c000d332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d336:	e8 87 fe ff ff       	call   c000d1c2 <VgaText::putchar(char)>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	4e                   	dec    esi
c000d33f:	75 e1                	jne    c000d322 <VgaText::putx(unsigned int)+0x20>
c000d341:	83 c4 20             	add    esp,0x20
c000d344:	5b                   	pop    ebx
c000d345:	5e                   	pop    esi
c000d346:	5f                   	pop    edi
c000d347:	c3                   	ret    

c000d348 <VgaText::VgaText(char const*)>:
c000d348:	57                   	push   edi
c000d349:	56                   	push   esi
c000d34a:	53                   	push   ebx
c000d34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34f:	83 ec 08             	sub    esp,0x8
c000d352:	6a 00                	push   0x0
c000d354:	50                   	push   eax
c000d355:	e8 e0 05 00 00       	call   c000d93a <UnixFile::UnixFile(int)>
c000d35a:	83 c4 10             	add    esp,0x10
c000d35d:	ba 60 00 02 c0       	mov    edx,0xc0020060
c000d362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d366:	89 10                	mov    DWORD PTR [eax],edx
c000d368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d36c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d388:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d393:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ac:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ba:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3d6:	bb 00 32 02 c0       	mov    ebx,0xc0023200
c000d3db:	b8 08 00 00 00       	mov    eax,0x8
c000d3e0:	fc                   	cld    
c000d3e1:	89 d7                	mov    edi,edx
c000d3e3:	89 de                	mov    esi,ebx
c000d3e5:	89 c1                	mov    ecx,eax
c000d3e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ed:	05 1e 10 00 00       	add    eax,0x101e
c000d3f2:	83 ec 08             	sub    esp,0x8
c000d3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f9:	50                   	push   eax
c000d3fa:	e8 a8 32 ff ff       	call   c00006a7 <strcpy>
c000d3ff:	83 c4 10             	add    esp,0x10
c000d402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d406:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d414:	83 c0 0c             	add    eax,0xc
c000d417:	83 ec 04             	sub    esp,0x4
c000d41a:	68 00 0f 00 00       	push   0xf00
c000d41f:	6a 00                	push   0x0
c000d421:	50                   	push   eax
c000d422:	e8 e1 31 ff ff       	call   c0000608 <memset>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 ec 04             	sub    esp,0x4
c000d42d:	6a 00                	push   0x0
c000d42f:	6a 07                	push   0x7
c000d431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d435:	e8 c2 f4 ff ff       	call   c000c8fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d43a:	83 c4 10             	add    esp,0x10
c000d43d:	83 ec 08             	sub    esp,0x8
c000d440:	6a 02                	push   0x2
c000d442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d446:	e8 49 fa ff ff       	call   c000ce94 <VgaText::setCursorHeight(int)>
c000d44b:	83 c4 10             	add    esp,0x10
c000d44e:	83 ec 04             	sub    esp,0x4
c000d451:	6a 00                	push   0x0
c000d453:	6a 00                	push   0x0
c000d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d459:	e8 ee f5 ff ff       	call   c000ca4c <VgaText::setCursor(int, int)>
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	83 ec 08             	sub    esp,0x8
c000d464:	6a 01                	push   0x1
c000d466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d46a:	e8 8b f3 ff ff       	call   c000c7fa <VgaText::showCursor(bool)>
c000d46f:	83 c4 10             	add    esp,0x10
c000d472:	83 ec 08             	sub    esp,0x8
c000d475:	6a 01                	push   0x1
c000d477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47b:	e8 8a f3 ff ff       	call   c000c80a <VgaText::disableBlink(bool)>
c000d480:	83 c4 10             	add    esp,0x10
c000d483:	83 ec 0c             	sub    esp,0xc
c000d486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48a:	e8 cf fc ff ff       	call   c000d15e <VgaText::clearScreen()>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d496:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a1:	05 9e 10 00 00       	add    eax,0x109e
c000d4a6:	83 ec 04             	sub    esp,0x4
c000d4a9:	68 96 00 00 00       	push   0x96
c000d4ae:	6a 00                	push   0x0
c000d4b0:	50                   	push   eax
c000d4b1:	e8 52 31 ff ff       	call   c0000608 <memset>
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4bd:	05 34 11 00 00       	add    eax,0x1134
c000d4c2:	83 ec 04             	sub    esp,0x4
c000d4c5:	68 2c 01 00 00       	push   0x12c
c000d4ca:	6a 00                	push   0x0
c000d4cc:	50                   	push   eax
c000d4cd:	e8 36 31 ff ff       	call   c0000608 <memset>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	90                   	nop
c000d4d6:	5b                   	pop    ebx
c000d4d7:	5e                   	pop    esi
c000d4d8:	5f                   	pop    edi
c000d4d9:	c3                   	ret    

c000d4da <VgaText::receiveKey(unsigned char)>:
c000d4da:	55                   	push   ebp
c000d4db:	57                   	push   edi
c000d4dc:	56                   	push   esi
c000d4dd:	53                   	push   ebx
c000d4de:	83 ec 1c             	sub    esp,0x1c
c000d4e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4e9:	84 db                	test   bl,bl
c000d4eb:	0f 84 c9 00 00 00    	je     c000d5ba <VgaText::receiveKey(unsigned char)+0xe0>
c000d4f1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d4f7:	80 fb 08             	cmp    bl,0x8
c000d4fa:	75 2c                	jne    c000d528 <VgaText::receiveKey(unsigned char)+0x4e>
c000d4fc:	83 ec 0c             	sub    esp,0xc
c000d4ff:	57                   	push   edi
c000d500:	e8 20 31 ff ff       	call   c0000625 <strlen>
c000d505:	83 c4 10             	add    esp,0x10
c000d508:	85 c0                	test   eax,eax
c000d50a:	74 41                	je     c000d54d <VgaText::receiveKey(unsigned char)+0x73>
c000d50c:	50                   	push   eax
c000d50d:	50                   	push   eax
c000d50e:	6a 08                	push   0x8
c000d510:	56                   	push   esi
c000d511:	e8 ac fc ff ff       	call   c000d1c2 <VgaText::putchar(char)>
c000d516:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d519:	e8 07 31 ff ff       	call   c0000625 <strlen>
c000d51e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d526:	eb 22                	jmp    c000d54a <VgaText::receiveKey(unsigned char)+0x70>
c000d528:	0f be c3             	movsx  eax,bl
c000d52b:	52                   	push   edx
c000d52c:	52                   	push   edx
c000d52d:	50                   	push   eax
c000d52e:	56                   	push   esi
c000d52f:	e8 8e fc ff ff       	call   c000d1c2 <VgaText::putchar(char)>
c000d534:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d538:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d53d:	59                   	pop    ecx
c000d53e:	5d                   	pop    ebp
c000d53f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d543:	50                   	push   eax
c000d544:	57                   	push   edi
c000d545:	e8 14 32 ff ff       	call   c000075e <strcat>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d554:	75 05                	jne    c000d55b <VgaText::receiveKey(unsigned char)+0x81>
c000d556:	80 fb 0a             	cmp    bl,0xa
c000d559:	75 53                	jne    c000d5ae <VgaText::receiveKey(unsigned char)+0xd4>
c000d55b:	83 ec 0c             	sub    esp,0xc
c000d55e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d564:	53                   	push   ebx
c000d565:	e8 bb 30 ff ff       	call   c0000625 <strlen>
c000d56a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d56d:	89 c5                	mov    ebp,eax
c000d56f:	e8 b1 30 ff ff       	call   c0000625 <strlen>
c000d574:	83 c4 10             	add    esp,0x10
c000d577:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d57b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d580:	76 10                	jbe    c000d592 <VgaText::receiveKey(unsigned char)+0xb8>
c000d582:	83 ec 0c             	sub    esp,0xc
c000d585:	68 0b 00 02 c0       	push   0xc002000b
c000d58a:	e8 cb 73 00 00       	call   c001495a <Krnl::panic(char const*)>
c000d58f:	83 c4 10             	add    esp,0x10
c000d592:	50                   	push   eax
c000d593:	50                   	push   eax
c000d594:	57                   	push   edi
c000d595:	53                   	push   ebx
c000d596:	e8 c3 31 ff ff       	call   c000075e <strcat>
c000d59b:	83 c4 0c             	add    esp,0xc
c000d59e:	68 96 00 00 00       	push   0x96
c000d5a3:	6a 00                	push   0x0
c000d5a5:	57                   	push   edi
c000d5a6:	e8 5d 30 ff ff       	call   c0000608 <memset>
c000d5ab:	83 c4 10             	add    esp,0x10
c000d5ae:	83 ec 0c             	sub    esp,0xc
c000d5b1:	56                   	push   esi
c000d5b2:	e8 d5 f9 ff ff       	call   c000cf8c <VgaText::doUpdate()>
c000d5b7:	83 c4 10             	add    esp,0x10
c000d5ba:	83 c4 1c             	add    esp,0x1c
c000d5bd:	5b                   	pop    ebx
c000d5be:	5e                   	pop    esi
c000d5bf:	5f                   	pop    edi
c000d5c0:	5d                   	pop    ebp
c000d5c1:	c3                   	ret    

c000d5c2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5c2:	55                   	push   ebp
c000d5c3:	57                   	push   edi
c000d5c4:	56                   	push   esi
c000d5c5:	53                   	push   ebx
c000d5c6:	83 ec 0c             	sub    esp,0xc
c000d5c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5cd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5d5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5dc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5df:	39 eb                	cmp    ebx,ebp
c000d5e1:	74 13                	je     c000d5f6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5e3:	43                   	inc    ebx
c000d5e4:	50                   	push   eax
c000d5e5:	50                   	push   eax
c000d5e6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5ea:	50                   	push   eax
c000d5eb:	56                   	push   esi
c000d5ec:	e8 d1 fb ff ff       	call   c000d1c2 <VgaText::putchar(char)>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	eb e9                	jmp    c000d5df <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d5f6:	83 ec 0c             	sub    esp,0xc
c000d5f9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d600:	56                   	push   esi
c000d601:	e8 86 f9 ff ff       	call   c000cf8c <VgaText::doUpdate()>
c000d606:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d60a:	89 38                	mov    DWORD PTR [eax],edi
c000d60c:	83 c4 1c             	add    esp,0x1c
c000d60f:	31 c0                	xor    eax,eax
c000d611:	5b                   	pop    ebx
c000d612:	5e                   	pop    esi
c000d613:	5f                   	pop    edi
c000d614:	5d                   	pop    ebp
c000d615:	c3                   	ret    

c000d616 <newTerminal(char*)>:
c000d616:	83 ec 28             	sub    esp,0x28
c000d619:	68 60 12 00 00       	push   0x1260
c000d61e:	e8 b3 15 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000d623:	5a                   	pop    edx
c000d624:	59                   	pop    ecx
c000d625:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d629:	50                   	push   eax
c000d62a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d62e:	e8 15 fd ff ff       	call   c000d348 <VgaText::VgaText(char const*)>
c000d633:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d637:	83 c4 2c             	add    esp,0x2c
c000d63a:	c3                   	ret    
c000d63b:	90                   	nop

c000d63c <TSS::TSS()>:
c000d63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d640:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d647:	90                   	nop
c000d648:	c3                   	ret    
c000d649:	90                   	nop

c000d64a <TSS::setESP(unsigned long)>:
c000d64a:	55                   	push   ebp
c000d64b:	89 e5                	mov    ebp,esp
c000d64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d653:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d656:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d659:	90                   	nop
c000d65a:	5d                   	pop    ebp
c000d65b:	c3                   	ret    

c000d65c <TSS::flush()>:
c000d65c:	55                   	push   ebp
c000d65d:	89 e5                	mov    ebp,esp
c000d65f:	83 ec 10             	sub    esp,0x10
c000d662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d665:	8b 00                	mov    eax,DWORD PTR [eax]
c000d667:	83 c8 03             	or     eax,0x3
c000d66a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d66e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d672:	66 89 d0             	mov    ax,dx
c000d675:	0f 00 d8             	ltr    ax
c000d678:	90                   	nop
c000d679:	c9                   	leave  
c000d67a:	c3                   	ret    
c000d67b:	90                   	nop

c000d67c <TSS::setup(unsigned long, unsigned long)>:
c000d67c:	55                   	push   ebp
c000d67d:	89 e5                	mov    ebp,esp
c000d67f:	53                   	push   ebx
c000d680:	83 ec 14             	sub    esp,0x14
c000d683:	83 ec 0c             	sub    esp,0xc
c000d686:	6a 68                	push   0x68
c000d688:	e8 91 e5 ff ff       	call   c000bc1e <malloc>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	89 c2                	mov    edx,eax
c000d692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d695:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d69e:	83 ec 04             	sub    esp,0x4
c000d6a1:	6a 68                	push   0x68
c000d6a3:	6a 00                	push   0x0
c000d6a5:	50                   	push   eax
c000d6a6:	e8 5d 2f ff ff       	call   c0000608 <memset>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6b4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f0:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d6f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6fc:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d708:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d70b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d714:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d717:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d720:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d72d:	e8 c3 0d 01 00       	call   c001e4f5 <CPU::readCR3()>
c000d732:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d73b:	83 ec 08             	sub    esp,0x8
c000d73e:	50                   	push   eax
c000d73f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d742:	50                   	push   eax
c000d743:	e8 ac dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	6a 68                	push   0x68
c000d750:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d753:	50                   	push   eax
c000d754:	e8 b7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d760:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d763:	83 e0 0f             	and    eax,0xf
c000d766:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d769:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d76c:	83 c8 40             	or     eax,0x40
c000d76f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d772:	e8 dd 64 00 00       	call   c0013c54 <thisCPU()>
c000d777:	05 78 01 00 00       	add    eax,0x178
c000d77c:	83 ec 04             	sub    esp,0x4
c000d77f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d782:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d785:	50                   	push   eax
c000d786:	e8 b9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	89 c2                	mov    edx,eax
c000d790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d793:	89 10                	mov    DWORD PTR [eax],edx
c000d795:	e8 ba 64 00 00       	call   c0013c54 <thisCPU()>
c000d79a:	05 78 01 00 00       	add    eax,0x178
c000d79f:	83 ec 0c             	sub    esp,0xc
c000d7a2:	50                   	push   eax
c000d7a3:	e8 e0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7a8:	83 c4 10             	add    esp,0x10
c000d7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7b0:	83 ec 08             	sub    esp,0x8
c000d7b3:	50                   	push   eax
c000d7b4:	68 74 00 02 c0       	push   0xc0020074
c000d7b9:	e8 07 15 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7c9:	c9                   	leave  
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7cc:	55                   	push   ebp
c000d7cd:	57                   	push   edi
c000d7ce:	56                   	push   esi
c000d7cf:	53                   	push   ebx
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7de:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7e2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d7e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7ea:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d7ef:	75 08                	jne    c000d7f9 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d7f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d7f7:	eb 5e                	jmp    c000d857 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d7f9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d7fe:	75 3d                	jne    c000d83d <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d800:	83 ec 0c             	sub    esp,0xc
c000d803:	68 92 00 02 c0       	push   0xc0020092
c000d808:	e8 b8 14 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000d80d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d812:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d815:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d81b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d81d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d821:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d825:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d829:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d82d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d831:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d834:	83 c4 1c             	add    esp,0x1c
c000d837:	5b                   	pop    ebx
c000d838:	5e                   	pop    esi
c000d839:	5f                   	pop    edi
c000d83a:	5d                   	pop    ebp
c000d83b:	ff e0                	jmp    eax
c000d83d:	89 c2                	mov    edx,eax
c000d83f:	83 e2 fd             	and    edx,0xfffffffd
c000d842:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d848:	74 a7                	je     c000d7f1 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d84a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d84f:	83 e0 ef             	and    eax,0xffffffef
c000d852:	83 f8 08             	cmp    eax,0x8
c000d855:	76 9a                	jbe    c000d7f1 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d857:	83 c4 0c             	add    esp,0xc
c000d85a:	31 c0                	xor    eax,eax
c000d85c:	5b                   	pop    ebx
c000d85d:	5e                   	pop    esi
c000d85e:	5f                   	pop    edi
c000d85f:	5d                   	pop    ebp
c000d860:	c3                   	ret    
c000d861:	90                   	nop

c000d862 <ReservedFilename::isAtty()>:
c000d862:	83 ec 18             	sub    esp,0x18
c000d865:	68 9f 00 02 c0       	push   0xc002009f
c000d86a:	e8 56 14 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	31 c0                	xor    eax,eax
c000d874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d878:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d87f:	75 12                	jne    c000d893 <ReservedFilename::isAtty()+0x31>
c000d881:	83 ec 0c             	sub    esp,0xc
c000d884:	68 b5 00 02 c0       	push   0xc00200b5
c000d889:	e8 37 14 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000d88e:	83 c4 10             	add    esp,0x10
c000d891:	b0 01                	mov    al,0x1
c000d893:	83 c4 0c             	add    esp,0xc
c000d896:	c3                   	ret    
c000d897:	90                   	nop

c000d898 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d898:	55                   	push   ebp
c000d899:	57                   	push   edi
c000d89a:	56                   	push   esi
c000d89b:	53                   	push   ebx
c000d89c:	83 ec 0c             	sub    esp,0xc
c000d89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d8a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8ae:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8b2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8b6:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d8bb:	75 08                	jne    c000d8c5 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8c3:	eb 63                	jmp    c000d928 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8c5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d8ca:	75 3d                	jne    c000d909 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	68 c8 00 02 c0       	push   0xc00200c8
c000d8d4:	e8 ec 13 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000d8d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8e1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8e9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8ed:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8f1:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8f5:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8fd:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d900:	83 c4 1c             	add    esp,0x1c
c000d903:	5b                   	pop    ebx
c000d904:	5e                   	pop    esi
c000d905:	5f                   	pop    edi
c000d906:	5d                   	pop    ebp
c000d907:	ff e0                	jmp    eax
c000d909:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d90e:	75 04                	jne    c000d914 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d910:	89 33                	mov    DWORD PTR [ebx],esi
c000d912:	eb 14                	jmp    c000d928 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d914:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d919:	74 a2                	je     c000d8bd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d91b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d920:	83 e0 ef             	and    eax,0xffffffef
c000d923:	83 f8 08             	cmp    eax,0x8
c000d926:	76 95                	jbe    c000d8bd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d928:	83 c4 0c             	add    esp,0xc
c000d92b:	31 c0                	xor    eax,eax
c000d92d:	5b                   	pop    ebx
c000d92e:	5e                   	pop    esi
c000d92f:	5f                   	pop    edi
c000d930:	5d                   	pop    ebp
c000d931:	c3                   	ret    

c000d932 <UnixFile::getFileDescriptor()>:
c000d932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d939:	c3                   	ret    

c000d93a <UnixFile::UnixFile(int)>:
c000d93a:	53                   	push   ebx
c000d93b:	83 ec 18             	sub    esp,0x18
c000d93e:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000d943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d947:	89 10                	mov    DWORD PTR [eax],edx
c000d949:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d951:	0f 8f 4d 01 00 00    	jg     c000daa4 <UnixFile::UnixFile(int)+0x16a>
c000d957:	a1 00 26 02 c0       	mov    eax,ds:0xc0022600
c000d95c:	8d 50 01             	lea    edx,[eax+0x1]
c000d95f:	89 15 00 26 02 c0    	mov    DWORD PTR ds:0xc0022600,edx
c000d965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d969:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d96c:	83 ec 08             	sub    esp,0x8
c000d96f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d973:	68 b8 32 02 c0       	push   0xc00232b8
c000d978:	e8 ed 0b 01 00       	call   c001e56a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	a0 b4 32 02 c0       	mov    al,ds:0xc00232b4
c000d985:	83 f0 01             	xor    eax,0x1
c000d988:	84 c0                	test   al,al
c000d98a:	0f 84 15 01 00 00    	je     c000daa5 <UnixFile::UnixFile(int)+0x16b>
c000d990:	c6 05 b4 32 02 c0 01 	mov    BYTE PTR ds:0xc00232b4,0x1
c000d997:	83 ec 0c             	sub    esp,0xc
c000d99a:	6a 0c                	push   0xc
c000d99c:	e8 35 12 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000d9a1:	83 c4 10             	add    esp,0x10
c000d9a4:	89 c3                	mov    ebx,eax
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	68 03 ff ff 0f       	push   0xfffff03
c000d9ae:	53                   	push   ebx
c000d9af:	e8 f6 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	89 1d ac 32 02 c0    	mov    DWORD PTR ds:0xc00232ac,ebx
c000d9bd:	83 ec 0c             	sub    esp,0xc
c000d9c0:	6a 0c                	push   0xc
c000d9c2:	e8 0f 12 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	89 c3                	mov    ebx,eax
c000d9cc:	83 ec 08             	sub    esp,0x8
c000d9cf:	68 01 ff ff 0f       	push   0xfffff01
c000d9d4:	53                   	push   ebx
c000d9d5:	e8 d0 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 1d b0 32 02 c0    	mov    DWORD PTR ds:0xc00232b0,ebx
c000d9e3:	83 ec 0c             	sub    esp,0xc
c000d9e6:	6a 0c                	push   0xc
c000d9e8:	e8 e9 11 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000d9ed:	83 c4 10             	add    esp,0x10
c000d9f0:	89 c3                	mov    ebx,eax
c000d9f2:	83 ec 08             	sub    esp,0x8
c000d9f5:	68 00 ff ff 0f       	push   0xfffff00
c000d9fa:	53                   	push   ebx
c000d9fb:	e8 aa 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	89 1d a4 32 02 c0    	mov    DWORD PTR ds:0xc00232a4,ebx
c000da09:	83 ec 0c             	sub    esp,0xc
c000da0c:	6a 0c                	push   0xc
c000da0e:	e8 c3 11 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	89 c3                	mov    ebx,eax
c000da18:	83 ec 08             	sub    esp,0x8
c000da1b:	68 02 ff ff 0f       	push   0xfffff02
c000da20:	53                   	push   ebx
c000da21:	e8 84 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000da26:	83 c4 10             	add    esp,0x10
c000da29:	89 1d a8 32 02 c0    	mov    DWORD PTR ds:0xc00232a8,ebx
c000da2f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da37:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da3c:	7f 67                	jg     c000daa5 <UnixFile::UnixFile(int)+0x16b>
c000da3e:	83 ec 0c             	sub    esp,0xc
c000da41:	6a 0c                	push   0xc
c000da43:	e8 8e 11 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000da48:	83 c4 10             	add    esp,0x10
c000da4b:	89 c3                	mov    ebx,eax
c000da4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da51:	05 10 ff ff 0f       	add    eax,0xfffff10
c000da56:	83 ec 08             	sub    esp,0x8
c000da59:	50                   	push   eax
c000da5a:	53                   	push   ebx
c000da5b:	e8 4a 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000da60:	83 c4 10             	add    esp,0x10
c000da63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da67:	89 1c 85 80 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd80],ebx
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	6a 0c                	push   0xc
c000da73:	e8 5e 11 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000da78:	83 c4 10             	add    esp,0x10
c000da7b:	89 c3                	mov    ebx,eax
c000da7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da81:	05 20 ff ff 0f       	add    eax,0xfffff20
c000da86:	83 ec 08             	sub    esp,0x8
c000da89:	50                   	push   eax
c000da8a:	53                   	push   ebx
c000da8b:	e8 1a 00 00 00       	call   c000daaa <ReservedFilename::ReservedFilename(int)>
c000da90:	83 c4 10             	add    esp,0x10
c000da93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da97:	89 1c 85 40 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcdc0],ebx
c000da9e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000daa2:	eb 93                	jmp    c000da37 <UnixFile::UnixFile(int)+0xfd>
c000daa4:	90                   	nop
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	5b                   	pop    ebx
c000daa9:	c3                   	ret    

c000daaa <ReservedFilename::ReservedFilename(int)>:
c000daaa:	83 ec 0c             	sub    esp,0xc
c000daad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab1:	83 ec 08             	sub    esp,0x8
c000dab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab8:	50                   	push   eax
c000dab9:	e8 7c fe ff ff       	call   c000d93a <UnixFile::UnixFile(int)>
c000dabe:	83 c4 10             	add    esp,0x10
c000dac1:	ba 00 02 02 c0       	mov    edx,0xc0020200
c000dac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daca:	89 10                	mov    DWORD PTR [eax],edx
c000dacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dad4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad7:	90                   	nop
c000dad8:	83 c4 0c             	add    esp,0xc
c000dadb:	c3                   	ret    

c000dadc <UnixFile::~UnixFile()>:
c000dadc:	83 ec 1c             	sub    esp,0x1c
c000dadf:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000dae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae8:	89 10                	mov    DWORD PTR [eax],edx
c000daea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daf1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000daf6:	7f 73                	jg     c000db6b <UnixFile::~UnixFile()+0x8f>
c000daf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	68 b8 32 02 c0       	push   0xc00232b8
c000db08:	e8 31 0b 01 00       	call   c001e63e <LinkedList<UnixFile>::getFirstElement()>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db14:	83 ec 0c             	sub    esp,0xc
c000db17:	68 b8 32 02 c0       	push   0xc00232b8
c000db1c:	e8 25 0b 01 00       	call   c001e646 <LinkedList<UnixFile>::removeFirst()>
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db2c:	74 40                	je     c000db6e <UnixFile::~UnixFile()+0x92>
c000db2e:	83 ec 08             	sub    esp,0x8
c000db31:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db35:	68 b8 32 02 c0       	push   0xc00232b8
c000db3a:	e8 2b 0a 01 00       	call   c001e56a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db46:	8d 50 01             	lea    edx,[eax+0x1]
c000db49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db4d:	3d 88 13 00 00       	cmp    eax,0x1388
c000db52:	0f 94 c0             	sete   al
c000db55:	84 c0                	test   al,al
c000db57:	74 a7                	je     c000db00 <UnixFile::~UnixFile()+0x24>
c000db59:	83 ec 0c             	sub    esp,0xc
c000db5c:	68 bc 01 02 c0       	push   0xc00201bc
c000db61:	e8 f4 6d 00 00       	call   c001495a <Krnl::panic(char const*)>
c000db66:	83 c4 10             	add    esp,0x10
c000db69:	eb 95                	jmp    c000db00 <UnixFile::~UnixFile()+0x24>
c000db6b:	90                   	nop
c000db6c:	eb 01                	jmp    c000db6f <UnixFile::~UnixFile()+0x93>
c000db6e:	90                   	nop
c000db6f:	90                   	nop
c000db70:	83 c4 1c             	add    esp,0x1c
c000db73:	c3                   	ret    

c000db74 <UnixFile::~UnixFile()>:
c000db74:	83 ec 0c             	sub    esp,0xc
c000db77:	83 ec 0c             	sub    esp,0xc
c000db7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7e:	e8 59 ff ff ff       	call   c000dadc <UnixFile::~UnixFile()>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	83 ec 08             	sub    esp,0x8
c000db89:	6a 0c                	push   0xc
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	e8 51 10 00 00       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000db94:	83 c4 10             	add    esp,0x10
c000db97:	83 c4 0c             	add    esp,0xc
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <ReservedFilename::~ReservedFilename()>:
c000db9c:	83 ec 0c             	sub    esp,0xc
c000db9f:	ba 00 02 02 c0       	mov    edx,0xc0020200
c000dba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba8:	89 10                	mov    DWORD PTR [eax],edx
c000dbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbae:	83 ec 0c             	sub    esp,0xc
c000dbb1:	50                   	push   eax
c000dbb2:	e8 25 ff ff ff       	call   c000dadc <UnixFile::~UnixFile()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	90                   	nop
c000dbbb:	83 c4 0c             	add    esp,0xc
c000dbbe:	c3                   	ret    
c000dbbf:	90                   	nop

c000dbc0 <ReservedFilename::~ReservedFilename()>:
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	83 ec 0c             	sub    esp,0xc
c000dbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbca:	e8 cd ff ff ff       	call   c000db9c <ReservedFilename::~ReservedFilename()>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	83 ec 08             	sub    esp,0x8
c000dbd5:	6a 0c                	push   0xc
c000dbd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdb:	e8 05 10 00 00       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	83 c4 0c             	add    esp,0xc
c000dbe6:	c3                   	ret    

c000dbe7 <getFromFileDescriptor(int)>:
c000dbe7:	53                   	push   ebx
c000dbe8:	83 ec 08             	sub    esp,0x8
c000dbeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbef:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dbf5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dbfb:	7f 33                	jg     c000dc30 <getFromFileDescriptor(int)+0x49>
c000dbfd:	83 ec 0c             	sub    esp,0xc
c000dc00:	68 b8 32 02 c0       	push   0xc00232b8
c000dc05:	e8 34 0a 01 00       	call   c001e63e <LinkedList<UnixFile>::getFirstElement()>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	85 c0                	test   eax,eax
c000dc0f:	75 07                	jne    c000dc18 <getFromFileDescriptor(int)+0x31>
c000dc11:	31 c0                	xor    eax,eax
c000dc13:	e9 98 00 00 00       	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc18:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc1b:	0f 84 8f 00 00 00    	je     c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc21:	52                   	push   edx
c000dc22:	52                   	push   edx
c000dc23:	50                   	push   eax
c000dc24:	68 b8 32 02 c0       	push   0xc00232b8
c000dc29:	e8 ba 0a 01 00       	call   c001e6e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc2e:	eb da                	jmp    c000dc0a <getFromFileDescriptor(int)+0x23>
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	68 d5 00 02 c0       	push   0xc00200d5
c000dc38:	e8 88 10 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	a1 ac 32 02 c0       	mov    eax,ds:0xc00232ac
c000dc45:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dc4b:	74 63                	je     c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc4d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dc53:	75 17                	jne    c000dc6c <getFromFileDescriptor(int)+0x85>
c000dc55:	83 ec 0c             	sub    esp,0xc
c000dc58:	68 fc 00 02 c0       	push   0xc00200fc
c000dc5d:	e8 63 10 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000dc62:	a1 b0 32 02 c0       	mov    eax,ds:0xc00232b0
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	eb 44                	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc6c:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c000dc71:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dc77:	74 37                	je     c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc79:	a1 a4 32 02 c0       	mov    eax,ds:0xc00232a4
c000dc7e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dc84:	74 2a                	je     c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc86:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dc8c:	83 f8 08             	cmp    eax,0x8
c000dc8f:	77 09                	ja     c000dc9a <getFromFileDescriptor(int)+0xb3>
c000dc91:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000dc98:	eb 16                	jmp    c000dcb0 <getFromFileDescriptor(int)+0xc9>
c000dc9a:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dca0:	83 fb 08             	cmp    ebx,0x8
c000dca3:	0f 87 68 ff ff ff    	ja     c000dc11 <getFromFileDescriptor(int)+0x2a>
c000dca9:	8b 04 9d 40 32 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcdc0]
c000dcb0:	83 c4 08             	add    esp,0x8
c000dcb3:	5b                   	pop    ebx
c000dcb4:	c3                   	ret    

c000dcb5 <__static_initialization_and_destruction_0(int, int)>:
c000dcb5:	83 ec 0c             	sub    esp,0xc
c000dcb8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dcbd:	75 34                	jne    c000dcf3 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcbf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dcc7:	75 2a                	jne    c000dcf3 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcc9:	83 ec 0c             	sub    esp,0xc
c000dccc:	68 b8 32 02 c0       	push   0xc00232b8
c000dcd1:	e8 3c 08 01 00       	call   c001e512 <LinkedList<UnixFile>::LinkedList()>
c000dcd6:	83 c4 10             	add    esp,0x10
c000dcd9:	83 ec 04             	sub    esp,0x4
c000dcdc:	68 88 25 02 c0       	push   0xc0022588
c000dce1:	68 b8 32 02 c0       	push   0xc00232b8
c000dce6:	68 10 e5 01 c0       	push   0xc001e510
c000dceb:	e8 71 0e 00 00       	call   c000eb61 <__cxa_atexit>
c000dcf0:	83 c4 10             	add    esp,0x10
c000dcf3:	90                   	nop
c000dcf4:	83 c4 0c             	add    esp,0xc
c000dcf7:	c3                   	ret    

c000dcf8 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	83 ec 08             	sub    esp,0x8
c000dcfe:	68 ff ff 00 00       	push   0xffff
c000dd03:	6a 01                	push   0x1
c000dd05:	e8 ab ff ff ff       	call   c000dcb5 <__static_initialization_and_destruction_0(int, int)>
c000dd0a:	83 c4 10             	add    esp,0x10
c000dd0d:	83 c4 0c             	add    esp,0xc
c000dd10:	c3                   	ret    
c000dd11:	90                   	nop

c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd12:	53                   	push   ebx
c000dd13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd1b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd21:	89 c8                	mov    eax,ecx
c000dd23:	d1 e8                	shr    eax,1
c000dd25:	03 05 08 26 02 c0    	add    eax,DWORD PTR ds:0xc0022608
c000dd2b:	83 e1 01             	and    ecx,0x1
c000dd2e:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd30:	75 09                	jne    c000dd3b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd32:	83 e2 f0             	and    edx,0xfffffff0
c000dd35:	09 da                	or     edx,ebx
c000dd37:	88 10                	mov    BYTE PTR [eax],dl
c000dd39:	5b                   	pop    ebx
c000dd3a:	c3                   	ret    
c000dd3b:	c1 e3 04             	shl    ebx,0x4
c000dd3e:	83 e2 0f             	and    edx,0xf
c000dd41:	09 da                	or     edx,ebx
c000dd43:	88 10                	mov    BYTE PTR [eax],dl
c000dd45:	5b                   	pop    ebx
c000dd46:	c3                   	ret    

c000dd47 <Virt::getPageState(unsigned long)>:
c000dd47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4b:	8b 0d 08 26 02 c0    	mov    ecx,DWORD PTR ds:0xc0022608
c000dd51:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd57:	89 d0                	mov    eax,edx
c000dd59:	d1 e8                	shr    eax,1
c000dd5b:	83 e2 01             	and    edx,0x1
c000dd5e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd61:	75 04                	jne    c000dd67 <Virt::getPageState(unsigned long)+0x20>
c000dd63:	83 e0 0f             	and    eax,0xf
c000dd66:	c3                   	ret    
c000dd67:	c0 e8 04             	shr    al,0x4
c000dd6a:	c3                   	ret    

c000dd6b <Virt::allocateKernelVirtualPages(int)>:
c000dd6b:	55                   	push   ebp
c000dd6c:	31 ed                	xor    ebp,ebp
c000dd6e:	57                   	push   edi
c000dd6f:	56                   	push   esi
c000dd70:	53                   	push   ebx
c000dd71:	31 db                	xor    ebx,ebx
c000dd73:	83 ec 1c             	sub    esp,0x1c
c000dd76:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd7a:	8b 3d 04 26 02 c0    	mov    edi,DWORD PTR ds:0xc0022604
c000dd80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dd85:	57                   	push   edi
c000dd86:	e8 bc ff ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000dd8b:	5a                   	pop    edx
c000dd8c:	84 c0                	test   al,al
c000dd8e:	75 3a                	jne    c000ddca <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dd90:	85 db                	test   ebx,ebx
c000dd92:	75 02                	jne    c000dd96 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dd94:	89 fd                	mov    ebp,edi
c000dd96:	43                   	inc    ebx
c000dd97:	39 f3                	cmp    ebx,esi
c000dd99:	74 5a                	je     c000ddf5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dd9b:	47                   	inc    edi
c000dd9c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dda2:	76 31                	jbe    c000ddd5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dda4:	c7 05 04 26 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022604,0xc8000
c000ddae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddb3:	75 28                	jne    c000dddd <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddb5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ddba:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ddbf:	57                   	push   edi
c000ddc0:	e8 82 ff ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000ddc5:	5a                   	pop    edx
c000ddc6:	84 c0                	test   al,al
c000ddc8:	74 c6                	je     c000dd90 <Virt::allocateKernelVirtualPages(int)+0x25>
c000ddca:	31 db                	xor    ebx,ebx
c000ddcc:	47                   	inc    edi
c000ddcd:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ddd3:	77 cf                	ja     c000dda4 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ddd5:	89 3d 04 26 02 c0    	mov    DWORD PTR ds:0xc0022604,edi
c000dddb:	eb a8                	jmp    c000dd85 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dddd:	83 ec 0c             	sub    esp,0xc
c000dde0:	68 14 02 02 c0       	push   0xc0020214
c000dde5:	e8 70 6b 00 00       	call   c001495a <Krnl::panic(char const*)>
c000ddea:	8b 3d 04 26 02 c0    	mov    edi,DWORD PTR ds:0xc0022604
c000ddf0:	83 c4 10             	add    esp,0x10
c000ddf3:	eb 90                	jmp    c000dd85 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ddf5:	89 2d 04 26 02 c0    	mov    DWORD PTR ds:0xc0022604,ebp
c000ddfb:	4b                   	dec    ebx
c000ddfc:	74 5f                	je     c000de5d <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ddfe:	85 f6                	test   esi,esi
c000de00:	74 3d                	je     c000de3f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de02:	89 e8                	mov    eax,ebp
c000de04:	31 db                	xor    ebx,ebx
c000de06:	8d 7e ff             	lea    edi,[esi-0x1]
c000de09:	eb 14                	jmp    c000de1f <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de0b:	6a 01                	push   0x1
c000de0d:	43                   	inc    ebx
c000de0e:	50                   	push   eax
c000de0f:	e8 fe fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de14:	58                   	pop    eax
c000de15:	39 f3                	cmp    ebx,esi
c000de17:	5a                   	pop    edx
c000de18:	74 25                	je     c000de3f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de1a:	a1 04 26 02 c0       	mov    eax,ds:0xc0022604
c000de1f:	8d 50 01             	lea    edx,[eax+0x1]
c000de22:	85 db                	test   ebx,ebx
c000de24:	89 15 04 26 02 c0    	mov    DWORD PTR ds:0xc0022604,edx
c000de2a:	74 20                	je     c000de4c <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de2c:	39 df                	cmp    edi,ebx
c000de2e:	75 db                	jne    c000de0b <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de30:	6a 03                	push   0x3
c000de32:	43                   	inc    ebx
c000de33:	50                   	push   eax
c000de34:	e8 d9 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de39:	59                   	pop    ecx
c000de3a:	39 f3                	cmp    ebx,esi
c000de3c:	58                   	pop    eax
c000de3d:	75 db                	jne    c000de1a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de3f:	83 c4 1c             	add    esp,0x1c
c000de42:	89 e8                	mov    eax,ebp
c000de44:	5b                   	pop    ebx
c000de45:	c1 e0 0c             	shl    eax,0xc
c000de48:	5e                   	pop    esi
c000de49:	5f                   	pop    edi
c000de4a:	5d                   	pop    ebp
c000de4b:	c3                   	ret    
c000de4c:	6a 02                	push   0x2
c000de4e:	bb 01 00 00 00       	mov    ebx,0x1
c000de53:	50                   	push   eax
c000de54:	e8 b9 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de59:	58                   	pop    eax
c000de5a:	5a                   	pop    edx
c000de5b:	eb bd                	jmp    c000de1a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de5d:	6a 04                	push   0x4
c000de5f:	8d 45 01             	lea    eax,[ebp+0x1]
c000de62:	55                   	push   ebp
c000de63:	a3 04 26 02 c0       	mov    ds:0xc0022604,eax
c000de68:	e8 a5 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de6d:	59                   	pop    ecx
c000de6e:	89 e8                	mov    eax,ebp
c000de70:	5b                   	pop    ebx
c000de71:	c1 e0 0c             	shl    eax,0xc
c000de74:	83 c4 1c             	add    esp,0x1c
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <Virt::virtualMemorySetup()>:
c000de7c:	53                   	push   ebx
c000de7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	6a 0f                	push   0xf
c000de87:	53                   	push   ebx
c000de88:	43                   	inc    ebx
c000de89:	e8 84 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de8e:	59                   	pop    ecx
c000de8f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000de95:	58                   	pop    eax
c000de96:	75 ed                	jne    c000de85 <Virt::virtualMemorySetup()+0x9>
c000de98:	83 ec 08             	sub    esp,0x8
c000de9b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dea0:	68 00 00 00 c8       	push   0xc8000000
c000dea5:	68 9b 03 02 c0       	push   0xc002039b
c000deaa:	e8 16 0e 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000deaf:	58                   	pop    eax
c000deb0:	5a                   	pop    edx
c000deb1:	68 00 f0 ff ef       	push   0xeffff000
c000deb6:	68 af 03 02 c0       	push   0xc00203af
c000debb:	e8 05 0e 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000dec0:	83 c4 10             	add    esp,0x10
c000dec3:	83 ec 08             	sub    esp,0x8
c000dec6:	6a 00                	push   0x0
c000dec8:	53                   	push   ebx
c000dec9:	43                   	inc    ebx
c000deca:	e8 43 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000ded8:	75 e9                	jne    c000dec3 <Virt::virtualMemorySetup()+0x47>
c000deda:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000dedf:	83 ec 08             	sub    esp,0x8
c000dee2:	6a 0f                	push   0xf
c000dee4:	53                   	push   ebx
c000dee5:	43                   	inc    ebx
c000dee6:	e8 27 fe ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deeb:	83 c4 10             	add    esp,0x10
c000deee:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000def4:	75 e9                	jne    c000dedf <Virt::virtualMemorySetup()+0x63>
c000def6:	83 c4 08             	add    esp,0x8
c000def9:	5b                   	pop    ebx
c000defa:	c3                   	ret    

c000defb <Virt::getAKernelVAS()>:
c000defb:	a1 c4 32 02 c0       	mov    eax,ds:0xc00232c4
c000df00:	c3                   	ret    

c000df01 <Virt::setupPageSwapping(int)>:
c000df01:	57                   	push   edi
c000df02:	56                   	push   esi
c000df03:	53                   	push   ebx
c000df04:	83 ec 1c             	sub    esp,0x1c
c000df07:	68 14 01 00 00       	push   0x114
c000df0c:	e8 c5 0c 00 00       	call   c000ebd6 <operator new(unsigned long)>
c000df11:	83 c4 0c             	add    esp,0xc
c000df14:	89 c6                	mov    esi,eax
c000df16:	ff 35 b4 45 02 c0    	push   DWORD PTR ds:0xc00245b4
c000df1c:	68 c3 03 02 c0       	push   0xc00203c3
c000df21:	50                   	push   eax
c000df22:	e8 cd 12 00 00       	call   c000f1f4 <File::File(char const*, Process*)>
c000df27:	89 34 24             	mov    DWORD PTR [esp],esi
c000df2a:	e8 a1 14 00 00       	call   c000f3d0 <File::unlink()>
c000df2f:	58                   	pop    eax
c000df30:	5a                   	pop    edx
c000df31:	6a 12                	push   0x12
c000df33:	56                   	push   esi
c000df34:	e8 1f 13 00 00       	call   c000f258 <File::open(FileOpenMode)>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	85 c0                	test   eax,eax
c000df3e:	0f 85 bf 00 00 00    	jne    c000e003 <Virt::setupPageSwapping(int)+0x102>
c000df44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df50:	c1 e3 08             	shl    ebx,0x8
c000df53:	83 ec 0c             	sub    esp,0xc
c000df56:	68 00 00 01 00       	push   0x10000
c000df5b:	e8 be dc ff ff       	call   c000bc1e <malloc>
c000df60:	83 c4 0c             	add    esp,0xc
c000df63:	89 c7                	mov    edi,eax
c000df65:	68 00 00 01 00       	push   0x10000
c000df6a:	6a 00                	push   0x0
c000df6c:	50                   	push   eax
c000df6d:	e8 96 26 ff ff       	call   c0000608 <memset>
c000df72:	83 c4 10             	add    esp,0x10
c000df75:	85 db                	test   ebx,ebx
c000df77:	79 03                	jns    c000df7c <Virt::setupPageSwapping(int)+0x7b>
c000df79:	83 c3 0f             	add    ebx,0xf
c000df7c:	c1 fb 04             	sar    ebx,0x4
c000df7f:	4b                   	dec    ebx
c000df80:	83 fb ff             	cmp    ebx,0xffffffff
c000df83:	74 4b                	je     c000dfd0 <Virt::setupPageSwapping(int)+0xcf>
c000df85:	83 ec 0c             	sub    esp,0xc
c000df88:	8b 06                	mov    eax,DWORD PTR [esi]
c000df8a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000df8e:	52                   	push   edx
c000df8f:	57                   	push   edi
c000df90:	6a 00                	push   0x0
c000df92:	68 00 00 01 00       	push   0x10000
c000df97:	56                   	push   esi
c000df98:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df9b:	83 c4 20             	add    esp,0x20
c000df9e:	85 c0                	test   eax,eax
c000dfa0:	75 4e                	jne    c000dff0 <Virt::setupPageSwapping(int)+0xef>
c000dfa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfa6:	3d 00 00 01 00       	cmp    eax,0x10000
c000dfab:	74 d2                	je     c000df7f <Virt::setupPageSwapping(int)+0x7e>
c000dfad:	83 ec 08             	sub    esp,0x8
c000dfb0:	4b                   	dec    ebx
c000dfb1:	50                   	push   eax
c000dfb2:	68 16 04 02 c0       	push   0xc0020416
c000dfb7:	e8 09 0d 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000dfbc:	c7 04 24 1f 04 02 c0 	mov    DWORD PTR [esp],0xc002041f
c000dfc3:	e8 92 69 00 00       	call   c001495a <Krnl::panic(char const*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	83 fb ff             	cmp    ebx,0xffffffff
c000dfce:	75 b5                	jne    c000df85 <Virt::setupPageSwapping(int)+0x84>
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	56                   	push   esi
c000dfd4:	e8 dd 12 00 00       	call   c000f2b6 <File::close()>
c000dfd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dfdc:	e8 5d dc ff ff       	call   c000bc3e <rfree>
c000dfe1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dfe4:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfe6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dfe9:	83 c4 20             	add    esp,0x20
c000dfec:	5b                   	pop    ebx
c000dfed:	5e                   	pop    esi
c000dfee:	5f                   	pop    edi
c000dfef:	c3                   	ret    
c000dff0:	83 ec 08             	sub    esp,0x8
c000dff3:	50                   	push   eax
c000dff4:	68 fe 03 02 c0       	push   0xc00203fe
c000dff9:	e8 c7 0c 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000dffe:	83 c4 10             	add    esp,0x10
c000e001:	eb 9f                	jmp    c000dfa2 <Virt::setupPageSwapping(int)+0xa1>
c000e003:	83 ec 08             	sub    esp,0x8
c000e006:	50                   	push   eax
c000e007:	68 da 03 02 c0       	push   0xc00203da
c000e00c:	e8 b4 0c 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000e011:	c7 04 24 e3 03 02 c0 	mov    DWORD PTR [esp],0xc00203e3
c000e018:	e8 3d 69 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 1f ff ff ff       	jmp    c000df44 <Virt::setupPageSwapping(int)+0x43>
c000e025:	90                   	nop

c000e026 <VAS::VAS()>:
c000e026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e035:	a3 c4 32 02 c0       	mov    ds:0xc00232c4,eax
c000e03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e046:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e054:	90                   	nop
c000e055:	c3                   	ret    

c000e056 <VAS::VAS(VAS*)>:
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e064:	83 ec 0c             	sub    esp,0xc
c000e067:	68 34 02 02 c0       	push   0xc0020234
c000e06c:	e8 e9 68 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	90                   	nop
c000e075:	83 c4 0c             	add    esp,0xc
c000e078:	c3                   	ret    
c000e079:	90                   	nop

c000e07a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e07e:	89 c2                	mov    edx,eax
c000e080:	c1 e8 0a             	shr    eax,0xa
c000e083:	c1 ea 16             	shr    edx,0x16
c000e086:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e08b:	19 c9                	sbb    ecx,ecx
c000e08d:	c1 e2 0c             	shl    edx,0xc
c000e090:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e096:	25 fc 0f 00 00       	and    eax,0xffc
c000e09b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e0a2:	01 d0                	add    eax,edx
c000e0a4:	c3                   	ret    
c000e0a5:	90                   	nop

c000e0a6 <VAS::getPageTableEntry(unsigned long)>:
c000e0a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e0aa:	89 ca                	mov    edx,ecx
c000e0ac:	c1 e9 0a             	shr    ecx,0xa
c000e0af:	c1 ea 16             	shr    edx,0x16
c000e0b2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e0b8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e0be:	c1 e0 0c             	shl    eax,0xc
c000e0c1:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e0c4:	c3                   	ret    

c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e0c5:	57                   	push   edi
c000e0c6:	56                   	push   esi
c000e0c7:	be 01 00 00 00       	mov    esi,0x1
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 10             	sub    esp,0x10
c000e0d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0d4:	c1 eb 0c             	shr    ebx,0xc
c000e0d7:	eb 3f                	jmp    c000e118 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0d9:	e8 1d fe ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e0de:	83 ec 08             	sub    esp,0x8
c000e0e1:	57                   	push   edi
c000e0e2:	50                   	push   eax
c000e0e3:	e8 be ff ff ff       	call   c000e0a6 <VAS::getPageTableEntry(unsigned long)>
c000e0e8:	83 c4 10             	add    esp,0x10
c000e0eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e0f1:	f6 c4 04             	test   ah,0x4
c000e0f4:	75 5f                	jne    c000e155 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e0f6:	80 fa 04             	cmp    dl,0x4
c000e0f9:	74 78                	je     c000e173 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e0fb:	80 fa 02             	cmp    dl,0x2
c000e0fe:	0f 84 88 00 00 00    	je     c000e18c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e104:	80 fa 03             	cmp    dl,0x3
c000e107:	0f 84 ad 00 00 00    	je     c000e1ba <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e10d:	fe ca                	dec    dl
c000e10f:	0f 84 92 00 00 00    	je     c000e1a7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e115:	43                   	inc    ebx
c000e116:	31 f6                	xor    esi,esi
c000e118:	53                   	push   ebx
c000e119:	e8 29 fc ff ff       	call   c000dd47 <Virt::getPageState(unsigned long)>
c000e11e:	5f                   	pop    edi
c000e11f:	89 df                	mov    edi,ebx
c000e121:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e125:	c1 e7 0c             	shl    edi,0xc
c000e128:	84 c0                	test   al,al
c000e12a:	75 ad                	jne    c000e0d9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	68 25 04 02 c0       	push   0xc0020425
c000e134:	e8 21 68 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e139:	e8 bd fd ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e13e:	5a                   	pop    edx
c000e13f:	59                   	pop    ecx
c000e140:	57                   	push   edi
c000e141:	50                   	push   eax
c000e142:	e8 5f ff ff ff       	call   c000e0a6 <VAS::getPageTableEntry(unsigned long)>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e14c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e150:	f6 c4 04             	test   ah,0x4
c000e153:	74 c0                	je     c000e115 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e155:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e159:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e15e:	83 ec 0c             	sub    esp,0xc
c000e161:	50                   	push   eax
c000e162:	e8 d7 df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e167:	83 c4 10             	add    esp,0x10
c000e16a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e16e:	80 fa 04             	cmp    dl,0x4
c000e171:	75 88                	jne    c000e0fb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e173:	89 f0                	mov    eax,esi
c000e175:	84 c0                	test   al,al
c000e177:	75 47                	jne    c000e1c0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e179:	c7 44 24 20 58 02 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020258
c000e181:	83 c4 10             	add    esp,0x10
c000e184:	5b                   	pop    ebx
c000e185:	5e                   	pop    esi
c000e186:	5f                   	pop    edi
c000e187:	e9 ce 67 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c000e18c:	89 f0                	mov    eax,esi
c000e18e:	84 c0                	test   al,al
c000e190:	75 15                	jne    c000e1a7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e192:	83 ec 0c             	sub    esp,0xc
c000e195:	68 41 04 02 c0       	push   0xc0020441
c000e19a:	e8 bb 67 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	e9 6e ff ff ff       	jmp    c000e115 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1a7:	83 ec 08             	sub    esp,0x8
c000e1aa:	6a 00                	push   0x0
c000e1ac:	53                   	push   ebx
c000e1ad:	e8 60 fb ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	e9 5b ff ff ff       	jmp    c000e115 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1ba:	89 f0                	mov    eax,esi
c000e1bc:	84 c0                	test   al,al
c000e1be:	75 15                	jne    c000e1d5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e1c0:	83 ec 08             	sub    esp,0x8
c000e1c3:	6a 00                	push   0x0
c000e1c5:	53                   	push   ebx
c000e1c6:	e8 47 fb ff ff       	call   c000dd12 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	83 c4 10             	add    esp,0x10
c000e1d1:	5b                   	pop    ebx
c000e1d2:	5e                   	pop    esi
c000e1d3:	5f                   	pop    edi
c000e1d4:	c3                   	ret    
c000e1d5:	c7 44 24 20 5d 04 02 c0 	mov    DWORD PTR [esp+0x20],0xc002045d
c000e1dd:	83 c4 10             	add    esp,0x10
c000e1e0:	5b                   	pop    ebx
c000e1e1:	5e                   	pop    esi
c000e1e2:	5f                   	pop    edi
c000e1e3:	e9 72 67 00 00       	jmp    c001495a <Krnl::panic(char const*)>

c000e1e8 <VAS::freeAllocatedPages(unsigned long)>:
c000e1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1f0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e1f4:	74 09                	je     c000e1ff <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e1f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e1fa:	e9 c6 fe ff ff       	jmp    c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1ff:	c7 44 24 04 7c 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc002027c
c000e207:	e9 b9 0a 00 00       	jmp    c000ecc5 <Dbg::kprintf(char const*, ...)>

c000e20c <VAS::virtualToPhysical(unsigned long)>:
c000e20c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e210:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e214:	e8 8d fe ff ff       	call   c000e0a6 <VAS::getPageTableEntry(unsigned long)>
c000e219:	5a                   	pop    edx
c000e21a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e21c:	59                   	pop    ecx
c000e21d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e222:	c3                   	ret    
c000e223:	90                   	nop

c000e224 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e224:	83 ec 0c             	sub    esp,0xc
c000e227:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e22c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e230:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e237:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e23a:	19 c0                	sbb    eax,eax
c000e23c:	83 ca 03             	or     edx,0x3
c000e23f:	83 e0 fc             	and    eax,0xfffffffc
c000e242:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e249:	e8 a7 02 01 00       	call   c001e4f5 <CPU::readCR3()>
c000e24e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e252:	83 c4 0c             	add    esp,0xc
c000e255:	e9 ad 02 01 00       	jmp    c001e507 <CPU::writeCR3(unsigned long)>

c000e25a <VAS::~VAS()>:
c000e25a:	83 ec 2c             	sub    esp,0x2c
c000e25d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e265:	e8 06 96 00 00       	call   c0017870 <lockScheduler()>
c000e26a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e271:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e274:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e27a:	83 ec 04             	sub    esp,0x4
c000e27d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e281:	6a 01                	push   0x1
c000e283:	50                   	push   eax
c000e284:	e8 9b ff ff ff       	call   c000e224 <VAS::mapOtherVASIn(bool, VAS*)>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e294:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e29c:	0f 8f d7 00 00 00    	jg     c000e379 <VAS::~VAS()+0x11f>
c000e2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e2a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2ad:	c1 e2 02             	shl    edx,0x2
c000e2b0:	01 d0                	add    eax,edx
c000e2b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bc:	83 e0 01             	and    eax,0x1
c000e2bf:	0f 84 ab 00 00 00    	je     c000e370 <VAS::~VAS()+0x116>
c000e2c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2cd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2d5:	7f 75                	jg     c000e34c <VAS::~VAS()+0xf2>
c000e2d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2db:	c1 e0 0a             	shl    eax,0xa
c000e2de:	89 c2                	mov    edx,eax
c000e2e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2e4:	01 d0                	add    eax,edx
c000e2e6:	c1 e0 0c             	shl    eax,0xc
c000e2e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e2f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2f7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e2fd:	83 ec 04             	sub    esp,0x4
c000e300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e304:	6a 01                	push   0x1
c000e306:	50                   	push   eax
c000e307:	e8 6e fd ff ff       	call   c000e07a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e317:	8b 00                	mov    eax,DWORD PTR [eax]
c000e319:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e321:	25 01 04 00 00       	and    eax,0x401
c000e326:	3d 01 04 00 00       	cmp    eax,0x401
c000e32b:	75 19                	jne    c000e346 <VAS::~VAS()+0xec>
c000e32d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e331:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e336:	83 ec 0c             	sub    esp,0xc
c000e339:	50                   	push   eax
c000e33a:	e8 ff dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e33f:	83 c4 10             	add    esp,0x10
c000e342:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e346:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e34a:	eb 81                	jmp    c000e2cd <VAS::~VAS()+0x73>
c000e34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e350:	25 00 04 00 00       	and    eax,0x400
c000e355:	74 19                	je     c000e370 <VAS::~VAS()+0x116>
c000e357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e360:	83 ec 0c             	sub    esp,0xc
c000e363:	50                   	push   eax
c000e364:	e8 d5 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e369:	83 c4 10             	add    esp,0x10
c000e36c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e370:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e374:	e9 1b ff ff ff       	jmp    c000e294 <VAS::~VAS()+0x3a>
c000e379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e37d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e380:	83 ec 0c             	sub    esp,0xc
c000e383:	50                   	push   eax
c000e384:	e8 3c fd ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e389:	83 c4 10             	add    esp,0x10
c000e38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e390:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e393:	83 ec 0c             	sub    esp,0xc
c000e396:	50                   	push   eax
c000e397:	e8 a2 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e39c:	83 c4 10             	add    esp,0x10
c000e39f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3a7:	c1 e0 02             	shl    eax,0x2
c000e3aa:	83 ec 08             	sub    esp,0x8
c000e3ad:	50                   	push   eax
c000e3ae:	68 a0 02 02 c0       	push   0xc00202a0
c000e3b3:	e8 0d 09 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000e3b8:	83 c4 10             	add    esp,0x10
c000e3bb:	e8 b2 94 00 00       	call   c0017872 <unlockScheduler()>
c000e3c0:	90                   	nop
c000e3c1:	83 c4 2c             	add    esp,0x2c
c000e3c4:	c3                   	ret    
c000e3c5:	90                   	nop

c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e3c6:	55                   	push   ebp
c000e3c7:	57                   	push   edi
c000e3c8:	56                   	push   esi
c000e3c9:	53                   	push   ebx
c000e3ca:	83 ec 1c             	sub    esp,0x1c
c000e3cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3d5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3db:	77 08                	ja     c000e3e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e3dd:	0f 20 d8             	mov    eax,cr3
c000e3e0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e3e3:	75 47                	jne    c000e42c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e3e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3e9:	09 d8                	or     eax,ebx
c000e3eb:	a9 ff 0f 00 00       	test   eax,0xfff
c000e3f0:	75 57                	jne    c000e449 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e3f2:	89 de                	mov    esi,ebx
c000e3f4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e3f7:	c1 ee 16             	shr    esi,0x16
c000e3fa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e401:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e405:	74 54                	je     c000e45b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e407:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e40b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e411:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e415:	c1 e6 0c             	shl    esi,0xc
c000e418:	c1 eb 0a             	shr    ebx,0xa
c000e41b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e421:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e424:	83 c4 1c             	add    esp,0x1c
c000e427:	5b                   	pop    ebx
c000e428:	5e                   	pop    esi
c000e429:	5f                   	pop    edi
c000e42a:	5d                   	pop    ebp
c000e42b:	c3                   	ret    
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	68 c0 02 02 c0       	push   0xc00202c0
c000e434:	e8 8c 08 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000e439:	83 c4 10             	add    esp,0x10
c000e43c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e440:	09 d8                	or     eax,ebx
c000e442:	a9 ff 0f 00 00       	test   eax,0xfff
c000e447:	74 a9                	je     c000e3f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e449:	83 ec 0c             	sub    esp,0xc
c000e44c:	68 28 03 02 c0       	push   0xc0020328
c000e451:	e8 04 65 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	eb 97                	jmp    c000e3f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e45b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e45f:	e8 64 dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e464:	89 c5                	mov    ebp,eax
c000e466:	e8 90 fa ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e46b:	83 ec 0c             	sub    esp,0xc
c000e46e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e472:	6a 01                	push   0x1
c000e474:	e8 f2 f8 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e479:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e480:	6a 01                	push   0x1
c000e482:	50                   	push   eax
c000e483:	55                   	push   ebp
c000e484:	81 cd 07 04 00 00    	or     ebp,0x407
c000e48a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e48e:	51                   	push   ecx
c000e48f:	e8 1e 02 00 00       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e494:	83 c4 1c             	add    esp,0x1c
c000e497:	68 00 10 00 00       	push   0x1000
c000e49c:	6a 00                	push   0x0
c000e49e:	50                   	push   eax
c000e49f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4a3:	e8 60 21 ff ff       	call   c0000608 <memset>
c000e4a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e4ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e4af:	e8 11 fc ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e4b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e4c1:	e9 41 ff ff ff       	jmp    c000e407 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e4c6 <VAS::allocatePages(int, int)>:
c000e4c6:	55                   	push   ebp
c000e4c7:	57                   	push   edi
c000e4c8:	56                   	push   esi
c000e4c9:	53                   	push   ebx
c000e4ca:	83 ec 1c             	sub    esp,0x1c
c000e4cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4d1:	e8 7e 57 00 00       	call   c0013c54 <thisCPU()>
c000e4d6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4dc:	83 e0 01             	and    eax,0x1
c000e4df:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e4e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4e7:	0f 85 d7 00 00 00    	jne    c000e5c4 <VAS::allocatePages(int, int)+0xfe>
c000e4ed:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e4f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4f4:	85 c0                	test   eax,eax
c000e4f6:	0f 84 ac 00 00 00    	je     c000e5a8 <VAS::allocatePages(int, int)+0xe2>
c000e4fc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e500:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e504:	c1 e6 0c             	shl    esi,0xc
c000e507:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e50b:	85 c0                	test   eax,eax
c000e50d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e510:	7e 33                	jle    c000e545 <VAS::allocatePages(int, int)+0x7f>
c000e512:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e516:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e51a:	81 cd 00 04 00 00    	or     ebp,0x400
c000e520:	e8 a3 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e525:	55                   	push   ebp
c000e526:	53                   	push   ebx
c000e527:	50                   	push   eax
c000e528:	57                   	push   edi
c000e529:	e8 98 fe ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e52e:	83 c4 10             	add    esp,0x10
c000e531:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e536:	74 03                	je     c000e53b <VAS::allocatePages(int, int)+0x75>
c000e538:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e53b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e541:	39 de                	cmp    esi,ebx
c000e543:	75 db                	jne    c000e520 <VAS::allocatePages(int, int)+0x5a>
c000e545:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e54a:	74 3f                	je     c000e58b <VAS::allocatePages(int, int)+0xc5>
c000e54c:	c1 ee 0a             	shr    esi,0xa
c000e54f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e553:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e559:	c1 eb 0a             	shr    ebx,0xa
c000e55c:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e562:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e568:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e56e:	39 f3                	cmp    ebx,esi
c000e570:	77 0d                	ja     c000e57f <VAS::allocatePages(int, int)+0xb9>
c000e572:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e575:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e57b:	39 de                	cmp    esi,ebx
c000e57d:	73 f3                	jae    c000e572 <VAS::allocatePages(int, int)+0xac>
c000e57f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e583:	83 c4 1c             	add    esp,0x1c
c000e586:	5b                   	pop    ebx
c000e587:	5e                   	pop    esi
c000e588:	5f                   	pop    edi
c000e589:	5d                   	pop    ebp
c000e58a:	c3                   	ret    
c000e58b:	e8 65 ff 00 00       	call   c001e4f5 <CPU::readCR3()>
c000e590:	83 ec 0c             	sub    esp,0xc
c000e593:	50                   	push   eax
c000e594:	e8 6e ff 00 00       	call   c001e507 <CPU::writeCR3(unsigned long)>
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	68 4c 03 02 c0       	push   0xc002034c
c000e5b0:	e8 a5 63 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e5b5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e5b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5bc:	83 c4 10             	add    esp,0x10
c000e5bf:	e9 38 ff ff ff       	jmp    c000e4fc <VAS::allocatePages(int, int)+0x36>
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e5cb:	e8 9b f7 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e5d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5d4:	83 c4 10             	add    esp,0x10
c000e5d7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e5dc:	0f 87 94 00 00 00    	ja     c000e676 <VAS::allocatePages(int, int)+0x1b0>
c000e5e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e5e6:	85 d2                	test   edx,edx
c000e5e8:	7e 3c                	jle    c000e626 <VAS::allocatePages(int, int)+0x160>
c000e5ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e5f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5f6:	c1 e5 0c             	shl    ebp,0xc
c000e5f9:	81 ce 00 04 00 00    	or     esi,0x400
c000e5ff:	01 dd                	add    ebp,ebx
c000e601:	e8 c2 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e606:	56                   	push   esi
c000e607:	53                   	push   ebx
c000e608:	50                   	push   eax
c000e609:	57                   	push   edi
c000e60a:	e8 b7 fd ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e60f:	83 c4 10             	add    esp,0x10
c000e612:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e617:	74 03                	je     c000e61c <VAS::allocatePages(int, int)+0x156>
c000e619:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e61c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e622:	39 dd                	cmp    ebp,ebx
c000e624:	75 db                	jne    c000e601 <VAS::allocatePages(int, int)+0x13b>
c000e626:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e62b:	0f 84 5a ff ff ff    	je     c000e58b <VAS::allocatePages(int, int)+0xc5>
c000e631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e635:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e639:	89 d3                	mov    ebx,edx
c000e63b:	c1 e0 0c             	shl    eax,0xc
c000e63e:	c1 eb 0a             	shr    ebx,0xa
c000e641:	01 d0                	add    eax,edx
c000e643:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e649:	c1 e8 0a             	shr    eax,0xa
c000e64c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e652:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e657:	2d 00 00 40 00       	sub    eax,0x400000
c000e65c:	39 c3                	cmp    ebx,eax
c000e65e:	0f 87 1b ff ff ff    	ja     c000e57f <VAS::allocatePages(int, int)+0xb9>
c000e664:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e667:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e66d:	39 d8                	cmp    eax,ebx
c000e66f:	73 f3                	jae    c000e664 <VAS::allocatePages(int, int)+0x19e>
c000e671:	e9 09 ff ff ff       	jmp    c000e57f <VAS::allocatePages(int, int)+0xb9>
c000e676:	e8 d9 55 00 00       	call   c0013c54 <thisCPU()>
c000e67b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e682:	0f 84 5a ff ff ff    	je     c000e5e2 <VAS::allocatePages(int, int)+0x11c>
c000e688:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e690:	e9 4d ff ff ff       	jmp    c000e5e2 <VAS::allocatePages(int, int)+0x11c>
c000e695:	90                   	nop

c000e696 <VAS::setCPUSpecific(unsigned long)>:
c000e696:	83 ec 0c             	sub    esp,0xc
c000e699:	6a 05                	push   0x5
c000e69b:	68 00 00 40 c2       	push   0xc2400000
c000e6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a8:	e8 19 fd ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6ad:	83 c4 1c             	add    esp,0x1c
c000e6b0:	c3                   	ret    
c000e6b1:	90                   	nop

c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e6b2:	55                   	push   ebp
c000e6b3:	57                   	push   edi
c000e6b4:	56                   	push   esi
c000e6b5:	53                   	push   ebx
c000e6b6:	83 ec 1c             	sub    esp,0x1c
c000e6b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e6c1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e6c5:	e8 8a 55 00 00       	call   c0013c54 <thisCPU()>
c000e6ca:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6d0:	83 e0 01             	and    eax,0x1
c000e6d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6db:	85 c0                	test   eax,eax
c000e6dd:	7e 39                	jle    c000e718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e6df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6e3:	89 f3                	mov    ebx,esi
c000e6e5:	c1 e0 0c             	shl    eax,0xc
c000e6e8:	01 f0                	add    eax,esi
c000e6ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ee:	55                   	push   ebp
c000e6ef:	53                   	push   ebx
c000e6f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f4:	29 f0                	sub    eax,esi
c000e6f6:	01 d8                	add    eax,ebx
c000e6f8:	50                   	push   eax
c000e6f9:	57                   	push   edi
c000e6fa:	e8 c7 fc ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6ff:	83 c4 10             	add    esp,0x10
c000e702:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e707:	74 03                	je     c000e70c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e709:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e70c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e712:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e716:	75 d6                	jne    c000e6ee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e718:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e71d:	74 42                	je     c000e761 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e71f:	89 f3                	mov    ebx,esi
c000e721:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e725:	c1 eb 0a             	shr    ebx,0xa
c000e728:	c1 e0 0c             	shl    eax,0xc
c000e72b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e731:	01 f0                	add    eax,esi
c000e733:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e739:	c1 e8 0a             	shr    eax,0xa
c000e73c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e741:	2d 00 00 40 00       	sub    eax,0x400000
c000e746:	39 c3                	cmp    ebx,eax
c000e748:	77 0d                	ja     c000e757 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e74a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e74d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e753:	39 d8                	cmp    eax,ebx
c000e755:	73 f3                	jae    c000e74a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e757:	83 c4 1c             	add    esp,0x1c
c000e75a:	89 f0                	mov    eax,esi
c000e75c:	5b                   	pop    ebx
c000e75d:	5e                   	pop    esi
c000e75e:	5f                   	pop    edi
c000e75f:	5d                   	pop    ebp
c000e760:	c3                   	ret    
c000e761:	e8 8f fd 00 00       	call   c001e4f5 <CPU::readCR3()>
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	50                   	push   eax
c000e76a:	e8 98 fd 00 00       	call   c001e507 <CPU::writeCR3(unsigned long)>
c000e76f:	89 f0                	mov    eax,esi
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 c4 1c             	add    esp,0x1c
c000e777:	5b                   	pop    ebx
c000e778:	5e                   	pop    esi
c000e779:	5f                   	pop    edi
c000e77a:	5d                   	pop    ebp
c000e77b:	c3                   	ret    

c000e77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e77c:	55                   	push   ebp
c000e77d:	57                   	push   edi
c000e77e:	56                   	push   esi
c000e77f:	53                   	push   ebx
c000e780:	83 ec 1c             	sub    esp,0x1c
c000e783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e787:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e78b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e78f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e793:	a9 ff 0f 00 00       	test   eax,0xfff
c000e798:	75 4a                	jne    c000e7e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e79a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e79e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e7a1:	c1 eb 16             	shr    ebx,0x16
c000e7a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e7ab:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e7af:	74 4d                	je     c000e7fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e7b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7b5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e7b9:	c1 e8 0a             	shr    eax,0xa
c000e7bc:	80 fa 01             	cmp    dl,0x1
c000e7bf:	19 d2                	sbb    edx,edx
c000e7c1:	c1 e3 0c             	shl    ebx,0xc
c000e7c4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e7c8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e7ce:	25 fc 0f 00 00       	and    eax,0xffc
c000e7d3:	01 d8                	add    eax,ebx
c000e7d5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e7dc:	83 c4 1c             	add    esp,0x1c
c000e7df:	5b                   	pop    ebx
c000e7e0:	5e                   	pop    esi
c000e7e1:	5f                   	pop    edi
c000e7e2:	5d                   	pop    ebp
c000e7e3:	c3                   	ret    
c000e7e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	68 78 03 02 c0       	push   0xc0020378
c000e7f0:	e8 65 61 00 00       	call   c001495a <Krnl::panic(char const*)>
c000e7f5:	83 c4 10             	add    esp,0x10
c000e7f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e7fc:	eb 9c                	jmp    c000e79a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000e7fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e802:	e8 c1 d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e807:	89 c5                	mov    ebp,eax
c000e809:	e8 ed f6 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e80e:	83 ec 0c             	sub    esp,0xc
c000e811:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e815:	6a 01                	push   0x1
c000e817:	e8 4f f5 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e81c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e823:	6a 01                	push   0x1
c000e825:	50                   	push   eax
c000e826:	55                   	push   ebp
c000e827:	81 cd 07 04 00 00    	or     ebp,0x407
c000e82d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e831:	51                   	push   ecx
c000e832:	e8 7b fe ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e837:	83 c4 1c             	add    esp,0x1c
c000e83a:	68 00 10 00 00       	push   0x1000
c000e83f:	6a 00                	push   0x0
c000e841:	50                   	push   eax
c000e842:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e846:	e8 bd 1d ff ff       	call   c0000608 <memset>
c000e84b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e84f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e852:	e8 6e f8 ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e857:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e85a:	83 c4 10             	add    esp,0x10
c000e85d:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000e860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e864:	e9 48 ff ff ff       	jmp    c000e7b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000e869:	90                   	nop

c000e86a <VAS::VAS(bool)>:
c000e86a:	53                   	push   ebx
c000e86b:	83 ec 28             	sub    esp,0x28
c000e86e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e872:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e87a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e885:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000e889:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e88c:	e8 37 d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e891:	89 c2                	mov    edx,eax
c000e893:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e897:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e89a:	e8 5c f6 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c000e89f:	89 c3                	mov    ebx,eax
c000e8a1:	83 ec 0c             	sub    esp,0xc
c000e8a4:	6a 01                	push   0x1
c000e8a6:	e8 c0 f4 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	89 c2                	mov    edx,eax
c000e8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e8b7:	83 ec 0c             	sub    esp,0xc
c000e8ba:	6a 03                	push   0x3
c000e8bc:	6a 01                	push   0x1
c000e8be:	52                   	push   edx
c000e8bf:	50                   	push   eax
c000e8c0:	53                   	push   ebx
c000e8c1:	e8 ec fd ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c6:	83 c4 20             	add    esp,0x20
c000e8c9:	89 c2                	mov    edx,eax
c000e8cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e8d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e8da:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000e8e2:	7f 1c                	jg     c000e900 <VAS::VAS(bool)+0x96>
c000e8e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e8eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8ef:	c1 e2 02             	shl    edx,0x2
c000e8f2:	01 d0                	add    eax,edx
c000e8f4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000e8fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8fe:	eb da                	jmp    c000e8da <VAS::VAS(bool)+0x70>
c000e900:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000e908:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000e910:	7f 71                	jg     c000e983 <VAS::VAS(bool)+0x119>
c000e912:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e916:	2d 00 02 00 00       	sub    eax,0x200
c000e91b:	c1 e0 0c             	shl    eax,0xc
c000e91e:	83 c8 03             	or     eax,0x3
c000e921:	89 c3                	mov    ebx,eax
c000e923:	e8 2c 53 00 00       	call   c0013c54 <thisCPU()>
c000e928:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	84 c0                	test   al,al
c000e933:	74 07                	je     c000e93c <VAS::VAS(bool)+0xd2>
c000e935:	b8 00 01 00 00       	mov    eax,0x100
c000e93a:	eb 05                	jmp    c000e941 <VAS::VAS(bool)+0xd7>
c000e93c:	b8 00 00 00 00       	mov    eax,0x0
c000e941:	09 d8                	or     eax,ebx
c000e943:	89 c1                	mov    ecx,eax
c000e945:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e949:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e950:	c1 e2 02             	shl    edx,0x2
c000e953:	01 d0                	add    eax,edx
c000e955:	89 ca                	mov    edx,ecx
c000e957:	89 10                	mov    DWORD PTR [eax],edx
c000e959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e95d:	2d 40 03 00 00       	sub    eax,0x340
c000e962:	83 f8 7f             	cmp    eax,0x7f
c000e965:	77 16                	ja     c000e97d <VAS::VAS(bool)+0x113>
c000e967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e96b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e96e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e972:	c1 e2 02             	shl    edx,0x2
c000e975:	01 d0                	add    eax,edx
c000e977:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000e97d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e981:	eb 85                	jmp    c000e908 <VAS::VAS(bool)+0x9e>
c000e983:	e8 cc 52 00 00       	call   c0013c54 <thisCPU()>
c000e988:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000e98e:	83 e0 10             	and    eax,0x10
c000e991:	84 c0                	test   al,al
c000e993:	74 07                	je     c000e99c <VAS::VAS(bool)+0x132>
c000e995:	b8 03 41 00 00       	mov    eax,0x4103
c000e99a:	eb 05                	jmp    c000e9a1 <VAS::VAS(bool)+0x137>
c000e99c:	b8 03 40 00 00       	mov    eax,0x4003
c000e9a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9a5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000e9a8:	81 c2 20 0c 00 00    	add    edx,0xc20
c000e9ae:	89 02                	mov    DWORD PTR [edx],eax
c000e9b0:	e8 9f 52 00 00       	call   c0013c54 <thisCPU()>
c000e9b5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000e9bb:	83 ec 08             	sub    esp,0x8
c000e9be:	50                   	push   eax
c000e9bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e9c3:	e8 ce fc ff ff       	call   c000e696 <VAS::setCPUSpecific(unsigned long)>
c000e9c8:	83 c4 10             	add    esp,0x10
c000e9cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9cf:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000e9d2:	e8 7d 52 00 00       	call   c0013c54 <thisCPU()>
c000e9d7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000e9dd:	83 e0 10             	and    eax,0x10
c000e9e0:	84 c0                	test   al,al
c000e9e2:	74 07                	je     c000e9eb <VAS::VAS(bool)+0x181>
c000e9e4:	b8 00 01 00 00       	mov    eax,0x100
c000e9e9:	eb 05                	jmp    c000e9f0 <VAS::VAS(bool)+0x186>
c000e9eb:	b8 00 00 00 00       	mov    eax,0x0
c000e9f0:	09 d8                	or     eax,ebx
c000e9f2:	89 c2                	mov    edx,eax
c000e9f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e9fb:	05 fc 0f 00 00       	add    eax,0xffc
c000ea00:	83 ca 03             	or     edx,0x3
c000ea03:	89 10                	mov    DWORD PTR [eax],edx
c000ea05:	e8 4a 52 00 00       	call   c0013c54 <thisCPU()>
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	50                   	push   eax
c000ea0e:	e8 9f 19 00 00       	call   c00103b2 <Device::getName()>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	83 ec 08             	sub    esp,0x8
c000ea19:	68 77 04 02 c0       	push   0xc0020477
c000ea1e:	50                   	push   eax
c000ea1f:	e8 d4 1c ff ff       	call   c00006f8 <strcmp>
c000ea24:	83 c4 10             	add    esp,0x10
c000ea27:	85 c0                	test   eax,eax
c000ea29:	0f 94 c0             	sete   al
c000ea2c:	84 c0                	test   al,al
c000ea2e:	74 64                	je     c000ea94 <VAS::VAS(bool)+0x22a>
c000ea30:	e8 1e 8e 00 00       	call   c0017853 <disableIRQs()>
c000ea35:	e8 1a 52 00 00       	call   c0013c54 <thisCPU()>
c000ea3a:	05 7c 09 00 00       	add    eax,0x97c
c000ea3f:	83 ec 0c             	sub    esp,0xc
c000ea42:	50                   	push   eax
c000ea43:	e8 48 cc ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ea48:	83 c4 10             	add    esp,0x10
c000ea4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea50:	89 c3                	mov    ebx,eax
c000ea52:	e8 fd 51 00 00       	call   c0013c54 <thisCPU()>
c000ea57:	05 7c 09 00 00       	add    eax,0x97c
c000ea5c:	83 ec 0c             	sub    esp,0xc
c000ea5f:	50                   	push   eax
c000ea60:	e8 2b cc ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ea65:	83 c4 10             	add    esp,0x10
c000ea68:	83 ec 08             	sub    esp,0x8
c000ea6b:	50                   	push   eax
c000ea6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea70:	e8 31 f6 ff ff       	call   c000e0a6 <VAS::getPageTableEntry(unsigned long)>
c000ea75:	83 c4 10             	add    esp,0x10
c000ea78:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea7f:	6a 11                	push   0x11
c000ea81:	53                   	push   ebx
c000ea82:	50                   	push   eax
c000ea83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea87:	e8 3a f9 ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	e8 cd 8d 00 00       	call   c0017861 <enableIRQs()>
c000ea94:	90                   	nop
c000ea95:	83 c4 28             	add    esp,0x28
c000ea98:	5b                   	pop    ebx
c000ea99:	c3                   	ret    

c000ea9a <mapVASFirstTime>:
c000ea9a:	55                   	push   ebp
c000ea9b:	57                   	push   edi
c000ea9c:	56                   	push   esi
c000ea9d:	53                   	push   ebx
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eaa6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eaa9:	4a                   	dec    edx
c000eaaa:	0f 84 99 00 00 00    	je     c000eb49 <mapVASFirstTime+0xaf>
c000eab0:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eab3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eab6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eabb:	c1 e5 15             	shl    ebp,0x15
c000eabe:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eac3:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eac9:	29 eb                	sub    ebx,ebp
c000eacb:	29 ee                	sub    esi,ebp
c000eacd:	e8 f6 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	68 03 04 00 00       	push   0x403
c000eada:	6a 01                	push   0x1
c000eadc:	53                   	push   ebx
c000eadd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000eae3:	50                   	push   eax
c000eae4:	57                   	push   edi
c000eae5:	e8 c8 fb ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eaea:	83 c4 20             	add    esp,0x20
c000eaed:	39 f3                	cmp    ebx,esi
c000eaef:	75 dc                	jne    c000eacd <mapVASFirstTime+0x33>
c000eaf1:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000eaf6:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000eafb:	29 ee                	sub    esi,ebp
c000eafd:	29 e8                	sub    eax,ebp
c000eaff:	89 c5                	mov    ebp,eax
c000eb01:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000eb05:	19 db                	sbb    ebx,ebx
c000eb07:	e8 bc d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb0c:	83 e3 04             	and    ebx,0x4
c000eb0f:	83 ec 0c             	sub    esp,0xc
c000eb12:	81 c3 03 04 00 00    	add    ebx,0x403
c000eb18:	53                   	push   ebx
c000eb19:	6a 01                	push   0x1
c000eb1b:	56                   	push   esi
c000eb1c:	81 ee 00 10 00 00    	sub    esi,0x1000
c000eb22:	50                   	push   eax
c000eb23:	57                   	push   edi
c000eb24:	e8 89 fb ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb29:	83 c4 20             	add    esp,0x20
c000eb2c:	39 f5                	cmp    ebp,esi
c000eb2e:	75 d1                	jne    c000eb01 <mapVASFirstTime+0x67>
c000eb30:	e8 c0 f9 00 00       	call   c001e4f5 <CPU::readCR3()>
c000eb35:	83 ec 0c             	sub    esp,0xc
c000eb38:	50                   	push   eax
c000eb39:	e8 c9 f9 00 00       	call   c001e507 <CPU::writeCR3(unsigned long)>
c000eb3e:	83 c4 10             	add    esp,0x10
c000eb41:	83 c4 0c             	add    esp,0xc
c000eb44:	5b                   	pop    ebx
c000eb45:	5e                   	pop    esi
c000eb46:	5f                   	pop    edi
c000eb47:	5d                   	pop    ebp
c000eb48:	c3                   	ret    
c000eb49:	83 ec 0c             	sub    esp,0xc
c000eb4c:	68 85 04 02 c0       	push   0xc0020485
c000eb51:	e8 6f 01 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000eb56:	83 c4 10             	add    esp,0x10
c000eb59:	83 c4 0c             	add    esp,0xc
c000eb5c:	5b                   	pop    ebx
c000eb5d:	5e                   	pop    esi
c000eb5e:	5f                   	pop    edi
c000eb5f:	5d                   	pop    ebp
c000eb60:	c3                   	ret    

c000eb61 <__cxa_atexit>:
c000eb61:	31 c0                	xor    eax,eax
c000eb63:	c3                   	ret    

c000eb64 <__cxa_finalize>:
c000eb64:	c3                   	ret    

c000eb65 <__stack_chk_fail>:
c000eb65:	55                   	push   ebp
c000eb66:	89 e5                	mov    ebp,esp
c000eb68:	83 ec 10             	sub    esp,0x10
c000eb6b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000eb6e:	68 9e 04 02 c0       	push   0xc002049e
c000eb73:	e8 4d 01 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000eb78:	58                   	pop    eax
c000eb79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eb7c:	5a                   	pop    edx
c000eb7d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eb80:	68 9e 04 02 c0       	push   0xc002049e
c000eb85:	e8 3b 01 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000eb8a:	59                   	pop    ecx
c000eb8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eb8e:	5a                   	pop    edx
c000eb8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb91:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eb94:	68 9e 04 02 c0       	push   0xc002049e
c000eb99:	e8 27 01 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000eb9e:	59                   	pop    ecx
c000eb9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eba2:	5a                   	pop    edx
c000eba3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eba5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eba7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ebaa:	68 9e 04 02 c0       	push   0xc002049e
c000ebaf:	e8 11 01 00 00       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c000ebb4:	c7 04 24 a6 04 02 c0 	mov    DWORD PTR [esp],0xc00204a6
c000ebbb:	e8 9a 5d 00 00       	call   c001495a <Krnl::panic(char const*)>
c000ebc0:	83 c4 10             	add    esp,0x10
c000ebc3:	c9                   	leave  
c000ebc4:	c3                   	ret    

c000ebc5 <__cxa_pure_virtual>:
c000ebc5:	83 ec 18             	sub    esp,0x18
c000ebc8:	68 be 04 02 c0       	push   0xc00204be
c000ebcd:	e8 88 5d 00 00       	call   c001495a <Krnl::panic(char const*)>
c000ebd2:	83 c4 1c             	add    esp,0x1c
c000ebd5:	c3                   	ret    

c000ebd6 <operator new(unsigned long)>:
c000ebd6:	e9 43 d0 ff ff       	jmp    c000bc1e <malloc>

c000ebdb <operator new[](unsigned long)>:
c000ebdb:	e9 3e d0 ff ff       	jmp    c000bc1e <malloc>

c000ebe0 <operator delete(void*)>:
c000ebe0:	e9 59 d0 ff ff       	jmp    c000bc3e <rfree>

c000ebe5 <operator delete(void*, unsigned long)>:
c000ebe5:	e9 54 d0 ff ff       	jmp    c000bc3e <rfree>

c000ebea <operator delete[](void*)>:
c000ebea:	e9 4f d0 ff ff       	jmp    c000bc3e <rfree>

c000ebef <operator delete[](void*, unsigned long)>:
c000ebef:	e9 4a d0 ff ff       	jmp    c000bc3e <rfree>

c000ebf4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ebf4:	57                   	push   edi
c000ebf5:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ebfa:	56                   	push   esi
c000ebfb:	be d4 04 02 c0       	mov    esi,0xc00204d4
c000ec00:	53                   	push   ebx
c000ec01:	83 ec 40             	sub    esp,0x40
c000ec04:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ec08:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ec0c:	fc                   	cld    
c000ec0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec0f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ec13:	83 f9 3e             	cmp    ecx,0x3e
c000ec16:	7e 05                	jle    c000ec1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ec18:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ec1d:	89 df                	mov    edi,ebx
c000ec1f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ec23:	eb 02                	jmp    c000ec27 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ec25:	89 c7                	mov    edi,eax
c000ec27:	31 d2                	xor    edx,edx
c000ec29:	46                   	inc    esi
c000ec2a:	89 f8                	mov    eax,edi
c000ec2c:	f7 f1                	div    ecx
c000ec2e:	39 cf                	cmp    edi,ecx
c000ec30:	73 f3                	jae    c000ec25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ec32:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ec35:	eb 02                	jmp    c000ec39 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ec37:	89 c3                	mov    ebx,eax
c000ec39:	31 d2                	xor    edx,edx
c000ec3b:	4e                   	dec    esi
c000ec3c:	89 d8                	mov    eax,ebx
c000ec3e:	f7 f1                	div    ecx
c000ec40:	39 cb                	cmp    ebx,ecx
c000ec42:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ec46:	88 16                	mov    BYTE PTR [esi],dl
c000ec48:	73 ed                	jae    c000ec37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ec4a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ec4e:	83 c4 40             	add    esp,0x40
c000ec51:	5b                   	pop    ebx
c000ec52:	5e                   	pop    esi
c000ec53:	5f                   	pop    edi
c000ec54:	c3                   	ret    

c000ec55 <Dbg::logc(char)>:
c000ec55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec59:	ba fd 03 00 00       	mov    edx,0x3fd
c000ec5e:	ec                   	in     al,dx
c000ec5f:	a8 20                	test   al,0x20
c000ec61:	74 fb                	je     c000ec5e <Dbg::logc(char)+0x9>
c000ec63:	ba f8 03 00 00       	mov    edx,0x3f8
c000ec68:	88 c8                	mov    al,cl
c000ec6a:	ee                   	out    dx,al
c000ec6b:	c3                   	ret    

c000ec6c <Dbg::logs(char*)>:
c000ec6c:	53                   	push   ebx
c000ec6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ec71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ec74:	84 c0                	test   al,al
c000ec76:	74 0f                	je     c000ec87 <Dbg::logs(char*)+0x1b>
c000ec78:	50                   	push   eax
c000ec79:	43                   	inc    ebx
c000ec7a:	e8 d6 ff ff ff       	call   c000ec55 <Dbg::logc(char)>
c000ec7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ec82:	5a                   	pop    edx
c000ec83:	84 c0                	test   al,al
c000ec85:	75 f1                	jne    c000ec78 <Dbg::logs(char*)+0xc>
c000ec87:	5b                   	pop    ebx
c000ec88:	c3                   	ret    

c000ec89 <Dbg::logWriteInt(unsigned int)>:
c000ec89:	83 ec 10             	sub    esp,0x10
c000ec8c:	6a 0a                	push   0xa
c000ec8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ec92:	50                   	push   eax
c000ec93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec97:	e8 58 ff ff ff       	call   c000ebf4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ec9c:	50                   	push   eax
c000ec9d:	e8 ca ff ff ff       	call   c000ec6c <Dbg::logs(char*)>
c000eca2:	83 c4 20             	add    esp,0x20
c000eca5:	c3                   	ret    

c000eca6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000eca6:	83 ec 10             	sub    esp,0x10
c000eca9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecad:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ecb1:	50                   	push   eax
c000ecb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecb6:	e8 39 ff ff ff       	call   c000ebf4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ecbb:	50                   	push   eax
c000ecbc:	e8 ab ff ff ff       	call   c000ec6c <Dbg::logs(char*)>
c000ecc1:	83 c4 20             	add    esp,0x20
c000ecc4:	c3                   	ret    

c000ecc5 <Dbg::kprintf(char const*, ...)>:
c000ecc5:	55                   	push   ebp
c000ecc6:	57                   	push   edi
c000ecc7:	56                   	push   esi
c000ecc8:	53                   	push   ebx
c000ecc9:	83 ec 0c             	sub    esp,0xc
c000eccc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ecd0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ecd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ecd8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ecdb:	84 c0                	test   al,al
c000ecdd:	74 4a                	je     c000ed29 <Dbg::kprintf(char const*, ...)+0x64>
c000ecdf:	31 db                	xor    ebx,ebx
c000ece1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ece4:	3c 25                	cmp    al,0x25
c000ece6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ece9:	0f 85 e4 00 00 00    	jne    c000edd3 <Dbg::kprintf(char const*, ...)+0x10e>
c000ecef:	83 c3 02             	add    ebx,0x2
c000ecf2:	8a 07                	mov    al,BYTE PTR [edi]
c000ecf4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ecf7:	83 e8 25             	sub    eax,0x25
c000ecfa:	3c 53                	cmp    al,0x53
c000ecfc:	0f 87 ba 00 00 00    	ja     c000edbc <Dbg::kprintf(char const*, ...)+0xf7>
c000ed02:	0f b6 c0             	movzx  eax,al
c000ed05:	ff 24 85 14 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfaec]
c000ed0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed10:	89 c8                	mov    eax,ecx
c000ed12:	83 c1 04             	add    ecx,0x4
c000ed15:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ed19:	ff 30                	push   DWORD PTR [eax]
c000ed1b:	e8 4c ff ff ff       	call   c000ec6c <Dbg::logs(char*)>
c000ed20:	58                   	pop    eax
c000ed21:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ed25:	84 c0                	test   al,al
c000ed27:	75 b8                	jne    c000ece1 <Dbg::kprintf(char const*, ...)+0x1c>
c000ed29:	83 c4 0c             	add    esp,0xc
c000ed2c:	5b                   	pop    ebx
c000ed2d:	5e                   	pop    esi
c000ed2e:	5f                   	pop    edi
c000ed2f:	5d                   	pop    ebp
c000ed30:	c3                   	ret    
c000ed31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed35:	89 d0                	mov    eax,edx
c000ed37:	83 c2 04             	add    edx,0x4
c000ed3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ed3e:	ff 30                	push   DWORD PTR [eax]
c000ed40:	e8 44 ff ff ff       	call   c000ec89 <Dbg::logWriteInt(unsigned int)>
c000ed45:	58                   	pop    eax
c000ed46:	eb d9                	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000ed48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed4c:	89 d0                	mov    eax,edx
c000ed4e:	83 c2 04             	add    edx,0x4
c000ed51:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ed54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ed58:	50                   	push   eax
c000ed59:	e8 f7 fe ff ff       	call   c000ec55 <Dbg::logc(char)>
c000ed5e:	58                   	pop    eax
c000ed5f:	eb c0                	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000ed61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed65:	89 c8                	mov    eax,ecx
c000ed67:	83 c1 04             	add    ecx,0x4
c000ed6a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ed6e:	ff 30                	push   DWORD PTR [eax]
c000ed70:	e8 14 ff ff ff       	call   c000ec89 <Dbg::logWriteInt(unsigned int)>
c000ed75:	5f                   	pop    edi
c000ed76:	eb a9                	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000ed78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed7c:	89 c8                	mov    eax,ecx
c000ed7e:	83 c1 04             	add    ecx,0x4
c000ed81:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ed85:	6a 10                	push   0x10
c000ed87:	ff 30                	push   DWORD PTR [eax]
c000ed89:	e8 18 ff ff ff       	call   c000eca6 <Dbg::logWriteIntBase(unsigned int, int)>
c000ed8e:	59                   	pop    ecx
c000ed8f:	5f                   	pop    edi
c000ed90:	eb 8f                	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000ed92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed96:	89 d0                	mov    eax,edx
c000ed98:	83 c2 08             	add    edx,0x8
c000ed9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ed9f:	6a 10                	push   0x10
c000eda1:	ff 30                	push   DWORD PTR [eax]
c000eda3:	e8 fe fe ff ff       	call   c000eca6 <Dbg::logWriteIntBase(unsigned int, int)>
c000eda8:	58                   	pop    eax
c000eda9:	5a                   	pop    edx
c000edaa:	e9 72 ff ff ff       	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000edaf:	6a 25                	push   0x25
c000edb1:	e8 9f fe ff ff       	call   c000ec55 <Dbg::logc(char)>
c000edb6:	58                   	pop    eax
c000edb7:	e9 65 ff ff ff       	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000edbc:	6a 25                	push   0x25
c000edbe:	e8 92 fe ff ff       	call   c000ec55 <Dbg::logc(char)>
c000edc3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000edc6:	50                   	push   eax
c000edc7:	e8 89 fe ff ff       	call   c000ec55 <Dbg::logc(char)>
c000edcc:	5a                   	pop    edx
c000edcd:	59                   	pop    ecx
c000edce:	e9 4e ff ff ff       	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000edd3:	50                   	push   eax
c000edd4:	89 eb                	mov    ebx,ebp
c000edd6:	e8 7a fe ff ff       	call   c000ec55 <Dbg::logc(char)>
c000eddb:	89 fd                	mov    ebp,edi
c000eddd:	58                   	pop    eax
c000edde:	e9 3e ff ff ff       	jmp    c000ed21 <Dbg::kprintf(char const*, ...)+0x5c>
c000ede3:	90                   	nop

c000ede4 <File::read(unsigned long long, void*, int*)>:
c000ede4:	53                   	push   ebx
c000ede5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eded:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000edf4:	3c 19                	cmp    al,0x19
c000edf6:	77 35                	ja     c000ee2d <File::read(unsigned long long, void*, int*)+0x49>
c000edf8:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c000edff:	85 c0                	test   eax,eax
c000ee01:	74 2a                	je     c000ee2d <File::read(unsigned long long, void*, int*)+0x49>
c000ee03:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ee09:	85 c0                	test   eax,eax
c000ee0b:	74 20                	je     c000ee2d <File::read(unsigned long long, void*, int*)+0x49>
c000ee0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ee11:	74 21                	je     c000ee34 <File::read(unsigned long long, void*, int*)+0x50>
c000ee13:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ee19:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ee1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ee27:	5b                   	pop    ebx
c000ee28:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ee2b:	ff e0                	jmp    eax
c000ee2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ee32:	eb 05                	jmp    c000ee39 <File::read(unsigned long long, void*, int*)+0x55>
c000ee34:	b8 05 00 00 00       	mov    eax,0x5
c000ee39:	5b                   	pop    ebx
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <File::write(unsigned long long, void*, int*)>:
c000ee3c:	53                   	push   ebx
c000ee3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ee45:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ee4c:	3c 19                	cmp    al,0x19
c000ee4e:	77 35                	ja     c000ee85 <File::write(unsigned long long, void*, int*)+0x49>
c000ee50:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c000ee57:	85 c0                	test   eax,eax
c000ee59:	74 2a                	je     c000ee85 <File::write(unsigned long long, void*, int*)+0x49>
c000ee5b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ee61:	85 c0                	test   eax,eax
c000ee63:	74 20                	je     c000ee85 <File::write(unsigned long long, void*, int*)+0x49>
c000ee65:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ee69:	74 21                	je     c000ee8c <File::write(unsigned long long, void*, int*)+0x50>
c000ee6b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee6d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ee71:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ee77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ee7f:	5b                   	pop    ebx
c000ee80:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ee83:	ff e0                	jmp    eax
c000ee85:	b8 0b 00 00 00       	mov    eax,0xb
c000ee8a:	eb 05                	jmp    c000ee91 <File::write(unsigned long long, void*, int*)+0x55>
c000ee8c:	b8 05 00 00 00       	mov    eax,0x5
c000ee91:	5b                   	pop    ebx
c000ee92:	c3                   	ret    
c000ee93:	90                   	nop

c000ee94 <Directory::read(unsigned long long, void*, int*)>:
c000ee94:	53                   	push   ebx
c000ee95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ee9d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000eea4:	3c 19                	cmp    al,0x19
c000eea6:	77 35                	ja     c000eedd <Directory::read(unsigned long long, void*, int*)+0x49>
c000eea8:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c000eeaf:	85 c0                	test   eax,eax
c000eeb1:	74 2a                	je     c000eedd <Directory::read(unsigned long long, void*, int*)+0x49>
c000eeb3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000eeb9:	85 c0                	test   eax,eax
c000eebb:	74 20                	je     c000eedd <Directory::read(unsigned long long, void*, int*)+0x49>
c000eebd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000eec1:	74 21                	je     c000eee4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000eec3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eec5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000eec9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000eecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eed3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eed7:	5b                   	pop    ebx
c000eed8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000eedb:	ff e0                	jmp    eax
c000eedd:	b8 0b 00 00 00       	mov    eax,0xb
c000eee2:	eb 05                	jmp    c000eee9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000eee4:	b8 05 00 00 00       	mov    eax,0x5
c000eee9:	5b                   	pop    ebx
c000eeea:	c3                   	ret    
c000eeeb:	90                   	nop

c000eeec <Directory::write(unsigned long long, void*, int*)>:
c000eeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000eef7:	b8 0b 00 00 00       	mov    eax,0xb
c000eefc:	80 fa 19             	cmp    dl,0x19
c000eeff:	77 18                	ja     c000ef19 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ef01:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000ef08:	85 d2                	test   edx,edx
c000ef0a:	74 0d                	je     c000ef19 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ef0c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ef13:	19 c0                	sbb    eax,eax
c000ef15:	83 e0 0a             	and    eax,0xa
c000ef18:	40                   	inc    eax
c000ef19:	c3                   	ret    

c000ef1a <File::isAtty()>:
c000ef1a:	31 c0                	xor    eax,eax
c000ef1c:	c3                   	ret    
c000ef1d:	90                   	nop

c000ef1e <Directory::isAtty()>:
c000ef1e:	31 c0                	xor    eax,eax
c000ef20:	c3                   	ret    
c000ef21:	90                   	nop

c000ef22 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ef22:	b8 0a 00 00 00       	mov    eax,0xa
c000ef27:	c3                   	ret    

c000ef28 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ef28:	b8 0a 00 00 00       	mov    eax,0xa
c000ef2d:	c3                   	ret    

c000ef2e <File::~File()>:
c000ef2e:	83 ec 0c             	sub    esp,0xc
c000ef31:	ba d0 06 02 c0       	mov    edx,0xc00206d0
c000ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef3a:	89 10                	mov    DWORD PTR [eax],edx
c000ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	50                   	push   eax
c000ef44:	e8 93 eb ff ff       	call   c000dadc <UnixFile::~UnixFile()>
c000ef49:	83 c4 10             	add    esp,0x10
c000ef4c:	90                   	nop
c000ef4d:	83 c4 0c             	add    esp,0xc
c000ef50:	c3                   	ret    
c000ef51:	90                   	nop

c000ef52 <File::~File()>:
c000ef52:	83 ec 0c             	sub    esp,0xc
c000ef55:	83 ec 0c             	sub    esp,0xc
c000ef58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef5c:	e8 cd ff ff ff       	call   c000ef2e <File::~File()>
c000ef61:	83 c4 10             	add    esp,0x10
c000ef64:	83 ec 08             	sub    esp,0x8
c000ef67:	68 14 01 00 00       	push   0x114
c000ef6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef70:	e8 70 fc ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	83 c4 0c             	add    esp,0xc
c000ef7b:	c3                   	ret    

c000ef7c <Directory::~Directory()>:
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef88:	89 10                	mov    DWORD PTR [eax],edx
c000ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	50                   	push   eax
c000ef92:	e8 45 eb ff ff       	call   c000dadc <UnixFile::~UnixFile()>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	90                   	nop
c000ef9b:	83 c4 0c             	add    esp,0xc
c000ef9e:	c3                   	ret    
c000ef9f:	90                   	nop

c000efa0 <Directory::~Directory()>:
c000efa0:	83 ec 0c             	sub    esp,0xc
c000efa3:	83 ec 0c             	sub    esp,0xc
c000efa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efaa:	e8 cd ff ff ff       	call   c000ef7c <Directory::~Directory()>
c000efaf:	83 c4 10             	add    esp,0x10
c000efb2:	83 ec 08             	sub    esp,0x8
c000efb5:	68 14 01 00 00       	push   0x114
c000efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efbe:	e8 22 fc ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000efc3:	83 c4 10             	add    esp,0x10
c000efc6:	83 c4 0c             	add    esp,0xc
c000efc9:	c3                   	ret    

c000efca <Filesystem::Filesystem()>:
c000efca:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000efcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd3:	89 10                	mov    DWORD PTR [eax],edx
c000efd5:	8b 15 c8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232c8
c000efdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000efe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efe6:	a3 c8 32 02 c0       	mov    ds:0xc00232c8,eax
c000efeb:	90                   	nop
c000efec:	c3                   	ret    
c000efed:	90                   	nop

c000efee <Filesystem::~Filesystem()>:
c000efee:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000eff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eff7:	89 10                	mov    DWORD PTR [eax],edx
c000eff9:	90                   	nop
c000effa:	c3                   	ret    
c000effb:	90                   	nop

c000effc <Filesystem::~Filesystem()>:
c000effc:	83 ec 0c             	sub    esp,0xc
c000efff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f003:	e8 e6 ff ff ff       	call   c000efee <Filesystem::~Filesystem()>
c000f008:	83 c4 04             	add    esp,0x4
c000f00b:	83 ec 08             	sub    esp,0x8
c000f00e:	6a 08                	push   0x8
c000f010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f014:	e8 cc fb ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000f019:	83 c4 10             	add    esp,0x10
c000f01c:	83 c4 0c             	add    esp,0xc
c000f01f:	c3                   	ret    

c000f020 <initVFS()>:
c000f020:	83 ec 18             	sub    esp,0x18
c000f023:	6a 08                	push   0x8
c000f025:	e8 ac fb ff ff       	call   c000ebd6 <operator new(unsigned long)>
c000f02a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f02d:	e8 20 a7 00 00       	call   c0019752 <FAT::FAT()>
c000f032:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f039:	e8 98 fb ff ff       	call   c000ebd6 <operator new(unsigned long)>
c000f03e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f041:	e8 82 b9 00 00       	call   c001a9c8 <ISO9660::ISO9660()>
c000f046:	83 c4 1c             	add    esp,0x1c
c000f049:	c3                   	ret    

c000f04a <standardiseFiles(char*, char const*, char const*)>:
c000f04a:	55                   	push   ebp
c000f04b:	57                   	push   edi
c000f04c:	56                   	push   esi
c000f04d:	53                   	push   ebx
c000f04e:	81 ec 10 04 00 00    	sub    esp,0x410
c000f054:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f05b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f062:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f069:	68 00 04 00 00       	push   0x400
c000f06e:	6a 00                	push   0x0
c000f070:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f074:	56                   	push   esi
c000f075:	e8 8e 15 ff ff       	call   c0000608 <memset>
c000f07a:	83 c4 10             	add    esp,0x10
c000f07d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f081:	75 0b                	jne    c000f08e <standardiseFiles(char*, char const*, char const*)+0x44>
c000f083:	50                   	push   eax
c000f084:	50                   	push   eax
c000f085:	57                   	push   edi
c000f086:	56                   	push   esi
c000f087:	e8 1b 16 ff ff       	call   c00006a7 <strcpy>
c000f08c:	eb 41                	jmp    c000f0cf <standardiseFiles(char*, char const*, char const*)+0x85>
c000f08e:	8a 07                	mov    al,BYTE PTR [edi]
c000f090:	3c 5c                	cmp    al,0x5c
c000f092:	74 04                	je     c000f098 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f094:	3c 2f                	cmp    al,0x2f
c000f096:	75 18                	jne    c000f0b0 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f098:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f09b:	3c 60                	cmp    al,0x60
c000f09d:	7e 03                	jle    c000f0a2 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f09f:	83 e8 20             	sub    eax,0x20
c000f0a2:	88 04 24             	mov    BYTE PTR [esp],al
c000f0a5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f0ac:	50                   	push   eax
c000f0ad:	50                   	push   eax
c000f0ae:	eb 18                	jmp    c000f0c8 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f0b0:	50                   	push   eax
c000f0b1:	50                   	push   eax
c000f0b2:	55                   	push   ebp
c000f0b3:	56                   	push   esi
c000f0b4:	e8 ee 15 ff ff       	call   c00006a7 <strcpy>
c000f0b9:	5a                   	pop    edx
c000f0ba:	59                   	pop    ecx
c000f0bb:	68 22 18 02 c0       	push   0xc0021822
c000f0c0:	56                   	push   esi
c000f0c1:	e8 98 16 ff ff       	call   c000075e <strcat>
c000f0c6:	5d                   	pop    ebp
c000f0c7:	58                   	pop    eax
c000f0c8:	57                   	push   edi
c000f0c9:	56                   	push   esi
c000f0ca:	e8 8f 16 ff ff       	call   c000075e <strcat>
c000f0cf:	83 c4 10             	add    esp,0x10
c000f0d2:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f0d5:	3c 60                	cmp    al,0x60
c000f0d7:	7e 03                	jle    c000f0dc <standardiseFiles(char*, char const*, char const*)+0x92>
c000f0d9:	83 e8 20             	sub    eax,0x20
c000f0dc:	88 04 24             	mov    BYTE PTR [esp],al
c000f0df:	88 03                	mov    BYTE PTR [ebx],al
c000f0e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f0e8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f0ee:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f0f2:	bf 03 00 00 00       	mov    edi,0x3
c000f0f7:	b8 03 00 00 00       	mov    eax,0x3
c000f0fc:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f0ff:	84 d2                	test   dl,dl
c000f101:	0f 84 91 00 00 00    	je     c000f198 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f107:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f10a:	80 fa 5c             	cmp    dl,0x5c
c000f10d:	74 05                	je     c000f114 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f10f:	80 fa 2f             	cmp    dl,0x2f
c000f112:	75 12                	jne    c000f126 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f114:	89 c5                	mov    ebp,eax
c000f116:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f11b:	74 09                	je     c000f126 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f11d:	40                   	inc    eax
c000f11e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f122:	89 cf                	mov    edi,ecx
c000f124:	eb d6                	jmp    c000f0fc <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f126:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f12b:	75 5b                	jne    c000f188 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f12d:	80 fa 2e             	cmp    dl,0x2e
c000f130:	75 56                	jne    c000f188 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f132:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f136:	74 19                	je     c000f151 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f138:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f13d:	74 53                	je     c000f192 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f13f:	89 f9                	mov    ecx,edi
c000f141:	41                   	inc    ecx
c000f142:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f145:	80 fa 2f             	cmp    dl,0x2f
c000f148:	74 f7                	je     c000f141 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f14a:	80 fa 5c             	cmp    dl,0x5c
c000f14d:	74 f2                	je     c000f141 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f14f:	eb d1                	jmp    c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f151:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f156:	74 3a                	je     c000f192 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f158:	83 f8 03             	cmp    eax,0x3
c000f15b:	74 c5                	je     c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f15d:	41                   	inc    ecx
c000f15e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f161:	80 fa 2f             	cmp    dl,0x2f
c000f164:	74 f7                	je     c000f15d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f166:	80 fa 5c             	cmp    dl,0x5c
c000f169:	74 f2                	je     c000f15d <standardiseFiles(char*, char const*, char const*)+0x113>
c000f16b:	48                   	dec    eax
c000f16c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f170:	75 06                	jne    c000f178 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f172:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f176:	eb f3                	jmp    c000f16b <standardiseFiles(char*, char const*, char const*)+0x121>
c000f178:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f17c:	74 07                	je     c000f185 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f17e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f182:	48                   	dec    eax
c000f183:	eb f3                	jmp    c000f178 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f185:	40                   	inc    eax
c000f186:	eb 9a                	jmp    c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f188:	80 fa 2f             	cmp    dl,0x2f
c000f18b:	74 95                	je     c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f18d:	80 fa 5c             	cmp    dl,0x5c
c000f190:	74 90                	je     c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f192:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f195:	40                   	inc    eax
c000f196:	eb 8a                	jmp    c000f122 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f198:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f19c:	83 ec 0c             	sub    esp,0xc
c000f19f:	53                   	push   ebx
c000f1a0:	e8 80 14 ff ff       	call   c0000625 <strlen>
c000f1a5:	83 c4 10             	add    esp,0x10
c000f1a8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f1ad:	75 26                	jne    c000f1d5 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f1af:	83 ec 0c             	sub    esp,0xc
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 6d 14 ff ff       	call   c0000625 <strlen>
c000f1b8:	83 c4 10             	add    esp,0x10
c000f1bb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f1c0:	74 26                	je     c000f1e8 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f1c2:	83 ec 0c             	sub    esp,0xc
c000f1c5:	53                   	push   ebx
c000f1c6:	e8 5a 14 ff ff       	call   c0000625 <strlen>
c000f1cb:	83 c4 10             	add    esp,0x10
c000f1ce:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f1d3:	eb c7                	jmp    c000f19c <standardiseFiles(char*, char const*, char const*)+0x152>
c000f1d5:	83 ec 0c             	sub    esp,0xc
c000f1d8:	53                   	push   ebx
c000f1d9:	e8 47 14 ff ff       	call   c0000625 <strlen>
c000f1de:	83 c4 10             	add    esp,0x10
c000f1e1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f1e6:	74 c7                	je     c000f1af <standardiseFiles(char*, char const*, char const*)+0x165>
c000f1e8:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f1ee:	5b                   	pop    ebx
c000f1ef:	5e                   	pop    esi
c000f1f0:	5f                   	pop    edi
c000f1f1:	5d                   	pop    ebp
c000f1f2:	c3                   	ret    
c000f1f3:	90                   	nop

c000f1f4 <File::File(char const*, Process*)>:
c000f1f4:	83 ec 0c             	sub    esp,0xc
c000f1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1fb:	83 ec 08             	sub    esp,0x8
c000f1fe:	6a 00                	push   0x0
c000f200:	50                   	push   eax
c000f201:	e8 34 e7 ff ff       	call   c000d93a <UnixFile::UnixFile(int)>
c000f206:	83 c4 10             	add    esp,0x10
c000f209:	ba d0 06 02 c0       	mov    edx,0xc00206d0
c000f20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f212:	89 10                	mov    DWORD PTR [eax],edx
c000f214:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f218:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f222:	83 c0 0d             	add    eax,0xd
c000f225:	83 ec 04             	sub    esp,0x4
c000f228:	52                   	push   edx
c000f229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f22d:	50                   	push   eax
c000f22e:	e8 17 fe ff ff       	call   c000f04a <standardiseFiles(char*, char const*, char const*)>
c000f233:	83 c4 10             	add    esp,0x10
c000f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f23a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f23d:	8d 50 bf             	lea    edx,[eax-0x41]
c000f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f244:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f24e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f252:	90                   	nop
c000f253:	83 c4 0c             	add    esp,0xc
c000f256:	c3                   	ret    
c000f257:	90                   	nop

c000f258 <File::open(FileOpenMode)>:
c000f258:	53                   	push   ebx
c000f259:	b8 0b 00 00 00       	mov    eax,0xb
c000f25e:	83 ec 08             	sub    esp,0x8
c000f261:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f265:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f26c:	80 fa 19             	cmp    dl,0x19
c000f26f:	77 40                	ja     c000f2b1 <File::open(FileOpenMode)+0x59>
c000f271:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f278:	85 d2                	test   edx,edx
c000f27a:	74 35                	je     c000f2b1 <File::open(FileOpenMode)+0x59>
c000f27c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f282:	85 d2                	test   edx,edx
c000f284:	74 2b                	je     c000f2b1 <File::open(FileOpenMode)+0x59>
c000f286:	b8 06 00 00 00       	mov    eax,0x6
c000f28b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f28f:	75 20                	jne    c000f2b1 <File::open(FileOpenMode)+0x59>
c000f291:	8b 02                	mov    eax,DWORD PTR [edx]
c000f293:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f299:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f29d:	51                   	push   ecx
c000f29e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f2a1:	51                   	push   ecx
c000f2a2:	52                   	push   edx
c000f2a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f2a6:	83 c4 10             	add    esp,0x10
c000f2a9:	85 c0                	test   eax,eax
c000f2ab:	75 04                	jne    c000f2b1 <File::open(FileOpenMode)+0x59>
c000f2ad:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f2b1:	83 c4 08             	add    esp,0x8
c000f2b4:	5b                   	pop    ebx
c000f2b5:	c3                   	ret    

c000f2b6 <File::close()>:
c000f2b6:	53                   	push   ebx
c000f2b7:	b8 0b 00 00 00       	mov    eax,0xb
c000f2bc:	83 ec 08             	sub    esp,0x8
c000f2bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f2c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f2ca:	80 fa 19             	cmp    dl,0x19
c000f2cd:	77 41                	ja     c000f310 <File::close()+0x5a>
c000f2cf:	8b 1c 95 60 37 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f2d6:	85 db                	test   ebx,ebx
c000f2d8:	74 36                	je     c000f310 <File::close()+0x5a>
c000f2da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f2e1:	74 2d                	je     c000f310 <File::close()+0x5a>
c000f2e3:	b8 05 00 00 00       	mov    eax,0x5
c000f2e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f2ec:	74 22                	je     c000f310 <File::close()+0x5a>
c000f2ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f2f2:	8b 04 95 60 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c000f2f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2ff:	53                   	push   ebx
c000f300:	53                   	push   ebx
c000f301:	8b 10                	mov    edx,DWORD PTR [eax]
c000f303:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f309:	50                   	push   eax
c000f30a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f30d:	83 c4 10             	add    esp,0x10
c000f310:	83 c4 08             	add    esp,0x8
c000f313:	5b                   	pop    ebx
c000f314:	c3                   	ret    
c000f315:	90                   	nop

c000f316 <File::seek(unsigned long long)>:
c000f316:	56                   	push   esi
c000f317:	53                   	push   ebx
c000f318:	b8 0b 00 00 00       	mov    eax,0xb
c000f31d:	51                   	push   ecx
c000f31e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f322:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f326:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f32d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f331:	80 fa 19             	cmp    dl,0x19
c000f334:	77 31                	ja     c000f367 <File::seek(unsigned long long)+0x51>
c000f336:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f33d:	85 d2                	test   edx,edx
c000f33f:	74 26                	je     c000f367 <File::seek(unsigned long long)+0x51>
c000f341:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f347:	85 d2                	test   edx,edx
c000f349:	74 1c                	je     c000f367 <File::seek(unsigned long long)+0x51>
c000f34b:	b8 05 00 00 00       	mov    eax,0x5
c000f350:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f354:	74 11                	je     c000f367 <File::seek(unsigned long long)+0x51>
c000f356:	8b 02                	mov    eax,DWORD PTR [edx]
c000f358:	53                   	push   ebx
c000f359:	51                   	push   ecx
c000f35a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f360:	52                   	push   edx
c000f361:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f364:	83 c4 10             	add    esp,0x10
c000f367:	5a                   	pop    edx
c000f368:	5b                   	pop    ebx
c000f369:	5e                   	pop    esi
c000f36a:	c3                   	ret    
c000f36b:	90                   	nop

c000f36c <File::tell(unsigned long long*)>:
c000f36c:	83 ec 0c             	sub    esp,0xc
c000f36f:	b8 0b 00 00 00       	mov    eax,0xb
c000f374:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f378:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f37f:	80 fa 19             	cmp    dl,0x19
c000f382:	77 34                	ja     c000f3b8 <File::tell(unsigned long long*)+0x4c>
c000f384:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f38b:	85 d2                	test   edx,edx
c000f38d:	74 29                	je     c000f3b8 <File::tell(unsigned long long*)+0x4c>
c000f38f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f395:	85 d2                	test   edx,edx
c000f397:	74 1f                	je     c000f3b8 <File::tell(unsigned long long*)+0x4c>
c000f399:	b8 05 00 00 00       	mov    eax,0x5
c000f39e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f3a2:	74 14                	je     c000f3b8 <File::tell(unsigned long long*)+0x4c>
c000f3a4:	50                   	push   eax
c000f3a5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f3ab:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f3b1:	52                   	push   edx
c000f3b2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	83 c4 0c             	add    esp,0xc
c000f3bb:	c3                   	ret    

c000f3bc <File::rewind()>:
c000f3bc:	83 ec 10             	sub    esp,0x10
c000f3bf:	6a 00                	push   0x0
c000f3c1:	6a 00                	push   0x0
c000f3c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3c7:	e8 4a ff ff ff       	call   c000f316 <File::seek(unsigned long long)>
c000f3cc:	83 c4 1c             	add    esp,0x1c
c000f3cf:	c3                   	ret    

c000f3d0 <File::unlink()>:
c000f3d0:	83 ec 0c             	sub    esp,0xc
c000f3d3:	b8 0b 00 00 00       	mov    eax,0xb
c000f3d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f3dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f3e3:	80 f9 19             	cmp    cl,0x19
c000f3e6:	77 2f                	ja     c000f417 <File::unlink()+0x47>
c000f3e8:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f3ef:	85 c9                	test   ecx,ecx
c000f3f1:	74 24                	je     c000f417 <File::unlink()+0x47>
c000f3f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f3f9:	85 c9                	test   ecx,ecx
c000f3fb:	74 1a                	je     c000f417 <File::unlink()+0x47>
c000f3fd:	b8 06 00 00 00       	mov    eax,0x6
c000f402:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f406:	75 0f                	jne    c000f417 <File::unlink()+0x47>
c000f408:	83 c2 0d             	add    edx,0xd
c000f40b:	50                   	push   eax
c000f40c:	50                   	push   eax
c000f40d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f40f:	52                   	push   edx
c000f410:	51                   	push   ecx
c000f411:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	83 c4 0c             	add    esp,0xc
c000f41a:	c3                   	ret    
c000f41b:	90                   	nop

c000f41c <File::rename(char const*)>:
c000f41c:	83 ec 0c             	sub    esp,0xc
c000f41f:	b8 0b 00 00 00       	mov    eax,0xb
c000f424:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f428:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f42f:	80 f9 19             	cmp    cl,0x19
c000f432:	77 32                	ja     c000f466 <File::rename(char const*)+0x4a>
c000f434:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f43b:	85 c9                	test   ecx,ecx
c000f43d:	74 27                	je     c000f466 <File::rename(char const*)+0x4a>
c000f43f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f445:	85 c9                	test   ecx,ecx
c000f447:	74 1d                	je     c000f466 <File::rename(char const*)+0x4a>
c000f449:	b8 06 00 00 00       	mov    eax,0x6
c000f44e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f452:	75 12                	jne    c000f466 <File::rename(char const*)+0x4a>
c000f454:	83 c2 0d             	add    edx,0xd
c000f457:	50                   	push   eax
c000f458:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f45a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f45e:	52                   	push   edx
c000f45f:	51                   	push   ecx
c000f460:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f463:	83 c4 10             	add    esp,0x10
c000f466:	83 c4 0c             	add    esp,0xc
c000f469:	c3                   	ret    

c000f46a <File::chfatattr(unsigned char, unsigned char)>:
c000f46a:	57                   	push   edi
c000f46b:	b8 0b 00 00 00       	mov    eax,0xb
c000f470:	56                   	push   esi
c000f471:	53                   	push   ebx
c000f472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f476:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f47a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f481:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f485:	80 f9 19             	cmp    cl,0x19
c000f488:	77 37                	ja     c000f4c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f48a:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f491:	85 c9                	test   ecx,ecx
c000f493:	74 2c                	je     c000f4c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f495:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f49b:	85 c9                	test   ecx,ecx
c000f49d:	74 22                	je     c000f4c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f49f:	b8 06 00 00 00       	mov    eax,0x6
c000f4a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f4a8:	75 17                	jne    c000f4c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f4aa:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f4ac:	89 f0                	mov    eax,esi
c000f4ae:	83 c2 0d             	add    edx,0xd
c000f4b1:	0f b6 f0             	movzx  esi,al
c000f4b4:	0f b6 db             	movzx  ebx,bl
c000f4b7:	56                   	push   esi
c000f4b8:	53                   	push   ebx
c000f4b9:	52                   	push   edx
c000f4ba:	51                   	push   ecx
c000f4bb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f4be:	83 c4 10             	add    esp,0x10
c000f4c1:	5b                   	pop    ebx
c000f4c2:	5e                   	pop    esi
c000f4c3:	5f                   	pop    edi
c000f4c4:	c3                   	ret    
c000f4c5:	90                   	nop

c000f4c6 <File::exists()>:
c000f4c6:	83 ec 0c             	sub    esp,0xc
c000f4c9:	31 c0                	xor    eax,eax
c000f4cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4cf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f4d6:	80 f9 19             	cmp    cl,0x19
c000f4d9:	77 24                	ja     c000f4ff <File::exists()+0x39>
c000f4db:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f4e2:	85 c9                	test   ecx,ecx
c000f4e4:	74 19                	je     c000f4ff <File::exists()+0x39>
c000f4e6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f4ec:	85 c9                	test   ecx,ecx
c000f4ee:	74 0f                	je     c000f4ff <File::exists()+0x39>
c000f4f0:	83 c2 0d             	add    edx,0xd
c000f4f3:	50                   	push   eax
c000f4f4:	50                   	push   eax
c000f4f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4f7:	52                   	push   edx
c000f4f8:	51                   	push   ecx
c000f4f9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	83 c4 0c             	add    esp,0xc
c000f502:	c3                   	ret    
c000f503:	90                   	nop

c000f504 <File::stat(unsigned long long*, bool*)>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	50                   	push   eax
c000f507:	b8 0b 00 00 00       	mov    eax,0xb
c000f50c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f510:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f514:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f51b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f51f:	80 f9 19             	cmp    cl,0x19
c000f522:	77 3d                	ja     c000f561 <File::stat(unsigned long long*, bool*)+0x5d>
c000f524:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f52b:	85 c9                	test   ecx,ecx
c000f52d:	74 32                	je     c000f561 <File::stat(unsigned long long*, bool*)+0x5d>
c000f52f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f535:	85 c9                	test   ecx,ecx
c000f537:	74 28                	je     c000f561 <File::stat(unsigned long long*, bool*)+0x5d>
c000f539:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f53b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f53f:	74 13                	je     c000f554 <File::stat(unsigned long long*, bool*)+0x50>
c000f541:	83 ec 04             	sub    esp,0x4
c000f544:	56                   	push   esi
c000f545:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f54b:	51                   	push   ecx
c000f54c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f54f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f552:	eb 0a                	jmp    c000f55e <File::stat(unsigned long long*, bool*)+0x5a>
c000f554:	53                   	push   ebx
c000f555:	83 c2 0d             	add    edx,0xd
c000f558:	56                   	push   esi
c000f559:	52                   	push   edx
c000f55a:	51                   	push   ecx
c000f55b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f55e:	83 c4 10             	add    esp,0x10
c000f561:	5a                   	pop    edx
c000f562:	5b                   	pop    ebx
c000f563:	5e                   	pop    esi
c000f564:	c3                   	ret    

c000f565 <getcwd(Process*, char*, int)>:
c000f565:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f569:	31 c0                	xor    eax,eax
c000f56b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f56e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f572:	7d 15                	jge    c000f589 <getcwd(Process*, char*, int)+0x24>
c000f574:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f578:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f57f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f582:	84 c9                	test   cl,cl
c000f584:	74 06                	je     c000f58c <getcwd(Process*, char*, int)+0x27>
c000f586:	40                   	inc    eax
c000f587:	eb e2                	jmp    c000f56b <getcwd(Process*, char*, int)+0x6>
c000f589:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f58c:	31 c0                	xor    eax,eax
c000f58e:	c3                   	ret    

c000f58f <setcwd(Process*, char*)>:
c000f58f:	55                   	push   ebp
c000f590:	57                   	push   edi
c000f591:	56                   	push   esi
c000f592:	53                   	push   ebx
c000f593:	81 ec 20 02 00 00    	sub    esp,0x220
c000f599:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f5a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f5a6:	57                   	push   edi
c000f5a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f5ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f5b2:	56                   	push   esi
c000f5b3:	e8 92 fa ff ff       	call   c000f04a <standardiseFiles(char*, char const*, char const*)>
c000f5b8:	89 34 24             	mov    DWORD PTR [esp],esi
c000f5bb:	e8 65 10 ff ff       	call   c0000625 <strlen>
c000f5c0:	83 c4 10             	add    esp,0x10
c000f5c3:	83 f8 02             	cmp    eax,0x2
c000f5c6:	77 17                	ja     c000f5df <setcwd(Process*, char*)+0x50>
c000f5c8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f5cd:	83 e8 41             	sub    eax,0x41
c000f5d0:	83 f8 19             	cmp    eax,0x19
c000f5d3:	76 24                	jbe    c000f5f9 <setcwd(Process*, char*)+0x6a>
c000f5d5:	b8 03 00 00 00       	mov    eax,0x3
c000f5da:	e9 cb 00 00 00       	jmp    c000f6aa <setcwd(Process*, char*)+0x11b>
c000f5df:	83 ec 0c             	sub    esp,0xc
c000f5e2:	56                   	push   esi
c000f5e3:	e8 3d 10 ff ff       	call   c0000625 <strlen>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	83 f8 03             	cmp    eax,0x3
c000f5ee:	75 33                	jne    c000f623 <setcwd(Process*, char*)+0x94>
c000f5f0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f5f5:	75 2c                	jne    c000f623 <setcwd(Process*, char*)+0x94>
c000f5f7:	eb cf                	jmp    c000f5c8 <setcwd(Process*, char*)+0x39>
c000f5f9:	8b 14 85 60 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8a0]
c000f600:	b8 05 00 00 00       	mov    eax,0x5
c000f605:	85 d2                	test   edx,edx
c000f607:	0f 84 9d 00 00 00    	je     c000f6aa <setcwd(Process*, char*)+0x11b>
c000f60d:	b8 06 00 00 00       	mov    eax,0x6
c000f612:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f619:	0f 84 8b 00 00 00    	je     c000f6aa <setcwd(Process*, char*)+0x11b>
c000f61f:	51                   	push   ecx
c000f620:	51                   	push   ecx
c000f621:	eb 7b                	jmp    c000f69e <setcwd(Process*, char*)+0x10f>
c000f623:	83 ec 0c             	sub    esp,0xc
c000f626:	68 14 01 00 00       	push   0x114
c000f62b:	e8 a6 f5 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c000f630:	83 c4 0c             	add    esp,0xc
c000f633:	89 c3                	mov    ebx,eax
c000f635:	55                   	push   ebp
c000f636:	56                   	push   esi
c000f637:	50                   	push   eax
c000f638:	e8 b7 fb ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c000f63d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f642:	83 c4 0c             	add    esp,0xc
c000f645:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f649:	50                   	push   eax
c000f64a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f64e:	50                   	push   eax
c000f64f:	53                   	push   ebx
c000f650:	e8 af fe ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f65a:	83 f8 02             	cmp    eax,0x2
c000f65d:	75 09                	jne    c000f668 <setcwd(Process*, char*)+0xd9>
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	53                   	push   ebx
c000f663:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f666:	eb 0d                	jmp    c000f675 <setcwd(Process*, char*)+0xe6>
c000f668:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f66b:	85 c0                	test   eax,eax
c000f66d:	74 10                	je     c000f67f <setcwd(Process*, char*)+0xf0>
c000f66f:	83 ec 0c             	sub    esp,0xc
c000f672:	53                   	push   ebx
c000f673:	ff d2                	call   edx
c000f675:	83 c4 10             	add    esp,0x10
c000f678:	b8 01 00 00 00       	mov    eax,0x1
c000f67d:	eb 2b                	jmp    c000f6aa <setcwd(Process*, char*)+0x11b>
c000f67f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f684:	75 10                	jne    c000f696 <setcwd(Process*, char*)+0x107>
c000f686:	83 ec 0c             	sub    esp,0xc
c000f689:	53                   	push   ebx
c000f68a:	ff d2                	call   edx
c000f68c:	83 c4 10             	add    esp,0x10
c000f68f:	b8 02 00 00 00       	mov    eax,0x2
c000f694:	eb 14                	jmp    c000f6aa <setcwd(Process*, char*)+0x11b>
c000f696:	83 ec 0c             	sub    esp,0xc
c000f699:	53                   	push   ebx
c000f69a:	ff d2                	call   edx
c000f69c:	58                   	pop    eax
c000f69d:	5a                   	pop    edx
c000f69e:	56                   	push   esi
c000f69f:	57                   	push   edi
c000f6a0:	e8 02 10 ff ff       	call   c00006a7 <strcpy>
c000f6a5:	83 c4 10             	add    esp,0x10
c000f6a8:	31 c0                	xor    eax,eax
c000f6aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f6b0:	5b                   	pop    ebx
c000f6b1:	5e                   	pop    esi
c000f6b2:	5f                   	pop    edi
c000f6b3:	5d                   	pop    ebp
c000f6b4:	c3                   	ret    
c000f6b5:	90                   	nop

c000f6b6 <Directory::Directory(char const*, Process*)>:
c000f6b6:	83 ec 0c             	sub    esp,0xc
c000f6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6bd:	83 ec 08             	sub    esp,0x8
c000f6c0:	6a 00                	push   0x0
c000f6c2:	50                   	push   eax
c000f6c3:	e8 72 e2 ff ff       	call   c000d93a <UnixFile::UnixFile(int)>
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	ba ec 06 02 c0       	mov    edx,0xc00206ec
c000f6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d4:	89 10                	mov    DWORD PTR [eax],edx
c000f6d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e4:	83 c0 0d             	add    eax,0xd
c000f6e7:	83 ec 04             	sub    esp,0x4
c000f6ea:	52                   	push   edx
c000f6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ef:	50                   	push   eax
c000f6f0:	e8 55 f9 ff ff       	call   c000f04a <standardiseFiles(char*, char const*, char const*)>
c000f6f5:	83 c4 10             	add    esp,0x10
c000f6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6ff:	8d 50 bf             	lea    edx,[eax-0x41]
c000f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f706:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f710:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f714:	90                   	nop
c000f715:	83 c4 0c             	add    esp,0xc
c000f718:	c3                   	ret    
c000f719:	90                   	nop

c000f71a <Directory::open()>:
c000f71a:	53                   	push   ebx
c000f71b:	b8 0b 00 00 00       	mov    eax,0xb
c000f720:	83 ec 08             	sub    esp,0x8
c000f723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f727:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f72e:	80 fa 19             	cmp    dl,0x19
c000f731:	77 3d                	ja     c000f770 <Directory::open()+0x56>
c000f733:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f73a:	85 d2                	test   edx,edx
c000f73c:	74 32                	je     c000f770 <Directory::open()+0x56>
c000f73e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f744:	85 d2                	test   edx,edx
c000f746:	74 28                	je     c000f770 <Directory::open()+0x56>
c000f748:	b8 06 00 00 00       	mov    eax,0x6
c000f74d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f751:	75 1d                	jne    c000f770 <Directory::open()+0x56>
c000f753:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f759:	50                   	push   eax
c000f75a:	8b 02                	mov    eax,DWORD PTR [edx]
c000f75c:	51                   	push   ecx
c000f75d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f760:	51                   	push   ecx
c000f761:	52                   	push   edx
c000f762:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f765:	83 c4 10             	add    esp,0x10
c000f768:	85 c0                	test   eax,eax
c000f76a:	75 04                	jne    c000f770 <Directory::open()+0x56>
c000f76c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f770:	83 c4 08             	add    esp,0x8
c000f773:	5b                   	pop    ebx
c000f774:	c3                   	ret    
c000f775:	90                   	nop

c000f776 <Directory::close()>:
c000f776:	53                   	push   ebx
c000f777:	b8 0b 00 00 00       	mov    eax,0xb
c000f77c:	83 ec 08             	sub    esp,0x8
c000f77f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f783:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f78a:	80 fa 19             	cmp    dl,0x19
c000f78d:	77 41                	ja     c000f7d0 <Directory::close()+0x5a>
c000f78f:	8b 1c 95 60 37 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f796:	85 db                	test   ebx,ebx
c000f798:	74 36                	je     c000f7d0 <Directory::close()+0x5a>
c000f79a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f7a1:	74 2d                	je     c000f7d0 <Directory::close()+0x5a>
c000f7a3:	b8 05 00 00 00       	mov    eax,0x5
c000f7a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7ac:	74 22                	je     c000f7d0 <Directory::close()+0x5a>
c000f7ae:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f7b2:	8b 04 95 60 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c000f7b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f7bf:	53                   	push   ebx
c000f7c0:	53                   	push   ebx
c000f7c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000f7c3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7c9:	50                   	push   eax
c000f7ca:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	83 c4 08             	add    esp,0x8
c000f7d3:	5b                   	pop    ebx
c000f7d4:	c3                   	ret    
c000f7d5:	90                   	nop

c000f7d6 <Directory::unlink()>:
c000f7d6:	83 ec 0c             	sub    esp,0xc
c000f7d9:	b8 0b 00 00 00       	mov    eax,0xb
c000f7de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7e9:	80 f9 19             	cmp    cl,0x19
c000f7ec:	77 2f                	ja     c000f81d <Directory::unlink()+0x47>
c000f7ee:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f7f5:	85 c9                	test   ecx,ecx
c000f7f7:	74 24                	je     c000f81d <Directory::unlink()+0x47>
c000f7f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7ff:	85 c9                	test   ecx,ecx
c000f801:	74 1a                	je     c000f81d <Directory::unlink()+0x47>
c000f803:	b8 06 00 00 00       	mov    eax,0x6
c000f808:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f80c:	75 0f                	jne    c000f81d <Directory::unlink()+0x47>
c000f80e:	83 c2 0d             	add    edx,0xd
c000f811:	50                   	push   eax
c000f812:	50                   	push   eax
c000f813:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f815:	52                   	push   edx
c000f816:	51                   	push   ecx
c000f817:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f81a:	83 c4 10             	add    esp,0x10
c000f81d:	83 c4 0c             	add    esp,0xc
c000f820:	c3                   	ret    
c000f821:	90                   	nop

c000f822 <Directory::rename(char const*)>:
c000f822:	83 ec 0c             	sub    esp,0xc
c000f825:	b8 0b 00 00 00       	mov    eax,0xb
c000f82a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f82e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f835:	80 f9 19             	cmp    cl,0x19
c000f838:	77 32                	ja     c000f86c <Directory::rename(char const*)+0x4a>
c000f83a:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f841:	85 c9                	test   ecx,ecx
c000f843:	74 27                	je     c000f86c <Directory::rename(char const*)+0x4a>
c000f845:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f84b:	85 c9                	test   ecx,ecx
c000f84d:	74 1d                	je     c000f86c <Directory::rename(char const*)+0x4a>
c000f84f:	b8 06 00 00 00       	mov    eax,0x6
c000f854:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f858:	75 12                	jne    c000f86c <Directory::rename(char const*)+0x4a>
c000f85a:	83 c2 0d             	add    edx,0xd
c000f85d:	50                   	push   eax
c000f85e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	52                   	push   edx
c000f865:	51                   	push   ecx
c000f866:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	83 c4 0c             	add    esp,0xc
c000f86f:	c3                   	ret    

c000f870 <Directory::exists()>:
c000f870:	83 ec 0c             	sub    esp,0xc
c000f873:	31 c0                	xor    eax,eax
c000f875:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f879:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f880:	80 f9 19             	cmp    cl,0x19
c000f883:	77 24                	ja     c000f8a9 <Directory::exists()+0x39>
c000f885:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f88c:	85 c9                	test   ecx,ecx
c000f88e:	74 19                	je     c000f8a9 <Directory::exists()+0x39>
c000f890:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f896:	85 c9                	test   ecx,ecx
c000f898:	74 0f                	je     c000f8a9 <Directory::exists()+0x39>
c000f89a:	83 c2 0d             	add    edx,0xd
c000f89d:	50                   	push   eax
c000f89e:	50                   	push   eax
c000f89f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8a1:	52                   	push   edx
c000f8a2:	51                   	push   ecx
c000f8a3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	83 c4 0c             	add    esp,0xc
c000f8ac:	c3                   	ret    
c000f8ad:	90                   	nop

c000f8ae <Directory::read(dirent*)>:
c000f8ae:	83 ec 1c             	sub    esp,0x1c
c000f8b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f8b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f8ba:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8c1:	80 fa 19             	cmp    dl,0x19
c000f8c4:	77 30                	ja     c000f8f6 <Directory::read(dirent*)+0x48>
c000f8c6:	8b 14 95 60 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8a0]
c000f8cd:	85 d2                	test   edx,edx
c000f8cf:	74 25                	je     c000f8f6 <Directory::read(dirent*)+0x48>
c000f8d1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f8d8:	74 1c                	je     c000f8f6 <Directory::read(dirent*)+0x48>
c000f8da:	83 ec 0c             	sub    esp,0xc
c000f8dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8df:	8d 54 24 18          	lea    edx,[esp+0x18]
c000f8e3:	52                   	push   edx
c000f8e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f8e8:	6a 00                	push   0x0
c000f8ea:	68 10 01 00 00       	push   0x110
c000f8ef:	51                   	push   ecx
c000f8f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f8f3:	83 c4 20             	add    esp,0x20
c000f8f6:	83 c4 1c             	add    esp,0x1c
c000f8f9:	c3                   	ret    

c000f8fa <Directory::create()>:
c000f8fa:	83 ec 0c             	sub    esp,0xc
c000f8fd:	b8 0b 00 00 00       	mov    eax,0xb
c000f902:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f906:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f90d:	80 f9 19             	cmp    cl,0x19
c000f910:	77 2f                	ja     c000f941 <Directory::create()+0x47>
c000f912:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c000f919:	85 c9                	test   ecx,ecx
c000f91b:	74 24                	je     c000f941 <Directory::create()+0x47>
c000f91d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f923:	85 c9                	test   ecx,ecx
c000f925:	74 1a                	je     c000f941 <Directory::create()+0x47>
c000f927:	b8 06 00 00 00       	mov    eax,0x6
c000f92c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f930:	75 0f                	jne    c000f941 <Directory::create()+0x47>
c000f932:	83 c2 0d             	add    edx,0xd
c000f935:	50                   	push   eax
c000f936:	50                   	push   eax
c000f937:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f939:	52                   	push   edx
c000f93a:	51                   	push   ecx
c000f93b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	83 c4 0c             	add    esp,0xc
c000f944:	c3                   	ret    
c000f945:	90                   	nop

c000f946 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000f946:	b8 0a 00 00 00       	mov    eax,0xa
c000f94b:	c3                   	ret    

c000f94c <Bus::Bus(char const*)>:
c000f94c:	83 ec 0c             	sub    esp,0xc
c000f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f953:	83 ec 08             	sub    esp,0x8
c000f956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f95a:	50                   	push   eax
c000f95b:	e8 60 09 00 00       	call   c00102c0 <Device::Device(char const*)>
c000f960:	83 c4 10             	add    esp,0x10
c000f963:	ba 08 07 02 c0       	mov    edx,0xc0020708
c000f968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96c:	89 10                	mov    DWORD PTR [eax],edx
c000f96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f972:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000f97c:	90                   	nop
c000f97d:	83 c4 0c             	add    esp,0xc
c000f980:	c3                   	ret    
c000f981:	90                   	nop

c000f982 <Bus::~Bus()>:
c000f982:	83 ec 0c             	sub    esp,0xc
c000f985:	ba 08 07 02 c0       	mov    edx,0xc0020708
c000f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98e:	89 10                	mov    DWORD PTR [eax],edx
c000f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f994:	83 ec 0c             	sub    esp,0xc
c000f997:	50                   	push   eax
c000f998:	e8 d5 05 00 00       	call   c000ff72 <Device::~Device()>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	90                   	nop
c000f9a1:	83 c4 0c             	add    esp,0xc
c000f9a4:	c3                   	ret    
c000f9a5:	90                   	nop

c000f9a6 <Bus::~Bus()>:
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9b0:	e8 cd ff ff ff       	call   c000f982 <Bus::~Bus()>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	83 ec 08             	sub    esp,0x8
c000f9bb:	68 58 01 00 00       	push   0x158
c000f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9c4:	e8 1c f2 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000f9c9:	83 c4 10             	add    esp,0x10
c000f9cc:	83 c4 0c             	add    esp,0xc
c000f9cf:	c3                   	ret    

c000f9d0 <Buzzer::Buzzer(char const*)>:
c000f9d0:	83 ec 0c             	sub    esp,0xc
c000f9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d7:	83 ec 08             	sub    esp,0x8
c000f9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9de:	50                   	push   eax
c000f9df:	e8 dc 08 00 00       	call   c00102c0 <Device::Device(char const*)>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	ba 34 07 02 c0       	mov    edx,0xc0020734
c000f9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f0:	89 10                	mov    DWORD PTR [eax],edx
c000f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fa00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa04:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fa0e:	90                   	nop
c000fa0f:	83 c4 0c             	add    esp,0xc
c000fa12:	c3                   	ret    
c000fa13:	90                   	nop

c000fa14 <Buzzer::~Buzzer()>:
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	ba 34 07 02 c0       	mov    edx,0xc0020734
c000fa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa20:	89 10                	mov    DWORD PTR [eax],edx
c000fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	50                   	push   eax
c000fa2a:	e8 43 05 00 00       	call   c000ff72 <Device::~Device()>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	90                   	nop
c000fa33:	83 c4 0c             	add    esp,0xc
c000fa36:	c3                   	ret    
c000fa37:	90                   	nop

c000fa38 <Buzzer::~Buzzer()>:
c000fa38:	83 ec 0c             	sub    esp,0xc
c000fa3b:	83 ec 0c             	sub    esp,0xc
c000fa3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa42:	e8 cd ff ff ff       	call   c000fa14 <Buzzer::~Buzzer()>
c000fa47:	83 c4 10             	add    esp,0x10
c000fa4a:	83 ec 08             	sub    esp,0x8
c000fa4d:	68 5c 01 00 00       	push   0x15c
c000fa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa56:	e8 8a f1 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	83 c4 0c             	add    esp,0xc
c000fa61:	c3                   	ret    

c000fa62 <Buzzer::stop()>:
c000fa62:	83 ec 14             	sub    esp,0x14
c000fa65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa69:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa6b:	6a 00                	push   0x0
c000fa6d:	50                   	push   eax
c000fa6e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fa71:	83 c4 1c             	add    esp,0x1c
c000fa74:	c3                   	ret    

c000fa75 <beepThread(void*)>:
c000fa75:	53                   	push   ebx
c000fa76:	83 ec 08             	sub    esp,0x8
c000fa79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa7d:	e8 f0 7d 00 00       	call   c0017872 <unlockScheduler()>
c000fa82:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fa87:	52                   	push   edx
c000fa88:	52                   	push   edx
c000fa89:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fa8f:	52                   	push   edx
c000fa90:	50                   	push   eax
c000fa91:	e8 22 83 00 00       	call   c0017db8 <nanoSleep(unsigned long long)>
c000fa96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa99:	e8 c4 ff ff ff       	call   c000fa62 <Buzzer::stop()>
c000fa9e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000faa6:	83 c4 18             	add    esp,0x18
c000faa9:	5b                   	pop    ebx
c000faaa:	e9 4f 82 00 00       	jmp    c0017cfe <blockTask(TaskState)>
c000faaf:	90                   	nop

c000fab0 <Buzzer::beep(int, int, bool)>:
c000fab0:	57                   	push   edi
c000fab1:	56                   	push   esi
c000fab2:	53                   	push   ebx
c000fab3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fab7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fabf:	52                   	push   edx
c000fac0:	52                   	push   edx
c000fac1:	8b 06                	mov    eax,DWORD PTR [esi]
c000fac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fac7:	56                   	push   esi
c000fac8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000facb:	83 c4 10             	add    esp,0x10
c000face:	89 f8                	mov    eax,edi
c000fad0:	84 c0                	test   al,al
c000fad2:	74 1f                	je     c000faf3 <Buzzer::beep(int, int, bool)+0x43>
c000fad4:	50                   	push   eax
c000fad5:	50                   	push   eax
c000fad6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fadc:	99                   	cdq    
c000fadd:	52                   	push   edx
c000fade:	50                   	push   eax
c000fadf:	e8 d4 82 00 00       	call   c0017db8 <nanoSleep(unsigned long long)>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000faeb:	5b                   	pop    ebx
c000faec:	5e                   	pop    esi
c000faed:	5f                   	pop    edi
c000faee:	e9 6f ff ff ff       	jmp    c000fa62 <Buzzer::stop()>
c000faf3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000faf9:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c000fafe:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fb06:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb0a:	c7 44 24 14 75 fa 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fa75
c000fb12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb16:	5b                   	pop    ebx
c000fb17:	5e                   	pop    esi
c000fb18:	5f                   	pop    edi
c000fb19:	e9 7c 7e 00 00       	jmp    c001799a <Process::createThread(void (*)(void*), void*, int)>

c000fb1e <loadClockSettings()>:
c000fb1e:	c7 05 d4 32 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00232d4,0xa
c000fb28:	c6 05 d1 32 02 c0 00 	mov    BYTE PTR ds:0xc00232d1,0x0
c000fb2f:	c6 05 d0 32 02 c0 01 	mov    BYTE PTR ds:0xc00232d0,0x1
c000fb36:	c3                   	ret    
c000fb37:	90                   	nop

c000fb38 <Clock::Clock(char const*)>:
c000fb38:	83 ec 0c             	sub    esp,0xc
c000fb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3f:	83 ec 08             	sub    esp,0x8
c000fb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb46:	50                   	push   eax
c000fb47:	e8 74 07 00 00       	call   c00102c0 <Device::Device(char const*)>
c000fb4c:	83 c4 10             	add    esp,0x10
c000fb4f:	ba 64 07 02 c0       	mov    edx,0xc0020764
c000fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb58:	89 10                	mov    DWORD PTR [eax],edx
c000fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fb68:	90                   	nop
c000fb69:	83 c4 0c             	add    esp,0xc
c000fb6c:	c3                   	ret    
c000fb6d:	90                   	nop

c000fb6e <Clock::~Clock()>:
c000fb6e:	83 ec 0c             	sub    esp,0xc
c000fb71:	ba 64 07 02 c0       	mov    edx,0xc0020764
c000fb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb7a:	89 10                	mov    DWORD PTR [eax],edx
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	83 ec 0c             	sub    esp,0xc
c000fb83:	50                   	push   eax
c000fb84:	e8 e9 03 00 00       	call   c000ff72 <Device::~Device()>
c000fb89:	83 c4 10             	add    esp,0x10
c000fb8c:	90                   	nop
c000fb8d:	83 c4 0c             	add    esp,0xc
c000fb90:	c3                   	ret    
c000fb91:	90                   	nop

c000fb92 <Clock::~Clock()>:
c000fb92:	83 ec 0c             	sub    esp,0xc
c000fb95:	83 ec 0c             	sub    esp,0xc
c000fb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb9c:	e8 cd ff ff ff       	call   c000fb6e <Clock::~Clock()>
c000fba1:	83 c4 10             	add    esp,0x10
c000fba4:	83 ec 08             	sub    esp,0x8
c000fba7:	68 58 01 00 00       	push   0x158
c000fbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbb0:	e8 30 f0 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	83 c4 0c             	add    esp,0xc
c000fbbb:	c3                   	ret    

c000fbbc <Clock::timeInSecondsLocal()>:
c000fbbc:	53                   	push   ebx
c000fbbd:	83 ec 14             	sub    esp,0x14
c000fbc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbc6:	50                   	push   eax
c000fbc7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fbca:	0f b6 0d d0 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232d0
c000fbd1:	03 0d d4 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232d4
c000fbd7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fbdd:	89 cb                	mov    ebx,ecx
c000fbdf:	c1 fb 1f             	sar    ebx,0x1f
c000fbe2:	01 c8                	add    eax,ecx
c000fbe4:	11 da                	adc    edx,ebx
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	31 c9                	xor    ecx,ecx
c000fbeb:	80 3d d1 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232d1,0x0
c000fbf2:	74 05                	je     c000fbf9 <Clock::timeInSecondsLocal()+0x3d>
c000fbf4:	b9 08 07 00 00       	mov    ecx,0x708
c000fbf9:	31 db                	xor    ebx,ebx
c000fbfb:	01 c8                	add    eax,ecx
c000fbfd:	11 da                	adc    edx,ebx
c000fbff:	83 c4 08             	add    esp,0x8
c000fc02:	5b                   	pop    ebx
c000fc03:	c3                   	ret    

c000fc04 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fc04:	57                   	push   edi
c000fc05:	56                   	push   esi
c000fc06:	53                   	push   ebx
c000fc07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc15:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fc18:	0f b6 05 d0 32 02 c0 	movzx  eax,BYTE PTR ds:0xc00232d0
c000fc1f:	03 05 d4 32 02 c0    	add    eax,DWORD PTR ds:0xc00232d4
c000fc25:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fc2b:	99                   	cdq    
c000fc2c:	29 c6                	sub    esi,eax
c000fc2e:	19 d7                	sbb    edi,edx
c000fc30:	89 f0                	mov    eax,esi
c000fc32:	89 fa                	mov    edx,edi
c000fc34:	31 f6                	xor    esi,esi
c000fc36:	80 3d d1 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232d1,0x0
c000fc3d:	74 05                	je     c000fc44 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fc3f:	be 08 07 00 00       	mov    esi,0x708
c000fc44:	31 ff                	xor    edi,edi
c000fc46:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fc4a:	29 f0                	sub    eax,esi
c000fc4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fc50:	19 fa                	sbb    edx,edi
c000fc52:	89 d8                	mov    eax,ebx
c000fc54:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fc58:	5b                   	pop    ebx
c000fc59:	5e                   	pop    esi
c000fc5a:	5f                   	pop    edi
c000fc5b:	ff e0                	jmp    eax

c000fc5d <datetimeToSeconds(datetime_t)>:
c000fc5d:	55                   	push   ebp
c000fc5e:	57                   	push   edi
c000fc5f:	56                   	push   esi
c000fc60:	53                   	push   ebx
c000fc61:	83 ec 14             	sub    esp,0x14
c000fc64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fc68:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fc6c:	89 d3                	mov    ebx,edx
c000fc6e:	0f b6 c6             	movzx  eax,dh
c000fc71:	c1 eb 10             	shr    ebx,0x10
c000fc74:	48                   	dec    eax
c000fc75:	66 81 eb 6c 07       	sub    bx,0x76c
c000fc7a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fc7e:	0f b6 f5             	movzx  esi,ch
c000fc81:	89 cf                	mov    edi,ecx
c000fc83:	6b f6 3c             	imul   esi,esi,0x3c
c000fc86:	c1 ef 10             	shr    edi,0x10
c000fc89:	0f b6 c9             	movzx  ecx,cl
c000fc8c:	89 f8                	mov    eax,edi
c000fc8e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fc94:	0f b6 f8             	movzx  edi,al
c000fc97:	0f b6 d2             	movzx  edx,dl
c000fc9a:	01 fe                	add    esi,edi
c000fc9c:	01 f1                	add    ecx,esi
c000fc9e:	0f b7 f3             	movzx  esi,bx
c000fca1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fca5:	c1 f9 1f             	sar    ecx,0x1f
c000fca8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fcad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fcb1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fcb6:	8b 0c 8d a0 07 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf860]
c000fcbd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fcc1:	76 29                	jbe    c000fcec <datetimeToSeconds(datetime_t)+0x8f>
c000fcc3:	f6 c3 03             	test   bl,0x3
c000fcc6:	75 24                	jne    c000fcec <datetimeToSeconds(datetime_t)+0x8f>
c000fcc8:	31 d2                	xor    edx,edx
c000fcca:	bf 64 00 00 00       	mov    edi,0x64
c000fccf:	89 d8                	mov    eax,ebx
c000fcd1:	66 f7 f7             	div    di
c000fcd4:	66 85 d2             	test   dx,dx
c000fcd7:	75 12                	jne    c000fceb <datetimeToSeconds(datetime_t)+0x8e>
c000fcd9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fcdf:	bf 90 01 00 00       	mov    edi,0x190
c000fce4:	99                   	cdq    
c000fce5:	f7 ff                	idiv   edi
c000fce7:	85 d2                	test   edx,edx
c000fce9:	75 01                	jne    c000fcec <datetimeToSeconds(datetime_t)+0x8f>
c000fceb:	41                   	inc    ecx
c000fcec:	66 83 fb 46          	cmp    bx,0x46
c000fcf0:	76 45                	jbe    c000fd37 <datetimeToSeconds(datetime_t)+0xda>
c000fcf2:	bb 46 00 00 00       	mov    ebx,0x46
c000fcf7:	bf 64 00 00 00       	mov    edi,0x64
c000fcfc:	bd 90 01 00 00       	mov    ebp,0x190
c000fd01:	b8 6d 01 00 00       	mov    eax,0x16d
c000fd06:	f6 c3 03             	test   bl,0x3
c000fd09:	75 23                	jne    c000fd2e <datetimeToSeconds(datetime_t)+0xd1>
c000fd0b:	89 d8                	mov    eax,ebx
c000fd0d:	99                   	cdq    
c000fd0e:	f7 ff                	idiv   edi
c000fd10:	b8 6e 01 00 00       	mov    eax,0x16e
c000fd15:	85 d2                	test   edx,edx
c000fd17:	75 15                	jne    c000fd2e <datetimeToSeconds(datetime_t)+0xd1>
c000fd19:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fd1f:	99                   	cdq    
c000fd20:	f7 fd                	idiv   ebp
c000fd22:	83 fa 01             	cmp    edx,0x1
c000fd25:	19 c0                	sbb    eax,eax
c000fd27:	f7 d0                	not    eax
c000fd29:	05 6e 01 00 00       	add    eax,0x16e
c000fd2e:	01 c1                	add    ecx,eax
c000fd30:	43                   	inc    ebx
c000fd31:	39 f3                	cmp    ebx,esi
c000fd33:	7c cc                	jl     c000fd01 <datetimeToSeconds(datetime_t)+0xa4>
c000fd35:	eb 35                	jmp    c000fd6c <datetimeToSeconds(datetime_t)+0x10f>
c000fd37:	74 33                	je     c000fd6c <datetimeToSeconds(datetime_t)+0x10f>
c000fd39:	b8 45 00 00 00       	mov    eax,0x45
c000fd3e:	89 c2                	mov    edx,eax
c000fd40:	83 e2 03             	and    edx,0x3
c000fd43:	39 f0                	cmp    eax,esi
c000fd45:	7e 0f                	jle    c000fd56 <datetimeToSeconds(datetime_t)+0xf9>
c000fd47:	83 fa 01             	cmp    edx,0x1
c000fd4a:	19 d2                	sbb    edx,edx
c000fd4c:	48                   	dec    eax
c000fd4d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000fd54:	eb e8                	jmp    c000fd3e <datetimeToSeconds(datetime_t)+0xe1>
c000fd56:	b8 6d 01 00 00       	mov    eax,0x16d
c000fd5b:	85 d2                	test   edx,edx
c000fd5d:	75 0b                	jne    c000fd6a <datetimeToSeconds(datetime_t)+0x10d>
c000fd5f:	66 83 fb 01          	cmp    bx,0x1
c000fd63:	19 c0                	sbb    eax,eax
c000fd65:	05 6e 01 00 00       	add    eax,0x16e
c000fd6a:	29 c1                	sub    ecx,eax
c000fd6c:	b8 80 51 01 00       	mov    eax,0x15180
c000fd71:	f7 e9                	imul   ecx
c000fd73:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fd77:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fd7b:	83 c4 14             	add    esp,0x14
c000fd7e:	5b                   	pop    ebx
c000fd7f:	5e                   	pop    esi
c000fd80:	5f                   	pop    edi
c000fd81:	5d                   	pop    ebp
c000fd82:	c3                   	ret    
c000fd83:	90                   	nop

c000fd84 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000fd84:	57                   	push   edi
c000fd85:	56                   	push   esi
c000fd86:	53                   	push   ebx
c000fd87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd8b:	8b 06                	mov    eax,DWORD PTR [esi]
c000fd8d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000fd90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd98:	e8 c0 fe ff ff       	call   c000fc5d <datetimeToSeconds(datetime_t)>
c000fd9d:	59                   	pop    ecx
c000fd9e:	0f b6 0d d0 32 02 c0 	movzx  ecx,BYTE PTR ds:0xc00232d0
c000fda5:	5b                   	pop    ebx
c000fda6:	03 0d d4 32 02 c0    	add    ecx,DWORD PTR ds:0xc00232d4
c000fdac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fdb2:	89 cb                	mov    ebx,ecx
c000fdb4:	c1 fb 1f             	sar    ebx,0x1f
c000fdb7:	29 c8                	sub    eax,ecx
c000fdb9:	19 da                	sbb    edx,ebx
c000fdbb:	31 c9                	xor    ecx,ecx
c000fdbd:	80 3d d1 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232d1,0x0
c000fdc4:	74 05                	je     c000fdcb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000fdc6:	b9 08 07 00 00       	mov    ecx,0x708
c000fdcb:	31 db                	xor    ebx,ebx
c000fdcd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fdd1:	29 c8                	sub    eax,ecx
c000fdd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fdd7:	19 da                	sbb    edx,ebx
c000fdd9:	89 f8                	mov    eax,edi
c000fddb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fddf:	5b                   	pop    ebx
c000fde0:	5e                   	pop    esi
c000fde1:	5f                   	pop    edi
c000fde2:	ff e0                	jmp    eax

c000fde4 <secondsToDatetime(unsigned long long)>:
c000fde4:	55                   	push   ebp
c000fde5:	57                   	push   edi
c000fde6:	56                   	push   esi
c000fde7:	53                   	push   ebx
c000fde8:	83 ec 1c             	sub    esp,0x1c
c000fdeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fdef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdf3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000fdf7:	6a 00                	push   0x0
c000fdf9:	68 80 51 01 00       	push   0x15180
c000fdfe:	55                   	push   ebp
c000fdff:	57                   	push   edi
c000fe00:	e8 17 e4 00 00       	call   c001e21c <__udivdi3>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000fe0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe12:	6a 00                	push   0x0
c000fe14:	68 80 51 01 00       	push   0x15180
c000fe19:	55                   	push   ebp
c000fe1a:	57                   	push   edi
c000fe1b:	bf 10 0e 00 00       	mov    edi,0xe10
c000fe20:	e8 f7 e4 00 00       	call   c001e31c <__umoddi3>
c000fe25:	83 c4 10             	add    esp,0x10
c000fe28:	99                   	cdq    
c000fe29:	f7 ff                	idiv   edi
c000fe2b:	bf 3c 00 00 00       	mov    edi,0x3c
c000fe30:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000fe33:	89 d0                	mov    eax,edx
c000fe35:	99                   	cdq    
c000fe36:	f7 ff                	idiv   edi
c000fe38:	85 db                	test   ebx,ebx
c000fe3a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000fe3d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000fe40:	79 11                	jns    c000fe53 <secondsToDatetime(unsigned long long)+0x6f>
c000fe42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe46:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000fe4c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000fe51:	eb 07                	jmp    c000fe5a <secondsToDatetime(unsigned long long)+0x76>
c000fe53:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000fe58:	89 d8                	mov    eax,ebx
c000fe5a:	bf b4 05 00 00       	mov    edi,0x5b4
c000fe5f:	99                   	cdq    
c000fe60:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000fe65:	f7 f9                	idiv   ecx
c000fe67:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000fe6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe70:	31 d2                	xor    edx,edx
c000fe72:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000fe7a:	01 c3                	add    ebx,eax
c000fe7c:	89 d8                	mov    eax,ebx
c000fe7e:	f7 f1                	div    ecx
c000fe80:	31 d2                	xor    edx,edx
c000fe82:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000fe85:	89 d8                	mov    eax,ebx
c000fe87:	f7 f7                	div    edi
c000fe89:	31 d2                	xor    edx,edx
c000fe8b:	29 c1                	sub    ecx,eax
c000fe8d:	89 d8                	mov    eax,ebx
c000fe8f:	f7 f5                	div    ebp
c000fe91:	bd 6d 01 00 00       	mov    ebp,0x16d
c000fe96:	29 c1                	sub    ecx,eax
c000fe98:	31 d2                	xor    edx,edx
c000fe9a:	89 c8                	mov    eax,ecx
c000fe9c:	f7 f5                	div    ebp
c000fe9e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000fea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fea7:	31 d2                	xor    edx,edx
c000fea9:	89 c8                	mov    eax,ecx
c000feab:	f7 f5                	div    ebp
c000fead:	31 d2                	xor    edx,edx
c000feaf:	01 c3                	add    ebx,eax
c000feb1:	89 c8                	mov    eax,ecx
c000feb3:	f7 f7                	div    edi
c000feb5:	bf 99 00 00 00       	mov    edi,0x99
c000feba:	29 c3                	sub    ebx,eax
c000febc:	31 d2                	xor    edx,edx
c000febe:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000fec6:	29 c3                	sub    ebx,eax
c000fec8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000fecb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000fece:	bb 05 00 00 00       	mov    ebx,0x5
c000fed3:	83 c1 02             	add    ecx,0x2
c000fed6:	89 c8                	mov    eax,ecx
c000fed8:	f7 f7                	div    edi
c000feda:	31 d2                	xor    edx,edx
c000fedc:	89 c7                	mov    edi,eax
c000fede:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000fee4:	83 c0 02             	add    eax,0x2
c000fee7:	f7 f3                	div    ebx
c000fee9:	89 eb                	mov    ebx,ebp
c000feeb:	29 c3                	sub    ebx,eax
c000feed:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000fef3:	88 1e                	mov    BYTE PTR [esi],bl
c000fef5:	19 c0                	sbb    eax,eax
c000fef7:	31 d2                	xor    edx,edx
c000fef9:	83 e0 0c             	and    eax,0xc
c000fefc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ff00:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ff08:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ff0c:	83 f9 01             	cmp    ecx,0x1
c000ff0f:	0f 96 c2             	setbe  dl
c000ff12:	41                   	inc    ecx
c000ff13:	01 d0                	add    eax,edx
c000ff15:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ff18:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ff1c:	83 c4 1c             	add    esp,0x1c
c000ff1f:	89 f0                	mov    eax,esi
c000ff21:	5b                   	pop    ebx
c000ff22:	5e                   	pop    esi
c000ff23:	5f                   	pop    edi
c000ff24:	5d                   	pop    ebp
c000ff25:	c2 04 00             	ret    0x4

c000ff28 <Clock::timeInDatetimeLocal()>:
c000ff28:	53                   	push   ebx
c000ff29:	83 ec 14             	sub    esp,0x14
c000ff2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ff30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ff34:	e8 83 fc ff ff       	call   c000fbbc <Clock::timeInSecondsLocal()>
c000ff39:	83 c4 0c             	add    esp,0xc
c000ff3c:	52                   	push   edx
c000ff3d:	50                   	push   eax
c000ff3e:	53                   	push   ebx
c000ff3f:	e8 a0 fe ff ff       	call   c000fde4 <secondsToDatetime(unsigned long long)>
c000ff44:	89 d8                	mov    eax,ebx
c000ff46:	83 c4 14             	add    esp,0x14
c000ff49:	5b                   	pop    ebx
c000ff4a:	c2 04 00             	ret    0x4
c000ff4d:	90                   	nop

c000ff4e <Device::hibernate()>:
c000ff4e:	c3                   	ret    
c000ff4f:	90                   	nop

c000ff50 <Device::wake()>:
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <Device::detect()>:
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <Device::disableLegacy()>:
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <Device::powerSaving(PowerSavingLevel)>:
c000ff56:	c3                   	ret    
c000ff57:	90                   	nop

c000ff58 <DriverlessDevice::close(int, int, void*)>:
c000ff58:	31 c0                	xor    eax,eax
c000ff5a:	c3                   	ret    
c000ff5b:	90                   	nop

c000ff5c <DriverlessDevice::detect()>:
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <DriverlessDevice::open(int, int, void*)>:
c000ff5e:	83 ec 18             	sub    esp,0x18
c000ff61:	68 d0 07 02 c0       	push   0xc00207d0
c000ff66:	e8 ef 49 00 00       	call   c001495a <Krnl::panic(char const*)>
c000ff6b:	83 c8 ff             	or     eax,0xffffffff
c000ff6e:	83 c4 1c             	add    esp,0x1c
c000ff71:	c3                   	ret    

c000ff72 <Device::~Device()>:
c000ff72:	ba f8 07 02 c0       	mov    edx,0xc00207f8
c000ff77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff7b:	89 10                	mov    DWORD PTR [eax],edx
c000ff7d:	90                   	nop
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <Device::~Device()>:
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ff87:	e8 e6 ff ff ff       	call   c000ff72 <Device::~Device()>
c000ff8c:	83 c4 04             	add    esp,0x4
c000ff8f:	83 ec 08             	sub    esp,0x8
c000ff92:	68 58 01 00 00       	push   0x158
c000ff97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9b:	e8 45 ec ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	83 c4 0c             	add    esp,0xc
c000ffa6:	c3                   	ret    
c000ffa7:	90                   	nop

c000ffa8 <Device::findAndLoadDriver()>:
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <Device::preOpenPCI(PCIDeviceInfo)>:
c000ffaa:	57                   	push   edi
c000ffab:	b9 09 00 00 00       	mov    ecx,0x9
c000ffb0:	56                   	push   esi
c000ffb1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ffb5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ffb9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ffc3:	81 c7 18 01 00 00    	add    edi,0x118
c000ffc9:	fc                   	cld    
c000ffca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffcc:	5e                   	pop    esi
c000ffcd:	5f                   	pop    edi
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <Device::preOpenACPI(void*, char*, char*)>:
c000ffd0:	56                   	push   esi
c000ffd1:	53                   	push   ebx
c000ffd2:	83 ec 08             	sub    esp,0x8
c000ffd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ffdd:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c000ffe7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffeb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c000fff1:	6a 1e                	push   0x1e
c000fff3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c000fff9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fffd:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010003:	50                   	push   eax
c0010004:	e8 c9 05 ff ff       	call   c00005d2 <memcpy>
c0010009:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001000d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010011:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010019:	83 c4 14             	add    esp,0x14
c001001c:	5b                   	pop    ebx
c001001d:	5e                   	pop    esi
c001001e:	e9 af 05 ff ff       	jmp    c00005d2 <memcpy>
c0010023:	90                   	nop

c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010024:	55                   	push   ebp
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001002f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010033:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010037:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001003b:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010040:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010047:	75 0b                	jne    c0010054 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010049:	8b 00                	mov    eax,DWORD PTR [eax]
c001004b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001004f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010052:	eb 24                	jmp    c0010078 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010054:	e8 fb 3b 00 00       	call   c0013c54 <thisCPU()>
c0010059:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001005f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010061:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010065:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010069:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001006d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010071:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010075:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010078:	83 c4 0c             	add    esp,0xc
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	5d                   	pop    ebp
c001007f:	ff e0                	jmp    eax
c0010081:	90                   	nop

c0010082 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010082:	57                   	push   edi
c0010083:	56                   	push   esi
c0010084:	53                   	push   ebx
c0010085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010089:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001008d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010091:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010096:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001009d:	75 0b                	jne    c00100aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001009f:	8b 00                	mov    eax,DWORD PTR [eax]
c00100a1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00100a5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00100a8:	eb 20                	jmp    c00100ca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00100aa:	e8 a5 3b 00 00       	call   c0013c54 <thisCPU()>
c00100af:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00100b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00100b7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00100bb:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00100bf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00100c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100c7:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00100ca:	5b                   	pop    ebx
c00100cb:	5e                   	pop    esi
c00100cc:	5f                   	pop    edi
c00100cd:	ff e0                	jmp    eax
c00100cf:	90                   	nop

c00100d0 <Device::addChild(Device*)>:
c00100d0:	53                   	push   ebx
c00100d1:	83 ec 08             	sub    esp,0x8
c00100d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100dc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00100e2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00100e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100ea:	85 d2                	test   edx,edx
c00100ec:	74 04                	je     c00100f2 <Device::addChild(Device*)+0x22>
c00100ee:	89 d3                	mov    ebx,edx
c00100f0:	eb f6                	jmp    c00100e8 <Device::addChild(Device*)+0x18>
c00100f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100f5:	83 ec 0c             	sub    esp,0xc
c00100f8:	6a 08                	push   0x8
c00100fa:	e8 d7 ea ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00100ff:	89 03                	mov    DWORD PTR [ebx],eax
c0010101:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010107:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001010e:	83 c4 18             	add    esp,0x18
c0010111:	5b                   	pop    ebx
c0010112:	c3                   	ret    
c0010113:	90                   	nop

c0010114 <Device::removeAllChildren()>:
c0010114:	56                   	push   esi
c0010115:	53                   	push   ebx
c0010116:	52                   	push   edx
c0010117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001011b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010121:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010124:	74 17                	je     c001013d <Device::removeAllChildren()+0x29>
c0010126:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010129:	85 c0                	test   eax,eax
c001012b:	74 0c                	je     c0010139 <Device::removeAllChildren()+0x25>
c001012d:	83 ec 0c             	sub    esp,0xc
c0010130:	8b 10                	mov    edx,DWORD PTR [eax]
c0010132:	50                   	push   eax
c0010133:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010136:	83 c4 10             	add    esp,0x10
c0010139:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001013b:	eb e4                	jmp    c0010121 <Device::removeAllChildren()+0xd>
c001013d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010143:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010149:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001014f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010156:	58                   	pop    eax
c0010157:	5b                   	pop    ebx
c0010158:	5e                   	pop    esi
c0010159:	c3                   	ret    

c001015a <Device::hibernateAll()>:
c001015a:	53                   	push   ebx
c001015b:	83 ec 14             	sub    esp,0x14
c001015e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010162:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010164:	53                   	push   ebx
c0010165:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010168:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001016e:	83 c4 10             	add    esp,0x10
c0010171:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010174:	74 0f                	je     c0010185 <Device::hibernateAll()+0x2b>
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001017c:	e8 d9 ff ff ff       	call   c001015a <Device::hibernateAll()>
c0010181:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010183:	eb e9                	jmp    c001016e <Device::hibernateAll()+0x14>
c0010185:	83 c4 08             	add    esp,0x8
c0010188:	5b                   	pop    ebx
c0010189:	c3                   	ret    

c001018a <Device::wakeAll()>:
c001018a:	53                   	push   ebx
c001018b:	83 ec 14             	sub    esp,0x14
c001018e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010192:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010194:	53                   	push   ebx
c0010195:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010198:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001019e:	83 c4 10             	add    esp,0x10
c00101a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00101a4:	74 0f                	je     c00101b5 <Device::wakeAll()+0x2b>
c00101a6:	83 ec 0c             	sub    esp,0xc
c00101a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00101ac:	e8 d9 ff ff ff       	call   c001018a <Device::wakeAll()>
c00101b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00101b3:	eb e9                	jmp    c001019e <Device::wakeAll()+0x14>
c00101b5:	83 c4 08             	add    esp,0x8
c00101b8:	5b                   	pop    ebx
c00101b9:	c3                   	ret    

c00101ba <Device::detectAll()>:
c00101ba:	53                   	push   ebx
c00101bb:	83 ec 14             	sub    esp,0x14
c00101be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00101c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00101c4:	53                   	push   ebx
c00101c5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00101c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00101ce:	83 c4 10             	add    esp,0x10
c00101d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00101d4:	74 0f                	je     c00101e5 <Device::detectAll()+0x2b>
c00101d6:	83 ec 0c             	sub    esp,0xc
c00101d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00101dc:	e8 d9 ff ff ff       	call   c00101ba <Device::detectAll()>
c00101e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00101e3:	eb e9                	jmp    c00101ce <Device::detectAll()+0x14>
c00101e5:	83 c4 08             	add    esp,0x8
c00101e8:	5b                   	pop    ebx
c00101e9:	c3                   	ret    

c00101ea <Device::disableLegacyAll()>:
c00101ea:	53                   	push   ebx
c00101eb:	83 ec 14             	sub    esp,0x14
c00101ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00101f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00101f4:	53                   	push   ebx
c00101f5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00101f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010204:	74 0f                	je     c0010215 <Device::disableLegacyAll()+0x2b>
c0010206:	83 ec 0c             	sub    esp,0xc
c0010209:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001020c:	e8 d9 ff ff ff       	call   c00101ea <Device::disableLegacyAll()>
c0010211:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010213:	eb e9                	jmp    c00101fe <Device::disableLegacyAll()+0x14>
c0010215:	83 c4 08             	add    esp,0x8
c0010218:	5b                   	pop    ebx
c0010219:	c3                   	ret    

c001021a <Device::loadDriversForAll()>:
c001021a:	53                   	push   ebx
c001021b:	83 ec 08             	sub    esp,0x8
c001021e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010222:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010228:	8b 18                	mov    ebx,DWORD PTR [eax]
c001022a:	85 db                	test   ebx,ebx
c001022c:	74 12                	je     c0010240 <Device::loadDriversForAll()+0x26>
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010234:	e8 e1 ff ff ff       	call   c001021a <Device::loadDriversForAll()>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	89 d8                	mov    eax,ebx
c001023e:	eb e8                	jmp    c0010228 <Device::loadDriversForAll()+0xe>
c0010240:	83 c4 08             	add    esp,0x8
c0010243:	5b                   	pop    ebx
c0010244:	c3                   	ret    
c0010245:	90                   	nop

c0010246 <Device::closeAll()>:
c0010246:	53                   	push   ebx
c0010247:	83 ec 08             	sub    esp,0x8
c001024a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001024e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010250:	6a 00                	push   0x0
c0010252:	6a 00                	push   0x0
c0010254:	6a 00                	push   0x0
c0010256:	53                   	push   ebx
c0010257:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001025a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010260:	83 c4 10             	add    esp,0x10
c0010263:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010266:	74 0f                	je     c0010277 <Device::closeAll()+0x31>
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001026e:	e8 d3 ff ff ff       	call   c0010246 <Device::closeAll()>
c0010273:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010275:	eb e9                	jmp    c0010260 <Device::closeAll()+0x1a>
c0010277:	83 c4 08             	add    esp,0x8
c001027a:	5b                   	pop    ebx
c001027b:	c3                   	ret    

c001027c <Device::powerSavingAll(PowerSavingLevel)>:
c001027c:	56                   	push   esi
c001027d:	53                   	push   ebx
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010285:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010289:	8b 03                	mov    eax,DWORD PTR [ebx]
c001028b:	56                   	push   esi
c001028c:	53                   	push   ebx
c001028d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0010290:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010296:	83 c4 10             	add    esp,0x10
c0010299:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001029c:	74 0f                	je     c00102ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001029e:	52                   	push   edx
c001029f:	52                   	push   edx
c00102a0:	56                   	push   esi
c00102a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102a4:	e8 d3 ff ff ff       	call   c001027c <Device::powerSavingAll(PowerSavingLevel)>
c00102a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102ab:	eb e9                	jmp    c0010296 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00102ad:	58                   	pop    eax
c00102ae:	5b                   	pop    ebx
c00102af:	5e                   	pop    esi
c00102b0:	c3                   	ret    
c00102b1:	90                   	nop

c00102b2 <Device::setName(char const*)>:
c00102b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00102ba:	e9 e8 03 ff ff       	jmp    c00006a7 <strcpy>
c00102bf:	90                   	nop

c00102c0 <Device::Device(char const*)>:
c00102c0:	83 ec 0c             	sub    esp,0xc
c00102c3:	ba f8 07 02 c0       	mov    edx,0xc00207f8
c00102c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102cc:	89 10                	mov    DWORD PTR [eax],edx
c00102ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00102dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00102ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00102f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010306:	83 ec 08             	sub    esp,0x8
c0010309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010311:	e8 9c ff ff ff       	call   c00102b2 <Device::setName(char const*)>
c0010316:	83 c4 10             	add    esp,0x10
c0010319:	83 ec 0c             	sub    esp,0xc
c001031c:	6a 08                	push   0x8
c001031e:	e8 b3 e8 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001032c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010333:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010337:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001033d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010341:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010347:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001034d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010351:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010357:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001035e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010362:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001036d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010378:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010386:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010394:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001039e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00103ac:	90                   	nop
c00103ad:	83 c4 0c             	add    esp,0xc
c00103b0:	c3                   	ret    
c00103b1:	90                   	nop

c00103b2 <Device::getName()>:
c00103b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103b6:	05 d0 00 00 00       	add    eax,0xd0
c00103bb:	c3                   	ret    

c00103bc <DriverlessDevice::DriverlessDevice(char const*)>:
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103c3:	83 ec 08             	sub    esp,0x8
c00103c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ca:	50                   	push   eax
c00103cb:	e8 f0 fe ff ff       	call   c00102c0 <Device::Device(char const*)>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	ba 24 08 02 c0       	mov    edx,0xc0020824
c00103d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103dc:	89 10                	mov    DWORD PTR [eax],edx
c00103de:	90                   	nop
c00103df:	83 c4 0c             	add    esp,0xc
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00103e4:	57                   	push   edi
c00103e5:	56                   	push   esi
c00103e6:	53                   	push   ebx
c00103e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00103f9:	75 0c                	jne    c0010407 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00103fb:	52                   	push   edx
c00103fc:	52                   	push   edx
c00103fd:	53                   	push   ebx
c00103fe:	56                   	push   esi
c00103ff:	e8 30 e3 00 00       	call   c001e734 <LinkedList<Device>::addElement(Device*)>
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001040d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010410:	74 12                	je     c0010424 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010412:	50                   	push   eax
c0010413:	57                   	push   edi
c0010414:	56                   	push   esi
c0010415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010418:	e8 c7 ff ff ff       	call   c00103e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001041d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	eb e9                	jmp    c001040d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010424:	5b                   	pop    ebx
c0010425:	5e                   	pop    esi
c0010426:	5f                   	pop    edi
c0010427:	c3                   	ret    

c0010428 <getDevicesOfType(DeviceType)>:
c0010428:	53                   	push   ebx
c0010429:	83 ec 14             	sub    esp,0x14
c001042c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010430:	53                   	push   ebx
c0010431:	e8 da e3 00 00       	call   c001e810 <LinkedList<Device>::LinkedList()>
c0010436:	83 c4 0c             	add    esp,0xc
c0010439:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001043d:	53                   	push   ebx
c001043e:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c0010444:	e8 9b ff ff ff       	call   c00103e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010449:	89 d8                	mov    eax,ebx
c001044b:	83 c4 18             	add    esp,0x18
c001044e:	5b                   	pop    ebx
c001044f:	c2 04 00             	ret    0x4

c0010452 <HardDiskController::HardDiskController(char const*)>:
c0010452:	83 ec 0c             	sub    esp,0xc
c0010455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010459:	83 ec 08             	sub    esp,0x8
c001045c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010460:	50                   	push   eax
c0010461:	e8 5a fe ff ff       	call   c00102c0 <Device::Device(char const*)>
c0010466:	83 c4 10             	add    esp,0x10
c0010469:	ba 50 08 02 c0       	mov    edx,0xc0020850
c001046e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010472:	89 10                	mov    DWORD PTR [eax],edx
c0010474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010478:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010482:	90                   	nop
c0010483:	83 c4 0c             	add    esp,0xc
c0010486:	c3                   	ret    
c0010487:	90                   	nop

c0010488 <HardDiskController::~HardDiskController()>:
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	ba 50 08 02 c0       	mov    edx,0xc0020850
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	89 10                	mov    DWORD PTR [eax],edx
c0010496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049a:	83 ec 0c             	sub    esp,0xc
c001049d:	50                   	push   eax
c001049e:	e8 cf fa ff ff       	call   c000ff72 <Device::~Device()>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	90                   	nop
c00104a7:	83 c4 0c             	add    esp,0xc
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <HardDiskController::~HardDiskController()>:
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b6:	e8 cd ff ff ff       	call   c0010488 <HardDiskController::~HardDiskController()>
c00104bb:	83 c4 10             	add    esp,0x10
c00104be:	83 ec 08             	sub    esp,0x8
c00104c1:	68 58 01 00 00       	push   0x158
c00104c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ca:	e8 16 e7 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c00104cf:	83 c4 10             	add    esp,0x10
c00104d2:	83 c4 0c             	add    esp,0xc
c00104d5:	c3                   	ret    

c00104d6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e4:	50                   	push   eax
c00104e5:	e8 d6 fd ff ff       	call   c00102c0 <Device::Device(char const*)>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	ba 7c 08 02 c0       	mov    edx,0xc002087c
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	89 10                	mov    DWORD PTR [eax],edx
c00104f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010507:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001051c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010520:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010524:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <PhysicalDisk::startCache()>:
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	83 ec 10             	sub    esp,0x10
c0010543:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010547:	6a 30                	push   0x30
c0010549:	e8 88 e6 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001054e:	89 c6                	mov    esi,eax
c0010550:	58                   	pop    eax
c0010551:	5a                   	pop    edx
c0010552:	53                   	push   ebx
c0010553:	56                   	push   esi
c0010554:	e8 6d 1e 00 00       	call   c00123c6 <VCache::VCache(PhysicalDisk*)>
c0010559:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001055f:	83 c4 14             	add    esp,0x14
c0010562:	5b                   	pop    ebx
c0010563:	5e                   	pop    esi
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <PhysicalDisk::~PhysicalDisk()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	ba 7c 08 02 c0       	mov    edx,0xc002087c
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	89 10                	mov    DWORD PTR [eax],edx
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	50                   	push   eax
c001057c:	e8 f1 f9 ff ff       	call   c000ff72 <Device::~Device()>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	90                   	nop
c0010585:	83 c4 0c             	add    esp,0xc
c0010588:	c3                   	ret    
c0010589:	90                   	nop

c001058a <PhysicalDisk::~PhysicalDisk()>:
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 cd ff ff ff       	call   c0010566 <PhysicalDisk::~PhysicalDisk()>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	83 ec 08             	sub    esp,0x8
c001059f:	68 6c 01 00 00       	push   0x16c
c00105a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a8:	e8 38 e6 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	83 c4 0c             	add    esp,0xc
c00105b3:	c3                   	ret    

c00105b4 <FPU::FPU(char const*)>:
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105bb:	83 ec 08             	sub    esp,0x8
c00105be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c2:	50                   	push   eax
c00105c3:	e8 f8 fc ff ff       	call   c00102c0 <Device::Device(char const*)>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	ba bc 08 02 c0       	mov    edx,0xc00208bc
c00105d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d4:	89 10                	mov    DWORD PTR [eax],edx
c00105d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105da:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00105e4:	90                   	nop
c00105e5:	83 c4 0c             	add    esp,0xc
c00105e8:	c3                   	ret    
c00105e9:	90                   	nop

c00105ea <FPU::~FPU()>:
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	ba bc 08 02 c0       	mov    edx,0xc00208bc
c00105f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f6:	89 10                	mov    DWORD PTR [eax],edx
c00105f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	50                   	push   eax
c0010600:	e8 6d f9 ff ff       	call   c000ff72 <Device::~Device()>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	90                   	nop
c0010609:	83 c4 0c             	add    esp,0xc
c001060c:	c3                   	ret    
c001060d:	90                   	nop

c001060e <FPU::~FPU()>:
c001060e:	83 ec 0c             	sub    esp,0xc
c0010611:	83 ec 0c             	sub    esp,0xc
c0010614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010618:	e8 cd ff ff ff       	call   c00105ea <FPU::~FPU()>
c001061d:	83 c4 10             	add    esp,0x10
c0010620:	83 ec 08             	sub    esp,0x8
c0010623:	68 58 01 00 00       	push   0x158
c0010628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062c:	e8 b4 e5 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0010631:	83 c4 10             	add    esp,0x10
c0010634:	83 c4 0c             	add    esp,0xc
c0010637:	c3                   	ret    

c0010638 <setupFPU()>:
c0010638:	53                   	push   ebx
c0010639:	83 ec 08             	sub    esp,0x8
c001063c:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0010641:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010648:	74 19                	je     c0010663 <setupFPU()+0x2b>
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	68 58 01 00 00       	push   0x158
c0010652:	e8 7f e5 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0010657:	89 c3                	mov    ebx,eax
c0010659:	89 04 24             	mov    DWORD PTR [esp],eax
c001065c:	e8 83 c8 00 00       	call   c001cee4 <AVX::AVX()>
c0010661:	eb 5b                	jmp    c00106be <setupFPU()+0x86>
c0010663:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010669:	84 c0                	test   al,al
c001066b:	79 19                	jns    c0010686 <setupFPU()+0x4e>
c001066d:	83 ec 0c             	sub    esp,0xc
c0010670:	68 58 01 00 00       	push   0x158
c0010675:	e8 5c e5 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001067a:	89 c3                	mov    ebx,eax
c001067c:	89 04 24             	mov    DWORD PTR [esp],eax
c001067f:	e8 86 c9 00 00       	call   c001d00a <SSE::SSE()>
c0010684:	eb 38                	jmp    c00106be <setupFPU()+0x86>
c0010686:	a8 20                	test   al,0x20
c0010688:	74 19                	je     c00106a3 <setupFPU()+0x6b>
c001068a:	83 ec 0c             	sub    esp,0xc
c001068d:	68 58 01 00 00       	push   0x158
c0010692:	e8 3f e5 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0010697:	89 c3                	mov    ebx,eax
c0010699:	89 04 24             	mov    DWORD PTR [esp],eax
c001069c:	e8 d3 c8 00 00       	call   c001cf74 <MMX::MMX()>
c00106a1:	eb 1b                	jmp    c00106be <setupFPU()+0x86>
c00106a3:	a8 10                	test   al,0x10
c00106a5:	74 1c                	je     c00106c3 <setupFPU()+0x8b>
c00106a7:	83 ec 0c             	sub    esp,0xc
c00106aa:	68 58 01 00 00       	push   0x158
c00106af:	e8 22 e5 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00106b4:	89 c3                	mov    ebx,eax
c00106b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b9:	e8 da c9 00 00       	call   c001d098 <x87::x87()>
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	eb 2c                	jmp    c00106ef <setupFPU()+0xb7>
c00106c3:	83 ec 0c             	sub    esp,0xc
c00106c6:	31 db                	xor    ebx,ebx
c00106c8:	68 a8 08 02 c0       	push   0xc00208a8
c00106cd:	e8 f3 e5 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00106d2:	e8 7d 35 00 00       	call   c0013c54 <thisCPU()>
c00106d7:	e8 78 35 00 00       	call   c0013c54 <thisCPU()>
c00106dc:	e8 87 e1 00 00       	call   c001e868 <CPU::readCR0()>
c00106e1:	83 c8 04             	or     eax,0x4
c00106e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00106e7:	e8 8e e1 00 00       	call   c001e87a <CPU::writeCR0(unsigned long)>
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	89 d8                	mov    eax,ebx
c00106f1:	83 c4 08             	add    esp,0x8
c00106f4:	5b                   	pop    ebx
c00106f5:	c3                   	ret    

c00106f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00106f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106fe:	c1 e0 04             	shl    eax,0x4
c0010701:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010705:	8d 50 10             	lea    edx,[eax+0x10]
c0010708:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001070e:	74 08                	je     c0010718 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010710:	83 c0 04             	add    eax,0x4
c0010713:	39 d0                	cmp    eax,edx
c0010715:	75 f1                	jne    c0010708 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010717:	c3                   	ret    
c0010718:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010722:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001072c:	eb e2                	jmp    c0010710 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001072e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001072e:	57                   	push   edi
c001072f:	31 c0                	xor    eax,eax
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010737:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001073b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001073f:	89 da                	mov    edx,ebx
c0010741:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010745:	c1 e2 04             	shl    edx,0x4
c0010748:	01 ca                	add    edx,ecx
c001074a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010752:	74 16                	je     c001076a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010754:	40                   	inc    eax
c0010755:	83 f8 04             	cmp    eax,0x4
c0010758:	75 f0                	jne    c001074a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001075a:	c7 44 24 10 ec 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208ec
c0010762:	5b                   	pop    ebx
c0010763:	5e                   	pop    esi
c0010764:	5f                   	pop    edi
c0010765:	e9 f0 41 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c001076a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001076d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010770:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010776:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001077c:	5b                   	pop    ebx
c001077d:	5e                   	pop    esi
c001077e:	5f                   	pop    edi
c001077f:	c3                   	ret    

c0010780 <doubleFault(regs*, void*)>:
c0010780:	c7 44 24 04 1c 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a1c
c0010788:	e9 cd 41 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c001078d:	90                   	nop

c001078e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001078e:	56                   	push   esi
c001078f:	53                   	push   ebx
c0010790:	50                   	push   eax
c0010791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010795:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010799:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001079e:	75 35                	jne    c00107d5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00107a0:	8d 43 20             	lea    eax,[ebx+0x20]
c00107a3:	31 d2                	xor    edx,edx
c00107a5:	89 c1                	mov    ecx,eax
c00107a7:	c1 e1 04             	shl    ecx,0x4
c00107aa:	01 f1                	add    ecx,esi
c00107ac:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00107b4:	74 3e                	je     c00107f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00107b6:	42                   	inc    edx
c00107b7:	83 fa 04             	cmp    edx,0x4
c00107ba:	75 f0                	jne    c00107ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00107bc:	83 ec 0c             	sub    esp,0xc
c00107bf:	68 60 09 02 c0       	push   0xc0020960
c00107c4:	e8 91 41 00 00       	call   c001495a <Krnl::panic(char const*)>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107d1:	5a                   	pop    edx
c00107d2:	5b                   	pop    ebx
c00107d3:	5e                   	pop    esi
c00107d4:	c3                   	ret    
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	56                   	push   esi
c00107d9:	e8 d4 fb ff ff       	call   c00103b2 <Device::getName()>
c00107de:	83 c4 10             	add    esp,0x10
c00107e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00107e4:	75 ba                	jne    c00107a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00107e6:	83 fb 0f             	cmp    ebx,0xf
c00107e9:	7f 29                	jg     c0010814 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00107eb:	0f b6 9b c0 28 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd740]
c00107f2:	eb ac                	jmp    c00107a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00107f4:	8d 04 82             	lea    eax,[edx+eax*4]
c00107f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00107fe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010804:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010808:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001080e:	89 d8                	mov    eax,ebx
c0010810:	5a                   	pop    edx
c0010811:	5b                   	pop    ebx
c0010812:	5e                   	pop    esi
c0010813:	c3                   	ret    
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	68 28 09 02 c0       	push   0xc0020928
c001081c:	e8 39 41 00 00       	call   c001495a <Krnl::panic(char const*)>
c0010821:	83 c4 10             	add    esp,0x10
c0010824:	e9 77 ff ff ff       	jmp    c00107a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010829:	90                   	nop

c001082a <InterruptController::clearAllHandlers(int, bool)>:
c001082a:	56                   	push   esi
c001082b:	53                   	push   ebx
c001082c:	52                   	push   edx
c001082d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010835:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001083a:	75 61                	jne    c001089d <InterruptController::clearAllHandlers(int, bool)+0x73>
c001083c:	8d 46 20             	lea    eax,[esi+0x20]
c001083f:	c1 e6 04             	shl    esi,0x4
c0010842:	c1 e0 04             	shl    eax,0x4
c0010845:	01 de                	add    esi,ebx
c0010847:	01 d8                	add    eax,ebx
c0010849:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010853:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001085d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010867:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010871:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001087b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010885:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001088f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010899:	58                   	pop    eax
c001089a:	5b                   	pop    ebx
c001089b:	5e                   	pop    esi
c001089c:	c3                   	ret    
c001089d:	83 ec 0c             	sub    esp,0xc
c00108a0:	53                   	push   ebx
c00108a1:	e8 0c fb ff ff       	call   c00103b2 <Device::getName()>
c00108a6:	83 c4 10             	add    esp,0x10
c00108a9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108ac:	75 8e                	jne    c001083c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00108ae:	83 fe 0f             	cmp    esi,0xf
c00108b1:	7f 09                	jg     c00108bc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00108b3:	0f b6 b6 c0 28 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd740]
c00108ba:	eb 80                	jmp    c001083c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00108bc:	83 ec 0c             	sub    esp,0xc
c00108bf:	68 9c 09 02 c0       	push   0xc002099c
c00108c4:	e8 91 40 00 00       	call   c001495a <Krnl::panic(char const*)>
c00108c9:	83 c4 10             	add    esp,0x10
c00108cc:	e9 6b ff ff ff       	jmp    c001083c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00108d1:	90                   	nop

c00108d2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00108d2:	56                   	push   esi
c00108d3:	53                   	push   ebx
c00108d4:	52                   	push   edx
c00108d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108dd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00108e2:	75 3a                	jne    c001091e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00108e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e8:	8d 50 20             	lea    edx,[eax+0x20]
c00108eb:	c1 e2 04             	shl    edx,0x4
c00108ee:	8d 04 16             	lea    eax,[esi+edx*1]
c00108f1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00108f5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00108fb:	74 0b                	je     c0010908 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00108fd:	83 c0 04             	add    eax,0x4
c0010900:	39 d0                	cmp    eax,edx
c0010902:	75 f1                	jne    c00108f5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010904:	58                   	pop    eax
c0010905:	5b                   	pop    ebx
c0010906:	5e                   	pop    esi
c0010907:	c3                   	ret    
c0010908:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010912:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001091c:	eb df                	jmp    c00108fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001091e:	83 ec 0c             	sub    esp,0xc
c0010921:	56                   	push   esi
c0010922:	e8 8b fa ff ff       	call   c00103b2 <Device::getName()>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001092d:	75 b5                	jne    c00108e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001092f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010934:	7f 11                	jg     c0010947 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001093a:	0f b6 80 c0 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd740]
c0010941:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010945:	eb 9d                	jmp    c00108e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010947:	83 ec 0c             	sub    esp,0xc
c001094a:	68 9c 09 02 c0       	push   0xc002099c
c001094f:	e8 06 40 00 00       	call   c001495a <Krnl::panic(char const*)>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	eb 8b                	jmp    c00108e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010959 <nmiHandler(regs*, void*)>:
c0010959:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001095e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010962:	e9 fb a9 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010967 <int_handler>:
c0010967:	55                   	push   ebp
c0010968:	57                   	push   edi
c0010969:	56                   	push   esi
c001096a:	53                   	push   ebx
c001096b:	83 ec 0c             	sub    esp,0xc
c001096e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010972:	80 3d b0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bb0,0x0
c0010979:	74 0b                	je     c0010986 <int_handler+0x1f>
c001097b:	fa                   	cli    
c001097c:	f4                   	hlt    
c001097d:	80 3d b0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bb0,0x0
c0010984:	75 f5                	jne    c001097b <int_handler+0x14>
c0010986:	e8 c9 32 00 00       	call   c0013c54 <thisCPU()>
c001098b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001098e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010994:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010997:	83 f8 17             	cmp    eax,0x17
c001099a:	77 13                	ja     c00109af <int_handler+0x48>
c001099c:	83 ec 08             	sub    esp,0x8
c001099f:	8b 17                	mov    edx,DWORD PTR [edi]
c00109a1:	8d 43 e0             	lea    eax,[ebx-0x20]
c00109a4:	0f b6 c0             	movzx  eax,al
c00109a7:	50                   	push   eax
c00109a8:	57                   	push   edi
c00109a9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	83 c3 15             	add    ebx,0x15
c00109b2:	c1 e3 04             	shl    ebx,0x4
c00109b5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00109b9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00109c0:	31 db                	xor    ebx,ebx
c00109c2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00109c6:	85 c0                	test   eax,eax
c00109c8:	74 13                	je     c00109dd <int_handler+0x76>
c00109ca:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00109cd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00109d1:	74 1c                	je     c00109ef <int_handler+0x88>
c00109d3:	83 ec 08             	sub    esp,0x8
c00109d6:	52                   	push   edx
c00109d7:	56                   	push   esi
c00109d8:	ff d0                	call   eax
c00109da:	83 c4 10             	add    esp,0x10
c00109dd:	43                   	inc    ebx
c00109de:	83 fb 04             	cmp    ebx,0x4
c00109e1:	75 df                	jne    c00109c2 <int_handler+0x5b>
c00109e3:	83 c4 0c             	add    esp,0xc
c00109e6:	31 c0                	xor    eax,eax
c00109e8:	5b                   	pop    ebx
c00109e9:	31 d2                	xor    edx,edx
c00109eb:	5e                   	pop    esi
c00109ec:	5f                   	pop    edi
c00109ed:	5d                   	pop    ebp
c00109ee:	c3                   	ret    
c00109ef:	83 ec 08             	sub    esp,0x8
c00109f2:	52                   	push   edx
c00109f3:	56                   	push   esi
c00109f4:	ff d0                	call   eax
c00109f6:	83 c4 10             	add    esp,0x10
c00109f9:	83 c4 0c             	add    esp,0xc
c00109fc:	5b                   	pop    ebx
c00109fd:	5e                   	pop    esi
c00109fe:	5f                   	pop    edi
c00109ff:	5d                   	pop    ebp
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <InterruptController::InterruptController(char const*)>:
c0010a02:	83 ec 1c             	sub    esp,0x1c
c0010a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a09:	83 ec 08             	sub    esp,0x8
c0010a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010a10:	50                   	push   eax
c0010a11:	e8 aa f8 ff ff       	call   c00102c0 <Device::Device(char const*)>
c0010a16:	83 c4 10             	add    esp,0x10
c0010a19:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0010a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a22:	89 10                	mov    DWORD PTR [eax],edx
c0010a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a28:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010a32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a3a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010a42:	7f 5e                	jg     c0010aa2 <InterruptController::InterruptController(char const*)+0xa0>
c0010a44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010a4c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010a51:	7f 49                	jg     c0010a9c <InterruptController::InterruptController(char const*)+0x9a>
c0010a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010a62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a66:	01 ca                	add    edx,ecx
c0010a68:	83 c2 54             	add    edx,0x54
c0010a6b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010a82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a86:	01 ca                	add    edx,ecx
c0010a88:	81 c2 54 04 00 00    	add    edx,0x454
c0010a8e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010a96:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010a9a:	eb b0                	jmp    c0010a4c <InterruptController::InterruptController(char const*)+0x4a>
c0010a9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010aa0:	eb 98                	jmp    c0010a3a <InterruptController::InterruptController(char const*)+0x38>
c0010aa2:	90                   	nop
c0010aa3:	83 c4 1c             	add    esp,0x1c
c0010aa6:	c3                   	ret    
c0010aa7:	90                   	nop

c0010aa8 <InterruptController::~InterruptController()>:
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0010ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab4:	89 10                	mov    DWORD PTR [eax],edx
c0010ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	50                   	push   eax
c0010abe:	e8 af f4 ff ff       	call   c000ff72 <Device::~Device()>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	90                   	nop
c0010ac7:	83 c4 0c             	add    esp,0xc
c0010aca:	c3                   	ret    
c0010acb:	90                   	nop

c0010acc <InterruptController::~InterruptController()>:
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	83 ec 0c             	sub    esp,0xc
c0010ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad6:	e8 cd ff ff ff       	call   c0010aa8 <InterruptController::~InterruptController()>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	83 ec 08             	sub    esp,0x8
c0010ae1:	68 58 21 00 00       	push   0x2158
c0010ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aea:	e8 f6 e0 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	83 c4 0c             	add    esp,0xc
c0010af5:	c3                   	ret    

c0010af6 <displayDebugInfo(regs*)>:
c0010af6:	55                   	push   ebp
c0010af7:	57                   	push   edi
c0010af8:	56                   	push   esi
c0010af9:	53                   	push   ebx
c0010afa:	83 ec 24             	sub    esp,0x24
c0010afd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010b01:	0f 20 c2             	mov    edx,cr0
c0010b04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010b08:	0f 20 d7             	mov    edi,cr2
c0010b0b:	0f 20 de             	mov    esi,cr3
c0010b0e:	0f 20 e5             	mov    ebp,cr4
c0010b11:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010b14:	68 29 0a 02 c0       	push   0xc0020a29
c0010b19:	e8 a7 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b1e:	58                   	pop    eax
c0010b1f:	5a                   	pop    edx
c0010b20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b23:	68 34 0a 02 c0       	push   0xc0020a34
c0010b28:	e8 98 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b2d:	59                   	pop    ecx
c0010b2e:	58                   	pop    eax
c0010b2f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b32:	68 3f 0a 02 c0       	push   0xc0020a3f
c0010b37:	e8 89 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b3c:	58                   	pop    eax
c0010b3d:	5a                   	pop    edx
c0010b3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b41:	68 4a 0a 02 c0       	push   0xc0020a4a
c0010b46:	e8 7a e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b4b:	59                   	pop    ecx
c0010b4c:	58                   	pop    eax
c0010b4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010b50:	68 55 0a 02 c0       	push   0xc0020a55
c0010b55:	e8 6b e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b5a:	58                   	pop    eax
c0010b5b:	5a                   	pop    edx
c0010b5c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010b5f:	68 60 0a 02 c0       	push   0xc0020a60
c0010b64:	e8 5c e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b69:	59                   	pop    ecx
c0010b6a:	58                   	pop    eax
c0010b6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b6e:	68 7a 0a 02 c0       	push   0xc0020a7a
c0010b73:	e8 4d e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b78:	58                   	pop    eax
c0010b79:	5a                   	pop    edx
c0010b7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010b7d:	68 6b 0a 02 c0       	push   0xc0020a6b
c0010b82:	e8 3e e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b87:	59                   	pop    ecx
c0010b88:	58                   	pop    eax
c0010b89:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010b8c:	68 76 0a 02 c0       	push   0xc0020a76
c0010b91:	e8 2f e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010b96:	58                   	pop    eax
c0010b97:	5a                   	pop    edx
c0010b98:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010b9b:	68 85 0a 02 c0       	push   0xc0020a85
c0010ba0:	e8 20 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010ba5:	59                   	pop    ecx
c0010ba6:	58                   	pop    eax
c0010ba7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010baa:	68 90 0a 02 c0       	push   0xc0020a90
c0010baf:	e8 11 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010bb4:	58                   	pop    eax
c0010bb5:	5a                   	pop    edx
c0010bb6:	57                   	push   edi
c0010bb7:	68 9b 0a 02 c0       	push   0xc0020a9b
c0010bbc:	e8 04 e1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010bc1:	59                   	pop    ecx
c0010bc2:	58                   	pop    eax
c0010bc3:	56                   	push   esi
c0010bc4:	68 a6 0a 02 c0       	push   0xc0020aa6
c0010bc9:	e8 f7 e0 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010bce:	58                   	pop    eax
c0010bcf:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010bd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010bda:	e8 de c2 ff ff       	call   c000cebd <setActiveTerminal(VgaText*)>
c0010bdf:	58                   	pop    eax
c0010be0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010be3:	5a                   	pop    edx
c0010be4:	c1 e0 05             	shl    eax,0x5
c0010be7:	05 20 26 02 c0       	add    eax,0xc0022620
c0010bec:	50                   	push   eax
c0010bed:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010bf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010bf8:	e8 df c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010bfd:	59                   	pop    ecx
c0010bfe:	58                   	pop    eax
c0010bff:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c04:	68 b1 0a 02 c0       	push   0xc0020ab1
c0010c09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c0f:	e8 c8 c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010c14:	58                   	pop    eax
c0010c15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c1a:	5a                   	pop    edx
c0010c1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010c1e:	83 c0 0c             	add    eax,0xc
c0010c21:	50                   	push   eax
c0010c22:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c2d:	e8 aa c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010c32:	59                   	pop    ecx
c0010c33:	58                   	pop    eax
c0010c34:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c39:	68 ba 0a 02 c0       	push   0xc0020aba
c0010c3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c44:	e8 93 c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010c49:	58                   	pop    eax
c0010c4a:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c4f:	5a                   	pop    edx
c0010c50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010c53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c59:	e8 a4 c6 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010c5e:	59                   	pop    ecx
c0010c5f:	58                   	pop    eax
c0010c60:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c65:	68 c2 0a 02 c0       	push   0xc0020ac2
c0010c6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c70:	e8 67 c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010c75:	58                   	pop    eax
c0010c76:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c7b:	5a                   	pop    edx
c0010c7c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010c7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c85:	e8 78 c6 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010c8a:	59                   	pop    ecx
c0010c8b:	58                   	pop    eax
c0010c8c:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010c91:	68 ca 0a 02 c0       	push   0xc0020aca
c0010c96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c9c:	e8 3b c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010ca1:	58                   	pop    eax
c0010ca2:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010ca7:	5a                   	pop    edx
c0010ca8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010cab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cb1:	e8 4c c6 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010cb6:	59                   	pop    ecx
c0010cb7:	58                   	pop    eax
c0010cb8:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010cbd:	68 d2 0a 02 c0       	push   0xc0020ad2
c0010cc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cc8:	e8 0f c6 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010ccd:	58                   	pop    eax
c0010cce:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010cd3:	5a                   	pop    edx
c0010cd4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010cd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cdd:	e8 20 c6 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010ce2:	59                   	pop    ecx
c0010ce3:	58                   	pop    eax
c0010ce4:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010ce9:	68 da 0a 02 c0       	push   0xc0020ada
c0010cee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cf4:	e8 e3 c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010cf9:	58                   	pop    eax
c0010cfa:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010cff:	5a                   	pop    edx
c0010d00:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010d03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d09:	e8 f4 c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010d0e:	59                   	pop    ecx
c0010d0f:	58                   	pop    eax
c0010d10:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d15:	68 e2 0a 02 c0       	push   0xc0020ae2
c0010d1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d20:	e8 b7 c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010d25:	58                   	pop    eax
c0010d26:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d2b:	5a                   	pop    edx
c0010d2c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010d2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d35:	e8 c8 c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010d3a:	59                   	pop    ecx
c0010d3b:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d40:	5b                   	pop    ebx
c0010d41:	68 ea 0a 02 c0       	push   0xc0020aea
c0010d46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d4c:	e8 8b c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010d51:	58                   	pop    eax
c0010d52:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d57:	5a                   	pop    edx
c0010d58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d5c:	52                   	push   edx
c0010d5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d63:	e8 9a c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010d68:	59                   	pop    ecx
c0010d69:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d6e:	5b                   	pop    ebx
c0010d6f:	68 f3 0a 02 c0       	push   0xc0020af3
c0010d74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d7a:	e8 5d c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010d7f:	58                   	pop    eax
c0010d80:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d85:	5a                   	pop    edx
c0010d86:	57                   	push   edi
c0010d87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d8d:	e8 70 c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010d92:	59                   	pop    ecx
c0010d93:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010d98:	5b                   	pop    ebx
c0010d99:	68 fb 0a 02 c0       	push   0xc0020afb
c0010d9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010da4:	e8 33 c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010da9:	5f                   	pop    edi
c0010daa:	58                   	pop    eax
c0010dab:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010db0:	56                   	push   esi
c0010db1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010db7:	e8 46 c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010dbc:	58                   	pop    eax
c0010dbd:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010dc2:	5a                   	pop    edx
c0010dc3:	68 03 0b 02 c0       	push   0xc0020b03
c0010dc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dce:	e8 09 c5 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010dd3:	59                   	pop    ecx
c0010dd4:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010dd9:	5b                   	pop    ebx
c0010dda:	55                   	push   ebp
c0010ddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010de1:	e8 1c c5 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010de6:	5e                   	pop    esi
c0010de7:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010dec:	5f                   	pop    edi
c0010ded:	68 0b 0b 02 c0       	push   0xc0020b0b
c0010df2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010df8:	e8 df c4 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010dfd:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e02:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e08:	e8 76 da 00 00       	call   c001e883 <CPU::readDR0()>
c0010e0d:	5d                   	pop    ebp
c0010e0e:	5a                   	pop    edx
c0010e0f:	50                   	push   eax
c0010e10:	53                   	push   ebx
c0010e11:	e8 ec c4 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010e16:	59                   	pop    ecx
c0010e17:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e1c:	5b                   	pop    ebx
c0010e1d:	68 14 0b 02 c0       	push   0xc0020b14
c0010e22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e28:	e8 af c4 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010e2d:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e32:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e38:	e8 58 da 00 00       	call   c001e895 <CPU::readDR1()>
c0010e3d:	5e                   	pop    esi
c0010e3e:	5f                   	pop    edi
c0010e3f:	50                   	push   eax
c0010e40:	53                   	push   ebx
c0010e41:	e8 bc c4 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010e46:	5d                   	pop    ebp
c0010e47:	58                   	pop    eax
c0010e48:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e4d:	68 1c 0b 02 c0       	push   0xc0020b1c
c0010e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e58:	e8 7f c4 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010e5d:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e62:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e68:	e8 3a da 00 00       	call   c001e8a7 <CPU::readDR2()>
c0010e6d:	5a                   	pop    edx
c0010e6e:	59                   	pop    ecx
c0010e6f:	50                   	push   eax
c0010e70:	53                   	push   ebx
c0010e71:	e8 8c c4 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010e76:	5b                   	pop    ebx
c0010e77:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e7c:	5e                   	pop    esi
c0010e7d:	68 24 0b 02 c0       	push   0xc0020b24
c0010e82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e88:	e8 4f c4 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010e8d:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010e92:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e98:	e8 1c da 00 00       	call   c001e8b9 <CPU::readDR3()>
c0010e9d:	5f                   	pop    edi
c0010e9e:	5d                   	pop    ebp
c0010e9f:	50                   	push   eax
c0010ea0:	53                   	push   ebx
c0010ea1:	e8 5c c4 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010ea6:	58                   	pop    eax
c0010ea7:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010eac:	5a                   	pop    edx
c0010ead:	68 2c 0b 02 c0       	push   0xc0020b2c
c0010eb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eb8:	e8 1f c4 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010ebd:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010ec2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ec8:	e8 fe d9 00 00       	call   c001e8cb <CPU::readDR6()>
c0010ecd:	59                   	pop    ecx
c0010ece:	5e                   	pop    esi
c0010ecf:	50                   	push   eax
c0010ed0:	53                   	push   ebx
c0010ed1:	e8 2c c4 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010ed6:	5f                   	pop    edi
c0010ed7:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010edc:	5d                   	pop    ebp
c0010edd:	68 34 0b 02 c0       	push   0xc0020b34
c0010ee2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ee8:	e8 ef c3 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0010eed:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0010ef2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ef8:	e8 e0 d9 00 00       	call   c001e8dd <CPU::readDR7()>
c0010efd:	5a                   	pop    edx
c0010efe:	59                   	pop    ecx
c0010eff:	50                   	push   eax
c0010f00:	53                   	push   ebx
c0010f01:	e8 fc c3 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0010f06:	fa                   	cli    
c0010f07:	f4                   	hlt    
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	eb fe                	jmp    c0010f0b <displayDebugInfo(regs*)+0x415>

c0010f0d <x87EmulHandler(regs*, void*)>:
c0010f0d:	53                   	push   ebx
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	a1 f4 32 02 c0       	mov    eax,ds:0xc00232f4
c0010f16:	85 c0                	test   eax,eax
c0010f18:	74 15                	je     c0010f2f <x87EmulHandler(regs*, void*)+0x22>
c0010f1a:	83 ec 0c             	sub    esp,0xc
c0010f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f21:	ff d0                	call   eax
c0010f23:	83 c4 10             	add    esp,0x10
c0010f26:	84 c0                	test   al,al
c0010f28:	74 2f                	je     c0010f59 <x87EmulHandler(regs*, void*)+0x4c>
c0010f2a:	83 c4 08             	add    esp,0x8
c0010f2d:	5b                   	pop    ebx
c0010f2e:	c3                   	ret    
c0010f2f:	83 ec 08             	sub    esp,0x8
c0010f32:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c0010f38:	6a 01                	push   0x1
c0010f3a:	68 3c 0b 02 c0       	push   0xc0020b3c
c0010f3f:	e8 cf 63 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c0010f44:	5a                   	pop    edx
c0010f45:	59                   	pop    ecx
c0010f46:	53                   	push   ebx
c0010f47:	50                   	push   eax
c0010f48:	e8 19 65 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c0010f4d:	a1 f4 32 02 c0       	mov    eax,ds:0xc00232f4
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	85 c0                	test   eax,eax
c0010f57:	75 c1                	jne    c0010f1a <x87EmulHandler(regs*, void*)+0xd>
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	68 59 0b 02 c0       	push   0xc0020b59
c0010f61:	e8 5f dd ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010f66:	58                   	pop    eax
c0010f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6b:	e8 86 fb ff ff       	call   c0010af6 <displayDebugInfo(regs*)>

c0010f70 <gpFault(regs*, void*)>:
c0010f70:	53                   	push   ebx
c0010f71:	83 ec 14             	sub    esp,0x14
c0010f74:	c7 05 f0 32 02 c0 e3 86 01 c0 	mov    DWORD PTR ds:0xc00232f0,0xc00186e3
c0010f7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010f82:	53                   	push   ebx
c0010f83:	e8 5b 77 00 00       	call   c00186e3 <Vm::faultHandler(regs*)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	84 c0                	test   al,al
c0010f8d:	74 05                	je     c0010f94 <gpFault(regs*, void*)+0x24>
c0010f8f:	83 c4 08             	add    esp,0x8
c0010f92:	5b                   	pop    ebx
c0010f93:	c3                   	ret    
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	68 59 0b 02 c0       	push   0xc0020b59
c0010f9c:	e8 24 dd ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010fa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fa4:	e8 4d fb ff ff       	call   c0010af6 <displayDebugInfo(regs*)>

c0010fa9 <pgFault(regs*, void*)>:
c0010fa9:	83 ec 18             	sub    esp,0x18
c0010fac:	68 74 0b 02 c0       	push   0xc0020b74
c0010fb1:	e8 0f dd ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010fb6:	58                   	pop    eax
c0010fb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbb:	e8 36 fb ff ff       	call   c0010af6 <displayDebugInfo(regs*)>

c0010fc0 <otherISRHandler(regs*, void*)>:
c0010fc0:	53                   	push   ebx
c0010fc1:	83 ec 0c             	sub    esp,0xc
c0010fc4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fc8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010fcb:	50                   	push   eax
c0010fcc:	50                   	push   eax
c0010fcd:	68 81 0b 02 c0       	push   0xc0020b81
c0010fd2:	e8 ee dc ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0010fd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fda:	e8 17 fb ff ff       	call   c0010af6 <displayDebugInfo(regs*)>

c0010fdf <opcodeFault(regs*, void*)>:
c0010fdf:	53                   	push   ebx
c0010fe0:	83 ec 08             	sub    esp,0x8
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	e8 68 2c 00 00       	call   c0013c54 <thisCPU()>
c0010fec:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0010ff3:	74 16                	je     c001100b <opcodeFault(regs*, void*)+0x2c>
c0010ff5:	83 ec 0c             	sub    esp,0xc
c0010ff8:	68 d8 09 02 c0       	push   0xc00209d8
c0010ffd:	e8 c3 dc ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011002:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011006:	83 c4 18             	add    esp,0x18
c0011009:	5b                   	pop    ebx
c001100a:	c3                   	ret    
c001100b:	83 ec 0c             	sub    esp,0xc
c001100e:	68 9e 0b 02 c0       	push   0xc0020b9e
c0011013:	e8 ad dc ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011018:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001101b:	c1 e0 04             	shl    eax,0x4
c001101e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011021:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011025:	89 14 24             	mov    DWORD PTR [esp],edx
c0011028:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001102c:	52                   	push   edx
c001102d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011031:	52                   	push   edx
c0011032:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011035:	50                   	push   eax
c0011036:	68 fc 09 02 c0       	push   0xc00209fc
c001103b:	e8 85 dc ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011040:	83 c4 14             	add    esp,0x14
c0011043:	53                   	push   ebx
c0011044:	e8 ad fa ff ff       	call   c0010af6 <displayDebugInfo(regs*)>

c0011049 <displayProgramFault(char const*)>:
c0011049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011051:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011057:	85 c0                	test   eax,eax
c0011059:	74 15                	je     c0011070 <displayProgramFault(char const*)+0x27>
c001105b:	83 ec 0c             	sub    esp,0xc
c001105e:	6a 04                	push   0x4
c0011060:	6a 0f                	push   0xf
c0011062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011066:	50                   	push   eax
c0011067:	e8 32 bf ff ff       	call   c000cf9e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001106c:	83 c4 1c             	add    esp,0x1c
c001106f:	c3                   	ret    
c0011070:	c3                   	ret    
c0011071:	90                   	nop

c0011072 <InterruptController::convertLegacyIRQNumber(int)>:
c0011072:	53                   	push   ebx
c0011073:	83 ec 14             	sub    esp,0x14
c0011076:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001107a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001107e:	e8 2f f3 ff ff       	call   c00103b2 <Device::getName()>
c0011083:	83 c4 10             	add    esp,0x10
c0011086:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011089:	74 07                	je     c0011092 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c001108b:	89 d8                	mov    eax,ebx
c001108d:	83 c4 08             	add    esp,0x8
c0011090:	5b                   	pop    ebx
c0011091:	c3                   	ret    
c0011092:	83 fb 0f             	cmp    ebx,0xf
c0011095:	7f 0e                	jg     c00110a5 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0011097:	0f b6 9b c0 28 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd740]
c001109e:	83 c4 08             	add    esp,0x8
c00110a1:	89 d8                	mov    eax,ebx
c00110a3:	5b                   	pop    ebx
c00110a4:	c3                   	ret    
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	68 28 09 02 c0       	push   0xc0020928
c00110ad:	e8 a8 38 00 00       	call   c001495a <Krnl::panic(char const*)>
c00110b2:	89 d8                	mov    eax,ebx
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	83 c4 08             	add    esp,0x8
c00110ba:	5b                   	pop    ebx
c00110bb:	c3                   	ret    

c00110bc <setupInterruptController()>:
c00110bc:	56                   	push   esi
c00110bd:	53                   	push   ebx
c00110be:	51                   	push   ecx
c00110bf:	e8 8d 2b 00 00       	call   c0013c51 <getCPUNumber()>
c00110c4:	85 c0                	test   eax,eax
c00110c6:	0f 85 10 02 00 00    	jne    c00112dc <setupInterruptController()+0x220>
c00110cc:	83 ec 0c             	sub    esp,0xc
c00110cf:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c00110d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00110da:	68 58 21 00 00       	push   0x2158
c00110df:	83 e0 01             	and    eax,0x1
c00110e2:	89 c6                	mov    esi,eax
c00110e4:	e8 ed da ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00110e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00110ec:	89 c3                	mov    ebx,eax
c00110ee:	e8 11 c6 00 00       	call   c001d704 <PIC::PIC()>
c00110f3:	6a 00                	push   0x0
c00110f5:	6a 00                	push   0x0
c00110f7:	6a 00                	push   0x0
c00110f9:	53                   	push   ebx
c00110fa:	e8 49 c9 00 00       	call   c001da48 <PIC::open(int, int, void*)>
c00110ff:	83 c4 20             	add    esp,0x20
c0011102:	89 f0                	mov    eax,esi
c0011104:	84 c0                	test   al,al
c0011106:	0f 85 92 01 00 00    	jne    c001129e <setupInterruptController()+0x1e2>
c001110c:	83 ec 08             	sub    esp,0x8
c001110f:	53                   	push   ebx
c0011110:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c0011116:	e8 b5 ef ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001111b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001111d:	6a 00                	push   0x0
c001111f:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011124:	6a 00                	push   0x0
c0011126:	53                   	push   ebx
c0011127:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001112a:	83 c4 20             	add    esp,0x20
c001112d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001112f:	6a 00                	push   0x0
c0011131:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011136:	6a 01                	push   0x1
c0011138:	53                   	push   ebx
c0011139:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001113c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001113e:	6a 00                	push   0x0
c0011140:	68 59 09 01 c0       	push   0xc0010959
c0011145:	6a 02                	push   0x2
c0011147:	53                   	push   ebx
c0011148:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001114b:	83 c4 20             	add    esp,0x20
c001114e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011150:	6a 00                	push   0x0
c0011152:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011157:	6a 03                	push   0x3
c0011159:	53                   	push   ebx
c001115a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001115d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001115f:	6a 00                	push   0x0
c0011161:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011166:	6a 04                	push   0x4
c0011168:	53                   	push   ebx
c0011169:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001116c:	83 c4 20             	add    esp,0x20
c001116f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011171:	6a 00                	push   0x0
c0011173:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011178:	6a 05                	push   0x5
c001117a:	53                   	push   ebx
c001117b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001117e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011180:	6a 00                	push   0x0
c0011182:	68 df 0f 01 c0       	push   0xc0010fdf
c0011187:	6a 06                	push   0x6
c0011189:	53                   	push   ebx
c001118a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001118d:	83 c4 20             	add    esp,0x20
c0011190:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011192:	6a 00                	push   0x0
c0011194:	68 0d 0f 01 c0       	push   0xc0010f0d
c0011199:	6a 07                	push   0x7
c001119b:	53                   	push   ebx
c001119c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001119f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111a1:	6a 00                	push   0x0
c00111a3:	68 80 07 01 c0       	push   0xc0010780
c00111a8:	6a 08                	push   0x8
c00111aa:	53                   	push   ebx
c00111ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111ae:	83 c4 20             	add    esp,0x20
c00111b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b3:	6a 00                	push   0x0
c00111b5:	68 c0 0f 01 c0       	push   0xc0010fc0
c00111ba:	6a 09                	push   0x9
c00111bc:	53                   	push   ebx
c00111bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c2:	6a 00                	push   0x0
c00111c4:	68 c0 0f 01 c0       	push   0xc0010fc0
c00111c9:	6a 0a                	push   0xa
c00111cb:	53                   	push   ebx
c00111cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111cf:	83 c4 20             	add    esp,0x20
c00111d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d4:	6a 00                	push   0x0
c00111d6:	68 c0 0f 01 c0       	push   0xc0010fc0
c00111db:	6a 0b                	push   0xb
c00111dd:	53                   	push   ebx
c00111de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e3:	6a 00                	push   0x0
c00111e5:	68 c0 0f 01 c0       	push   0xc0010fc0
c00111ea:	6a 0c                	push   0xc
c00111ec:	53                   	push   ebx
c00111ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111f0:	83 c4 20             	add    esp,0x20
c00111f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f5:	6a 00                	push   0x0
c00111f7:	68 70 0f 01 c0       	push   0xc0010f70
c00111fc:	6a 0d                	push   0xd
c00111fe:	53                   	push   ebx
c00111ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011202:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011204:	6a 00                	push   0x0
c0011206:	68 a9 0f 01 c0       	push   0xc0010fa9
c001120b:	6a 0e                	push   0xe
c001120d:	53                   	push   ebx
c001120e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011211:	83 c4 20             	add    esp,0x20
c0011214:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011216:	6a 00                	push   0x0
c0011218:	68 c0 0f 01 c0       	push   0xc0010fc0
c001121d:	6a 0f                	push   0xf
c001121f:	53                   	push   ebx
c0011220:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011225:	6a 00                	push   0x0
c0011227:	68 c0 0f 01 c0       	push   0xc0010fc0
c001122c:	6a 10                	push   0x10
c001122e:	53                   	push   ebx
c001122f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011232:	83 c4 20             	add    esp,0x20
c0011235:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011237:	6a 00                	push   0x0
c0011239:	68 c0 0f 01 c0       	push   0xc0010fc0
c001123e:	6a 11                	push   0x11
c0011240:	53                   	push   ebx
c0011241:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011244:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011246:	6a 00                	push   0x0
c0011248:	68 c0 0f 01 c0       	push   0xc0010fc0
c001124d:	6a 12                	push   0x12
c001124f:	53                   	push   ebx
c0011250:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011253:	83 c4 20             	add    esp,0x20
c0011256:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011258:	6a 00                	push   0x0
c001125a:	68 c0 0f 01 c0       	push   0xc0010fc0
c001125f:	6a 13                	push   0x13
c0011261:	53                   	push   ebx
c0011262:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011265:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011267:	6a 00                	push   0x0
c0011269:	68 c0 0f 01 c0       	push   0xc0010fc0
c001126e:	6a 14                	push   0x14
c0011270:	53                   	push   ebx
c0011271:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011274:	83 c4 20             	add    esp,0x20
c0011277:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011279:	6a 00                	push   0x0
c001127b:	68 c0 0f 01 c0       	push   0xc0010fc0
c0011280:	6a 1e                	push   0x1e
c0011282:	53                   	push   ebx
c0011283:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011286:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011288:	6a 00                	push   0x0
c001128a:	68 fd 62 01 c0       	push   0xc00162fd
c001128f:	6a 60                	push   0x60
c0011291:	53                   	push   ebx
c0011292:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011295:	83 c4 20             	add    esp,0x20
c0011298:	89 d8                	mov    eax,ebx
c001129a:	5a                   	pop    edx
c001129b:	5b                   	pop    ebx
c001129c:	5e                   	pop    esi
c001129d:	c3                   	ret    
c001129e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a0:	6a 00                	push   0x0
c00112a2:	6a 00                	push   0x0
c00112a4:	6a 00                	push   0x0
c00112a6:	53                   	push   ebx
c00112a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112af:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00112b2:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00112b9:	e8 18 d9 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00112be:	89 04 24             	mov    DWORD PTR [esp],eax
c00112c1:	89 c3                	mov    ebx,eax
c00112c3:	e8 7a bf 00 00       	call   c001d242 <APIC::APIC()>
c00112c8:	6a 00                	push   0x0
c00112ca:	6a 00                	push   0x0
c00112cc:	6a 00                	push   0x0
c00112ce:	53                   	push   ebx
c00112cf:	e8 8c be 00 00       	call   c001d160 <APIC::open(int, int, void*)>
c00112d4:	83 c4 20             	add    esp,0x20
c00112d7:	e9 30 fe ff ff       	jmp    c001110c <setupInterruptController()+0x50>
c00112dc:	83 ec 0c             	sub    esp,0xc
c00112df:	68 58 21 00 00       	push   0x2158
c00112e4:	e8 ed d8 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00112e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00112ec:	89 c3                	mov    ebx,eax
c00112ee:	e8 4f bf 00 00       	call   c001d242 <APIC::APIC()>
c00112f3:	6a 00                	push   0x0
c00112f5:	6a 00                	push   0x0
c00112f7:	6a 00                	push   0x0
c00112f9:	53                   	push   ebx
c00112fa:	e8 61 be 00 00       	call   c001d160 <APIC::open(int, int, void*)>
c00112ff:	83 c4 18             	add    esp,0x18
c0011302:	53                   	push   ebx
c0011303:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c0011309:	e8 c2 ed ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	89 d8                	mov    eax,ebx
c0011313:	5a                   	pop    edx
c0011314:	5b                   	pop    ebx
c0011315:	5e                   	pop    esi
c0011316:	c3                   	ret    
c0011317:	90                   	nop

c0011318 <startGUI(void*)>:
c0011318:	55                   	push   ebp
c0011319:	89 e5                	mov    ebp,esp
c001131b:	53                   	push   ebx
c001131c:	83 ec 04             	sub    esp,0x4
c001131f:	e8 4e 65 00 00       	call   c0017872 <unlockScheduler()>
c0011324:	e8 32 65 00 00       	call   c001785b <getIRQNestingLevel()>
c0011329:	83 ec 08             	sub    esp,0x8
c001132c:	50                   	push   eax
c001132d:	68 f8 0b 02 c0       	push   0xc0020bf8
c0011332:	e8 8e d9 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	6a 01                	push   0x1
c0011345:	68 12 0c 02 c0       	push   0xc0020c12
c001134a:	e8 c4 5f 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	83 ec 08             	sub    esp,0x8
c0011355:	53                   	push   ebx
c0011356:	50                   	push   eax
c0011357:	e8 0a 61 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c0011365:	83 ec 08             	sub    esp,0x8
c0011368:	6a 01                	push   0x1
c001136a:	68 2c 0c 02 c0       	push   0xc0020c2c
c001136f:	e8 9f 5f 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c0011374:	83 c4 10             	add    esp,0x10
c0011377:	83 ec 08             	sub    esp,0x8
c001137a:	53                   	push   ebx
c001137b:	50                   	push   eax
c001137c:	e8 e5 60 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	90                   	nop
c0011385:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011388:	c9                   	leave  
c0011389:	c3                   	ret    

c001138a <sendKeyToTerminal(unsigned char)>:
c001138a:	55                   	push   ebp
c001138b:	89 e5                	mov    ebp,esp
c001138d:	83 ec 28             	sub    esp,0x28
c0011390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011393:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011396:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c001139b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001139f:	83 ec 08             	sub    esp,0x8
c00113a2:	52                   	push   edx
c00113a3:	50                   	push   eax
c00113a4:	e8 31 c1 ff ff       	call   c000d4da <VgaText::receiveKey(unsigned char)>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00113b0:	75 41                	jne    c00113f3 <sendKeyToTerminal(unsigned char)+0x69>
c00113b2:	e8 e0 64 00 00       	call   c0017897 <lockStuff()>
c00113b7:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c00113bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00113bf:	c7 05 00 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023300,0x0
c00113c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00113cd:	74 1f                	je     c00113ee <sendKeyToTerminal(unsigned char)+0x64>
c00113cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00113d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00113d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00113d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00113e4:	e8 97 6a 00 00       	call   c0017e80 <unblockTask(ThreadControlBlock*)>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	eb db                	jmp    c00113c9 <sendKeyToTerminal(unsigned char)+0x3f>
c00113ee:	e8 36 68 00 00       	call   c0017c29 <unlockStuff()>
c00113f3:	90                   	nop
c00113f4:	c9                   	leave  
c00113f5:	c3                   	ret    

c00113f6 <sendKeyboardToken(KeyboardToken)>:
c00113f6:	55                   	push   ebp
c00113f7:	89 e5                	mov    ebp,esp
c00113f9:	83 ec 18             	sub    esp,0x18
c00113fc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00113ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011402:	0f b7 c0             	movzx  eax,ax
c0011405:	83 f2 01             	xor    edx,0x1
c0011408:	88 90 20 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcce0],dl
c001140e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011411:	66 3d 03 02          	cmp    ax,0x203
c0011415:	75 07                	jne    c001141e <sendKeyboardToken(KeyboardToken)+0x28>
c0011417:	a0 20 34 02 c0       	mov    al,ds:0xc0023420
c001141c:	84 c0                	test   al,al
c001141e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011422:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011425:	a0 28 37 02 c0       	mov    al,ds:0xc0023728
c001142a:	38 c2                	cmp    dl,al
c001142c:	74 1c                	je     c001144a <sendKeyboardToken(KeyboardToken)+0x54>
c001142e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011431:	a2 28 37 02 c0       	mov    ds:0xc0023728,al
c0011436:	a0 28 37 02 c0       	mov    al,ds:0xc0023728
c001143b:	0f b6 c0             	movzx  eax,al
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	50                   	push   eax
c0011442:	e8 01 b3 ff ff       	call   c000c748 <setTerminalScrollLock(bool)>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001144d:	84 c0                	test   al,al
c001144f:	0f 84 ae 00 00 00    	je     c0011503 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011458:	66 3d 10 03          	cmp    ax,0x310
c001145c:	75 06                	jne    c0011464 <sendKeyboardToken(KeyboardToken)+0x6e>
c001145e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011467:	66 3d 11 03          	cmp    ax,0x311
c001146b:	75 06                	jne    c0011473 <sendKeyboardToken(KeyboardToken)+0x7d>
c001146d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	66 3d 12 03          	cmp    ax,0x312
c001147a:	75 06                	jne    c0011482 <sendKeyboardToken(KeyboardToken)+0x8c>
c001147c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011485:	66 3d 13 03          	cmp    ax,0x313
c0011489:	75 06                	jne    c0011491 <sendKeyboardToken(KeyboardToken)+0x9b>
c001148b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011494:	66 3d 14 03          	cmp    ax,0x314
c0011498:	75 06                	jne    c00114a0 <sendKeyboardToken(KeyboardToken)+0xaa>
c001149a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00114a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a3:	66 3d 15 03          	cmp    ax,0x315
c00114a7:	75 06                	jne    c00114af <sendKeyboardToken(KeyboardToken)+0xb9>
c00114a9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00114af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b2:	66 3d 16 03          	cmp    ax,0x316
c00114b6:	75 06                	jne    c00114be <sendKeyboardToken(KeyboardToken)+0xc8>
c00114b8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00114be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c1:	66 3d 17 03          	cmp    ax,0x317
c00114c5:	75 06                	jne    c00114cd <sendKeyboardToken(KeyboardToken)+0xd7>
c00114c7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	66 3d 18 03          	cmp    ax,0x318
c00114d4:	75 06                	jne    c00114dc <sendKeyboardToken(KeyboardToken)+0xe6>
c00114d6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00114dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114df:	66 3d 19 03          	cmp    ax,0x319
c00114e3:	75 06                	jne    c00114eb <sendKeyboardToken(KeyboardToken)+0xf5>
c00114e5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	66 3d 1a 03          	cmp    ax,0x31a
c00114f2:	0f 85 c9 00 00 00    	jne    c00115c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00114f8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00114fe:	e9 be 00 00 00       	jmp    c00115c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	66 3d 10 03          	cmp    ax,0x310
c001150a:	75 0a                	jne    c0011516 <sendKeyboardToken(KeyboardToken)+0x120>
c001150c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011512:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011519:	66 3d 11 03          	cmp    ax,0x311
c001151d:	75 0a                	jne    c0011529 <sendKeyboardToken(KeyboardToken)+0x133>
c001151f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011525:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	66 3d 12 03          	cmp    ax,0x312
c0011530:	75 0a                	jne    c001153c <sendKeyboardToken(KeyboardToken)+0x146>
c0011532:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011538:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001153c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153f:	66 3d 13 03          	cmp    ax,0x313
c0011543:	75 0a                	jne    c001154f <sendKeyboardToken(KeyboardToken)+0x159>
c0011545:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001154b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001154f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011552:	66 3d 14 03          	cmp    ax,0x314
c0011556:	75 0a                	jne    c0011562 <sendKeyboardToken(KeyboardToken)+0x16c>
c0011558:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001155e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011565:	66 3d 15 03          	cmp    ax,0x315
c0011569:	75 0a                	jne    c0011575 <sendKeyboardToken(KeyboardToken)+0x17f>
c001156b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011571:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	66 3d 16 03          	cmp    ax,0x316
c001157c:	75 0a                	jne    c0011588 <sendKeyboardToken(KeyboardToken)+0x192>
c001157e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011584:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158b:	66 3d 17 03          	cmp    ax,0x317
c001158f:	75 0a                	jne    c001159b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0011591:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011597:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	66 3d 18 03          	cmp    ax,0x318
c00115a2:	75 0a                	jne    c00115ae <sendKeyboardToken(KeyboardToken)+0x1b8>
c00115a4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00115aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b1:	66 3d 19 03          	cmp    ax,0x319
c00115b5:	75 0a                	jne    c00115c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00115b7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00115bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c4:	66 3d 00 02          	cmp    ax,0x200
c00115c8:	75 2a                	jne    c00115f4 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00115ca:	a0 20 37 02 c0       	mov    al,ds:0xc0023720
c00115cf:	83 f0 01             	xor    eax,0x1
c00115d2:	84 c0                	test   al,al
c00115d4:	74 1e                	je     c00115f4 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00115d6:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c00115db:	6a 01                	push   0x1
c00115dd:	6a 00                	push   0x0
c00115df:	68 18 13 01 c0       	push   0xc0011318
c00115e4:	50                   	push   eax
c00115e5:	e8 b0 63 00 00       	call   c001799a <Process::createThread(void (*)(void*), void*, int)>
c00115ea:	83 c4 10             	add    esp,0x10
c00115ed:	c6 05 20 37 02 c0 01 	mov    BYTE PTR ds:0xc0023720,0x1
c00115f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f7:	66 3d 1d 03          	cmp    ax,0x31d
c00115fb:	75 06                	jne    c0011603 <sendKeyboardToken(KeyboardToken)+0x20d>
c00115fd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011606:	66 3d 1c 03          	cmp    ax,0x31c
c001160a:	75 06                	jne    c0011612 <sendKeyboardToken(KeyboardToken)+0x21c>
c001160c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	66 3d 1b 03          	cmp    ax,0x31b
c0011619:	75 06                	jne    c0011621 <sendKeyboardToken(KeyboardToken)+0x22b>
c001161b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011624:	66 3d 1e 03          	cmp    ax,0x31e
c0011628:	75 06                	jne    c0011630 <sendKeyboardToken(KeyboardToken)+0x23a>
c001162a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011633:	66 3d 1f 03          	cmp    ax,0x31f
c0011637:	75 06                	jne    c001163f <sendKeyboardToken(KeyboardToken)+0x249>
c0011639:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001163f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011642:	66 3d 1a 03          	cmp    ax,0x31a
c0011646:	75 06                	jne    c001164e <sendKeyboardToken(KeyboardToken)+0x258>
c0011648:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001164e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011652:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011655:	83 f0 01             	xor    eax,0x1
c0011658:	84 c0                	test   al,al
c001165a:	74 77                	je     c00116d3 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001165c:	a0 21 34 02 c0       	mov    al,ds:0xc0023421
c0011661:	84 c0                	test   al,al
c0011663:	74 41                	je     c00116a6 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0011665:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011669:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001166d:	74 2b                	je     c001169a <sendKeyboardToken(KeyboardToken)+0x2a4>
c001166f:	8b 15 24 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023724
c0011675:	89 d0                	mov    eax,edx
c0011677:	c1 e0 02             	shl    eax,0x2
c001167a:	01 d0                	add    eax,edx
c001167c:	01 c0                	add    eax,eax
c001167e:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c0011683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011686:	0f b7 c0             	movzx  eax,ax
c0011689:	8d 50 d0             	lea    edx,[eax-0x30]
c001168c:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c0011691:	01 d0                	add    eax,edx
c0011693:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c0011698:	eb 6d                	jmp    c0011707 <sendKeyboardToken(KeyboardToken)+0x311>
c001169a:	c7 05 24 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023724,0x0
c00116a4:	eb 61                	jmp    c0011707 <sendKeyboardToken(KeyboardToken)+0x311>
c00116a6:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00116ab:	85 c0                	test   eax,eax
c00116ad:	74 18                	je     c00116c7 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00116af:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00116b4:	0f b6 c0             	movzx  eax,al
c00116b7:	83 ec 0c             	sub    esp,0xc
c00116ba:	50                   	push   eax
c00116bb:	e8 ca fc ff ff       	call   c001138a <sendKeyToTerminal(unsigned char)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00116c7:	c7 05 24 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023724,0x0
c00116d1:	eb 34                	jmp    c0011707 <sendKeyboardToken(KeyboardToken)+0x311>
c00116d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d6:	66 3d 01 01          	cmp    ax,0x101
c00116da:	75 2b                	jne    c0011707 <sendKeyboardToken(KeyboardToken)+0x311>
c00116dc:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00116e1:	85 c0                	test   eax,eax
c00116e3:	74 18                	je     c00116fd <sendKeyboardToken(KeyboardToken)+0x307>
c00116e5:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00116ea:	0f b6 c0             	movzx  eax,al
c00116ed:	83 ec 0c             	sub    esp,0xc
c00116f0:	50                   	push   eax
c00116f1:	e8 94 fc ff ff       	call   c001138a <sendKeyToTerminal(unsigned char)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00116fd:	c7 05 24 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023724,0x0
c0011707:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001170a:	83 f0 01             	xor    eax,0x1
c001170d:	84 c0                	test   al,al
c001170f:	74 4c                	je     c001175d <sendKeyboardToken(KeyboardToken)+0x367>
c0011711:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011714:	83 f0 01             	xor    eax,0x1
c0011717:	84 c0                	test   al,al
c0011719:	74 42                	je     c001175d <sendKeyboardToken(KeyboardToken)+0x367>
c001171b:	a0 20 34 02 c0       	mov    al,ds:0xc0023420
c0011720:	83 f0 01             	xor    eax,0x1
c0011723:	84 c0                	test   al,al
c0011725:	74 36                	je     c001175d <sendKeyboardToken(KeyboardToken)+0x367>
c0011727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172a:	66 83 f8 1f          	cmp    ax,0x1f
c001172e:	76 09                	jbe    c0011739 <sendKeyboardToken(KeyboardToken)+0x343>
c0011730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011733:	66 83 f8 7e          	cmp    ax,0x7e
c0011737:	76 12                	jbe    c001174b <sendKeyboardToken(KeyboardToken)+0x355>
c0011739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001173c:	66 83 f8 0a          	cmp    ax,0xa
c0011740:	74 09                	je     c001174b <sendKeyboardToken(KeyboardToken)+0x355>
c0011742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011745:	66 83 f8 08          	cmp    ax,0x8
c0011749:	75 12                	jne    c001175d <sendKeyboardToken(KeyboardToken)+0x367>
c001174b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001174e:	0f b6 c0             	movzx  eax,al
c0011751:	83 ec 0c             	sub    esp,0xc
c0011754:	50                   	push   eax
c0011755:	e8 30 fc ff ff       	call   c001138a <sendKeyToTerminal(unsigned char)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011760:	83 f0 01             	xor    eax,0x1
c0011763:	84 c0                	test   al,al
c0011765:	74 4f                	je     c00117b6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011767:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001176a:	83 f0 01             	xor    eax,0x1
c001176d:	84 c0                	test   al,al
c001176f:	74 45                	je     c00117b6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011771:	a0 20 34 02 c0       	mov    al,ds:0xc0023420
c0011776:	84 c0                	test   al,al
c0011778:	74 3c                	je     c00117b6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001177a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001177d:	66 83 f8 3f          	cmp    ax,0x3f
c0011781:	76 33                	jbe    c00117b6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011786:	66 83 f8 7f          	cmp    ax,0x7f
c001178a:	77 2a                	ja     c00117b6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001178c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001178f:	88 c2                	mov    dl,al
c0011791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011794:	66 83 f8 5f          	cmp    ax,0x5f
c0011798:	76 04                	jbe    c001179e <sendKeyboardToken(KeyboardToken)+0x3a8>
c001179a:	b0 20                	mov    al,0x20
c001179c:	eb 02                	jmp    c00117a0 <sendKeyboardToken(KeyboardToken)+0x3aa>
c001179e:	b0 00                	mov    al,0x0
c00117a0:	29 c2                	sub    edx,eax
c00117a2:	88 d0                	mov    al,dl
c00117a4:	83 e8 40             	sub    eax,0x40
c00117a7:	0f b6 c0             	movzx  eax,al
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	50                   	push   eax
c00117ae:	e8 d7 fb ff ff       	call   c001138a <sendKeyToTerminal(unsigned char)>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b9:	66 3d 00 03          	cmp    ax,0x300
c00117bd:	75 0f                	jne    c00117ce <sendKeyboardToken(KeyboardToken)+0x3d8>
c00117bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00117c2:	83 f0 01             	xor    eax,0x1
c00117c5:	84 c0                	test   al,al
c00117c7:	74 05                	je     c00117ce <sendKeyboardToken(KeyboardToken)+0x3d8>
c00117c9:	e8 a1 b7 ff ff       	call   c000cf6f <doTerminalCycle()>
c00117ce:	90                   	nop
c00117cf:	c9                   	leave  
c00117d0:	c3                   	ret    

c00117d1 <clearInternalKeybuffer(VgaText*)>:
c00117d1:	55                   	push   ebp
c00117d2:	89 e5                	mov    ebp,esp
c00117d4:	83 ec 08             	sub    esp,0x8
c00117d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117da:	05 34 11 00 00       	add    eax,0x1134
c00117df:	83 ec 0c             	sub    esp,0xc
c00117e2:	50                   	push   eax
c00117e3:	e8 3d ee fe ff       	call   c0000625 <strlen>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00117ee:	81 c2 34 11 00 00    	add    edx,0x1134
c00117f4:	83 ec 04             	sub    esp,0x4
c00117f7:	50                   	push   eax
c00117f8:	6a 00                	push   0x0
c00117fa:	52                   	push   edx
c00117fb:	e8 08 ee fe ff       	call   c0000608 <memset>
c0011800:	83 c4 10             	add    esp,0x10
c0011803:	90                   	nop
c0011804:	c9                   	leave  
c0011805:	c3                   	ret    

c0011806 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011806:	55                   	push   ebp
c0011807:	89 e5                	mov    ebp,esp
c0011809:	83 ec 18             	sub    esp,0x18
c001180c:	fb                   	sti    
c001180d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011814:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011818:	74 77                	je     c0011891 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001181a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011823:	84 c0                	test   al,al
c0011825:	75 02                	jne    c0011829 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011827:	eb f1                	jmp    c001181a <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011829:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001182c:	8d 50 01             	lea    edx,[eax+0x1]
c001182f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011832:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011835:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001183b:	88 10                	mov    BYTE PTR [eax],dl
c001183d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011840:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011846:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184c:	05 34 11 00 00       	add    eax,0x1134
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	50                   	push   eax
c0011855:	e8 cb ed fe ff       	call   c0000625 <strlen>
c001185a:	83 c4 10             	add    esp,0x10
c001185d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011860:	81 c2 34 11 00 00    	add    edx,0x1134
c0011866:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011869:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001186c:	81 c2 34 11 00 00    	add    edx,0x1134
c0011872:	83 ec 04             	sub    esp,0x4
c0011875:	50                   	push   eax
c0011876:	51                   	push   ecx
c0011877:	52                   	push   edx
c0011878:	e8 1d ed fe ff       	call   c000059a <memmove>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011883:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011886:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001188a:	75 88                	jne    c0011814 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001188c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001188f:	eb 03                	jmp    c0011894 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011891:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011894:	c9                   	leave  
c0011895:	c3                   	ret    

c0011896 <Keyboard::Keyboard(char const*)>:
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189d:	83 ec 08             	sub    esp,0x8
c00118a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a4:	50                   	push   eax
c00118a5:	e8 16 ea ff ff       	call   c00102c0 <Device::Device(char const*)>
c00118aa:	83 c4 10             	add    esp,0x10
c00118ad:	ba 50 0c 02 c0       	mov    edx,0xc0020c50
c00118b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b6:	89 10                	mov    DWORD PTR [eax],edx
c00118b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00118c6:	c6 05 04 33 02 c0 01 	mov    BYTE PTR ds:0xc0023304,0x1
c00118cd:	90                   	nop
c00118ce:	83 c4 0c             	add    esp,0xc
c00118d1:	c3                   	ret    

c00118d2 <Keyboard::~Keyboard()>:
c00118d2:	83 ec 0c             	sub    esp,0xc
c00118d5:	ba 50 0c 02 c0       	mov    edx,0xc0020c50
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	89 10                	mov    DWORD PTR [eax],edx
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	50                   	push   eax
c00118e8:	e8 85 e6 ff ff       	call   c000ff72 <Device::~Device()>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	90                   	nop
c00118f1:	83 c4 0c             	add    esp,0xc
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <Keyboard::~Keyboard()>:
c00118f6:	83 ec 0c             	sub    esp,0xc
c00118f9:	83 ec 0c             	sub    esp,0xc
c00118fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011900:	e8 cd ff ff ff       	call   c00118d2 <Keyboard::~Keyboard()>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	83 ec 08             	sub    esp,0x8
c001190b:	68 5c 01 00 00       	push   0x15c
c0011910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011914:	e8 cc d2 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	83 c4 0c             	add    esp,0xc
c001191f:	c3                   	ret    

c0011920 <LogicalDisk::close(int, int, void*)>:
c0011920:	83 c8 ff             	or     eax,0xffffffff
c0011923:	c3                   	ret    

c0011924 <LogicalDisk::~LogicalDisk()>:
c0011924:	83 ec 0c             	sub    esp,0xc
c0011927:	ba 00 0d 02 c0       	mov    edx,0xc0020d00
c001192c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011930:	89 10                	mov    DWORD PTR [eax],edx
c0011932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011936:	83 ec 0c             	sub    esp,0xc
c0011939:	50                   	push   eax
c001193a:	e8 33 e6 ff ff       	call   c000ff72 <Device::~Device()>
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	90                   	nop
c0011943:	83 c4 0c             	add    esp,0xc
c0011946:	c3                   	ret    
c0011947:	90                   	nop

c0011948 <LogicalDisk::~LogicalDisk()>:
c0011948:	83 ec 0c             	sub    esp,0xc
c001194b:	83 ec 0c             	sub    esp,0xc
c001194e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011952:	e8 cd ff ff ff       	call   c0011924 <LogicalDisk::~LogicalDisk()>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	83 ec 08             	sub    esp,0x8
c001195d:	68 74 01 00 00       	push   0x174
c0011962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011966:	e8 7a d2 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	83 c4 0c             	add    esp,0xc
c0011971:	c3                   	ret    

c0011972 <LogicalDisk::open(int, int, void*)>:
c0011972:	83 ec 18             	sub    esp,0x18
c0011975:	68 7c 0c 02 c0       	push   0xc0020c7c
c001197a:	e8 db 2f 00 00       	call   c001495a <Krnl::panic(char const*)>
c001197f:	83 c8 ff             	or     eax,0xffffffff
c0011982:	83 c4 1c             	add    esp,0x1c
c0011985:	c3                   	ret    

c0011986 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011986:	53                   	push   ebx
c0011987:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001198b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001198f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011993:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011999:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001199f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00119a5:	77 10                	ja     c00119b7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00119a7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00119ad:	89 d3                	mov    ebx,edx
c00119af:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00119b5:	72 05                	jb     c00119bc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00119b7:	83 c8 ff             	or     eax,0xffffffff
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	5b                   	pop    ebx
c00119bd:	c3                   	ret    

c00119be <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00119be:	56                   	push   esi
c00119bf:	83 c8 ff             	or     eax,0xffffffff
c00119c2:	53                   	push   ebx
c00119c3:	89 c2                	mov    edx,eax
c00119c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00119c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00119cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00119d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00119d7:	77 27                	ja     c0011a00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00119d9:	89 d8                	mov    eax,ebx
c00119db:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00119e1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00119e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119ec:	89 c2                	mov    edx,eax
c00119ee:	73 10                	jae    c0011a00 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00119f0:	89 c8                	mov    eax,ecx
c00119f2:	89 da                	mov    edx,ebx
c00119f4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00119fa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011a00:	5b                   	pop    ebx
c0011a01:	5e                   	pop    esi
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011a04:	83 ec 1c             	sub    esp,0x1c
c0011a07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a2a:	83 ec 08             	sub    esp,0x8
c0011a2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a31:	50                   	push   eax
c0011a32:	e8 89 e8 ff ff       	call   c00102c0 <Device::Device(char const*)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	ba 00 0d 02 c0       	mov    edx,0xc0020d00
c0011a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a43:	89 10                	mov    DWORD PTR [eax],edx
c0011a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a49:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a5f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011a69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a75:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011a7b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011a81:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011a88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a8c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011a92:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011aa0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011aaa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011ab4:	90                   	nop
c0011ab5:	83 c4 1c             	add    esp,0x1c
c0011ab8:	c3                   	ret    
c0011ab9:	90                   	nop

c0011aba <LogicalDisk::assignDriveLetter()>:
c0011aba:	55                   	push   ebp
c0011abb:	57                   	push   edi
c0011abc:	56                   	push   esi
c0011abd:	53                   	push   ebx
c0011abe:	83 ec 14             	sub    esp,0x14
c0011ac1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ac5:	8b 3d 40 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023740
c0011acb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011ad1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011ad5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011adb:	8b 3d 44 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023744
c0011ae1:	3c 01                	cmp    al,0x1
c0011ae3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011ae7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011aeb:	19 c0                	sbb    eax,eax
c0011aed:	83 e0 02             	and    eax,0x2
c0011af0:	83 c0 41             	add    eax,0x41
c0011af3:	0f be e8             	movsx  ebp,al
c0011af6:	3c 43                	cmp    al,0x43
c0011af8:	75 10                	jne    c0011b0a <LogicalDisk::assignDriveLetter()+0x50>
c0011afa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011b01:	75 5d                	jne    c0011b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b03:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b08:	75 56                	jne    c0011b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b0a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011b0d:	ba 01 00 00 00       	mov    edx,0x1
c0011b12:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011b16:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011b1a:	d3 e2                	shl    edx,cl
c0011b1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b20:	89 d7                	mov    edi,edx
c0011b22:	89 d6                	mov    esi,edx
c0011b24:	c1 ff 1f             	sar    edi,0x1f
c0011b27:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011b2b:	21 f9                	and    ecx,edi
c0011b2d:	09 d1                	or     ecx,edx
c0011b2f:	75 2f                	jne    c0011b60 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011b35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b39:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011b3f:	09 f2                	or     edx,esi
c0011b41:	89 15 40 37 02 c0    	mov    DWORD PTR ds:0xc0023740,edx
c0011b47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b4b:	09 fa                	or     edx,edi
c0011b4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011b51:	89 15 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edx
c0011b57:	89 1c bd 60 37 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc8a0],ebx
c0011b5e:	eb 08                	jmp    c0011b68 <LogicalDisk::assignDriveLetter()+0xae>
c0011b60:	45                   	inc    ebp
c0011b61:	40                   	inc    eax
c0011b62:	3c 5b                	cmp    al,0x5b
c0011b64:	75 90                	jne    c0011af6 <LogicalDisk::assignDriveLetter()+0x3c>
c0011b66:	31 c0                	xor    eax,eax
c0011b68:	83 c4 14             	add    esp,0x14
c0011b6b:	5b                   	pop    ebx
c0011b6c:	5e                   	pop    esi
c0011b6d:	5f                   	pop    edi
c0011b6e:	5d                   	pop    ebp
c0011b6f:	c3                   	ret    

c0011b70 <LogicalDisk::mount()>:
c0011b70:	56                   	push   esi
c0011b71:	53                   	push   ebx
c0011b72:	51                   	push   ecx
c0011b73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b77:	8b 1d c8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232c8
c0011b7d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011b87:	85 db                	test   ebx,ebx
c0011b89:	74 50                	je     c0011bdb <LogicalDisk::mount()+0x6b>
c0011b8b:	e8 cb 5c 00 00       	call   c001785b <getIRQNestingLevel()>
c0011b90:	52                   	push   edx
c0011b91:	52                   	push   edx
c0011b92:	50                   	push   eax
c0011b93:	68 a0 0c 02 c0       	push   0xc0020ca0
c0011b98:	e8 28 d1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011b9d:	83 c4 0c             	add    esp,0xc
c0011ba0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011ba7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ba9:	83 e8 41             	sub    eax,0x41
c0011bac:	50                   	push   eax
c0011bad:	56                   	push   esi
c0011bae:	53                   	push   ebx
c0011baf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bb2:	83 c4 10             	add    esp,0x10
c0011bb5:	84 c0                	test   al,al
c0011bb7:	74 08                	je     c0011bc1 <LogicalDisk::mount()+0x51>
c0011bb9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011bbf:	eb 1c                	jmp    c0011bdd <LogicalDisk::mount()+0x6d>
c0011bc1:	e8 95 5c 00 00       	call   c001785b <getIRQNestingLevel()>
c0011bc6:	51                   	push   ecx
c0011bc7:	51                   	push   ecx
c0011bc8:	50                   	push   eax
c0011bc9:	68 bb 0c 02 c0       	push   0xc0020cbb
c0011bce:	e8 f2 d0 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0011bd3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	eb ac                	jmp    c0011b87 <LogicalDisk::mount()+0x17>
c0011bdb:	31 c0                	xor    eax,eax
c0011bdd:	5a                   	pop    edx
c0011bde:	5b                   	pop    ebx
c0011bdf:	5e                   	pop    esi
c0011be0:	c3                   	ret    
c0011be1:	90                   	nop

c0011be2 <LogicalDisk::unmount()>:
c0011be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011bf0:	c3                   	ret    
c0011bf1:	90                   	nop

c0011bf2 <LogicalDisk::unassignDriveLetter()>:
c0011bf2:	57                   	push   edi
c0011bf3:	56                   	push   esi
c0011bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bf8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011bff:	84 c9                	test   cl,cl
c0011c01:	75 0f                	jne    c0011c12 <LogicalDisk::unassignDriveLetter()+0x20>
c0011c03:	c7 44 24 0c d6 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020cd6
c0011c0b:	5e                   	pop    esi
c0011c0c:	5f                   	pop    edi
c0011c0d:	e9 48 2d 00 00       	jmp    c001495a <Krnl::panic(char const*)>
c0011c12:	83 e9 41             	sub    ecx,0x41
c0011c15:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011c1c:	b8 01 00 00 00       	mov    eax,0x1
c0011c21:	c7 04 8d 60 37 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc8a0],0x0
c0011c2c:	d3 e0                	shl    eax,cl
c0011c2e:	89 c7                	mov    edi,eax
c0011c30:	f7 d0                	not    eax
c0011c32:	c1 ff 1f             	sar    edi,0x1f
c0011c35:	21 05 40 37 02 c0    	and    DWORD PTR ds:0xc0023740,eax
c0011c3b:	89 fe                	mov    esi,edi
c0011c3d:	f7 d6                	not    esi
c0011c3f:	21 35 44 37 02 c0    	and    DWORD PTR ds:0xc0023744,esi
c0011c45:	5e                   	pop    esi
c0011c46:	5f                   	pop    edi
c0011c47:	c3                   	ret    

c0011c48 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011c48:	57                   	push   edi
c0011c49:	56                   	push   esi
c0011c4a:	53                   	push   ebx
c0011c4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011c61:	77 41                	ja     c0011ca4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011c63:	99                   	cdq    
c0011c64:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011c6a:	01 c8                	add    eax,ecx
c0011c6c:	11 da                	adc    edx,ebx
c0011c6e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011c74:	19 d7                	sbb    edi,edx
c0011c76:	72 33                	jb     c0011cab <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011c78:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011c7e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011c84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011c88:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011c8c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011c92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011c98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c9c:	5b                   	pop    ebx
c0011c9d:	5e                   	pop    esi
c0011c9e:	5f                   	pop    edi
c0011c9f:	e9 9a 09 00 00       	jmp    c001263e <VCache::read(unsigned long long, int, void*)>
c0011ca4:	b8 05 00 00 00       	mov    eax,0x5
c0011ca9:	eb 05                	jmp    c0011cb0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011cab:	b8 07 00 00 00       	mov    eax,0x7
c0011cb0:	5b                   	pop    ebx
c0011cb1:	5e                   	pop    esi
c0011cb2:	5f                   	pop    edi
c0011cb3:	c3                   	ret    

c0011cb4 <LogicalDisk::write(unsigned long long, int, void*)>:
c0011cb4:	57                   	push   edi
c0011cb5:	56                   	push   esi
c0011cb6:	53                   	push   ebx
c0011cb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ccd:	77 41                	ja     c0011d10 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011ccf:	99                   	cdq    
c0011cd0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011cd6:	01 c8                	add    eax,ecx
c0011cd8:	11 da                	adc    edx,ebx
c0011cda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011ce0:	19 d7                	sbb    edi,edx
c0011ce2:	72 33                	jb     c0011d17 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011ce4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011cea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011cf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011cf4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011cf8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011cfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d08:	5b                   	pop    ebx
c0011d09:	5e                   	pop    esi
c0011d0a:	5f                   	pop    edi
c0011d0b:	e9 4a 08 00 00       	jmp    c001255a <VCache::write(unsigned long long, int, void*)>
c0011d10:	b8 05 00 00 00       	mov    eax,0x5
c0011d15:	eb 05                	jmp    c0011d1c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011d17:	b8 07 00 00 00       	mov    eax,0x7
c0011d1c:	5b                   	pop    ebx
c0011d1d:	5e                   	pop    esi
c0011d1e:	5f                   	pop    edi
c0011d1f:	c3                   	ret    

c0011d20 <Mouse::Mouse(char const*)>:
c0011d20:	83 ec 0c             	sub    esp,0xc
c0011d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d27:	83 ec 08             	sub    esp,0x8
c0011d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d2e:	50                   	push   eax
c0011d2f:	e8 8c e5 ff ff       	call   c00102c0 <Device::Device(char const*)>
c0011d34:	83 c4 10             	add    esp,0x10
c0011d37:	ba 2c 0d 02 c0       	mov    edx,0xc0020d2c
c0011d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d40:	89 10                	mov    DWORD PTR [eax],edx
c0011d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d46:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011d50:	90                   	nop
c0011d51:	83 c4 0c             	add    esp,0xc
c0011d54:	c3                   	ret    
c0011d55:	90                   	nop

c0011d56 <Mouse::~Mouse()>:
c0011d56:	83 ec 0c             	sub    esp,0xc
c0011d59:	ba 2c 0d 02 c0       	mov    edx,0xc0020d2c
c0011d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d62:	89 10                	mov    DWORD PTR [eax],edx
c0011d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d68:	83 ec 0c             	sub    esp,0xc
c0011d6b:	50                   	push   eax
c0011d6c:	e8 01 e2 ff ff       	call   c000ff72 <Device::~Device()>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	90                   	nop
c0011d75:	83 c4 0c             	add    esp,0xc
c0011d78:	c3                   	ret    
c0011d79:	90                   	nop

c0011d7a <Mouse::~Mouse()>:
c0011d7a:	83 ec 0c             	sub    esp,0xc
c0011d7d:	83 ec 0c             	sub    esp,0xc
c0011d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d84:	e8 cd ff ff ff       	call   c0011d56 <Mouse::~Mouse()>
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	83 ec 08             	sub    esp,0x8
c0011d8f:	68 58 01 00 00       	push   0x158
c0011d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d98:	e8 48 ce ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	83 c4 0c             	add    esp,0xc
c0011da3:	c3                   	ret    

c0011da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011da4:	55                   	push   ebp
c0011da5:	57                   	push   edi
c0011da6:	56                   	push   esi
c0011da7:	53                   	push   ebx
c0011da8:	81 ec 28 01 00 00    	sub    esp,0x128
c0011dae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011db5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011dbc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011dc3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011dca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011dd2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011dd9:	e8 d4 e5 ff ff       	call   c00103b2 <Device::getName()>
c0011dde:	5a                   	pop    edx
c0011ddf:	59                   	pop    ecx
c0011de0:	50                   	push   eax
c0011de1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011de5:	55                   	push   ebp
c0011de6:	e8 bc e8 fe ff       	call   c00006a7 <strcpy>
c0011deb:	5b                   	pop    ebx
c0011dec:	58                   	pop    eax
c0011ded:	68 50 0d 02 c0       	push   0xc0020d50
c0011df2:	55                   	push   ebp
c0011df3:	e8 66 e9 fe ff       	call   c000075e <strcat>
c0011df8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0011dff:	e8 d2 cd ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0011e04:	83 c4 0c             	add    esp,0xc
c0011e07:	89 c3                	mov    ebx,eax
c0011e09:	57                   	push   edi
c0011e0a:	56                   	push   esi
c0011e0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e13:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0011e1a:	55                   	push   ebp
c0011e1b:	50                   	push   eax
c0011e1c:	e8 e3 fb ff ff       	call   c0011a04 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0011e21:	83 c4 14             	add    esp,0x14
c0011e24:	53                   	push   ebx
c0011e25:	e8 90 fc ff ff       	call   c0011aba <LogicalDisk::assignDriveLetter()>
c0011e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e2d:	e8 3e fd ff ff       	call   c0011b70 <LogicalDisk::mount()>
c0011e32:	58                   	pop    eax
c0011e33:	5a                   	pop    edx
c0011e34:	53                   	push   ebx
c0011e35:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011e3c:	e8 8f e2 ff ff       	call   c00100d0 <Device::addChild(Device*)>
c0011e41:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011e47:	5b                   	pop    ebx
c0011e48:	5e                   	pop    esi
c0011e49:	5f                   	pop    edi
c0011e4a:	5d                   	pop    ebp
c0011e4b:	c3                   	ret    

c0011e4c <createPartitionsForDisk(PhysicalDisk*)>:
c0011e4c:	55                   	push   ebp
c0011e4d:	57                   	push   edi
c0011e4e:	56                   	push   esi
c0011e4f:	53                   	push   ebx
c0011e50:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0011e56:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0011e5d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011e63:	3d 00 02 00 00       	cmp    eax,0x200
c0011e68:	74 27                	je     c0011e91 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0011e6a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0011e70:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0011e76:	83 ec 10             	sub    esp,0x10
c0011e79:	0f a4 f7 0a          	shld   edi,esi,0xa
c0011e7d:	99                   	cdq    
c0011e7e:	c1 e6 0a             	shl    esi,0xa
c0011e81:	52                   	push   edx
c0011e82:	89 fd                	mov    ebp,edi
c0011e84:	50                   	push   eax
c0011e85:	55                   	push   ebp
c0011e86:	56                   	push   esi
c0011e87:	e8 90 c3 00 00       	call   c001e21c <__udivdi3>
c0011e8c:	e9 b1 00 00 00       	jmp    c0011f42 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011e91:	83 ec 0c             	sub    esp,0xc
c0011e94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e96:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0011e9a:	56                   	push   esi
c0011e9b:	6a 01                	push   0x1
c0011e9d:	6a 00                	push   0x0
c0011e9f:	6a 00                	push   0x0
c0011ea1:	53                   	push   ebx
c0011ea2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011ea5:	83 c4 20             	add    esp,0x20
c0011ea8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0011eb0:	75 0a                	jne    c0011ebc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0011eb2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0011eba:	74 2c                	je     c0011ee8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0011ebc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011ec2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011ec8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011ece:	83 ec 10             	sub    esp,0x10
c0011ed1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011ed5:	89 f7                	mov    edi,esi
c0011ed7:	c1 e0 0a             	shl    eax,0xa
c0011eda:	c1 ff 1f             	sar    edi,0x1f
c0011edd:	57                   	push   edi
c0011ede:	56                   	push   esi
c0011edf:	52                   	push   edx
c0011ee0:	50                   	push   eax
c0011ee1:	e8 36 c3 00 00       	call   c001e21c <__udivdi3>
c0011ee6:	eb 5a                	jmp    c0011f42 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011ee8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0011eef:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0011ef6:	83 e1 7f             	and    ecx,0x7f
c0011ef9:	83 e0 7f             	and    eax,0x7f
c0011efc:	01 c1                	add    ecx,eax
c0011efe:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0011f05:	83 e0 7f             	and    eax,0x7f
c0011f08:	01 c1                	add    ecx,eax
c0011f0a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0011f11:	83 e0 7f             	and    eax,0x7f
c0011f14:	00 c1                	add    cl,al
c0011f16:	74 41                	je     c0011f59 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0011f18:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011f1e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011f24:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011f2a:	83 ec 10             	sub    esp,0x10
c0011f2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011f31:	89 f7                	mov    edi,esi
c0011f33:	c1 e0 0a             	shl    eax,0xa
c0011f36:	c1 ff 1f             	sar    edi,0x1f
c0011f39:	57                   	push   edi
c0011f3a:	56                   	push   esi
c0011f3b:	52                   	push   edx
c0011f3c:	50                   	push   eax
c0011f3d:	e8 da c2 00 00       	call   c001e21c <__udivdi3>
c0011f42:	83 c4 14             	add    esp,0x14
c0011f45:	52                   	push   edx
c0011f46:	50                   	push   eax
c0011f47:	6a 00                	push   0x0
c0011f49:	6a 00                	push   0x0
c0011f4b:	53                   	push   ebx
c0011f4c:	e8 53 fe ff ff       	call   c0011da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0011f51:	83 c4 20             	add    esp,0x20
c0011f54:	e9 79 01 00 00       	jmp    c00120d2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0011f59:	89 f0                	mov    eax,esi
c0011f5b:	31 f6                	xor    esi,esi
c0011f5d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0011f64:	75 02                	jne    c0011f68 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0011f66:	89 f1                	mov    ecx,esi
c0011f68:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0011f6f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0011f76:	c1 e2 08             	shl    edx,0x8
c0011f79:	c1 e7 10             	shl    edi,0x10
c0011f7c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0011f84:	09 fa                	or     edx,edi
c0011f86:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0011f8e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0011f95:	83 c0 10             	add    eax,0x10
c0011f98:	09 fa                	or     edx,edi
c0011f9a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0011fa1:	c1 e7 18             	shl    edi,0x18
c0011fa4:	09 fa                	or     edx,edi
c0011fa6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0011fad:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0011fb1:	c1 e7 10             	shl    edi,0x10
c0011fb4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0011fbb:	c1 e2 08             	shl    edx,0x8
c0011fbe:	09 fa                	or     edx,edi
c0011fc0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0011fc7:	09 fa                	or     edx,edi
c0011fc9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0011fd0:	c1 e7 18             	shl    edi,0x18
c0011fd3:	09 fa                	or     edx,edi
c0011fd5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0011fd9:	46                   	inc    esi
c0011fda:	83 fe 04             	cmp    esi,0x4
c0011fdd:	0f 85 7a ff ff ff    	jne    c0011f5d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0011fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe7:	83 f0 01             	xor    eax,0x1
c0011fea:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011fee:	75 57                	jne    c0012047 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0011ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ff4:	83 f0 01             	xor    eax,0x1
c0011ff7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ffb:	75 4a                	jne    c0012047 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0011ffd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012001:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012009:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012011:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012017:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001201d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012023:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012027:	89 f7                	mov    edi,esi
c0012029:	c1 e0 0a             	shl    eax,0xa
c001202c:	c1 ff 1f             	sar    edi,0x1f
c001202f:	57                   	push   edi
c0012030:	56                   	push   esi
c0012031:	52                   	push   edx
c0012032:	50                   	push   eax
c0012033:	e8 e4 c1 00 00       	call   c001e21c <__udivdi3>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001203f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012043:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012047:	84 c9                	test   cl,cl
c0012049:	74 53                	je     c001209e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001204b:	0f b6 c9             	movzx  ecx,cl
c001204e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012056:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001205a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001205e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012066:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001206a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001206e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012072:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012076:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001207a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001207e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012082:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012086:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001208a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001208e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012092:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012096:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001209a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001209e:	31 ed                	xor    ebp,ebp
c00120a0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00120a4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00120a8:	89 f8                	mov    eax,edi
c00120aa:	09 f0                	or     eax,esi
c00120ac:	74 1e                	je     c00120cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00120ae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00120b2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00120b6:	89 d1                	mov    ecx,edx
c00120b8:	09 c1                	or     ecx,eax
c00120ba:	74 10                	je     c00120cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	57                   	push   edi
c00120c0:	56                   	push   esi
c00120c1:	52                   	push   edx
c00120c2:	50                   	push   eax
c00120c3:	53                   	push   ebx
c00120c4:	e8 db fc ff ff       	call   c0011da4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00120c9:	83 c4 20             	add    esp,0x20
c00120cc:	45                   	inc    ebp
c00120cd:	83 fd 04             	cmp    ebp,0x4
c00120d0:	75 ce                	jne    c00120a0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00120d2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00120d8:	5b                   	pop    ebx
c00120d9:	5e                   	pop    esi
c00120da:	5f                   	pop    edi
c00120db:	5d                   	pop    ebp
c00120dc:	c3                   	ret    
c00120dd:	90                   	nop

c00120de <Timer::Timer(char const*)>:
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e5:	83 ec 08             	sub    esp,0x8
c00120e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ec:	50                   	push   eax
c00120ed:	e8 ce e1 ff ff       	call   c00102c0 <Device::Device(char const*)>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	ba 64 0d 02 c0       	mov    edx,0xc0020d64
c00120fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120fe:	89 10                	mov    DWORD PTR [eax],edx
c0012100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012104:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001210e:	90                   	nop
c001210f:	83 c4 0c             	add    esp,0xc
c0012112:	c3                   	ret    
c0012113:	90                   	nop

c0012114 <Timer::~Timer()>:
c0012114:	83 ec 0c             	sub    esp,0xc
c0012117:	ba 64 0d 02 c0       	mov    edx,0xc0020d64
c001211c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012120:	89 10                	mov    DWORD PTR [eax],edx
c0012122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012126:	83 ec 0c             	sub    esp,0xc
c0012129:	50                   	push   eax
c001212a:	e8 43 de ff ff       	call   c000ff72 <Device::~Device()>
c001212f:	83 c4 10             	add    esp,0x10
c0012132:	90                   	nop
c0012133:	83 c4 0c             	add    esp,0xc
c0012136:	c3                   	ret    
c0012137:	90                   	nop

c0012138 <Timer::~Timer()>:
c0012138:	83 ec 0c             	sub    esp,0xc
c001213b:	83 ec 0c             	sub    esp,0xc
c001213e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012142:	e8 cd ff ff ff       	call   c0012114 <Timer::~Timer()>
c0012147:	83 c4 10             	add    esp,0x10
c001214a:	83 ec 08             	sub    esp,0x8
c001214d:	68 5c 01 00 00       	push   0x15c
c0012152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012156:	e8 8a ca ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001215b:	83 c4 10             	add    esp,0x10
c001215e:	83 c4 0c             	add    esp,0xc
c0012161:	c3                   	ret    

c0012162 <Timer::read()>:
c0012162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012166:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001216c:	c3                   	ret    

c001216d <timerHandler(unsigned long long)>:
c001216d:	55                   	push   ebp
c001216e:	57                   	push   edi
c001216f:	56                   	push   esi
c0012170:	53                   	push   ebx
c0012171:	83 ec 0c             	sub    esp,0xc
c0012174:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012178:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001217c:	01 35 d0 37 02 c0    	add    DWORD PTR ds:0xc00237d0,esi
c0012182:	11 3d d4 37 02 c0    	adc    DWORD PTR ds:0xc00237d4,edi
c0012188:	80 3d 6d 31 02 c0 00 	cmp    BYTE PTR ds:0xc002316d,0x0
c001218f:	0f 84 07 01 00 00    	je     c001229c <timerHandler(unsigned long long)+0x12f>
c0012195:	e8 fd 56 00 00       	call   c0017897 <lockStuff()>
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	68 9c 45 02 c0       	push   0xc002459c
c00121a2:	e8 49 c7 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00121a7:	c7 04 24 9c 45 02 c0 	mov    DWORD PTR [esp],0xc002459c
c00121ae:	89 c3                	mov    ebx,eax
c00121b0:	e8 43 c7 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	84 c0                	test   al,al
c00121ba:	74 60                	je     c001221c <timerHandler(unsigned long long)+0xaf>
c00121bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121c2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00121c5:	85 c0                	test   eax,eax
c00121c7:	0f 85 91 00 00 00    	jne    c001225e <timerHandler(unsigned long long)+0xf1>
c00121cd:	e9 be 00 00 00       	jmp    c0012290 <timerHandler(unsigned long long)+0x123>
c00121d2:	83 ec 0c             	sub    esp,0xc
c00121d5:	55                   	push   ebp
c00121d6:	e8 a5 5c 00 00       	call   c0017e80 <unblockTask(ThreadControlBlock*)>
c00121db:	83 c4 10             	add    esp,0x10
c00121de:	39 eb                	cmp    ebx,ebp
c00121e0:	75 12                	jne    c00121f4 <timerHandler(unsigned long long)+0x87>
c00121e2:	83 ec 0c             	sub    esp,0xc
c00121e5:	68 9c 45 02 c0       	push   0xc002459c
c00121ea:	e8 01 c7 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00121ef:	89 c3                	mov    ebx,eax
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	68 9c 45 02 c0       	push   0xc002459c
c00121fc:	e8 f7 c6 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	84 c0                	test   al,al
c0012206:	75 b4                	jne    c00121bc <timerHandler(unsigned long long)+0x4f>
c0012208:	83 ec 0c             	sub    esp,0xc
c001220b:	68 9c 45 02 c0       	push   0xc002459c
c0012210:	e8 db c6 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012215:	83 c4 10             	add    esp,0x10
c0012218:	39 d8                	cmp    eax,ebx
c001221a:	74 a0                	je     c00121bc <timerHandler(unsigned long long)+0x4f>
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	68 9c 45 02 c0       	push   0xc002459c
c0012224:	e8 c7 c6 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012229:	c7 04 24 9c 45 02 c0 	mov    DWORD PTR [esp],0xc002459c
c0012230:	89 c5                	mov    ebp,eax
c0012232:	e8 dd c6 00 00       	call   c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012237:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001223a:	83 c4 10             	add    esp,0x10
c001223d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012240:	39 15 d0 37 02 c0    	cmp    DWORD PTR ds:0xc00237d0,edx
c0012246:	a1 d4 37 02 c0       	mov    eax,ds:0xc00237d4
c001224b:	19 c8                	sbb    eax,ecx
c001224d:	73 83                	jae    c00121d2 <timerHandler(unsigned long long)+0x65>
c001224f:	50                   	push   eax
c0012250:	50                   	push   eax
c0012251:	55                   	push   ebp
c0012252:	68 9c 45 02 c0       	push   0xc002459c
c0012257:	e8 66 c7 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001225c:	eb 93                	jmp    c00121f1 <timerHandler(unsigned long long)+0x84>
c001225e:	80 3d 6c 31 02 c0 00 	cmp    BYTE PTR ds:0xc002316c,0x0
c0012265:	74 29                	je     c0012290 <timerHandler(unsigned long long)+0x123>
c0012267:	39 c6                	cmp    esi,eax
c0012269:	bb 00 00 00 00       	mov    ebx,0x0
c001226e:	19 df                	sbb    edi,ebx
c0012270:	72 19                	jb     c001228b <timerHandler(unsigned long long)+0x11e>
c0012272:	e8 f9 55 00 00       	call   c0017870 <lockScheduler()>
c0012277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001227c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001227f:	e8 20 59 00 00       	call   c0017ba4 <schedule()>
c0012284:	e8 e9 55 00 00       	call   c0017872 <unlockScheduler()>
c0012289:	eb 05                	jmp    c0012290 <timerHandler(unsigned long long)+0x123>
c001228b:	29 f0                	sub    eax,esi
c001228d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012290:	83 c4 0c             	add    esp,0xc
c0012293:	5b                   	pop    ebx
c0012294:	5e                   	pop    esi
c0012295:	5f                   	pop    edi
c0012296:	5d                   	pop    ebp
c0012297:	e9 8d 59 00 00       	jmp    c0017c29 <unlockStuff()>
c001229c:	83 c4 0c             	add    esp,0xc
c001229f:	5b                   	pop    ebx
c00122a0:	5e                   	pop    esi
c00122a1:	5f                   	pop    edi
c00122a2:	5d                   	pop    ebp
c00122a3:	c3                   	ret    

c00122a4 <setupTimer(int)>:
c00122a4:	57                   	push   edi
c00122a5:	56                   	push   esi
c00122a6:	53                   	push   ebx
c00122a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122ab:	e8 a1 19 00 00       	call   c0013c51 <getCPUNumber()>
c00122b0:	85 c0                	test   eax,eax
c00122b2:	74 32                	je     c00122e6 <setupTimer(int)+0x42>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	68 60 01 00 00       	push   0x160
c00122bc:	e8 15 c9 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00122c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00122c4:	89 c3                	mov    ebx,eax
c00122c6:	e8 e7 b9 00 00       	call   c001dcb2 <APICTimer::APICTimer()>
c00122cb:	6a 00                	push   0x0
c00122cd:	6a 00                	push   0x0
c00122cf:	56                   	push   esi
c00122d0:	53                   	push   ebx
c00122d1:	e8 e4 b8 00 00       	call   c001dbba <APICTimer::open(int, int, void*)>
c00122d6:	83 c4 20             	add    esp,0x20
c00122d9:	e8 76 19 00 00       	call   c0013c54 <thisCPU()>
c00122de:	56                   	push   esi
c00122df:	56                   	push   esi
c00122e0:	53                   	push   ebx
c00122e1:	e9 96 00 00 00       	jmp    c001237c <setupTimer(int)+0xd8>
c00122e6:	e8 69 19 00 00       	call   c0013c54 <thisCPU()>
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00122f4:	e8 b9 e0 ff ff       	call   c00103b2 <Device::getName()>
c00122f9:	83 c4 10             	add    esp,0x10
c00122fc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00122ff:	0f 85 87 00 00 00    	jne    c001238c <setupTimer(int)+0xe8>
c0012305:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001230a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012311:	74 79                	je     c001238c <setupTimer(int)+0xe8>
c0012313:	83 ec 0c             	sub    esp,0xc
c0012316:	68 5c 01 00 00       	push   0x15c
c001231b:	e8 b6 c8 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0012320:	89 04 24             	mov    DWORD PTR [esp],eax
c0012323:	89 c3                	mov    ebx,eax
c0012325:	e8 d8 ba 00 00       	call   c001de02 <PIT::PIT()>
c001232a:	59                   	pop    ecx
c001232b:	5f                   	pop    edi
c001232c:	53                   	push   ebx
c001232d:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c0012333:	e8 98 dd ff ff       	call   c00100d0 <Device::addChild(Device*)>
c0012338:	8b 03                	mov    eax,DWORD PTR [ebx]
c001233a:	6a 00                	push   0x0
c001233c:	6a 00                	push   0x0
c001233e:	56                   	push   esi
c001233f:	53                   	push   ebx
c0012340:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012343:	83 c4 14             	add    esp,0x14
c0012346:	68 60 01 00 00       	push   0x160
c001234b:	e8 86 c8 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0012350:	89 04 24             	mov    DWORD PTR [esp],eax
c0012353:	89 c7                	mov    edi,eax
c0012355:	e8 58 b9 00 00       	call   c001dcb2 <APICTimer::APICTimer()>
c001235a:	6a 00                	push   0x0
c001235c:	6a 00                	push   0x0
c001235e:	56                   	push   esi
c001235f:	57                   	push   edi
c0012360:	e8 55 b8 00 00       	call   c001dbba <APICTimer::open(int, int, void*)>
c0012365:	83 c4 20             	add    esp,0x20
c0012368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001236a:	6a 00                	push   0x0
c001236c:	6a 00                	push   0x0
c001236e:	6a 00                	push   0x0
c0012370:	53                   	push   ebx
c0012371:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012374:	e8 db 18 00 00       	call   c0013c54 <thisCPU()>
c0012379:	5a                   	pop    edx
c001237a:	59                   	pop    ecx
c001237b:	57                   	push   edi
c001237c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012382:	e8 49 dd ff ff       	call   c00100d0 <Device::addChild(Device*)>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	eb 33                	jmp    c00123bf <setupTimer(int)+0x11b>
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	68 5c 01 00 00       	push   0x15c
c0012394:	e8 3d c8 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0012399:	89 04 24             	mov    DWORD PTR [esp],eax
c001239c:	89 c3                	mov    ebx,eax
c001239e:	e8 5f ba 00 00       	call   c001de02 <PIT::PIT()>
c00123a3:	58                   	pop    eax
c00123a4:	5a                   	pop    edx
c00123a5:	53                   	push   ebx
c00123a6:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c00123ac:	e8 1f dd ff ff       	call   c00100d0 <Device::addChild(Device*)>
c00123b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123b3:	6a 00                	push   0x0
c00123b5:	6a 00                	push   0x0
c00123b7:	56                   	push   esi
c00123b8:	53                   	push   ebx
c00123b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123bc:	83 c4 20             	add    esp,0x20
c00123bf:	89 d8                	mov    eax,ebx
c00123c1:	5b                   	pop    ebx
c00123c2:	5e                   	pop    esi
c00123c3:	5f                   	pop    edi
c00123c4:	c3                   	ret    
c00123c5:	90                   	nop

c00123c6 <VCache::VCache(PhysicalDisk*)>:
c00123c6:	53                   	push   ebx
c00123c7:	83 ec 08             	sub    esp,0x8
c00123ca:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c00123cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d3:	89 10                	mov    DWORD PTR [eax],edx
c00123d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00123e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00123eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ef:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00123f6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00123fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012401:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012408:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001240f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012413:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001241a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	6a 10                	push   0x10
c0012427:	e8 aa c7 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	89 c3                	mov    ebx,eax
c0012431:	83 ec 0c             	sub    esp,0xc
c0012434:	53                   	push   ebx
c0012435:	e8 4e 55 00 00       	call   c0017988 <Mutex::Mutex()>
c001243a:	83 c4 10             	add    esp,0x10
c001243d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012441:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012448:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001244c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001244f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012453:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001245a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001245e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012468:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001246b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012475:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001247b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001247f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012482:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012489:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001248d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012491:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012497:	c1 e0 06             	shl    eax,0x6
c001249a:	83 ec 0c             	sub    esp,0xc
c001249d:	50                   	push   eax
c001249e:	e8 7b 97 ff ff       	call   c000bc1e <malloc>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	89 c2                	mov    edx,eax
c00124a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00124af:	90                   	nop
c00124b0:	83 c4 08             	add    esp,0x8
c00124b3:	5b                   	pop    ebx
c00124b4:	c3                   	ret    
c00124b5:	90                   	nop

c00124b6 <VCache::writeWriteBuffer()>:
c00124b6:	53                   	push   ebx
c00124b7:	83 ec 14             	sub    esp,0x14
c00124ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00124be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00124c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00124c3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00124c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00124c9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00124cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00124cf:	50                   	push   eax
c00124d0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00124d3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00124da:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00124e1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00124e5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00124ec:	83 c4 28             	add    esp,0x28
c00124ef:	5b                   	pop    ebx
c00124f0:	c3                   	ret    
c00124f1:	90                   	nop

c00124f2 <VCache::~VCache()>:
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	ba 94 0d 02 c0       	mov    edx,0xc0020d94
c00124fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fe:	89 10                	mov    DWORD PTR [eax],edx
c0012500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012504:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012507:	84 c0                	test   al,al
c0012509:	74 0f                	je     c001251a <VCache::~VCache()+0x28>
c001250b:	83 ec 0c             	sub    esp,0xc
c001250e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012512:	e8 9f ff ff ff       	call   c00124b6 <VCache::writeWriteBuffer()>
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	50                   	push   eax
c0012525:	e8 04 97 ff ff       	call   c000bc2e <free>
c001252a:	83 c4 10             	add    esp,0x10
c001252d:	90                   	nop
c001252e:	83 c4 0c             	add    esp,0xc
c0012531:	c3                   	ret    

c0012532 <VCache::~VCache()>:
c0012532:	83 ec 0c             	sub    esp,0xc
c0012535:	83 ec 0c             	sub    esp,0xc
c0012538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001253c:	e8 b1 ff ff ff       	call   c00124f2 <VCache::~VCache()>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	83 ec 08             	sub    esp,0x8
c0012547:	6a 30                	push   0x30
c0012549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254d:	e8 93 c6 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0012552:	83 c4 10             	add    esp,0x10
c0012555:	83 c4 0c             	add    esp,0xc
c0012558:	c3                   	ret    
c0012559:	90                   	nop

c001255a <VCache::write(unsigned long long, int, void*)>:
c001255a:	55                   	push   ebp
c001255b:	57                   	push   edi
c001255c:	56                   	push   esi
c001255d:	53                   	push   ebx
c001255e:	83 ec 28             	sub    esp,0x28
c0012561:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012565:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012569:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001256d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012571:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012574:	e8 71 58 00 00       	call   c0017dea <Semaphore::acquire()>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012580:	74 66                	je     c00125e8 <VCache::write(unsigned long long, int, void*)+0x8e>
c0012582:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012585:	99                   	cdq    
c0012586:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001258a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001258d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012590:	89 c1                	mov    ecx,eax
c0012592:	89 d0                	mov    eax,edx
c0012594:	31 f1                	xor    ecx,esi
c0012596:	31 f8                	xor    eax,edi
c0012598:	89 ca                	mov    edx,ecx
c001259a:	09 c2                	or     edx,eax
c001259c:	75 3e                	jne    c00125dc <VCache::write(unsigned long long, int, void*)+0x82>
c001259e:	83 fd 01             	cmp    ebp,0x1
c00125a1:	75 39                	jne    c00125dc <VCache::write(unsigned long long, int, void*)+0x82>
c00125a3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00125a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00125ac:	51                   	push   ecx
c00125ad:	50                   	push   eax
c00125ae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00125b6:	0f af c8             	imul   ecx,eax
c00125b9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00125bc:	51                   	push   ecx
c00125bd:	e8 10 e0 fe ff       	call   c00005d2 <memcpy>
c00125c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	40                   	inc    eax
c00125c9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00125cc:	83 f8 40             	cmp    eax,0x40
c00125cf:	75 57                	jne    c0012628 <VCache::write(unsigned long long, int, void*)+0xce>
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	53                   	push   ebx
c00125d5:	e8 dc fe ff ff       	call   c00124b6 <VCache::writeWriteBuffer()>
c00125da:	eb 34                	jmp    c0012610 <VCache::write(unsigned long long, int, void*)+0xb6>
c00125dc:	83 ec 0c             	sub    esp,0xc
c00125df:	53                   	push   ebx
c00125e0:	e8 d1 fe ff ff       	call   c00124b6 <VCache::writeWriteBuffer()>
c00125e5:	83 c4 10             	add    esp,0x10
c00125e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00125eb:	83 fd 3f             	cmp    ebp,0x3f
c00125ee:	7f 25                	jg     c0012615 <VCache::write(unsigned long long, int, void*)+0xbb>
c00125f0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00125f3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00125f6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00125f9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00125fd:	52                   	push   edx
c00125fe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012604:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012608:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001260b:	e8 c2 df fe ff       	call   c00005d2 <memcpy>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	eb 13                	jmp    c0012628 <VCache::write(unsigned long long, int, void*)+0xce>
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	8b 10                	mov    edx,DWORD PTR [eax]
c001261a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001261e:	55                   	push   ebp
c001261f:	57                   	push   edi
c0012620:	56                   	push   esi
c0012621:	50                   	push   eax
c0012622:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012625:	83 c4 20             	add    esp,0x20
c0012628:	83 ec 0c             	sub    esp,0xc
c001262b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001262e:	e8 3f 5d 00 00       	call   c0018372 <Semaphore::release()>
c0012633:	83 c4 2c             	add    esp,0x2c
c0012636:	31 c0                	xor    eax,eax
c0012638:	5b                   	pop    ebx
c0012639:	5e                   	pop    esi
c001263a:	5f                   	pop    edi
c001263b:	5d                   	pop    ebp
c001263c:	c3                   	ret    
c001263d:	90                   	nop

c001263e <VCache::read(unsigned long long, int, void*)>:
c001263e:	57                   	push   edi
c001263f:	56                   	push   esi
c0012640:	53                   	push   ebx
c0012641:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012645:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012649:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001264d:	83 ec 0c             	sub    esp,0xc
c0012650:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012653:	e8 92 57 00 00       	call   c0017dea <Semaphore::acquire()>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001265f:	74 0c                	je     c001266d <VCache::read(unsigned long long, int, void*)+0x2f>
c0012661:	83 ec 0c             	sub    esp,0xc
c0012664:	53                   	push   ebx
c0012665:	e8 4c fe ff ff       	call   c00124b6 <VCache::writeWriteBuffer()>
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	8b 10                	mov    edx,DWORD PTR [eax]
c0012675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001267d:	57                   	push   edi
c001267e:	56                   	push   esi
c001267f:	50                   	push   eax
c0012680:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012683:	83 c4 14             	add    esp,0x14
c0012686:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012689:	e8 e4 5c 00 00       	call   c0018372 <Semaphore::release()>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	31 c0                	xor    eax,eax
c0012693:	5b                   	pop    ebx
c0012694:	5e                   	pop    esi
c0012695:	5f                   	pop    edi
c0012696:	c3                   	ret    
c0012697:	90                   	nop

c0012698 <Video::putrect(int, int, int, int, unsigned int)>:
c0012698:	55                   	push   ebp
c0012699:	57                   	push   edi
c001269a:	56                   	push   esi
c001269b:	53                   	push   ebx
c001269c:	83 ec 1c             	sub    esp,0x1c
c001269f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00126a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126ab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00126af:	01 e8                	add    eax,ebp
c00126b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00126b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b9:	01 df                	add    edi,ebx
c00126bb:	39 fb                	cmp    ebx,edi
c00126bd:	7d 1b                	jge    c00126da <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00126bf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00126c3:	7d 12                	jge    c00126d7 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00126c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00126c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00126cb:	53                   	push   ebx
c00126cc:	55                   	push   ebp
c00126cd:	45                   	inc    ebp
c00126ce:	56                   	push   esi
c00126cf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	eb e8                	jmp    c00126bf <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00126d7:	43                   	inc    ebx
c00126d8:	eb e1                	jmp    c00126bb <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00126da:	83 c4 1c             	add    esp,0x1c
c00126dd:	5b                   	pop    ebx
c00126de:	5e                   	pop    esi
c00126df:	5f                   	pop    edi
c00126e0:	5d                   	pop    ebp
c00126e1:	c3                   	ret    

c00126e2 <Video::blit(unsigned int*, int, int, int, int)>:
c00126e2:	55                   	push   ebp
c00126e3:	57                   	push   edi
c00126e4:	56                   	push   esi
c00126e5:	53                   	push   ebx
c00126e6:	83 ec 1c             	sub    esp,0x1c
c00126e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00126f1:	85 c0                	test   eax,eax
c00126f3:	79 02                	jns    c00126f7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00126f5:	31 c0                	xor    eax,eax
c00126f7:	c1 e0 02             	shl    eax,0x2
c00126fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012706:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001270a:	39 d8                	cmp    eax,ebx
c001270c:	7e 49                	jle    c0012757 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001270e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012714:	7c 41                	jl     c0012757 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012716:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001271a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001271e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012722:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012726:	39 f9                	cmp    ecx,edi
c0012728:	7e 22                	jle    c001274c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001272a:	83 c5 04             	add    ebp,0x4
c001272d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012733:	7c 14                	jl     c0012749 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012735:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012737:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001273a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001273e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012742:	56                   	push   esi
c0012743:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	47                   	inc    edi
c001274a:	eb d2                	jmp    c001271e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012750:	43                   	inc    ebx
c0012751:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012755:	eb ab                	jmp    c0012702 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012757:	83 c4 1c             	add    esp,0x1c
c001275a:	5b                   	pop    ebx
c001275b:	5e                   	pop    esi
c001275c:	5f                   	pop    edi
c001275d:	5d                   	pop    ebp
c001275e:	c3                   	ret    
c001275f:	90                   	nop

c0012760 <Video::clearScreen(unsigned int)>:
c0012760:	57                   	push   edi
c0012761:	56                   	push   esi
c0012762:	53                   	push   ebx
c0012763:	31 db                	xor    ebx,ebx
c0012765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012769:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001276f:	7e 1f                	jle    c0012790 <Video::clearScreen(unsigned int)+0x30>
c0012771:	31 ff                	xor    edi,edi
c0012773:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012779:	7e 12                	jle    c001278d <Video::clearScreen(unsigned int)+0x2d>
c001277b:	8b 06                	mov    eax,DWORD PTR [esi]
c001277d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012781:	53                   	push   ebx
c0012782:	57                   	push   edi
c0012783:	47                   	inc    edi
c0012784:	56                   	push   esi
c0012785:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	eb e6                	jmp    c0012773 <Video::clearScreen(unsigned int)+0x13>
c001278d:	43                   	inc    ebx
c001278e:	eb d9                	jmp    c0012769 <Video::clearScreen(unsigned int)+0x9>
c0012790:	5b                   	pop    ebx
c0012791:	5e                   	pop    esi
c0012792:	5f                   	pop    edi
c0012793:	c3                   	ret    

c0012794 <Video::putpixel(int, int, unsigned int)>:
c0012794:	c7 44 24 04 9c 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020d9c
c001279c:	e9 24 c5 ff ff       	jmp    c000ecc5 <Dbg::kprintf(char const*, ...)>
c00127a1:	90                   	nop

c00127a2 <Video::Video(char const*)>:
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a9:	83 ec 08             	sub    esp,0x8
c00127ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b0:	50                   	push   eax
c00127b1:	e8 0a db ff ff       	call   c00102c0 <Device::Device(char const*)>
c00127b6:	83 c4 10             	add    esp,0x10
c00127b9:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c00127be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c2:	89 10                	mov    DWORD PTR [eax],edx
c00127c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00127d2:	90                   	nop
c00127d3:	83 c4 0c             	add    esp,0xc
c00127d6:	c3                   	ret    
c00127d7:	90                   	nop

c00127d8 <Video::~Video()>:
c00127d8:	83 ec 0c             	sub    esp,0xc
c00127db:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c00127e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e4:	89 10                	mov    DWORD PTR [eax],edx
c00127e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ea:	83 ec 0c             	sub    esp,0xc
c00127ed:	50                   	push   eax
c00127ee:	e8 7f d7 ff ff       	call   c000ff72 <Device::~Device()>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	90                   	nop
c00127f7:	83 c4 0c             	add    esp,0xc
c00127fa:	c3                   	ret    
c00127fb:	90                   	nop

c00127fc <Video::~Video()>:
c00127fc:	83 ec 0c             	sub    esp,0xc
c00127ff:	83 ec 0c             	sub    esp,0xc
c0012802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012806:	e8 cd ff ff ff       	call   c00127d8 <Video::~Video()>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	83 ec 08             	sub    esp,0x8
c0012811:	68 64 01 00 00       	push   0x164
c0012816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281a:	e8 c6 c3 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	83 c4 0c             	add    esp,0xc
c0012825:	c3                   	ret    

c0012826 <Video::isMonochrome()>:
c0012826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001282a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012830:	c3                   	ret    
c0012831:	90                   	nop

c0012832 <Video::getWidth()>:
c0012832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012836:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001283c:	c3                   	ret    
c001283d:	90                   	nop

c001283e <Video::getHeight()>:
c001283e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012842:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012848:	c3                   	ret    
c0012849:	90                   	nop

c001284a <Video::drawCursor(int, int, unsigned char*, int)>:
c001284a:	55                   	push   ebp
c001284b:	57                   	push   edi
c001284c:	56                   	push   esi
c001284d:	53                   	push   ebx
c001284e:	83 ec 2c             	sub    esp,0x2c
c0012851:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012855:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012859:	83 f8 01             	cmp    eax,0x1
c001285c:	19 c9                	sbb    ecx,ecx
c001285e:	31 db                	xor    ebx,ebx
c0012860:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012864:	89 cd                	mov    ebp,ecx
c0012866:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001286e:	f7 d5                	not    ebp
c0012870:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012876:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001287a:	01 d8                	add    eax,ebx
c001287c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012880:	56                   	push   esi
c0012881:	e8 b8 ff ff ff       	call   c001283e <Video::getHeight()>
c0012886:	59                   	pop    ecx
c0012887:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001288b:	7e 70                	jle    c00128fd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001288d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012891:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012895:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012898:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001289c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00128a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00128a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128ab:	89 f8                	mov    eax,edi
c00128ad:	83 c0 20             	add    eax,0x20
c00128b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128b4:	56                   	push   esi
c00128b5:	e8 78 ff ff ff       	call   c0012832 <Video::getWidth()>
c00128ba:	5a                   	pop    edx
c00128bb:	39 c7                	cmp    edi,eax
c00128bd:	7d 34                	jge    c00128f3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00128bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00128c4:	74 05                	je     c00128cb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00128c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00128c8:	55                   	push   ebp
c00128c9:	eb 0d                	jmp    c00128d8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00128cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00128d0:	74 12                	je     c00128e4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00128d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00128d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00128dc:	57                   	push   edi
c00128dd:	56                   	push   esi
c00128de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00128e8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00128ec:	47                   	inc    edi
c00128ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00128f1:	75 c1                	jne    c00128b4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00128f3:	43                   	inc    ebx
c00128f4:	83 fb 20             	cmp    ebx,0x20
c00128f7:	0f 85 79 ff ff ff    	jne    c0012876 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00128fd:	83 c4 2c             	add    esp,0x2c
c0012900:	5b                   	pop    ebx
c0012901:	5e                   	pop    esi
c0012902:	5f                   	pop    edi
c0012903:	5d                   	pop    ebp
c0012904:	c3                   	ret    
c0012905:	90                   	nop

c0012906 <ACPI::close(int, int, void*)>:
c0012906:	83 ec 1c             	sub    esp,0x1c
c0012909:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012911:	74 0a                	je     c001291d <ACPI::close(int, int, void*)+0x17>
c0012913:	b8 00 00 00 00       	mov    eax,0x0
c0012918:	e9 9a 00 00 00       	jmp    c00129b7 <ACPI::close(int, int, void*)+0xb1>
c001291d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012922:	75 37                	jne    c001295b <ACPI::close(int, int, void*)+0x55>
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	68 ec 0d 02 c0       	push   0xc0020dec
c001292c:	e8 94 c3 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0012939:	85 c0                	test   eax,eax
c001293b:	74 07                	je     c0012944 <ACPI::close(int, int, void*)+0x3e>
c001293d:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0012942:	ff d0                	call   eax
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	68 c0 0e 02 c0       	push   0xc0020ec0
c001294c:	e8 09 20 00 00       	call   c001495a <Krnl::panic(char const*)>
c0012951:	83 c4 10             	add    esp,0x10
c0012954:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012959:	eb 5c                	jmp    c00129b7 <ACPI::close(int, int, void*)+0xb1>
c001295b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012960:	75 50                	jne    c00129b2 <ACPI::close(int, int, void*)+0xac>
c0012962:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c0012967:	85 c0                	test   eax,eax
c0012969:	74 07                	je     c0012972 <ACPI::close(int, int, void*)+0x6c>
c001296b:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c0012970:	ff d0                	call   eax
c0012972:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012977:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001297c:	83 e0 02             	and    eax,0x2
c001297f:	74 1c                	je     c001299d <ACPI::close(int, int, void*)+0x97>
c0012981:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001298c:	89 c2                	mov    edx,eax
c001298e:	ec                   	in     al,dx
c001298f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012993:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012997:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001299b:	eb da                	jmp    c0012977 <ACPI::close(int, int, void*)+0x71>
c001299d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00129a4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00129a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00129ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129b1:	ee                   	out    dx,al
c00129b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129b7:	83 c4 1c             	add    esp,0x1c
c00129ba:	c3                   	ret    

c00129bb <findRSDP()>:
c00129bb:	83 ec 1c             	sub    esp,0x1c
c00129be:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c00129c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00129c9:	83 e0 04             	and    eax,0x4
c00129cc:	84 c0                	test   al,al
c00129ce:	75 07                	jne    c00129d7 <findRSDP()+0x1c>
c00129d0:	b8 00 00 00 00       	mov    eax,0x0
c00129d5:	eb 6a                	jmp    c0012a41 <findRSDP()+0x86>
c00129d7:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c00129dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00129e1:	7f 1b                	jg     c00129fe <findRSDP()+0x43>
c00129e3:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c00129e8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00129ee:	83 e2 fb             	and    edx,0xfffffffb
c00129f1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00129f7:	b8 00 00 00 00       	mov    eax,0x0
c00129fc:	eb 43                	jmp    c0012a41 <findRSDP()+0x86>
c00129fe:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012a06:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012a0e:	77 2c                	ja     c0012a3c <findRSDP()+0x81>
c0012a10:	83 ec 04             	sub    esp,0x4
c0012a13:	6a 08                	push   0x8
c0012a15:	68 f9 0d 02 c0       	push   0xc0020df9
c0012a1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a1e:	e8 4c db fe ff       	call   c000056f <memcmp>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	85 c0                	test   eax,eax
c0012a28:	0f 94 c0             	sete   al
c0012a2b:	84 c0                	test   al,al
c0012a2d:	74 06                	je     c0012a35 <findRSDP()+0x7a>
c0012a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a33:	eb 0c                	jmp    c0012a41 <findRSDP()+0x86>
c0012a35:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012a3a:	eb ca                	jmp    c0012a06 <findRSDP()+0x4b>
c0012a3c:	b8 00 00 00 00       	mov    eax,0x0
c0012a41:	83 c4 1c             	add    esp,0x1c
c0012a44:	c3                   	ret    

c0012a45 <loadACPITables(unsigned char*)>:
c0012a45:	56                   	push   esi
c0012a46:	53                   	push   ebx
c0012a47:	83 ec 44             	sub    esp,0x44
c0012a4a:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012a4f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a55:	83 e0 04             	and    eax,0x4
c0012a58:	84 c0                	test   al,al
c0012a5a:	0f 84 05 02 00 00    	je     c0012c65 <loadACPITables(unsigned char*)+0x220>
c0012a60:	a0 00 3a 02 c0       	mov    al,ds:0xc0023a00
c0012a65:	84 c0                	test   al,al
c0012a67:	74 75                	je     c0012ade <loadACPITables(unsigned char*)+0x99>
c0012a69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012a6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a78:	83 e8 24             	sub    eax,0x24
c0012a7b:	c1 e8 03             	shr    eax,0x3
c0012a7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a82:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012a8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a8e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012a92:	0f 8d b2 00 00 00    	jge    c0012b4a <loadACPITables(unsigned char*)+0x105>
c0012a98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012a9c:	83 c0 24             	add    eax,0x24
c0012a9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012aa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012aa7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012aab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012aaf:	c1 e0 03             	shl    eax,0x3
c0012ab2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012ab6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012aba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012abf:	89 c1                	mov    ecx,eax
c0012ac1:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0012ac6:	8d 50 01             	lea    edx,[eax+0x1]
c0012ac9:	89 15 ec 37 02 c0    	mov    DWORD PTR ds:0xc00237ec,edx
c0012acf:	89 ca                	mov    edx,ecx
c0012ad1:	89 14 c5 04 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7fc],edx
c0012ad8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012adc:	eb ac                	jmp    c0012a8a <loadACPITables(unsigned char*)+0x45>
c0012ade:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012aed:	83 e8 24             	sub    eax,0x24
c0012af0:	c1 e8 02             	shr    eax,0x2
c0012af3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012af7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012aff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b03:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012b07:	7d 41                	jge    c0012b4a <loadACPITables(unsigned char*)+0x105>
c0012b09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b0d:	83 c0 24             	add    eax,0x24
c0012b10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012b1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b20:	c1 e0 02             	shl    eax,0x2
c0012b23:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012b27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b2d:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0012b32:	8d 50 01             	lea    edx,[eax+0x1]
c0012b35:	89 15 ec 37 02 c0    	mov    DWORD PTR ds:0xc00237ec,edx
c0012b3b:	89 ca                	mov    edx,ecx
c0012b3d:	89 14 c5 04 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7fc],edx
c0012b44:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012b48:	eb b5                	jmp    c0012aff <loadACPITables(unsigned char*)+0xba>
c0012b4a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012b52:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0012b57:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012b5b:	0f 8d 05 01 00 00    	jge    c0012c66 <loadACPITables(unsigned char*)+0x221>
c0012b61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b65:	8b 04 c5 04 38 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc7fc]
c0012b6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7c:	25 ff 0f 00 00       	and    eax,0xfff
c0012b81:	89 c6                	mov    esi,eax
c0012b83:	e8 73 b3 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012b88:	89 c3                	mov    ebx,eax
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	6a 01                	push   0x1
c0012b8f:	e8 d7 b1 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b9b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012ba1:	83 ec 0c             	sub    esp,0xc
c0012ba4:	6a 01                	push   0x1
c0012ba6:	6a 01                	push   0x1
c0012ba8:	50                   	push   eax
c0012ba9:	52                   	push   edx
c0012baa:	53                   	push   ebx
c0012bab:	e8 02 bb ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bb0:	83 c4 20             	add    esp,0x20
c0012bb3:	09 f0                	or     eax,esi
c0012bb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bbd:	c1 e0 03             	shl    eax,0x3
c0012bc0:	05 00 38 02 c0       	add    eax,0xc0023800
c0012bc5:	83 ec 04             	sub    esp,0x4
c0012bc8:	6a 04                	push   0x4
c0012bca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bce:	50                   	push   eax
c0012bcf:	e8 fe d9 fe ff       	call   c00005d2 <memcpy>
c0012bd4:	83 c4 10             	add    esp,0x10
c0012bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012be2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012be6:	05 00 10 00 00       	add    eax,0x1000
c0012beb:	c1 e8 0c             	shr    eax,0xc
c0012bee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfd:	25 ff 0f 00 00       	and    eax,0xfff
c0012c02:	89 c6                	mov    esi,eax
c0012c04:	e8 f2 b2 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012c09:	89 c3                	mov    ebx,eax
c0012c0b:	83 ec 0c             	sub    esp,0xc
c0012c0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c12:	e8 54 b1 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012c17:	83 c4 10             	add    esp,0x10
c0012c1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c1e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	6a 01                	push   0x1
c0012c29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c2d:	50                   	push   eax
c0012c2e:	52                   	push   edx
c0012c2f:	53                   	push   ebx
c0012c30:	e8 7d ba ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c35:	83 c4 20             	add    esp,0x20
c0012c38:	09 f0                	or     eax,esi
c0012c3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012c41:	83 ec 0c             	sub    esp,0xc
c0012c44:	50                   	push   eax
c0012c45:	e8 7b b4 ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c55:	89 14 c5 04 38 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc7fc],edx
c0012c5c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012c60:	e9 ed fe ff ff       	jmp    c0012b52 <loadACPITables(unsigned char*)+0x10d>
c0012c65:	90                   	nop
c0012c66:	83 c4 44             	add    esp,0x44
c0012c69:	5b                   	pop    ebx
c0012c6a:	5e                   	pop    esi
c0012c6b:	c3                   	ret    

c0012c6c <findRSDT(unsigned char*)>:
c0012c6c:	56                   	push   esi
c0012c6d:	53                   	push   ebx
c0012c6e:	83 ec 44             	sub    esp,0x44
c0012c71:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012c76:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c7c:	83 e0 04             	and    eax,0x4
c0012c7f:	84 c0                	test   al,al
c0012c81:	75 0a                	jne    c0012c8d <findRSDT(unsigned char*)+0x21>
c0012c83:	b8 00 00 00 00       	mov    eax,0x0
c0012c88:	e9 f7 00 00 00       	jmp    c0012d84 <findRSDT(unsigned char*)+0x118>
c0012c8d:	83 ec 04             	sub    esp,0x4
c0012c90:	6a 24                	push   0x24
c0012c92:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012c96:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012c9a:	50                   	push   eax
c0012c9b:	e8 32 d9 fe ff       	call   c00005d2 <memcpy>
c0012ca0:	83 c4 10             	add    esp,0x10
c0012ca3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012ca7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012cab:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012cb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012cbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012cbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ccb:	25 ff 0f 00 00       	and    eax,0xfff
c0012cd0:	89 c6                	mov    esi,eax
c0012cd2:	e8 24 b2 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012cd7:	89 c3                	mov    ebx,eax
c0012cd9:	83 ec 0c             	sub    esp,0xc
c0012cdc:	6a 02                	push   0x2
c0012cde:	e8 88 b0 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012ce3:	83 c4 10             	add    esp,0x10
c0012ce6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012cea:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	6a 01                	push   0x1
c0012cf5:	6a 02                	push   0x2
c0012cf7:	50                   	push   eax
c0012cf8:	52                   	push   edx
c0012cf9:	53                   	push   ebx
c0012cfa:	e8 b3 b9 ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cff:	83 c4 20             	add    esp,0x20
c0012d02:	09 f0                	or     eax,esi
c0012d04:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d0c:	25 ff 0f 00 00       	and    eax,0xfff
c0012d11:	89 c6                	mov    esi,eax
c0012d13:	e8 e3 b1 ff ff       	call   c000defb <Virt::getAKernelVAS()>
c0012d18:	89 c3                	mov    ebx,eax
c0012d1a:	83 ec 0c             	sub    esp,0xc
c0012d1d:	6a 02                	push   0x2
c0012d1f:	e8 47 b0 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c0012d24:	83 c4 10             	add    esp,0x10
c0012d27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012d2b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d31:	83 ec 0c             	sub    esp,0xc
c0012d34:	6a 01                	push   0x1
c0012d36:	6a 02                	push   0x2
c0012d38:	50                   	push   eax
c0012d39:	52                   	push   edx
c0012d3a:	53                   	push   ebx
c0012d3b:	e8 72 b9 ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d40:	83 c4 20             	add    esp,0x20
c0012d43:	09 f0                	or     eax,esi
c0012d45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d49:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012d4e:	75 11                	jne    c0012d61 <findRSDT(unsigned char*)+0xf5>
c0012d50:	c6 05 00 3a 02 c0 00 	mov    BYTE PTR ds:0xc0023a00,0x0
c0012d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d5b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d5f:	eb 1f                	jmp    c0012d80 <findRSDT(unsigned char*)+0x114>
c0012d61:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012d66:	75 11                	jne    c0012d79 <findRSDT(unsigned char*)+0x10d>
c0012d68:	c6 05 00 3a 02 c0 01 	mov    BYTE PTR ds:0xc0023a00,0x1
c0012d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d77:	eb 07                	jmp    c0012d80 <findRSDT(unsigned char*)+0x114>
c0012d79:	b8 00 00 00 00       	mov    eax,0x0
c0012d7e:	eb 04                	jmp    c0012d84 <findRSDT(unsigned char*)+0x118>
c0012d80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d84:	83 c4 44             	add    esp,0x44
c0012d87:	5b                   	pop    ebx
c0012d88:	5e                   	pop    esi
c0012d89:	c3                   	ret    

c0012d8a <findDataTable(unsigned char*, char*)>:
c0012d8a:	83 ec 1c             	sub    esp,0x1c
c0012d8d:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012d92:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d98:	83 e0 04             	and    eax,0x4
c0012d9b:	84 c0                	test   al,al
c0012d9d:	75 07                	jne    c0012da6 <findDataTable(unsigned char*, char*)+0x1c>
c0012d9f:	b8 00 00 00 00       	mov    eax,0x0
c0012da4:	eb 7c                	jmp    c0012e22 <findDataTable(unsigned char*, char*)+0x98>
c0012da6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012dae:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0012db3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012db7:	7d 3a                	jge    c0012df3 <findDataTable(unsigned char*, char*)+0x69>
c0012db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dbd:	c1 e0 03             	shl    eax,0x3
c0012dc0:	05 00 38 02 c0       	add    eax,0xc0023800
c0012dc5:	83 ec 04             	sub    esp,0x4
c0012dc8:	6a 04                	push   0x4
c0012dca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dce:	50                   	push   eax
c0012dcf:	e8 9b d7 fe ff       	call   c000056f <memcmp>
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	85 c0                	test   eax,eax
c0012dd9:	0f 94 c0             	sete   al
c0012ddc:	84 c0                	test   al,al
c0012dde:	74 0d                	je     c0012ded <findDataTable(unsigned char*, char*)+0x63>
c0012de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012de4:	8b 04 c5 04 38 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc7fc]
c0012deb:	eb 35                	jmp    c0012e22 <findDataTable(unsigned char*, char*)+0x98>
c0012ded:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012df1:	eb bb                	jmp    c0012dae <findDataTable(unsigned char*, char*)+0x24>
c0012df3:	a0 00 3a 02 c0       	mov    al,ds:0xc0023a00
c0012df8:	84 c0                	test   al,al
c0012dfa:	74 07                	je     c0012e03 <findDataTable(unsigned char*, char*)+0x79>
c0012dfc:	b8 58 00 00 00       	mov    eax,0x58
c0012e01:	eb 05                	jmp    c0012e08 <findDataTable(unsigned char*, char*)+0x7e>
c0012e03:	b8 52 00 00 00       	mov    eax,0x52
c0012e08:	83 ec 04             	sub    esp,0x4
c0012e0b:	50                   	push   eax
c0012e0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e10:	68 e4 0e 02 c0       	push   0xc0020ee4
c0012e15:	e8 ab be ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0012e1a:	83 c4 10             	add    esp,0x10
c0012e1d:	b8 00 00 00 00       	mov    eax,0x0
c0012e22:	83 c4 1c             	add    esp,0x1c
c0012e25:	c3                   	ret    

c0012e26 <scanMADT()>:
c0012e26:	83 ec 2c             	sub    esp,0x2c
c0012e29:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012e2e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e34:	83 e0 04             	and    eax,0x4
c0012e37:	84 c0                	test   al,al
c0012e39:	0f 84 73 03 00 00    	je     c00131b2 <scanMADT()+0x38c>
c0012e3f:	e8 77 fb ff ff       	call   c00129bb <findRSDP()>
c0012e44:	a3 0c 3a 02 c0       	mov    ds:0xc0023a0c,eax
c0012e49:	a1 0c 3a 02 c0       	mov    eax,ds:0xc0023a0c
c0012e4e:	85 c0                	test   eax,eax
c0012e50:	75 19                	jne    c0012e6b <scanMADT()+0x45>
c0012e52:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012e57:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012e5d:	83 e2 fb             	and    edx,0xfffffffb
c0012e60:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012e66:	e9 4b 03 00 00       	jmp    c00131b6 <scanMADT()+0x390>
c0012e6b:	a1 0c 3a 02 c0       	mov    eax,ds:0xc0023a0c
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	50                   	push   eax
c0012e74:	e8 f3 fd ff ff       	call   c0012c6c <findRSDT(unsigned char*)>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	a3 08 3a 02 c0       	mov    ds:0xc0023a08,eax
c0012e81:	a1 08 3a 02 c0       	mov    eax,ds:0xc0023a08
c0012e86:	85 c0                	test   eax,eax
c0012e88:	75 19                	jne    c0012ea3 <scanMADT()+0x7d>
c0012e8a:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012e8f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012e95:	83 e2 fb             	and    edx,0xfffffffb
c0012e98:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012e9e:	e9 13 03 00 00       	jmp    c00131b6 <scanMADT()+0x390>
c0012ea3:	a1 08 3a 02 c0       	mov    eax,ds:0xc0023a08
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	50                   	push   eax
c0012eac:	e8 94 fb ff ff       	call   c0012a45 <loadACPITables(unsigned char*)>
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	a1 08 3a 02 c0       	mov    eax,ds:0xc0023a08
c0012eb9:	83 ec 08             	sub    esp,0x8
c0012ebc:	68 02 0e 02 c0       	push   0xc0020e02
c0012ec1:	50                   	push   eax
c0012ec2:	e8 c3 fe ff ff       	call   c0012d8a <findDataTable(unsigned char*, char*)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ece:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ed3:	75 19                	jne    c0012eee <scanMADT()+0xc8>
c0012ed5:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0012eda:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ee0:	83 e2 fe             	and    edx,0xfffffffe
c0012ee3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012ee9:	e9 c8 02 00 00       	jmp    c00131b6 <scanMADT()+0x390>
c0012eee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ef6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012efa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012efd:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0012f01:	0f 87 af 02 00 00    	ja     c00131b6 <scanMADT()+0x390>
c0012f07:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0012f0f:	0f 87 a1 02 00 00    	ja     c00131b6 <scanMADT()+0x390>
c0012f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	8d 50 01             	lea    edx,[eax+0x1]
c0012f24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012f28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012f2c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012f30:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0012f34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f38:	8d 50 01             	lea    edx,[eax+0x1]
c0012f3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012f3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012f43:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012f47:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0012f4b:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0012f50:	0f 86 5f 02 00 00    	jbe    c00131b5 <scanMADT()+0x38f>
c0012f56:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0012f5b:	75 57                	jne    c0012fb4 <scanMADT()+0x18e>
c0012f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f61:	8d 50 01             	lea    edx,[eax+0x1]
c0012f64:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012f68:	8a 15 40 3b 02 c0    	mov    dl,BYTE PTR ds:0xc0023b40
c0012f6e:	0f b6 d2             	movzx  edx,dl
c0012f71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012f75:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012f79:	88 82 80 3b 02 c0    	mov    BYTE PTR [edx-0x3ffdc480],al
c0012f7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f83:	8d 50 01             	lea    edx,[eax+0x1]
c0012f86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012f8a:	8a 15 40 3b 02 c0    	mov    dl,BYTE PTR ds:0xc0023b40
c0012f90:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012f93:	88 0d 40 3b 02 c0    	mov    BYTE PTR ds:0xc0023b40,cl
c0012f99:	0f b6 d2             	movzx  edx,dl
c0012f9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012fa0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012fa4:	88 82 60 3b 02 c0    	mov    BYTE PTR [edx-0x3ffdc4a0],al
c0012faa:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0012faf:	e9 ea 01 00 00       	jmp    c001319e <scanMADT()+0x378>
c0012fb4:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0012fb9:	0f 85 14 01 00 00    	jne    c00130d3 <scanMADT()+0x2ad>
c0012fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0012fc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fca:	8a 15 10 3a 02 c0    	mov    dl,BYTE PTR ds:0xc0023a10
c0012fd0:	0f b6 d2             	movzx  edx,dl
c0012fd3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012fd7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012fdb:	88 82 20 3a 02 c0    	mov    BYTE PTR [edx-0x3ffdc5e0],al
c0012fe1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012fe5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fed:	01 d0                	add    eax,edx
c0012fef:	83 c0 2c             	add    eax,0x2c
c0012ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0012ff4:	0f b6 d0             	movzx  edx,al
c0012ff7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ffb:	8d 48 01             	lea    ecx,[eax+0x1]
c0012ffe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013002:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013006:	0f b6 c0             	movzx  eax,al
c0013009:	c1 e0 08             	shl    eax,0x8
c001300c:	89 d1                	mov    ecx,edx
c001300e:	09 c1                	or     ecx,eax
c0013010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013014:	8d 50 02             	lea    edx,[eax+0x2]
c0013017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001301b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001301f:	0f b6 c0             	movzx  eax,al
c0013022:	c1 e0 10             	shl    eax,0x10
c0013025:	09 c1                	or     ecx,eax
c0013027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001302b:	8d 50 03             	lea    edx,[eax+0x3]
c001302e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013032:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013036:	0f b6 c0             	movzx  eax,al
c0013039:	c1 e0 18             	shl    eax,0x18
c001303c:	09 c1                	or     ecx,eax
c001303e:	89 ca                	mov    edx,ecx
c0013040:	a0 10 3a 02 c0       	mov    al,ds:0xc0023a10
c0013045:	0f b6 c0             	movzx  eax,al
c0013048:	89 14 85 40 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5c0],edx
c001304f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013054:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001305c:	01 d0                	add    eax,edx
c001305e:	83 c0 2c             	add    eax,0x2c
c0013061:	8a 00                	mov    al,BYTE PTR [eax]
c0013063:	0f b6 d0             	movzx  edx,al
c0013066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001306a:	8d 48 01             	lea    ecx,[eax+0x1]
c001306d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013071:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013075:	0f b6 c0             	movzx  eax,al
c0013078:	c1 e0 08             	shl    eax,0x8
c001307b:	89 d1                	mov    ecx,edx
c001307d:	09 c1                	or     ecx,eax
c001307f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013083:	8d 50 02             	lea    edx,[eax+0x2]
c0013086:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001308a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001308e:	0f b6 c0             	movzx  eax,al
c0013091:	c1 e0 10             	shl    eax,0x10
c0013094:	09 c1                	or     ecx,eax
c0013096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001309a:	8d 50 03             	lea    edx,[eax+0x3]
c001309d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130a5:	0f b6 c0             	movzx  eax,al
c00130a8:	c1 e0 18             	shl    eax,0x18
c00130ab:	09 c1                	or     ecx,eax
c00130ad:	89 ca                	mov    edx,ecx
c00130af:	a0 10 3a 02 c0       	mov    al,ds:0xc0023a10
c00130b4:	0f b6 c0             	movzx  eax,al
c00130b7:	89 14 85 c0 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc540],edx
c00130be:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00130c3:	a0 10 3a 02 c0       	mov    al,ds:0xc0023a10
c00130c8:	40                   	inc    eax
c00130c9:	a2 10 3a 02 c0       	mov    ds:0xc0023a10,al
c00130ce:	e9 cb 00 00 00       	jmp    c001319e <scanMADT()+0x378>
c00130d3:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00130d8:	0f 85 a6 00 00 00    	jne    c0013184 <scanMADT()+0x35e>
c00130de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130e2:	8d 50 01             	lea    edx,[eax+0x1]
c00130e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00130e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00130f1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00130f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130f9:	8d 50 01             	lea    edx,[eax+0x1]
c00130fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013100:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013104:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013108:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001310c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013114:	01 d0                	add    eax,edx
c0013116:	83 c0 2c             	add    eax,0x2c
c0013119:	8a 00                	mov    al,BYTE PTR [eax]
c001311b:	0f b6 d0             	movzx  edx,al
c001311e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013122:	8d 48 01             	lea    ecx,[eax+0x1]
c0013125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013129:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001312d:	0f b6 c0             	movzx  eax,al
c0013130:	c1 e0 08             	shl    eax,0x8
c0013133:	89 d1                	mov    ecx,edx
c0013135:	09 c1                	or     ecx,eax
c0013137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001313b:	8d 50 02             	lea    edx,[eax+0x2]
c001313e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013142:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013146:	0f b6 c0             	movzx  eax,al
c0013149:	c1 e0 10             	shl    eax,0x10
c001314c:	09 c1                	or     ecx,eax
c001314e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013152:	8d 50 03             	lea    edx,[eax+0x3]
c0013155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013159:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001315d:	0f b6 c0             	movzx  eax,al
c0013160:	c1 e0 18             	shl    eax,0x18
c0013163:	09 c8                	or     eax,ecx
c0013165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013169:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001316e:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013173:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013178:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001317c:	88 90 c0 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd740],dl
c0013182:	eb 1a                	jmp    c001319e <scanMADT()+0x378>
c0013184:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013189:	75 07                	jne    c0013192 <scanMADT()+0x36c>
c001318b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013190:	eb 0c                	jmp    c001319e <scanMADT()+0x378>
c0013192:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013197:	75 05                	jne    c001319e <scanMADT()+0x378>
c0013199:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001319e:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00131a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131a7:	01 d0                	add    eax,edx
c00131a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131ad:	e9 44 fd ff ff       	jmp    c0012ef6 <scanMADT()+0xd0>
c00131b2:	90                   	nop
c00131b3:	eb 01                	jmp    c00131b6 <scanMADT()+0x390>
c00131b5:	90                   	nop
c00131b6:	83 c4 2c             	add    esp,0x2c
c00131b9:	c3                   	ret    

c00131ba <ACPI::ACPI()>:
c00131ba:	83 ec 0c             	sub    esp,0xc
c00131bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c1:	83 ec 08             	sub    esp,0x8
c00131c4:	68 07 0e 02 c0       	push   0xc0020e07
c00131c9:	50                   	push   eax
c00131ca:	e8 f1 d0 ff ff       	call   c00102c0 <Device::Device(char const*)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	ba b0 0f 02 c0       	mov    edx,0xc0020fb0
c00131d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131db:	89 10                	mov    DWORD PTR [eax],edx
c00131dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00131e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ec:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00131f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fa:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013208:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001320f:	e8 12 fc ff ff       	call   c0012e26 <scanMADT()>
c0013214:	90                   	nop
c0013215:	83 c4 0c             	add    esp,0xc
c0013218:	c3                   	ret    
c0013219:	90                   	nop

c001321a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001321a:	83 ec 2c             	sub    esp,0x2c
c001321d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013221:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013225:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013229:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001322d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013232:	88 d0                	mov    al,dl
c0013234:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013238:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001323d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013245:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013249:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001324f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013253:	0f 8d 97 00 00 00    	jge    c00132f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001325d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013261:	83 c2 2a             	add    edx,0x2a
c0013264:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013268:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001326d:	75 78                	jne    c00132e7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001326f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013277:	83 c2 2a             	add    edx,0x2a
c001327a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001327e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013282:	75 63                	jne    c00132e7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013284:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013289:	74 3a                	je     c00132c5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001328b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001328f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013293:	83 c2 2a             	add    edx,0x2a
c0013296:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001329a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001329e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00132a1:	39 c2                	cmp    edx,eax
c00132a3:	74 10                	je     c00132b5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00132a5:	83 ec 0c             	sub    esp,0xc
c00132a8:	68 14 0f 02 c0       	push   0xc0020f14
c00132ad:	e8 a8 16 00 00       	call   c001495a <Krnl::panic(char const*)>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	68 0c 0e 02 c0       	push   0xc0020e0c
c00132bd:	e8 98 16 00 00       	call   c001495a <Krnl::panic(char const*)>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00132c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132d1:	83 c2 2a             	add    edx,0x2a
c00132d4:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00132d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00132da:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00132dd:	89 01                	mov    DWORD PTR [ecx],eax
c00132df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00132e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00132e7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00132eb:	e9 55 ff ff ff       	jmp    c0013245 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00132f0:	90                   	nop
c00132f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132f5:	83 c4 2c             	add    esp,0x2c
c00132f8:	c2 04 00             	ret    0x4
c00132fb:	90                   	nop

c00132fc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00132fc:	56                   	push   esi
c00132fd:	53                   	push   ebx
c00132fe:	83 ec 14             	sub    esp,0x14
c0013301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013305:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013309:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001330d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013312:	88 c8                	mov    al,cl
c0013314:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013318:	88 d0                	mov    al,dl
c001331a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001331e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013322:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001332c:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013332:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013337:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001333c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013341:	83 ec 04             	sub    esp,0x4
c0013344:	56                   	push   esi
c0013345:	53                   	push   ebx
c0013346:	51                   	push   ecx
c0013347:	52                   	push   edx
c0013348:	50                   	push   eax
c0013349:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001334d:	68 44 0f 02 c0       	push   0xc0020f44
c0013352:	e8 6e b9 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0013357:	83 c4 20             	add    esp,0x20
c001335a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001335e:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013368:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001336b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001336f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013377:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001337d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013381:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013388:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001338d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013391:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013397:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001339b:	8d 48 01             	lea    ecx,[eax+0x1]
c001339e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133a2:	83 c2 2a             	add    edx,0x2a
c00133a5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00133a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ad:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00133b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00133ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00133be:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00133c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c6:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00133cc:	8d 50 01             	lea    edx,[eax+0x1]
c00133cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d3:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00133d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133dd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00133e3:	3d 00 08 00 00       	cmp    eax,0x800
c00133e8:	75 10                	jne    c00133fa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	68 1b 0e 02 c0       	push   0xc0020e1b
c00133f2:	e8 63 15 00 00       	call   c001495a <Krnl::panic(char const*)>
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	90                   	nop
c00133fb:	83 c4 14             	add    esp,0x14
c00133fe:	5b                   	pop    ebx
c00133ff:	5e                   	pop    esi
c0013400:	c3                   	ret    
c0013401:	90                   	nop

c0013402 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013402:	b8 00 00 00 00       	mov    eax,0x0
c0013407:	c3                   	ret    

c0013408 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013408:	83 ec 1c             	sub    esp,0x1c
c001340b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001340f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013412:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013416:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001341b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013420:	83 ec 08             	sub    esp,0x8
c0013423:	52                   	push   edx
c0013424:	50                   	push   eax
c0013425:	e8 0c 7e ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013431:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0013436:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001343b:	83 ec 04             	sub    esp,0x4
c001343e:	6a 01                	push   0x1
c0013440:	52                   	push   edx
c0013441:	50                   	push   eax
c0013442:	e8 fd 7e ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	90                   	nop
c001344b:	83 c4 1c             	add    esp,0x1c
c001344e:	c3                   	ret    
c001344f:	90                   	nop

c0013450 <ACPI::open(int, int, void*)>:
c0013450:	53                   	push   ebx
c0013451:	83 ec 18             	sub    esp,0x18
c0013454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013458:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001345f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013463:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013469:	84 c0                	test   al,al
c001346b:	74 60                	je     c00134cd <ACPI::open(int, int, void*)+0x7d>
c001346d:	83 ec 0c             	sub    esp,0xc
c0013470:	68 58 01 00 00       	push   0x158
c0013475:	e8 5c b7 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	89 c3                	mov    ebx,eax
c001347f:	83 ec 0c             	sub    esp,0xc
c0013482:	53                   	push   ebx
c0013483:	e8 d8 7a 00 00       	call   c001af60 <PCI::PCI()>
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001348f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013493:	83 ec 08             	sub    esp,0x8
c0013496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001349a:	50                   	push   eax
c001349b:	e8 30 cc ff ff       	call   c00100d0 <Device::addChild(Device*)>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00134a9:	83 c0 08             	add    eax,0x8
c00134ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00134ae:	6a 00                	push   0x0
c00134b0:	6a 00                	push   0x0
c00134b2:	6a 00                	push   0x0
c00134b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134b8:	ff d0                	call   eax
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	83 ec 0c             	sub    esp,0xc
c00134c0:	68 38 0e 02 c0       	push   0xc0020e38
c00134c5:	e8 fb b7 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	83 ec 0c             	sub    esp,0xc
c00134d0:	68 43 0e 02 c0       	push   0xc0020e43
c00134d5:	e8 74 33 00 00       	call   c001684e <Thr::loadKernelSymbolTable(char const*)>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c00134e3:	83 ec 08             	sub    esp,0x8
c00134e6:	6a 01                	push   0x1
c00134e8:	68 61 0e 02 c0       	push   0xc0020e61
c00134ed:	e8 21 3e 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c00134f2:	83 c4 10             	add    esp,0x10
c00134f5:	83 ec 08             	sub    esp,0x8
c00134f8:	53                   	push   ebx
c00134f9:	50                   	push   eax
c00134fa:	e8 67 3f 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	6a 01                	push   0x1
c001350d:	68 7e 0e 02 c0       	push   0xc0020e7e
c0013512:	e8 fc 3d 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	83 ec 08             	sub    esp,0x8
c001351d:	53                   	push   ebx
c001351e:	50                   	push   eax
c001351f:	e8 42 3f 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001352c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013532:	83 e0 04             	and    eax,0x4
c0013535:	84 c0                	test   al,al
c0013537:	0f 84 cf 00 00 00    	je     c001360c <ACPI::open(int, int, void*)+0x1bc>
c001353d:	83 ec 0c             	sub    esp,0xc
c0013540:	68 14 01 00 00       	push   0x114
c0013545:	e8 8c b6 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	89 c3                	mov    ebx,eax
c001354f:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0013554:	83 ec 04             	sub    esp,0x4
c0013557:	50                   	push   eax
c0013558:	68 9b 0e 02 c0       	push   0xc0020e9b
c001355d:	53                   	push   ebx
c001355e:	e8 91 bc ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001356a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001356f:	74 17                	je     c0013588 <ACPI::open(int, int, void*)+0x138>
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013578:	e8 49 bf ff ff       	call   c000f4c6 <File::exists()>
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	84 c0                	test   al,al
c0013582:	74 04                	je     c0013588 <ACPI::open(int, int, void*)+0x138>
c0013584:	b0 01                	mov    al,0x1
c0013586:	eb 02                	jmp    c001358a <ACPI::open(int, int, void*)+0x13a>
c0013588:	b0 00                	mov    al,0x0
c001358a:	84 c0                	test   al,al
c001358c:	74 25                	je     c00135b3 <ACPI::open(int, int, void*)+0x163>
c001358e:	8b 1d 68 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023168
c0013594:	83 ec 08             	sub    esp,0x8
c0013597:	6a 01                	push   0x1
c0013599:	68 9b 0e 02 c0       	push   0xc0020e9b
c001359e:	e8 70 3d 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	83 ec 08             	sub    esp,0x8
c00135a9:	53                   	push   ebx
c00135aa:	50                   	push   eax
c00135ab:	e8 b6 3e 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135b8:	74 1e                	je     c00135d8 <ACPI::open(int, int, void*)+0x188>
c00135ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135bf:	74 17                	je     c00135d8 <ACPI::open(int, int, void*)+0x188>
c00135c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c7:	83 c0 08             	add    eax,0x8
c00135ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00135cc:	83 ec 0c             	sub    esp,0xc
c00135cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135d3:	ff d0                	call   eax
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	a1 08 3a 02 c0       	mov    eax,ds:0xc0023a08
c00135dd:	83 ec 08             	sub    esp,0x8
c00135e0:	68 b8 0e 02 c0       	push   0xc0020eb8
c00135e5:	50                   	push   eax
c00135e6:	e8 9f f7 ff ff       	call   c0012d8a <findDataTable(unsigned char*, char*)>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135f2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00135f7:	74 13                	je     c001360c <ACPI::open(int, int, void*)+0x1bc>
c00135f9:	83 ec 08             	sub    esp,0x8
c00135fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013604:	e8 ff fd ff ff       	call   c0013408 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	b8 00 00 00 00       	mov    eax,0x0
c0013611:	83 c4 18             	add    esp,0x18
c0013614:	5b                   	pop    ebx
c0013615:	c3                   	ret    

c0013616 <ACPI::sleep()>:
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c001361e:	85 c0                	test   eax,eax
c0013620:	74 07                	je     c0013629 <ACPI::sleep()+0x13>
c0013622:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c0013627:	ff d0                	call   eax
c0013629:	90                   	nop
c001362a:	83 c4 0c             	add    esp,0xc
c001362d:	c3                   	ret    

c001362e <CPU::close(int, int, void*)>:
c001362e:	31 c0                	xor    eax,eax
c0013630:	c3                   	ret    

c0013631 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013631:	55                   	push   ebp
c0013632:	57                   	push   edi
c0013633:	56                   	push   esi
c0013634:	53                   	push   ebx
c0013635:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013639:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001363d:	89 ce                	mov    esi,ecx
c001363f:	89 d5                	mov    ebp,edx
c0013641:	80 f9 04             	cmp    cl,0x4
c0013644:	75 28                	jne    c001366e <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013646:	8d 42 f9             	lea    eax,[edx-0x7]
c0013649:	3c 03                	cmp    al,0x3
c001364b:	0f 86 63 01 00 00    	jbe    c00137b4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013651:	80 fa 03             	cmp    dl,0x3
c0013654:	0f 84 5a 01 00 00    	je     c00137b4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001365a:	8d 7a f2             	lea    edi,[edx-0xe]
c001365d:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0013662:	89 fb                	mov    ebx,edi
c0013664:	80 fb 01             	cmp    bl,0x1
c0013667:	77 4e                	ja     c00136b7 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013669:	e9 52 01 00 00       	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001366e:	80 f9 05             	cmp    cl,0x5
c0013671:	75 4d                	jne    c00136c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013673:	b8 a0 2a 02 c0       	mov    eax,0xc0022aa0
c0013678:	80 fa 03             	cmp    dl,0x3
c001367b:	0f 86 3f 01 00 00    	jbe    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013681:	8d 7a fa             	lea    edi,[edx-0x6]
c0013684:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c0013689:	89 fb                	mov    ebx,edi
c001368b:	80 fb 01             	cmp    bl,0x1
c001368e:	0f 86 2c 01 00 00    	jbe    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013694:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0013699:	80 fa 08             	cmp    dl,0x8
c001369c:	0f 84 1e 01 00 00    	je     c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136a2:	89 d7                	mov    edi,edx
c00136a4:	b8 d0 2a 02 c0       	mov    eax,0xc0022ad0
c00136a9:	83 e7 fb             	and    edi,0xfffffffb
c00136ac:	89 fb                	mov    ebx,edi
c00136ae:	80 fb 09             	cmp    bl,0x9
c00136b1:	0f 84 09 01 00 00    	je     c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136b7:	31 c0                	xor    eax,eax
c00136b9:	89 eb                	mov    ebx,ebp
c00136bb:	0f b6 fb             	movzx  edi,bl
c00136be:	eb 30                	jmp    c00136f0 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00136c0:	31 c0                	xor    eax,eax
c00136c2:	80 f9 06             	cmp    cl,0x6
c00136c5:	75 f2                	jne    c00136b9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136c7:	80 fa 0a             	cmp    dl,0xa
c00136ca:	77 ed                	ja     c00136b9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136cc:	bf de 05 00 00       	mov    edi,0x5de
c00136d1:	0f a3 d7             	bt     edi,edx
c00136d4:	73 e3                	jae    c00136b9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136d6:	b8 e0 2a 02 c0       	mov    eax,0xc0022ae0
c00136db:	e9 e0 00 00 00       	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136e0:	39 c7                	cmp    edi,eax
c00136e2:	0f 84 d3 00 00 00    	je     c00137bb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00136e8:	40                   	inc    eax
c00136e9:	3d d0 00 00 00       	cmp    eax,0xd0
c00136ee:	74 09                	je     c00136f9 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00136f0:	89 f3                	mov    ebx,esi
c00136f2:	80 fb 0f             	cmp    bl,0xf
c00136f5:	75 f1                	jne    c00136e8 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00136f7:	eb e7                	jmp    c00136e0 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00136f9:	80 f9 10             	cmp    cl,0x10
c00136fc:	75 14                	jne    c0013712 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c00136fe:	8d 42 fc             	lea    eax,[edx-0x4]
c0013701:	83 e0 fb             	and    eax,0xfffffffb
c0013704:	3c 02                	cmp    al,0x2
c0013706:	76 34                	jbe    c001373c <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013708:	b8 29 11 02 c0       	mov    eax,0xc0021129
c001370d:	80 fa 02             	cmp    dl,0x2
c0013710:	eb 24                	jmp    c0013736 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013712:	80 f9 11             	cmp    cl,0x11
c0013715:	75 13                	jne    c001372a <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013717:	b8 29 11 02 c0       	mov    eax,0xc0021129
c001371c:	80 fa 03             	cmp    dl,0x3
c001371f:	0f 85 9b 00 00 00    	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013725:	e9 91 00 00 00       	jmp    c00137bb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001372a:	80 f9 12             	cmp    cl,0x12
c001372d:	75 14                	jne    c0013743 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001372f:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013734:	fe ca                	dec    dl
c0013736:	0f 85 84 00 00 00    	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001373c:	b8 00 2b 02 c0       	mov    eax,0xc0022b00
c0013741:	eb 7d                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013743:	80 f9 14             	cmp    cl,0x14
c0013746:	75 12                	jne    c001375a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013748:	4a                   	dec    edx
c0013749:	b8 29 11 02 c0       	mov    eax,0xc0021129
c001374e:	80 fa 01             	cmp    dl,0x1
c0013751:	77 6d                	ja     c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013753:	b8 10 2b 02 c0       	mov    eax,0xc0022b10
c0013758:	eb 66                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001375a:	80 f9 15             	cmp    cl,0x15
c001375d:	75 31                	jne    c0013790 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c001375f:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c0013764:	80 fa 01             	cmp    dl,0x1
c0013767:	74 57                	je     c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013769:	b8 29 11 02 c0       	mov    eax,0xc0021129
c001376e:	80 fa 13             	cmp    dl,0x13
c0013771:	76 0c                	jbe    c001377f <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013773:	80 fa 30             	cmp    dl,0x30
c0013776:	75 48                	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013778:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c001377d:	eb 41                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001377f:	b9 04 00 09 00       	mov    ecx,0x90004
c0013784:	0f a3 d1             	bt     ecx,edx
c0013787:	73 37                	jae    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013789:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c001378e:	eb 30                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013790:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013795:	80 f9 16             	cmp    cl,0x16
c0013798:	75 26                	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001379a:	b8 50 2b 02 c0       	mov    eax,0xc0022b50
c001379f:	84 d2                	test   dl,dl
c00137a1:	74 1d                	je     c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137a3:	b8 29 11 02 c0       	mov    eax,0xc0021129
c00137a8:	80 fa 30             	cmp    dl,0x30
c00137ab:	75 13                	jne    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137ad:	b8 60 2b 02 c0       	mov    eax,0xc0022b60
c00137b2:	eb 0c                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137b4:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c00137b9:	eb 05                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137bb:	b8 f0 2a 02 c0       	mov    eax,0xc0022af0
c00137c0:	5b                   	pop    ebx
c00137c1:	5e                   	pop    esi
c00137c2:	5f                   	pop    edi
c00137c3:	5d                   	pop    ebp
c00137c4:	c3                   	ret    

c00137c5 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00137c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00137c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137cd:	80 f9 04             	cmp    cl,0x4
c00137d0:	75 6b                	jne    c001383d <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00137d2:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c00137d7:	80 fa 01             	cmp    dl,0x1
c00137da:	0f 86 92 02 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137e0:	b8 f0 28 02 c0       	mov    eax,0xc00228f0
c00137e5:	80 fa 02             	cmp    dl,0x2
c00137e8:	0f 84 84 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137ee:	b8 00 29 02 c0       	mov    eax,0xc0022900
c00137f3:	80 fa 03             	cmp    dl,0x3
c00137f6:	0f 84 76 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137fc:	b8 10 29 02 c0       	mov    eax,0xc0022910
c0013801:	80 fa 04             	cmp    dl,0x4
c0013804:	0f 84 68 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001380a:	b8 20 29 02 c0       	mov    eax,0xc0022920
c001380f:	80 fa 05             	cmp    dl,0x5
c0013812:	0f 84 5a 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013818:	b8 00 29 02 c0       	mov    eax,0xc0022900
c001381d:	80 fa 07             	cmp    dl,0x7
c0013820:	0f 84 4c 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013826:	83 ea 08             	sub    edx,0x8
c0013829:	b8 29 11 02 c0       	mov    eax,0xc0021129
c001382e:	80 fa 01             	cmp    dl,0x1
c0013831:	0f 87 3b 02 00 00    	ja     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013837:	b8 30 29 02 c0       	mov    eax,0xc0022930
c001383c:	c3                   	ret    
c001383d:	80 f9 05             	cmp    cl,0x5
c0013840:	75 45                	jne    c0013887 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013842:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013845:	b8 40 29 02 c0       	mov    eax,0xc0022940
c001384a:	80 f9 02             	cmp    cl,0x2
c001384d:	0f 86 1f 02 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013853:	80 fa 04             	cmp    dl,0x4
c0013856:	0f 84 f3 01 00 00    	je     c0013a4f <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c001385c:	80 fa 07             	cmp    dl,0x7
c001385f:	0f 84 0d 02 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013865:	b8 50 29 02 c0       	mov    eax,0xc0022950
c001386a:	80 fa 08             	cmp    dl,0x8
c001386d:	0f 84 ff 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013873:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013878:	80 fa 09             	cmp    dl,0x9
c001387b:	0f 85 f1 01 00 00    	jne    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013881:	b8 60 29 02 c0       	mov    eax,0xc0022960
c0013886:	c3                   	ret    
c0013887:	80 f9 06             	cmp    cl,0x6
c001388a:	0f 85 85 01 00 00    	jne    c0013a15 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013890:	b8 70 29 02 c0       	mov    eax,0xc0022970
c0013895:	80 fa 01             	cmp    dl,0x1
c0013898:	0f 84 d4 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001389e:	8d 42 fb             	lea    eax,[edx-0x5]
c00138a1:	3c 01                	cmp    al,0x1
c00138a3:	0f 86 ac 01 00 00    	jbe    c0013a55 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00138a9:	80 fa 03             	cmp    dl,0x3
c00138ac:	0f 84 a3 01 00 00    	je     c0013a55 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00138b2:	8d 4a f9             	lea    ecx,[edx-0x7]
c00138b5:	b8 90 29 02 c0       	mov    eax,0xc0022990
c00138ba:	80 f9 01             	cmp    cl,0x1
c00138bd:	0f 86 af 01 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138c3:	80 fa 09             	cmp    dl,0x9
c00138c6:	0f 84 8f 01 00 00    	je     c0013a5b <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00138cc:	8d 4a f6             	lea    ecx,[edx-0xa]
c00138cf:	80 f9 01             	cmp    cl,0x1
c00138d2:	0f 86 9a 01 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138d8:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c00138dd:	80 fa 0d             	cmp    dl,0xd
c00138e0:	0f 84 8c 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138e6:	b8 b0 29 02 c0       	mov    eax,0xc00229b0
c00138eb:	80 fa 0e             	cmp    dl,0xe
c00138ee:	0f 84 7e 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138f4:	b8 c0 29 02 c0       	mov    eax,0xc00229c0
c00138f9:	80 fa 0f             	cmp    dl,0xf
c00138fc:	0f 84 70 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013902:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0013907:	80 fa 15             	cmp    dl,0x15
c001390a:	0f 84 62 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013910:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013913:	b8 c0 29 02 c0       	mov    eax,0xc00229c0
c0013918:	80 f9 01             	cmp    cl,0x1
c001391b:	0f 86 51 01 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013921:	80 fa 1a             	cmp    dl,0x1a
c0013924:	0f 84 37 01 00 00    	je     c0013a61 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c001392a:	80 fa 1c             	cmp    dl,0x1c
c001392d:	0f 84 34 01 00 00    	je     c0013a67 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013933:	80 fa 1d             	cmp    dl,0x1d
c0013936:	0f 84 36 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001393c:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c0013941:	80 fa 25             	cmp    dl,0x25
c0013944:	0f 84 28 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001394a:	8d 4a da             	lea    ecx,[edx-0x26]
c001394d:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0013952:	80 f9 01             	cmp    cl,0x1
c0013955:	0f 86 17 01 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001395b:	b8 00 2a 02 c0       	mov    eax,0xc0022a00
c0013960:	80 fa 2a             	cmp    dl,0x2a
c0013963:	0f 84 09 01 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013969:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c001396e:	80 fa 2c             	cmp    dl,0x2c
c0013971:	0f 84 fb 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013977:	b8 00 2a 02 c0       	mov    eax,0xc0022a00
c001397c:	80 fa 2d             	cmp    dl,0x2d
c001397f:	0f 84 ed 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013985:	b8 d0 29 02 c0       	mov    eax,0xc00229d0
c001398a:	80 fa 2e             	cmp    dl,0x2e
c001398d:	0f 84 df 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013993:	b8 f0 29 02 c0       	mov    eax,0xc00229f0
c0013998:	80 fa 2f             	cmp    dl,0x2f
c001399b:	0f 84 d1 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139a1:	8d 4a cb             	lea    ecx,[edx-0x35]
c00139a4:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c00139a9:	80 f9 01             	cmp    cl,0x1
c00139ac:	0f 86 c0 00 00 00    	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139b2:	b8 10 2a 02 c0       	mov    eax,0xc0022a10
c00139b7:	80 fa 37             	cmp    dl,0x37
c00139ba:	0f 84 b2 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139c0:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c00139c5:	80 fa 3a             	cmp    dl,0x3a
c00139c8:	0f 84 a4 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ce:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c00139d3:	80 fa 3c             	cmp    dl,0x3c
c00139d6:	0f 84 96 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139dc:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c00139e1:	80 fa 3d             	cmp    dl,0x3d
c00139e4:	0f 84 88 00 00 00    	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ea:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c00139ef:	80 fa 3e             	cmp    dl,0x3e
c00139f2:	74 7e                	je     c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139f4:	8d 42 bb             	lea    eax,[edx-0x45]
c00139f7:	3c 01                	cmp    al,0x1
c00139f9:	76 72                	jbe    c0013a6d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00139fb:	80 fa 3f             	cmp    dl,0x3f
c00139fe:	74 6d                	je     c0013a6d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013a00:	80 fa 4a             	cmp    dl,0x4a
c0013a03:	74 0a                	je     c0013a0f <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013a05:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013a0a:	80 fa 4d             	cmp    dl,0x4d
c0013a0d:	75 63                	jne    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a0f:	b8 10 2a 02 c0       	mov    eax,0xc0022a10
c0013a14:	c3                   	ret    
c0013a15:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013a1a:	80 f9 0b             	cmp    cl,0xb
c0013a1d:	75 0a                	jne    c0013a29 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013a1f:	fe ca                	dec    dl
c0013a21:	75 4f                	jne    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a23:	b8 50 2a 02 c0       	mov    eax,0xc0022a50
c0013a28:	c3                   	ret    
c0013a29:	80 f9 0f             	cmp    cl,0xf
c0013a2c:	75 44                	jne    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a2e:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0013a33:	80 fa 02             	cmp    dl,0x2
c0013a36:	76 3a                	jbe    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a38:	8d 42 fd             	lea    eax,[edx-0x3]
c0013a3b:	3c 01                	cmp    al,0x1
c0013a3d:	76 0a                	jbe    c0013a49 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013a3f:	b8 29 11 02 c0       	mov    eax,0xc0021129
c0013a44:	80 fa 06             	cmp    dl,0x6
c0013a47:	75 29                	jne    c0013a72 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a49:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c0013a4e:	c3                   	ret    
c0013a4f:	b8 50 29 02 c0       	mov    eax,0xc0022950
c0013a54:	c3                   	ret    
c0013a55:	b8 80 29 02 c0       	mov    eax,0xc0022980
c0013a5a:	c3                   	ret    
c0013a5b:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0013a60:	c3                   	ret    
c0013a61:	b8 d0 29 02 c0       	mov    eax,0xc00229d0
c0013a66:	c3                   	ret    
c0013a67:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0013a6c:	c3                   	ret    
c0013a6d:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c0013a72:	c3                   	ret    

c0013a73 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013a73:	60                   	pusha  
c0013a74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a80:	9c                   	pushf  
c0013a81:	fa                   	cli    
c0013a82:	0f 09                	wbinvd 
c0013a84:	0f 30                	wrmsr  
c0013a86:	9d                   	popf   
c0013a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8b:	89 02                	mov    DWORD PTR [edx],eax
c0013a8d:	61                   	popa   
c0013a8e:	c3                   	ret    

c0013a8f <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013a8f:	60                   	pusha  
c0013a90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013a94:	9c                   	pushf  
c0013a95:	fa                   	cli    
c0013a96:	0f 09                	wbinvd 
c0013a98:	31 c0                	xor    eax,eax
c0013a9a:	31 d2                	xor    edx,edx
c0013a9c:	0f 32                	rdmsr  
c0013a9e:	9d                   	popf   
c0013a9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013aa3:	89 02                	mov    DWORD PTR [edx],eax
c0013aa5:	61                   	popa   
c0013aa6:	c3                   	ret    

c0013aa7 <AMD_K6_writeback(int, int, int)>:
c0013aa7:	56                   	push   esi
c0013aa8:	53                   	push   ebx
c0013aa9:	83 ec 10             	sub    esp,0x10
c0013aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ab0:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013ab5:	75 5d                	jne    c0013b14 <AMD_K6_writeback(int, int, int)+0x6d>
c0013ab7:	83 f8 08             	cmp    eax,0x8
c0013aba:	75 09                	jne    c0013ac5 <AMD_K6_writeback(int, int, int)+0x1e>
c0013abc:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013ac1:	7e 13                	jle    c0013ad6 <AMD_K6_writeback(int, int, int)+0x2f>
c0013ac3:	eb 30                	jmp    c0013af5 <AMD_K6_writeback(int, int, int)+0x4e>
c0013ac5:	83 f8 06             	cmp    eax,0x6
c0013ac8:	7c 4a                	jl     c0013b14 <AMD_K6_writeback(int, int, int)+0x6d>
c0013aca:	83 f8 07             	cmp    eax,0x7
c0013acd:	7e 07                	jle    c0013ad6 <AMD_K6_writeback(int, int, int)+0x2f>
c0013acf:	83 f8 09             	cmp    eax,0x9
c0013ad2:	74 21                	je     c0013af5 <AMD_K6_writeback(int, int, int)+0x4e>
c0013ad4:	eb 3e                	jmp    c0013b14 <AMD_K6_writeback(int, int, int)+0x6d>
c0013ad6:	89 e6                	mov    esi,esp
c0013ad8:	8b 1d a4 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231a4
c0013ade:	56                   	push   esi
c0013adf:	c1 eb 15             	shr    ebx,0x15
c0013ae2:	68 82 00 00 c0       	push   0xc0000082
c0013ae7:	83 e3 7e             	and    ebx,0x7e
c0013aea:	e8 a0 ff ff ff       	call   c0013a8f <AMD_K6_read_msr(unsigned int, REGS*)>
c0013aef:	56                   	push   esi
c0013af0:	6a 00                	push   0x0
c0013af2:	53                   	push   ebx
c0013af3:	eb 12                	jmp    c0013b07 <AMD_K6_writeback(int, int, int)+0x60>
c0013af5:	89 e3                	mov    ebx,esp
c0013af7:	53                   	push   ebx
c0013af8:	68 82 00 00 c0       	push   0xc0000082
c0013afd:	e8 8d ff ff ff       	call   c0013a8f <AMD_K6_read_msr(unsigned int, REGS*)>
c0013b02:	53                   	push   ebx
c0013b03:	6a 00                	push   0x0
c0013b05:	6a 00                	push   0x0
c0013b07:	68 82 00 00 c0       	push   0xc0000082
c0013b0c:	e8 62 ff ff ff       	call   c0013a73 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013b11:	83 c4 18             	add    esp,0x18
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	5b                   	pop    ebx
c0013b18:	5e                   	pop    esi
c0013b19:	c3                   	ret    

c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013b1a:	55                   	push   ebp
c0013b1b:	57                   	push   edi
c0013b1c:	56                   	push   esi
c0013b1d:	53                   	push   ebx
c0013b1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b2a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013b2e:	39 05 80 2b 02 c0    	cmp    DWORD PTR ds:0xc0022b80,eax
c0013b34:	75 23                	jne    c0013b59 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013b36:	a1 ac 3b 02 c0       	mov    eax,ds:0xc0023bac
c0013b3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b3f:	89 06                	mov    DWORD PTR [esi],eax
c0013b41:	a1 a8 3b 02 c0       	mov    eax,ds:0xc0023ba8
c0013b46:	89 07                	mov    DWORD PTR [edi],eax
c0013b48:	a1 a4 3b 02 c0       	mov    eax,ds:0xc0023ba4
c0013b4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013b50:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c0013b55:	89 02                	mov    DWORD PTR [edx],eax
c0013b57:	eb 3f                	jmp    c0013b98 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013b59:	31 c9                	xor    ecx,ecx
c0013b5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b5f:	0f a2                	cpuid  
c0013b61:	89 06                	mov    DWORD PTR [esi],eax
c0013b63:	89 1f                	mov    DWORD PTR [edi],ebx
c0013b65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b69:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013b6c:	89 10                	mov    DWORD PTR [eax],edx
c0013b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b72:	a3 80 2b 02 c0       	mov    ds:0xc0022b80,eax
c0013b77:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b79:	a3 ac 3b 02 c0       	mov    ds:0xc0023bac,eax
c0013b7e:	8b 07                	mov    eax,DWORD PTR [edi]
c0013b80:	a3 a8 3b 02 c0       	mov    ds:0xc0023ba8,eax
c0013b85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b88:	a3 a4 3b 02 c0       	mov    ds:0xc0023ba4,eax
c0013b8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b93:	a3 a0 3b 02 c0       	mov    ds:0xc0023ba0,eax
c0013b98:	5b                   	pop    ebx
c0013b99:	5e                   	pop    esi
c0013b9a:	5f                   	pop    edi
c0013b9b:	5d                   	pop    ebp
c0013b9c:	c3                   	ret    

c0013b9d <cpuidCheckEDX(unsigned int)>:
c0013b9d:	83 ec 10             	sub    esp,0x10
c0013ba0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ba4:	50                   	push   eax
c0013ba5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ba9:	50                   	push   eax
c0013baa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bae:	50                   	push   eax
c0013baf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bb3:	50                   	push   eax
c0013bb4:	6a 01                	push   0x1
c0013bb6:	e8 5f ff ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013bbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bbf:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013bc3:	0f 95 c0             	setne  al
c0013bc6:	83 c4 24             	add    esp,0x24
c0013bc9:	c3                   	ret    

c0013bca <cpuidCheckECX(unsigned int)>:
c0013bca:	83 ec 10             	sub    esp,0x10
c0013bcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bd1:	50                   	push   eax
c0013bd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bd6:	50                   	push   eax
c0013bd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bdb:	50                   	push   eax
c0013bdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013be0:	50                   	push   eax
c0013be1:	6a 01                	push   0x1
c0013be3:	e8 32 ff ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013be8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013bf0:	0f 95 c0             	setne  al
c0013bf3:	83 c4 24             	add    esp,0x24
c0013bf6:	c3                   	ret    

c0013bf7 <cpuidCheckExtendedEBX(unsigned int)>:
c0013bf7:	83 ec 10             	sub    esp,0x10
c0013bfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bfe:	50                   	push   eax
c0013bff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c03:	50                   	push   eax
c0013c04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c08:	50                   	push   eax
c0013c09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c0d:	50                   	push   eax
c0013c0e:	6a 07                	push   0x7
c0013c10:	e8 05 ff ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c19:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013c1d:	0f 95 c0             	setne  al
c0013c20:	83 c4 24             	add    esp,0x24
c0013c23:	c3                   	ret    

c0013c24 <cpuidCheckExtendedECX(unsigned int)>:
c0013c24:	83 ec 10             	sub    esp,0x10
c0013c27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c2b:	50                   	push   eax
c0013c2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c30:	50                   	push   eax
c0013c31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c35:	50                   	push   eax
c0013c36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c3a:	50                   	push   eax
c0013c3b:	6a 07                	push   0x7
c0013c3d:	e8 d8 fe ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c46:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013c4a:	0f 95 c0             	setne  al
c0013c4d:	83 c4 24             	add    esp,0x24
c0013c50:	c3                   	ret    

c0013c51 <getCPUNumber()>:
c0013c51:	31 c0                	xor    eax,eax
c0013c53:	c3                   	ret    

c0013c54 <thisCPU()>:
c0013c54:	e8 f8 ff ff ff       	call   c0013c51 <getCPUNumber()>
c0013c59:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c0013c5f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <CPU::CPU()>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	68 29 11 02 c0       	push   0xc0021129
c0013c77:	50                   	push   eax
c0013c78:	e8 43 c6 ff ff       	call   c00102c0 <Device::Device(char const*)>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	ba 00 12 02 c0       	mov    edx,0xc0021200
c0013c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c89:	89 10                	mov    DWORD PTR [eax],edx
c0013c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9d:	05 78 01 00 00       	add    eax,0x178
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	50                   	push   eax
c0013ca6:	e8 83 77 ff ff       	call   c000b42e <GDT::GDT()>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb2:	05 7c 09 00 00       	add    eax,0x97c
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	50                   	push   eax
c0013cbb:	e8 ce 79 ff ff       	call   c000b68e <IDT::IDT()>
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc7:	05 7c 11 00 00       	add    eax,0x117c
c0013ccc:	83 ec 0c             	sub    esp,0xc
c0013ccf:	50                   	push   eax
c0013cd0:	e8 67 99 ff ff       	call   c000d63c <TSS::TSS()>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013cf1:	90                   	nop
c0013cf2:	83 c4 0c             	add    esp,0xc
c0013cf5:	c3                   	ret    

c0013cf6 <CPU::displayFeatures()>:
c0013cf6:	c3                   	ret    
c0013cf7:	90                   	nop

c0013cf8 <CPU::detectFeatures()>:
c0013cf8:	55                   	push   ebp
c0013cf9:	57                   	push   edi
c0013cfa:	56                   	push   esi
c0013cfb:	53                   	push   ebx
c0013cfc:	83 ec 50             	sub    esp,0x50
c0013cff:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013d03:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013d0d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013d14:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013d1a:	6a 0d                	push   0xd
c0013d1c:	6a 00                	push   0x0
c0013d1e:	57                   	push   edi
c0013d1f:	e8 e4 c8 fe ff       	call   c0000608 <memset>
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0013d2c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013d33:	0f 84 20 09 00 00    	je     c0014659 <CPU::detectFeatures()+0x961>
c0013d39:	83 ec 0c             	sub    esp,0xc
c0013d3c:	6a 10                	push   0x10
c0013d3e:	e8 5a fe ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013d43:	83 e0 01             	and    eax,0x1
c0013d46:	8d 14 00             	lea    edx,[eax+eax*1]
c0013d49:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d4f:	83 e0 fd             	and    eax,0xfffffffd
c0013d52:	09 d0                	or     eax,edx
c0013d54:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d5a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013d61:	e8 37 fe ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013d66:	83 e0 01             	and    eax,0x1
c0013d69:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013d70:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d76:	83 e0 fb             	and    eax,0xfffffffb
c0013d79:	09 d0                	or     eax,edx
c0013d7b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d81:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013d88:	e8 10 fe ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013d8d:	83 e0 01             	and    eax,0x1
c0013d90:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013d97:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d9d:	83 e0 f7             	and    eax,0xfffffff7
c0013da0:	09 d0                	or     eax,edx
c0013da2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013da8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013daf:	e8 e9 fd ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013db4:	83 e0 01             	and    eax,0x1
c0013db7:	c1 e0 04             	shl    eax,0x4
c0013dba:	88 c2                	mov    dl,al
c0013dbc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013dc2:	83 e0 ef             	and    eax,0xffffffef
c0013dc5:	09 d0                	or     eax,edx
c0013dc7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013dcd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013dd4:	e8 c4 fd ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013dd9:	83 e0 01             	and    eax,0x1
c0013ddc:	c1 e0 05             	shl    eax,0x5
c0013ddf:	88 c2                	mov    dl,al
c0013de1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013de7:	83 e0 df             	and    eax,0xffffffdf
c0013dea:	09 d0                	or     eax,edx
c0013dec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013df2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013df9:	e8 9f fd ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013dfe:	83 e0 01             	and    eax,0x1
c0013e01:	8d 14 00             	lea    edx,[eax+eax*1]
c0013e04:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e0a:	83 e0 fd             	and    eax,0xfffffffd
c0013e0d:	09 d0                	or     eax,edx
c0013e0f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e15:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013e1c:	e8 7c fd ff ff       	call   c0013b9d <cpuidCheckEDX(unsigned int)>
c0013e21:	83 e0 01             	and    eax,0x1
c0013e24:	c1 e0 06             	shl    eax,0x6
c0013e27:	88 c2                	mov    dl,al
c0013e29:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e2f:	83 e0 bf             	and    eax,0xffffffbf
c0013e32:	09 d0                	or     eax,edx
c0013e34:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e3a:	58                   	pop    eax
c0013e3b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013e3f:	56                   	push   esi
c0013e40:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013e44:	55                   	push   ebp
c0013e45:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e49:	50                   	push   eax
c0013e4a:	8d 54 24 28          	lea    edx,[esp+0x28]
c0013e4e:	52                   	push   edx
c0013e4f:	6a 00                	push   0x0
c0013e51:	e8 c4 fc ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e56:	83 c4 1c             	add    esp,0x1c
c0013e59:	6a 04                	push   0x4
c0013e5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013e5f:	50                   	push   eax
c0013e60:	57                   	push   edi
c0013e61:	e8 6c c7 fe ff       	call   c00005d2 <memcpy>
c0013e66:	83 c4 0c             	add    esp,0xc
c0013e69:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0013e6f:	6a 04                	push   0x4
c0013e71:	56                   	push   esi
c0013e72:	50                   	push   eax
c0013e73:	e8 5a c7 fe ff       	call   c00005d2 <memcpy>
c0013e78:	83 c4 0c             	add    esp,0xc
c0013e7b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0013e81:	6a 04                	push   0x4
c0013e83:	55                   	push   ebp
c0013e84:	50                   	push   eax
c0013e85:	e8 48 c7 fe ff       	call   c00005d2 <memcpy>
c0013e8a:	58                   	pop    eax
c0013e8b:	5a                   	pop    edx
c0013e8c:	68 d4 0f 02 c0       	push   0xc0020fd4
c0013e91:	57                   	push   edi
c0013e92:	e8 61 c8 fe ff       	call   c00006f8 <strcmp>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	85 c0                	test   eax,eax
c0013e9c:	75 0f                	jne    c0013ead <CPU::detectFeatures()+0x1b5>
c0013e9e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013ea8:	e9 22 02 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013ead:	50                   	push   eax
c0013eae:	50                   	push   eax
c0013eaf:	68 e1 0f 02 c0       	push   0xc0020fe1
c0013eb4:	57                   	push   edi
c0013eb5:	e8 3e c8 fe ff       	call   c00006f8 <strcmp>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	85 c0                	test   eax,eax
c0013ebf:	74 dd                	je     c0013e9e <CPU::detectFeatures()+0x1a6>
c0013ec1:	51                   	push   ecx
c0013ec2:	51                   	push   ecx
c0013ec3:	68 ee 0f 02 c0       	push   0xc0020fee
c0013ec8:	57                   	push   edi
c0013ec9:	e8 2a c8 fe ff       	call   c00006f8 <strcmp>
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	85 c0                	test   eax,eax
c0013ed3:	74 2a                	je     c0013eff <CPU::detectFeatures()+0x207>
c0013ed5:	52                   	push   edx
c0013ed6:	52                   	push   edx
c0013ed7:	68 fb 0f 02 c0       	push   0xc0020ffb
c0013edc:	57                   	push   edi
c0013edd:	e8 16 c8 fe ff       	call   c00006f8 <strcmp>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	85 c0                	test   eax,eax
c0013ee7:	74 16                	je     c0013eff <CPU::detectFeatures()+0x207>
c0013ee9:	50                   	push   eax
c0013eea:	50                   	push   eax
c0013eeb:	68 08 10 02 c0       	push   0xc0021008
c0013ef0:	57                   	push   edi
c0013ef1:	e8 02 c8 fe ff       	call   c00006f8 <strcmp>
c0013ef6:	83 c4 10             	add    esp,0x10
c0013ef9:	85 c0                	test   eax,eax
c0013efb:	74 48                	je     c0013f45 <CPU::detectFeatures()+0x24d>
c0013efd:	eb 0f                	jmp    c0013f0e <CPU::detectFeatures()+0x216>
c0013eff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013f09:	e9 c1 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013f0e:	50                   	push   eax
c0013f0f:	50                   	push   eax
c0013f10:	68 15 10 02 c0       	push   0xc0021015
c0013f15:	57                   	push   edi
c0013f16:	e8 dd c7 fe ff       	call   c00006f8 <strcmp>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	85 c0                	test   eax,eax
c0013f20:	74 23                	je     c0013f45 <CPU::detectFeatures()+0x24d>
c0013f22:	50                   	push   eax
c0013f23:	50                   	push   eax
c0013f24:	68 22 10 02 c0       	push   0xc0021022
c0013f29:	57                   	push   edi
c0013f2a:	e8 c9 c7 fe ff       	call   c00006f8 <strcmp>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	85 c0                	test   eax,eax
c0013f34:	75 1e                	jne    c0013f54 <CPU::detectFeatures()+0x25c>
c0013f36:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013f40:	e9 8a 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013f45:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013f4f:	e9 7b 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013f54:	50                   	push   eax
c0013f55:	50                   	push   eax
c0013f56:	68 2f 10 02 c0       	push   0xc002102f
c0013f5b:	57                   	push   edi
c0013f5c:	e8 97 c7 fe ff       	call   c00006f8 <strcmp>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	85 c0                	test   eax,eax
c0013f66:	75 0f                	jne    c0013f77 <CPU::detectFeatures()+0x27f>
c0013f68:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013f72:	e9 58 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013f77:	50                   	push   eax
c0013f78:	50                   	push   eax
c0013f79:	68 ee 0f 02 c0       	push   0xc0020fee
c0013f7e:	57                   	push   edi
c0013f7f:	e8 74 c7 fe ff       	call   c00006f8 <strcmp>
c0013f84:	83 c4 10             	add    esp,0x10
c0013f87:	85 c0                	test   eax,eax
c0013f89:	75 0f                	jne    c0013f9a <CPU::detectFeatures()+0x2a2>
c0013f8b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013f95:	e9 35 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013f9a:	50                   	push   eax
c0013f9b:	50                   	push   eax
c0013f9c:	68 3c 10 02 c0       	push   0xc002103c
c0013fa1:	57                   	push   edi
c0013fa2:	e8 51 c7 fe ff       	call   c00006f8 <strcmp>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	85 c0                	test   eax,eax
c0013fac:	75 0f                	jne    c0013fbd <CPU::detectFeatures()+0x2c5>
c0013fae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013fb8:	e9 12 01 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013fbd:	51                   	push   ecx
c0013fbe:	51                   	push   ecx
c0013fbf:	68 49 10 02 c0       	push   0xc0021049
c0013fc4:	57                   	push   edi
c0013fc5:	e8 2e c7 fe ff       	call   c00006f8 <strcmp>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	85 c0                	test   eax,eax
c0013fcf:	75 0f                	jne    c0013fe0 <CPU::detectFeatures()+0x2e8>
c0013fd1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013fdb:	e9 ef 00 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0013fe0:	52                   	push   edx
c0013fe1:	52                   	push   edx
c0013fe2:	68 56 10 02 c0       	push   0xc0021056
c0013fe7:	57                   	push   edi
c0013fe8:	e8 0b c7 fe ff       	call   c00006f8 <strcmp>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	85 c0                	test   eax,eax
c0013ff2:	75 0f                	jne    c0014003 <CPU::detectFeatures()+0x30b>
c0013ff4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013ffe:	e9 cc 00 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0014003:	50                   	push   eax
c0014004:	50                   	push   eax
c0014005:	68 63 10 02 c0       	push   0xc0021063
c001400a:	57                   	push   edi
c001400b:	e8 e8 c6 fe ff       	call   c00006f8 <strcmp>
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	85 c0                	test   eax,eax
c0014015:	75 0f                	jne    c0014026 <CPU::detectFeatures()+0x32e>
c0014017:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014021:	e9 a9 00 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0014026:	50                   	push   eax
c0014027:	50                   	push   eax
c0014028:	68 70 10 02 c0       	push   0xc0021070
c001402d:	57                   	push   edi
c001402e:	e8 c5 c6 fe ff       	call   c00006f8 <strcmp>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	85 c0                	test   eax,eax
c0014038:	75 0f                	jne    c0014049 <CPU::detectFeatures()+0x351>
c001403a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014044:	e9 86 00 00 00       	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0014049:	50                   	push   eax
c001404a:	50                   	push   eax
c001404b:	68 7d 10 02 c0       	push   0xc002107d
c0014050:	57                   	push   edi
c0014051:	e8 a2 c6 fe ff       	call   c00006f8 <strcmp>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	85 c0                	test   eax,eax
c001405b:	75 0c                	jne    c0014069 <CPU::detectFeatures()+0x371>
c001405d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014067:	eb 66                	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0014069:	50                   	push   eax
c001406a:	50                   	push   eax
c001406b:	68 8a 10 02 c0       	push   0xc002108a
c0014070:	57                   	push   edi
c0014071:	e8 82 c6 fe ff       	call   c00006f8 <strcmp>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	85 c0                	test   eax,eax
c001407b:	75 0c                	jne    c0014089 <CPU::detectFeatures()+0x391>
c001407d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014087:	eb 46                	jmp    c00140cf <CPU::detectFeatures()+0x3d7>
c0014089:	50                   	push   eax
c001408a:	50                   	push   eax
c001408b:	68 97 10 02 c0       	push   0xc0021097
c0014090:	57                   	push   edi
c0014091:	e8 62 c6 fe ff       	call   c00006f8 <strcmp>
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	85 c0                	test   eax,eax
c001409b:	74 e0                	je     c001407d <CPU::detectFeatures()+0x385>
c001409d:	50                   	push   eax
c001409e:	50                   	push   eax
c001409f:	68 a4 10 02 c0       	push   0xc00210a4
c00140a4:	57                   	push   edi
c00140a5:	e8 4e c6 fe ff       	call   c00006f8 <strcmp>
c00140aa:	83 c4 10             	add    esp,0x10
c00140ad:	85 c0                	test   eax,eax
c00140af:	74 cc                	je     c001407d <CPU::detectFeatures()+0x385>
c00140b1:	51                   	push   ecx
c00140b2:	51                   	push   ecx
c00140b3:	68 b1 10 02 c0       	push   0xc00210b1
c00140b8:	57                   	push   edi
c00140b9:	e8 3a c6 fe ff       	call   c00006f8 <strcmp>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	85 c0                	test   eax,eax
c00140c3:	74 b8                	je     c001407d <CPU::detectFeatures()+0x385>
c00140c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00140cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00140d4:	0f 86 be 00 00 00    	jbe    c0014198 <CPU::detectFeatures()+0x4a0>
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	68 80 00 00 00       	push   0x80
c00140e2:	e8 10 fb ff ff       	call   c0013bf7 <cpuidCheckExtendedEBX(unsigned int)>
c00140e7:	83 e0 01             	and    eax,0x1
c00140ea:	c1 e0 06             	shl    eax,0x6
c00140ed:	88 c2                	mov    dl,al
c00140ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140f5:	83 e0 bf             	and    eax,0xffffffbf
c00140f8:	09 d0                	or     eax,edx
c00140fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014100:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014107:	e8 eb fa ff ff       	call   c0013bf7 <cpuidCheckExtendedEBX(unsigned int)>
c001410c:	83 e0 01             	and    eax,0x1
c001410f:	c1 e0 04             	shl    eax,0x4
c0014112:	88 c2                	mov    dl,al
c0014114:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001411a:	83 e0 ef             	and    eax,0xffffffef
c001411d:	09 d0                	or     eax,edx
c001411f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014125:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001412c:	e8 c6 fa ff ff       	call   c0013bf7 <cpuidCheckExtendedEBX(unsigned int)>
c0014131:	c1 e0 07             	shl    eax,0x7
c0014134:	88 c2                	mov    dl,al
c0014136:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001413c:	83 e0 7f             	and    eax,0x7f
c001413f:	09 d0                	or     eax,edx
c0014141:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014147:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001414e:	e8 d1 fa ff ff       	call   c0013c24 <cpuidCheckExtendedECX(unsigned int)>
c0014153:	83 e0 01             	and    eax,0x1
c0014156:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001415d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014163:	83 e0 f7             	and    eax,0xfffffff7
c0014166:	09 d0                	or     eax,edx
c0014168:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001416e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014175:	e8 aa fa ff ff       	call   c0013c24 <cpuidCheckExtendedECX(unsigned int)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	83 e0 01             	and    eax,0x1
c0014180:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014187:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001418d:	83 e0 fb             	and    eax,0xfffffffb
c0014190:	09 d0                	or     eax,edx
c0014192:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	56                   	push   esi
c001419c:	55                   	push   ebp
c001419d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00141a1:	57                   	push   edi
c00141a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141a6:	50                   	push   eax
c00141a7:	6a 01                	push   0x1
c00141a9:	e8 6c f9 ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141ae:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00141b2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00141b8:	88 ca                	mov    dl,cl
c00141ba:	83 e0 f0             	and    eax,0xfffffff0
c00141bd:	83 e2 0f             	and    edx,0xf
c00141c0:	09 d0                	or     eax,edx
c00141c2:	88 ca                	mov    dl,cl
c00141c4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00141ca:	c0 ea 04             	shr    dl,0x4
c00141cd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00141d1:	0f b6 c2             	movzx  eax,dl
c00141d4:	83 c4 20             	add    esp,0x20
c00141d7:	c1 e0 06             	shl    eax,0x6
c00141da:	89 c5                	mov    ebp,eax
c00141dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141e2:	66 25 3f c0          	and    ax,0xc03f
c00141e6:	09 e8                	or     eax,ebp
c00141e8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00141ef:	89 c8                	mov    eax,ecx
c00141f1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00141f7:	c1 e8 08             	shr    eax,0x8
c00141fa:	83 e2 3f             	and    edx,0x3f
c00141fd:	83 e0 0f             	and    eax,0xf
c0014200:	89 c5                	mov    ebp,eax
c0014202:	c1 e5 06             	shl    ebp,0x6
c0014205:	09 d5                	or     ebp,edx
c0014207:	89 ea                	mov    edx,ebp
c0014209:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001420f:	88 c2                	mov    dl,al
c0014211:	c0 ea 02             	shr    dl,0x2
c0014214:	89 d5                	mov    ebp,edx
c0014216:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001421c:	83 e2 c0             	and    edx,0xffffffc0
c001421f:	09 d5                	or     ebp,edx
c0014221:	89 ea                	mov    edx,ebp
c0014223:	89 cd                	mov    ebp,ecx
c0014225:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001422b:	c1 ed 0c             	shr    ebp,0xc
c001422e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014234:	83 e5 03             	and    ebp,0x3
c0014237:	83 e2 cf             	and    edx,0xffffffcf
c001423a:	c1 e5 04             	shl    ebp,0x4
c001423d:	09 d5                	or     ebp,edx
c001423f:	3c 06                	cmp    al,0x6
c0014241:	89 ea                	mov    edx,ebp
c0014243:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014249:	74 04                	je     c001424f <CPU::detectFeatures()+0x557>
c001424b:	3c 0f                	cmp    al,0xf
c001424d:	75 5c                	jne    c00142ab <CPU::detectFeatures()+0x5b3>
c001424f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014253:	89 cd                	mov    ebp,ecx
c0014255:	c1 ed 10             	shr    ebp,0x10
c0014258:	c1 e5 04             	shl    ebp,0x4
c001425b:	09 ea                	or     edx,ebp
c001425d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014263:	0f b6 d2             	movzx  edx,dl
c0014266:	66 81 e5 3f c0       	and    bp,0xc03f
c001426b:	c1 e2 06             	shl    edx,0x6
c001426e:	09 ea                	or     edx,ebp
c0014270:	3c 0f                	cmp    al,0xf
c0014272:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014279:	75 30                	jne    c00142ab <CPU::detectFeatures()+0x5b3>
c001427b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014281:	c1 e9 14             	shr    ecx,0x14
c0014284:	83 e0 3f             	and    eax,0x3f
c0014287:	83 c1 0f             	add    ecx,0xf
c001428a:	88 ca                	mov    dl,cl
c001428c:	c0 e9 02             	shr    cl,0x2
c001428f:	c1 e2 06             	shl    edx,0x6
c0014292:	09 d0                	or     eax,edx
c0014294:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001429a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00142a0:	83 e0 c0             	and    eax,0xffffffc0
c00142a3:	09 c1                	or     ecx,eax
c00142a5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00142b5:	56                   	push   esi
c00142b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142ba:	50                   	push   eax
c00142bb:	57                   	push   edi
c00142bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00142c0:	55                   	push   ebp
c00142c1:	68 00 00 00 80       	push   0x80000000
c00142c6:	e8 4f f8 ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00142cb:	83 c4 20             	add    esp,0x20
c00142ce:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00142d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00142da:	76 1e                	jbe    c00142fa <CPU::detectFeatures()+0x602>
c00142dc:	83 ec 0c             	sub    esp,0xc
c00142df:	56                   	push   esi
c00142e0:	50                   	push   eax
c00142e1:	57                   	push   edi
c00142e2:	55                   	push   ebp
c00142e3:	68 01 00 00 80       	push   0x80000001
c00142e8:	e8 2d f8 ff ff       	call   c0013b1a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00142ed:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00142f7:	83 c4 20             	add    esp,0x20
c00142fa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014300:	83 f8 01             	cmp    eax,0x1
c0014303:	75 6f                	jne    c0014374 <CPU::detectFeatures()+0x67c>
c0014305:	51                   	push   ecx
c0014306:	51                   	push   ecx
c0014307:	68 bd 10 02 c0       	push   0xc00210bd
c001430c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014310:	56                   	push   esi
c0014311:	e8 91 c3 fe ff       	call   c00006a7 <strcpy>
c0014316:	5f                   	pop    edi
c0014317:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001431d:	5d                   	pop    ebp
c001431e:	66 c1 e8 06          	shr    ax,0x6
c0014322:	0f b6 c0             	movzx  eax,al
c0014325:	50                   	push   eax
c0014326:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001432c:	c1 e8 0e             	shr    eax,0xe
c001432f:	0f b6 c0             	movzx  eax,al
c0014332:	50                   	push   eax
c0014333:	e8 8d f4 ff ff       	call   c00137c5 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014338:	5a                   	pop    edx
c0014339:	59                   	pop    ecx
c001433a:	50                   	push   eax
c001433b:	56                   	push   esi
c001433c:	e8 1d c4 fe ff       	call   c000075e <strcat>
c0014341:	5f                   	pop    edi
c0014342:	5d                   	pop    ebp
c0014343:	56                   	push   esi
c0014344:	53                   	push   ebx
c0014345:	e8 68 bf ff ff       	call   c00102b2 <Device::setName(char const*)>
c001434a:	58                   	pop    eax
c001434b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014351:	5a                   	pop    edx
c0014352:	68 c4 10 02 c0       	push   0xc00210c4
c0014357:	50                   	push   eax
c0014358:	e8 9b c3 fe ff       	call   c00006f8 <strcmp>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	85 c0                	test   eax,eax
c0014362:	0f 85 73 03 00 00    	jne    c00146db <CPU::detectFeatures()+0x9e3>
c0014368:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001436f:	e9 67 03 00 00       	jmp    c00146db <CPU::detectFeatures()+0x9e3>
c0014374:	83 f8 02             	cmp    eax,0x2
c0014377:	0f 85 b5 00 00 00    	jne    c0014432 <CPU::detectFeatures()+0x73a>
c001437d:	57                   	push   edi
c001437e:	57                   	push   edi
c001437f:	68 d6 10 02 c0       	push   0xc00210d6
c0014384:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014388:	56                   	push   esi
c0014389:	e8 19 c3 fe ff       	call   c00006a7 <strcpy>
c001438e:	5d                   	pop    ebp
c001438f:	58                   	pop    eax
c0014390:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014396:	66 c1 e8 06          	shr    ax,0x6
c001439a:	0f b6 c0             	movzx  eax,al
c001439d:	50                   	push   eax
c001439e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143a4:	c1 e8 0e             	shr    eax,0xe
c00143a7:	0f b6 c0             	movzx  eax,al
c00143aa:	50                   	push   eax
c00143ab:	e8 81 f2 ff ff       	call   c0013631 <lookupAMDCPUName(unsigned char, unsigned char)>
c00143b0:	5a                   	pop    edx
c00143b1:	59                   	pop    ecx
c00143b2:	50                   	push   eax
c00143b3:	56                   	push   esi
c00143b4:	e8 a5 c3 fe ff       	call   c000075e <strcat>
c00143b9:	5f                   	pop    edi
c00143ba:	5d                   	pop    ebp
c00143bb:	56                   	push   esi
c00143bc:	53                   	push   ebx
c00143bd:	e8 f0 be ff ff       	call   c00102b2 <Device::setName(char const*)>
c00143c2:	58                   	pop    eax
c00143c3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00143c9:	5a                   	pop    edx
c00143ca:	68 db 10 02 c0       	push   0xc00210db
c00143cf:	50                   	push   eax
c00143d0:	e8 23 c3 fe ff       	call   c00006f8 <strcmp>
c00143d5:	83 c4 10             	add    esp,0x10
c00143d8:	85 c0                	test   eax,eax
c00143da:	75 20                	jne    c00143fc <CPU::detectFeatures()+0x704>
c00143dc:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c00143e2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00143e8:	a8 01                	test   al,0x1
c00143ea:	74 10                	je     c00143fc <CPU::detectFeatures()+0x704>
c00143ec:	83 e0 fe             	and    eax,0xfffffffe
c00143ef:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00143f5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00143fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014402:	c1 e8 0e             	shr    eax,0xe
c0014405:	3c 05                	cmp    al,0x5
c0014407:	0f 85 ce 02 00 00    	jne    c00146db <CPU::detectFeatures()+0x9e3>
c001440d:	56                   	push   esi
c001440e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014414:	83 e0 0f             	and    eax,0xf
c0014417:	50                   	push   eax
c0014418:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001441e:	66 c1 e8 06          	shr    ax,0x6
c0014422:	0f b6 c0             	movzx  eax,al
c0014425:	50                   	push   eax
c0014426:	6a 05                	push   0x5
c0014428:	e8 7a f6 ff ff       	call   c0013aa7 <AMD_K6_writeback(int, int, int)>
c001442d:	e9 1f 02 00 00       	jmp    c0014651 <CPU::detectFeatures()+0x959>
c0014432:	8d 50 fd             	lea    edx,[eax-0x3]
c0014435:	83 fa 01             	cmp    edx,0x1
c0014438:	76 09                	jbe    c0014443 <CPU::detectFeatures()+0x74b>
c001443a:	83 f8 06             	cmp    eax,0x6
c001443d:	0f 85 91 01 00 00    	jne    c00145d4 <CPU::detectFeatures()+0x8dc>
c0014443:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014449:	c1 ea 0e             	shr    edx,0xe
c001444c:	80 fa 05             	cmp    dl,0x5
c001444f:	75 7b                	jne    c00144cc <CPU::detectFeatures()+0x7d4>
c0014451:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014457:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001445c:	66 81 fa 00 01       	cmp    dx,0x100
c0014461:	75 0c                	jne    c001446f <CPU::detectFeatures()+0x777>
c0014463:	51                   	push   ecx
c0014464:	51                   	push   ecx
c0014465:	68 e2 10 02 c0       	push   0xc00210e2
c001446a:	e9 dc 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c001446f:	66 81 fa 00 02       	cmp    dx,0x200
c0014474:	75 0c                	jne    c0014482 <CPU::detectFeatures()+0x78a>
c0014476:	52                   	push   edx
c0014477:	52                   	push   edx
c0014478:	68 f5 10 02 c0       	push   0xc00210f5
c001447d:	e9 c9 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014482:	66 81 fa 40 02       	cmp    dx,0x240
c0014487:	75 0c                	jne    c0014495 <CPU::detectFeatures()+0x79d>
c0014489:	50                   	push   eax
c001448a:	50                   	push   eax
c001448b:	68 07 11 02 c0       	push   0xc0021107
c0014490:	e9 b6 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014495:	83 f8 06             	cmp    eax,0x6
c0014498:	75 0c                	jne    c00144a6 <CPU::detectFeatures()+0x7ae>
c001449a:	50                   	push   eax
c001449b:	50                   	push   eax
c001449c:	68 19 11 02 c0       	push   0xc0021119
c00144a1:	e9 a5 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c00144a6:	83 f8 04             	cmp    eax,0x4
c00144a9:	75 0c                	jne    c00144b7 <CPU::detectFeatures()+0x7bf>
c00144ab:	50                   	push   eax
c00144ac:	50                   	push   eax
c00144ad:	68 25 11 02 c0       	push   0xc0021125
c00144b2:	e9 94 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c00144b7:	83 f8 03             	cmp    eax,0x3
c00144ba:	0f 85 1b 02 00 00    	jne    c00146db <CPU::detectFeatures()+0x9e3>
c00144c0:	50                   	push   eax
c00144c1:	50                   	push   eax
c00144c2:	68 2d 11 02 c0       	push   0xc002112d
c00144c7:	e9 7f 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c00144cc:	80 fa 06             	cmp    dl,0x6
c00144cf:	0f 85 db 00 00 00    	jne    c00145b0 <CPU::detectFeatures()+0x8b8>
c00144d5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144db:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00144e0:	66 81 fa 80 01       	cmp    dx,0x180
c00144e5:	75 0c                	jne    c00144f3 <CPU::detectFeatures()+0x7fb>
c00144e7:	50                   	push   eax
c00144e8:	50                   	push   eax
c00144e9:	68 38 11 02 c0       	push   0xc0021138
c00144ee:	e9 58 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c00144f3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00144f9:	66 f7 c1 80 ff       	test   cx,0xff80
c00144fe:	75 0c                	jne    c001450c <CPU::detectFeatures()+0x814>
c0014500:	50                   	push   eax
c0014501:	50                   	push   eax
c0014502:	68 48 11 02 c0       	push   0xc0021148
c0014507:	e9 3f 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c001450c:	66 81 fa 40 02       	cmp    dx,0x240
c0014511:	75 0c                	jne    c001451f <CPU::detectFeatures()+0x827>
c0014513:	55                   	push   ebp
c0014514:	55                   	push   ebp
c0014515:	68 4f 11 02 c0       	push   0xc002114f
c001451a:	e9 2c 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c001451f:	66 81 fa 80 02       	cmp    dx,0x280
c0014524:	75 0c                	jne    c0014532 <CPU::detectFeatures()+0x83a>
c0014526:	57                   	push   edi
c0014527:	57                   	push   edi
c0014528:	68 58 11 02 c0       	push   0xc0021158
c001452d:	e9 19 01 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014532:	66 81 fa 40 03       	cmp    dx,0x340
c0014537:	74 ed                	je     c0014526 <CPU::detectFeatures()+0x82e>
c0014539:	66 81 fa c0 03       	cmp    dx,0x3c0
c001453e:	75 0c                	jne    c001454c <CPU::detectFeatures()+0x854>
c0014540:	56                   	push   esi
c0014541:	56                   	push   esi
c0014542:	68 5f 11 02 c0       	push   0xc002115f
c0014547:	e9 ff 00 00 00       	jmp    c001464b <CPU::detectFeatures()+0x953>
c001454c:	83 f8 06             	cmp    eax,0x6
c001454f:	0f 84 45 ff ff ff    	je     c001449a <CPU::detectFeatures()+0x7a2>
c0014555:	83 f8 04             	cmp    eax,0x4
c0014558:	0f 84 4d ff ff ff    	je     c00144ab <CPU::detectFeatures()+0x7b3>
c001455e:	83 f8 03             	cmp    eax,0x3
c0014561:	0f 85 74 01 00 00    	jne    c00146db <CPU::detectFeatures()+0x9e3>
c0014567:	51                   	push   ecx
c0014568:	51                   	push   ecx
c0014569:	68 68 11 02 c0       	push   0xc0021168
c001456e:	53                   	push   ebx
c001456f:	e8 3e bd ff ff       	call   c00102b2 <Device::setName(char const*)>
c0014574:	b1 c1                	mov    cl,0xc1
c0014576:	88 c8                	mov    al,cl
c0014578:	e6 22                	out    0x22,al
c001457a:	e4 23                	in     al,0x23
c001457c:	88 c2                	mov    dl,al
c001457e:	88 c8                	mov    al,cl
c0014580:	e6 22                	out    0x22,al
c0014582:	88 d0                	mov    al,dl
c0014584:	83 c8 10             	or     eax,0x10
c0014587:	e6 23                	out    0x23,al
c0014589:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014590:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014593:	89 d0                	mov    eax,edx
c0014595:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001459b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001459f:	40                   	inc    eax
c00145a0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00145a6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00145ab:	e9 a1 00 00 00       	jmp    c0014651 <CPU::detectFeatures()+0x959>
c00145b0:	83 f8 06             	cmp    eax,0x6
c00145b3:	0f 84 e1 fe ff ff    	je     c001449a <CPU::detectFeatures()+0x7a2>
c00145b9:	83 f8 04             	cmp    eax,0x4
c00145bc:	0f 84 e9 fe ff ff    	je     c00144ab <CPU::detectFeatures()+0x7b3>
c00145c2:	83 f8 03             	cmp    eax,0x3
c00145c5:	0f 85 10 01 00 00    	jne    c00146db <CPU::detectFeatures()+0x9e3>
c00145cb:	52                   	push   edx
c00145cc:	52                   	push   edx
c00145cd:	68 73 11 02 c0       	push   0xc0021173
c00145d2:	eb 77                	jmp    c001464b <CPU::detectFeatures()+0x953>
c00145d4:	83 f8 07             	cmp    eax,0x7
c00145d7:	75 09                	jne    c00145e2 <CPU::detectFeatures()+0x8ea>
c00145d9:	50                   	push   eax
c00145da:	50                   	push   eax
c00145db:	68 7d 11 02 c0       	push   0xc002117d
c00145e0:	eb 69                	jmp    c001464b <CPU::detectFeatures()+0x953>
c00145e2:	83 f8 0a             	cmp    eax,0xa
c00145e5:	75 09                	jne    c00145f0 <CPU::detectFeatures()+0x8f8>
c00145e7:	50                   	push   eax
c00145e8:	50                   	push   eax
c00145e9:	68 88 11 02 c0       	push   0xc0021188
c00145ee:	eb 5b                	jmp    c001464b <CPU::detectFeatures()+0x953>
c00145f0:	83 f8 0b             	cmp    eax,0xb
c00145f3:	75 09                	jne    c00145fe <CPU::detectFeatures()+0x906>
c00145f5:	50                   	push   eax
c00145f6:	50                   	push   eax
c00145f7:	68 90 11 02 c0       	push   0xc0021190
c00145fc:	eb 4d                	jmp    c001464b <CPU::detectFeatures()+0x953>
c00145fe:	83 f8 08             	cmp    eax,0x8
c0014601:	75 09                	jne    c001460c <CPU::detectFeatures()+0x914>
c0014603:	50                   	push   eax
c0014604:	50                   	push   eax
c0014605:	68 99 11 02 c0       	push   0xc0021199
c001460a:	eb 3f                	jmp    c001464b <CPU::detectFeatures()+0x953>
c001460c:	83 f8 09             	cmp    eax,0x9
c001460f:	75 09                	jne    c001461a <CPU::detectFeatures()+0x922>
c0014611:	50                   	push   eax
c0014612:	50                   	push   eax
c0014613:	68 a1 11 02 c0       	push   0xc00211a1
c0014618:	eb 31                	jmp    c001464b <CPU::detectFeatures()+0x953>
c001461a:	83 f8 05             	cmp    eax,0x5
c001461d:	75 09                	jne    c0014628 <CPU::detectFeatures()+0x930>
c001461f:	50                   	push   eax
c0014620:	50                   	push   eax
c0014621:	68 a9 11 02 c0       	push   0xc00211a9
c0014626:	eb 23                	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014628:	83 f8 0c             	cmp    eax,0xc
c001462b:	75 09                	jne    c0014636 <CPU::detectFeatures()+0x93e>
c001462d:	55                   	push   ebp
c001462e:	55                   	push   ebp
c001462f:	68 b7 11 02 c0       	push   0xc00211b7
c0014634:	eb 15                	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014636:	83 f8 0d             	cmp    eax,0xd
c0014639:	75 09                	jne    c0014644 <CPU::detectFeatures()+0x94c>
c001463b:	57                   	push   edi
c001463c:	57                   	push   edi
c001463d:	68 c2 11 02 c0       	push   0xc00211c2
c0014642:	eb 07                	jmp    c001464b <CPU::detectFeatures()+0x953>
c0014644:	56                   	push   esi
c0014645:	56                   	push   esi
c0014646:	68 d6 11 02 c0       	push   0xc00211d6
c001464b:	53                   	push   ebx
c001464c:	e8 61 bc ff ff       	call   c00102b2 <Device::setName(char const*)>
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	e9 82 00 00 00       	jmp    c00146db <CPU::detectFeatures()+0x9e3>
c0014659:	51                   	push   ecx
c001465a:	51                   	push   ecx
c001465b:	68 22 10 02 c0       	push   0xc0021022
c0014660:	57                   	push   edi
c0014661:	e8 41 c0 fe ff       	call   c00006a7 <strcpy>
c0014666:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014670:	e8 0a bb fe ff       	call   c000017f <is486>
c0014675:	83 c4 10             	add    esp,0x10
c0014678:	85 c0                	test   eax,eax
c001467a:	74 2d                	je     c00146a9 <CPU::detectFeatures()+0x9b1>
c001467c:	52                   	push   edx
c001467d:	52                   	push   edx
c001467e:	68 e2 11 02 c0       	push   0xc00211e2
c0014683:	53                   	push   ebx
c0014684:	e8 29 bc ff ff       	call   c00102b2 <Device::setName(char const*)>
c0014689:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014690:	e8 d3 a1 00 00       	call   c001e868 <CPU::readCR0()>
c0014695:	83 c4 10             	add    esp,0x10
c0014698:	83 e0 14             	and    eax,0x14
c001469b:	83 f8 04             	cmp    eax,0x4
c001469e:	75 1f                	jne    c00146bf <CPU::detectFeatures()+0x9c7>
c00146a0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00146a7:	eb 32                	jmp    c00146db <CPU::detectFeatures()+0x9e3>
c00146a9:	50                   	push   eax
c00146aa:	50                   	push   eax
c00146ab:	68 ed 11 02 c0       	push   0xc00211ed
c00146b0:	53                   	push   ebx
c00146b1:	e8 fc bb ff ff       	call   c00102b2 <Device::setName(char const*)>
c00146b6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00146bd:	eb d1                	jmp    c0014690 <CPU::detectFeatures()+0x998>
c00146bf:	e8 96 ba fe ff       	call   c000015a <hasLegacyFPU>
c00146c4:	83 e0 01             	and    eax,0x1
c00146c7:	8d 14 00             	lea    edx,[eax+eax*1]
c00146ca:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00146d0:	83 e0 fd             	and    eax,0xfffffffd
c00146d3:	09 d0                	or     eax,edx
c00146d5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00146db:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00146e2:	83 c4 4c             	add    esp,0x4c
c00146e5:	5b                   	pop    ebx
c00146e6:	5e                   	pop    esi
c00146e7:	5f                   	pop    edi
c00146e8:	5d                   	pop    ebp
c00146e9:	c3                   	ret    

c00146ea <CPU::setupSMEP()>:
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	e8 40 a4 00 00       	call   c001eb32 <CPU::readCR4()>
c00146f2:	0d 00 00 10 00       	or     eax,0x100000
c00146f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146fb:	83 c4 0c             	add    esp,0xc
c00146fe:	e9 4a a4 00 00       	jmp    c001eb4d <CPU::writeCR4(unsigned long)>
c0014703:	90                   	nop

c0014704 <CPU::setupUMIP()>:
c0014704:	83 ec 0c             	sub    esp,0xc
c0014707:	e8 26 a4 00 00       	call   c001eb32 <CPU::readCR4()>
c001470c:	80 cc 08             	or     ah,0x8
c001470f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014713:	83 c4 0c             	add    esp,0xc
c0014716:	e9 32 a4 00 00       	jmp    c001eb4d <CPU::writeCR4(unsigned long)>
c001471b:	90                   	nop

c001471c <CPU::setupTSC()>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	e8 0e a4 00 00       	call   c001eb32 <CPU::readCR4()>
c0014724:	83 c8 04             	or     eax,0x4
c0014727:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001472b:	83 c4 0c             	add    esp,0xc
c001472e:	e9 1a a4 00 00       	jmp    c001eb4d <CPU::writeCR4(unsigned long)>
c0014733:	90                   	nop

c0014734 <CPU::setupLargePages()>:
c0014734:	83 ec 0c             	sub    esp,0xc
c0014737:	e8 f6 a3 00 00       	call   c001eb32 <CPU::readCR4()>
c001473c:	83 c8 10             	or     eax,0x10
c001473f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014743:	83 c4 0c             	add    esp,0xc
c0014746:	e9 02 a4 00 00       	jmp    c001eb4d <CPU::writeCR4(unsigned long)>
c001474b:	90                   	nop

c001474c <CPU::setupPAT()>:
c001474c:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0014751:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014758:	74 2c                	je     c0014786 <CPU::setupPAT()+0x3a>
c001475a:	53                   	push   ebx
c001475b:	83 ec 10             	sub    esp,0x10
c001475e:	68 77 02 00 00       	push   0x277
c0014763:	50                   	push   eax
c0014764:	e8 5d 6a ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014769:	83 e2 f8             	and    edx,0xfffffff8
c001476c:	83 ca 01             	or     edx,0x1
c001476f:	52                   	push   edx
c0014770:	50                   	push   eax
c0014771:	68 77 02 00 00       	push   0x277
c0014776:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c001477c:	e8 71 6a ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014781:	83 c4 28             	add    esp,0x28
c0014784:	5b                   	pop    ebx
c0014785:	c3                   	ret    
c0014786:	c3                   	ret    
c0014787:	90                   	nop

c0014788 <CPU::setupMTRR()>:
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <CPU::setupGlobalPages()>:
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	e8 a0 a3 00 00       	call   c001eb32 <CPU::readCR4()>
c0014792:	0c 80                	or     al,0x80
c0014794:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014798:	83 c4 0c             	add    esp,0xc
c001479b:	e9 ad a3 00 00       	jmp    c001eb4d <CPU::writeCR4(unsigned long)>

c00147a0 <CPU::allowUsermodeDataAccess()>:
c00147a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00147ab:	74 03                	je     c00147b0 <CPU::allowUsermodeDataAccess()+0x10>
c00147ad:	0f 01 cb             	stac   
c00147b0:	c3                   	ret    
c00147b1:	90                   	nop

c00147b2 <CPU::prohibitUsermodeDataAccess()>:
c00147b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147b6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00147bd:	74 03                	je     c00147c2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00147bf:	0f 01 ca             	clac   
c00147c2:	c3                   	ret    
c00147c3:	90                   	nop

c00147c4 <CPU::setupSMAP()>:
c00147c4:	53                   	push   ebx
c00147c5:	83 ec 08             	sub    esp,0x8
c00147c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147cc:	e8 61 a3 00 00       	call   c001eb32 <CPU::readCR4()>
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	0d 00 00 20 00       	or     eax,0x200000
c00147d9:	50                   	push   eax
c00147da:	e8 6e a3 00 00       	call   c001eb4d <CPU::writeCR4(unsigned long)>
c00147df:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00147e3:	83 c4 18             	add    esp,0x18
c00147e6:	5b                   	pop    ebx
c00147e7:	eb c9                	jmp    c00147b2 <CPU::prohibitUsermodeDataAccess()>
c00147e9:	90                   	nop

c00147ea <CPU::setupFeatures()>:
c00147ea:	53                   	push   ebx
c00147eb:	83 ec 08             	sub    esp,0x8
c00147ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147f2:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00147f9:	74 0c                	je     c0014807 <CPU::setupFeatures()+0x1d>
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	53                   	push   ebx
c00147ff:	e8 e6 fe ff ff       	call   c00146ea <CPU::setupSMEP()>
c0014804:	83 c4 10             	add    esp,0x10
c0014807:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001480e:	74 0c                	je     c001481c <CPU::setupFeatures()+0x32>
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	53                   	push   ebx
c0014814:	e8 ab ff ff ff       	call   c00147c4 <CPU::setupSMAP()>
c0014819:	83 c4 10             	add    esp,0x10
c001481c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014823:	74 0c                	je     c0014831 <CPU::setupFeatures()+0x47>
c0014825:	83 ec 0c             	sub    esp,0xc
c0014828:	53                   	push   ebx
c0014829:	e8 d6 fe ff ff       	call   c0014704 <CPU::setupUMIP()>
c001482e:	83 c4 10             	add    esp,0x10
c0014831:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014838:	74 0c                	je     c0014846 <CPU::setupFeatures()+0x5c>
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	53                   	push   ebx
c001483e:	e8 d9 fe ff ff       	call   c001471c <CPU::setupTSC()>
c0014843:	83 c4 10             	add    esp,0x10
c0014846:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001484d:	74 0c                	je     c001485b <CPU::setupFeatures()+0x71>
c001484f:	83 ec 0c             	sub    esp,0xc
c0014852:	53                   	push   ebx
c0014853:	e8 dc fe ff ff       	call   c0014734 <CPU::setupLargePages()>
c0014858:	83 c4 10             	add    esp,0x10
c001485b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014862:	74 0c                	je     c0014870 <CPU::setupFeatures()+0x86>
c0014864:	83 ec 0c             	sub    esp,0xc
c0014867:	53                   	push   ebx
c0014868:	e8 1d ff ff ff       	call   c001478a <CPU::setupGlobalPages()>
c001486d:	83 c4 10             	add    esp,0x10
c0014870:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014877:	74 0d                	je     c0014886 <CPU::setupFeatures()+0x9c>
c0014879:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001487d:	83 c4 08             	add    esp,0x8
c0014880:	5b                   	pop    ebx
c0014881:	e9 c6 fe ff ff       	jmp    c001474c <CPU::setupPAT()>
c0014886:	83 c4 08             	add    esp,0x8
c0014889:	5b                   	pop    ebx
c001488a:	c3                   	ret    
c001488b:	90                   	nop

c001488c <CPU::open(int, int, void*)>:
c001488c:	57                   	push   edi
c001488d:	56                   	push   esi
c001488e:	53                   	push   ebx
c001488f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014893:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014897:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001489d:	83 ec 0c             	sub    esp,0xc
c00148a0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00148a6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00148ac:	50                   	push   eax
c00148ad:	e8 f8 6b ff ff       	call   c000b4aa <GDT::setup()>
c00148b2:	83 c4 0c             	add    esp,0xc
c00148b5:	6a 00                	push   0x0
c00148b7:	68 ef be ad de       	push   0xdeadbeef
c00148bc:	57                   	push   edi
c00148bd:	e8 ba 8d ff ff       	call   c000d67c <TSS::setup(unsigned long, unsigned long)>
c00148c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148c5:	e8 92 8d ff ff       	call   c000d65c <TSS::flush()>
c00148ca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00148d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d3:	e8 2c 6e ff ff       	call   c000b704 <IDT::setup()>
c00148d8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00148df:	e8 60 a2 00 00       	call   c001eb44 <CPU::writeDR7(unsigned long)>
c00148e4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00148ee:	e8 d5 78 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c00148f3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00148f9:	89 30                	mov    DWORD PTR [eax],esi
c00148fb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014901:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014904:	58                   	pop    eax
c0014905:	5a                   	pop    edx
c0014906:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001490c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014910:	e8 81 9d ff ff       	call   c000e696 <VAS::setCPUSpecific(unsigned long)>
c0014915:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014918:	e8 db f3 ff ff       	call   c0013cf8 <CPU::detectFeatures()>
c001491d:	e8 9a c7 ff ff       	call   c00110bc <setupInterruptController()>
c0014922:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014928:	a1 80 31 02 c0       	mov    eax,ds:0xc0023180
c001492d:	83 e0 10             	and    eax,0x10
c0014930:	83 f8 01             	cmp    eax,0x1
c0014933:	19 c0                	sbb    eax,eax
c0014935:	83 e0 46             	and    eax,0x46
c0014938:	83 c0 1e             	add    eax,0x1e
c001493b:	89 04 24             	mov    DWORD PTR [esp],eax
c001493e:	e8 61 d9 ff ff       	call   c00122a4 <setupTimer(int)>
c0014943:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014949:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001494c:	e8 99 fe ff ff       	call   c00147ea <CPU::setupFeatures()>
c0014951:	83 c4 10             	add    esp,0x10
c0014954:	31 c0                	xor    eax,eax
c0014956:	5b                   	pop    ebx
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	c3                   	ret    

c001495a <Krnl::panic(char const*)>:
c001495a:	55                   	push   ebp
c001495b:	89 e5                	mov    ebp,esp
c001495d:	53                   	push   ebx
c001495e:	83 ec 0c             	sub    esp,0xc
c0014961:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014964:	fa                   	cli    
c0014965:	c6 05 b0 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023bb0,0x1
c001496c:	53                   	push   ebx
c001496d:	c6 05 a0 25 02 c0 00 	mov    BYTE PTR ds:0xc00225a0,0x0
c0014974:	68 24 12 02 c0       	push   0xc0021224
c0014979:	e8 47 a3 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001497e:	58                   	pop    eax
c001497f:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498a:	e8 2e 85 ff ff       	call   c000cebd <setActiveTerminal(VgaText*)>
c001498f:	83 c4 0c             	add    esp,0xc
c0014992:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014997:	6a 01                	push   0x1
c0014999:	6a 0f                	push   0xf
c001499b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a1:	e8 56 7f ff ff       	call   c000c8fc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00149a6:	5a                   	pop    edx
c00149a7:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c00149ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b2:	e8 a7 87 ff ff       	call   c000d15e <VgaText::clearScreen()>
c00149b7:	59                   	pop    ecx
c00149b8:	58                   	pop    eax
c00149b9:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c00149be:	68 3d 12 02 c0       	push   0xc002123d
c00149c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c9:	e8 0e 89 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c00149ce:	58                   	pop    eax
c00149cf:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c00149d4:	5a                   	pop    edx
c00149d5:	68 dc 12 02 c0       	push   0xc00212dc
c00149da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e0:	e8 f7 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c00149e5:	59                   	pop    ecx
c00149e6:	58                   	pop    eax
c00149e7:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c00149ec:	68 59 12 02 c0       	push   0xc0021259
c00149f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f7:	e8 e0 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c00149fc:	58                   	pop    eax
c00149fd:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a02:	5a                   	pop    edx
c0014a03:	53                   	push   ebx
c0014a04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0a:	e8 cd 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a0f:	59                   	pop    ecx
c0014a10:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a15:	5b                   	pop    ebx
c0014a16:	68 79 12 02 c0       	push   0xc0021279
c0014a1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a21:	e8 b6 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a26:	58                   	pop    eax
c0014a27:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a2c:	5a                   	pop    edx
c0014a2d:	68 18 13 02 c0       	push   0xc0021318
c0014a32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a38:	e8 9f 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a3d:	59                   	pop    ecx
c0014a3e:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a43:	5b                   	pop    ebx
c0014a44:	68 59 12 02 c0       	push   0xc0021259
c0014a49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4f:	e8 88 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a54:	58                   	pop    eax
c0014a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5a:	5a                   	pop    edx
c0014a5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a5e:	83 c0 0c             	add    eax,0xc
c0014a61:	50                   	push   eax
c0014a62:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6d:	e8 6a 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a72:	59                   	pop    ecx
c0014a73:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a78:	5b                   	pop    ebx
c0014a79:	68 78 12 02 c0       	push   0xc0021278
c0014a7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a84:	e8 53 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014a89:	58                   	pop    eax
c0014a8a:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014a8f:	5a                   	pop    edx
c0014a90:	68 44 13 02 c0       	push   0xc0021344
c0014a95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9b:	e8 3c 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014aa0:	59                   	pop    ecx
c0014aa1:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014aa6:	5b                   	pop    ebx
c0014aa7:	68 84 13 02 c0       	push   0xc0021384
c0014aac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab2:	e8 25 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014ab7:	58                   	pop    eax
c0014ab8:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014abd:	5a                   	pop    edx
c0014abe:	68 64 12 02 c0       	push   0xc0021264
c0014ac3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac9:	e8 0e 88 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014ace:	59                   	pop    ecx
c0014acf:	5b                   	pop    ebx
c0014ad0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ad3:	68 7c 12 02 c0       	push   0xc002127c
c0014ad8:	e8 e8 a1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0014add:	58                   	pop    eax
c0014ade:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ae1:	5a                   	pop    edx
c0014ae2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014ae5:	68 85 12 02 c0       	push   0xc0021285
c0014aea:	e8 d6 a1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0014aef:	59                   	pop    ecx
c0014af0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014af3:	5b                   	pop    ebx
c0014af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014af6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014af9:	68 9d 0a 02 c0       	push   0xc0020a9d
c0014afe:	e8 c2 a1 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0014b03:	58                   	pop    eax
c0014b04:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b09:	5a                   	pop    edx
c0014b0a:	68 c8 13 02 c0       	push   0xc00213c8
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 c2 87 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014b1a:	59                   	pop    ecx
c0014b1b:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b20:	5b                   	pop    ebx
c0014b21:	68 8e 12 02 c0       	push   0xc002128e
c0014b26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2c:	e8 ab 87 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014b31:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b36:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b3c:	e8 27 9d 00 00       	call   c001e868 <CPU::readCR0()>
c0014b41:	5a                   	pop    edx
c0014b42:	59                   	pop    ecx
c0014b43:	50                   	push   eax
c0014b44:	53                   	push   ebx
c0014b45:	e8 b8 87 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014b4a:	5b                   	pop    ebx
c0014b4b:	58                   	pop    eax
c0014b4c:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b51:	68 98 12 02 c0       	push   0xc0021298
c0014b56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5c:	e8 7b 87 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014b61:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b66:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b6c:	e8 e5 9f 00 00       	call   c001eb56 <CPU::readCR2()>
c0014b71:	5a                   	pop    edx
c0014b72:	59                   	pop    ecx
c0014b73:	50                   	push   eax
c0014b74:	53                   	push   ebx
c0014b75:	e8 88 87 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014b7a:	5b                   	pop    ebx
c0014b7b:	58                   	pop    eax
c0014b7c:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b81:	68 a2 12 02 c0       	push   0xc00212a2
c0014b86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8c:	e8 4b 87 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014b91:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014b96:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b9c:	e8 54 99 00 00       	call   c001e4f5 <CPU::readCR3()>
c0014ba1:	5a                   	pop    edx
c0014ba2:	59                   	pop    ecx
c0014ba3:	50                   	push   eax
c0014ba4:	53                   	push   ebx
c0014ba5:	e8 58 87 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014baa:	5b                   	pop    ebx
c0014bab:	58                   	pop    eax
c0014bac:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014bb1:	68 b5 12 02 c0       	push   0xc00212b5
c0014bb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbc:	e8 1b 87 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014bc1:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014bc6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014bcc:	e8 61 9f 00 00       	call   c001eb32 <CPU::readCR4()>
c0014bd1:	5a                   	pop    edx
c0014bd2:	59                   	pop    ecx
c0014bd3:	50                   	push   eax
c0014bd4:	53                   	push   ebx
c0014bd5:	e8 28 87 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014bda:	5b                   	pop    ebx
c0014bdb:	58                   	pop    eax
c0014bdc:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014be1:	68 bf 12 02 c0       	push   0xc00212bf
c0014be6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bec:	e8 eb 86 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014bf1:	5a                   	pop    edx
c0014bf2:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014bf7:	59                   	pop    ecx
c0014bf8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014bfe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c01:	50                   	push   eax
c0014c02:	e8 fb 86 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014c07:	5b                   	pop    ebx
c0014c08:	58                   	pop    eax
c0014c09:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014c0e:	68 d6 12 02 c0       	push   0xc00212d6
c0014c13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c19:	e8 be 86 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014c1e:	5a                   	pop    edx
c0014c1f:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014c24:	59                   	pop    ecx
c0014c25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014c2b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c2e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014c31:	50                   	push   eax
c0014c32:	e8 cb 86 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014c37:	5b                   	pop    ebx
c0014c38:	58                   	pop    eax
c0014c39:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014c3e:	68 d6 12 02 c0       	push   0xc00212d6
c0014c43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c49:	e8 8e 86 ff ff       	call   c000d2dc <VgaText::puts(char const*)>
c0014c4e:	59                   	pop    ecx
c0014c4f:	a1 b4 45 02 c0       	mov    eax,ds:0xc00245b4
c0014c54:	5b                   	pop    ebx
c0014c55:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014c5b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c5e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014c60:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014c63:	50                   	push   eax
c0014c64:	e8 99 86 ff ff       	call   c000d302 <VgaText::putx(unsigned int)>
c0014c69:	83 c4 10             	add    esp,0x10
c0014c6c:	b2 fe                	mov    dl,0xfe
c0014c6e:	e4 60                	in     al,0x60
c0014c70:	3c 1c                	cmp    al,0x1c
c0014c72:	74 04                	je     c0014c78 <Krnl::panic(char const*)+0x31e>
c0014c74:	3c 5a                	cmp    al,0x5a
c0014c76:	75 f6                	jne    c0014c6e <Krnl::panic(char const*)+0x314>
c0014c78:	e4 64                	in     al,0x64
c0014c7a:	a8 02                	test   al,0x2
c0014c7c:	75 fa                	jne    c0014c78 <Krnl::panic(char const*)+0x31e>
c0014c7e:	88 d0                	mov    al,dl
c0014c80:	e6 64                	out    0x64,al
c0014c82:	fa                   	cli    
c0014c83:	f4                   	hlt    
c0014c84:	eb e8                	jmp    c0014c6e <Krnl::panic(char const*)+0x314>

c0014c86 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c86:	55                   	push   ebp
c0014c87:	57                   	push   edi
c0014c88:	56                   	push   esi
c0014c89:	53                   	push   ebx
c0014c8a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c90:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c97:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c99:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c9c:	80 fb 40             	cmp    bl,0x40
c0014c9f:	75 1b                	jne    c0014cbc <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014ca1:	8a 16                	mov    dl,BYTE PTR [esi]
c0014ca3:	84 d2                	test   dl,dl
c0014ca5:	0f 84 f1 00 00 00    	je     c0014d9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cab:	8d 46 01             	lea    eax,[esi+0x1]
c0014cae:	80 fa 3a             	cmp    dl,0x3a
c0014cb1:	74 04                	je     c0014cb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014cb3:	89 c6                	mov    esi,eax
c0014cb5:	eb ea                	jmp    c0014ca1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014cb7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014cba:	89 c6                	mov    esi,eax
c0014cbc:	50                   	push   eax
c0014cbd:	6a 40                	push   0x40
c0014cbf:	6a 00                	push   0x0
c0014cc1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014cc5:	50                   	push   eax
c0014cc6:	e8 3d b9 fe ff       	call   c0000608 <memset>
c0014ccb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cd2:	31 c0                	xor    eax,eax
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cd9:	84 c9                	test   cl,cl
c0014cdb:	0f 84 bb 00 00 00    	je     c0014d9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ce1:	3d c7 00 00 00       	cmp    eax,0xc7
c0014ce6:	0f 8f b0 00 00 00    	jg     c0014d9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cec:	80 f9 0a             	cmp    cl,0xa
c0014cef:	0f 85 98 00 00 00    	jne    c0014d8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cf5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cfa:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cfe:	a8 df                	test   al,0xdf
c0014d00:	0f 94 c1             	sete   cl
c0014d03:	3c 23                	cmp    al,0x23
c0014d05:	0f 94 c2             	sete   dl
c0014d08:	08 d1                	or     cl,dl
c0014d0a:	75 4a                	jne    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d0c:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d0f:	80 fa 01             	cmp    dl,0x1
c0014d12:	76 42                	jbe    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d14:	3c 5b                	cmp    al,0x5b
c0014d16:	75 42                	jne    c0014d5a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d18:	80 fb 40             	cmp    bl,0x40
c0014d1b:	75 39                	jne    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d1d:	83 ec 0c             	sub    esp,0xc
c0014d20:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d24:	52                   	push   edx
c0014d25:	e8 fb b8 fe ff       	call   c0000625 <strlen>
c0014d2a:	83 c4 10             	add    esp,0x10
c0014d2d:	83 f8 3f             	cmp    eax,0x3f
c0014d30:	77 6a                	ja     c0014d9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d32:	50                   	push   eax
c0014d33:	50                   	push   eax
c0014d34:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d38:	52                   	push   edx
c0014d39:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d3d:	52                   	push   edx
c0014d3e:	e8 64 b9 fe ff       	call   c00006a7 <strcpy>
c0014d43:	58                   	pop    eax
c0014d44:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d48:	52                   	push   edx
c0014d49:	e8 d7 b8 fe ff       	call   c0000625 <strlen>
c0014d4e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	31 d2                	xor    edx,edx
c0014d58:	eb 3a                	jmp    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d5a:	80 fb 40             	cmp    bl,0x40
c0014d5d:	74 06                	je     c0014d65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d5f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d63:	eb 20                	jmp    c0014d85 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d65:	50                   	push   eax
c0014d66:	50                   	push   eax
c0014d67:	55                   	push   ebp
c0014d68:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d6c:	50                   	push   eax
c0014d6d:	e8 86 b9 fe ff       	call   c00006f8 <strcmp>
c0014d72:	83 c4 10             	add    esp,0x10
c0014d75:	85 c0                	test   eax,eax
c0014d77:	75 dd                	jne    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d79:	eb e4                	jmp    c0014d5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	80 f9 3d             	cmp    cl,0x3d
c0014d81:	74 1d                	je     c0014da0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d83:	89 d0                	mov    eax,edx
c0014d85:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d87:	84 c9                	test   cl,cl
c0014d89:	75 f0                	jne    c0014d7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d8b:	eb 0f                	jmp    c0014d9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d8d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d90:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d94:	47                   	inc    edi
c0014d95:	89 d0                	mov    eax,edx
c0014d97:	e9 3b ff ff ff       	jmp    c0014cd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d9c:	31 c0                	xor    eax,eax
c0014d9e:	eb 33                	jmp    c0014dd3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014da0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014da4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014da7:	50                   	push   eax
c0014da8:	50                   	push   eax
c0014da9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014dad:	50                   	push   eax
c0014dae:	56                   	push   esi
c0014daf:	e8 44 b9 fe ff       	call   c00006f8 <strcmp>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	85 c0                	test   eax,eax
c0014db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dbd:	75 97                	jne    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dbf:	51                   	push   ecx
c0014dc0:	51                   	push   ecx
c0014dc1:	52                   	push   edx
c0014dc2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014dc9:	e8 d9 b8 fe ff       	call   c00006a7 <strcpy>
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	b0 01                	mov    al,0x1
c0014dd3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dd9:	5b                   	pop    ebx
c0014dda:	5e                   	pop    esi
c0014ddb:	5f                   	pop    edi
c0014ddc:	5d                   	pop    ebp
c0014ddd:	c3                   	ret    

c0014dde <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dde:	57                   	push   edi
c0014ddf:	56                   	push   esi
c0014de0:	53                   	push   ebx
c0014de1:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014de7:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014dee:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014df5:	53                   	push   ebx
c0014df6:	e8 2a b8 fe ff       	call   c0000625 <strlen>
c0014dfb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dfe:	89 c7                	mov    edi,eax
c0014e00:	e8 20 b8 fe ff       	call   c0000625 <strlen>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e0c:	31 ff                	xor    edi,edi
c0014e0e:	3d ff 00 00 00       	cmp    eax,0xff
c0014e13:	0f 87 18 01 00 00    	ja     c0014f31 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014e19:	51                   	push   ecx
c0014e1a:	51                   	push   ecx
c0014e1b:	56                   	push   esi
c0014e1c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014e20:	56                   	push   esi
c0014e21:	e8 81 b8 fe ff       	call   c00006a7 <strcpy>
c0014e26:	58                   	pop    eax
c0014e27:	5a                   	pop    edx
c0014e28:	68 22 18 02 c0       	push   0xc0021822
c0014e2d:	56                   	push   esi
c0014e2e:	e8 2b b9 fe ff       	call   c000075e <strcat>
c0014e33:	59                   	pop    ecx
c0014e34:	58                   	pop    eax
c0014e35:	53                   	push   ebx
c0014e36:	56                   	push   esi
c0014e37:	e8 22 b9 fe ff       	call   c000075e <strcat>
c0014e3c:	58                   	pop    eax
c0014e3d:	5a                   	pop    edx
c0014e3e:	68 ee 13 02 c0       	push   0xc00213ee
c0014e43:	56                   	push   esi
c0014e44:	e8 15 b9 fe ff       	call   c000075e <strcat>
c0014e49:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e50:	e8 81 9d ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0014e55:	83 c4 0c             	add    esp,0xc
c0014e58:	89 c3                	mov    ebx,eax
c0014e5a:	ff 35 b4 45 02 c0    	push   DWORD PTR ds:0xc00245b4
c0014e60:	56                   	push   esi
c0014e61:	50                   	push   eax
c0014e62:	e8 8d a3 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0014e67:	59                   	pop    ecx
c0014e68:	5e                   	pop    esi
c0014e69:	6a 01                	push   0x1
c0014e6b:	53                   	push   ebx
c0014e6c:	e8 e7 a3 ff ff       	call   c000f258 <File::open(FileOpenMode)>
c0014e71:	83 c4 10             	add    esp,0x10
c0014e74:	85 c0                	test   eax,eax
c0014e76:	74 08                	je     c0014e80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014e78:	83 ec 0c             	sub    esp,0xc
c0014e7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e7d:	53                   	push   ebx
c0014e7e:	eb 2e                	jmp    c0014eae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014e80:	52                   	push   edx
c0014e81:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014e85:	50                   	push   eax
c0014e86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014e8a:	50                   	push   eax
c0014e8b:	53                   	push   ebx
c0014e8c:	e8 73 a6 ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c0014e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	89 c1                	mov    ecx,eax
c0014e9a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014e9e:	75 13                	jne    c0014eb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	53                   	push   ebx
c0014ea4:	e8 0d a4 ff ff       	call   c000f2b6 <File::close()>
c0014ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014eb1:	eb 7b                	jmp    c0014f2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014eb3:	83 ec 0c             	sub    esp,0xc
c0014eb6:	50                   	push   eax
c0014eb7:	e8 62 6d ff ff       	call   c000bc1e <malloc>
c0014ebc:	89 c6                	mov    esi,eax
c0014ebe:	58                   	pop    eax
c0014ebf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014ec5:	52                   	push   edx
c0014ec6:	56                   	push   esi
c0014ec7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ecb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ecf:	53                   	push   ebx
c0014ed0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ed3:	83 c4 20             	add    esp,0x20
c0014ed6:	85 c0                	test   eax,eax
c0014ed8:	75 0a                	jne    c0014ee4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014eda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ede:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014ee2:	74 18                	je     c0014efc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	31 ff                	xor    edi,edi
c0014ee9:	53                   	push   ebx
c0014eea:	e8 c7 a3 ff ff       	call   c000f2b6 <File::close()>
c0014eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ef7:	83 c4 10             	add    esp,0x10
c0014efa:	eb 35                	jmp    c0014f31 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014efc:	83 ec 0c             	sub    esp,0xc
c0014eff:	53                   	push   ebx
c0014f00:	e8 b1 a3 ff ff       	call   c000f2b6 <File::close()>
c0014f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f0d:	83 c4 0c             	add    esp,0xc
c0014f10:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f17:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f1e:	56                   	push   esi
c0014f1f:	e8 62 fd ff ff       	call   c0014c86 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f24:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f27:	89 c7                	mov    edi,eax
c0014f29:	e8 00 6d ff ff       	call   c000bc2e <free>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	81 c4 10 01 00 00    	add    esp,0x110
c0014f37:	89 f8                	mov    eax,edi
c0014f39:	5b                   	pop    ebx
c0014f3a:	5e                   	pop    esi
c0014f3b:	5f                   	pop    edi
c0014f3c:	c3                   	ret    

c0014f3d <Reg::getLine(char*, char*, char*)>:
c0014f3d:	57                   	push   edi
c0014f3e:	56                   	push   esi
c0014f3f:	53                   	push   ebx
c0014f40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f48:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f4c:	57                   	push   edi
c0014f4d:	56                   	push   esi
c0014f4e:	53                   	push   ebx
c0014f4f:	68 f3 13 02 c0       	push   0xc00213f3
c0014f54:	e8 85 fe ff ff       	call   c0014dde <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	84 c0                	test   al,al
c0014f5e:	75 10                	jne    c0014f70 <Reg::getLine(char*, char*, char*)+0x33>
c0014f60:	57                   	push   edi
c0014f61:	56                   	push   esi
c0014f62:	53                   	push   ebx
c0014f63:	68 18 14 02 c0       	push   0xc0021418
c0014f68:	e8 71 fe ff ff       	call   c0014dde <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f6d:	83 c4 10             	add    esp,0x10
c0014f70:	5b                   	pop    ebx
c0014f71:	5e                   	pop    esi
c0014f72:	5f                   	pop    edi
c0014f73:	c3                   	ret    

c0014f74 <Reg::readInt(char*, char*, int*)>:
c0014f74:	55                   	push   ebp
c0014f75:	57                   	push   edi
c0014f76:	56                   	push   esi
c0014f77:	53                   	push   ebx
c0014f78:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f7e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f82:	57                   	push   edi
c0014f83:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f8a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f91:	e8 a7 ff ff ff       	call   c0014f3d <Reg::getLine(char*, char*, char*)>
c0014f96:	83 c4 10             	add    esp,0x10
c0014f99:	84 c0                	test   al,al
c0014f9b:	0f 84 b3 00 00 00    	je     c0015054 <Reg::readInt(char*, char*, int*)+0xe0>
c0014fa1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014fa5:	80 fa 2b             	cmp    dl,0x2b
c0014fa8:	74 0c                	je     c0014fb6 <Reg::readInt(char*, char*, int*)+0x42>
c0014faa:	80 fa 2d             	cmp    dl,0x2d
c0014fad:	75 0e                	jne    c0014fbd <Reg::readInt(char*, char*, int*)+0x49>
c0014faf:	ba 01 00 00 00       	mov    edx,0x1
c0014fb4:	eb 0b                	jmp    c0014fc1 <Reg::readInt(char*, char*, int*)+0x4d>
c0014fb6:	ba 01 00 00 00       	mov    edx,0x1
c0014fbb:	eb 02                	jmp    c0014fbf <Reg::readInt(char*, char*, int*)+0x4b>
c0014fbd:	31 d2                	xor    edx,edx
c0014fbf:	31 c0                	xor    eax,eax
c0014fc1:	be 0a 00 00 00       	mov    esi,0xa
c0014fc6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fcb:	75 20                	jne    c0014fed <Reg::readInt(char*, char*, int*)+0x79>
c0014fcd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fd1:	80 f9 78             	cmp    cl,0x78
c0014fd4:	75 0a                	jne    c0014fe0 <Reg::readInt(char*, char*, int*)+0x6c>
c0014fd6:	83 c2 02             	add    edx,0x2
c0014fd9:	be 10 00 00 00       	mov    esi,0x10
c0014fde:	eb 0d                	jmp    c0014fed <Reg::readInt(char*, char*, int*)+0x79>
c0014fe0:	80 f9 62             	cmp    cl,0x62
c0014fe3:	75 08                	jne    c0014fed <Reg::readInt(char*, char*, int*)+0x79>
c0014fe5:	83 c2 02             	add    edx,0x2
c0014fe8:	be 02 00 00 00       	mov    esi,0x2
c0014fed:	01 d7                	add    edi,edx
c0014fef:	31 d2                	xor    edx,edx
c0014ff1:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014ff3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014ff7:	80 fb 0d             	cmp    bl,0xd
c0014ffa:	0f 94 c3             	sete   bl
c0014ffd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015002:	0f 94 c1             	sete   cl
c0015005:	08 cb                	or     bl,cl
c0015007:	75 3a                	jne    c0015043 <Reg::readInt(char*, char*, int*)+0xcf>
c0015009:	0f af d6             	imul   edx,esi
c001500c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015011:	83 fe 10             	cmp    esi,0x10
c0015014:	75 26                	jne    c001503c <Reg::readInt(char*, char*, int*)+0xc8>
c0015016:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001501a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001501d:	89 e9                	mov    ecx,ebp
c001501f:	80 f9 05             	cmp    cl,0x5
c0015022:	77 06                	ja     c001502a <Reg::readInt(char*, char*, int*)+0xb6>
c0015024:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015028:	eb 16                	jmp    c0015040 <Reg::readInt(char*, char*, int*)+0xcc>
c001502a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001502e:	83 e9 61             	sub    ecx,0x61
c0015031:	80 f9 05             	cmp    cl,0x5
c0015034:	77 06                	ja     c001503c <Reg::readInt(char*, char*, int*)+0xc8>
c0015036:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001503a:	eb 04                	jmp    c0015040 <Reg::readInt(char*, char*, int*)+0xcc>
c001503c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015040:	47                   	inc    edi
c0015041:	eb ae                	jmp    c0014ff1 <Reg::readInt(char*, char*, int*)+0x7d>
c0015043:	84 c0                	test   al,al
c0015045:	74 02                	je     c0015049 <Reg::readInt(char*, char*, int*)+0xd5>
c0015047:	f7 da                	neg    edx
c0015049:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015050:	89 10                	mov    DWORD PTR [eax],edx
c0015052:	88 d8                	mov    al,bl
c0015054:	81 c4 ec 00 00 00    	add    esp,0xec
c001505a:	5b                   	pop    ebx
c001505b:	5e                   	pop    esi
c001505c:	5f                   	pop    edi
c001505d:	5d                   	pop    ebp
c001505e:	c3                   	ret    

c001505f <Reg::readString(char*, char*, char*, int)>:
c001505f:	57                   	push   edi
c0015060:	56                   	push   esi
c0015061:	53                   	push   ebx
c0015062:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015068:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001506f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015073:	57                   	push   edi
c0015074:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001507b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015082:	e8 b6 fe ff ff       	call   c0014f3d <Reg::getLine(char*, char*, char*)>
c0015087:	83 c4 10             	add    esp,0x10
c001508a:	89 c6                	mov    esi,eax
c001508c:	84 c0                	test   al,al
c001508e:	74 44                	je     c00150d4 <Reg::readString(char*, char*, char*, int)+0x75>
c0015090:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015097:	31 c0                	xor    eax,eax
c0015099:	4a                   	dec    edx
c001509a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001509d:	84 c9                	test   cl,cl
c001509f:	74 0f                	je     c00150b0 <Reg::readString(char*, char*, char*, int)+0x51>
c00150a1:	39 c2                	cmp    edx,eax
c00150a3:	7e 0b                	jle    c00150b0 <Reg::readString(char*, char*, char*, int)+0x51>
c00150a5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00150a8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00150ad:	40                   	inc    eax
c00150ae:	eb ea                	jmp    c001509a <Reg::readString(char*, char*, char*, int)+0x3b>
c00150b0:	83 ec 0c             	sub    esp,0xc
c00150b3:	53                   	push   ebx
c00150b4:	e8 6c b5 fe ff       	call   c0000625 <strlen>
c00150b9:	83 c4 10             	add    esp,0x10
c00150bc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150c1:	75 11                	jne    c00150d4 <Reg::readString(char*, char*, char*, int)+0x75>
c00150c3:	83 ec 0c             	sub    esp,0xc
c00150c6:	53                   	push   ebx
c00150c7:	e8 59 b5 fe ff       	call   c0000625 <strlen>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150d4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150da:	89 f0                	mov    eax,esi
c00150dc:	5b                   	pop    ebx
c00150dd:	5e                   	pop    esi
c00150de:	5f                   	pop    edi
c00150df:	c3                   	ret    

c00150e0 <Reg::readBool(char*, char*, bool*)>:
c00150e0:	83 ec 20             	sub    esp,0x20
c00150e3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150e7:	50                   	push   eax
c00150e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150f0:	e8 7f fe ff ff       	call   c0014f74 <Reg::readInt(char*, char*, int*)>
c00150f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150fa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150fe:	0f 95 02             	setne  BYTE PTR [edx]
c0015101:	83 c4 2c             	add    esp,0x2c
c0015104:	c3                   	ret    

c0015105 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015105:	53                   	push   ebx
c0015106:	83 ec 1c             	sub    esp,0x1c
c0015109:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001510d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015111:	50                   	push   eax
c0015112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511a:	e8 c1 ff ff ff       	call   c00150e0 <Reg::readBool(char*, char*, bool*)>
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	84 c0                	test   al,al
c0015124:	74 04                	je     c001512a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015126:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001512a:	88 d8                	mov    al,bl
c001512c:	83 c4 18             	add    esp,0x18
c001512f:	5b                   	pop    ebx
c0015130:	c3                   	ret    

c0015131 <Reg::readIntWithDefault(char*, char*, int)>:
c0015131:	53                   	push   ebx
c0015132:	83 ec 1c             	sub    esp,0x1c
c0015135:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015139:	8d 44 24 10          	lea    eax,[esp+0x10]
c001513d:	50                   	push   eax
c001513e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015146:	e8 29 fe ff ff       	call   c0014f74 <Reg::readInt(char*, char*, int*)>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	84 c0                	test   al,al
c0015150:	74 04                	je     c0015156 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015152:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015156:	89 d8                	mov    eax,ebx
c0015158:	83 c4 18             	add    esp,0x18
c001515b:	5b                   	pop    ebx
c001515c:	c3                   	ret    

c001515d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001515d:	56                   	push   esi
c001515e:	53                   	push   ebx
c001515f:	51                   	push   ecx
c0015160:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015164:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001516c:	56                   	push   esi
c001516d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015175:	e8 e5 fe ff ff       	call   c001505f <Reg::readString(char*, char*, char*, int)>
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	84 c0                	test   al,al
c001517f:	74 02                	je     c0015183 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015181:	89 f3                	mov    ebx,esi
c0015183:	89 d8                	mov    eax,ebx
c0015185:	5a                   	pop    edx
c0015186:	5b                   	pop    ebx
c0015187:	5e                   	pop    esi
c0015188:	c3                   	ret    

c0015189 <Sys::exit(regs*)>:
c0015189:	83 ec 18             	sub    esp,0x18
c001518c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015190:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015193:	e8 ee 30 00 00       	call   c0018286 <terminateTask(int)>
c0015198:	83 c8 ff             	or     eax,0xffffffff
c001519b:	83 c4 1c             	add    esp,0x1c
c001519e:	89 c2                	mov    edx,eax
c00151a0:	c3                   	ret    

c00151a1 <Sys::loadDLL(regs*)>:
c00151a1:	56                   	push   esi
c00151a2:	53                   	push   ebx
c00151a3:	31 d2                	xor    edx,edx
c00151a5:	51                   	push   ecx
c00151a6:	b8 01 00 00 00       	mov    eax,0x1
c00151ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00151af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00151b3:	74 7d                	je     c0015232 <Sys::loadDLL(regs*)+0x91>
c00151b5:	83 ec 0c             	sub    esp,0xc
c00151b8:	68 14 01 00 00       	push   0x114
c00151bd:	e8 14 9a ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00151c2:	83 c4 0c             	add    esp,0xc
c00151c5:	89 c3                	mov    ebx,eax
c00151c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151d2:	53                   	push   ebx
c00151d3:	e8 1c a0 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c00151d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151db:	e8 e6 a2 ff ff       	call   c000f4c6 <File::exists()>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	84 c0                	test   al,al
c00151e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e7:	75 11                	jne    c00151fa <Sys::loadDLL(regs*)+0x59>
c00151e9:	83 ec 0c             	sub    esp,0xc
c00151ec:	53                   	push   ebx
c00151ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	b8 03 00 00 00       	mov    eax,0x3
c00151f8:	eb 36                	jmp    c0015230 <Sys::loadDLL(regs*)+0x8f>
c00151fa:	83 ec 0c             	sub    esp,0xc
c00151fd:	53                   	push   ebx
c00151fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015201:	58                   	pop    eax
c0015202:	5a                   	pop    edx
c0015203:	6a 00                	push   0x0
c0015205:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015208:	e8 06 21 00 00       	call   c0017313 <Thr::loadDLL(char const*, bool)>
c001520d:	83 c4 10             	add    esp,0x10
c0015210:	89 c1                	mov    ecx,eax
c0015212:	31 d2                	xor    edx,edx
c0015214:	b8 04 00 00 00       	mov    eax,0x4
c0015219:	85 c9                	test   ecx,ecx
c001521b:	74 15                	je     c0015232 <Sys::loadDLL(regs*)+0x91>
c001521d:	53                   	push   ebx
c001521e:	53                   	push   ebx
c001521f:	ff 35 68 31 02 c0    	push   DWORD PTR ds:0xc0023168
c0015225:	51                   	push   ecx
c0015226:	e8 3b 22 00 00       	call   c0017466 <Thr::executeDLL(unsigned long, void*)>
c001522b:	83 c4 10             	add    esp,0x10
c001522e:	31 c0                	xor    eax,eax
c0015230:	31 d2                	xor    edx,edx
c0015232:	59                   	pop    ecx
c0015233:	5b                   	pop    ebx
c0015234:	5e                   	pop    esi
c0015235:	c3                   	ret    

c0015236 <Sys::read(regs*)>:
c0015236:	57                   	push   edi
c0015237:	56                   	push   esi
c0015238:	53                   	push   ebx
c0015239:	83 ec 10             	sub    esp,0x10
c001523c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015240:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015243:	83 f8 02             	cmp    eax,0x2
c0015246:	77 10                	ja     c0015258 <Sys::read(regs*)+0x22>
c0015248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001524d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015250:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015256:	eb 0e                	jmp    c0015266 <Sys::read(regs*)+0x30>
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	50                   	push   eax
c001525c:	e8 86 89 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	89 c1                	mov    ecx,eax
c0015266:	83 c8 ff             	or     eax,0xffffffff
c0015269:	85 c9                	test   ecx,ecx
c001526b:	89 c2                	mov    edx,eax
c001526d:	74 28                	je     c0015297 <Sys::read(regs*)+0x61>
c001526f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015277:	31 ff                	xor    edi,edi
c0015279:	83 ec 0c             	sub    esp,0xc
c001527c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001527e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015282:	52                   	push   edx
c0015283:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015286:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015289:	57                   	push   edi
c001528a:	56                   	push   esi
c001528b:	51                   	push   ecx
c001528c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001528f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015293:	83 c4 20             	add    esp,0x20
c0015296:	99                   	cdq    
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	5b                   	pop    ebx
c001529b:	5e                   	pop    esi
c001529c:	5f                   	pop    edi
c001529d:	c3                   	ret    

c001529e <Sys::sbrk(regs*)>:
c001529e:	56                   	push   esi
c001529f:	53                   	push   ebx
c00152a0:	50                   	push   eax
c00152a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152ad:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00152b0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00152b6:	85 db                	test   ebx,ebx
c00152b8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00152bb:	74 02                	je     c00152bf <Sys::sbrk(regs*)+0x21>
c00152bd:	79 06                	jns    c00152c5 <Sys::sbrk(regs*)+0x27>
c00152bf:	89 f0                	mov    eax,esi
c00152c1:	31 d2                	xor    edx,edx
c00152c3:	eb 2a                	jmp    c00152ef <Sys::sbrk(regs*)+0x51>
c00152c5:	83 c8 ff             	or     eax,0xffffffff
c00152c8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00152ce:	89 c2                	mov    edx,eax
c00152d0:	77 1d                	ja     c00152ef <Sys::sbrk(regs*)+0x51>
c00152d2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00152d8:	50                   	push   eax
c00152d9:	c1 ea 0c             	shr    edx,0xc
c00152dc:	68 07 04 00 00       	push   0x407
c00152e1:	52                   	push   edx
c00152e2:	51                   	push   ecx
c00152e3:	e8 de 91 ff ff       	call   c000e4c6 <VAS::allocatePages(int, int)>
c00152e8:	89 f0                	mov    eax,esi
c00152ea:	31 d2                	xor    edx,edx
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	59                   	pop    ecx
c00152f0:	5b                   	pop    ebx
c00152f1:	5e                   	pop    esi
c00152f2:	c3                   	ret    

c00152f3 <Sys::write(regs*)>:
c00152f3:	57                   	push   edi
c00152f4:	56                   	push   esi
c00152f5:	53                   	push   ebx
c00152f6:	83 ec 18             	sub    esp,0x18
c00152f9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00152fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015300:	68 33 14 02 c0       	push   0xc0021433
c0015305:	e8 bb 99 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015311:	77 10                	ja     c0015323 <Sys::write(regs*)+0x30>
c0015313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001531b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015321:	eb 1b                	jmp    c001533e <Sys::write(regs*)+0x4b>
c0015323:	83 ec 0c             	sub    esp,0xc
c0015326:	68 52 14 02 c0       	push   0xc0021452
c001532b:	e8 95 99 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015330:	58                   	pop    eax
c0015331:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015334:	e8 ae 88 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	89 c1                	mov    ecx,eax
c001533e:	83 c8 ff             	or     eax,0xffffffff
c0015341:	85 c9                	test   ecx,ecx
c0015343:	89 c2                	mov    edx,eax
c0015345:	74 28                	je     c001536f <Sys::write(regs*)+0x7c>
c0015347:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001534f:	31 ff                	xor    edi,edi
c0015351:	83 ec 0c             	sub    esp,0xc
c0015354:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015356:	8d 54 24 18          	lea    edx,[esp+0x18]
c001535a:	52                   	push   edx
c001535b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001535e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015361:	57                   	push   edi
c0015362:	56                   	push   esi
c0015363:	51                   	push   ecx
c0015364:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001536b:	83 c4 20             	add    esp,0x20
c001536e:	99                   	cdq    
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	5b                   	pop    ebx
c0015373:	5e                   	pop    esi
c0015374:	5f                   	pop    edi
c0015375:	c3                   	ret    

c0015376 <Sys::yield(regs*)>:
c0015376:	83 ec 0c             	sub    esp,0xc
c0015379:	e8 f2 24 00 00       	call   c0017870 <lockScheduler()>
c001537e:	e8 21 28 00 00       	call   c0017ba4 <schedule()>
c0015383:	e8 ea 24 00 00       	call   c0017872 <unlockScheduler()>
c0015388:	31 c0                	xor    eax,eax
c001538a:	31 d2                	xor    edx,edx
c001538c:	83 c4 0c             	add    esp,0xc
c001538f:	c3                   	ret    

c0015390 <sysCallGetPID(regs*)>:
c0015390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015395:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015398:	8b 00                	mov    eax,DWORD PTR [eax]
c001539a:	99                   	cdq    
c001539b:	c3                   	ret    

c001539c <sysCallSeekDir(regs*)>:
c001539c:	31 c0                	xor    eax,eax
c001539e:	31 d2                	xor    edx,edx
c00153a0:	c3                   	ret    

c00153a1 <sysCallTellDir(regs*)>:
c00153a1:	31 c0                	xor    eax,eax
c00153a3:	31 d2                	xor    edx,edx
c00153a5:	c3                   	ret    

c00153a6 <sysCallVerify(regs*)>:
c00153a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153aa:	31 d2                	xor    edx,edx
c00153ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153af:	c3                   	ret    

c00153b0 <sysCallFork(regs*)>:
c00153b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00153b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00153ba:	c3                   	ret    

c00153bb <sysCallExecve(regs*)>:
c00153bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00153c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00153c5:	c3                   	ret    

c00153c6 <sysCallGetArgc(regs*)>:
c00153c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ce:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00153d4:	99                   	cdq    
c00153d5:	c3                   	ret    

c00153d6 <sysFormatDisk(regs*)>:
c00153d6:	56                   	push   esi
c00153d7:	53                   	push   ebx
c00153d8:	53                   	push   ebx
c00153d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153dd:	8b 1d c8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232c8
c00153e3:	eb 25                	jmp    c001540a <sysFormatDisk(regs*)+0x34>
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00153eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00153ed:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00153f0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00153f3:	50                   	push   eax
c00153f4:	ff 34 85 60 37 02 c0 	push   DWORD PTR [eax*4-0x3ffdc8a0]
c00153fb:	53                   	push   ebx
c00153fc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00153ff:	83 c4 20             	add    esp,0x20
c0015402:	83 f8 08             	cmp    eax,0x8
c0015405:	75 12                	jne    c0015419 <sysFormatDisk(regs*)+0x43>
c0015407:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001540a:	85 db                	test   ebx,ebx
c001540c:	75 d7                	jne    c00153e5 <sysFormatDisk(regs*)+0xf>
c001540e:	59                   	pop    ecx
c001540f:	b8 03 00 00 00       	mov    eax,0x3
c0015414:	31 d2                	xor    edx,edx
c0015416:	5b                   	pop    ebx
c0015417:	5e                   	pop    esi
c0015418:	c3                   	ret    
c0015419:	85 c0                	test   eax,eax
c001541b:	74 1b                	je     c0015438 <sysFormatDisk(regs*)+0x62>
c001541d:	83 f8 09             	cmp    eax,0x9
c0015420:	74 0b                	je     c001542d <sysFormatDisk(regs*)+0x57>
c0015422:	59                   	pop    ecx
c0015423:	b8 02 00 00 00       	mov    eax,0x2
c0015428:	31 d2                	xor    edx,edx
c001542a:	5b                   	pop    ebx
c001542b:	5e                   	pop    esi
c001542c:	c3                   	ret    
c001542d:	59                   	pop    ecx
c001542e:	b8 01 00 00 00       	mov    eax,0x1
c0015433:	31 d2                	xor    edx,edx
c0015435:	5b                   	pop    ebx
c0015436:	5e                   	pop    esi
c0015437:	c3                   	ret    
c0015438:	59                   	pop    ecx
c0015439:	31 c0                	xor    eax,eax
c001543b:	31 d2                	xor    edx,edx
c001543d:	5b                   	pop    ebx
c001543e:	5e                   	pop    esi
c001543f:	c3                   	ret    

c0015440 <sysSetDiskVolumeLabel(regs*)>:
c0015440:	56                   	push   esi
c0015441:	53                   	push   ebx
c0015442:	53                   	push   ebx
c0015443:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015447:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001544a:	83 f8 19             	cmp    eax,0x19
c001544d:	77 29                	ja     c0015478 <sysSetDiskVolumeLabel(regs*)+0x38>
c001544f:	8b 0c 85 60 37 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc8a0]
c0015456:	85 c9                	test   ecx,ecx
c0015458:	74 1e                	je     c0015478 <sysSetDiskVolumeLabel(regs*)+0x38>
c001545a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001545d:	85 d2                	test   edx,edx
c001545f:	74 17                	je     c0015478 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015461:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015467:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015469:	52                   	push   edx
c001546a:	50                   	push   eax
c001546b:	51                   	push   ecx
c001546c:	53                   	push   ebx
c001546d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	99                   	cdq    
c0015474:	59                   	pop    ecx
c0015475:	5b                   	pop    ebx
c0015476:	5e                   	pop    esi
c0015477:	c3                   	ret    
c0015478:	59                   	pop    ecx
c0015479:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001547e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015483:	5b                   	pop    ebx
c0015484:	5e                   	pop    esi
c0015485:	c3                   	ret    

c0015486 <sysGetDiskVolumeLabel(regs*)>:
c0015486:	57                   	push   edi
c0015487:	56                   	push   esi
c0015488:	53                   	push   ebx
c0015489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001548d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015490:	83 fa 19             	cmp    edx,0x19
c0015493:	77 34                	ja     c00154c9 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015495:	8b 0c 95 60 37 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc8a0]
c001549c:	85 c9                	test   ecx,ecx
c001549e:	74 29                	je     c00154c9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00154a0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00154a3:	85 db                	test   ebx,ebx
c00154a5:	74 22                	je     c00154c9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00154a7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154aa:	85 c0                	test   eax,eax
c00154ac:	74 1b                	je     c00154c9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00154ae:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00154b9:	50                   	push   eax
c00154ba:	53                   	push   ebx
c00154bb:	52                   	push   edx
c00154bc:	51                   	push   ecx
c00154bd:	56                   	push   esi
c00154be:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00154c1:	83 c4 20             	add    esp,0x20
c00154c4:	99                   	cdq    
c00154c5:	5b                   	pop    ebx
c00154c6:	5e                   	pop    esi
c00154c7:	5f                   	pop    edi
c00154c8:	c3                   	ret    
c00154c9:	5b                   	pop    ebx
c00154ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00154cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00154d4:	5e                   	pop    esi
c00154d5:	5f                   	pop    edi
c00154d6:	c3                   	ret    

c00154d7 <sysShutdown(regs*)>:
c00154d7:	83 ec 0c             	sub    esp,0xc
c00154da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154e1:	85 c0                	test   eax,eax
c00154e3:	74 18                	je     c00154fd <sysShutdown(regs*)+0x26>
c00154e5:	83 f8 01             	cmp    eax,0x1
c00154e8:	74 38                	je     c0015522 <sysShutdown(regs*)+0x4b>
c00154ea:	83 f8 02             	cmp    eax,0x2
c00154ed:	74 24                	je     c0015513 <sysShutdown(regs*)+0x3c>
c00154ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00154f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00154f9:	83 c4 0c             	add    esp,0xc
c00154fc:	c3                   	ret    
c00154fd:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0015502:	8b 10                	mov    edx,DWORD PTR [eax]
c0015504:	6a 00                	push   0x0
c0015506:	6a 00                	push   0x0
c0015508:	6a 00                	push   0x0
c001550a:	50                   	push   eax
c001550b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	eb dc                	jmp    c00154ef <sysShutdown(regs*)+0x18>
c0015513:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0015518:	8b 10                	mov    edx,DWORD PTR [eax]
c001551a:	6a 00                	push   0x0
c001551c:	6a 00                	push   0x0
c001551e:	6a 01                	push   0x1
c0015520:	eb e8                	jmp    c001550a <sysShutdown(regs*)+0x33>
c0015522:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c0015527:	85 c0                	test   eax,eax
c0015529:	74 02                	je     c001552d <sysShutdown(regs*)+0x56>
c001552b:	ff d0                	call   eax
c001552d:	31 c0                	xor    eax,eax
c001552f:	31 d2                	xor    edx,edx
c0015531:	83 c4 0c             	add    esp,0xc
c0015534:	c3                   	ret    

c0015535 <sysCallGetCwd(regs*)>:
c0015535:	83 ec 10             	sub    esp,0x10
c0015538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001553c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001553f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015547:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001554a:	e8 16 a0 ff ff       	call   c000f565 <getcwd(Process*, char*, int)>
c001554f:	83 c4 1c             	add    esp,0x1c
c0015552:	99                   	cdq    
c0015553:	c3                   	ret    

c0015554 <sysCallSetCwd(regs*)>:
c0015554:	83 ec 14             	sub    esp,0x14
c0015557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001555b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001555e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015563:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015566:	e8 24 a0 ff ff       	call   c000f58f <setcwd(Process*, char*)>
c001556b:	83 c4 1c             	add    esp,0x1c
c001556e:	99                   	cdq    
c001556f:	c3                   	ret    

c0015570 <sysCallRealpath(regs*)>:
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015577:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001557a:	85 d2                	test   edx,edx
c001557c:	74 07                	je     c0015585 <sysCallRealpath(regs*)+0x15>
c001557e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015581:	85 c0                	test   eax,eax
c0015583:	75 0b                	jne    c0015590 <sysCallRealpath(regs*)+0x20>
c0015585:	b8 01 00 00 00       	mov    eax,0x1
c001558a:	31 d2                	xor    edx,edx
c001558c:	83 c4 0c             	add    esp,0xc
c001558f:	c3                   	ret    
c0015590:	51                   	push   ecx
c0015591:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015597:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001559a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00155a0:	51                   	push   ecx
c00155a1:	52                   	push   edx
c00155a2:	50                   	push   eax
c00155a3:	e8 a2 9a ff ff       	call   c000f04a <standardiseFiles(char*, char const*, char const*)>
c00155a8:	83 c4 10             	add    esp,0x10
c00155ab:	31 c0                	xor    eax,eax
c00155ad:	31 d2                	xor    edx,edx
c00155af:	83 c4 0c             	add    esp,0xc
c00155b2:	c3                   	ret    

c00155b3 <sysCallReadDir(regs*)>:
c00155b3:	53                   	push   ebx
c00155b4:	83 ec 18             	sub    esp,0x18
c00155b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00155be:	83 f8 02             	cmp    eax,0x2
c00155c1:	76 53                	jbe    c0015616 <sysCallReadDir(regs*)+0x63>
c00155c3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00155c6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00155cc:	77 4f                	ja     c001561d <sysCallReadDir(regs*)+0x6a>
c00155ce:	83 ec 0c             	sub    esp,0xc
c00155d1:	50                   	push   eax
c00155d2:	e8 10 86 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	85 c0                	test   eax,eax
c00155dc:	74 50                	je     c001562e <sysCallReadDir(regs*)+0x7b>
c00155de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155e6:	83 ec 0c             	sub    esp,0xc
c00155e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00155eb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00155ef:	51                   	push   ecx
c00155f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155f3:	6a 00                	push   0x0
c00155f5:	68 10 01 00 00       	push   0x110
c00155fa:	50                   	push   eax
c00155fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155fe:	83 c4 20             	add    esp,0x20
c0015601:	85 c0                	test   eax,eax
c0015603:	74 38                	je     c001563d <sysCallReadDir(regs*)+0x8a>
c0015605:	83 f8 07             	cmp    eax,0x7
c0015608:	74 0c                	je     c0015616 <sysCallReadDir(regs*)+0x63>
c001560a:	b8 02 00 00 00       	mov    eax,0x2
c001560f:	31 d2                	xor    edx,edx
c0015611:	83 c4 18             	add    esp,0x18
c0015614:	5b                   	pop    ebx
c0015615:	c3                   	ret    
c0015616:	b8 01 00 00 00       	mov    eax,0x1
c001561b:	eb f2                	jmp    c001560f <sysCallReadDir(regs*)+0x5c>
c001561d:	83 ec 08             	sub    esp,0x8
c0015620:	52                   	push   edx
c0015621:	68 74 14 02 c0       	push   0xc0021474
c0015626:	e8 9a 96 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015633:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015638:	83 c4 18             	add    esp,0x18
c001563b:	5b                   	pop    ebx
c001563c:	c3                   	ret    
c001563d:	31 c0                	xor    eax,eax
c001563f:	eb ce                	jmp    c001560f <sysCallReadDir(regs*)+0x5c>

c0015641 <sysCallIsATTY(regs*)>:
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015648:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001564b:	83 f8 02             	cmp    eax,0x2
c001564e:	76 07                	jbe    c0015657 <sysCallIsATTY(regs*)+0x16>
c0015650:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015655:	75 26                	jne    c001567d <sysCallIsATTY(regs*)+0x3c>
c0015657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001565c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001565f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015665:	85 c0                	test   eax,eax
c0015667:	74 24                	je     c001568d <sysCallIsATTY(regs*)+0x4c>
c0015669:	83 ec 0c             	sub    esp,0xc
c001566c:	8b 10                	mov    edx,DWORD PTR [eax]
c001566e:	50                   	push   eax
c001566f:	ff 12                	call   DWORD PTR [edx]
c0015671:	31 d2                	xor    edx,edx
c0015673:	0f b6 c0             	movzx  eax,al
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	83 c4 0c             	add    esp,0xc
c001567c:	c3                   	ret    
c001567d:	83 ec 0c             	sub    esp,0xc
c0015680:	50                   	push   eax
c0015681:	e8 61 85 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	85 c0                	test   eax,eax
c001568b:	75 dc                	jne    c0015669 <sysCallIsATTY(regs*)+0x28>
c001568d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015692:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015697:	83 c4 0c             	add    esp,0xc
c001569a:	c3                   	ret    

c001569b <sysCallSeek(regs*)>:
c001569b:	53                   	push   ebx
c001569c:	83 ec 08             	sub    esp,0x8
c001569f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00156a6:	83 f8 02             	cmp    eax,0x2
c00156a9:	76 4a                	jbe    c00156f5 <sysCallSeek(regs*)+0x5a>
c00156ab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00156b0:	77 32                	ja     c00156e4 <sysCallSeek(regs*)+0x49>
c00156b2:	83 ec 0c             	sub    esp,0xc
c00156b5:	50                   	push   eax
c00156b6:	e8 2c 85 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c00156bb:	83 c4 0c             	add    esp,0xc
c00156be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00156c1:	31 db                	xor    ebx,ebx
c00156c3:	53                   	push   ebx
c00156c4:	51                   	push   ecx
c00156c5:	50                   	push   eax
c00156c6:	e8 4b 9c ff ff       	call   c000f316 <File::seek(unsigned long long)>
c00156cb:	83 c4 10             	add    esp,0x10
c00156ce:	85 c0                	test   eax,eax
c00156d0:	0f 95 c0             	setne  al
c00156d3:	31 d2                	xor    edx,edx
c00156d5:	0f b6 c0             	movzx  eax,al
c00156d8:	f7 d8                	neg    eax
c00156da:	83 d2 00             	adc    edx,0x0
c00156dd:	83 c4 08             	add    esp,0x8
c00156e0:	f7 da                	neg    edx
c00156e2:	5b                   	pop    ebx
c00156e3:	c3                   	ret    
c00156e4:	83 ec 08             	sub    esp,0x8
c00156e7:	50                   	push   eax
c00156e8:	68 30 15 02 c0       	push   0xc0021530
c00156ed:	e8 d3 95 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00156f2:	83 c4 10             	add    esp,0x10
c00156f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156ff:	83 c4 08             	add    esp,0x8
c0015702:	5b                   	pop    ebx
c0015703:	c3                   	ret    

c0015704 <sysCallTell(regs*)>:
c0015704:	53                   	push   ebx
c0015705:	83 ec 08             	sub    esp,0x8
c0015708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001570c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001570f:	83 f8 02             	cmp    eax,0x2
c0015712:	76 5e                	jbe    c0015772 <sysCallTell(regs*)+0x6e>
c0015714:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015719:	77 2d                	ja     c0015748 <sysCallTell(regs*)+0x44>
c001571b:	83 ec 0c             	sub    esp,0xc
c001571e:	50                   	push   eax
c001571f:	e8 c3 84 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015724:	5a                   	pop    edx
c0015725:	59                   	pop    ecx
c0015726:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015729:	50                   	push   eax
c001572a:	e8 3d 9c ff ff       	call   c000f36c <File::tell(unsigned long long*)>
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	85 c0                	test   eax,eax
c0015734:	0f 95 c0             	setne  al
c0015737:	31 d2                	xor    edx,edx
c0015739:	0f b6 c0             	movzx  eax,al
c001573c:	f7 d8                	neg    eax
c001573e:	83 d2 00             	adc    edx,0x0
c0015741:	83 c4 08             	add    esp,0x8
c0015744:	f7 da                	neg    edx
c0015746:	5b                   	pop    ebx
c0015747:	c3                   	ret    
c0015748:	83 ec 08             	sub    esp,0x8
c001574b:	50                   	push   eax
c001574c:	68 4a 15 02 c0       	push   0xc002154a
c0015751:	e8 6f 95 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015756:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015762:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015769:	31 d2                	xor    edx,edx
c001576b:	31 c0                	xor    eax,eax
c001576d:	83 c4 08             	add    esp,0x8
c0015770:	5b                   	pop    ebx
c0015771:	c3                   	ret    
c0015772:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015777:	ba ff ff ff ff       	mov    edx,0xffffffff
c001577c:	83 c4 08             	add    esp,0x8
c001577f:	5b                   	pop    ebx
c0015780:	c3                   	ret    

c0015781 <sysCallSizeFromFilename(regs*)>:
c0015781:	57                   	push   edi
c0015782:	56                   	push   esi
c0015783:	53                   	push   ebx
c0015784:	83 ec 10             	sub    esp,0x10
c0015787:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001578b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001578e:	83 fb 02             	cmp    ebx,0x2
c0015791:	0f 86 8a 00 00 00    	jbe    c0015821 <sysCallSizeFromFilename(regs*)+0xa0>
c0015797:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001579d:	77 56                	ja     c00157f5 <sysCallSizeFromFilename(regs*)+0x74>
c001579f:	83 ec 0c             	sub    esp,0xc
c00157a2:	68 14 01 00 00       	push   0x114
c00157a7:	e8 2a 94 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00157ac:	83 c4 0c             	add    esp,0xc
c00157af:	89 c7                	mov    edi,eax
c00157b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00157b9:	53                   	push   ebx
c00157ba:	57                   	push   edi
c00157bb:	e8 34 9a ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c00157c0:	83 c4 0c             	add    esp,0xc
c00157c3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00157c7:	50                   	push   eax
c00157c8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00157cb:	57                   	push   edi
c00157cc:	e8 33 9d ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c00157d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157d4:	89 c3                	mov    ebx,eax
c00157d6:	8b 07                	mov    eax,DWORD PTR [edi]
c00157d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157db:	83 c4 10             	add    esp,0x10
c00157de:	31 c0                	xor    eax,eax
c00157e0:	85 db                	test   ebx,ebx
c00157e2:	0f 95 c0             	setne  al
c00157e5:	31 d2                	xor    edx,edx
c00157e7:	f7 d8                	neg    eax
c00157e9:	83 d2 00             	adc    edx,0x0
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	f7 da                	neg    edx
c00157f1:	5b                   	pop    ebx
c00157f2:	5e                   	pop    esi
c00157f3:	5f                   	pop    edi
c00157f4:	c3                   	ret    
c00157f5:	83 ec 08             	sub    esp,0x8
c00157f8:	53                   	push   ebx
c00157f9:	68 64 15 02 c0       	push   0xc0021564
c00157fe:	e8 c2 94 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015803:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001580f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015816:	31 d2                	xor    edx,edx
c0015818:	83 c4 10             	add    esp,0x10
c001581b:	31 c0                	xor    eax,eax
c001581d:	5b                   	pop    ebx
c001581e:	5e                   	pop    esi
c001581f:	5f                   	pop    edi
c0015820:	c3                   	ret    
c0015821:	83 c4 10             	add    esp,0x10
c0015824:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015829:	5b                   	pop    ebx
c001582a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001582f:	5e                   	pop    esi
c0015830:	5f                   	pop    edi
c0015831:	c3                   	ret    

c0015832 <sysCallSize(regs*)>:
c0015832:	53                   	push   ebx
c0015833:	83 ec 18             	sub    esp,0x18
c0015836:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001583a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001583d:	83 f8 02             	cmp    eax,0x2
c0015840:	76 64                	jbe    c00158a6 <sysCallSize(regs*)+0x74>
c0015842:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015847:	77 33                	ja     c001587c <sysCallSize(regs*)+0x4a>
c0015849:	83 ec 0c             	sub    esp,0xc
c001584c:	50                   	push   eax
c001584d:	e8 95 83 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015852:	83 c4 0c             	add    esp,0xc
c0015855:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015859:	52                   	push   edx
c001585a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001585d:	50                   	push   eax
c001585e:	e8 a1 9c ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c0015863:	83 c4 10             	add    esp,0x10
c0015866:	85 c0                	test   eax,eax
c0015868:	0f 95 c0             	setne  al
c001586b:	31 d2                	xor    edx,edx
c001586d:	0f b6 c0             	movzx  eax,al
c0015870:	f7 d8                	neg    eax
c0015872:	83 d2 00             	adc    edx,0x0
c0015875:	83 c4 18             	add    esp,0x18
c0015878:	f7 da                	neg    edx
c001587a:	5b                   	pop    ebx
c001587b:	c3                   	ret    
c001587c:	83 ec 08             	sub    esp,0x8
c001587f:	50                   	push   eax
c0015880:	68 64 15 02 c0       	push   0xc0021564
c0015885:	e8 3b 94 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001588a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015896:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001589d:	31 d2                	xor    edx,edx
c001589f:	31 c0                	xor    eax,eax
c00158a1:	83 c4 18             	add    esp,0x18
c00158a4:	5b                   	pop    ebx
c00158a5:	c3                   	ret    
c00158a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158b0:	83 c4 18             	add    esp,0x18
c00158b3:	5b                   	pop    ebx
c00158b4:	c3                   	ret    

c00158b5 <sysCallClose(regs*)>:
c00158b5:	53                   	push   ebx
c00158b6:	83 ec 08             	sub    esp,0x8
c00158b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158c0:	83 f8 02             	cmp    eax,0x2
c00158c3:	76 50                	jbe    c0015915 <sysCallClose(regs*)+0x60>
c00158c5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00158ca:	74 58                	je     c0015924 <sysCallClose(regs*)+0x6f>
c00158cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158d1:	74 60                	je     c0015933 <sysCallClose(regs*)+0x7e>
c00158d3:	77 2f                	ja     c0015904 <sysCallClose(regs*)+0x4f>
c00158d5:	83 ec 0c             	sub    esp,0xc
c00158d8:	50                   	push   eax
c00158d9:	e8 09 83 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c00158de:	89 c3                	mov    ebx,eax
c00158e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00158e3:	e8 ce 99 ff ff       	call   c000f2b6 <File::close()>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	85 db                	test   ebx,ebx
c00158ed:	74 0c                	je     c00158fb <sysCallClose(regs*)+0x46>
c00158ef:	83 ec 0c             	sub    esp,0xc
c00158f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158f4:	53                   	push   ebx
c00158f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	31 c0                	xor    eax,eax
c00158fd:	31 d2                	xor    edx,edx
c00158ff:	83 c4 08             	add    esp,0x8
c0015902:	5b                   	pop    ebx
c0015903:	c3                   	ret    
c0015904:	83 ec 08             	sub    esp,0x8
c0015907:	50                   	push   eax
c0015908:	68 98 14 02 c0       	push   0xc0021498
c001590d:	e8 b3 93 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001591a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001591f:	83 c4 08             	add    esp,0x8
c0015922:	5b                   	pop    ebx
c0015923:	c3                   	ret    
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	68 7f 15 02 c0       	push   0xc002157f
c001592c:	e8 94 93 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015931:	eb c5                	jmp    c00158f8 <sysCallClose(regs*)+0x43>
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	68 8d 15 02 c0       	push   0xc002158d
c001593b:	eb ef                	jmp    c001592c <sysCallClose(regs*)+0x77>

c001593d <sysCallOpenDir(regs*)>:
c001593d:	56                   	push   esi
c001593e:	53                   	push   ebx
c001593f:	53                   	push   ebx
c0015940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015944:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015947:	85 f6                	test   esi,esi
c0015949:	74 51                	je     c001599c <sysCallOpenDir(regs*)+0x5f>
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	68 14 01 00 00       	push   0x114
c0015953:	e8 7e 92 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015958:	83 c4 0c             	add    esp,0xc
c001595b:	89 c6                	mov    esi,eax
c001595d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015962:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015965:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015968:	56                   	push   esi
c0015969:	e8 48 9d ff ff       	call   c000f6b6 <Directory::Directory(char const*, Process*)>
c001596e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015971:	e8 a4 9d ff ff       	call   c000f71a <Directory::open()>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	85 c0                	test   eax,eax
c001597b:	75 1f                	jne    c001599c <sysCallOpenDir(regs*)+0x5f>
c001597d:	83 ec 0c             	sub    esp,0xc
c0015980:	56                   	push   esi
c0015981:	e8 ac 7f ff ff       	call   c000d932 <UnixFile::getFileDescriptor()>
c0015986:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	89 02                	mov    DWORD PTR [edx],eax
c001598e:	c1 f8 1f             	sar    eax,0x1f
c0015991:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015994:	31 c0                	xor    eax,eax
c0015996:	59                   	pop    ecx
c0015997:	31 d2                	xor    edx,edx
c0015999:	5b                   	pop    ebx
c001599a:	5e                   	pop    esi
c001599b:	c3                   	ret    
c001599c:	59                   	pop    ecx
c001599d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159a7:	5b                   	pop    ebx
c00159a8:	5e                   	pop    esi
c00159a9:	c3                   	ret    

c00159aa <sysCallMakeDir(regs*)>:
c00159aa:	56                   	push   esi
c00159ab:	53                   	push   ebx
c00159ac:	83 ec 10             	sub    esp,0x10
c00159af:	68 14 01 00 00       	push   0x114
c00159b4:	e8 1d 92 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00159b9:	83 c4 0c             	add    esp,0xc
c00159bc:	89 c3                	mov    ebx,eax
c00159be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00159c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159ca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00159cd:	53                   	push   ebx
c00159ce:	e8 e3 9c ff ff       	call   c000f6b6 <Directory::Directory(char const*, Process*)>
c00159d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159d6:	e8 1f 9f ff ff       	call   c000f8fa <Directory::create()>
c00159db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159de:	89 c6                	mov    esi,eax
c00159e0:	e8 91 9d ff ff       	call   c000f776 <Directory::close()>
c00159e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ed:	31 c0                	xor    eax,eax
c00159ef:	85 f6                	test   esi,esi
c00159f1:	0f 95 c0             	setne  al
c00159f4:	31 d2                	xor    edx,edx
c00159f6:	f7 d8                	neg    eax
c00159f8:	83 d2 00             	adc    edx,0x0
c00159fb:	83 c4 14             	add    esp,0x14
c00159fe:	f7 da                	neg    edx
c0015a00:	5b                   	pop    ebx
c0015a01:	5e                   	pop    esi
c0015a02:	c3                   	ret    

c0015a03 <sysCallCloseDir(regs*)>:
c0015a03:	53                   	push   ebx
c0015a04:	83 ec 08             	sub    esp,0x8
c0015a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a0e:	83 f8 02             	cmp    eax,0x2
c0015a11:	76 47                	jbe    c0015a5a <sysCallCloseDir(regs*)+0x57>
c0015a13:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a18:	77 2f                	ja     c0015a49 <sysCallCloseDir(regs*)+0x46>
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	50                   	push   eax
c0015a1e:	e8 c4 81 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015a23:	89 c3                	mov    ebx,eax
c0015a25:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a28:	e8 49 9d ff ff       	call   c000f776 <Directory::close()>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	85 db                	test   ebx,ebx
c0015a32:	74 0c                	je     c0015a40 <sysCallCloseDir(regs*)+0x3d>
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a39:	53                   	push   ebx
c0015a3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	31 c0                	xor    eax,eax
c0015a42:	31 d2                	xor    edx,edx
c0015a44:	83 c4 08             	add    esp,0x8
c0015a47:	5b                   	pop    ebx
c0015a48:	c3                   	ret    
c0015a49:	83 ec 08             	sub    esp,0x8
c0015a4c:	50                   	push   eax
c0015a4d:	68 c0 14 02 c0       	push   0xc00214c0
c0015a52:	e8 6e 92 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a64:	83 c4 08             	add    esp,0x8
c0015a67:	5b                   	pop    ebx
c0015a68:	c3                   	ret    

c0015a69 <sysCallWait(regs*)>:
c0015a69:	83 ec 10             	sub    esp,0x10
c0015a6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a70:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015a73:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a76:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015a79:	e8 a1 22 00 00       	call   c0017d1f <waitTask(int, int*, int)>
c0015a7e:	83 c4 1c             	add    esp,0x1c
c0015a81:	99                   	cdq    
c0015a82:	c3                   	ret    

c0015a83 <sysCallRmdir(regs*)>:
c0015a83:	56                   	push   esi
c0015a84:	53                   	push   ebx
c0015a85:	83 ec 10             	sub    esp,0x10
c0015a88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a8c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015a8f:	68 14 01 00 00       	push   0x114
c0015a94:	e8 3d 91 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015a99:	83 c4 0c             	add    esp,0xc
c0015a9c:	89 c3                	mov    ebx,eax
c0015a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015aa6:	56                   	push   esi
c0015aa7:	53                   	push   ebx
c0015aa8:	e8 47 97 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0015aad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab0:	e8 1b 99 ff ff       	call   c000f3d0 <File::unlink()>
c0015ab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab8:	89 c6                	mov    esi,eax
c0015aba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015abc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015abf:	31 c0                	xor    eax,eax
c0015ac1:	85 f6                	test   esi,esi
c0015ac3:	0f 95 c0             	setne  al
c0015ac6:	31 d2                	xor    edx,edx
c0015ac8:	f7 d8                	neg    eax
c0015aca:	83 d2 00             	adc    edx,0x0
c0015acd:	83 c4 14             	add    esp,0x14
c0015ad0:	f7 da                	neg    edx
c0015ad2:	5b                   	pop    ebx
c0015ad3:	5e                   	pop    esi
c0015ad4:	c3                   	ret    

c0015ad5 <sysCallUnlink(regs*)>:
c0015ad5:	56                   	push   esi
c0015ad6:	53                   	push   ebx
c0015ad7:	83 ec 10             	sub    esp,0x10
c0015ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ade:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015ae1:	68 14 01 00 00       	push   0x114
c0015ae6:	e8 eb 90 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015aeb:	83 c4 0c             	add    esp,0xc
c0015aee:	89 c3                	mov    ebx,eax
c0015af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015af5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015af8:	56                   	push   esi
c0015af9:	53                   	push   ebx
c0015afa:	e8 f5 96 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0015aff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b02:	e8 c9 98 ff ff       	call   c000f3d0 <File::unlink()>
c0015b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b0a:	89 c6                	mov    esi,eax
c0015b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b11:	31 c0                	xor    eax,eax
c0015b13:	85 f6                	test   esi,esi
c0015b15:	0f 95 c0             	setne  al
c0015b18:	31 d2                	xor    edx,edx
c0015b1a:	f7 d8                	neg    eax
c0015b1c:	83 d2 00             	adc    edx,0x0
c0015b1f:	83 c4 14             	add    esp,0x14
c0015b22:	f7 da                	neg    edx
c0015b24:	5b                   	pop    ebx
c0015b25:	5e                   	pop    esi
c0015b26:	c3                   	ret    

c0015b27 <sysCallGetArgv(regs*)>:
c0015b27:	83 ec 0c             	sub    esp,0xc
c0015b2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b2e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b31:	85 c0                	test   eax,eax
c0015b33:	78 2b                	js     c0015b60 <sysCallGetArgv(regs*)+0x39>
c0015b35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b3b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015b3e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015b44:	7d 1a                	jge    c0015b60 <sysCallGetArgv(regs*)+0x39>
c0015b46:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015b4d:	85 c0                	test   eax,eax
c0015b4f:	74 17                	je     c0015b68 <sysCallGetArgv(regs*)+0x41>
c0015b51:	83 ec 08             	sub    esp,0x8
c0015b54:	50                   	push   eax
c0015b55:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015b58:	e8 4a ab fe ff       	call   c00006a7 <strcpy>
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	31 c0                	xor    eax,eax
c0015b62:	31 d2                	xor    edx,edx
c0015b64:	83 c4 0c             	add    esp,0xc
c0015b67:	c3                   	ret    
c0015b68:	b8 01 00 00 00       	mov    eax,0x1
c0015b6d:	31 d2                	xor    edx,edx
c0015b6f:	83 c4 0c             	add    esp,0xc
c0015b72:	c3                   	ret    

c0015b73 <sysCallTTYName(regs*)>:
c0015b73:	56                   	push   esi
c0015b74:	53                   	push   ebx
c0015b75:	53                   	push   ebx
c0015b76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b7a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015b7d:	85 c0                	test   eax,eax
c0015b7f:	74 5f                	je     c0015be0 <sysCallTTYName(regs*)+0x6d>
c0015b81:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b84:	83 f8 02             	cmp    eax,0x2
c0015b87:	77 3e                	ja     c0015bc7 <sysCallTTYName(regs*)+0x54>
c0015b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b91:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b97:	85 db                	test   ebx,ebx
c0015b99:	74 45                	je     c0015be0 <sysCallTTYName(regs*)+0x6d>
c0015b9b:	83 ec 0c             	sub    esp,0xc
c0015b9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ba0:	53                   	push   ebx
c0015ba1:	ff 10                	call   DWORD PTR [eax]
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	84 c0                	test   al,al
c0015ba8:	74 41                	je     c0015beb <sysCallTTYName(regs*)+0x78>
c0015baa:	83 ec 08             	sub    esp,0x8
c0015bad:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015bb3:	53                   	push   ebx
c0015bb4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015bb7:	e8 eb aa fe ff       	call   c00006a7 <strcpy>
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	31 c0                	xor    eax,eax
c0015bc1:	59                   	pop    ecx
c0015bc2:	31 d2                	xor    edx,edx
c0015bc4:	5b                   	pop    ebx
c0015bc5:	5e                   	pop    esi
c0015bc6:	c3                   	ret    
c0015bc7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015bcc:	74 bb                	je     c0015b89 <sysCallTTYName(regs*)+0x16>
c0015bce:	83 ec 0c             	sub    esp,0xc
c0015bd1:	50                   	push   eax
c0015bd2:	e8 10 80 ff ff       	call   c000dbe7 <getFromFileDescriptor(int)>
c0015bd7:	83 c4 10             	add    esp,0x10
c0015bda:	89 c3                	mov    ebx,eax
c0015bdc:	85 db                	test   ebx,ebx
c0015bde:	75 bb                	jne    c0015b9b <sysCallTTYName(regs*)+0x28>
c0015be0:	59                   	pop    ecx
c0015be1:	b8 01 00 00 00       	mov    eax,0x1
c0015be6:	31 d2                	xor    edx,edx
c0015be8:	5b                   	pop    ebx
c0015be9:	5e                   	pop    esi
c0015bea:	c3                   	ret    
c0015beb:	59                   	pop    ecx
c0015bec:	b8 02 00 00 00       	mov    eax,0x2
c0015bf1:	31 d2                	xor    edx,edx
c0015bf3:	5b                   	pop    ebx
c0015bf4:	5e                   	pop    esi
c0015bf5:	c3                   	ret    

c0015bf6 <sysCallGetEnv(regs*)>:
c0015bf6:	57                   	push   edi
c0015bf7:	56                   	push   esi
c0015bf8:	53                   	push   ebx
c0015bf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bfd:	83 ec 0c             	sub    esp,0xc
c0015c00:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015c03:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015c06:	68 9b 15 02 c0       	push   0xc002159b
c0015c0b:	e8 b5 90 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	85 f6                	test   esi,esi
c0015c15:	74 0e                	je     c0015c25 <sysCallGetEnv(regs*)+0x2f>
c0015c17:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015c1a:	85 c0                	test   eax,eax
c0015c1c:	74 0f                	je     c0015c2d <sysCallGetEnv(regs*)+0x37>
c0015c1e:	85 ff                	test   edi,edi
c0015c20:	74 25                	je     c0015c47 <sysCallGetEnv(regs*)+0x51>
c0015c22:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c25:	5b                   	pop    ebx
c0015c26:	31 c0                	xor    eax,eax
c0015c28:	31 d2                	xor    edx,edx
c0015c2a:	5e                   	pop    esi
c0015c2b:	5f                   	pop    edi
c0015c2c:	c3                   	ret    
c0015c2d:	85 ff                	test   edi,edi
c0015c2f:	75 f4                	jne    c0015c25 <sysCallGetEnv(regs*)+0x2f>
c0015c31:	83 ec 0c             	sub    esp,0xc
c0015c34:	68 e4 14 02 c0       	push   0xc00214e4
c0015c39:	e8 e7 a9 fe ff       	call   c0000625 <strlen>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	31 d2                	xor    edx,edx
c0015c43:	5b                   	pop    ebx
c0015c44:	5e                   	pop    esi
c0015c45:	5f                   	pop    edi
c0015c46:	c3                   	ret    
c0015c47:	83 ec 08             	sub    esp,0x8
c0015c4a:	68 e4 14 02 c0       	push   0xc00214e4
c0015c4f:	56                   	push   esi
c0015c50:	e8 52 aa fe ff       	call   c00006a7 <strcpy>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	eb cb                	jmp    c0015c25 <sysCallGetEnv(regs*)+0x2f>

c0015c5a <sysCallUSleep(regs*)>:
c0015c5a:	83 ec 14             	sub    esp,0x14
c0015c5d:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015c62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c66:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015c6d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015c70:	01 ca                	add    edx,ecx
c0015c72:	52                   	push   edx
c0015c73:	50                   	push   eax
c0015c74:	e8 3f 21 00 00       	call   c0017db8 <nanoSleep(unsigned long long)>
c0015c79:	31 c0                	xor    eax,eax
c0015c7b:	31 d2                	xor    edx,edx
c0015c7d:	83 c4 1c             	add    esp,0x1c
c0015c80:	c3                   	ret    

c0015c81 <sysCallSpawn(regs*)>:
c0015c81:	56                   	push   esi
c0015c82:	53                   	push   ebx
c0015c83:	53                   	push   ebx
c0015c84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c88:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015c8b:	85 f6                	test   esi,esi
c0015c8d:	75 08                	jne    c0015c97 <sysCallSpawn(regs*)+0x16>
c0015c8f:	59                   	pop    ecx
c0015c90:	31 c0                	xor    eax,eax
c0015c92:	31 d2                	xor    edx,edx
c0015c94:	5b                   	pop    ebx
c0015c95:	5e                   	pop    esi
c0015c96:	c3                   	ret    
c0015c97:	83 ec 0c             	sub    esp,0xc
c0015c9a:	68 aa 15 02 c0       	push   0xc00215aa
c0015c9f:	e8 21 90 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015ca4:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015cab:	e8 26 8f ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015cb0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015cb3:	89 c6                	mov    esi,eax
c0015cb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cc0:	56                   	push   esi
c0015cc1:	e8 52 18 00 00       	call   c0017518 <Process::Process(char const*, Process*, char**)>
c0015cc6:	83 c4 20             	add    esp,0x20
c0015cc9:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015cd0:	75 bd                	jne    c0015c8f <sysCallSpawn(regs*)+0xe>
c0015cd2:	83 ec 0c             	sub    esp,0xc
c0015cd5:	68 b5 15 02 c0       	push   0xc00215b5
c0015cda:	e8 e6 8f ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015cdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ce2:	e8 97 1d 00 00       	call   c0017a7e <Process::createUserThread()>
c0015ce7:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ce9:	83 c4 10             	add    esp,0x10
c0015cec:	99                   	cdq    
c0015ced:	59                   	pop    ecx
c0015cee:	5b                   	pop    ebx
c0015cef:	5e                   	pop    esi
c0015cf0:	c3                   	ret    

c0015cf1 <sysAppSettings(regs*)>:
c0015cf1:	53                   	push   ebx
c0015cf2:	83 ec 08             	sub    esp,0x8
c0015cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015cfc:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015d02:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015d07:	66 3d c0 09          	cmp    ax,0x9c0
c0015d0b:	75 2f                	jne    c0015d3c <sysAppSettings(regs*)+0x4b>
c0015d0d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015d13:	83 e0 1f             	and    eax,0x1f
c0015d16:	3c 01                	cmp    al,0x1
c0015d18:	74 2e                	je     c0015d48 <sysAppSettings(regs*)+0x57>
c0015d1a:	3c 07                	cmp    al,0x7
c0015d1c:	0f 84 bd 00 00 00    	je     c0015ddf <sysAppSettings(regs*)+0xee>
c0015d22:	84 c0                	test   al,al
c0015d24:	0f 84 dc 00 00 00    	je     c0015e06 <sysAppSettings(regs*)+0x115>
c0015d2a:	3c 08                	cmp    al,0x8
c0015d2c:	74 6d                	je     c0015d9b <sysAppSettings(regs*)+0xaa>
c0015d2e:	0f b6 c0             	movzx  eax,al
c0015d31:	83 c4 08             	add    esp,0x8
c0015d34:	05 e8 03 00 00       	add    eax,0x3e8
c0015d39:	5b                   	pop    ebx
c0015d3a:	99                   	cdq    
c0015d3b:	c3                   	ret    
c0015d3c:	b8 01 00 00 00       	mov    eax,0x1
c0015d41:	31 d2                	xor    edx,edx
c0015d43:	83 c4 08             	add    esp,0x8
c0015d46:	5b                   	pop    ebx
c0015d47:	c3                   	ret    
c0015d48:	51                   	push   ecx
c0015d49:	68 00 01 00 00       	push   0x100
c0015d4e:	6a 00                	push   0x0
c0015d50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d58:	83 c0 0c             	add    eax,0xc
c0015d5b:	50                   	push   eax
c0015d5c:	e8 a7 a8 fe ff       	call   c0000608 <memset>
c0015d61:	83 c4 0c             	add    esp,0xc
c0015d64:	68 ff 00 00 00       	push   0xff
c0015d69:	53                   	push   ebx
c0015d6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d72:	83 c0 0c             	add    eax,0xc
c0015d75:	50                   	push   eax
c0015d76:	e8 57 a8 fe ff       	call   c00005d2 <memcpy>
c0015d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d80:	5b                   	pop    ebx
c0015d81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d84:	5a                   	pop    edx
c0015d85:	8d 50 0c             	lea    edx,[eax+0xc]
c0015d88:	52                   	push   edx
c0015d89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d8f:	e8 9c 6f ff ff       	call   c000cd30 <VgaText::setTitle(char*)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	31 c0                	xor    eax,eax
c0015d99:	eb a6                	jmp    c0015d41 <sysAppSettings(regs*)+0x50>
c0015d9b:	83 ec 08             	sub    esp,0x8
c0015d9e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015da4:	83 e0 0f             	and    eax,0xf
c0015da7:	50                   	push   eax
c0015da8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015db0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015db6:	e8 65 6f ff ff       	call   c000cd20 <VgaText::setTitleColour(VgaColour)>
c0015dbb:	58                   	pop    eax
c0015dbc:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015dc2:	5a                   	pop    edx
c0015dc3:	c1 e8 04             	shr    eax,0x4
c0015dc6:	83 e0 0f             	and    eax,0xf
c0015dc9:	50                   	push   eax
c0015dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015dd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015dd8:	e8 33 6f ff ff       	call   c000cd10 <VgaText::setTitleTextColour(VgaColour)>
c0015ddd:	eb b5                	jmp    c0015d94 <sysAppSettings(regs*)+0xa3>
c0015ddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015de7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015ded:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015df3:	c0 e8 06             	shr    al,0x6
c0015df6:	83 e0 01             	and    eax,0x1
c0015df9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015dff:	31 c0                	xor    eax,eax
c0015e01:	e9 3b ff ff ff       	jmp    c0015d41 <sysAppSettings(regs*)+0x50>
c0015e06:	b8 02 00 00 00       	mov    eax,0x2
c0015e0b:	e9 31 ff ff ff       	jmp    c0015d41 <sysAppSettings(regs*)+0x50>

c0015e10 <sysSetFatAttrib(regs*)>:
c0015e10:	57                   	push   edi
c0015e11:	56                   	push   esi
c0015e12:	53                   	push   ebx
c0015e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e17:	83 ec 0c             	sub    esp,0xc
c0015e1a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015e1d:	68 14 01 00 00       	push   0x114
c0015e22:	e8 af 8d ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015e27:	83 c4 0c             	add    esp,0xc
c0015e2a:	89 c3                	mov    ebx,eax
c0015e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e34:	57                   	push   edi
c0015e35:	53                   	push   ebx
c0015e36:	e8 b9 93 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0015e3b:	83 c4 0c             	add    esp,0xc
c0015e3e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e41:	0f b6 d4             	movzx  edx,ah
c0015e44:	0f b6 c0             	movzx  eax,al
c0015e47:	52                   	push   edx
c0015e48:	50                   	push   eax
c0015e49:	53                   	push   ebx
c0015e4a:	e8 1b 96 ff ff       	call   c000f46a <File::chfatattr(unsigned char, unsigned char)>
c0015e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e52:	89 c6                	mov    esi,eax
c0015e54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e59:	83 c4 10             	add    esp,0x10
c0015e5c:	31 c0                	xor    eax,eax
c0015e5e:	5b                   	pop    ebx
c0015e5f:	85 f6                	test   esi,esi
c0015e61:	5e                   	pop    esi
c0015e62:	0f 95 c0             	setne  al
c0015e65:	5f                   	pop    edi
c0015e66:	31 d2                	xor    edx,edx
c0015e68:	f7 d8                	neg    eax
c0015e6a:	83 d2 00             	adc    edx,0x0
c0015e6d:	f7 da                	neg    edx
c0015e6f:	c3                   	ret    

c0015e70 <sysPanic(regs*)>:
c0015e70:	83 ec 18             	sub    esp,0x18
c0015e73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e77:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015e7a:	e8 db ea ff ff       	call   c001495a <Krnl::panic(char const*)>
c0015e7f:	c7 04 24 c2 15 02 c0 	mov    DWORD PTR [esp],0xc00215c2
c0015e86:	e8 cf ea ff ff       	call   c001495a <Krnl::panic(char const*)>
c0015e8b:	b8 01 00 00 00       	mov    eax,0x1
c0015e90:	31 d2                	xor    edx,edx
c0015e92:	83 c4 1c             	add    esp,0x1c
c0015e95:	c3                   	ret    

c0015e96 <sysPipe(regs*)>:
c0015e96:	57                   	push   edi
c0015e97:	56                   	push   esi
c0015e98:	53                   	push   ebx
c0015e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e9d:	83 ec 0c             	sub    esp,0xc
c0015ea0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015ea3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015ea6:	6a 20                	push   0x20
c0015ea8:	e8 29 8d ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0015ead:	89 c3                	mov    ebx,eax
c0015eaf:	58                   	pop    eax
c0015eb0:	5a                   	pop    edx
c0015eb1:	68 00 50 00 00       	push   0x5000
c0015eb6:	53                   	push   ebx
c0015eb7:	e8 b2 67 ff ff       	call   c000c66e <Pipe::Pipe(int)>
c0015ebc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ebf:	e8 6e 7a ff ff       	call   c000d932 <UnixFile::getFileDescriptor()>
c0015ec4:	89 07                	mov    DWORD PTR [edi],eax
c0015ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec9:	e8 64 7a ff ff       	call   c000d932 <UnixFile::getFileDescriptor()>
c0015ece:	83 c4 10             	add    esp,0x10
c0015ed1:	89 06                	mov    DWORD PTR [esi],eax
c0015ed3:	31 d2                	xor    edx,edx
c0015ed5:	5b                   	pop    ebx
c0015ed6:	31 c0                	xor    eax,eax
c0015ed8:	5e                   	pop    esi
c0015ed9:	5f                   	pop    edi
c0015eda:	c3                   	ret    

c0015edb <sysGetUnixTime(regs*)>:
c0015edb:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c0015ee0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ee6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eea:	e9 cd 9c ff ff       	jmp    c000fbbc <Clock::timeInSecondsLocal()>

c0015eef <string_ends_with(char const*, char const*)>:
c0015eef:	57                   	push   edi
c0015ef0:	56                   	push   esi
c0015ef1:	53                   	push   ebx
c0015ef2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ef6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015efa:	83 ec 0c             	sub    esp,0xc
c0015efd:	53                   	push   ebx
c0015efe:	e8 22 a7 fe ff       	call   c0000625 <strlen>
c0015f03:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f06:	89 c6                	mov    esi,eax
c0015f08:	e8 18 a7 fe ff       	call   c0000625 <strlen>
c0015f0d:	83 c4 10             	add    esp,0x10
c0015f10:	39 c6                	cmp    esi,eax
c0015f12:	7d 06                	jge    c0015f1a <string_ends_with(char const*, char const*)+0x2b>
c0015f14:	5b                   	pop    ebx
c0015f15:	31 c0                	xor    eax,eax
c0015f17:	5e                   	pop    esi
c0015f18:	5f                   	pop    edi
c0015f19:	c3                   	ret    
c0015f1a:	83 ec 08             	sub    esp,0x8
c0015f1d:	29 c6                	sub    esi,eax
c0015f1f:	57                   	push   edi
c0015f20:	01 f3                	add    ebx,esi
c0015f22:	53                   	push   ebx
c0015f23:	e8 d0 a7 fe ff       	call   c00006f8 <strcmp>
c0015f28:	83 c4 10             	add    esp,0x10
c0015f2b:	85 c0                	test   eax,eax
c0015f2d:	5b                   	pop    ebx
c0015f2e:	0f 94 c0             	sete   al
c0015f31:	5e                   	pop    esi
c0015f32:	0f b6 c0             	movzx  eax,al
c0015f35:	5f                   	pop    edi
c0015f36:	c3                   	ret    

c0015f37 <sysCallOpen(regs*)>:
c0015f37:	56                   	push   esi
c0015f38:	53                   	push   ebx
c0015f39:	81 ec 04 01 00 00    	sub    esp,0x104
c0015f3f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0015f46:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0015f49:	85 c9                	test   ecx,ecx
c0015f4b:	0f 84 b3 00 00 00    	je     c0016004 <sysCallOpen(regs*)+0xcd>
c0015f51:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015f54:	85 c0                	test   eax,eax
c0015f56:	0f 84 a8 00 00 00    	je     c0016004 <sysCallOpen(regs*)+0xcd>
c0015f5c:	52                   	push   edx
c0015f5d:	68 d1 15 02 c0       	push   0xc00215d1
c0015f62:	50                   	push   eax
c0015f63:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015f67:	56                   	push   esi
c0015f68:	e8 dd 90 ff ff       	call   c000f04a <standardiseFiles(char*, char const*, char const*)>
c0015f6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f70:	e8 b0 a6 fe ff       	call   c0000625 <strlen>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	48                   	dec    eax
c0015f79:	74 1d                	je     c0015f98 <sysCallOpen(regs*)+0x61>
c0015f7b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0015f7e:	eb 0f                	jmp    c0015f8f <sysCallOpen(regs*)+0x58>
c0015f80:	80 fa 3a             	cmp    dl,0x3a
c0015f83:	74 0f                	je     c0015f94 <sysCallOpen(regs*)+0x5d>
c0015f85:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0015f89:	48                   	dec    eax
c0015f8a:	74 0c                	je     c0015f98 <sysCallOpen(regs*)+0x61>
c0015f8c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0015f8f:	80 fa 2e             	cmp    dl,0x2e
c0015f92:	75 ec                	jne    c0015f80 <sysCallOpen(regs*)+0x49>
c0015f94:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0015f98:	83 ec 08             	sub    esp,0x8
c0015f9b:	68 d5 15 02 c0       	push   0xc00215d5
c0015fa0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fa3:	e8 47 ff ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	85 c0                	test   eax,eax
c0015fad:	75 17                	jne    c0015fc6 <sysCallOpen(regs*)+0x8f>
c0015faf:	83 ec 08             	sub    esp,0x8
c0015fb2:	68 f6 15 02 c0       	push   0xc00215f6
c0015fb7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fba:	e8 30 ff ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	85 c0                	test   eax,eax
c0015fc4:	74 51                	je     c0016017 <sysCallOpen(regs*)+0xe0>
c0015fc6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fc9:	83 ec 08             	sub    esp,0x8
c0015fcc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0015fd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015fd9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fdc:	ff 30                	push   DWORD PTR [eax]
c0015fde:	68 da 15 02 c0       	push   0xc00215da
c0015fe3:	e8 dd 8c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015fe8:	c7 04 24 e9 15 02 c0 	mov    DWORD PTR [esp],0xc00215e9
c0015fef:	e8 d1 8c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0015ff4:	83 c4 10             	add    esp,0x10
c0015ff7:	81 c4 04 01 00 00    	add    esp,0x104
c0015ffd:	31 c0                	xor    eax,eax
c0015fff:	31 d2                	xor    edx,edx
c0016001:	5b                   	pop    ebx
c0016002:	5e                   	pop    esi
c0016003:	c3                   	ret    
c0016004:	81 c4 04 01 00 00    	add    esp,0x104
c001600a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001600f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016014:	5b                   	pop    ebx
c0016015:	5e                   	pop    esi
c0016016:	c3                   	ret    
c0016017:	83 ec 08             	sub    esp,0x8
c001601a:	68 d6 15 02 c0       	push   0xc00215d6
c001601f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016022:	e8 d1 a6 fe ff       	call   c00006f8 <strcmp>
c0016027:	83 c4 10             	add    esp,0x10
c001602a:	85 c0                	test   eax,eax
c001602c:	74 98                	je     c0015fc6 <sysCallOpen(regs*)+0x8f>
c001602e:	83 ec 08             	sub    esp,0x8
c0016031:	68 d5 15 02 c0       	push   0xc00215d5
c0016036:	56                   	push   esi
c0016037:	e8 b3 fe ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c001603c:	83 c4 10             	add    esp,0x10
c001603f:	85 c0                	test   eax,eax
c0016041:	75 83                	jne    c0015fc6 <sysCallOpen(regs*)+0x8f>
c0016043:	83 ec 08             	sub    esp,0x8
c0016046:	68 fb 15 02 c0       	push   0xc00215fb
c001604b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001604e:	e8 9c fe ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	85 c0                	test   eax,eax
c0016058:	0f 85 d1 00 00 00    	jne    c001612f <sysCallOpen(regs*)+0x1f8>
c001605e:	83 ec 08             	sub    esp,0x8
c0016061:	68 00 16 02 c0       	push   0xc0021600
c0016066:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016069:	e8 81 fe ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c001606e:	83 c4 10             	add    esp,0x10
c0016071:	85 c0                	test   eax,eax
c0016073:	0f 85 b6 00 00 00    	jne    c001612f <sysCallOpen(regs*)+0x1f8>
c0016079:	83 ec 08             	sub    esp,0x8
c001607c:	68 fc 15 02 c0       	push   0xc00215fc
c0016081:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016084:	e8 6f a6 fe ff       	call   c00006f8 <strcmp>
c0016089:	83 c4 10             	add    esp,0x10
c001608c:	85 c0                	test   eax,eax
c001608e:	0f 84 9b 00 00 00    	je     c001612f <sysCallOpen(regs*)+0x1f8>
c0016094:	83 ec 08             	sub    esp,0x8
c0016097:	68 fb 15 02 c0       	push   0xc00215fb
c001609c:	56                   	push   esi
c001609d:	e8 4d fe ff ff       	call   c0015eef <string_ends_with(char const*, char const*)>
c00160a2:	83 c4 10             	add    esp,0x10
c00160a5:	85 c0                	test   eax,eax
c00160a7:	0f 85 82 00 00 00    	jne    c001612f <sysCallOpen(regs*)+0x1f8>
c00160ad:	83 ec 0c             	sub    esp,0xc
c00160b0:	68 14 01 00 00       	push   0x114
c00160b5:	e8 1c 8b ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00160ba:	83 c4 0c             	add    esp,0xc
c00160bd:	89 c6                	mov    esi,eax
c00160bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00160c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160ca:	56                   	push   esi
c00160cb:	e8 24 91 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c00160d0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00160d3:	83 c4 10             	add    esp,0x10
c00160d6:	0f b6 c2             	movzx  eax,dl
c00160d9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00160dc:	89 d0                	mov    eax,edx
c00160de:	83 e0 01             	and    eax,0x1
c00160e1:	f6 c2 02             	test   dl,0x2
c00160e4:	74 03                	je     c00160e9 <sysCallOpen(regs*)+0x1b2>
c00160e6:	83 c8 02             	or     eax,0x2
c00160e9:	f6 c2 04             	test   dl,0x4
c00160ec:	74 03                	je     c00160f1 <sysCallOpen(regs*)+0x1ba>
c00160ee:	83 c8 04             	or     eax,0x4
c00160f1:	f6 c2 08             	test   dl,0x8
c00160f4:	74 03                	je     c00160f9 <sysCallOpen(regs*)+0x1c2>
c00160f6:	83 c8 0a             	or     eax,0xa
c00160f9:	83 e2 10             	and    edx,0x10
c00160fc:	74 03                	je     c0016101 <sysCallOpen(regs*)+0x1ca>
c00160fe:	83 c8 12             	or     eax,0x12
c0016101:	83 ec 08             	sub    esp,0x8
c0016104:	50                   	push   eax
c0016105:	56                   	push   esi
c0016106:	e8 4d 91 ff ff       	call   c000f258 <File::open(FileOpenMode)>
c001610b:	83 c4 10             	add    esp,0x10
c001610e:	85 c0                	test   eax,eax
c0016110:	0f 85 ee fe ff ff    	jne    c0016004 <sysCallOpen(regs*)+0xcd>
c0016116:	83 ec 0c             	sub    esp,0xc
c0016119:	56                   	push   esi
c001611a:	e8 13 78 ff ff       	call   c000d932 <UnixFile::getFileDescriptor()>
c001611f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016122:	89 02                	mov    DWORD PTR [edx],eax
c0016124:	c1 f8 1f             	sar    eax,0x1f
c0016127:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001612a:	e9 c5 fe ff ff       	jmp    c0015ff4 <sysCallOpen(regs*)+0xbd>
c001612f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016132:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016138:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001613f:	e9 b3 fe ff ff       	jmp    c0015ff7 <sysCallOpen(regs*)+0xc0>

c0016144 <setupSystemCalls()>:
c0016144:	c7 05 c0 3b 02 c0 76 53 01 c0 	mov    DWORD PTR ds:0xc0023bc0,0xc0015376
c001614e:	c7 05 c4 3b 02 c0 89 51 01 c0 	mov    DWORD PTR ds:0xc0023bc4,0xc0015189
c0016158:	c7 05 c8 3b 02 c0 9e 52 01 c0 	mov    DWORD PTR ds:0xc0023bc8,0xc001529e
c0016162:	c7 05 cc 3b 02 c0 f3 52 01 c0 	mov    DWORD PTR ds:0xc0023bcc,0xc00152f3
c001616c:	c7 05 d0 3b 02 c0 36 52 01 c0 	mov    DWORD PTR ds:0xc0023bd0,0xc0015236
c0016176:	c7 05 d4 3b 02 c0 90 53 01 c0 	mov    DWORD PTR ds:0xc0023bd4,0xc0015390
c0016180:	c7 05 d8 3b 02 c0 35 55 01 c0 	mov    DWORD PTR ds:0xc0023bd8,0xc0015535
c001618a:	c7 05 dc 3b 02 c0 54 55 01 c0 	mov    DWORD PTR ds:0xc0023bdc,0xc0015554
c0016194:	c7 05 e4 3b 02 c0 b5 58 01 c0 	mov    DWORD PTR ds:0xc0023be4,0xc00158b5
c001619e:	c7 05 e0 3b 02 c0 37 5f 01 c0 	mov    DWORD PTR ds:0xc0023be0,0xc0015f37
c00161a8:	c7 05 e8 3b 02 c0 3d 59 01 c0 	mov    DWORD PTR ds:0xc0023be8,0xc001593d
c00161b2:	c7 05 ec 3b 02 c0 b3 55 01 c0 	mov    DWORD PTR ds:0xc0023bec,0xc00155b3
c00161bc:	c7 05 f0 3b 02 c0 9c 53 01 c0 	mov    DWORD PTR ds:0xc0023bf0,0xc001539c
c00161c6:	c7 05 f4 3b 02 c0 a1 53 01 c0 	mov    DWORD PTR ds:0xc0023bf4,0xc00153a1
c00161d0:	c7 05 f8 3b 02 c0 aa 59 01 c0 	mov    DWORD PTR ds:0xc0023bf8,0xc00159aa
c00161da:	c7 05 fc 3b 02 c0 03 5a 01 c0 	mov    DWORD PTR ds:0xc0023bfc,0xc0015a03
c00161e4:	c7 05 00 3c 02 c0 9b 56 01 c0 	mov    DWORD PTR ds:0xc0023c00,0xc001569b
c00161ee:	c7 05 04 3c 02 c0 04 57 01 c0 	mov    DWORD PTR ds:0xc0023c04,0xc0015704
c00161f8:	c7 05 08 3c 02 c0 32 58 01 c0 	mov    DWORD PTR ds:0xc0023c08,0xc0015832
c0016202:	c7 05 0c 3c 02 c0 a6 53 01 c0 	mov    DWORD PTR ds:0xc0023c0c,0xc00153a6
c001620c:	c7 05 10 3c 02 c0 69 5a 01 c0 	mov    DWORD PTR ds:0xc0023c10,0xc0015a69
c0016216:	c7 05 14 3c 02 c0 b0 53 01 c0 	mov    DWORD PTR ds:0xc0023c14,0xc00153b0
c0016220:	c7 05 18 3c 02 c0 bb 53 01 c0 	mov    DWORD PTR ds:0xc0023c18,0xc00153bb
c001622a:	c7 05 1c 3c 02 c0 83 5a 01 c0 	mov    DWORD PTR ds:0xc0023c1c,0xc0015a83
c0016234:	c7 05 20 3c 02 c0 d5 5a 01 c0 	mov    DWORD PTR ds:0xc0023c20,0xc0015ad5
c001623e:	c7 05 24 3c 02 c0 c6 53 01 c0 	mov    DWORD PTR ds:0xc0023c24,0xc00153c6
c0016248:	c7 05 28 3c 02 c0 27 5b 01 c0 	mov    DWORD PTR ds:0xc0023c28,0xc0015b27
c0016252:	c7 05 2c 3c 02 c0 70 55 01 c0 	mov    DWORD PTR ds:0xc0023c2c,0xc0015570
c001625c:	c7 05 30 3c 02 c0 73 5b 01 c0 	mov    DWORD PTR ds:0xc0023c30,0xc0015b73
c0016266:	c7 05 34 3c 02 c0 41 56 01 c0 	mov    DWORD PTR ds:0xc0023c34,0xc0015641
c0016270:	c7 05 38 3c 02 c0 5a 5c 01 c0 	mov    DWORD PTR ds:0xc0023c38,0xc0015c5a
c001627a:	c7 05 3c 3c 02 c0 81 57 01 c0 	mov    DWORD PTR ds:0xc0023c3c,0xc0015781
c0016284:	c7 05 40 3c 02 c0 81 5c 01 c0 	mov    DWORD PTR ds:0xc0023c40,0xc0015c81
c001628e:	c7 05 44 3c 02 c0 f6 5b 01 c0 	mov    DWORD PTR ds:0xc0023c44,0xc0015bf6
c0016298:	c7 05 48 3c 02 c0 f1 5c 01 c0 	mov    DWORD PTR ds:0xc0023c48,0xc0015cf1
c00162a2:	c7 05 4c 3c 02 c0 d6 53 01 c0 	mov    DWORD PTR ds:0xc0023c4c,0xc00153d6
c00162ac:	c7 05 50 3c 02 c0 40 54 01 c0 	mov    DWORD PTR ds:0xc0023c50,0xc0015440
c00162b6:	c7 05 54 3c 02 c0 86 54 01 c0 	mov    DWORD PTR ds:0xc0023c54,0xc0015486
c00162c0:	c7 05 58 3c 02 c0 10 5e 01 c0 	mov    DWORD PTR ds:0xc0023c58,0xc0015e10
c00162ca:	c7 05 5c 3c 02 c0 70 5e 01 c0 	mov    DWORD PTR ds:0xc0023c5c,0xc0015e70
c00162d4:	c7 05 60 3c 02 c0 d7 54 01 c0 	mov    DWORD PTR ds:0xc0023c60,0xc00154d7
c00162de:	c7 05 64 3c 02 c0 96 5e 01 c0 	mov    DWORD PTR ds:0xc0023c64,0xc0015e96
c00162e8:	c7 05 68 3c 02 c0 db 5e 01 c0 	mov    DWORD PTR ds:0xc0023c68,0xc0015edb
c00162f2:	c7 05 6c 3c 02 c0 a1 51 01 c0 	mov    DWORD PTR ds:0xc0023c6c,0xc00151a1
c00162fc:	c3                   	ret    

c00162fd <systemCall(regs*, void*)>:
c00162fd:	53                   	push   ebx
c00162fe:	83 ec 08             	sub    esp,0x8
c0016301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016305:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016308:	83 f8 7f             	cmp    eax,0x7f
c001630b:	77 30                	ja     c001633d <systemCall(regs*, void*)+0x40>
c001630d:	83 3c 85 c0 3b 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdc440],0x0
c0016315:	74 26                	je     c001633d <systemCall(regs*, void*)+0x40>
c0016317:	51                   	push   ecx
c0016318:	51                   	push   ecx
c0016319:	50                   	push   eax
c001631a:	68 05 16 02 c0       	push   0xc0021605
c001631f:	e8 a1 89 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0016324:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016327:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001632a:	ff 14 85 c0 3b 02 c0 	call   DWORD PTR [eax*4-0x3ffdc440]
c0016331:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016334:	c7 04 24 13 16 02 c0 	mov    DWORD PTR [esp],0xc0021613
c001633b:	eb 08                	jmp    c0016345 <systemCall(regs*, void*)+0x48>
c001633d:	52                   	push   edx
c001633e:	52                   	push   edx
c001633f:	50                   	push   eax
c0016340:	68 22 16 02 c0       	push   0xc0021622
c0016345:	e8 7b 89 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001634a:	83 c4 10             	add    esp,0x10
c001634d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016352:	31 d2                	xor    edx,edx
c0016354:	83 c4 08             	add    esp,0x8
c0016357:	5b                   	pop    ebx
c0016358:	c3                   	ret    

c0016359 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016359:	55                   	push   ebp
c001635a:	89 e5                	mov    ebp,esp
c001635c:	57                   	push   edi
c001635d:	56                   	push   esi
c001635e:	53                   	push   ebx
c001635f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016365:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016368:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001636b:	85 c0                	test   eax,eax
c001636d:	0f 95 c1             	setne  cl
c0016370:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016374:	0f 94 c2             	sete   dl
c0016377:	84 d1                	test   cl,dl
c0016379:	74 26                	je     c00163a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001637b:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016382:	74 1d                	je     c00163a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016384:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016387:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001638d:	89 d6                	mov    esi,edx
c001638f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016395:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001639b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001639e:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c00163a1:	83 ec 0c             	sub    esp,0xc
c00163a4:	05 ff 0f 00 00       	add    eax,0xfff
c00163a9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00163ac:	6a 01                	push   0x1
c00163ae:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00163b4:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00163ba:	e8 ac 79 ff ff       	call   c000dd6b <Virt::allocateKernelVirtualPages(int)>
c00163bf:	83 c4 10             	add    esp,0x10
c00163c2:	89 c6                	mov    esi,eax
c00163c4:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00163ca:	0f 86 21 01 00 00    	jbe    c00164f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00163d0:	c1 eb 0c             	shr    ebx,0xc
c00163d3:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00163dd:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00163e3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00163e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00163e9:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00163ef:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00163f2:	29 d8                	sub    eax,ebx
c00163f4:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00163fa:	0f 83 f4 00 00 00    	jae    c00164f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016409:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001640c:	3d 00 10 00 00       	cmp    eax,0x1000
c0016411:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016413:	52                   	push   edx
c0016414:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001641a:	52                   	push   edx
c001641b:	76 05                	jbe    c0016422 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001641d:	b8 00 10 00 00       	mov    eax,0x1000
c0016422:	31 d2                	xor    edx,edx
c0016424:	52                   	push   edx
c0016425:	50                   	push   eax
c0016426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016429:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001642c:	83 c4 20             	add    esp,0x20
c001642f:	85 c0                	test   eax,eax
c0016431:	74 1f                	je     c0016452 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0016433:	51                   	push   ecx
c0016434:	51                   	push   ecx
c0016435:	50                   	push   eax
c0016436:	68 36 16 02 c0       	push   0xc0021636
c001643b:	e8 85 88 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0016440:	89 34 24             	mov    DWORD PTR [esp],esi
c0016443:	e8 7d 7c ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	31 c0                	xor    eax,eax
c001644d:	e9 7c 01 00 00       	jmp    c00165ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016452:	e8 19 14 00 00       	call   c0017870 <lockScheduler()>
c0016457:	e8 6c 5d ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001645c:	6a 07                	push   0x7
c001645e:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016464:	56                   	push   esi
c0016465:	50                   	push   eax
c0016466:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001646c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001646f:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016475:	e8 4c 7f ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001647a:	83 c4 0c             	add    esp,0xc
c001647d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016483:	6a 00                	push   0x0
c0016485:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001648b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001648e:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016494:	e8 8b 7d ff ff       	call   c000e224 <VAS::mapOtherVASIn(bool, VAS*)>
c0016499:	58                   	pop    eax
c001649a:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00164a0:	5a                   	pop    edx
c00164a1:	68 07 04 00 00       	push   0x407
c00164a6:	53                   	push   ebx
c00164a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00164ad:	50                   	push   eax
c00164ae:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00164b4:	6a 00                	push   0x0
c00164b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164be:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00164c4:	e8 b3 82 ff ff       	call   c000e77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00164c9:	83 c4 1c             	add    esp,0x1c
c00164cc:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00164d2:	68 00 10 00 00       	push   0x1000
c00164d7:	50                   	push   eax
c00164d8:	56                   	push   esi
c00164d9:	e8 f4 a0 fe ff       	call   c00005d2 <memcpy>
c00164de:	e8 8f 13 00 00       	call   c0017872 <unlockScheduler()>
c00164e3:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	e9 f5 fe ff ff       	jmp    c00163e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00164f1:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00164f4:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00164fe:	0f 86 bc 00 00 00    	jbe    c00165c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0016504:	e8 67 13 00 00       	call   c0017870 <lockScheduler()>
c0016509:	51                   	push   ecx
c001650a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016510:	6a 00                	push   0x0
c0016512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016517:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001651a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016520:	e8 ff 7c ff ff       	call   c000e224 <VAS::mapOtherVASIn(bool, VAS*)>
c0016525:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	c1 e8 0c             	shr    eax,0xc
c0016531:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001653b:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016541:	e8 82 5c ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016546:	6a 07                	push   0x7
c0016548:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001654e:	56                   	push   esi
c001654f:	50                   	push   eax
c0016550:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016556:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016559:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001655f:	e8 62 7e ff ff       	call   c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016564:	58                   	pop    eax
c0016565:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001656b:	5a                   	pop    edx
c001656c:	68 07 04 00 00       	push   0x407
c0016571:	53                   	push   ebx
c0016572:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016578:	50                   	push   eax
c0016579:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001657f:	6a 00                	push   0x0
c0016581:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016586:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016589:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001658f:	e8 e8 81 ff ff       	call   c000e77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016594:	83 c4 1c             	add    esp,0x1c
c0016597:	68 00 10 00 00       	push   0x1000
c001659c:	6a 00                	push   0x0
c001659e:	56                   	push   esi
c001659f:	e8 64 a0 fe ff       	call   c0000608 <memset>
c00165a4:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00165b3:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00165b9:	77 86                	ja     c0016541 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00165bb:	e8 b2 12 00 00       	call   c0017872 <unlockScheduler()>
c00165c0:	83 ec 0c             	sub    esp,0xc
c00165c3:	56                   	push   esi
c00165c4:	e8 fc 7a ff ff       	call   c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00165c9:	83 c4 10             	add    esp,0x10
c00165cc:	b0 01                	mov    al,0x1
c00165ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c00165d1:	5b                   	pop    ebx
c00165d2:	5e                   	pop    esi
c00165d3:	5f                   	pop    edi
c00165d4:	5d                   	pop    ebp
c00165d5:	c3                   	ret    

c00165d6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00165d6:	55                   	push   ebp
c00165d7:	57                   	push   edi
c00165d8:	56                   	push   esi
c00165d9:	53                   	push   ebx
c00165da:	83 ec 48             	sub    esp,0x48
c00165dd:	68 14 01 00 00       	push   0x114
c00165e2:	e8 ef 85 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00165e7:	83 c4 0c             	add    esp,0xc
c00165ea:	89 c6                	mov    esi,eax
c00165ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00165f0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00165f4:	50                   	push   eax
c00165f5:	e8 fa 8b ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c00165fa:	58                   	pop    eax
c00165fb:	5a                   	pop    edx
c00165fc:	6a 01                	push   0x1
c00165fe:	56                   	push   esi
c00165ff:	e8 54 8c ff ff       	call   c000f258 <File::open(FileOpenMode)>
c0016604:	83 c4 10             	add    esp,0x10
c0016607:	85 c0                	test   eax,eax
c0016609:	0f 85 47 01 00 00    	jne    c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001660f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016617:	83 ec 0c             	sub    esp,0xc
c001661a:	6a 34                	push   0x34
c001661c:	e8 fd 55 ff ff       	call   c000bc1e <malloc>
c0016621:	89 c3                	mov    ebx,eax
c0016623:	58                   	pop    eax
c0016624:	8b 06                	mov    eax,DWORD PTR [esi]
c0016626:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001662a:	57                   	push   edi
c001662b:	53                   	push   ebx
c001662c:	6a 00                	push   0x0
c001662e:	6a 34                	push   0x34
c0016630:	56                   	push   esi
c0016631:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016634:	83 c4 20             	add    esp,0x20
c0016637:	85 c0                	test   eax,eax
c0016639:	0f 85 17 01 00 00    	jne    c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001663f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016645:	0f 85 0b 01 00 00    	jne    c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001664b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001664e:	85 c0                	test   eax,eax
c0016650:	0f 84 00 01 00 00    	je     c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016656:	31 d2                	xor    edx,edx
c0016658:	55                   	push   ebp
c0016659:	52                   	push   edx
c001665a:	50                   	push   eax
c001665b:	56                   	push   esi
c001665c:	e8 b5 8c ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	85 c0                	test   eax,eax
c0016666:	0f 85 ea 00 00 00    	jne    c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016672:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001667a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001667e:	0f af c2             	imul   eax,edx
c0016681:	50                   	push   eax
c0016682:	e8 97 55 ff ff       	call   c000bc1e <malloc>
c0016687:	89 3c 24             	mov    DWORD PTR [esp],edi
c001668a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001668e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016690:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016694:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016698:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001669c:	0f af c2             	imul   eax,edx
c001669f:	99                   	cdq    
c00166a0:	52                   	push   edx
c00166a1:	50                   	push   eax
c00166a2:	56                   	push   esi
c00166a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00166a9:	83 c4 20             	add    esp,0x20
c00166ac:	85 c0                	test   eax,eax
c00166ae:	0f 84 a2 00 00 00    	je     c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00166b4:	31 d2                	xor    edx,edx
c00166b6:	51                   	push   ecx
c00166b7:	52                   	push   edx
c00166b8:	50                   	push   eax
c00166b9:	56                   	push   esi
c00166ba:	e8 57 8c ff ff       	call   c000f316 <File::seek(unsigned long long)>
c00166bf:	83 c4 10             	add    esp,0x10
c00166c2:	85 c0                	test   eax,eax
c00166c4:	0f 85 8c 00 00 00    	jne    c0016756 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00166ca:	83 ec 0c             	sub    esp,0xc
c00166cd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00166d1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00166d5:	31 ed                	xor    ebp,ebp
c00166d7:	0f af c2             	imul   eax,edx
c00166da:	50                   	push   eax
c00166db:	e8 3e 55 ff ff       	call   c000bc1e <malloc>
c00166e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00166e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166e7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00166e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166ed:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00166f1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00166f5:	0f af c2             	imul   eax,edx
c00166f8:	99                   	cdq    
c00166f9:	52                   	push   edx
c00166fa:	50                   	push   eax
c00166fb:	56                   	push   esi
c00166fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166ff:	83 c4 20             	add    esp,0x20
c0016702:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001670a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001670e:	0f 86 80 00 00 00    	jbe    c0016794 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016714:	0f b7 fd             	movzx  edi,bp
c0016717:	c1 e7 05             	shl    edi,0x5
c001671a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001671e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016721:	75 6b                	jne    c001678e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016723:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016726:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001672a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001672d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016731:	52                   	push   edx
c0016732:	31 d2                	xor    edx,edx
c0016734:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016737:	52                   	push   edx
c0016738:	50                   	push   eax
c0016739:	56                   	push   esi
c001673a:	e8 d7 8b ff ff       	call   c000f316 <File::seek(unsigned long long)>
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	85 c0                	test   eax,eax
c0016744:	74 17                	je     c001675d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016746:	83 ec 0c             	sub    esp,0xc
c0016749:	68 61 16 02 c0       	push   0xc0021661
c001674e:	e8 72 85 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	31 c0                	xor    eax,eax
c0016758:	e9 87 00 00 00       	jmp    c00167e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001675d:	83 ec 0c             	sub    esp,0xc
c0016760:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016763:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016766:	50                   	push   eax
c0016767:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001676b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001676f:	56                   	push   esi
c0016770:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016774:	e8 e0 fb ff ff       	call   c0016359 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016779:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001677d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016781:	83 c4 20             	add    esp,0x20
c0016784:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016788:	73 04                	jae    c001678e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001678a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001678e:	45                   	inc    ebp
c001678f:	e9 76 ff ff ff       	jmp    c001670a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016794:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167a0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00167a6:	83 ec 0c             	sub    esp,0xc
c00167a9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00167af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00167b4:	05 00 10 00 00       	add    eax,0x1000
c00167b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00167bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c0:	e8 69 54 ff ff       	call   c000bc2e <free>
c00167c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167c8:	e8 61 54 ff ff       	call   c000bc2e <free>
c00167cd:	58                   	pop    eax
c00167ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d2:	e8 57 54 ff ff       	call   c000bc2e <free>
c00167d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00167da:	e8 d7 8a ff ff       	call   c000f2b6 <File::close()>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	b0 01                	mov    al,0x1
c00167e4:	83 c4 3c             	add    esp,0x3c
c00167e7:	5b                   	pop    ebx
c00167e8:	5e                   	pop    esi
c00167e9:	5f                   	pop    edi
c00167ea:	5d                   	pop    ebp
c00167eb:	c3                   	ret    

c00167ec <Thr::runtimeReferenceHelper()>:
c00167ec:	83 ec 18             	sub    esp,0x18
c00167ef:	68 69 16 02 c0       	push   0xc0021669
c00167f4:	e8 cc 84 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00167f9:	fa                   	cli    
c00167fa:	83 c4 10             	add    esp,0x10
c00167fd:	eb fe                	jmp    c00167fd <Thr::runtimeReferenceHelper()+0x11>

c00167ff <Thr::getAddressOfKernelSymbol(char const*)>:
c00167ff:	57                   	push   edi
c0016800:	56                   	push   esi
c0016801:	53                   	push   ebx
c0016802:	31 db                	xor    ebx,ebx
c0016804:	39 1d 60 45 02 c0    	cmp    DWORD PTR ds:0xc0024560,ebx
c001680a:	7e 3c                	jle    c0016848 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001680c:	8b 34 9d e0 44 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdbb20]
c0016813:	31 ff                	xor    edi,edi
c0016815:	39 3c 9d e0 43 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdbc20],edi
c001681c:	7e 27                	jle    c0016845 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001681e:	50                   	push   eax
c001681f:	50                   	push   eax
c0016820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016824:	8b 06                	mov    eax,DWORD PTR [esi]
c0016826:	03 04 9d 60 44 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdbba0]
c001682d:	50                   	push   eax
c001682e:	e8 c5 9e fe ff       	call   c00006f8 <strcmp>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	85 c0                	test   eax,eax
c0016838:	75 05                	jne    c001683f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001683a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001683d:	eb 0b                	jmp    c001684a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001683f:	83 c6 10             	add    esi,0x10
c0016842:	47                   	inc    edi
c0016843:	eb d0                	jmp    c0016815 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016845:	43                   	inc    ebx
c0016846:	eb bc                	jmp    c0016804 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016848:	31 c0                	xor    eax,eax
c001684a:	5b                   	pop    ebx
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	c3                   	ret    

c001684e <Thr::loadKernelSymbolTable(char const*)>:
c001684e:	55                   	push   ebp
c001684f:	57                   	push   edi
c0016850:	56                   	push   esi
c0016851:	53                   	push   ebx
c0016852:	83 ec 68             	sub    esp,0x68
c0016855:	8b 35 b4 45 02 c0    	mov    esi,DWORD PTR ds:0xc00245b4
c001685b:	68 14 01 00 00       	push   0x114
c0016860:	e8 71 83 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0016865:	83 c4 0c             	add    esp,0xc
c0016868:	89 c3                	mov    ebx,eax
c001686a:	56                   	push   esi
c001686b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001686f:	50                   	push   eax
c0016870:	e8 7f 89 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0016875:	5e                   	pop    esi
c0016876:	5f                   	pop    edi
c0016877:	6a 01                	push   0x1
c0016879:	53                   	push   ebx
c001687a:	e8 d9 89 ff ff       	call   c000f258 <File::open(FileOpenMode)>
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	31 d2                	xor    edx,edx
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 85 79 02 00 00    	jne    c0016b05 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001688c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	6a 34                	push   0x34
c0016899:	e8 80 53 ff ff       	call   c000bc1e <malloc>
c001689e:	59                   	pop    ecx
c001689f:	89 c7                	mov    edi,eax
c00168a1:	8d 74 24 34          	lea    esi,[esp+0x34]
c00168a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168a7:	56                   	push   esi
c00168a8:	57                   	push   edi
c00168a9:	6a 00                	push   0x0
c00168ab:	6a 34                	push   0x34
c00168ad:	53                   	push   ebx
c00168ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168b1:	83 c4 20             	add    esp,0x20
c00168b4:	85 c0                	test   eax,eax
c00168b6:	74 17                	je     c00168cf <Thr::loadKernelSymbolTable(char const*)+0x81>
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 8b 16 02 c0       	push   0xc002168b
c00168c0:	e8 95 e0 ff ff       	call   c001495a <Krnl::panic(char const*)>
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	31 d2                	xor    edx,edx
c00168ca:	e9 36 02 00 00       	jmp    c0016b05 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00168cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00168d5:	75 e1                	jne    c00168b8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00168d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00168da:	85 c0                	test   eax,eax
c00168dc:	74 da                	je     c00168b8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00168de:	52                   	push   edx
c00168df:	31 d2                	xor    edx,edx
c00168e1:	52                   	push   edx
c00168e2:	50                   	push   eax
c00168e3:	53                   	push   ebx
c00168e4:	e8 2d 8a ff ff       	call   c000f316 <File::seek(unsigned long long)>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	85 c0                	test   eax,eax
c00168ee:	75 c8                	jne    c00168b8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00168f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00168fb:	31 ed                	xor    ebp,ebp
c00168fd:	0f af c2             	imul   eax,edx
c0016900:	50                   	push   eax
c0016901:	e8 18 53 ff ff       	call   c000bc1e <malloc>
c0016906:	89 34 24             	mov    DWORD PTR [esp],esi
c0016909:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001690d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001690f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016913:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016917:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001691b:	0f af c2             	imul   eax,edx
c001691e:	99                   	cdq    
c001691f:	52                   	push   edx
c0016920:	50                   	push   eax
c0016921:	53                   	push   ebx
c0016922:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016925:	83 c4 20             	add    esp,0x20
c0016928:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016930:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016938:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016940:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016948:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001694c:	0f 86 aa 00 00 00    	jbe    c00169fc <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016952:	0f b7 f5             	movzx  esi,bp
c0016955:	6b f6 28             	imul   esi,esi,0x28
c0016958:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001695c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001695f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016963:	50                   	push   eax
c0016964:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016968:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001696c:	8b 16                	mov    edx,DWORD PTR [esi]
c001696e:	6b c0 28             	imul   eax,eax,0x28
c0016971:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016975:	89 d0                	mov    eax,edx
c0016977:	31 d2                	xor    edx,edx
c0016979:	52                   	push   edx
c001697a:	50                   	push   eax
c001697b:	53                   	push   ebx
c001697c:	e8 95 89 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016981:	83 c4 0c             	add    esp,0xc
c0016984:	6a 20                	push   0x20
c0016986:	6a 00                	push   0x0
c0016988:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001698c:	52                   	push   edx
c001698d:	e8 76 9c fe ff       	call   c0000608 <memset>
c0016992:	58                   	pop    eax
c0016993:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016995:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016999:	51                   	push   ecx
c001699a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001699e:	52                   	push   edx
c001699f:	6a 00                	push   0x0
c00169a1:	6a 1f                	push   0x1f
c00169a3:	53                   	push   ebx
c00169a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169a7:	83 c4 18             	add    esp,0x18
c00169aa:	68 a2 16 02 c0       	push   0xc00216a2
c00169af:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00169b3:	52                   	push   edx
c00169b4:	e8 3f 9d fe ff       	call   c00006f8 <strcmp>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	85 c0                	test   eax,eax
c00169be:	75 0f                	jne    c00169cf <Thr::loadKernelSymbolTable(char const*)+0x181>
c00169c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00169c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169cf:	50                   	push   eax
c00169d0:	50                   	push   eax
c00169d1:	68 aa 16 02 c0       	push   0xc00216aa
c00169d6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00169da:	50                   	push   eax
c00169db:	e8 18 9d fe ff       	call   c00006f8 <strcmp>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	85 c0                	test   eax,eax
c00169e5:	75 0f                	jne    c00169f6 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00169e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00169ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00169ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169f6:	45                   	inc    ebp
c00169f7:	e9 4c ff ff ff       	jmp    c0016948 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00169fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016a01:	75 10                	jne    c0016a13 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016a03:	83 ec 0c             	sub    esp,0xc
c0016a06:	68 b2 16 02 c0       	push   0xc00216b2
c0016a0b:	e8 4a df ff ff       	call   c001495a <Krnl::panic(char const*)>
c0016a10:	83 c4 10             	add    esp,0x10
c0016a13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016a18:	75 10                	jne    c0016a2a <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016a1a:	83 ec 0c             	sub    esp,0xc
c0016a1d:	68 b2 16 02 c0       	push   0xc00216b2
c0016a22:	e8 33 df ff ff       	call   c001495a <Krnl::panic(char const*)>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	31 d2                	xor    edx,edx
c0016a2c:	50                   	push   eax
c0016a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a31:	52                   	push   edx
c0016a32:	50                   	push   eax
c0016a33:	53                   	push   ebx
c0016a34:	e8 dd 88 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016a39:	5a                   	pop    edx
c0016a3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a3e:	e8 db 51 ff ff       	call   c000bc1e <malloc>
c0016a43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016a4b:	89 c1                	mov    ecx,eax
c0016a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a55:	5e                   	pop    esi
c0016a56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a58:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016a5c:	55                   	push   ebp
c0016a5d:	51                   	push   ecx
c0016a5e:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016a62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a6a:	53                   	push   ebx
c0016a6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a6e:	83 c4 14             	add    esp,0x14
c0016a71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a75:	e8 a4 51 ff ff       	call   c000bc1e <malloc>
c0016a7a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a7d:	89 c6                	mov    esi,eax
c0016a7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a81:	56                   	push   esi
c0016a82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a8a:	53                   	push   ebx
c0016a8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a92:	8b 15 60 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024560
c0016a98:	83 c4 1c             	add    esp,0x1c
c0016a9b:	c1 e8 04             	shr    eax,0x4
c0016a9e:	89 04 95 e0 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc20],eax
c0016aa5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016aa9:	31 d2                	xor    edx,edx
c0016aab:	52                   	push   edx
c0016aac:	50                   	push   eax
c0016aad:	53                   	push   ebx
c0016aae:	e8 63 88 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016ab3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ab6:	31 d2                	xor    edx,edx
c0016ab8:	56                   	push   esi
c0016ab9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016abd:	52                   	push   edx
c0016abe:	50                   	push   eax
c0016abf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ac1:	53                   	push   ebx
c0016ac2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ac5:	83 c4 14             	add    esp,0x14
c0016ac8:	53                   	push   ebx
c0016ac9:	e8 e8 87 ff ff       	call   c000f2b6 <File::close()>
c0016ace:	5d                   	pop    ebp
c0016acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ad3:	e8 56 51 ff ff       	call   c000bc2e <free>
c0016ad8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016adb:	e8 4e 51 ff ff       	call   c000bc2e <free>
c0016ae0:	a1 60 45 02 c0       	mov    eax,ds:0xc0024560
c0016ae5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016ae9:	8d 50 01             	lea    edx,[eax+0x1]
c0016aec:	89 0c 85 e0 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb20],ecx
c0016af3:	89 15 60 45 02 c0    	mov    DWORD PTR ds:0xc0024560,edx
c0016af9:	89 34 85 60 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbba0],esi
c0016b00:	83 c4 10             	add    esp,0x10
c0016b03:	b2 01                	mov    dl,0x1
c0016b05:	83 c4 5c             	add    esp,0x5c
c0016b08:	88 d0                	mov    al,dl
c0016b0a:	5b                   	pop    ebx
c0016b0b:	5e                   	pop    esi
c0016b0c:	5f                   	pop    edi
c0016b0d:	5d                   	pop    ebp
c0016b0e:	c3                   	ret    

c0016b0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016b0f:	55                   	push   ebp
c0016b10:	57                   	push   edi
c0016b11:	56                   	push   esi
c0016b12:	53                   	push   ebx
c0016b13:	81 ec 68 03 00 00    	sub    esp,0x368
c0016b19:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016b20:	8b 1d b4 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245b4
c0016b26:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016b2a:	68 14 01 00 00       	push   0x114
c0016b2f:	e8 a2 80 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0016b34:	83 c4 0c             	add    esp,0xc
c0016b37:	89 c5                	mov    ebp,eax
c0016b39:	53                   	push   ebx
c0016b3a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016b41:	50                   	push   eax
c0016b42:	e8 ad 86 ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0016b47:	58                   	pop    eax
c0016b48:	5a                   	pop    edx
c0016b49:	6a 01                	push   0x1
c0016b4b:	55                   	push   ebp
c0016b4c:	e8 07 87 ff ff       	call   c000f258 <File::open(FileOpenMode)>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	85 c0                	test   eax,eax
c0016b56:	0f 85 f2 06 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016b5c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	6a 34                	push   0x34
c0016b69:	e8 b0 50 ff ff       	call   c000bc1e <malloc>
c0016b6e:	89 c7                	mov    edi,eax
c0016b70:	58                   	pop    eax
c0016b71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b74:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016b78:	53                   	push   ebx
c0016b79:	57                   	push   edi
c0016b7a:	6a 00                	push   0x0
c0016b7c:	6a 34                	push   0x34
c0016b7e:	55                   	push   ebp
c0016b7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b82:	83 c4 20             	add    esp,0x20
c0016b85:	85 c0                	test   eax,eax
c0016b87:	0f 85 c1 06 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016b8d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b93:	0f 85 b5 06 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016b99:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b9c:	85 c0                	test   eax,eax
c0016b9e:	0f 84 aa 06 00 00    	je     c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ba4:	31 d2                	xor    edx,edx
c0016ba6:	56                   	push   esi
c0016ba7:	52                   	push   edx
c0016ba8:	50                   	push   eax
c0016ba9:	55                   	push   ebp
c0016baa:	e8 67 87 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	85 c0                	test   eax,eax
c0016bb4:	0f 85 94 06 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016bba:	83 ec 0c             	sub    esp,0xc
c0016bbd:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016bc0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016bc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016bcc:	0f af c2             	imul   eax,edx
c0016bcf:	50                   	push   eax
c0016bd0:	e8 49 50 ff ff       	call   c000bc1e <malloc>
c0016bd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bdc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016bdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016be7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016beb:	0f af c2             	imul   eax,edx
c0016bee:	99                   	cdq    
c0016bef:	52                   	push   edx
c0016bf0:	50                   	push   eax
c0016bf1:	55                   	push   ebp
c0016bf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bf5:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016bf8:	83 c4 20             	add    esp,0x20
c0016bfb:	85 c0                	test   eax,eax
c0016bfd:	0f 84 4b 06 00 00    	je     c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c03:	31 d2                	xor    edx,edx
c0016c05:	51                   	push   ecx
c0016c06:	52                   	push   edx
c0016c07:	50                   	push   eax
c0016c08:	55                   	push   ebp
c0016c09:	e8 08 87 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	85 c0                	test   eax,eax
c0016c13:	0f 85 35 06 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c19:	83 ec 0c             	sub    esp,0xc
c0016c1c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016c20:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016c24:	31 f6                	xor    esi,esi
c0016c26:	0f af c2             	imul   eax,edx
c0016c29:	50                   	push   eax
c0016c2a:	e8 ef 4f ff ff       	call   c000bc1e <malloc>
c0016c2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016c36:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c3d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016c41:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016c45:	0f af c2             	imul   eax,edx
c0016c48:	99                   	cdq    
c0016c49:	52                   	push   edx
c0016c4a:	50                   	push   eax
c0016c4b:	55                   	push   ebp
c0016c4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c4f:	83 c4 20             	add    esp,0x20
c0016c52:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016c56:	0f 86 8a 00 00 00    	jbe    c0016ce6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016c5c:	0f b7 de             	movzx  ebx,si
c0016c5f:	c1 e3 05             	shl    ebx,0x5
c0016c62:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016c66:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016c69:	75 75                	jne    c0016ce0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016c6b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016c75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c79:	52                   	push   edx
c0016c7a:	31 d2                	xor    edx,edx
c0016c7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016c7f:	52                   	push   edx
c0016c80:	50                   	push   eax
c0016c81:	55                   	push   ebp
c0016c82:	e8 8f 86 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	85 c0                	test   eax,eax
c0016c8c:	0f 85 bc 05 00 00    	jne    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c92:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016c99:	31 d2                	xor    edx,edx
c0016c9b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016c9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ca2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ca6:	83 ec 0c             	sub    esp,0xc
c0016ca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016cb4:	50                   	push   eax
c0016cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cbd:	52                   	push   edx
c0016cbe:	50                   	push   eax
c0016cbf:	55                   	push   ebp
c0016cc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cc3:	83 c4 1c             	add    esp,0x1c
c0016cc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016cc9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016ccc:	50                   	push   eax
c0016ccd:	6a 00                	push   0x0
c0016ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016cd7:	50                   	push   eax
c0016cd8:	e8 2b 99 fe ff       	call   c0000608 <memset>
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	46                   	inc    esi
c0016ce1:	e9 6c ff ff ff       	jmp    c0016c52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016ce6:	31 db                	xor    ebx,ebx
c0016ce8:	50                   	push   eax
c0016ce9:	68 00 01 00 00       	push   0x100
c0016cee:	6a 00                	push   0x0
c0016cf0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016cf4:	50                   	push   eax
c0016cf5:	e8 0e 99 fe ff       	call   c0000608 <memset>
c0016cfa:	83 c4 0c             	add    esp,0xc
c0016cfd:	68 00 01 00 00       	push   0x100
c0016d02:	6a 00                	push   0x0
c0016d04:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016d0b:	50                   	push   eax
c0016d0c:	e8 f7 98 fe ff       	call   c0000608 <memset>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016d1c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016d24:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016d2c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016d34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016d3c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016d40:	0f 86 30 01 00 00    	jbe    c0016e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016d46:	0f b7 f3             	movzx  esi,bx
c0016d49:	6b f6 28             	imul   esi,esi,0x28
c0016d4c:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016d50:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016d53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d57:	50                   	push   eax
c0016d58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d5c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016d60:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d62:	6b d2 28             	imul   edx,edx,0x28
c0016d65:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016d69:	31 d2                	xor    edx,edx
c0016d6b:	52                   	push   edx
c0016d6c:	50                   	push   eax
c0016d6d:	55                   	push   ebp
c0016d6e:	e8 a3 85 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016d73:	83 c4 0c             	add    esp,0xc
c0016d76:	6a 20                	push   0x20
c0016d78:	6a 00                	push   0x0
c0016d7a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016d81:	51                   	push   ecx
c0016d82:	e8 81 98 fe ff       	call   c0000608 <memset>
c0016d87:	58                   	pop    eax
c0016d88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d8b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016d8f:	52                   	push   edx
c0016d90:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016d97:	51                   	push   ecx
c0016d98:	6a 00                	push   0x0
c0016d9a:	6a 1f                	push   0x1f
c0016d9c:	55                   	push   ebp
c0016d9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016da0:	83 c4 1c             	add    esp,0x1c
c0016da3:	6a 09                	push   0x9
c0016da5:	68 cc 16 02 c0       	push   0xc00216cc
c0016daa:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016db1:	51                   	push   ecx
c0016db2:	e8 b8 97 fe ff       	call   c000056f <memcmp>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	85 c0                	test   eax,eax
c0016dbc:	75 21                	jne    c0016ddf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016dbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dca:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016dce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016dd1:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016dd8:	89 c8                	mov    eax,ecx
c0016dda:	40                   	inc    eax
c0016ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ddf:	50                   	push   eax
c0016de0:	6a 09                	push   0x9
c0016de2:	68 d6 16 02 c0       	push   0xc00216d6
c0016de7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016dee:	50                   	push   eax
c0016def:	e8 7b 97 fe ff       	call   c000056f <memcmp>
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	85 c0                	test   eax,eax
c0016df9:	75 21                	jne    c0016e1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016dfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e07:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016e0b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016e0e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016e15:	89 c8                	mov    eax,ecx
c0016e17:	40                   	inc    eax
c0016e18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e1c:	50                   	push   eax
c0016e1d:	50                   	push   eax
c0016e1e:	68 a2 16 02 c0       	push   0xc00216a2
c0016e23:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016e2a:	50                   	push   eax
c0016e2b:	e8 c8 98 fe ff       	call   c00006f8 <strcmp>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	85 c0                	test   eax,eax
c0016e35:	75 0f                	jne    c0016e46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016e37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016e3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e46:	50                   	push   eax
c0016e47:	50                   	push   eax
c0016e48:	68 aa 16 02 c0       	push   0xc00216aa
c0016e4d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016e54:	50                   	push   eax
c0016e55:	e8 9e 98 fe ff       	call   c00006f8 <strcmp>
c0016e5a:	83 c4 10             	add    esp,0x10
c0016e5d:	85 c0                	test   eax,eax
c0016e5f:	75 0f                	jne    c0016e70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016e61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016e64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e70:	43                   	inc    ebx
c0016e71:	e9 c6 fe ff ff       	jmp    c0016d3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016e76:	31 d2                	xor    edx,edx
c0016e78:	50                   	push   eax
c0016e79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e7d:	52                   	push   edx
c0016e7e:	50                   	push   eax
c0016e7f:	55                   	push   ebp
c0016e80:	e8 91 84 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016e85:	5a                   	pop    edx
c0016e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e8a:	e8 8f 4d ff ff       	call   c000bc1e <malloc>
c0016e8f:	31 d2                	xor    edx,edx
c0016e91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016e95:	59                   	pop    ecx
c0016e96:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e99:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e9d:	53                   	push   ebx
c0016e9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ea6:	52                   	push   edx
c0016ea7:	50                   	push   eax
c0016ea8:	55                   	push   ebp
c0016ea9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016eac:	83 c4 14             	add    esp,0x14
c0016eaf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016eb3:	e8 66 4d ff ff       	call   c000bc1e <malloc>
c0016eb8:	31 d2                	xor    edx,edx
c0016eba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ebe:	83 c4 0c             	add    esp,0xc
c0016ec1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ec5:	52                   	push   edx
c0016ec6:	50                   	push   eax
c0016ec7:	55                   	push   ebp
c0016ec8:	e8 49 84 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016ecd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ed0:	31 d2                	xor    edx,edx
c0016ed2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ed6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016edd:	52                   	push   edx
c0016ede:	50                   	push   eax
c0016edf:	55                   	push   ebp
c0016ee0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ee3:	83 c4 20             	add    esp,0x20
c0016ee6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016eee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ef2:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0016ef6:	0f 84 56 03 00 00    	je     c0017252 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0016efc:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0016f03:	31 d2                	xor    edx,edx
c0016f05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f09:	c1 e8 03             	shr    eax,0x3
c0016f0c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016f10:	50                   	push   eax
c0016f11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f15:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016f19:	52                   	push   edx
c0016f1a:	50                   	push   eax
c0016f1b:	55                   	push   ebp
c0016f1c:	e8 f5 83 ff ff       	call   c000f316 <File::seek(unsigned long long)>
c0016f21:	58                   	pop    eax
c0016f22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f26:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016f2d:	e8 ec 4c ff ff       	call   c000bc1e <malloc>
c0016f32:	31 d2                	xor    edx,edx
c0016f34:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f38:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f3b:	58                   	pop    eax
c0016f3c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016f40:	50                   	push   eax
c0016f41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f49:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016f50:	52                   	push   edx
c0016f51:	50                   	push   eax
c0016f52:	55                   	push   ebp
c0016f53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f56:	83 c4 20             	add    esp,0x20
c0016f59:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016f61:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0016f65:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0016f69:	0f 8d c7 02 00 00    	jge    c0017236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c0016f6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f77:	31 db                	xor    ebx,ebx
c0016f79:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0016f7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f84:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0016f88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f8c:	c1 e8 08             	shr    eax,0x8
c0016f8f:	89 c6                	mov    esi,eax
c0016f91:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f95:	c1 e6 04             	shl    esi,0x4
c0016f98:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0016f9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016f9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fa3:	85 c0                	test   eax,eax
c0016fa5:	0f 85 17 01 00 00    	jne    c00170c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016fab:	83 ec 0c             	sub    esp,0xc
c0016fae:	b3 01                	mov    bl,0x1
c0016fb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fb4:	03 06                	add    eax,DWORD PTR [esi]
c0016fb6:	50                   	push   eax
c0016fb7:	e8 43 f8 ff ff       	call   c00167ff <Thr::getAddressOfKernelSymbol(char const*)>
c0016fbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016fc8:	0f 85 f4 00 00 00    	jne    c00170c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016fce:	50                   	push   eax
c0016fcf:	50                   	push   eax
c0016fd0:	68 e0 16 02 c0       	push   0xc00216e0
c0016fd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd9:	03 06                	add    eax,DWORD PTR [esi]
c0016fdb:	50                   	push   eax
c0016fdc:	e8 17 97 fe ff       	call   c00006f8 <strcmp>
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	85 c0                	test   eax,eax
c0016fe6:	75 0a                	jne    c0016ff2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0016fe8:	b8 1c e2 01 c0       	mov    eax,0xc001e21c
c0016fed:	e9 ca 00 00 00       	jmp    c00170bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016ff2:	50                   	push   eax
c0016ff3:	50                   	push   eax
c0016ff4:	68 ea 16 02 c0       	push   0xc00216ea
c0016ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ffd:	03 06                	add    eax,DWORD PTR [esi]
c0016fff:	50                   	push   eax
c0017000:	e8 f3 96 fe ff       	call   c00006f8 <strcmp>
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	85 c0                	test   eax,eax
c001700a:	75 0a                	jne    c0017016 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001700c:	b8 50 df 01 c0       	mov    eax,0xc001df50
c0017011:	e9 a6 00 00 00       	jmp    c00170bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017016:	53                   	push   ebx
c0017017:	53                   	push   ebx
c0017018:	68 f3 16 02 c0       	push   0xc00216f3
c001701d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017021:	03 06                	add    eax,DWORD PTR [esi]
c0017023:	50                   	push   eax
c0017024:	e8 cf 96 fe ff       	call   c00006f8 <strcmp>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	85 c0                	test   eax,eax
c001702e:	75 0a                	jne    c001703a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c0017030:	b8 1c e3 01 c0       	mov    eax,0xc001e31c
c0017035:	e9 82 00 00 00       	jmp    c00170bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001703a:	51                   	push   ecx
c001703b:	51                   	push   ecx
c001703c:	68 fd 16 02 c0       	push   0xc00216fd
c0017041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017045:	03 06                	add    eax,DWORD PTR [esi]
c0017047:	50                   	push   eax
c0017048:	e8 ab 96 fe ff       	call   c00006f8 <strcmp>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	85 c0                	test   eax,eax
c0017052:	74 63                	je     c00170b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0017054:	50                   	push   eax
c0017055:	50                   	push   eax
c0017056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001705a:	03 06                	add    eax,DWORD PTR [esi]
c001705c:	50                   	push   eax
c001705d:	68 06 17 02 c0       	push   0xc0021706
c0017062:	e8 5e 7c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017067:	58                   	pop    eax
c0017068:	5a                   	pop    edx
c0017069:	68 20 17 02 c0       	push   0xc0021720
c001706e:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017075:	53                   	push   ebx
c0017076:	e8 2c 96 fe ff       	call   c00006a7 <strcpy>
c001707b:	59                   	pop    ecx
c001707c:	58                   	pop    eax
c001707d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017081:	03 06                	add    eax,DWORD PTR [esi]
c0017083:	50                   	push   eax
c0017084:	53                   	push   ebx
c0017085:	e8 d4 96 fe ff       	call   c000075e <strcat>
c001708a:	58                   	pop    eax
c001708b:	5a                   	pop    edx
c001708c:	68 b6 17 02 c0       	push   0xc00217b6
c0017091:	53                   	push   ebx
c0017092:	e8 c7 96 fe ff       	call   c000075e <strcat>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001709f:	0f 84 4b 01 00 00    	je     c00171f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	53                   	push   ebx
c00170a9:	e8 ac d8 ff ff       	call   c001495a <Krnl::panic(char const*)>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00170b5:	eb 0b                	jmp    c00170c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00170b7:	b8 9c e0 01 c0       	mov    eax,0xc001e09c
c00170bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170c0:	b3 01                	mov    bl,0x1
c00170c2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00170c7:	0f 85 80 00 00 00    	jne    c001714d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c00170cd:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00170d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170d8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00170dc:	01 ce                	add    esi,ecx
c00170de:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00170e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00170e8:	0f 94 c2             	sete   dl
c00170eb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00170f3:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00170f8:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00170fc:	84 db                	test   bl,bl
c00170fe:	74 31                	je     c0017131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c0017100:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017104:	01 c3                	add    ebx,eax
c0017106:	84 d2                	test   dl,dl
c0017108:	75 0a                	jne    c0017114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001710a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001710e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017112:	76 32                	jbe    c0017146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017114:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017119:	0f 84 d1 00 00 00    	je     c00171f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001711f:	83 ec 0c             	sub    esp,0xc
c0017122:	68 37 17 02 c0       	push   0xc0021737
c0017127:	e8 2e d8 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001712c:	83 c4 10             	add    esp,0x10
c001712f:	eb 15                	jmp    c0017146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017131:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0017134:	84 d2                	test   dl,dl
c0017136:	75 0e                	jne    c0017146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017138:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001713c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017140:	77 04                	ja     c0017146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017142:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017146:	89 1e                	mov    DWORD PTR [esi],ebx
c0017148:	e9 e0 00 00 00       	jmp    c001722d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001714d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017152:	75 6e                	jne    c00171c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c0017154:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001715b:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001715f:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017163:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001716b:	74 17                	je     c0017184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001716d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017175:	74 0d                	je     c0017184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017177:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001717b:	83 e8 04             	sub    eax,0x4
c001717e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017182:	76 17                	jbe    c001719b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c0017184:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017189:	74 65                	je     c00171f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	68 53 17 02 c0       	push   0xc0021753
c0017193:	e8 c2 d7 ff ff       	call   c001495a <Krnl::panic(char const*)>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	8b 16                	mov    edx,DWORD PTR [esi]
c001719d:	84 db                	test   bl,bl
c001719f:	74 13                	je     c00171b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c00171a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171a5:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00171ac:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00171b0:	01 d0                	add    eax,edx
c00171b2:	eb 06                	jmp    c00171ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00171b4:	89 d0                	mov    eax,edx
c00171b6:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00171ba:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00171be:	89 06                	mov    DWORD PTR [esi],eax
c00171c0:	eb 6b                	jmp    c001722d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00171c2:	50                   	push   eax
c00171c3:	50                   	push   eax
c00171c4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00171c9:	50                   	push   eax
c00171ca:	68 6f 17 02 c0       	push   0xc002176f
c00171cf:	e8 f1 7a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00171d4:	83 c4 10             	add    esp,0x10
c00171d7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00171dc:	74 12                	je     c00171f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	68 7a 17 02 c0       	push   0xc002177a
c00171e6:	e8 6f d7 ff ff       	call   c001495a <Krnl::panic(char const*)>
c00171eb:	83 c4 10             	add    esp,0x10
c00171ee:	eb 3d                	jmp    c001722d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	55                   	push   ebp
c00171f4:	e8 bd 80 ff ff       	call   c000f2b6 <File::close()>
c00171f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00171ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017202:	59                   	pop    ecx
c0017203:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017207:	e8 22 4a ff ff       	call   c000bc2e <free>
c001720c:	5b                   	pop    ebx
c001720d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017211:	e8 18 4a ff ff       	call   c000bc2e <free>
c0017216:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017219:	e8 10 4a ff ff       	call   c000bc2e <free>
c001721e:	5e                   	pop    esi
c001721f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017223:	e8 06 4a ff ff       	call   c000bc2e <free>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	eb 21                	jmp    c001724e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001722d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017231:	e9 2b fd ff ff       	jmp    c0016f61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017236:	83 ec 0c             	sub    esp,0xc
c0017239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001723d:	e8 ec 49 ff ff       	call   c000bc2e <free>
c0017242:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017246:	83 c4 10             	add    esp,0x10
c0017249:	e9 a0 fc ff ff       	jmp    c0016eee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001724e:	31 c0                	xor    eax,eax
c0017250:	eb 33                	jmp    c0017285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c0017252:	83 ec 0c             	sub    esp,0xc
c0017255:	55                   	push   ebp
c0017256:	e8 5b 80 ff ff       	call   c000f2b6 <File::close()>
c001725b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001725e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017261:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017264:	58                   	pop    eax
c0017265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017269:	e8 c0 49 ff ff       	call   c000bc2e <free>
c001726e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017271:	e8 b8 49 ff ff       	call   c000bc2e <free>
c0017276:	5a                   	pop    edx
c0017277:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001727b:	e8 ae 49 ff ff       	call   c000bc2e <free>
c0017280:	83 c4 10             	add    esp,0x10
c0017283:	b0 01                	mov    al,0x1
c0017285:	81 c4 5c 03 00 00    	add    esp,0x35c
c001728b:	5b                   	pop    ebx
c001728c:	5e                   	pop    esi
c001728d:	5f                   	pop    edi
c001728e:	5d                   	pop    ebp
c001728f:	c3                   	ret    

c0017290 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017290:	56                   	push   esi
c0017291:	31 d2                	xor    edx,edx
c0017293:	53                   	push   ebx
c0017294:	8b 1d c0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023dc0
c001729a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001729e:	39 d3                	cmp    ebx,edx
c00172a0:	7e 1b                	jle    c00172bd <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00172a2:	8b 04 95 e0 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc020]
c00172a9:	39 c8                	cmp    eax,ecx
c00172ab:	77 0d                	ja     c00172ba <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00172ad:	8b 34 95 e0 3d 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc220]
c00172b4:	01 c6                	add    esi,eax
c00172b6:	39 ce                	cmp    esi,ecx
c00172b8:	77 05                	ja     c00172bf <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00172ba:	42                   	inc    edx
c00172bb:	eb e1                	jmp    c001729e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00172bd:	31 c0                	xor    eax,eax
c00172bf:	5b                   	pop    ebx
c00172c0:	5e                   	pop    esi
c00172c1:	c3                   	ret    

c00172c2 <Thr::getDriverNameFromAddress(unsigned long)>:
c00172c2:	53                   	push   ebx
c00172c3:	31 c0                	xor    eax,eax
c00172c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00172c9:	8b 1d c0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023dc0
c00172cf:	39 c3                	cmp    ebx,eax
c00172d1:	7e 22                	jle    c00172f5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00172d3:	8b 14 85 e0 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc020]
c00172da:	39 ca                	cmp    edx,ecx
c00172dc:	77 14                	ja     c00172f2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00172de:	03 14 85 e0 3d 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc220]
c00172e5:	39 ca                	cmp    edx,ecx
c00172e7:	76 09                	jbe    c00172f2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00172e9:	8b 04 85 e0 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe20]
c00172f0:	eb 05                	jmp    c00172f7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00172f2:	40                   	inc    eax
c00172f3:	eb da                	jmp    c00172cf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00172f5:	31 c0                	xor    eax,eax
c00172f7:	5b                   	pop    ebx
c00172f8:	c3                   	ret    

c00172f9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00172f9:	53                   	push   ebx
c00172fa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172fe:	53                   	push   ebx
c00172ff:	e8 8c ff ff ff       	call   c0017290 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017304:	5a                   	pop    edx
c0017305:	31 d2                	xor    edx,edx
c0017307:	85 c0                	test   eax,eax
c0017309:	74 04                	je     c001730f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001730b:	89 da                	mov    edx,ebx
c001730d:	29 c2                	sub    edx,eax
c001730f:	89 d0                	mov    eax,edx
c0017311:	5b                   	pop    ebx
c0017312:	c3                   	ret    

c0017313 <Thr::loadDLL(char const*, bool)>:
c0017313:	55                   	push   ebp
c0017314:	57                   	push   edi
c0017315:	56                   	push   esi
c0017316:	53                   	push   ebx
c0017317:	81 ec 24 01 00 00    	sub    esp,0x124
c001731d:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0017324:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001732b:	56                   	push   esi
c001732c:	68 92 17 02 c0       	push   0xc0021792
c0017331:	e8 8f 79 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017336:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001733d:	e8 94 78 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0017342:	83 c4 0c             	add    esp,0xc
c0017345:	89 c3                	mov    ebx,eax
c0017347:	ff 35 b4 45 02 c0    	push   DWORD PTR ds:0xc00245b4
c001734d:	56                   	push   esi
c001734e:	50                   	push   eax
c001734f:	e8 a0 7e ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0017354:	83 c4 0c             	add    esp,0xc
c0017357:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001735b:	50                   	push   eax
c001735c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017360:	50                   	push   eax
c0017361:	53                   	push   ebx
c0017362:	e8 9d 81 ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c0017367:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017369:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001736c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001736f:	83 c4 10             	add    esp,0x10
c0017372:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0017377:	75 0a                	jne    c0017383 <Thr::loadDLL(char const*, bool)+0x70>
c0017379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001737d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017381:	75 3e                	jne    c00173c1 <Thr::loadDLL(char const*, bool)+0xae>
c0017383:	89 f8                	mov    eax,edi
c0017385:	31 db                	xor    ebx,ebx
c0017387:	84 c0                	test   al,al
c0017389:	0f 84 ca 00 00 00    	je     c0017459 <Thr::loadDLL(char const*, bool)+0x146>
c001738f:	50                   	push   eax
c0017390:	50                   	push   eax
c0017391:	68 a3 17 02 c0       	push   0xc00217a3
c0017396:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001739a:	53                   	push   ebx
c001739b:	e8 07 93 fe ff       	call   c00006a7 <strcpy>
c00173a0:	58                   	pop    eax
c00173a1:	5a                   	pop    edx
c00173a2:	56                   	push   esi
c00173a3:	53                   	push   ebx
c00173a4:	e8 b5 93 fe ff       	call   c000075e <strcat>
c00173a9:	59                   	pop    ecx
c00173aa:	5d                   	pop    ebp
c00173ab:	68 b6 17 02 c0       	push   0xc00217b6
c00173b0:	53                   	push   ebx
c00173b1:	e8 a8 93 fe ff       	call   c000075e <strcat>
c00173b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00173b9:	e8 9c d5 ff ff       	call   c001495a <Krnl::panic(char const*)>
c00173be:	83 c4 10             	add    esp,0x10
c00173c1:	83 ec 0c             	sub    esp,0xc
c00173c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173c8:	e8 51 48 ff ff       	call   c000bc1e <malloc>
c00173cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00173d0:	89 c3                	mov    ebx,eax
c00173d2:	e8 4e 92 fe ff       	call   c0000625 <strlen>
c00173d7:	8b 2d c0 3d 02 c0    	mov    ebp,DWORD PTR ds:0xc0023dc0
c00173dd:	40                   	inc    eax
c00173de:	89 04 24             	mov    DWORD PTR [esp],eax
c00173e1:	e8 38 48 ff ff       	call   c000bc1e <malloc>
c00173e6:	89 04 ad e0 41 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdbe20],eax
c00173ed:	58                   	pop    eax
c00173ee:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00173f3:	5a                   	pop    edx
c00173f4:	56                   	push   esi
c00173f5:	ff 34 85 e0 41 02 c0 	push   DWORD PTR [eax*4-0x3ffdbe20]
c00173fc:	e8 a6 92 fe ff       	call   c00006a7 <strcpy>
c0017401:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0017406:	8d 50 01             	lea    edx,[eax+0x1]
c0017409:	89 1c 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],ebx
c0017410:	89 15 c0 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc0,edx
c0017416:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001741a:	59                   	pop    ecx
c001741b:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c0017422:	5d                   	pop    ebp
c0017423:	53                   	push   ebx
c0017424:	68 b8 17 02 c0       	push   0xc00217b8
c0017429:	e8 97 78 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001742e:	83 c4 0c             	add    esp,0xc
c0017431:	6a 01                	push   0x1
c0017433:	53                   	push   ebx
c0017434:	56                   	push   esi
c0017435:	e8 d5 f6 ff ff       	call   c0016b0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	84 c0                	test   al,al
c001743f:	75 18                	jne    c0017459 <Thr::loadDLL(char const*, bool)+0x146>
c0017441:	31 db                	xor    ebx,ebx
c0017443:	89 f8                	mov    eax,edi
c0017445:	84 c0                	test   al,al
c0017447:	74 10                	je     c0017459 <Thr::loadDLL(char const*, bool)+0x146>
c0017449:	83 ec 0c             	sub    esp,0xc
c001744c:	68 d7 17 02 c0       	push   0xc00217d7
c0017451:	e8 04 d5 ff ff       	call   c001495a <Krnl::panic(char const*)>
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	81 c4 1c 01 00 00    	add    esp,0x11c
c001745f:	89 d8                	mov    eax,ebx
c0017461:	5b                   	pop    ebx
c0017462:	5e                   	pop    esi
c0017463:	5f                   	pop    edi
c0017464:	5d                   	pop    ebp
c0017465:	c3                   	ret    

c0017466 <Thr::executeDLL(unsigned long, void*)>:
c0017466:	56                   	push   esi
c0017467:	53                   	push   ebx
c0017468:	51                   	push   ecx
c0017469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001746d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017471:	85 db                	test   ebx,ebx
c0017473:	75 10                	jne    c0017485 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017475:	83 ec 0c             	sub    esp,0xc
c0017478:	68 f6 17 02 c0       	push   0xc00217f6
c001747d:	e8 d8 d4 ff ff       	call   c001495a <Krnl::panic(char const*)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017489:	89 d8                	mov    eax,ebx
c001748b:	5a                   	pop    edx
c001748c:	5b                   	pop    ebx
c001748d:	5e                   	pop    esi
c001748e:	ff e0                	jmp    eax

c0017490 <changeTSS>:
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	e8 bc c7 ff ff       	call   c0013c54 <thisCPU()>
c0017498:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001749e:	83 ec 08             	sub    esp,0x8
c00174a1:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00174a4:	05 7c 11 00 00       	add    eax,0x117c
c00174a9:	c1 e1 15             	shl    ecx,0x15
c00174ac:	ba 00 00 e8 01       	mov    edx,0x1e80000
c00174b1:	29 ca                	sub    edx,ecx
c00174b3:	52                   	push   edx
c00174b4:	50                   	push   eax
c00174b5:	e8 90 61 ff ff       	call   c000d64a <TSS::setESP(unsigned long)>
c00174ba:	83 c4 1c             	add    esp,0x1c
c00174bd:	c3                   	ret    

c00174be <Process::addArgs(char**)>:
c00174be:	57                   	push   edi
c00174bf:	56                   	push   esi
c00174c0:	53                   	push   ebx
c00174c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174c5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00174c9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00174d3:	85 ff                	test   edi,edi
c00174d5:	74 3d                	je     c0017514 <Process::addArgs(char**)+0x56>
c00174d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00174d9:	85 c0                	test   eax,eax
c00174db:	74 37                	je     c0017514 <Process::addArgs(char**)+0x56>
c00174dd:	31 db                	xor    ebx,ebx
c00174df:	83 ec 0c             	sub    esp,0xc
c00174e2:	50                   	push   eax
c00174e3:	e8 3d 91 fe ff       	call   c0000625 <strlen>
c00174e8:	40                   	inc    eax
c00174e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00174ec:	e8 2d 47 ff ff       	call   c000bc1e <malloc>
c00174f1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00174f8:	5a                   	pop    edx
c00174f9:	59                   	pop    ecx
c00174fa:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00174fd:	43                   	inc    ebx
c00174fe:	50                   	push   eax
c00174ff:	e8 a3 91 fe ff       	call   c00006a7 <strcpy>
c0017504:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017510:	85 c0                	test   eax,eax
c0017512:	75 cb                	jne    c00174df <Process::addArgs(char**)+0x21>
c0017514:	5b                   	pop    ebx
c0017515:	5e                   	pop    esi
c0017516:	5f                   	pop    edi
c0017517:	c3                   	ret    

c0017518 <Process::Process(char const*, Process*, char**)>:
c0017518:	56                   	push   esi
c0017519:	53                   	push   ebx
c001751a:	83 ec 14             	sub    esp,0x14
c001751d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017521:	05 0c 02 00 00       	add    eax,0x20c
c0017526:	bb 07 00 00 00       	mov    ebx,0x7
c001752b:	89 c6                	mov    esi,eax
c001752d:	85 db                	test   ebx,ebx
c001752f:	78 12                	js     c0017543 <Process::Process(char const*, Process*, char**)+0x2b>
c0017531:	83 ec 0c             	sub    esp,0xc
c0017534:	56                   	push   esi
c0017535:	e8 30 76 00 00       	call   c001eb6a <ThreadControlBlock::ThreadControlBlock()>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	83 c6 63             	add    esi,0x63
c0017540:	4b                   	dec    ebx
c0017541:	eb ea                	jmp    c001752d <Process::Process(char const*, Process*, char**)+0x15>
c0017543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017547:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001754e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017552:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001755b:	a1 84 2b 02 c0       	mov    eax,ds:0xc0022b84
c0017560:	8d 50 01             	lea    edx,[eax+0x1]
c0017563:	89 15 84 2b 02 c0    	mov    DWORD PTR ds:0xc0022b84,edx
c0017569:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001756d:	89 02                	mov    DWORD PTR [edx],eax
c001756f:	83 ec 0c             	sub    esp,0xc
c0017572:	6a 10                	push   0x10
c0017574:	e8 5d 76 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	89 c3                	mov    ebx,eax
c001757e:	83 ec 08             	sub    esp,0x8
c0017581:	6a 00                	push   0x0
c0017583:	53                   	push   ebx
c0017584:	e8 e1 72 ff ff       	call   c000e86a <VAS::VAS(bool)>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017590:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001759a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00175a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175ac:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00175b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00175bc:	85 c0                	test   eax,eax
c00175be:	74 42                	je     c0017602 <Process::Process(char const*, Process*, char**)+0xea>
c00175c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175c4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00175ca:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00175d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175d4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00175da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175de:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00175e4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00175ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175ee:	05 0c 01 00 00       	add    eax,0x10c
c00175f3:	83 ec 08             	sub    esp,0x8
c00175f6:	52                   	push   edx
c00175f7:	50                   	push   eax
c00175f8:	e8 aa 90 fe ff       	call   c00006a7 <strcpy>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	eb 5c                	jmp    c001765e <Process::Process(char const*, Process*, char**)+0x146>
c0017602:	83 ec 0c             	sub    esp,0xc
c0017605:	68 60 12 00 00       	push   0x1260
c001760a:	e8 c7 75 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001760f:	83 c4 10             	add    esp,0x10
c0017612:	89 c3                	mov    ebx,eax
c0017614:	83 ec 08             	sub    esp,0x8
c0017617:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001761b:	53                   	push   ebx
c001761c:	e8 27 5d ff ff       	call   c000d348 <VgaText::VgaText(char const*)>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017628:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001762e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017632:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	50                   	push   eax
c001763c:	e8 08 51 ff ff       	call   c000c749 <addToTerminalCycle(VgaText*)>
c0017641:	83 c4 10             	add    esp,0x10
c0017644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017648:	05 0c 01 00 00       	add    eax,0x10c
c001764d:	83 ec 08             	sub    esp,0x8
c0017650:	68 20 18 02 c0       	push   0xc0021820
c0017655:	50                   	push   eax
c0017656:	e8 4c 90 fe ff       	call   c00006a7 <strcpy>
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017662:	83 c0 0c             	add    eax,0xc
c0017665:	83 ec 08             	sub    esp,0x8
c0017668:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001766c:	50                   	push   eax
c001766d:	e8 35 90 fe ff       	call   c00006a7 <strcpy>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	83 ec 08             	sub    esp,0x8
c0017678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001767c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017680:	e8 39 fe ff ff       	call   c00174be <Process::addArgs(char**)>
c0017685:	83 c4 10             	add    esp,0x10
c0017688:	83 ec 08             	sub    esp,0x8
c001768b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001768f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017693:	e8 3e ef ff ff       	call   c00165d6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017698:	83 c4 10             	add    esp,0x10
c001769b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001769f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176a3:	83 f0 01             	xor    eax,0x1
c00176a6:	88 c2                	mov    dl,al
c00176a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ac:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c00176b2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00176b7:	83 ec 08             	sub    esp,0x8
c00176ba:	50                   	push   eax
c00176bb:	68 1c 19 02 c0       	push   0xc002191c
c00176c0:	e8 00 76 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	90                   	nop
c00176c9:	83 c4 14             	add    esp,0x14
c00176cc:	5b                   	pop    ebx
c00176cd:	5e                   	pop    esi
c00176ce:	c3                   	ret    
c00176cf:	90                   	nop

c00176d0 <Process::Process(bool, char const*, Process*, char**)>:
c00176d0:	56                   	push   esi
c00176d1:	53                   	push   ebx
c00176d2:	83 ec 14             	sub    esp,0x14
c00176d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176d9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00176dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e1:	05 0c 02 00 00       	add    eax,0x20c
c00176e6:	bb 07 00 00 00       	mov    ebx,0x7
c00176eb:	89 c6                	mov    esi,eax
c00176ed:	85 db                	test   ebx,ebx
c00176ef:	78 12                	js     c0017703 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00176f1:	83 ec 0c             	sub    esp,0xc
c00176f4:	56                   	push   esi
c00176f5:	e8 70 74 00 00       	call   c001eb6a <ThreadControlBlock::ThreadControlBlock()>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	83 c6 63             	add    esi,0x63
c0017700:	4b                   	dec    ebx
c0017701:	eb ea                	jmp    c00176ed <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017707:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001770e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017712:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001771b:	a1 84 2b 02 c0       	mov    eax,ds:0xc0022b84
c0017720:	8d 50 01             	lea    edx,[eax+0x1]
c0017723:	89 15 84 2b 02 c0    	mov    DWORD PTR ds:0xc0022b84,edx
c0017729:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001772d:	89 02                	mov    DWORD PTR [edx],eax
c001772f:	83 ec 0c             	sub    esp,0xc
c0017732:	6a 10                	push   0x10
c0017734:	e8 9d 74 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	89 c3                	mov    ebx,eax
c001773e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017743:	83 ec 08             	sub    esp,0x8
c0017746:	50                   	push   eax
c0017747:	53                   	push   ebx
c0017748:	e8 1d 71 ff ff       	call   c000e86a <VAS::VAS(bool)>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017754:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001775a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001775e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017770:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001777a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017780:	85 c0                	test   eax,eax
c0017782:	74 42                	je     c00177c6 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017788:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001778e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017798:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001779e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00177a8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00177ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b2:	05 0c 01 00 00       	add    eax,0x10c
c00177b7:	83 ec 08             	sub    esp,0x8
c00177ba:	52                   	push   edx
c00177bb:	50                   	push   eax
c00177bc:	e8 e6 8e fe ff       	call   c00006a7 <strcpy>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	eb 5c                	jmp    c0017822 <Process::Process(bool, char const*, Process*, char**)+0x152>
c00177c6:	83 ec 0c             	sub    esp,0xc
c00177c9:	68 60 12 00 00       	push   0x1260
c00177ce:	e8 03 74 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	89 c3                	mov    ebx,eax
c00177d8:	83 ec 08             	sub    esp,0x8
c00177db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177df:	53                   	push   ebx
c00177e0:	e8 63 5b ff ff       	call   c000d348 <VgaText::VgaText(char const*)>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177ec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00177f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	50                   	push   eax
c0017800:	e8 44 4f ff ff       	call   c000c749 <addToTerminalCycle(VgaText*)>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780c:	05 0c 01 00 00       	add    eax,0x10c
c0017811:	83 ec 08             	sub    esp,0x8
c0017814:	68 20 18 02 c0       	push   0xc0021820
c0017819:	50                   	push   eax
c001781a:	e8 88 8e fe ff       	call   c00006a7 <strcpy>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017826:	83 c0 0c             	add    eax,0xc
c0017829:	83 ec 08             	sub    esp,0x8
c001782c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017830:	50                   	push   eax
c0017831:	e8 71 8e fe ff       	call   c00006a7 <strcpy>
c0017836:	83 c4 10             	add    esp,0x10
c0017839:	83 ec 08             	sub    esp,0x8
c001783c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017844:	e8 75 fc ff ff       	call   c00174be <Process::addArgs(char**)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	90                   	nop
c001784d:	83 c4 14             	add    esp,0x14
c0017850:	5b                   	pop    ebx
c0017851:	5e                   	pop    esi
c0017852:	c3                   	ret    

c0017853 <disableIRQs()>:
c0017853:	fa                   	cli    
c0017854:	ff 05 8c 45 02 c0    	inc    DWORD PTR ds:0xc002458c
c001785a:	c3                   	ret    

c001785b <getIRQNestingLevel()>:
c001785b:	a1 8c 45 02 c0       	mov    eax,ds:0xc002458c
c0017860:	c3                   	ret    

c0017861 <enableIRQs()>:
c0017861:	a1 8c 45 02 c0       	mov    eax,ds:0xc002458c
c0017866:	48                   	dec    eax
c0017867:	a3 8c 45 02 c0       	mov    ds:0xc002458c,eax
c001786c:	75 01                	jne    c001786f <enableIRQs()+0xe>
c001786e:	fb                   	sti    
c001786f:	c3                   	ret    

c0017870 <lockScheduler()>:
c0017870:	eb e1                	jmp    c0017853 <disableIRQs()>

c0017872 <unlockScheduler()>:
c0017872:	eb ed                	jmp    c0017861 <enableIRQs()>

c0017874 <userModeEntryPoint(void*)>:
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	e8 f6 ff ff ff       	call   c0017872 <unlockScheduler()>
c001787c:	fb                   	sti    
c001787d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017882:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017885:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001788b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001788f:	83 c4 0c             	add    esp,0xc
c0017892:	e9 4f 89 fe ff       	jmp    c00001e6 <goToUsermode>

c0017897 <lockStuff()>:
c0017897:	e8 b7 ff ff ff       	call   c0017853 <disableIRQs()>
c001789c:	ff 05 88 45 02 c0    	inc    DWORD PTR ds:0xc0024588
c00178a2:	c3                   	ret    

c00178a3 <taskStartupFunction>:
c00178a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178a8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00178ab:	c3                   	ret    

c00178ac <updateTimeUsed()>:
c00178ac:	57                   	push   edi
c00178ad:	56                   	push   esi
c00178ae:	53                   	push   ebx
c00178af:	e8 a0 c3 ff ff       	call   c0013c54 <thisCPU()>
c00178b4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00178bb:	74 49                	je     c0017906 <updateTimeUsed()+0x5a>
c00178bd:	0f 31                	rdtsc  
c00178bf:	89 c1                	mov    ecx,eax
c00178c1:	a3 c8 45 02 c0       	mov    ds:0xc00245c8,eax
c00178c6:	2b 0d b8 45 02 c0    	sub    ecx,DWORD PTR ds:0xc00245b8
c00178cc:	89 d3                	mov    ebx,edx
c00178ce:	89 0d c0 45 02 c0    	mov    DWORD PTR ds:0xc00245c0,ecx
c00178d4:	1b 1d bc 45 02 c0    	sbb    ebx,DWORD PTR ds:0xc00245bc
c00178da:	a3 b8 45 02 c0       	mov    ds:0xc00245b8,eax
c00178df:	89 1d c4 45 02 c0    	mov    DWORD PTR ds:0xc00245c4,ebx
c00178e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178ea:	89 15 cc 45 02 c0    	mov    DWORD PTR ds:0xc00245cc,edx
c00178f0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00178f3:	89 15 bc 45 02 c0    	mov    DWORD PTR ds:0xc00245bc,edx
c00178f9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00178fc:	01 f1                	add    ecx,esi
c00178fe:	11 fb                	adc    ebx,edi
c0017900:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017903:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017906:	5b                   	pop    ebx
c0017907:	5e                   	pop    esi
c0017908:	5f                   	pop    edi
c0017909:	c3                   	ret    

c001790a <switchToThread(ThreadControlBlock*)>:
c001790a:	53                   	push   ebx
c001790b:	83 ec 08             	sub    esp,0x8
c001790e:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0017913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017917:	85 c0                	test   eax,eax
c0017919:	75 30                	jne    c001794b <switchToThread(ThreadControlBlock*)+0x41>
c001791b:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001791e:	3c ff                	cmp    al,0xff
c0017920:	74 25                	je     c0017947 <switchToThread(ThreadControlBlock*)+0x3d>
c0017922:	0f b6 d0             	movzx  edx,al
c0017925:	b8 84 03 00 00       	mov    eax,0x384
c001792a:	29 d0                	sub    eax,edx
c001792c:	c1 e0 10             	shl    eax,0x10
c001792f:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017932:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017935:	e8 72 ff ff ff       	call   c00178ac <updateTimeUsed()>
c001793a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001793e:	83 c4 08             	add    esp,0x8
c0017941:	5b                   	pop    ebx
c0017942:	e9 d8 88 fe ff       	jmp    c000021f <switchToThreadASM>
c0017947:	31 c0                	xor    eax,eax
c0017949:	eb e7                	jmp    c0017932 <switchToThread(ThreadControlBlock*)+0x28>
c001794b:	c7 05 84 45 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024584,0x1
c0017955:	83 c4 08             	add    esp,0x8
c0017958:	5b                   	pop    ebx
c0017959:	c3                   	ret    

c001795a <Semaphore::Semaphore(int)>:
c001795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001795e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017962:	89 10                	mov    DWORD PTR [eax],edx
c0017964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017968:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001796f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017973:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001797a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001797e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017985:	90                   	nop
c0017986:	c3                   	ret    
c0017987:	90                   	nop

c0017988 <Mutex::Mutex()>:
c0017988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001798c:	6a 01                	push   0x1
c001798e:	50                   	push   eax
c001798f:	e8 c6 ff ff ff       	call   c001795a <Semaphore::Semaphore(int)>
c0017994:	83 c4 08             	add    esp,0x8
c0017997:	90                   	nop
c0017998:	c3                   	ret    
c0017999:	90                   	nop

c001799a <Process::createThread(void (*)(void*), void*, int)>:
c001799a:	55                   	push   ebp
c001799b:	31 c9                	xor    ecx,ecx
c001799d:	57                   	push   edi
c001799e:	56                   	push   esi
c001799f:	53                   	push   ebx
c00179a0:	83 ec 1c             	sub    esp,0x1c
c00179a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00179a7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c00179ae:	89 f2                	mov    edx,esi
c00179b0:	0f b7 c2             	movzx  eax,dx
c00179b3:	83 e2 01             	and    edx,0x1
c00179b6:	74 14                	je     c00179cc <Process::createThread(void (*)(void*), void*, int)+0x32>
c00179b8:	d1 f8                	sar    eax,1
c00179ba:	41                   	inc    ecx
c00179bb:	89 c2                	mov    edx,eax
c00179bd:	83 f9 10             	cmp    ecx,0x10
c00179c0:	75 ee                	jne    c00179b0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c00179c2:	83 c4 1c             	add    esp,0x1c
c00179c5:	31 c0                	xor    eax,eax
c00179c7:	5b                   	pop    ebx
c00179c8:	5e                   	pop    esi
c00179c9:	5f                   	pop    edi
c00179ca:	5d                   	pop    ebp
c00179cb:	c3                   	ret    
c00179cc:	83 ec 08             	sub    esp,0x8
c00179cf:	b8 01 00 00 00       	mov    eax,0x1
c00179d4:	d3 e0                	shl    eax,cl
c00179d6:	09 c6                	or     esi,eax
c00179d8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00179de:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c00179e5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c00179e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00179eb:	01 ce                	add    esi,ecx
c00179ed:	89 f0                	mov    eax,esi
c00179ef:	c1 e0 05             	shl    eax,0x5
c00179f2:	01 c6                	add    esi,eax
c00179f4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00179f7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00179fd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017a03:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a07:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017a0d:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017a13:	89 ca                	mov    edx,ecx
c0017a15:	f7 da                	neg    edx
c0017a17:	c1 e2 15             	shl    edx,0x15
c0017a1a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017a20:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017a26:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017a2a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017a34:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017a3a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a3e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017a44:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017a4e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017a58:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017a5f:	50                   	push   eax
c0017a60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a64:	68 a8 45 02 c0       	push   0xc00245a8
c0017a69:	e8 54 6f 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017a6e:	83 c4 10             	add    esp,0x10
c0017a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a75:	83 c4 1c             	add    esp,0x1c
c0017a78:	5b                   	pop    ebx
c0017a79:	5e                   	pop    esi
c0017a7a:	5f                   	pop    edi
c0017a7b:	5d                   	pop    ebp
c0017a7c:	c3                   	ret    
c0017a7d:	90                   	nop

c0017a7e <Process::createUserThread()>:
c0017a7e:	83 ec 0c             	sub    esp,0xc
c0017a81:	68 80 00 00 00       	push   0x80
c0017a86:	6a 00                	push   0x0
c0017a88:	68 74 78 01 c0       	push   0xc0017874
c0017a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a91:	e8 04 ff ff ff       	call   c001799a <Process::createThread(void (*)(void*), void*, int)>
c0017a96:	83 c4 1c             	add    esp,0x1c
c0017a99:	c3                   	ret    

c0017a9a <setupMultitasking(void (*)())>:
c0017a9a:	56                   	push   esi
c0017a9b:	53                   	push   ebx
c0017a9c:	53                   	push   ebx
c0017a9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017aa1:	eb 10                	jmp    c0017ab3 <setupMultitasking(void (*)())+0x19>
c0017aa3:	83 ec 0c             	sub    esp,0xc
c0017aa6:	68 a8 45 02 c0       	push   0xc00245a8
c0017aab:	e8 64 6e 00 00       	call   c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017ab0:	83 c4 10             	add    esp,0x10
c0017ab3:	83 ec 0c             	sub    esp,0xc
c0017ab6:	68 a8 45 02 c0       	push   0xc00245a8
c0017abb:	e8 38 6e 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ac0:	83 c4 10             	add    esp,0x10
c0017ac3:	84 c0                	test   al,al
c0017ac5:	74 dc                	je     c0017aa3 <setupMultitasking(void (*)())+0x9>
c0017ac7:	83 ec 0c             	sub    esp,0xc
c0017aca:	68 3b 07 00 00       	push   0x73b
c0017acf:	e8 02 71 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0017ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017adb:	89 c3                	mov    ebx,eax
c0017add:	6a 00                	push   0x0
c0017adf:	68 24 18 02 c0       	push   0xc0021824
c0017ae4:	6a 01                	push   0x1
c0017ae6:	50                   	push   eax
c0017ae7:	e8 e4 fb ff ff       	call   c00176d0 <Process::Process(bool, char const*, Process*, char**)>
c0017aec:	83 c4 18             	add    esp,0x18
c0017aef:	89 1d b4 45 02 c0    	mov    DWORD PTR ds:0xc00245b4,ebx
c0017af5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017afb:	68 44 19 02 c0       	push   0xc0021944
c0017b00:	e8 c0 71 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017b05:	58                   	pop    eax
c0017b06:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017b0c:	e8 ac 53 ff ff       	call   c000cebd <setActiveTerminal(VgaText*)>
c0017b11:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017b19:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017b1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017b22:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017b2c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017b32:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017b38:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017b42:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017b4c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017b56:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017b5c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017b62:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017b6c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017b72:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017b7c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017b82:	5a                   	pop    edx
c0017b83:	59                   	pop    ecx
c0017b84:	68 20 18 02 c0       	push   0xc0021820
c0017b89:	50                   	push   eax
c0017b8a:	e8 18 8b fe ff       	call   c00006a7 <strcpy>
c0017b8f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017b96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017b9a:	83 c4 14             	add    esp,0x14
c0017b9d:	5b                   	pop    ebx
c0017b9e:	5e                   	pop    esi
c0017b9f:	e9 6d 86 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017ba4 <schedule()>:
c0017ba4:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0017ba9:	85 c0                	test   eax,eax
c0017bab:	74 0b                	je     c0017bb8 <schedule()+0x14>
c0017bad:	c7 05 84 45 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024584,0x1
c0017bb7:	c3                   	ret    
c0017bb8:	53                   	push   ebx
c0017bb9:	83 ec 14             	sub    esp,0x14
c0017bbc:	68 a8 45 02 c0       	push   0xc00245a8
c0017bc1:	e8 32 6d 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	84 c0                	test   al,al
c0017bcb:	75 38                	jne    c0017c05 <schedule()+0x61>
c0017bcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017bd5:	4a                   	dec    edx
c0017bd6:	74 32                	je     c0017c0a <schedule()+0x66>
c0017bd8:	83 ec 0c             	sub    esp,0xc
c0017bdb:	68 a8 45 02 c0       	push   0xc00245a8
c0017be0:	e8 0b 6d 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017be5:	c7 04 24 a8 45 02 c0 	mov    DWORD PTR [esp],0xc00245a8
c0017bec:	89 c3                	mov    ebx,eax
c0017bee:	e8 21 6d 00 00       	call   c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017bf3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017bfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bfd:	e8 08 fd ff ff       	call   c001790a <switchToThread(ThreadControlBlock*)>
c0017c02:	83 c4 10             	add    esp,0x10
c0017c05:	83 c4 08             	add    esp,0x8
c0017c08:	5b                   	pop    ebx
c0017c09:	c3                   	ret    
c0017c0a:	83 ec 08             	sub    esp,0x8
c0017c0d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017c14:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017c1a:	68 a8 45 02 c0       	push   0xc00245a8
c0017c1f:	e8 9e 6d 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	eb af                	jmp    c0017bd8 <schedule()+0x34>

c0017c29 <unlockStuff()>:
c0017c29:	a1 88 45 02 c0       	mov    eax,ds:0xc0024588
c0017c2e:	48                   	dec    eax
c0017c2f:	a3 88 45 02 c0       	mov    ds:0xc0024588,eax
c0017c34:	75 09                	jne    c0017c3f <unlockStuff()+0x16>
c0017c36:	a1 84 45 02 c0       	mov    eax,ds:0xc0024584
c0017c3b:	85 c0                	test   eax,eax
c0017c3d:	75 05                	jne    c0017c44 <unlockStuff()+0x1b>
c0017c3f:	e9 1d fc ff ff       	jmp    c0017861 <enableIRQs()>
c0017c44:	83 ec 0c             	sub    esp,0xc
c0017c47:	c7 05 84 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024584,0x0
c0017c51:	e8 4e ff ff ff       	call   c0017ba4 <schedule()>
c0017c56:	83 c4 0c             	add    esp,0xc
c0017c59:	e9 03 fc ff ff       	jmp    c0017861 <enableIRQs()>

c0017c5e <Semaphore::tryAcquire()>:
c0017c5e:	83 ec 0c             	sub    esp,0xc
c0017c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c65:	e8 2d fc ff ff       	call   c0017897 <lockStuff()>
c0017c6a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017c6d:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017c6f:	7c 0b                	jl     c0017c7c <Semaphore::tryAcquire()+0x1e>
c0017c71:	e8 b3 ff ff ff       	call   c0017c29 <unlockStuff()>
c0017c76:	31 c0                	xor    eax,eax
c0017c78:	83 c4 0c             	add    esp,0xc
c0017c7b:	c3                   	ret    
c0017c7c:	42                   	inc    edx
c0017c7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017c80:	e8 a4 ff ff ff       	call   c0017c29 <unlockStuff()>
c0017c85:	b0 01                	mov    al,0x1
c0017c87:	83 c4 0c             	add    esp,0xc
c0017c8a:	c3                   	ret    
c0017c8b:	90                   	nop

c0017c8c <Semaphore::assertLocked(char const*)>:
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c97:	e8 fb fb ff ff       	call   c0017897 <lockStuff()>
c0017c9c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017c9e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017ca1:	7c 05                	jl     c0017ca8 <Semaphore::assertLocked(char const*)+0x1c>
c0017ca3:	83 c4 0c             	add    esp,0xc
c0017ca6:	eb 81                	jmp    c0017c29 <unlockStuff()>
c0017ca8:	83 ec 0c             	sub    esp,0xc
c0017cab:	52                   	push   edx
c0017cac:	e8 a9 cc ff ff       	call   c001495a <Krnl::panic(char const*)>
c0017cb1:	83 c4 10             	add    esp,0x10
c0017cb4:	83 c4 0c             	add    esp,0xc
c0017cb7:	e9 6d ff ff ff       	jmp    c0017c29 <unlockStuff()>

c0017cbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017cbc:	83 ec 0c             	sub    esp,0xc
c0017cbf:	e8 97 fb ff ff       	call   c001785b <getIRQNestingLevel()>
c0017cc4:	83 ec 08             	sub    esp,0x8
c0017cc7:	50                   	push   eax
c0017cc8:	68 78 19 02 c0       	push   0xc0021978
c0017ccd:	e8 f3 6f ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017cd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cdb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017cde:	e8 c1 fe ff ff       	call   c0017ba4 <schedule()>
c0017ce3:	e8 8a fb ff ff       	call   c0017872 <unlockScheduler()>
c0017ce8:	e8 6e fb ff ff       	call   c001785b <getIRQNestingLevel()>
c0017ced:	5a                   	pop    edx
c0017cee:	59                   	pop    ecx
c0017cef:	50                   	push   eax
c0017cf0:	68 ac 19 02 c0       	push   0xc00219ac
c0017cf5:	e8 cb 6f ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017cfa:	83 c4 1c             	add    esp,0x1c
c0017cfd:	c3                   	ret    

c0017cfe <blockTask(TaskState)>:
c0017cfe:	83 ec 0c             	sub    esp,0xc
c0017d01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d05:	e8 66 fb ff ff       	call   c0017870 <lockScheduler()>
c0017d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017d12:	e8 8d fe ff ff       	call   c0017ba4 <schedule()>
c0017d17:	83 c4 0c             	add    esp,0xc
c0017d1a:	e9 53 fb ff ff       	jmp    c0017872 <unlockScheduler()>

c0017d1f <waitTask(int, int*, int)>:
c0017d1f:	83 ec 18             	sub    esp,0x18
c0017d22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d2b:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017d2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d37:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017d3a:	6a 07                	push   0x7
c0017d3c:	e8 bd ff ff ff       	call   c0017cfe <blockTask(TaskState)>
c0017d41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017d4c:	85 d2                	test   edx,edx
c0017d4e:	74 0a                	je     c0017d5a <waitTask(int, int*, int)+0x3b>
c0017d50:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017d53:	89 02                	mov    DWORD PTR [edx],eax
c0017d55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d5a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017d5d:	83 c4 0c             	add    esp,0xc
c0017d60:	c3                   	ret    

c0017d61 <nanoSleepUntil(unsigned long long)>:
c0017d61:	83 ec 0c             	sub    esp,0xc
c0017d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d6c:	3b 05 d0 37 02 c0    	cmp    eax,DWORD PTR ds:0xc00237d0
c0017d72:	89 d1                	mov    ecx,edx
c0017d74:	1b 0d d4 37 02 c0    	sbb    ecx,DWORD PTR ds:0xc00237d4
c0017d7a:	73 04                	jae    c0017d80 <nanoSleepUntil(unsigned long long)+0x1f>
c0017d7c:	83 c4 0c             	add    esp,0xc
c0017d7f:	c3                   	ret    
c0017d80:	e8 12 fb ff ff       	call   c0017897 <lockStuff()>
c0017d85:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017d8b:	83 ec 08             	sub    esp,0x8
c0017d8e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017d91:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017d94:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017d9a:	68 9c 45 02 c0       	push   0xc002459c
c0017d9f:	e8 1e 6c 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017da4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017dab:	e8 4e ff ff ff       	call   c0017cfe <blockTask(TaskState)>
c0017db0:	83 c4 1c             	add    esp,0x1c
c0017db3:	e9 71 fe ff ff       	jmp    c0017c29 <unlockStuff()>

c0017db8 <nanoSleep(unsigned long long)>:
c0017db8:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0017dbd:	8b 15 d4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237d4
c0017dc3:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017dc7:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017dcb:	eb 94                	jmp    c0017d61 <nanoSleepUntil(unsigned long long)>

c0017dcd <sleep(unsigned long long)>:
c0017dcd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017dd5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017dda:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017dde:	01 ca                	add    edx,ecx
c0017de0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017de4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017de8:	eb ce                	jmp    c0017db8 <nanoSleep(unsigned long long)>

c0017dea <Semaphore::acquire()>:
c0017dea:	83 ec 0c             	sub    esp,0xc
c0017ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017df1:	e8 a1 fa ff ff       	call   c0017897 <lockStuff()>
c0017df6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017df9:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017dfb:	7d 0c                	jge    c0017e09 <Semaphore::acquire()+0x1f>
c0017dfd:	42                   	inc    edx
c0017dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017e01:	83 c4 0c             	add    esp,0xc
c0017e04:	e9 20 fe ff ff       	jmp    c0017c29 <unlockStuff()>
c0017e09:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e0f:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017e16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017e19:	85 d2                	test   edx,edx
c0017e1b:	74 2a                	je     c0017e47 <Semaphore::acquire()+0x5d>
c0017e1d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017e20:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017e26:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017e29:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e2f:	83 ec 0c             	sub    esp,0xc
c0017e32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017e35:	6a 05                	push   0x5
c0017e37:	e8 c2 fe ff ff       	call   c0017cfe <blockTask(TaskState)>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	83 c4 0c             	add    esp,0xc
c0017e42:	e9 e2 fd ff ff       	jmp    c0017c29 <unlockStuff()>
c0017e47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017e50:	eb d7                	jmp    c0017e29 <Semaphore::acquire()+0x3f>

c0017e52 <taskReturned>:
c0017e52:	83 ec 18             	sub    esp,0x18
c0017e55:	68 e0 19 02 c0       	push   0xc00219e0
c0017e5a:	e8 fb ca ff ff       	call   c001495a <Krnl::panic(char const*)>
c0017e5f:	83 c4 10             	add    esp,0x10
c0017e62:	83 ec 0c             	sub    esp,0xc
c0017e65:	6a 02                	push   0x2
c0017e67:	e8 92 fe ff ff       	call   c0017cfe <blockTask(TaskState)>
c0017e6c:	e8 ff f9 ff ff       	call   c0017870 <lockScheduler()>
c0017e71:	e8 2e fd ff ff       	call   c0017ba4 <schedule()>
c0017e76:	e8 f7 f9 ff ff       	call   c0017872 <unlockScheduler()>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	eb e2                	jmp    c0017e62 <taskReturned+0x10>

c0017e80 <unblockTask(ThreadControlBlock*)>:
c0017e80:	53                   	push   ebx
c0017e81:	83 ec 08             	sub    esp,0x8
c0017e84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e88:	e8 e3 f9 ff ff       	call   c0017870 <lockScheduler()>
c0017e8d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e90:	85 c0                	test   eax,eax
c0017e92:	74 5c                	je     c0017ef0 <unblockTask(ThreadControlBlock*)+0x70>
c0017e94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e97:	48                   	dec    eax
c0017e98:	74 31                	je     c0017ecb <unblockTask(ThreadControlBlock*)+0x4b>
c0017e9a:	83 ec 0c             	sub    esp,0xc
c0017e9d:	68 a8 45 02 c0       	push   0xc00245a8
c0017ea2:	e8 49 6a 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017ea7:	83 c4 10             	add    esp,0x10
c0017eaa:	85 c0                	test   eax,eax
c0017eac:	75 17                	jne    c0017ec5 <unblockTask(ThreadControlBlock*)+0x45>
c0017eae:	eb 65                	jmp    c0017f15 <unblockTask(ThreadControlBlock*)+0x95>
c0017eb0:	83 ec 08             	sub    esp,0x8
c0017eb3:	50                   	push   eax
c0017eb4:	68 a8 45 02 c0       	push   0xc00245a8
c0017eb9:	e8 42 6d 00 00       	call   c001ec00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	85 c0                	test   eax,eax
c0017ec3:	74 50                	je     c0017f15 <unblockTask(ThreadControlBlock*)+0x95>
c0017ec5:	39 c3                	cmp    ebx,eax
c0017ec7:	75 e7                	jne    c0017eb0 <unblockTask(ThreadControlBlock*)+0x30>
c0017ec9:	eb 1c                	jmp    c0017ee7 <unblockTask(ThreadControlBlock*)+0x67>
c0017ecb:	83 ec 0c             	sub    esp,0xc
c0017ece:	68 d0 1a 02 c0       	push   0xc0021ad0
c0017ed3:	e8 ed 6d ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017ed8:	c7 04 24 5c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a5c
c0017edf:	e8 e1 6d ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	83 c4 08             	add    esp,0x8
c0017eea:	5b                   	pop    ebx
c0017eeb:	e9 82 f9 ff ff       	jmp    c0017872 <unlockScheduler()>
c0017ef0:	83 ec 0c             	sub    esp,0xc
c0017ef3:	68 14 1a 02 c0       	push   0xc0021a14
c0017ef8:	e8 c8 6d ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017efd:	c7 04 24 5c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a5c
c0017f04:	e8 bc 6d ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	83 c4 08             	add    esp,0x8
c0017f0f:	5b                   	pop    ebx
c0017f10:	e9 5d f9 ff ff       	jmp    c0017872 <unlockScheduler()>
c0017f15:	83 ec 08             	sub    esp,0x8
c0017f18:	53                   	push   ebx
c0017f19:	68 a8 45 02 c0       	push   0xc00245a8
c0017f1e:	e8 9f 6a 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f23:	83 c4 10             	add    esp,0x10
c0017f26:	83 c4 08             	add    esp,0x8
c0017f29:	5b                   	pop    ebx
c0017f2a:	e9 43 f9 ff ff       	jmp    c0017872 <unlockScheduler()>

c0017f2f <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017f2f:	55                   	push   ebp
c0017f30:	57                   	push   edi
c0017f31:	56                   	push   esi
c0017f32:	53                   	push   ebx
c0017f33:	83 ec 1c             	sub    esp,0x1c
c0017f36:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017f3a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017f3d:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0017f43:	85 c9                	test   ecx,ecx
c0017f45:	7e 20                	jle    c0017f67 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0017f47:	31 f6                	xor    esi,esi
c0017f49:	83 ec 0c             	sub    esp,0xc
c0017f4c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0017f53:	46                   	inc    esi
c0017f54:	e8 d5 3c ff ff       	call   c000bc2e <free>
c0017f59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0017f65:	7f e2                	jg     c0017f49 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0017f67:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017f71:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017f76:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017f79:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017f7c:	d3 c0                	rol    eax,cl
c0017f7e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0017f85:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017f88:	89 f7                	mov    edi,esi
c0017f8a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0017f92:	0f 85 4f 01 00 00    	jne    c00180e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017f98:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017f9e:	85 c0                	test   eax,eax
c0017fa0:	0f 84 aa 00 00 00    	je     c0018050 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017fa6:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017fa9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017fad:	31 c9                	xor    ecx,ecx
c0017faf:	eb 10                	jmp    c0017fc1 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0017fb1:	41                   	inc    ecx
c0017fb2:	83 f9 10             	cmp    ecx,0x10
c0017fb5:	0f 84 95 00 00 00    	je     c0018050 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017fbb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017fc1:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0017fc8:	d3 fa                	sar    edx,cl
c0017fca:	83 e2 01             	and    edx,0x1
c0017fcd:	74 e2                	je     c0017fb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017fcf:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017fd2:	01 ca                	add    edx,ecx
c0017fd4:	89 d5                	mov    ebp,edx
c0017fd6:	c1 e5 05             	shl    ebp,0x5
c0017fd9:	01 ea                	add    edx,ebp
c0017fdb:	01 d0                	add    eax,edx
c0017fdd:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017fe3:	83 fd 07             	cmp    ebp,0x7
c0017fe6:	75 c9                	jne    c0017fb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017fe8:	05 40 02 00 00       	add    eax,0x240
c0017fed:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017ff0:	83 fd ff             	cmp    ebp,0xffffffff
c0017ff3:	0f 8c 08 01 00 00    	jl     c0018101 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0017ff9:	0f 84 b9 01 00 00    	je     c00181b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0017fff:	85 ed                	test   ebp,ebp
c0018001:	0f 84 a0 01 00 00    	je     c00181a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018007:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018009:	75 a6                	jne    c0017fb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001800b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018011:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018015:	01 d0                	add    eax,edx
c0018017:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001801b:	83 ec 0c             	sub    esp,0xc
c001801e:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018024:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018027:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001802d:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018034:	50                   	push   eax
c0018035:	e8 46 fe ff ff       	call   c0017e80 <unblockTask(ThreadControlBlock*)>
c001803a:	83 c4 10             	add    esp,0x10
c001803d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018040:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018044:	89 f7                	mov    edi,esi
c0018046:	41                   	inc    ecx
c0018047:	83 f9 10             	cmp    ecx,0x10
c001804a:	0f 85 6b ff ff ff    	jne    c0017fbb <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018050:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018056:	85 c0                	test   eax,eax
c0018058:	74 5d                	je     c00180b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001805a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018060:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018066:	74 4f                	je     c00180b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	68 a8 45 02 c0       	push   0xc00245a8
c0018070:	e8 7b 68 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018075:	c7 04 24 a8 45 02 c0 	mov    DWORD PTR [esp],0xc00245a8
c001807c:	89 c7                	mov    edi,eax
c001807e:	e8 75 68 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018083:	83 c4 10             	add    esp,0x10
c0018086:	84 c0                	test   al,al
c0018088:	0f 84 e4 00 00 00    	je     c0018172 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001808e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018091:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018097:	85 d2                	test   edx,edx
c0018099:	74 0f                	je     c00180aa <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001809b:	83 ec 0c             	sub    esp,0xc
c001809e:	8b 02                	mov    eax,DWORD PTR [edx]
c00180a0:	52                   	push   edx
c00180a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180a4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00180a7:	83 c4 10             	add    esp,0x10
c00180aa:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00180b4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00180b7:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00180bd:	85 db                	test   ebx,ebx
c00180bf:	74 16                	je     c00180d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00180c1:	83 ec 0c             	sub    esp,0xc
c00180c4:	53                   	push   ebx
c00180c5:	e8 90 61 ff ff       	call   c000e25a <VAS::~VAS()>
c00180ca:	58                   	pop    eax
c00180cb:	5a                   	pop    edx
c00180cc:	6a 10                	push   0x10
c00180ce:	53                   	push   ebx
c00180cf:	e8 11 6b ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	68 2b 18 02 c0       	push   0xc002182b
c00180df:	e8 e1 6b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	83 ec 08             	sub    esp,0x8
c00180ea:	68 3b 07 00 00       	push   0x73b
c00180ef:	68 39 18 02 c0       	push   0xc0021839
c00180f4:	e8 cc 6b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00180f9:	83 c4 2c             	add    esp,0x2c
c00180fc:	5b                   	pop    ebx
c00180fd:	5e                   	pop    esi
c00180fe:	5f                   	pop    edi
c00180ff:	5d                   	pop    ebp
c0018100:	c3                   	ret    
c0018101:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018105:	83 ec 0c             	sub    esp,0xc
c0018108:	68 14 1b 02 c0       	push   0xc0021b14
c001810d:	e8 48 c8 ff ff       	call   c001495a <Krnl::panic(char const*)>
c0018112:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018115:	83 c4 10             	add    esp,0x10
c0018118:	89 f7                	mov    edi,esi
c001811a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001811e:	e9 8e fe ff ff       	jmp    c0017fb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018123:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018129:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001812f:	75 1c                	jne    c001814d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	68 7c 1b 02 c0       	push   0xc0021b7c
c0018139:	e8 87 6b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001813e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018145:	e8 b4 fb ff ff       	call   c0017cfe <blockTask(TaskState)>
c001814a:	83 c4 10             	add    esp,0x10
c001814d:	83 ec 08             	sub    esp,0x8
c0018150:	56                   	push   esi
c0018151:	68 a8 45 02 c0       	push   0xc00245a8
c0018156:	e8 67 68 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001815b:	c7 04 24 a8 45 02 c0 	mov    DWORD PTR [esp],0xc00245a8
c0018162:	e8 89 67 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	39 f8                	cmp    eax,edi
c001816c:	0f 84 1c ff ff ff    	je     c001808e <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018172:	83 ec 0c             	sub    esp,0xc
c0018175:	68 a8 45 02 c0       	push   0xc00245a8
c001817a:	e8 71 67 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001817f:	c7 04 24 a8 45 02 c0 	mov    DWORD PTR [esp],0xc00245a8
c0018186:	89 c6                	mov    esi,eax
c0018188:	e8 87 67 00 00       	call   c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	39 f3                	cmp    ebx,esi
c0018192:	74 b9                	je     c001814d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018194:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018197:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001819a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00181a0:	75 ab                	jne    c001814d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00181a2:	e9 7c ff ff ff       	jmp    c0018123 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00181a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00181ab:	83 ec 0c             	sub    esp,0xc
c00181ae:	68 48 1b 02 c0       	push   0xc0021b48
c00181b3:	e9 55 ff ff ff       	jmp    c001810d <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c00181b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00181ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00181be:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00181c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00181c4:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00181ca:	01 d7                	add    edi,edx
c00181cc:	89 f8                	mov    eax,edi
c00181ce:	e9 44 fe ff ff       	jmp    c0018017 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c00181d3 <cleanerTaskFunction(void*)>:
c00181d3:	53                   	push   ebx
c00181d4:	83 ec 08             	sub    esp,0x8
c00181d7:	e8 96 f6 ff ff       	call   c0017872 <unlockScheduler()>
c00181dc:	e8 8f f6 ff ff       	call   c0017870 <lockScheduler()>
c00181e1:	80 3d 6c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002456c,0x0
c00181e8:	0f 85 8e 00 00 00    	jne    c001827c <cleanerTaskFunction(void*)+0xa9>
c00181ee:	83 ec 0c             	sub    esp,0xc
c00181f1:	6a 02                	push   0x2
c00181f3:	e8 c4 fa ff ff       	call   c0017cbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00181f8:	83 c4 10             	add    esp,0x10
c00181fb:	c6 05 6c 45 02 c0 00 	mov    BYTE PTR ds:0xc002456c,0x0
c0018202:	e8 90 f6 ff ff       	call   c0017897 <lockStuff()>
c0018207:	e8 64 f6 ff ff       	call   c0017870 <lockScheduler()>
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	68 90 45 02 c0       	push   0xc0024590
c0018214:	e8 df 66 00 00       	call   c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	84 c0                	test   al,al
c001821e:	75 40                	jne    c0018260 <cleanerTaskFunction(void*)+0x8d>
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	68 90 45 02 c0       	push   0xc0024590
c0018228:	e8 c3 66 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001822d:	c7 04 24 90 45 02 c0 	mov    DWORD PTR [esp],0xc0024590
c0018234:	89 c3                	mov    ebx,eax
c0018236:	e8 d9 66 00 00       	call   c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001823b:	c7 04 24 4f 18 02 c0 	mov    DWORD PTR [esp],0xc002184f
c0018242:	e8 7e 6a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001824a:	e8 e0 fc ff ff       	call   c0017f2f <cleanupTerminatedTask(ThreadControlBlock*)>
c001824f:	c7 04 24 68 18 02 c0 	mov    DWORD PTR [esp],0xc0021868
c0018256:	e8 6a 6a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	eb ac                	jmp    c001820c <cleanerTaskFunction(void*)+0x39>
c0018260:	e8 0d f6 ff ff       	call   c0017872 <unlockScheduler()>
c0018265:	e8 bf f9 ff ff       	call   c0017c29 <unlockStuff()>
c001826a:	e8 01 f6 ff ff       	call   c0017870 <lockScheduler()>
c001826f:	80 3d 6c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002456c,0x0
c0018276:	0f 84 72 ff ff ff    	je     c00181ee <cleanerTaskFunction(void*)+0x1b>
c001827c:	e8 f1 f5 ff ff       	call   c0017872 <unlockScheduler()>
c0018281:	e9 75 ff ff ff       	jmp    c00181fb <cleanerTaskFunction(void*)+0x28>

c0018286 <terminateTask(int)>:
c0018286:	83 ec 14             	sub    esp,0x14
c0018289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001828e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018291:	83 c0 0c             	add    eax,0xc
c0018294:	50                   	push   eax
c0018295:	68 a4 1b 02 c0       	push   0xc0021ba4
c001829a:	e8 26 6a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001829f:	e8 f3 f5 ff ff       	call   c0017897 <lockStuff()>
c00182a4:	e8 c7 f5 ff ff       	call   c0017870 <lockScheduler()>
c00182a9:	c7 04 24 7b 18 02 c0 	mov    DWORD PTR [esp],0xc002187b
c00182b0:	e8 10 6a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00182b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182be:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00182c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182c6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00182c9:	5a                   	pop    edx
c00182ca:	59                   	pop    ecx
c00182cb:	50                   	push   eax
c00182cc:	68 90 45 02 c0       	push   0xc0024590
c00182d1:	e8 ec 66 00 00       	call   c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182db:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00182e2:	c7 04 24 95 18 02 c0 	mov    DWORD PTR [esp],0xc0021895
c00182e9:	e8 d7 69 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00182ee:	83 c4 10             	add    esp,0x10
c00182f1:	a1 68 45 02 c0       	mov    eax,ds:0xc0024568
c00182f6:	85 c0                	test   eax,eax
c00182f8:	74 5a                	je     c0018354 <terminateTask(int)+0xce>
c00182fa:	83 ec 0c             	sub    esp,0xc
c00182fd:	68 af 18 02 c0       	push   0xc00218af
c0018302:	e8 be 69 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018307:	58                   	pop    eax
c0018308:	c6 05 6c 45 02 c0 01 	mov    BYTE PTR ds:0xc002456c,0x1
c001830f:	ff 35 68 45 02 c0    	push   DWORD PTR ds:0xc0024568
c0018315:	e8 66 fb ff ff       	call   c0017e80 <unblockTask(ThreadControlBlock*)>
c001831a:	c7 04 24 c9 18 02 c0 	mov    DWORD PTR [esp],0xc00218c9
c0018321:	e8 9f 69 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018326:	83 c4 10             	add    esp,0x10
c0018329:	e8 44 f5 ff ff       	call   c0017872 <unlockScheduler()>
c001832e:	e8 f6 f8 ff ff       	call   c0017c29 <unlockStuff()>
c0018333:	83 ec 0c             	sub    esp,0xc
c0018336:	68 01 19 02 c0       	push   0xc0021901
c001833b:	e8 85 69 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	e8 28 f5 ff ff       	call   c0017870 <lockScheduler()>
c0018348:	e8 57 f8 ff ff       	call   c0017ba4 <schedule()>
c001834d:	e8 20 f5 ff ff       	call   c0017872 <unlockScheduler()>
c0018352:	eb ef                	jmp    c0018343 <terminateTask(int)+0xbd>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	68 e3 18 02 c0       	push   0xc00218e3
c001835c:	e8 64 69 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	eb c3                	jmp    c0018329 <terminateTask(int)+0xa3>

c0018366 <Thr::terminateFromIRQ(int)>:
c0018366:	83 ec 18             	sub    esp,0x18
c0018369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001836d:	e8 14 ff ff ff       	call   c0018286 <terminateTask(int)>

c0018372 <Semaphore::release()>:
c0018372:	83 ec 0c             	sub    esp,0xc
c0018375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018379:	e8 19 f5 ff ff       	call   c0017897 <lockStuff()>
c001837e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018381:	85 d2                	test   edx,edx
c0018383:	74 1a                	je     c001839f <Semaphore::release()+0x2d>
c0018385:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018388:	83 ec 0c             	sub    esp,0xc
c001838b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001838e:	52                   	push   edx
c001838f:	e8 ec fa ff ff       	call   c0017e80 <unblockTask(ThreadControlBlock*)>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	83 c4 0c             	add    esp,0xc
c001839a:	e9 8a f8 ff ff       	jmp    c0017c29 <unlockStuff()>
c001839f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00183a2:	83 c4 0c             	add    esp,0xc
c00183a5:	e9 7f f8 ff ff       	jmp    c0017c29 <unlockStuff()>

c00183aa <__static_initialization_and_destruction_0(int, int)>:
c00183aa:	83 ec 0c             	sub    esp,0xc
c00183ad:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00183b2:	0f 85 88 00 00 00    	jne    c0018440 <__static_initialization_and_destruction_0(int, int)+0x96>
c00183b8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00183c0:	75 7e                	jne    c0018440 <__static_initialization_and_destruction_0(int, int)+0x96>
c00183c2:	83 ec 0c             	sub    esp,0xc
c00183c5:	68 a8 45 02 c0       	push   0xc00245a8
c00183ca:	e8 d9 67 00 00       	call   c001eba8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	83 ec 04             	sub    esp,0x4
c00183d5:	68 88 25 02 c0       	push   0xc0022588
c00183da:	68 a8 45 02 c0       	push   0xc00245a8
c00183df:	68 68 eb 01 c0       	push   0xc001eb68
c00183e4:	e8 78 67 ff ff       	call   c000eb61 <__cxa_atexit>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	68 9c 45 02 c0       	push   0xc002459c
c00183f4:	e8 af 67 00 00       	call   c001eba8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00183f9:	83 c4 10             	add    esp,0x10
c00183fc:	83 ec 04             	sub    esp,0x4
c00183ff:	68 88 25 02 c0       	push   0xc0022588
c0018404:	68 9c 45 02 c0       	push   0xc002459c
c0018409:	68 68 eb 01 c0       	push   0xc001eb68
c001840e:	e8 4e 67 ff ff       	call   c000eb61 <__cxa_atexit>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	83 ec 0c             	sub    esp,0xc
c0018419:	68 90 45 02 c0       	push   0xc0024590
c001841e:	e8 85 67 00 00       	call   c001eba8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	83 ec 04             	sub    esp,0x4
c0018429:	68 88 25 02 c0       	push   0xc0022588
c001842e:	68 90 45 02 c0       	push   0xc0024590
c0018433:	68 68 eb 01 c0       	push   0xc001eb68
c0018438:	e8 24 67 ff ff       	call   c000eb61 <__cxa_atexit>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	90                   	nop
c0018441:	83 c4 0c             	add    esp,0xc
c0018444:	c3                   	ret    

c0018445 <_GLOBAL__sub_I_kernelProcess>:
c0018445:	83 ec 0c             	sub    esp,0xc
c0018448:	83 ec 08             	sub    esp,0x8
c001844b:	68 ff ff 00 00       	push   0xffff
c0018450:	6a 01                	push   0x1
c0018452:	e8 53 ff ff ff       	call   c00183aa <__static_initialization_and_destruction_0(int, int)>
c0018457:	83 c4 10             	add    esp,0x10
c001845a:	83 c4 0c             	add    esp,0xc
c001845d:	c3                   	ret    

c001845e <Vm::vm8086EntryPoint(void*)>:
c001845e:	83 ec 0c             	sub    esp,0xc
c0018461:	e8 0c f4 ff ff       	call   c0017872 <unlockScheduler()>
c0018466:	fb                   	sti    
c0018467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001846c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018470:	52                   	push   edx
c0018471:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018475:	52                   	push   edx
c0018476:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001847a:	52                   	push   edx
c001847b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001847f:	50                   	push   eax
c0018480:	e8 30 7d fe ff       	call   c00001b5 <goToVM86>
c0018485:	83 c4 1c             	add    esp,0x1c
c0018488:	c3                   	ret    

c0018489 <Vm::inbv(unsigned short)>:
c0018489:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001848d:	ec                   	in     al,dx
c001848e:	c3                   	ret    

c001848f <Vm::outbv(unsigned short, unsigned char)>:
c001848f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018497:	ee                   	out    dx,al
c0018498:	c3                   	ret    

c0018499 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018499:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001849e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00184a3:	c1 e0 04             	shl    eax,0x4
c00184a6:	01 d0                	add    eax,edx
c00184a8:	c3                   	ret    

c00184a9 <Vm::getSegment(unsigned int)>:
c00184a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ad:	c1 e8 10             	shr    eax,0x10
c00184b0:	c3                   	ret    

c00184b1 <Vm::getOffset(unsigned int)>:
c00184b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184b5:	c3                   	ret    

c00184b6 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00184b6:	55                   	push   ebp
c00184b7:	57                   	push   edi
c00184b8:	56                   	push   esi
c00184b9:	53                   	push   ebx
c00184ba:	83 ec 2c             	sub    esp,0x2c
c00184bd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00184c1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00184c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184c9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00184cd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00184d1:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00184d5:	e8 96 f3 ff ff       	call   c0017870 <lockScheduler()>
c00184da:	68 80 00 00 00       	push   0x80
c00184df:	6a 00                	push   0x0
c00184e1:	68 5e 84 01 c0       	push   0xc001845e
c00184e6:	55                   	push   ebp
c00184e7:	e8 ae f4 ff ff       	call   c001799a <Process::createThread(void (*)(void*), void*, int)>
c00184ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184f0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00184f4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00184f8:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00184fc:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018500:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018504:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001850b:	e8 c6 66 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c0018510:	83 c4 0c             	add    esp,0xc
c0018513:	89 c3                	mov    ebx,eax
c0018515:	55                   	push   ebp
c0018516:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001851a:	50                   	push   eax
c001851b:	e8 d4 6c ff ff       	call   c000f1f4 <File::File(char const*, Process*)>
c0018520:	83 c4 0c             	add    esp,0xc
c0018523:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018527:	50                   	push   eax
c0018528:	8d 44 24 20          	lea    eax,[esp+0x20]
c001852c:	50                   	push   eax
c001852d:	53                   	push   ebx
c001852e:	e8 d1 6f ff ff       	call   c000f504 <File::stat(unsigned long long*, bool*)>
c0018533:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	84 d2                	test   dl,dl
c001853c:	74 1c                	je     c001855a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001853e:	83 ec 0c             	sub    esp,0xc
c0018541:	68 c3 1b 02 c0       	push   0xc0021bc3
c0018546:	e8 0f c4 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001854b:	e8 22 f3 ff ff       	call   c0017872 <unlockScheduler()>
c0018550:	83 c4 10             	add    esp,0x10
c0018553:	31 d2                	xor    edx,edx
c0018555:	e9 81 00 00 00       	jmp    c00185db <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001855a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001855e:	51                   	push   ecx
c001855f:	51                   	push   ecx
c0018560:	6a 01                	push   0x1
c0018562:	53                   	push   ebx
c0018563:	e8 f0 6c ff ff       	call   c000f258 <File::open(FileOpenMode)>
c0018568:	83 c4 10             	add    esp,0x10
c001856b:	85 c0                	test   eax,eax
c001856d:	74 1b                	je     c001858a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 dc 1b 02 c0       	push   0xc0021bdc
c0018577:	e8 de c3 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001857c:	e8 f1 f2 ff ff       	call   c0017872 <unlockScheduler()>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018588:	eb 51                	jmp    c00185db <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001858a:	83 ec 0c             	sub    esp,0xc
c001858d:	0f b7 ff             	movzx  edi,di
c0018590:	6a 07                	push   0x7
c0018592:	0f b7 f6             	movzx  esi,si
c0018595:	68 00 01 00 00       	push   0x100
c001859a:	6a 00                	push   0x0
c001859c:	6a 00                	push   0x0
c001859e:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00185a4:	e8 09 61 ff ff       	call   c000e6b2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00185a9:	83 c4 18             	add    esp,0x18
c00185ac:	57                   	push   edi
c00185ad:	56                   	push   esi
c00185ae:	e8 e6 fe ff ff       	call   c0018499 <Vm::realToLinear(unsigned short, unsigned short)>
c00185b3:	5a                   	pop    edx
c00185b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00185b6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00185ba:	51                   	push   ecx
c00185bb:	50                   	push   eax
c00185bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00185c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00185c4:	53                   	push   ebx
c00185c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00185c8:	83 c4 14             	add    esp,0x14
c00185cb:	53                   	push   ebx
c00185cc:	e8 e5 6c ff ff       	call   c000f2b6 <File::close()>
c00185d1:	e8 9c f2 ff ff       	call   c0017872 <unlockScheduler()>
c00185d6:	83 c4 10             	add    esp,0x10
c00185d9:	b2 01                	mov    dl,0x1
c00185db:	83 c4 2c             	add    esp,0x2c
c00185de:	88 d0                	mov    al,dl
c00185e0:	5b                   	pop    ebx
c00185e1:	5e                   	pop    esi
c00185e2:	5f                   	pop    edi
c00185e3:	5d                   	pop    ebp
c00185e4:	c3                   	ret    

c00185e5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00185e5:	57                   	push   edi
c00185e6:	56                   	push   esi
c00185e7:	53                   	push   ebx
c00185e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00185f4:	83 e8 06             	sub    eax,0x6
c00185f7:	0f b7 c0             	movzx  eax,ax
c00185fa:	50                   	push   eax
c00185fb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018600:	50                   	push   eax
c0018601:	e8 93 fe ff ff       	call   c0018499 <Vm::realToLinear(unsigned short, unsigned short)>
c0018606:	5a                   	pop    edx
c0018607:	5e                   	pop    esi
c0018608:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001860b:	8d 56 fa             	lea    edx,[esi-0x6]
c001860e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018614:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018617:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001861a:	83 c2 02             	add    edx,0x2
c001861d:	66 89 10             	mov    WORD PTR [eax],dx
c0018620:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018623:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018627:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001862a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001862e:	89 d6                	mov    esi,edx
c0018630:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018636:	66 81 e6 ff fd       	and    si,0xfdff
c001863b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001863f:	74 07                	je     c0018648 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018641:	89 d6                	mov    esi,edx
c0018643:	66 81 ce 00 02       	or     si,0x200
c0018648:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001864c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018651:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018655:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001865d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018660:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018668:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001866b:	5b                   	pop    ebx
c001866c:	5e                   	pop    esi
c001866d:	5f                   	pop    edi
c001866e:	c3                   	ret    

c001866f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001866f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018674:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018679:	c1 e0 04             	shl    eax,0x4
c001867c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001867f:	c3                   	ret    

c0018680 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018680:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018685:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001868a:	c1 e0 04             	shl    eax,0x4
c001868d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018691:	c3                   	ret    

c0018692 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018692:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018697:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001869c:	c1 e0 04             	shl    eax,0x4
c001869f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00186a2:	c3                   	ret    

c00186a3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00186a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186ad:	c1 e0 04             	shl    eax,0x4
c00186b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186b4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00186b7:	c3                   	ret    

c00186b8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00186b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186c2:	c1 e0 04             	shl    eax,0x4
c00186c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186c9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00186cd:	c3                   	ret    

c00186ce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00186ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186d8:	c1 e0 04             	shl    eax,0x4
c00186db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186df:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00186e2:	c3                   	ret    

c00186e3 <Vm::faultHandler(regs*)>:
c00186e3:	55                   	push   ebp
c00186e4:	57                   	push   edi
c00186e5:	56                   	push   esi
c00186e6:	53                   	push   ebx
c00186e7:	83 ec 1c             	sub    esp,0x1c
c00186ea:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00186ee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186f1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00186f5:	0f b7 f0             	movzx  esi,ax
c00186f8:	52                   	push   edx
c00186f9:	0f b7 c0             	movzx  eax,ax
c00186fc:	50                   	push   eax
c00186fd:	e8 97 fd ff ff       	call   c0018499 <Vm::realToLinear(unsigned short, unsigned short)>
c0018702:	5a                   	pop    edx
c0018703:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018706:	59                   	pop    ecx
c0018707:	89 c7                	mov    edi,eax
c0018709:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001870c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018710:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018719:	0f b7 c5             	movzx  eax,bp
c001871c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018720:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018724:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018728:	e8 6c fd ff ff       	call   c0018499 <Vm::realToLinear(unsigned short, unsigned short)>
c001872d:	5a                   	pop    edx
c001872e:	59                   	pop    ecx
c001872f:	b1 06                	mov    cl,0x6
c0018731:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018736:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001873b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001873e:	80 fa 9d             	cmp    dl,0x9d
c0018741:	0f 84 1d 02 00 00    	je     c0018964 <Vm::faultHandler(regs*)+0x281>
c0018747:	0f 87 8e 00 00 00    	ja     c00187db <Vm::faultHandler(regs*)+0xf8>
c001874d:	80 fa 66             	cmp    dl,0x66
c0018750:	0f 84 89 01 00 00    	je     c00188df <Vm::faultHandler(regs*)+0x1fc>
c0018756:	77 44                	ja     c001879c <Vm::faultHandler(regs*)+0xb9>
c0018758:	80 fa 36             	cmp    dl,0x36
c001875b:	0f 84 74 01 00 00    	je     c00188d5 <Vm::faultHandler(regs*)+0x1f2>
c0018761:	77 1a                	ja     c001877d <Vm::faultHandler(regs*)+0x9a>
c0018763:	80 fa 26             	cmp    dl,0x26
c0018766:	0f 84 4b 01 00 00    	je     c00188b7 <Vm::faultHandler(regs*)+0x1d4>
c001876c:	80 fa 2e             	cmp    dl,0x2e
c001876f:	0f 85 4a 05 00 00    	jne    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c0018775:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018778:	31 c9                	xor    ecx,ecx
c001877a:	47                   	inc    edi
c001877b:	eb be                	jmp    c001873b <Vm::faultHandler(regs*)+0x58>
c001877d:	80 fa 64             	cmp    dl,0x64
c0018780:	0f 84 3b 01 00 00    	je     c00188c1 <Vm::faultHandler(regs*)+0x1de>
c0018786:	0f 87 3f 01 00 00    	ja     c00188cb <Vm::faultHandler(regs*)+0x1e8>
c001878c:	80 fa 3e             	cmp    dl,0x3e
c001878f:	0f 85 2a 05 00 00    	jne    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c0018795:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018798:	b1 01                	mov    cl,0x1
c001879a:	eb de                	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c001879c:	80 fa 6d             	cmp    dl,0x6d
c001879f:	0f 84 bf 02 00 00    	je     c0018a64 <Vm::faultHandler(regs*)+0x381>
c00187a5:	77 17                	ja     c00187be <Vm::faultHandler(regs*)+0xdb>
c00187a7:	80 fa 67             	cmp    dl,0x67
c00187aa:	0f 84 3c 01 00 00    	je     c00188ec <Vm::faultHandler(regs*)+0x209>
c00187b0:	80 fa 6c             	cmp    dl,0x6c
c00187b3:	0f 84 5d 02 00 00    	je     c0018a16 <Vm::faultHandler(regs*)+0x333>
c00187b9:	e9 01 05 00 00       	jmp    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c00187be:	80 fa 6f             	cmp    dl,0x6f
c00187c1:	0f 84 8b 03 00 00    	je     c0018b52 <Vm::faultHandler(regs*)+0x46f>
c00187c7:	0f 82 0f 03 00 00    	jb     c0018adc <Vm::faultHandler(regs*)+0x3f9>
c00187cd:	80 fa 9c             	cmp    dl,0x9c
c00187d0:	0f 84 23 01 00 00    	je     c00188f9 <Vm::faultHandler(regs*)+0x216>
c00187d6:	e9 e4 04 00 00       	jmp    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c00187db:	80 fa ec             	cmp    dl,0xec
c00187de:	0f 84 7f 04 00 00    	je     c0018c63 <Vm::faultHandler(regs*)+0x580>
c00187e4:	77 7b                	ja     c0018861 <Vm::faultHandler(regs*)+0x17e>
c00187e6:	80 fa e4             	cmp    dl,0xe4
c00187e9:	0f 84 fe 03 00 00    	je     c0018bed <Vm::faultHandler(regs*)+0x50a>
c00187ef:	77 53                	ja     c0018844 <Vm::faultHandler(regs*)+0x161>
c00187f1:	80 fa cd             	cmp    dl,0xcd
c00187f4:	0f 84 cd 01 00 00    	je     c00189c7 <Vm::faultHandler(regs*)+0x2e4>
c00187fa:	80 fa cf             	cmp    dl,0xcf
c00187fd:	0f 85 bc 04 00 00    	jne    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c0018803:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018806:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018809:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001880d:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018810:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018814:	81 ca 00 02 02 00    	or     edx,0x20200
c001881a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001881d:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018821:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018827:	66 c1 e8 09          	shr    ax,0x9
c001882b:	83 e0 01             	and    eax,0x1
c001882e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018831:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018834:	83 c0 06             	add    eax,0x6
c0018837:	25 ff ff 00 00       	and    eax,0xffff
c001883c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001883f:	e9 77 04 00 00       	jmp    c0018cbb <Vm::faultHandler(regs*)+0x5d8>
c0018844:	80 fa e6             	cmp    dl,0xe6
c0018847:	0f 84 ea 03 00 00    	je     c0018c37 <Vm::faultHandler(regs*)+0x554>
c001884d:	0f 82 b6 03 00 00    	jb     c0018c09 <Vm::faultHandler(regs*)+0x526>
c0018853:	80 fa e7             	cmp    dl,0xe7
c0018856:	0f 84 f2 03 00 00    	je     c0018c4e <Vm::faultHandler(regs*)+0x56b>
c001885c:	e9 5e 04 00 00       	jmp    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c0018861:	80 fa ef             	cmp    dl,0xef
c0018864:	0f 84 3c 04 00 00    	je     c0018ca6 <Vm::faultHandler(regs*)+0x5c3>
c001886a:	77 28                	ja     c0018894 <Vm::faultHandler(regs*)+0x1b1>
c001886c:	80 fa ed             	cmp    dl,0xed
c001886f:	0f 84 0a 04 00 00    	je     c0018c7f <Vm::faultHandler(regs*)+0x59c>
c0018875:	80 fa ee             	cmp    dl,0xee
c0018878:	0f 85 41 04 00 00    	jne    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c001887e:	50                   	push   eax
c001887f:	50                   	push   eax
c0018880:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018884:	50                   	push   eax
c0018885:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018889:	50                   	push   eax
c001888a:	e8 00 fc ff ff       	call   c001848f <Vm::outbv(unsigned short, unsigned char)>
c001888f:	e9 0a 04 00 00       	jmp    c0018c9e <Vm::faultHandler(regs*)+0x5bb>
c0018894:	80 fa fa             	cmp    dl,0xfa
c0018897:	0f 84 5d 01 00 00    	je     c00189fa <Vm::faultHandler(regs*)+0x317>
c001889d:	80 fa fb             	cmp    dl,0xfb
c00188a0:	0f 84 62 01 00 00    	je     c0018a08 <Vm::faultHandler(regs*)+0x325>
c00188a6:	80 fa f3             	cmp    dl,0xf3
c00188a9:	0f 85 10 04 00 00    	jne    c0018cbf <Vm::faultHandler(regs*)+0x5dc>
c00188af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188b2:	e9 c3 fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188ba:	b1 02                	mov    cl,0x2
c00188bc:	e9 b9 fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188c4:	b1 03                	mov    cl,0x3
c00188c6:	e9 af fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188ce:	b1 04                	mov    cl,0x4
c00188d0:	e9 a5 fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188d8:	b1 05                	mov    cl,0x5
c00188da:	e9 9b fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188e2:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00188e7:	e9 8e fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188ef:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00188f4:	e9 81 fe ff ff       	jmp    c001877a <Vm::faultHandler(regs*)+0x97>
c00188f9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00188fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018900:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018905:	74 30                	je     c0018937 <Vm::faultHandler(regs*)+0x254>
c0018907:	83 e9 04             	sub    ecx,0x4
c001890a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018910:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018916:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018919:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001891c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018922:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018926:	0f 84 8c 03 00 00    	je     c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c001892c:	80 ce 02             	or     dh,0x2
c001892f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018932:	e9 81 03 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018937:	83 e9 02             	sub    ecx,0x2
c001893a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018940:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018943:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018947:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001894d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018951:	74 05                	je     c0018958 <Vm::faultHandler(regs*)+0x275>
c0018953:	80 ce 02             	or     dh,0x2
c0018956:	eb 03                	jmp    c001895b <Vm::faultHandler(regs*)+0x278>
c0018958:	80 e6 fd             	and    dh,0xfd
c001895b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001895f:	e9 54 03 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018964:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018969:	74 2a                	je     c0018995 <Vm::faultHandler(regs*)+0x2b2>
c001896b:	8b 10                	mov    edx,DWORD PTR [eax]
c001896d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018973:	81 ca 00 02 02 00    	or     edx,0x20200
c0018979:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001897c:	8b 00                	mov    eax,DWORD PTR [eax]
c001897e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018984:	c1 e8 09             	shr    eax,0x9
c0018987:	83 e0 01             	and    eax,0x1
c001898a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001898d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018990:	83 c0 04             	add    eax,0x4
c0018993:	eb 25                	jmp    c00189ba <Vm::faultHandler(regs*)+0x2d7>
c0018995:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018998:	81 ca 00 02 02 00    	or     edx,0x20200
c001899e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189a1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189aa:	66 c1 e8 09          	shr    ax,0x9
c00189ae:	83 e0 01             	and    eax,0x1
c00189b1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189b7:	83 c0 02             	add    eax,0x2
c00189ba:	25 ff ff 00 00       	and    eax,0xffff
c00189bf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00189c2:	e9 f1 02 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c00189c7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189cb:	3c ff                	cmp    al,0xff
c00189cd:	75 10                	jne    c00189df <Vm::faultHandler(regs*)+0x2fc>
c00189cf:	83 ec 0c             	sub    esp,0xc
c00189d2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00189d5:	e8 8c f9 ff ff       	call   c0018366 <Thr::terminateFromIRQ(int)>
c00189da:	e9 c2 02 00 00       	jmp    c0018ca1 <Vm::faultHandler(regs*)+0x5be>
c00189df:	83 ec 0c             	sub    esp,0xc
c00189e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189ea:	57                   	push   edi
c00189eb:	50                   	push   eax
c00189ec:	53                   	push   ebx
c00189ed:	e8 f3 fb ff ff       	call   c00185e5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00189f2:	83 c4 20             	add    esp,0x20
c00189f5:	e9 c1 02 00 00       	jmp    c0018cbb <Vm::faultHandler(regs*)+0x5d8>
c00189fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189ff:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a03:	e9 b0 02 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a0d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018a11:	e9 a2 02 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018a16:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a1b:	74 0d                	je     c0018a2a <Vm::faultHandler(regs*)+0x347>
c0018a1d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018a24:	0f 87 e9 02 00 00    	ja     c0018d13 <Vm::faultHandler(regs*)+0x630>
c0018a2a:	83 ec 0c             	sub    esp,0xc
c0018a2d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018a30:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a34:	50                   	push   eax
c0018a35:	e8 4f fa ff ff       	call   c0018489 <Vm::inbv(unsigned short)>
c0018a3a:	83 c4 0c             	add    esp,0xc
c0018a3d:	0f b6 c0             	movzx  eax,al
c0018a40:	0f b7 c9             	movzx  ecx,cx
c0018a43:	50                   	push   eax
c0018a44:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018a48:	50                   	push   eax
c0018a49:	51                   	push   ecx
c0018a4a:	e8 54 fc ff ff       	call   c00186a3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a4f:	83 c4 10             	add    esp,0x10
c0018a52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a55:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a59:	74 03                	je     c0018a5e <Vm::faultHandler(regs*)+0x37b>
c0018a5b:	48                   	dec    eax
c0018a5c:	eb 01                	jmp    c0018a5f <Vm::faultHandler(regs*)+0x37c>
c0018a5e:	40                   	inc    eax
c0018a5f:	0f b7 c0             	movzx  eax,ax
c0018a62:	eb 70                	jmp    c0018ad4 <Vm::faultHandler(regs*)+0x3f1>
c0018a64:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a67:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018a6a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a6f:	74 0c                	je     c0018a7d <Vm::faultHandler(regs*)+0x39a>
c0018a71:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018a77:	0f 87 96 02 00 00    	ja     c0018d13 <Vm::faultHandler(regs*)+0x630>
c0018a7d:	0f b7 c9             	movzx  ecx,cx
c0018a80:	0f b7 f6             	movzx  esi,si
c0018a83:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a8b:	74 20                	je     c0018aad <Vm::faultHandler(regs*)+0x3ca>
c0018a8d:	ed                   	in     eax,dx
c0018a8e:	55                   	push   ebp
c0018a8f:	50                   	push   eax
c0018a90:	51                   	push   ecx
c0018a91:	56                   	push   esi
c0018a92:	e8 37 fc ff ff       	call   c00186ce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018a97:	83 c4 10             	add    esp,0x10
c0018a9a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a9d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018aa1:	74 05                	je     c0018aa8 <Vm::faultHandler(regs*)+0x3c5>
c0018aa3:	83 e8 04             	sub    eax,0x4
c0018aa6:	eb 27                	jmp    c0018acf <Vm::faultHandler(regs*)+0x3ec>
c0018aa8:	83 c0 04             	add    eax,0x4
c0018aab:	eb 22                	jmp    c0018acf <Vm::faultHandler(regs*)+0x3ec>
c0018aad:	66 ed                	in     ax,dx
c0018aaf:	0f b7 c0             	movzx  eax,ax
c0018ab2:	57                   	push   edi
c0018ab3:	50                   	push   eax
c0018ab4:	51                   	push   ecx
c0018ab5:	56                   	push   esi
c0018ab6:	e8 fd fb ff ff       	call   c00186b8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018ac1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ac5:	74 05                	je     c0018acc <Vm::faultHandler(regs*)+0x3e9>
c0018ac7:	83 e8 02             	sub    eax,0x2
c0018aca:	eb 03                	jmp    c0018acf <Vm::faultHandler(regs*)+0x3ec>
c0018acc:	83 c0 02             	add    eax,0x2
c0018acf:	25 ff ff 00 00       	and    eax,0xffff
c0018ad4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018ad7:	e9 dc 01 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018adc:	49                   	dec    ecx
c0018add:	80 f9 05             	cmp    cl,0x5
c0018ae0:	77 24                	ja     c0018b06 <Vm::faultHandler(regs*)+0x423>
c0018ae2:	0f b6 c9             	movzx  ecx,cl
c0018ae5:	ff 24 8d 24 1c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde3dc]
c0018aec:	0f b7 f5             	movzx  esi,bp
c0018aef:	eb 15                	jmp    c0018b06 <Vm::faultHandler(regs*)+0x423>
c0018af1:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018af5:	eb 0f                	jmp    c0018b06 <Vm::faultHandler(regs*)+0x423>
c0018af7:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018afb:	eb 09                	jmp    c0018b06 <Vm::faultHandler(regs*)+0x423>
c0018afd:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018b01:	eb 03                	jmp    c0018b06 <Vm::faultHandler(regs*)+0x423>
c0018b03:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018b06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b09:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b0e:	74 0b                	je     c0018b1b <Vm::faultHandler(regs*)+0x438>
c0018b10:	3d ff ff 00 00       	cmp    eax,0xffff
c0018b15:	0f 87 f8 01 00 00    	ja     c0018d13 <Vm::faultHandler(regs*)+0x630>
c0018b1b:	0f b7 c0             	movzx  eax,ax
c0018b1e:	52                   	push   edx
c0018b1f:	52                   	push   edx
c0018b20:	50                   	push   eax
c0018b21:	56                   	push   esi
c0018b22:	e8 48 fb ff ff       	call   c001866f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018b27:	59                   	pop    ecx
c0018b28:	0f b6 c0             	movzx  eax,al
c0018b2b:	5e                   	pop    esi
c0018b2c:	50                   	push   eax
c0018b2d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b31:	50                   	push   eax
c0018b32:	e8 58 f9 ff ff       	call   c001848f <Vm::outbv(unsigned short, unsigned char)>
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b3d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b41:	74 03                	je     c0018b46 <Vm::faultHandler(regs*)+0x463>
c0018b43:	48                   	dec    eax
c0018b44:	eb 01                	jmp    c0018b47 <Vm::faultHandler(regs*)+0x464>
c0018b46:	40                   	inc    eax
c0018b47:	0f b7 c0             	movzx  eax,ax
c0018b4a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018b4d:	e9 66 01 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018b52:	49                   	dec    ecx
c0018b53:	80 f9 05             	cmp    cl,0x5
c0018b56:	77 1f                	ja     c0018b77 <Vm::faultHandler(regs*)+0x494>
c0018b58:	0f b6 c9             	movzx  ecx,cl
c0018b5b:	ff 24 8d 3c 1c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde3c4]
c0018b62:	89 ee                	mov    esi,ebp
c0018b64:	eb 11                	jmp    c0018b77 <Vm::faultHandler(regs*)+0x494>
c0018b66:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018b69:	eb 0c                	jmp    c0018b77 <Vm::faultHandler(regs*)+0x494>
c0018b6b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b6e:	eb 07                	jmp    c0018b77 <Vm::faultHandler(regs*)+0x494>
c0018b70:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018b73:	eb 02                	jmp    c0018b77 <Vm::faultHandler(regs*)+0x494>
c0018b75:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018b77:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018b7a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b7f:	74 0c                	je     c0018b8d <Vm::faultHandler(regs*)+0x4aa>
c0018b81:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b87:	0f 87 86 01 00 00    	ja     c0018d13 <Vm::faultHandler(regs*)+0x630>
c0018b8d:	0f b7 d6             	movzx  edx,si
c0018b90:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018b93:	0f b7 c1             	movzx  eax,cx
c0018b96:	81 e7 00 04 00 00    	and    edi,0x400
c0018b9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018b9f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ba4:	74 1d                	je     c0018bc3 <Vm::faultHandler(regs*)+0x4e0>
c0018ba6:	55                   	push   ebp
c0018ba7:	55                   	push   ebp
c0018ba8:	50                   	push   eax
c0018ba9:	52                   	push   edx
c0018baa:	e8 e3 fa ff ff       	call   c0018692 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	89 f2                	mov    edx,esi
c0018bb4:	ef                   	out    dx,eax
c0018bb5:	85 ff                	test   edi,edi
c0018bb7:	74 05                	je     c0018bbe <Vm::faultHandler(regs*)+0x4db>
c0018bb9:	83 e9 04             	sub    ecx,0x4
c0018bbc:	eb 21                	jmp    c0018bdf <Vm::faultHandler(regs*)+0x4fc>
c0018bbe:	83 c1 04             	add    ecx,0x4
c0018bc1:	eb 1c                	jmp    c0018bdf <Vm::faultHandler(regs*)+0x4fc>
c0018bc3:	55                   	push   ebp
c0018bc4:	55                   	push   ebp
c0018bc5:	50                   	push   eax
c0018bc6:	52                   	push   edx
c0018bc7:	e8 b4 fa ff ff       	call   c0018680 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018bcc:	83 c4 10             	add    esp,0x10
c0018bcf:	89 f2                	mov    edx,esi
c0018bd1:	66 ef                	out    dx,ax
c0018bd3:	85 ff                	test   edi,edi
c0018bd5:	74 05                	je     c0018bdc <Vm::faultHandler(regs*)+0x4f9>
c0018bd7:	83 e9 02             	sub    ecx,0x2
c0018bda:	eb 03                	jmp    c0018bdf <Vm::faultHandler(regs*)+0x4fc>
c0018bdc:	83 c1 02             	add    ecx,0x2
c0018bdf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018be5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018be8:	e9 cb 00 00 00       	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018bed:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018bf4:	83 ec 0c             	sub    esp,0xc
c0018bf7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018bfb:	50                   	push   eax
c0018bfc:	e8 88 f8 ff ff       	call   c0018489 <Vm::inbv(unsigned short)>
c0018c01:	0f b6 c0             	movzx  eax,al
c0018c04:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c07:	eb 3f                	jmp    c0018c48 <Vm::faultHandler(regs*)+0x565>
c0018c09:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c0e:	74 07                	je     c0018c17 <Vm::faultHandler(regs*)+0x534>
c0018c10:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c14:	ed                   	in     eax,dx
c0018c15:	eb 14                	jmp    c0018c2b <Vm::faultHandler(regs*)+0x548>
c0018c17:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018c1a:	66 31 c9             	xor    cx,cx
c0018c1d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018c20:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c24:	66 ed                	in     ax,dx
c0018c26:	0f b7 c0             	movzx  eax,ax
c0018c29:	09 c8                	or     eax,ecx
c0018c2b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c2e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c32:	e9 84 00 00 00       	jmp    c0018cbb <Vm::faultHandler(regs*)+0x5d8>
c0018c37:	52                   	push   edx
c0018c38:	52                   	push   edx
c0018c39:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c3d:	50                   	push   eax
c0018c3e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c42:	50                   	push   eax
c0018c43:	e8 47 f8 ff ff       	call   c001848f <Vm::outbv(unsigned short, unsigned char)>
c0018c48:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c4c:	eb 53                	jmp    c0018ca1 <Vm::faultHandler(regs*)+0x5be>
c0018c4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c51:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c55:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c5a:	74 03                	je     c0018c5f <Vm::faultHandler(regs*)+0x57c>
c0018c5c:	ef                   	out    dx,eax
c0018c5d:	eb cf                	jmp    c0018c2e <Vm::faultHandler(regs*)+0x54b>
c0018c5f:	66 ef                	out    dx,ax
c0018c61:	eb cb                	jmp    c0018c2e <Vm::faultHandler(regs*)+0x54b>
c0018c63:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c6a:	83 ec 0c             	sub    esp,0xc
c0018c6d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c71:	50                   	push   eax
c0018c72:	e8 12 f8 ff ff       	call   c0018489 <Vm::inbv(unsigned short)>
c0018c77:	0f b6 c0             	movzx  eax,al
c0018c7a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c7d:	eb 1f                	jmp    c0018c9e <Vm::faultHandler(regs*)+0x5bb>
c0018c7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c87:	74 03                	je     c0018c8c <Vm::faultHandler(regs*)+0x5a9>
c0018c89:	ed                   	in     eax,dx
c0018c8a:	eb 0d                	jmp    c0018c99 <Vm::faultHandler(regs*)+0x5b6>
c0018c8c:	66 ed                	in     ax,dx
c0018c8e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018c91:	0f b7 c0             	movzx  eax,ax
c0018c94:	66 31 d2             	xor    dx,dx
c0018c97:	09 d0                	or     eax,edx
c0018c99:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c9c:	eb 1a                	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018c9e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ca1:	83 c4 10             	add    esp,0x10
c0018ca4:	eb 15                	jmp    c0018cbb <Vm::faultHandler(regs*)+0x5d8>
c0018ca6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018ca9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018cac:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cb1:	74 03                	je     c0018cb6 <Vm::faultHandler(regs*)+0x5d3>
c0018cb3:	ef                   	out    dx,eax
c0018cb4:	eb 02                	jmp    c0018cb8 <Vm::faultHandler(regs*)+0x5d5>
c0018cb6:	66 ef                	out    dx,ax
c0018cb8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cbb:	b0 01                	mov    al,0x1
c0018cbd:	eb 56                	jmp    c0018d15 <Vm::faultHandler(regs*)+0x632>
c0018cbf:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018cc3:	50                   	push   eax
c0018cc4:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018cc8:	50                   	push   eax
c0018cc9:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018ccd:	50                   	push   eax
c0018cce:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018cd2:	50                   	push   eax
c0018cd3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cd7:	50                   	push   eax
c0018cd8:	52                   	push   edx
c0018cd9:	52                   	push   edx
c0018cda:	68 f5 1b 02 c0       	push   0xc0021bf5
c0018cdf:	e8 e1 5f ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0018ce4:	83 c4 20             	add    esp,0x20
c0018ce7:	83 ec 0c             	sub    esp,0xc
c0018cea:	6a 60                	push   0x60
c0018cec:	e8 98 f7 ff ff       	call   c0018489 <Vm::inbv(unsigned short)>
c0018cf1:	83 c4 10             	add    esp,0x10
c0018cf4:	3c 1c                	cmp    al,0x1c
c0018cf6:	74 04                	je     c0018cfc <Vm::faultHandler(regs*)+0x619>
c0018cf8:	3c 5a                	cmp    al,0x5a
c0018cfa:	75 eb                	jne    c0018ce7 <Vm::faultHandler(regs*)+0x604>
c0018cfc:	3c 5a                	cmp    al,0x5a
c0018cfe:	74 04                	je     c0018d04 <Vm::faultHandler(regs*)+0x621>
c0018d00:	3c 1c                	cmp    al,0x1c
c0018d02:	75 0f                	jne    c0018d13 <Vm::faultHandler(regs*)+0x630>
c0018d04:	83 ec 0c             	sub    esp,0xc
c0018d07:	6a 60                	push   0x60
c0018d09:	e8 7b f7 ff ff       	call   c0018489 <Vm::inbv(unsigned short)>
c0018d0e:	83 c4 10             	add    esp,0x10
c0018d11:	eb e9                	jmp    c0018cfc <Vm::faultHandler(regs*)+0x619>
c0018d13:	31 c0                	xor    eax,eax
c0018d15:	83 c4 1c             	add    esp,0x1c
c0018d18:	5b                   	pop    ebx
c0018d19:	5e                   	pop    esi
c0018d1a:	5f                   	pop    edi
c0018d1b:	5d                   	pop    ebp
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop

c0018d1e <FAT::getName()>:
c0018d1e:	b8 54 1c 02 c0       	mov    eax,0xc0021c54
c0018d23:	c3                   	ret    

c0018d24 <FAT::tell(void*, unsigned long long*)>:
c0018d24:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d29:	75 06                	jne    c0018d31 <FAT::tell(void*, unsigned long long*)+0xd>
c0018d2b:	b8 04 00 00 00       	mov    eax,0x4
c0018d30:	c3                   	ret    
c0018d31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d36:	75 06                	jne    c0018d3e <FAT::tell(void*, unsigned long long*)+0x1a>
c0018d38:	b8 04 00 00 00       	mov    eax,0x4
c0018d3d:	c3                   	ret    
c0018d3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d42:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018d45:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d4c:	89 01                	mov    DWORD PTR [ecx],eax
c0018d4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d51:	b8 00 00 00 00       	mov    eax,0x0
c0018d56:	c3                   	ret    
c0018d57:	90                   	nop

c0018d58 <FAT::stat(void*, unsigned long long*)>:
c0018d58:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d5d:	75 06                	jne    c0018d65 <FAT::stat(void*, unsigned long long*)+0xd>
c0018d5f:	b8 04 00 00 00       	mov    eax,0x4
c0018d64:	c3                   	ret    
c0018d65:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d6a:	75 06                	jne    c0018d72 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018d6c:	b8 04 00 00 00       	mov    eax,0x4
c0018d71:	c3                   	ret    
c0018d72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d76:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d80:	89 01                	mov    DWORD PTR [ecx],eax
c0018d82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d85:	b8 00 00 00 00       	mov    eax,0x0
c0018d8a:	c3                   	ret    
c0018d8b:	90                   	nop

c0018d8c <FAT::~FAT()>:
c0018d8c:	83 ec 0c             	sub    esp,0xc
c0018d8f:	ba d8 1c 02 c0       	mov    edx,0xc0021cd8
c0018d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d98:	89 10                	mov    DWORD PTR [eax],edx
c0018d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9e:	83 ec 0c             	sub    esp,0xc
c0018da1:	50                   	push   eax
c0018da2:	e8 47 62 ff ff       	call   c000efee <Filesystem::~Filesystem()>
c0018da7:	83 c4 10             	add    esp,0x10
c0018daa:	90                   	nop
c0018dab:	83 c4 0c             	add    esp,0xc
c0018dae:	c3                   	ret    
c0018daf:	90                   	nop

c0018db0 <FAT::~FAT()>:
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	83 ec 0c             	sub    esp,0xc
c0018db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dba:	e8 cd ff ff ff       	call   c0018d8c <FAT::~FAT()>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	83 ec 08             	sub    esp,0x8
c0018dc5:	6a 08                	push   0x8
c0018dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dcb:	e8 15 5e ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0018dd0:	83 c4 10             	add    esp,0x10
c0018dd3:	83 c4 0c             	add    esp,0xc
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018dd8:	83 ec 1c             	sub    esp,0x1c
c0018ddb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018de2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018de7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018deb:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0018df2:	83 f8 ff             	cmp    eax,0xffffffff
c0018df5:	75 34                	jne    c0018e2b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018df7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018dfb:	88 c2                	mov    dl,al
c0018dfd:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0018e02:	01 d0                	add    eax,edx
c0018e04:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e08:	8b 15 e0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e0
c0018e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e12:	89 14 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],edx
c0018e19:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0018e1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e22:	89 14 85 80 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb980],edx
c0018e29:	eb 17                	jmp    c0018e42 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018e2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e2f:	88 c2                	mov    dl,al
c0018e31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e35:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0018e3c:	01 d0                	add    eax,edx
c0018e3e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e42:	83 ec 04             	sub    esp,0x4
c0018e45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e4d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018e51:	50                   	push   eax
c0018e52:	e8 0e dc fe ff       	call   c0006a65 <f_getlabel>
c0018e57:	83 c4 10             	add    esp,0x10
c0018e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e5e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e63:	75 07                	jne    c0018e6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018e65:	b8 00 00 00 00       	mov    eax,0x0
c0018e6a:	eb 05                	jmp    c0018e71 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018e6c:	b8 01 00 00 00       	mov    eax,0x1
c0018e71:	83 c4 1c             	add    esp,0x1c
c0018e74:	c3                   	ret    
c0018e75:	90                   	nop

c0018e76 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018e76:	57                   	push   edi
c0018e77:	83 ec 58             	sub    esp,0x58
c0018e7a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018e82:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018e86:	b9 0f 00 00 00       	mov    ecx,0xf
c0018e8b:	b8 00 00 00 00       	mov    eax,0x0
c0018e90:	fc                   	cld    
c0018e91:	89 d7                	mov    edi,edx
c0018e93:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018e95:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e99:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0018ea0:	83 f8 ff             	cmp    eax,0xffffffff
c0018ea3:	75 34                	jne    c0018ed9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018ea5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ea9:	88 c2                	mov    dl,al
c0018eab:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0018eb0:	01 d0                	add    eax,edx
c0018eb2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018eb6:	8b 15 e0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e0
c0018ebc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ec0:	89 14 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],edx
c0018ec7:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0018ecc:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ed0:	89 14 85 80 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb980],edx
c0018ed7:	eb 17                	jmp    c0018ef0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018ed9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018edd:	88 c2                	mov    dl,al
c0018edf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ee3:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0018eea:	01 d0                	add    eax,edx
c0018eec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ef0:	83 ec 08             	sub    esp,0x8
c0018ef3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018ef7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018efb:	50                   	push   eax
c0018efc:	e8 5d 78 fe ff       	call   c000075e <strcat>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f0b:	50                   	push   eax
c0018f0c:	e8 42 dd fe ff       	call   c0006c53 <f_setlabel>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018f18:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018f1d:	75 07                	jne    c0018f26 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018f1f:	b8 00 00 00 00       	mov    eax,0x0
c0018f24:	eb 05                	jmp    c0018f2b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018f26:	b8 01 00 00 00       	mov    eax,0x1
c0018f2b:	83 c4 58             	add    esp,0x58
c0018f2e:	5f                   	pop    edi
c0018f2f:	c3                   	ret    

c0018f30 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f30:	83 ec 2c             	sub    esp,0x2c
c0018f33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f3b:	83 ec 08             	sub    esp,0x8
c0018f3e:	68 78 1c 02 c0       	push   0xc0021c78
c0018f43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f47:	e8 ac 77 fe ff       	call   c00006f8 <strcmp>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	85 c0                	test   eax,eax
c0018f51:	0f 94 c0             	sete   al
c0018f54:	84 c0                	test   al,al
c0018f56:	74 0d                	je     c0018f65 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018f58:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f60:	e9 a6 00 00 00       	jmp    c001900b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f65:	83 ec 08             	sub    esp,0x8
c0018f68:	68 6a 1c 02 c0       	push   0xc0021c6a
c0018f6d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f71:	e8 82 77 fe ff       	call   c00006f8 <strcmp>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	85 c0                	test   eax,eax
c0018f7b:	0f 94 c0             	sete   al
c0018f7e:	84 c0                	test   al,al
c0018f80:	74 0a                	je     c0018f8c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018f82:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f8a:	eb 7f                	jmp    c001900b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f8c:	83 ec 08             	sub    esp,0x8
c0018f8f:	68 70 1c 02 c0       	push   0xc0021c70
c0018f94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f98:	e8 5b 77 fe ff       	call   c00006f8 <strcmp>
c0018f9d:	83 c4 10             	add    esp,0x10
c0018fa0:	85 c0                	test   eax,eax
c0018fa2:	0f 94 c0             	sete   al
c0018fa5:	84 c0                	test   al,al
c0018fa7:	74 0a                	je     c0018fb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018fa9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fb1:	eb 58                	jmp    c001900b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fb3:	83 ec 08             	sub    esp,0x8
c0018fb6:	68 6c f2 01 c0       	push   0xc001f26c
c0018fbb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fbf:	e8 34 77 fe ff       	call   c00006f8 <strcmp>
c0018fc4:	83 c4 10             	add    esp,0x10
c0018fc7:	85 c0                	test   eax,eax
c0018fc9:	0f 94 c0             	sete   al
c0018fcc:	84 c0                	test   al,al
c0018fce:	74 0a                	je     c0018fda <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018fd0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018fd8:	eb 31                	jmp    c001900b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fda:	83 ec 08             	sub    esp,0x8
c0018fdd:	68 76 1c 02 c0       	push   0xc0021c76
c0018fe2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fe6:	e8 0d 77 fe ff       	call   c00006f8 <strcmp>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	85 c0                	test   eax,eax
c0018ff0:	0f 94 c0             	sete   al
c0018ff3:	84 c0                	test   al,al
c0018ff5:	74 0a                	je     c0019001 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018ff7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018fff:	eb 0a                	jmp    c001900b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019001:	b8 08 00 00 00       	mov    eax,0x8
c0019006:	e9 04 01 00 00       	jmp    c001910f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001900b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019012:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019017:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001901b:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0019022:	83 f8 ff             	cmp    eax,0xffffffff
c0019025:	75 34                	jne    c001905b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019027:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001902b:	88 c2                	mov    dl,al
c001902d:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0019032:	01 d0                	add    eax,edx
c0019034:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019038:	8b 15 e0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e0
c001903e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019042:	89 14 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],edx
c0019049:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c001904e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019052:	89 14 85 80 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb980],edx
c0019059:	eb 17                	jmp    c0019072 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001905b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001905f:	88 c2                	mov    dl,al
c0019061:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019065:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c001906c:	01 d0                	add    eax,edx
c001906e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019072:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019076:	88 04 24             	mov    BYTE PTR [esp],al
c0019079:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001907d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019089:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001908e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019096:	83 ec 0c             	sub    esp,0xc
c0019099:	68 00 20 00 00       	push   0x2000
c001909e:	e8 7b 2b ff ff       	call   c000bc1e <malloc>
c00190a3:	83 c4 10             	add    esp,0x10
c00190a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190aa:	68 00 20 00 00       	push   0x2000
c00190af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190b3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190b7:	50                   	push   eax
c00190b8:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00190bc:	50                   	push   eax
c00190bd:	e8 dc df fe ff       	call   c000709e <f_mkfs>
c00190c2:	83 c4 10             	add    esp,0x10
c00190c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00190c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00190ce:	75 07                	jne    c00190d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00190d0:	b8 00 00 00 00       	mov    eax,0x0
c00190d5:	eb 38                	jmp    c001910f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190d7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00190dc:	75 17                	jne    c00190f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00190de:	83 ec 0c             	sub    esp,0xc
c00190e1:	68 a8 1c 02 c0       	push   0xc0021ca8
c00190e6:	e8 da 5b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	b8 09 00 00 00       	mov    eax,0x9
c00190f3:	eb 1a                	jmp    c001910f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190f9:	83 ec 08             	sub    esp,0x8
c00190fc:	50                   	push   eax
c00190fd:	68 7c 1c 02 c0       	push   0xc0021c7c
c0019102:	e8 be 5b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	b8 01 00 00 00       	mov    eax,0x1
c001910f:	83 c4 2c             	add    esp,0x2c
c0019112:	c3                   	ret    
c0019113:	90                   	nop

c0019114 <FAT::tryMount(LogicalDisk*, int)>:
c0019114:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001911a:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c001911f:	83 f8 14             	cmp    eax,0x14
c0019122:	75 17                	jne    c001913b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	68 8e 1c 02 c0       	push   0xc0021c8e
c001912c:	e8 29 b8 ff ff       	call   c001495a <Krnl::panic(char const*)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	b0 00                	mov    al,0x0
c0019136:	e9 d7 01 00 00       	jmp    c0019312 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001913b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019142:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019148:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001914e:	3d 00 02 00 00       	cmp    eax,0x200
c0019153:	74 07                	je     c001915c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019155:	b0 00                	mov    al,0x0
c0019157:	e9 b6 01 00 00       	jmp    c0019312 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001915c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019164:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001916b:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0019172:	83 f8 ff             	cmp    eax,0xffffffff
c0019175:	74 07                	je     c001917e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019177:	b0 01                	mov    al,0x1
c0019179:	e9 94 01 00 00       	jmp    c0019312 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001917e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019188:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019190:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019197:	88 c2                	mov    dl,al
c0019199:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c001919e:	01 d0                	add    eax,edx
c00191a0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00191a7:	8b 15 e0 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245e0
c00191ad:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00191b4:	89 14 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],edx
c00191bb:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c00191c0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00191c7:	89 14 85 80 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb980],edx
c00191ce:	83 ec 0c             	sub    esp,0xc
c00191d1:	68 54 02 00 00       	push   0x254
c00191d6:	e8 43 2a ff ff       	call   c000bc1e <malloc>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00191e5:	83 ec 04             	sub    esp,0x4
c00191e8:	6a 00                	push   0x0
c00191ea:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00191f1:	50                   	push   eax
c00191f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00191f9:	e8 5e ba fe ff       	call   c0004c5c <f_mount>
c00191fe:	83 c4 10             	add    esp,0x10
c0019201:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019208:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019210:	74 19                	je     c001922b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019212:	83 ec 0c             	sub    esp,0xc
c0019215:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001921c:	e8 1d 2a ff ff       	call   c000bc3e <rfree>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	b0 00                	mov    al,0x0
c0019226:	e9 e7 00 00 00       	jmp    c0019312 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001922b:	83 ec 04             	sub    esp,0x4
c001922e:	68 00 01 00 00       	push   0x100
c0019233:	6a 00                	push   0x0
c0019235:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001923c:	50                   	push   eax
c001923d:	e8 c6 73 fe ff       	call   c0000608 <memset>
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	83 ec 08             	sub    esp,0x8
c0019248:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001924f:	50                   	push   eax
c0019250:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019257:	50                   	push   eax
c0019258:	e8 01 75 fe ff       	call   c000075e <strcat>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	83 ec 08             	sub    esp,0x8
c0019263:	68 9c 1c 02 c0       	push   0xc0021c9c
c0019268:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001926f:	50                   	push   eax
c0019270:	e8 e9 74 fe ff       	call   c000075e <strcat>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	83 ec 04             	sub    esp,0x4
c001927b:	6a 01                	push   0x1
c001927d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019284:	50                   	push   eax
c0019285:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019289:	50                   	push   eax
c001928a:	e8 2f ba fe ff       	call   c0004cbe <f_open>
c001928f:	83 c4 10             	add    esp,0x10
c0019292:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019299:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192a0:	85 c0                	test   eax,eax
c00192a2:	74 0a                	je     c00192ae <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00192a4:	78 2d                	js     c00192d3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192a6:	83 e8 04             	sub    eax,0x4
c00192a9:	83 f8 01             	cmp    eax,0x1
c00192ac:	77 25                	ja     c00192d3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192ae:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00192b6:	83 ec 0c             	sub    esp,0xc
c00192b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192bd:	50                   	push   eax
c00192be:	e8 4d c5 fe ff       	call   c0005810 <f_close>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	90                   	nop
c00192c7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00192cf:	74 3a                	je     c001930b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00192d1:	eb 2d                	jmp    c0019300 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00192d3:	83 ec 0c             	sub    esp,0xc
c00192d6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192dd:	e8 5c 29 ff ff       	call   c000bc3e <rfree>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	83 ec 04             	sub    esp,0x4
c00192e8:	6a 00                	push   0x0
c00192ea:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192f1:	50                   	push   eax
c00192f2:	6a 00                	push   0x0
c00192f4:	e8 63 b9 fe ff       	call   c0004c5c <f_mount>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	b0 00                	mov    al,0x0
c00192fe:	eb 12                	jmp    c0019312 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019300:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0019305:	40                   	inc    eax
c0019306:	a3 e0 45 02 c0       	mov    ds:0xc00245e0,eax
c001930b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019312:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019318:	c3                   	ret    
c0019319:	90                   	nop

c001931a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001931a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019320:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019328:	74 0a                	je     c0019334 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001932a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019332:	75 0a                	jne    c001933e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019334:	b8 04 00 00 00       	mov    eax,0x4
c0019339:	e9 db 00 00 00       	jmp    c0019419 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001933e:	83 ec 08             	sub    esp,0x8
c0019341:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019348:	50                   	push   eax
c0019349:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019350:	e8 c5 ca fe ff       	call   c0005e1a <f_readdir>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001935f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019365:	83 ec 0c             	sub    esp,0xc
c0019368:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001936f:	83 c0 1a             	add    eax,0x1a
c0019372:	50                   	push   eax
c0019373:	e8 ad 72 fe ff       	call   c0000625 <strlen>
c0019378:	83 c4 10             	add    esp,0x10
c001937b:	ba 00 00 00 00       	mov    edx,0x0
c0019380:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019384:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019388:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001938f:	0f b6 c0             	movzx  eax,al
c0019392:	83 e0 10             	and    eax,0x10
c0019395:	74 07                	je     c001939e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019397:	b8 02 00 00 00       	mov    eax,0x2
c001939c:	eb 05                	jmp    c00193a3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001939e:	b8 01 00 00 00       	mov    eax,0x1
c00193a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193a7:	83 ec 08             	sub    esp,0x8
c00193aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00193b1:	83 c0 1a             	add    eax,0x1a
c00193b4:	50                   	push   eax
c00193b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00193b9:	83 c0 10             	add    eax,0x10
c00193bc:	50                   	push   eax
c00193bd:	e8 e5 72 fe ff       	call   c00006a7 <strcpy>
c00193c2:	83 c4 10             	add    esp,0x10
c00193c5:	83 ec 04             	sub    esp,0x4
c00193c8:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00193cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193d3:	50                   	push   eax
c00193d4:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00193db:	e8 f2 71 fe ff       	call   c00005d2 <memcpy>
c00193e0:	83 c4 10             	add    esp,0x10
c00193e3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00193ea:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193f0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00193f7:	84 c0                	test   al,al
c00193f9:	75 07                	jne    c0019402 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00193fb:	b8 07 00 00 00       	mov    eax,0x7
c0019400:	eb 17                	jmp    c0019419 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019402:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019409:	85 c0                	test   eax,eax
c001940b:	75 07                	jne    c0019414 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001940d:	b8 00 00 00 00       	mov    eax,0x0
c0019412:	eb 05                	jmp    c0019419 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019414:	b8 01 00 00 00       	mov    eax,0x1
c0019419:	81 c4 3c 02 00 00    	add    esp,0x23c
c001941f:	c3                   	ret    

c0019420 <FAT::read(void*, unsigned long, void*, int*)>:
c0019420:	83 ec 1c             	sub    esp,0x1c
c0019423:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019428:	74 07                	je     c0019431 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001942a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001942f:	75 07                	jne    c0019438 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019431:	b8 04 00 00 00       	mov    eax,0x4
c0019436:	eb 3d                	jmp    c0019475 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019438:	8d 44 24 08          	lea    eax,[esp+0x8]
c001943c:	50                   	push   eax
c001943d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019441:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019445:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019449:	e8 ac bc fe ff       	call   c00050fa <f_read>
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019455:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019459:	89 c2                	mov    edx,eax
c001945b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001945f:	89 10                	mov    DWORD PTR [eax],edx
c0019461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019465:	85 c0                	test   eax,eax
c0019467:	75 07                	jne    c0019470 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019469:	b8 00 00 00 00       	mov    eax,0x0
c001946e:	eb 05                	jmp    c0019475 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019470:	b8 01 00 00 00       	mov    eax,0x1
c0019475:	83 c4 1c             	add    esp,0x1c
c0019478:	c3                   	ret    
c0019479:	90                   	nop

c001947a <FAT::write(void*, unsigned long, void*, int*)>:
c001947a:	83 ec 1c             	sub    esp,0x1c
c001947d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019482:	74 07                	je     c001948b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019484:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019489:	75 07                	jne    c0019492 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001948b:	b8 04 00 00 00       	mov    eax,0x4
c0019490:	eb 3d                	jmp    c00194cf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019492:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019496:	50                   	push   eax
c0019497:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001949b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001949f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194a3:	e8 d2 be fe ff       	call   c000537a <f_write>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b3:	89 c2                	mov    edx,eax
c00194b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194b9:	89 10                	mov    DWORD PTR [eax],edx
c00194bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194bf:	85 c0                	test   eax,eax
c00194c1:	75 07                	jne    c00194ca <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00194c3:	b8 00 00 00 00       	mov    eax,0x0
c00194c8:	eb 05                	jmp    c00194cf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194ca:	b8 01 00 00 00       	mov    eax,0x1
c00194cf:	83 c4 1c             	add    esp,0x1c
c00194d2:	c3                   	ret    
c00194d3:	90                   	nop

c00194d4 <FAT::close(void*)>:
c00194d4:	83 ec 1c             	sub    esp,0x1c
c00194d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194dc:	75 07                	jne    c00194e5 <FAT::close(void*)+0x11>
c00194de:	b8 04 00 00 00       	mov    eax,0x4
c00194e3:	eb 36                	jmp    c001951b <FAT::close(void*)+0x47>
c00194e5:	83 ec 0c             	sub    esp,0xc
c00194e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ec:	e8 1f c3 fe ff       	call   c0005810 <f_close>
c00194f1:	83 c4 10             	add    esp,0x10
c00194f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194ff:	e8 2a 27 ff ff       	call   c000bc2e <free>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001950b:	85 c0                	test   eax,eax
c001950d:	75 07                	jne    c0019516 <FAT::close(void*)+0x42>
c001950f:	b8 00 00 00 00       	mov    eax,0x0
c0019514:	eb 05                	jmp    c001951b <FAT::close(void*)+0x47>
c0019516:	b8 01 00 00 00       	mov    eax,0x1
c001951b:	83 c4 1c             	add    esp,0x1c
c001951e:	c3                   	ret    
c001951f:	90                   	nop

c0019520 <FAT::closeDir(void*)>:
c0019520:	83 ec 1c             	sub    esp,0x1c
c0019523:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019528:	75 07                	jne    c0019531 <FAT::closeDir(void*)+0x11>
c001952a:	b8 04 00 00 00       	mov    eax,0x4
c001952f:	eb 36                	jmp    c0019567 <FAT::closeDir(void*)+0x47>
c0019531:	83 ec 0c             	sub    esp,0xc
c0019534:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019538:	e8 bb c8 fe ff       	call   c0005df8 <f_closedir>
c001953d:	83 c4 10             	add    esp,0x10
c0019540:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019544:	83 ec 0c             	sub    esp,0xc
c0019547:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001954b:	e8 de 26 ff ff       	call   c000bc2e <free>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019557:	85 c0                	test   eax,eax
c0019559:	75 07                	jne    c0019562 <FAT::closeDir(void*)+0x42>
c001955b:	b8 00 00 00 00       	mov    eax,0x0
c0019560:	eb 05                	jmp    c0019567 <FAT::closeDir(void*)+0x47>
c0019562:	b8 01 00 00 00       	mov    eax,0x1
c0019567:	83 c4 1c             	add    esp,0x1c
c001956a:	c3                   	ret    
c001956b:	90                   	nop

c001956c <FAT::seek(void*, unsigned long long)>:
c001956c:	83 ec 2c             	sub    esp,0x2c
c001956f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019577:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001957b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001957f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019584:	75 07                	jne    c001958d <FAT::seek(void*, unsigned long long)+0x21>
c0019586:	b8 04 00 00 00       	mov    eax,0x4
c001958b:	eb 2f                	jmp    c00195bc <FAT::seek(void*, unsigned long long)+0x50>
c001958d:	83 ec 04             	sub    esp,0x4
c0019590:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019594:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019598:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001959c:	e8 9e c2 fe ff       	call   c000583f <f_lseek>
c00195a1:	83 c4 10             	add    esp,0x10
c00195a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ac:	85 c0                	test   eax,eax
c00195ae:	75 07                	jne    c00195b7 <FAT::seek(void*, unsigned long long)+0x4b>
c00195b0:	b8 00 00 00 00       	mov    eax,0x0
c00195b5:	eb 05                	jmp    c00195bc <FAT::seek(void*, unsigned long long)+0x50>
c00195b7:	b8 01 00 00 00       	mov    eax,0x1
c00195bc:	83 c4 2c             	add    esp,0x2c
c00195bf:	c3                   	ret    

c00195c0 <fatWrapperReadDisk>:
c00195c0:	83 ec 1c             	sub    esp,0x1c
c00195c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00195d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00195d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195df:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c00195e6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00195ea:	83 ec 0c             	sub    esp,0xc
c00195ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195f1:	52                   	push   edx
c00195f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195fa:	50                   	push   eax
c00195fb:	e8 48 86 ff ff       	call   c0011c48 <LogicalDisk::read(unsigned long long, int, void*)>
c0019600:	83 c4 20             	add    esp,0x20
c0019603:	83 c4 1c             	add    esp,0x1c
c0019606:	c3                   	ret    

c0019607 <fatWrapperWriteDisk>:
c0019607:	83 ec 1c             	sub    esp,0x1c
c001960a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001960e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019612:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019616:	89 04 24             	mov    DWORD PTR [esp],eax
c0019619:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001961d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019621:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019626:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c001962d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019631:	83 ec 0c             	sub    esp,0xc
c0019634:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019638:	52                   	push   edx
c0019639:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001963d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019641:	50                   	push   eax
c0019642:	e8 6d 86 ff ff       	call   c0011cb4 <LogicalDisk::write(unsigned long long, int, void*)>
c0019647:	83 c4 20             	add    esp,0x20
c001964a:	83 c4 1c             	add    esp,0x1c
c001964d:	c3                   	ret    

c001964e <fatWrapperIoctl>:
c001964e:	53                   	push   ebx
c001964f:	83 ec 28             	sub    esp,0x28
c0019652:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019656:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001965a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001965e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019662:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019667:	75 31                	jne    c001969a <fatWrapperIoctl+0x4c>
c0019669:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001966d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019671:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019676:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c001967d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019683:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001968d:	66 89 02             	mov    WORD PTR [edx],ax
c0019690:	b8 00 00 00 00       	mov    eax,0x0
c0019695:	e9 b2 00 00 00       	jmp    c001974c <fatWrapperIoctl+0xfe>
c001969a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001969f:	75 6a                	jne    c001970b <fatWrapperIoctl+0xbd>
c00196a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196a9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196ae:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c00196b5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196bb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196c1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196c7:	89 c8                	mov    eax,ecx
c00196c9:	89 da                	mov    edx,ebx
c00196cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196cf:	c1 e0 0a             	shl    eax,0xa
c00196d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196d7:	8b 0c 8d 60 37 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc8a0]
c00196de:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196e4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196ea:	89 cb                	mov    ebx,ecx
c00196ec:	c1 fb 1f             	sar    ebx,0x1f
c00196ef:	53                   	push   ebx
c00196f0:	51                   	push   ecx
c00196f1:	52                   	push   edx
c00196f2:	50                   	push   eax
c00196f3:	e8 24 4b 00 00       	call   c001e21c <__udivdi3>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00196ff:	89 01                	mov    DWORD PTR [ecx],eax
c0019701:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019704:	b8 00 00 00 00       	mov    eax,0x0
c0019709:	eb 41                	jmp    c001974c <fatWrapperIoctl+0xfe>
c001970b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019710:	75 07                	jne    c0019719 <fatWrapperIoctl+0xcb>
c0019712:	b8 00 00 00 00       	mov    eax,0x0
c0019717:	eb 33                	jmp    c001974c <fatWrapperIoctl+0xfe>
c0019719:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001971e:	75 19                	jne    c0019739 <fatWrapperIoctl+0xeb>
c0019720:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019724:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001972c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019732:	b8 00 00 00 00       	mov    eax,0x0
c0019737:	eb 13                	jmp    c001974c <fatWrapperIoctl+0xfe>
c0019739:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001973e:	75 07                	jne    c0019747 <fatWrapperIoctl+0xf9>
c0019740:	b8 00 00 00 00       	mov    eax,0x0
c0019745:	eb 05                	jmp    c001974c <fatWrapperIoctl+0xfe>
c0019747:	b8 04 00 00 00       	mov    eax,0x4
c001974c:	83 c4 28             	add    esp,0x28
c001974f:	5b                   	pop    ebx
c0019750:	c3                   	ret    
c0019751:	90                   	nop

c0019752 <FAT::FAT()>:
c0019752:	83 ec 1c             	sub    esp,0x1c
c0019755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019759:	83 ec 0c             	sub    esp,0xc
c001975c:	50                   	push   eax
c001975d:	e8 68 58 ff ff       	call   c000efca <Filesystem::Filesystem()>
c0019762:	83 c4 10             	add    esp,0x10
c0019765:	ba d8 1c 02 c0       	mov    edx,0xc0021cd8
c001976a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001976e:	89 10                	mov    DWORD PTR [eax],edx
c0019770:	c7 05 e0 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245e0,0x0
c001977a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019782:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019787:	7f 15                	jg     c001979e <FAT::FAT()+0x4c>
c0019789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001978d:	c7 04 85 00 46 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdba00],0xffffffff
c0019798:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001979c:	eb e4                	jmp    c0019782 <FAT::FAT()+0x30>
c001979e:	90                   	nop
c001979f:	83 c4 1c             	add    esp,0x1c
c00197a2:	c3                   	ret    
c00197a3:	90                   	nop

c00197a4 <FAT::fixFilepath(char*)>:
c00197a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197a8:	8a 00                	mov    al,BYTE PTR [eax]
c00197aa:	3c 40                	cmp    al,0x40
c00197ac:	7e 2c                	jle    c00197da <FAT::fixFilepath(char*)+0x36>
c00197ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b2:	8a 00                	mov    al,BYTE PTR [eax]
c00197b4:	83 e8 41             	sub    eax,0x41
c00197b7:	88 c2                	mov    dl,al
c00197b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197bd:	88 10                	mov    BYTE PTR [eax],dl
c00197bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c3:	8a 00                	mov    al,BYTE PTR [eax]
c00197c5:	0f be c0             	movsx  eax,al
c00197c8:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c00197cf:	83 c0 30             	add    eax,0x30
c00197d2:	88 c2                	mov    dl,al
c00197d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d8:	88 10                	mov    BYTE PTR [eax],dl
c00197da:	90                   	nop
c00197db:	c3                   	ret    

c00197dc <FAT::open(char const*, void**, FileOpenMode)>:
c00197dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197ea:	74 0a                	je     c00197f6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00197ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197f4:	75 0a                	jne    c0019800 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00197f6:	b8 04 00 00 00       	mov    eax,0x4
c00197fb:	e9 fd 00 00 00       	jmp    c00198fd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019800:	83 ec 08             	sub    esp,0x8
c0019803:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001980a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001980e:	50                   	push   eax
c001980f:	e8 93 6e fe ff       	call   c00006a7 <strcpy>
c0019814:	83 c4 10             	add    esp,0x10
c0019817:	83 ec 08             	sub    esp,0x8
c001981a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001981e:	50                   	push   eax
c001981f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019826:	e8 79 ff ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019836:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001983d:	83 e0 01             	and    eax,0x1
c0019840:	74 08                	je     c001984a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019842:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001984a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019851:	83 e0 04             	and    eax,0x4
c0019854:	74 10                	je     c0019866 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019856:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001985e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019866:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986d:	83 e0 02             	and    eax,0x2
c0019870:	74 08                	je     c001987a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019872:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001987a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019881:	83 e0 08             	and    eax,0x8
c0019884:	74 08                	je     c001988e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019886:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001988e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019895:	83 e0 10             	and    eax,0x10
c0019898:	74 08                	je     c00198a2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001989a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	68 50 02 00 00       	push   0x250
c00198aa:	e8 6f 23 ff ff       	call   c000bc1e <malloc>
c00198af:	83 c4 10             	add    esp,0x10
c00198b2:	89 c2                	mov    edx,eax
c00198b4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198bb:	89 10                	mov    DWORD PTR [eax],edx
c00198bd:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00198c5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ce:	83 ec 04             	sub    esp,0x4
c00198d1:	52                   	push   edx
c00198d2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198d6:	52                   	push   edx
c00198d7:	50                   	push   eax
c00198d8:	e8 e1 b3 fe ff       	call   c0004cbe <f_open>
c00198dd:	83 c4 10             	add    esp,0x10
c00198e0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00198e7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00198ef:	74 07                	je     c00198f8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00198f1:	b8 01 00 00 00       	mov    eax,0x1
c00198f6:	eb 05                	jmp    c00198fd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198f8:	b8 00 00 00 00       	mov    eax,0x0
c00198fd:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019903:	c3                   	ret    

c0019904 <FAT::openDir(char const*, void**)>:
c0019904:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001990a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019912:	74 0a                	je     c001991e <FAT::openDir(char const*, void**)+0x1a>
c0019914:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001991c:	75 07                	jne    c0019925 <FAT::openDir(char const*, void**)+0x21>
c001991e:	b8 04 00 00 00       	mov    eax,0x4
c0019923:	eb 7d                	jmp    c00199a2 <FAT::openDir(char const*, void**)+0x9e>
c0019925:	83 ec 08             	sub    esp,0x8
c0019928:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001992f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019933:	50                   	push   eax
c0019934:	e8 6e 6d fe ff       	call   c00006a7 <strcpy>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019943:	50                   	push   eax
c0019944:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001994b:	e8 54 fe ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	6a 4c                	push   0x4c
c0019958:	e8 c1 22 ff ff       	call   c000bc1e <malloc>
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	89 c2                	mov    edx,eax
c0019962:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019969:	89 10                	mov    DWORD PTR [eax],edx
c001996b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019972:	8b 00                	mov    eax,DWORD PTR [eax]
c0019974:	83 ec 08             	sub    esp,0x8
c0019977:	8d 54 24 14          	lea    edx,[esp+0x14]
c001997b:	52                   	push   edx
c001997c:	50                   	push   eax
c001997d:	e8 74 c3 fe ff       	call   c0005cf6 <f_opendir>
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001998c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019994:	74 07                	je     c001999d <FAT::openDir(char const*, void**)+0x99>
c0019996:	b8 01 00 00 00       	mov    eax,0x1
c001999b:	eb 05                	jmp    c00199a2 <FAT::openDir(char const*, void**)+0x9e>
c001999d:	b8 00 00 00 00       	mov    eax,0x0
c00199a2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <FAT::stat(char const*, unsigned long long*, bool*)>:
c00199aa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00199b0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00199b8:	75 0a                	jne    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00199ba:	b8 04 00 00 00       	mov    eax,0x4
c00199bf:	e9 c9 00 00 00       	jmp    c0019a8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199c4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199cc:	75 0a                	jne    c00199d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00199ce:	b8 04 00 00 00       	mov    eax,0x4
c00199d3:	e9 b5 00 00 00       	jmp    c0019a8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199d8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00199e0:	75 0a                	jne    c00199ec <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00199e2:	b8 04 00 00 00       	mov    eax,0x4
c00199e7:	e9 a1 00 00 00       	jmp    c0019a8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199ec:	83 ec 08             	sub    esp,0x8
c00199ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199f6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199fd:	50                   	push   eax
c00199fe:	e8 a4 6c fe ff       	call   c00006a7 <strcpy>
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	83 ec 08             	sub    esp,0x8
c0019a09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a10:	50                   	push   eax
c0019a11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a18:	e8 87 fd ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	83 ec 08             	sub    esp,0x8
c0019a23:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a27:	50                   	push   eax
c0019a28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a2f:	50                   	push   eax
c0019a30:	e8 80 c4 fe ff       	call   c0005eb5 <f_stat>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a46:	85 c0                	test   eax,eax
c0019a48:	74 07                	je     c0019a51 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019a4a:	83 f8 04             	cmp    eax,0x4
c0019a4d:	74 32                	je     c0019a81 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019a4f:	eb 37                	jmp    c0019a88 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019a51:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a55:	0f b6 c0             	movzx  eax,al
c0019a58:	83 e0 10             	and    eax,0x10
c0019a5b:	0f 95 c2             	setne  dl
c0019a5e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a65:	88 10                	mov    BYTE PTR [eax],dl
c0019a67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019a6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a6e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a75:	89 01                	mov    DWORD PTR [ecx],eax
c0019a77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a7a:	b8 00 00 00 00       	mov    eax,0x0
c0019a7f:	eb 0c                	jmp    c0019a8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a81:	b8 02 00 00 00       	mov    eax,0x2
c0019a86:	eb 05                	jmp    c0019a8d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a88:	b8 01 00 00 00       	mov    eax,0x1
c0019a8d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a93:	c3                   	ret    

c0019a94 <FAT::unlink(char const*)>:
c0019a94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019aa2:	75 07                	jne    c0019aab <FAT::unlink(char const*)+0x17>
c0019aa4:	b8 04 00 00 00       	mov    eax,0x4
c0019aa9:	eb 5c                	jmp    c0019b07 <FAT::unlink(char const*)+0x73>
c0019aab:	83 ec 08             	sub    esp,0x8
c0019aae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ab5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ab9:	50                   	push   eax
c0019aba:	e8 e8 6b fe ff       	call   c00006a7 <strcpy>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	83 ec 08             	sub    esp,0x8
c0019ac5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ac9:	50                   	push   eax
c0019aca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ad1:	e8 ce fc ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019ad6:	83 c4 10             	add    esp,0x10
c0019ad9:	83 ec 0c             	sub    esp,0xc
c0019adc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ae0:	50                   	push   eax
c0019ae1:	e8 21 c7 fe ff       	call   c0006207 <f_unlink>
c0019ae6:	83 c4 10             	add    esp,0x10
c0019ae9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019af0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019af7:	85 c0                	test   eax,eax
c0019af9:	75 07                	jne    c0019b02 <FAT::unlink(char const*)+0x6e>
c0019afb:	b8 00 00 00 00       	mov    eax,0x0
c0019b00:	eb 05                	jmp    c0019b07 <FAT::unlink(char const*)+0x73>
c0019b02:	b8 01 00 00 00       	mov    eax,0x1
c0019b07:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b0d:	c3                   	ret    

c0019b0e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b0e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b14:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019b1b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019b22:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b2a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b32:	75 0a                	jne    c0019b3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b34:	b8 04 00 00 00       	mov    eax,0x4
c0019b39:	e9 1c 01 00 00       	jmp    c0019c5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b3e:	83 ec 08             	sub    esp,0x8
c0019b41:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b4c:	50                   	push   eax
c0019b4d:	e8 55 6b fe ff       	call   c00006a7 <strcpy>
c0019b52:	83 c4 10             	add    esp,0x10
c0019b55:	83 ec 08             	sub    esp,0x8
c0019b58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b5c:	50                   	push   eax
c0019b5d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b64:	e8 3b fc ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b74:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b81:	83 e0 01             	and    eax,0x1
c0019b84:	74 08                	je     c0019b8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019b86:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019b8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b93:	83 e0 02             	and    eax,0x2
c0019b96:	74 08                	je     c0019ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019b98:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019ba0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba5:	83 e0 04             	and    eax,0x4
c0019ba8:	74 08                	je     c0019bb2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019baa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019bb2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb7:	83 e0 08             	and    eax,0x8
c0019bba:	74 08                	je     c0019bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019bbc:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019bc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bc9:	83 e0 01             	and    eax,0x1
c0019bcc:	74 08                	je     c0019bd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019bce:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019bd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bdb:	83 e0 02             	and    eax,0x2
c0019bde:	74 08                	je     c0019be8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019be0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019be8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bed:	83 e0 04             	and    eax,0x4
c0019bf0:	74 08                	je     c0019bfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019bf2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019bfa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bff:	83 e0 08             	and    eax,0x8
c0019c02:	74 08                	je     c0019c0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019c04:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019c0c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c13:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019c1a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c22:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c2a:	83 ec 04             	sub    esp,0x4
c0019c2d:	52                   	push   edx
c0019c2e:	50                   	push   eax
c0019c2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c33:	50                   	push   eax
c0019c34:	e8 70 cc fe ff       	call   c00068a9 <f_chmod>
c0019c39:	83 c4 10             	add    esp,0x10
c0019c3c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c43:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c4a:	85 c0                	test   eax,eax
c0019c4c:	75 07                	jne    c0019c55 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019c4e:	b8 00 00 00 00       	mov    eax,0x0
c0019c53:	eb 05                	jmp    c0019c5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019c55:	b8 01 00 00 00       	mov    eax,0x1
c0019c5a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c60:	c3                   	ret    
c0019c61:	90                   	nop

c0019c62 <FAT::rename(char const*, char const*)>:
c0019c62:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c68:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c70:	74 0a                	je     c0019c7c <FAT::rename(char const*, char const*)+0x1a>
c0019c72:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c7a:	75 0a                	jne    c0019c86 <FAT::rename(char const*, char const*)+0x24>
c0019c7c:	b8 04 00 00 00       	mov    eax,0x4
c0019c81:	e9 98 00 00 00       	jmp    c0019d1e <FAT::rename(char const*, char const*)+0xbc>
c0019c86:	83 ec 08             	sub    esp,0x8
c0019c89:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c90:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c97:	50                   	push   eax
c0019c98:	e8 0a 6a fe ff       	call   c00006a7 <strcpy>
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	83 ec 08             	sub    esp,0x8
c0019ca3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019caa:	50                   	push   eax
c0019cab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cb2:	e8 ed fa ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	83 ec 08             	sub    esp,0x8
c0019cbd:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019cc4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cc8:	50                   	push   eax
c0019cc9:	e8 d9 69 fe ff       	call   c00006a7 <strcpy>
c0019cce:	83 c4 10             	add    esp,0x10
c0019cd1:	83 ec 08             	sub    esp,0x8
c0019cd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cd8:	50                   	push   eax
c0019cd9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ce0:	e8 bf fa ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	83 ec 08             	sub    esp,0x8
c0019ceb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cef:	50                   	push   eax
c0019cf0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cf7:	50                   	push   eax
c0019cf8:	e8 b9 c8 fe ff       	call   c00065b6 <f_rename>
c0019cfd:	83 c4 10             	add    esp,0x10
c0019d00:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d07:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d0e:	85 c0                	test   eax,eax
c0019d10:	75 07                	jne    c0019d19 <FAT::rename(char const*, char const*)+0xb7>
c0019d12:	b8 00 00 00 00       	mov    eax,0x0
c0019d17:	eb 05                	jmp    c0019d1e <FAT::rename(char const*, char const*)+0xbc>
c0019d19:	b8 01 00 00 00       	mov    eax,0x1
c0019d1e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d24:	c3                   	ret    
c0019d25:	90                   	nop

c0019d26 <FAT::mkdir(char const*)>:
c0019d26:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d2c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d34:	75 07                	jne    c0019d3d <FAT::mkdir(char const*)+0x17>
c0019d36:	b8 04 00 00 00       	mov    eax,0x4
c0019d3b:	eb 5c                	jmp    c0019d99 <FAT::mkdir(char const*)+0x73>
c0019d3d:	83 ec 08             	sub    esp,0x8
c0019d40:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d4b:	50                   	push   eax
c0019d4c:	e8 56 69 fe ff       	call   c00006a7 <strcpy>
c0019d51:	83 c4 10             	add    esp,0x10
c0019d54:	83 ec 08             	sub    esp,0x8
c0019d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d5b:	50                   	push   eax
c0019d5c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d63:	e8 3c fa ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019d68:	83 c4 10             	add    esp,0x10
c0019d6b:	83 ec 0c             	sub    esp,0xc
c0019d6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d72:	50                   	push   eax
c0019d73:	e8 12 c6 fe ff       	call   c000638a <f_mkdir>
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d82:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d89:	85 c0                	test   eax,eax
c0019d8b:	75 07                	jne    c0019d94 <FAT::mkdir(char const*)+0x6e>
c0019d8d:	b8 00 00 00 00       	mov    eax,0x0
c0019d92:	eb 05                	jmp    c0019d99 <FAT::mkdir(char const*)+0x73>
c0019d94:	b8 01 00 00 00       	mov    eax,0x1
c0019d99:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d9f:	c3                   	ret    

c0019da0 <FAT::exists(char const*)>:
c0019da0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019da6:	83 ec 08             	sub    esp,0x8
c0019da9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019db0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019db4:	50                   	push   eax
c0019db5:	e8 ed 68 fe ff       	call   c00006a7 <strcpy>
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	83 ec 08             	sub    esp,0x8
c0019dc0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019dc4:	50                   	push   eax
c0019dc5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019dcc:	e8 d3 f9 ff ff       	call   c00197a4 <FAT::fixFilepath(char*)>
c0019dd1:	83 c4 10             	add    esp,0x10
c0019dd4:	83 ec 08             	sub    esp,0x8
c0019dd7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0019dde:	50                   	push   eax
c0019ddf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019de3:	50                   	push   eax
c0019de4:	e8 cc c0 fe ff       	call   c0005eb5 <f_stat>
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019df3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019dfa:	85 c0                	test   eax,eax
c0019dfc:	75 04                	jne    c0019e02 <FAT::exists(char const*)+0x62>
c0019dfe:	b0 01                	mov    al,0x1
c0019e00:	eb 02                	jmp    c0019e04 <FAT::exists(char const*)+0x64>
c0019e02:	b0 00                	mov    al,0x0
c0019e04:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop

c0019e0c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e0c:	b8 08 00 00 00       	mov    eax,0x8
c0019e11:	c3                   	ret    

c0019e12 <ISO9660::seek(void*, unsigned long long)>:
c0019e12:	53                   	push   ebx
c0019e13:	b8 04 00 00 00       	mov    eax,0x4
c0019e18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e24:	85 d2                	test   edx,edx
c0019e26:	74 17                	je     c0019e3f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e28:	89 c8                	mov    eax,ecx
c0019e2a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e2d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e30:	b8 01 00 00 00       	mov    eax,0x1
c0019e35:	73 08                	jae    c0019e3f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e37:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019e3a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019e3d:	31 c0                	xor    eax,eax
c0019e3f:	5b                   	pop    ebx
c0019e40:	c3                   	ret    
c0019e41:	90                   	nop

c0019e42 <ISO9660::tell(void*, unsigned long long*)>:
c0019e42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e4a:	85 d2                	test   edx,edx
c0019e4c:	74 12                	je     c0019e60 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e4e:	85 c0                	test   eax,eax
c0019e50:	74 0e                	je     c0019e60 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e52:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e55:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019e58:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e5b:	89 10                	mov    DWORD PTR [eax],edx
c0019e5d:	31 c0                	xor    eax,eax
c0019e5f:	c3                   	ret    
c0019e60:	b8 04 00 00 00       	mov    eax,0x4
c0019e65:	c3                   	ret    

c0019e66 <ISO9660::getName()>:
c0019e66:	b8 34 1d 02 c0       	mov    eax,0xc0021d34
c0019e6b:	c3                   	ret    

c0019e6c <ISO9660::stat(void*, unsigned long long*)>:
c0019e6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e74:	85 d2                	test   edx,edx
c0019e76:	74 12                	je     c0019e8a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e78:	85 c0                	test   eax,eax
c0019e7a:	74 0e                	je     c0019e8a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019e7f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019e82:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e85:	89 10                	mov    DWORD PTR [eax],edx
c0019e87:	31 c0                	xor    eax,eax
c0019e89:	c3                   	ret    
c0019e8a:	b8 04 00 00 00       	mov    eax,0x4
c0019e8f:	c3                   	ret    

c0019e90 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e90:	b8 01 00 00 00       	mov    eax,0x1
c0019e95:	c3                   	ret    

c0019e96 <ISO9660::unlink(char const*)>:
c0019e96:	b8 01 00 00 00       	mov    eax,0x1
c0019e9b:	c3                   	ret    

c0019e9c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e9c:	b8 01 00 00 00       	mov    eax,0x1
c0019ea1:	c3                   	ret    

c0019ea2 <ISO9660::rename(char const*, char const*)>:
c0019ea2:	b8 01 00 00 00       	mov    eax,0x1
c0019ea7:	c3                   	ret    

c0019ea8 <ISO9660::mkdir(char const*)>:
c0019ea8:	b8 01 00 00 00       	mov    eax,0x1
c0019ead:	c3                   	ret    

c0019eae <ISO9660::close(void*)>:
c0019eae:	83 ec 0c             	sub    esp,0xc
c0019eb1:	b8 04 00 00 00       	mov    eax,0x4
c0019eb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019eba:	85 d2                	test   edx,edx
c0019ebc:	74 0e                	je     c0019ecc <ISO9660::close(void*)+0x1e>
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	52                   	push   edx
c0019ec2:	e8 67 1d ff ff       	call   c000bc2e <free>
c0019ec7:	83 c4 10             	add    esp,0x10
c0019eca:	31 c0                	xor    eax,eax
c0019ecc:	83 c4 0c             	add    esp,0xc
c0019ecf:	c3                   	ret    

c0019ed0 <ISO9660::closeDir(void*)>:
c0019ed0:	83 ec 0c             	sub    esp,0xc
c0019ed3:	b8 04 00 00 00       	mov    eax,0x4
c0019ed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019edc:	85 d2                	test   edx,edx
c0019ede:	74 0e                	je     c0019eee <ISO9660::closeDir(void*)+0x1e>
c0019ee0:	83 ec 0c             	sub    esp,0xc
c0019ee3:	52                   	push   edx
c0019ee4:	e8 45 1d ff ff       	call   c000bc2e <free>
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	31 c0                	xor    eax,eax
c0019eee:	83 c4 0c             	add    esp,0xc
c0019ef1:	c3                   	ret    

c0019ef2 <ISO9660::~ISO9660()>:
c0019ef2:	83 ec 0c             	sub    esp,0xc
c0019ef5:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c0019efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efe:	89 10                	mov    DWORD PTR [eax],edx
c0019f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f04:	83 ec 0c             	sub    esp,0xc
c0019f07:	50                   	push   eax
c0019f08:	e8 e1 50 ff ff       	call   c000efee <Filesystem::~Filesystem()>
c0019f0d:	83 c4 10             	add    esp,0x10
c0019f10:	90                   	nop
c0019f11:	83 c4 0c             	add    esp,0xc
c0019f14:	c3                   	ret    
c0019f15:	90                   	nop

c0019f16 <ISO9660::~ISO9660()>:
c0019f16:	83 ec 0c             	sub    esp,0xc
c0019f19:	83 ec 0c             	sub    esp,0xc
c0019f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f20:	e8 cd ff ff ff       	call   c0019ef2 <ISO9660::~ISO9660()>
c0019f25:	83 c4 10             	add    esp,0x10
c0019f28:	83 ec 08             	sub    esp,0x8
c0019f2b:	6a 08                	push   0x8
c0019f2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f31:	e8 af 4c ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	83 c4 0c             	add    esp,0xc
c0019f3c:	c3                   	ret    

c0019f3d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019f3d:	55                   	push   ebp
c0019f3e:	31 c9                	xor    ecx,ecx
c0019f40:	57                   	push   edi
c0019f41:	56                   	push   esi
c0019f42:	53                   	push   ebx
c0019f43:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019f47:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f4b:	89 eb                	mov    ebx,ebp
c0019f4d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019f51:	39 ce                	cmp    esi,ecx
c0019f53:	7e 17                	jle    c0019f6c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019f55:	31 d2                	xor    edx,edx
c0019f57:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019f5b:	7d 13                	jge    c0019f70 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019f5d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f61:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019f64:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019f67:	75 0d                	jne    c0019f76 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019f69:	42                   	inc    edx
c0019f6a:	eb eb                	jmp    c0019f57 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019f6c:	31 c0                	xor    eax,eax
c0019f6e:	eb 0a                	jmp    c0019f7a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f70:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019f74:	eb 04                	jmp    c0019f7a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f76:	41                   	inc    ecx
c0019f77:	43                   	inc    ebx
c0019f78:	eb d7                	jmp    c0019f51 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019f7a:	5b                   	pop    ebx
c0019f7b:	5e                   	pop    esi
c0019f7c:	5f                   	pop    edi
c0019f7d:	5d                   	pop    ebp
c0019f7e:	c3                   	ret    

c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019f7f:	56                   	push   esi
c0019f80:	53                   	push   ebx
c0019f81:	52                   	push   edx
c0019f82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f8e:	39 0d e0 46 02 c0    	cmp    DWORD PTR ds:0xc00246e0,ecx
c0019f94:	75 08                	jne    c0019f9e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019f96:	38 05 88 2b 02 c0    	cmp    BYTE PTR ds:0xc0022b88,al
c0019f9c:	74 2b                	je     c0019fc9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019f9e:	83 ec 0c             	sub    esp,0xc
c0019fa1:	a2 88 2b 02 c0       	mov    ds:0xc0022b88,al
c0019fa6:	68 00 47 02 c0       	push   0xc0024700
c0019fab:	0f be c0             	movsx  eax,al
c0019fae:	6a 01                	push   0x1
c0019fb0:	89 0d e0 46 02 c0    	mov    DWORD PTR ds:0xc00246e0,ecx
c0019fb6:	31 db                	xor    ebx,ebx
c0019fb8:	53                   	push   ebx
c0019fb9:	51                   	push   ecx
c0019fba:	ff 34 85 5c 36 02 c0 	push   DWORD PTR [eax*4-0x3ffdc9a4]
c0019fc1:	e8 82 7c ff ff       	call   c0011c48 <LogicalDisk::read(unsigned long long, int, void*)>
c0019fc6:	83 c4 20             	add    esp,0x20
c0019fc9:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019fd1:	c7 44 24 14 00 47 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024700
c0019fd9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019fdd:	58                   	pop    eax
c0019fde:	5b                   	pop    ebx
c0019fdf:	5e                   	pop    esi
c0019fe0:	e9 ed 65 fe ff       	jmp    c00005d2 <memcpy>
c0019fe5:	90                   	nop

c0019fe6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019fe6:	81 ec 10 08 00 00    	sub    esp,0x810
c0019fec:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019ff3:	83 c0 41             	add    eax,0x41
c0019ff6:	0f be c0             	movsx  eax,al
c0019ff9:	50                   	push   eax
c0019ffa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ffe:	50                   	push   eax
c0019fff:	6a 10                	push   0x10
c001a001:	e8 79 ff ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a006:	83 c4 10             	add    esp,0x10
c001a009:	31 c0                	xor    eax,eax
c001a00b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a010:	75 1d                	jne    c001a02f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a012:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a017:	75 16                	jne    c001a02f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a019:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a01e:	75 0f                	jne    c001a02f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a020:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a025:	75 08                	jne    c001a02f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a027:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a02c:	0f 94 c0             	sete   al
c001a02f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a035:	c3                   	ret    

c001a036 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a036:	55                   	push   ebp
c001a037:	57                   	push   edi
c001a038:	56                   	push   esi
c001a039:	53                   	push   ebx
c001a03a:	81 ec 34 08 00 00    	sub    esp,0x834
c001a040:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a047:	55                   	push   ebp
c001a048:	68 4f 1d 02 c0       	push   0xc0021d4f
c001a04d:	e8 73 4c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001a052:	83 c4 10             	add    esp,0x10
c001a055:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a05d:	0f 84 06 02 00 00    	je     c001a269 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a063:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a06b:	0f 84 f8 01 00 00    	je     c001a269 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a071:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a078:	b8 01 00 00 00       	mov    eax,0x1
c001a07d:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a081:	0f 85 e7 01 00 00    	jne    c001a26e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a087:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a08a:	31 d2                	xor    edx,edx
c001a08c:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a08f:	89 e9                	mov    ecx,ebp
c001a091:	89 d3                	mov    ebx,edx
c001a093:	01 f1                	add    ecx,esi
c001a095:	11 fb                	adc    ebx,edi
c001a097:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a09b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a09f:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a0a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a0a9:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a0ac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a0b0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a0b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a0b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0bc:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a0c0:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a0c4:	72 19                	jb     c001a0df <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a0c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0dd:	eb 13                	jmp    c001a0f2 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0e7:	29 f0                	sub    eax,esi
c001a0e9:	19 fa                	sbb    edx,edi
c001a0eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0f2:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a0f9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0fe:	53                   	push   ebx
c001a0ff:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a103:	c1 e0 0b             	shl    eax,0xb
c001a106:	01 c6                	add    esi,eax
c001a108:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a10f:	11 d7                	adc    edi,edx
c001a111:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a115:	89 fa                	mov    edx,edi
c001a117:	50                   	push   eax
c001a118:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a11c:	50                   	push   eax
c001a11d:	89 f0                	mov    eax,esi
c001a11f:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a123:	50                   	push   eax
c001a124:	e8 56 fe ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a129:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a130:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a134:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a137:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a13b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a141:	83 c4 10             	add    esp,0x10
c001a144:	b8 00 08 00 00       	mov    eax,0x800
c001a149:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a14d:	29 d0                	sub    eax,edx
c001a14f:	39 c1                	cmp    ecx,eax
c001a151:	83 db 00             	sbb    ebx,0x0
c001a154:	7d 19                	jge    c001a16f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a156:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a15b:	75 16                	jne    c001a173 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a15d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a164:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a16a:	e9 f6 00 00 00       	jmp    c001a265 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a16f:	89 c5                	mov    ebp,eax
c001a171:	eb 03                	jmp    c001a176 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a173:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a176:	51                   	push   ecx
c001a177:	55                   	push   ebp
c001a178:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a17c:	50                   	push   eax
c001a17d:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a184:	e8 49 64 fe ff       	call   c00005d2 <memcpy>
c001a189:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a18d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a191:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a198:	01 e8                	add    eax,ebp
c001a19a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a19e:	89 e8                	mov    eax,ebp
c001a1a0:	99                   	cdq    
c001a1a1:	01 ee                	add    esi,ebp
c001a1a3:	11 d7                	adc    edi,edx
c001a1a5:	29 e9                	sub    ecx,ebp
c001a1a7:	19 d3                	sbb    ebx,edx
c001a1a9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a1ad:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1b1:	83 c4 10             	add    esp,0x10
c001a1b4:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a1b9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a1bc:	b8 00 00 00 00       	mov    eax,0x0
c001a1c1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1c5:	7d 3f                	jge    c001a206 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a1c7:	52                   	push   edx
c001a1c8:	89 fa                	mov    edx,edi
c001a1ca:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1d1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a1d5:	50                   	push   eax
c001a1d6:	89 f0                	mov    eax,esi
c001a1d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1dc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a1e0:	50                   	push   eax
c001a1e1:	e8 99 fd ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1e6:	81 c6 00 08 00 00    	add    esi,0x800
c001a1ec:	83 d7 00             	adc    edi,0x0
c001a1ef:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a1f7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a1ff:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a204:	eb ab                	jmp    c001a1b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a20a:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a20d:	74 34                	je     c001a243 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a20f:	89 fa                	mov    edx,edi
c001a211:	50                   	push   eax
c001a212:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a219:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a21d:	50                   	push   eax
c001a21e:	89 f0                	mov    eax,esi
c001a220:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a224:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a228:	55                   	push   ebp
c001a229:	50                   	push   eax
c001a22a:	e8 50 fd ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a22f:	83 c4 0c             	add    esp,0xc
c001a232:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a236:	55                   	push   ebp
c001a237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a23b:	e8 92 63 fe ff       	call   c00005d2 <memcpy>
c001a240:	83 c4 10             	add    esp,0x10
c001a243:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a24a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a24e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a252:	89 38                	mov    DWORD PTR [eax],edi
c001a254:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a25b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a25f:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a262:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a265:	31 c0                	xor    eax,eax
c001a267:	eb 05                	jmp    c001a26e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a269:	b8 04 00 00 00       	mov    eax,0x4
c001a26e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a274:	5b                   	pop    ebx
c001a275:	5e                   	pop    esi
c001a276:	5f                   	pop    edi
c001a277:	5d                   	pop    ebp
c001a278:	c3                   	ret    
c001a279:	90                   	nop

c001a27a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a27a:	55                   	push   ebp
c001a27b:	57                   	push   edi
c001a27c:	56                   	push   esi
c001a27d:	53                   	push   ebx
c001a27e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a284:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a28b:	85 f6                	test   esi,esi
c001a28d:	0f 84 64 02 00 00    	je     c001a4f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a293:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a29b:	0f 84 56 02 00 00    	je     c001a4f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a2a1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a2a4:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a2a7:	75 0a                	jne    c001a2b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a2a9:	b8 07 00 00 00       	mov    eax,0x7
c001a2ae:	e9 49 02 00 00       	jmp    c001a4fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a2b3:	50                   	push   eax
c001a2b4:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a2b8:	50                   	push   eax
c001a2b9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a2c0:	53                   	push   ebx
c001a2c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2c3:	c1 e0 0b             	shl    eax,0xb
c001a2c6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a2c9:	c1 e8 0b             	shr    eax,0xb
c001a2cc:	50                   	push   eax
c001a2cd:	e8 ad fc ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	89 c1                	mov    ecx,eax
c001a2da:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a2dd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a2e3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a2e6:	84 db                	test   bl,bl
c001a2e8:	0f 85 90 00 00 00    	jne    c001a37e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a2ee:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a2f4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a2fa:	29 c7                	sub    edi,eax
c001a2fc:	89 fb                	mov    ebx,edi
c001a2fe:	c1 fb 1f             	sar    ebx,0x1f
c001a301:	01 f8                	add    eax,edi
c001a303:	11 da                	adc    edx,ebx
c001a305:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a309:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a30d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a310:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a313:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a316:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a319:	89 04 24             	mov    DWORD PTR [esp],eax
c001a31c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a320:	89 d8                	mov    eax,ebx
c001a322:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a325:	ba 00 00 00 00       	mov    edx,0x0
c001a32a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a32e:	b8 00 00 00 00       	mov    eax,0x0
c001a333:	73 0b                	jae    c001a340 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a335:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a338:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a33c:	29 f8                	sub    eax,edi
c001a33e:	19 da                	sbb    edx,ebx
c001a340:	89 d3                	mov    ebx,edx
c001a342:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a345:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a348:	09 c3                	or     ebx,eax
c001a34a:	0f 84 59 ff ff ff    	je     c001a2a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a350:	55                   	push   ebp
c001a351:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a355:	50                   	push   eax
c001a356:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a35d:	53                   	push   ebx
c001a35e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a360:	c1 e0 0b             	shl    eax,0xb
c001a363:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a367:	c1 e8 0b             	shr    eax,0xb
c001a36a:	50                   	push   eax
c001a36b:	e8 0f fc ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a370:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	25 ff 07 00 00       	and    eax,0x7ff
c001a37b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a37e:	57                   	push   edi
c001a37f:	6a 28                	push   0x28
c001a381:	6a 00                	push   0x0
c001a383:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a387:	50                   	push   eax
c001a388:	e8 7b 62 fe ff       	call   c0000608 <memset>
c001a38d:	31 d2                	xor    edx,edx
c001a38f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a392:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a398:	89 f8                	mov    eax,edi
c001a39a:	83 c0 21             	add    eax,0x21
c001a39d:	83 d2 00             	adc    edx,0x0
c001a3a0:	89 c7                	mov    edi,eax
c001a3a2:	89 d5                	mov    ebp,edx
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	31 c9                	xor    ecx,ecx
c001a3a9:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a3b0:	83 f9 28             	cmp    ecx,0x28
c001a3b3:	88 04 24             	mov    BYTE PTR [esp],al
c001a3b6:	0f 94 c2             	sete   dl
c001a3b9:	88 d0                	mov    al,dl
c001a3bb:	ba ff 07 00 00       	mov    edx,0x7ff
c001a3c0:	39 fa                	cmp    edx,edi
c001a3c2:	ba 00 00 00 00       	mov    edx,0x0
c001a3c7:	19 ea                	sbb    edx,ebp
c001a3c9:	0f 92 c2             	setb   dl
c001a3cc:	09 c2                	or     edx,eax
c001a3ce:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a3d2:	0f 94 c0             	sete   al
c001a3d5:	08 d0                	or     al,dl
c001a3d7:	75 16                	jne    c001a3ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3d9:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a3dd:	74 10                	je     c001a3ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a3df:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a3e2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a3e6:	41                   	inc    ecx
c001a3e7:	83 c7 01             	add    edi,0x1
c001a3ea:	83 d5 00             	adc    ebp,0x0
c001a3ed:	eb ba                	jmp    c001a3a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a3ef:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a3f6:	83 ec 0c             	sub    esp,0xc
c001a3f9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a3fd:	57                   	push   edi
c001a3fe:	e8 22 62 fe ff       	call   c0000625 <strlen>
c001a403:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a40b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a40f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a416:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a419:	5a                   	pop    edx
c001a41a:	25 ff 07 00 00       	and    eax,0x7ff
c001a41f:	01 c8                	add    eax,ecx
c001a421:	59                   	pop    ecx
c001a422:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a428:	83 e0 02             	and    eax,0x2
c001a42b:	3c 01                	cmp    al,0x1
c001a42d:	19 c0                	sbb    eax,eax
c001a42f:	83 c0 02             	add    eax,0x2
c001a432:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a436:	57                   	push   edi
c001a437:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a43b:	50                   	push   eax
c001a43c:	e8 66 62 fe ff       	call   c00006a7 <strcpy>
c001a441:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	84 c0                	test   al,al
c001a44a:	75 21                	jne    c001a46d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a44c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a454:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a45c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a464:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a46b:	eb 28                	jmp    c001a495 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a46d:	fe c8                	dec    al
c001a46f:	75 24                	jne    c001a495 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a471:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a479:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a481:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a489:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a490:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a495:	0f b6 fb             	movzx  edi,bl
c001a498:	31 db                	xor    ebx,ebx
c001a49a:	50                   	push   eax
c001a49b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a4a2:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a4a6:	50                   	push   eax
c001a4a7:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a4ae:	e8 1f 61 fe ff       	call   c00005d2 <memcpy>
c001a4b3:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a4ba:	89 f9                	mov    ecx,edi
c001a4bc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a4c2:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a4c5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a4c8:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a4cb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	39 c7                	cmp    edi,eax
c001a4d3:	89 df                	mov    edi,ebx
c001a4d5:	19 d7                	sbb    edi,edx
c001a4d7:	72 10                	jb     c001a4e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a4d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a4e0:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a4e7:	eb 0a                	jmp    c001a4f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a4e9:	29 c8                	sub    eax,ecx
c001a4eb:	19 da                	sbb    edx,ebx
c001a4ed:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4f0:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4f3:	31 c0                	xor    eax,eax
c001a4f5:	eb 05                	jmp    c001a4fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a4f7:	b8 04 00 00 00       	mov    eax,0x4
c001a4fc:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a502:	5b                   	pop    ebx
c001a503:	5e                   	pop    esi
c001a504:	5f                   	pop    edi
c001a505:	5d                   	pop    ebp
c001a506:	c3                   	ret    

c001a507 <readRoot(unsigned int*, unsigned int*, char)>:
c001a507:	81 ec 40 08 00 00    	sub    esp,0x840
c001a50d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a515:	50                   	push   eax
c001a516:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a51a:	50                   	push   eax
c001a51b:	6a 10                	push   0x10
c001a51d:	e8 5d fa ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a522:	83 c4 0c             	add    esp,0xc
c001a525:	6a 22                	push   0x22
c001a527:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a52e:	50                   	push   eax
c001a52f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a533:	50                   	push   eax
c001a534:	e8 99 60 fe ff       	call   c00005d2 <memcpy>
c001a539:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a540:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a544:	89 10                	mov    DWORD PTR [eax],edx
c001a546:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a551:	89 10                	mov    DWORD PTR [eax],edx
c001a553:	b0 01                	mov    al,0x1
c001a555:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a55b:	c3                   	ret    

c001a55c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a55c:	55                   	push   ebp
c001a55d:	57                   	push   edi
c001a55e:	56                   	push   esi
c001a55f:	53                   	push   ebx
c001a560:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a566:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a56d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a578:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a57c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a580:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a584:	75 03                	jne    c001a589 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a586:	83 c3 02             	add    ebx,0x2
c001a589:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a58c:	75 03                	jne    c001a591 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a58e:	43                   	inc    ebx
c001a58f:	eb f8                	jmp    c001a589 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a591:	51                   	push   ecx
c001a592:	68 00 01 00 00       	push   0x100
c001a597:	6a 00                	push   0x0
c001a599:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a59d:	50                   	push   eax
c001a59e:	e8 65 60 fe ff       	call   c0000608 <memset>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	31 d2                	xor    edx,edx
c001a5a8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a5ab:	84 c0                	test   al,al
c001a5ad:	74 21                	je     c001a5d0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a5af:	3c 2f                	cmp    al,0x2f
c001a5b1:	75 0b                	jne    c001a5be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a5b3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a5b7:	bd 01 00 00 00       	mov    ebp,0x1
c001a5bc:	eb 14                	jmp    c001a5d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a5be:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a5c1:	80 f9 19             	cmp    cl,0x19
c001a5c4:	77 03                	ja     c001a5c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a5c6:	83 e8 20             	sub    eax,0x20
c001a5c9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a5cd:	42                   	inc    edx
c001a5ce:	eb d8                	jmp    c001a5a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a5d0:	31 ed                	xor    ebp,ebp
c001a5d2:	83 ec 0c             	sub    esp,0xc
c001a5d5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a5dc:	e8 3d 16 ff ff       	call   c000bc1e <malloc>
c001a5e1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5e8:	89 c6                	mov    esi,eax
c001a5ea:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a5f0:	c1 ef 0b             	shr    edi,0xb
c001a5f3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a5fa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a606:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a60a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a611:	74 28                	je     c001a63b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a613:	52                   	push   edx
c001a614:	57                   	push   edi
c001a615:	50                   	push   eax
c001a616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a61a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a621:	e8 59 f9 ff ff       	call   c0019f7f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a626:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a62a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a631:	05 00 08 00 00       	add    eax,0x800
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	eb cb                	jmp    c001a606 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a63b:	83 ec 0c             	sub    esp,0xc
c001a63e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a642:	57                   	push   edi
c001a643:	e8 dd 5f fe ff       	call   c0000625 <strlen>
c001a648:	50                   	push   eax
c001a649:	57                   	push   edi
c001a64a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a651:	56                   	push   esi
c001a652:	e8 e6 f8 ff ff       	call   c0019f3d <__memmem(unsigned char*, int, unsigned char*, int)>
c001a657:	83 c4 20             	add    esp,0x20
c001a65a:	85 c0                	test   eax,eax
c001a65c:	75 13                	jne    c001a671 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a65e:	83 ec 0c             	sub    esp,0xc
c001a661:	56                   	push   esi
c001a662:	e8 c7 15 ff ff       	call   c000bc2e <free>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	31 c0                	xor    eax,eax
c001a66c:	e9 b3 00 00 00       	jmp    c001a724 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a671:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a675:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a679:	c1 e7 08             	shl    edi,0x8
c001a67c:	c1 e2 10             	shl    edx,0x10
c001a67f:	09 d7                	or     edi,edx
c001a681:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a685:	09 d7                	or     edi,edx
c001a687:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a68b:	c1 e2 18             	shl    edx,0x18
c001a68e:	09 d7                	or     edi,edx
c001a690:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a694:	89 d1                	mov    ecx,edx
c001a696:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a69a:	c1 e1 08             	shl    ecx,0x8
c001a69d:	c1 e2 10             	shl    edx,0x10
c001a6a0:	09 ca                	or     edx,ecx
c001a6a2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a6a6:	09 ca                	or     edx,ecx
c001a6a8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a6ac:	c1 e1 18             	shl    ecx,0x18
c001a6af:	09 ca                	or     edx,ecx
c001a6b1:	89 e9                	mov    ecx,ebp
c001a6b3:	84 c9                	test   cl,cl
c001a6b5:	74 3c                	je     c001a6f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a6b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a6bb:	83 ec 0c             	sub    esp,0xc
c001a6be:	56                   	push   esi
c001a6bf:	e8 6a 15 ff ff       	call   c000bc2e <free>
c001a6c4:	83 c4 0c             	add    esp,0xc
c001a6c7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6ce:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a6d3:	50                   	push   eax
c001a6d4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6db:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a6e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6e6:	52                   	push   edx
c001a6e7:	57                   	push   edi
c001a6e8:	53                   	push   ebx
c001a6e9:	e8 6e fe ff ff       	call   c001a55c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a6ee:	83 c4 20             	add    esp,0x20
c001a6f1:	eb 31                	jmp    c001a724 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6f3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a6f6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a6fd:	d0 e8                	shr    al,1
c001a6ff:	89 3b                	mov    DWORD PTR [ebx],edi
c001a701:	83 e0 01             	and    eax,0x1
c001a704:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a70b:	83 ec 0c             	sub    esp,0xc
c001a70e:	89 13                	mov    DWORD PTR [ebx],edx
c001a710:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a717:	89 03                	mov    DWORD PTR [ebx],eax
c001a719:	56                   	push   esi
c001a71a:	e8 0f 15 ff ff       	call   c000bc2e <free>
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	b0 01                	mov    al,0x1
c001a724:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a72a:	5b                   	pop    ebx
c001a72b:	5e                   	pop    esi
c001a72c:	5f                   	pop    edi
c001a72d:	5d                   	pop    ebp
c001a72e:	c3                   	ret    

c001a72f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a72f:	55                   	push   ebp
c001a730:	57                   	push   edi
c001a731:	56                   	push   esi
c001a732:	53                   	push   ebx
c001a733:	83 ec 20             	sub    esp,0x20
c001a736:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a73a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a73e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a742:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a74a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a752:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a757:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a75d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a763:	57                   	push   edi
c001a764:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a768:	50                   	push   eax
c001a769:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a76d:	50                   	push   eax
c001a76e:	e8 94 fd ff ff       	call   c001a507 <readRoot(unsigned int*, unsigned int*, char)>
c001a773:	5a                   	pop    edx
c001a774:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a778:	e8 a8 5e fe ff       	call   c0000625 <strlen>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	83 f8 03             	cmp    eax,0x3
c001a783:	77 17                	ja     c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a785:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a789:	89 03                	mov    DWORD PTR [ebx],eax
c001a78b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a78f:	89 06                	mov    DWORD PTR [esi],eax
c001a791:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a798:	b0 01                	mov    al,0x1
c001a79a:	eb 19                	jmp    c001a7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a79c:	50                   	push   eax
c001a79d:	55                   	push   ebp
c001a79e:	57                   	push   edi
c001a79f:	56                   	push   esi
c001a7a0:	53                   	push   ebx
c001a7a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a7ad:	e8 aa fd ff ff       	call   c001a55c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a7b2:	83 c4 20             	add    esp,0x20
c001a7b5:	83 c4 1c             	add    esp,0x1c
c001a7b8:	5b                   	pop    ebx
c001a7b9:	5e                   	pop    esi
c001a7ba:	5f                   	pop    edi
c001a7bb:	5d                   	pop    ebp
c001a7bc:	c3                   	ret    
c001a7bd:	90                   	nop

c001a7be <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a7be:	57                   	push   edi
c001a7bf:	56                   	push   esi
c001a7c0:	53                   	push   ebx
c001a7c1:	83 ec 10             	sub    esp,0x10
c001a7c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7c8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7cc:	85 ff                	test   edi,edi
c001a7ce:	74 7b                	je     c001a84b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7d0:	85 f6                	test   esi,esi
c001a7d2:	74 77                	je     c001a84b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	6a 1c                	push   0x1c
c001a7d9:	e8 40 14 ff ff       	call   c000bc1e <malloc>
c001a7de:	89 07                	mov    DWORD PTR [edi],eax
c001a7e0:	89 c3                	mov    ebx,eax
c001a7e2:	58                   	pop    eax
c001a7e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7e7:	50                   	push   eax
c001a7e8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a7eb:	50                   	push   eax
c001a7ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7f0:	50                   	push   eax
c001a7f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7f5:	50                   	push   eax
c001a7f6:	56                   	push   esi
c001a7f7:	e8 33 ff ff ff       	call   c001a72f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a7fc:	83 c4 20             	add    esp,0x20
c001a7ff:	84 c0                	test   al,al
c001a801:	74 07                	je     c001a80a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a803:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a808:	74 0b                	je     c001a815 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a80a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a80e:	b8 01 00 00 00       	mov    eax,0x1
c001a813:	eb 3b                	jmp    c001a850 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a819:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a81d:	89 03                	mov    DWORD PTR [ebx],eax
c001a81f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a82a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a838:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a83b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a842:	8a 06                	mov    al,BYTE PTR [esi]
c001a844:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a847:	31 c0                	xor    eax,eax
c001a849:	eb 05                	jmp    c001a850 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a84b:	b8 04 00 00 00       	mov    eax,0x4
c001a850:	83 c4 10             	add    esp,0x10
c001a853:	5b                   	pop    ebx
c001a854:	5e                   	pop    esi
c001a855:	5f                   	pop    edi
c001a856:	c3                   	ret    
c001a857:	90                   	nop

c001a858 <ISO9660::exists(char const*)>:
c001a858:	83 ec 28             	sub    esp,0x28
c001a85b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a85f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a863:	52                   	push   edx
c001a864:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a867:	52                   	push   edx
c001a868:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a86c:	52                   	push   edx
c001a86d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a871:	52                   	push   edx
c001a872:	50                   	push   eax
c001a873:	e8 b7 fe ff ff       	call   c001a72f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a878:	83 c4 3c             	add    esp,0x3c
c001a87b:	c3                   	ret    

c001a87c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	83 ec 14             	sub    esp,0x14
c001a881:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a885:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a889:	85 db                	test   ebx,ebx
c001a88b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a88f:	0f 94 c2             	sete   dl
c001a892:	85 f6                	test   esi,esi
c001a894:	0f 94 c0             	sete   al
c001a897:	08 c2                	or     dl,al
c001a899:	75 68                	jne    c001a903 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a89b:	85 c9                	test   ecx,ecx
c001a89d:	74 64                	je     c001a903 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a89f:	83 ec 0c             	sub    esp,0xc
c001a8a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a8a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8b6:	50                   	push   eax
c001a8b7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a8ba:	50                   	push   eax
c001a8bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8bf:	50                   	push   eax
c001a8c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8c4:	50                   	push   eax
c001a8c5:	51                   	push   ecx
c001a8c6:	e8 64 fe ff ff       	call   c001a72f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8cb:	83 c4 20             	add    esp,0x20
c001a8ce:	ba 01 00 00 00       	mov    edx,0x1
c001a8d3:	84 c0                	test   al,al
c001a8d5:	74 31                	je     c001a908 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8e2:	89 03                	mov    DWORD PTR [ebx],eax
c001a8e4:	ba 00 00 00 00       	mov    edx,0x0
c001a8e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8ed:	85 c0                	test   eax,eax
c001a8ef:	0f 95 06             	setne  BYTE PTR [esi]
c001a8f2:	74 14                	je     c001a908 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8fa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a901:	eb 05                	jmp    c001a908 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a903:	ba 04 00 00 00       	mov    edx,0x4
c001a908:	83 c4 14             	add    esp,0x14
c001a90b:	89 d0                	mov    eax,edx
c001a90d:	5b                   	pop    ebx
c001a90e:	5e                   	pop    esi
c001a90f:	c3                   	ret    

c001a910 <ISO9660::openDir(char const*, void**)>:
c001a910:	57                   	push   edi
c001a911:	56                   	push   esi
c001a912:	53                   	push   ebx
c001a913:	83 ec 10             	sub    esp,0x10
c001a916:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a91a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a91e:	85 ff                	test   edi,edi
c001a920:	0f 84 95 00 00 00    	je     c001a9bb <ISO9660::openDir(char const*, void**)+0xab>
c001a926:	85 f6                	test   esi,esi
c001a928:	0f 84 8d 00 00 00    	je     c001a9bb <ISO9660::openDir(char const*, void**)+0xab>
c001a92e:	83 ec 0c             	sub    esp,0xc
c001a931:	6a 1c                	push   0x1c
c001a933:	e8 e6 12 ff ff       	call   c000bc1e <malloc>
c001a938:	89 07                	mov    DWORD PTR [edi],eax
c001a93a:	89 c3                	mov    ebx,eax
c001a93c:	59                   	pop    ecx
c001a93d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a941:	50                   	push   eax
c001a942:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a945:	50                   	push   eax
c001a946:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a94a:	50                   	push   eax
c001a94b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a94f:	50                   	push   eax
c001a950:	56                   	push   esi
c001a951:	e8 d9 fd ff ff       	call   c001a72f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a956:	83 c4 20             	add    esp,0x20
c001a959:	84 c0                	test   al,al
c001a95b:	74 07                	je     c001a964 <ISO9660::openDir(char const*, void**)+0x54>
c001a95d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a962:	75 21                	jne    c001a985 <ISO9660::openDir(char const*, void**)+0x75>
c001a964:	0f b6 c0             	movzx  eax,al
c001a967:	52                   	push   edx
c001a968:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a96c:	50                   	push   eax
c001a96d:	68 62 1d 02 c0       	push   0xc0021d62
c001a972:	e8 4e 43 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001a977:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a97b:	83 c4 10             	add    esp,0x10
c001a97e:	b8 01 00 00 00       	mov    eax,0x1
c001a983:	eb 3b                	jmp    c001a9c0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a989:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a98d:	89 03                	mov    DWORD PTR [ebx],eax
c001a98f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a99a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a9a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9a8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a9ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a9b2:	8a 06                	mov    al,BYTE PTR [esi]
c001a9b4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a9b7:	31 c0                	xor    eax,eax
c001a9b9:	eb 05                	jmp    c001a9c0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9bb:	b8 04 00 00 00       	mov    eax,0x4
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	c3                   	ret    
c001a9c7:	90                   	nop

c001a9c8 <ISO9660::ISO9660()>:
c001a9c8:	83 ec 0c             	sub    esp,0xc
c001a9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	50                   	push   eax
c001a9d3:	e8 f2 45 ff ff       	call   c000efca <Filesystem::Filesystem()>
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c001a9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e4:	89 10                	mov    DWORD PTR [eax],edx
c001a9e6:	90                   	nop
c001a9e7:	83 c4 0c             	add    esp,0xc
c001a9ea:	c3                   	ret    
c001a9eb:	90                   	nop

c001a9ec <SoundChannel::~SoundChannel()>:
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9f6:	83 ec 0c             	sub    esp,0xc
c001a9f9:	50                   	push   eax
c001a9fa:	e8 2f 12 ff ff       	call   c000bc2e <free>
c001a9ff:	83 c4 10             	add    esp,0x10
c001aa02:	90                   	nop
c001aa03:	83 c4 0c             	add    esp,0xc
c001aa06:	c3                   	ret    
c001aa07:	90                   	nop

c001aa08 <SoundChannel::setSpeed(float)>:
c001aa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0c:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aa10:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aa13:	c3                   	ret    

c001aa14 <SoundChannel::getSpeed()>:
c001aa14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa18:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa1b:	c3                   	ret    

c001aa1c <SoundChannel::setVolume(int)>:
c001aa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa20:	83 f8 64             	cmp    eax,0x64
c001aa23:	7e 05                	jle    c001aa2a <SoundChannel::setVolume(int)+0xe>
c001aa25:	b8 64 00 00 00       	mov    eax,0x64
c001aa2a:	85 c0                	test   eax,eax
c001aa2c:	79 02                	jns    c001aa30 <SoundChannel::setVolume(int)+0x14>
c001aa2e:	31 c0                	xor    eax,eax
c001aa30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa34:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aa37:	c3                   	ret    

c001aa38 <SoundChannel::getVolume()>:
c001aa38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa3c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa3f:	c3                   	ret    

c001aa40 <SoundChannel::pause()>:
c001aa40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa44:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aa48:	c3                   	ret    
c001aa49:	90                   	nop

c001aa4a <SoundChannel::SoundChannel(int, int, int, int)>:
c001aa4a:	83 ec 1c             	sub    esp,0x1c
c001aa4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa51:	e8 ea ff ff ff       	call   c001aa40 <SoundChannel::pause()>
c001aa56:	83 c4 04             	add    esp,0x4
c001aa59:	6a 50                	push   0x50
c001aa5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa5f:	e8 b8 ff ff ff       	call   c001aa1c <SoundChannel::setVolume(int)>
c001aa64:	83 c4 08             	add    esp,0x8
c001aa67:	d9 e8                	fld1   
c001aa69:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aa6d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aa70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa74:	e8 8f ff ff ff       	call   c001aa08 <SoundChannel::setSpeed(float)>
c001aa79:	83 c4 08             	add    esp,0x8
c001aa7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa80:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa84:	89 10                	mov    DWORD PTR [eax],edx
c001aa86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa95:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa9c:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aaa1:	75 23                	jne    c001aac6 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aaa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaa7:	8b 10                	mov    edx,DWORD PTR [eax]
c001aaa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aab0:	0f af c2             	imul   eax,edx
c001aab3:	85 c0                	test   eax,eax
c001aab5:	79 03                	jns    c001aaba <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aab7:	83 c0 03             	add    eax,0x3
c001aaba:	c1 f8 02             	sar    eax,0x2
c001aabd:	05 a0 0f 00 00       	add    eax,0xfa0
c001aac2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aace:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001aad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001aadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aae0:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaeb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaee:	c1 e0 02             	shl    eax,0x2
c001aaf1:	83 ec 0c             	sub    esp,0xc
c001aaf4:	50                   	push   eax
c001aaf5:	e8 24 11 ff ff       	call   c000bc1e <malloc>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	89 c2                	mov    edx,eax
c001aaff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab03:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab06:	83 ec 04             	sub    esp,0x4
c001ab09:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab0d:	50                   	push   eax
c001ab0e:	6a 01                	push   0x1
c001ab10:	6a 04                	push   0x4
c001ab12:	e8 34 dd fe ff       	call   c000884b <src_new>
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	89 c2                	mov    edx,eax
c001ab1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab20:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab27:	85 c0                	test   eax,eax
c001ab29:	74 10                	je     c001ab3b <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab2b:	83 ec 0c             	sub    esp,0xc
c001ab2e:	68 e4 1d 02 c0       	push   0xc0021de4
c001ab33:	e8 22 9e ff ff       	call   c001495a <Krnl::panic(char const*)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	90                   	nop
c001ab3c:	83 c4 1c             	add    esp,0x1c
c001ab3f:	c3                   	ret    

c001ab40 <SoundChannel::play()>:
c001ab40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab44:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ab48:	c3                   	ret    
c001ab49:	90                   	nop

c001ab4a <SoundChannel::paused()>:
c001ab4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab4e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ab51:	c3                   	ret    

c001ab52 <SoundChannel::getSampleRate()>:
c001ab52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab56:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab58:	c3                   	ret    
c001ab59:	90                   	nop

c001ab5a <SoundChannel::getBits()>:
c001ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab61:	c3                   	ret    

c001ab62 <SoundChannel::getBufferUsed()>:
c001ab62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab69:	c3                   	ret    

c001ab6a <SoundChannel::getBufferSize()>:
c001ab6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab6e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab71:	c3                   	ret    

c001ab72 <SoundChannel::unbuffer(float*, int, int)>:
c001ab72:	53                   	push   ebx
c001ab73:	83 ec 40             	sub    esp,0x40
c001ab76:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ab7a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ab82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab85:	db 03                	fild   DWORD PTR [ebx]
c001ab87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab8b:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ab8f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab92:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ab95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ab9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aba1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aba5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aba9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abb1:	50                   	push   eax
c001abb2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001abb5:	e8 4b d9 fe ff       	call   c0008505 <src_process>
c001abba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001abbe:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001abc1:	83 c4 0c             	add    esp,0xc
c001abc4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abc7:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001abca:	29 d0                	sub    eax,edx
c001abcc:	c1 e0 02             	shl    eax,0x2
c001abcf:	50                   	push   eax
c001abd0:	8d 04 91             	lea    eax,[ecx+edx*4]
c001abd3:	50                   	push   eax
c001abd4:	51                   	push   ecx
c001abd5:	e8 c0 59 fe ff       	call   c000059a <memmove>
c001abda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abde:	83 c4 48             	add    esp,0x48
c001abe1:	5b                   	pop    ebx
c001abe2:	c3                   	ret    
c001abe3:	90                   	nop

c001abe4 <SoundChannel::buffer8(unsigned char*, int)>:
c001abe4:	53                   	push   ebx
c001abe5:	31 c0                	xor    eax,eax
c001abe7:	83 ec 08             	sub    esp,0x8
c001abea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abee:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001abf1:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001abf4:	74 35                	je     c001ac2b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abf6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001abfa:	7d 2f                	jge    c001ac2b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abfc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac00:	d9 05 00 1e 02 c0    	fld    DWORD PTR ds:0xc0021e00
c001ac06:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ac0a:	40                   	inc    eax
c001ac0b:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ac10:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ac13:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ac17:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac1a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac1d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac20:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac23:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac26:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac29:	eb c9                	jmp    c001abf4 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac2b:	83 c4 08             	add    esp,0x8
c001ac2e:	5b                   	pop    ebx
c001ac2f:	c3                   	ret    

c001ac30 <SoundDevice::SoundDevice(char const*)>:
c001ac30:	83 ec 1c             	sub    esp,0x1c
c001ac33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac37:	83 ec 08             	sub    esp,0x8
c001ac3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac3e:	50                   	push   eax
c001ac3f:	e8 7c 56 ff ff       	call   c00102c0 <Device::Device(char const*)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c001ac4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac50:	89 10                	mov    DWORD PTR [eax],edx
c001ac52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac56:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac64:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ac6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac76:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac7b:	7f 19                	jg     c001ac96 <SoundDevice::SoundDevice(char const*)+0x66>
c001ac7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac85:	83 c2 54             	add    edx,0x54
c001ac88:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ac90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac94:	eb e0                	jmp    c001ac76 <SoundDevice::SoundDevice(char const*)+0x46>
c001ac96:	90                   	nop
c001ac97:	83 c4 1c             	add    esp,0x1c
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <SoundDevice::~SoundDevice()>:
c001ac9c:	53                   	push   ebx
c001ac9d:	83 ec 18             	sub    esp,0x18
c001aca0:	ba 0c 1e 02 c0       	mov    edx,0xc0021e0c
c001aca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca9:	89 10                	mov    DWORD PTR [eax],edx
c001acab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acb3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acb8:	7f 46                	jg     c001ad00 <SoundDevice::~SoundDevice()+0x64>
c001acba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acc2:	83 c2 54             	add    edx,0x54
c001acc5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001acc9:	85 c0                	test   eax,eax
c001accb:	74 2d                	je     c001acfa <SoundDevice::~SoundDevice()+0x5e>
c001accd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acd5:	83 c2 54             	add    edx,0x54
c001acd8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001acdc:	85 db                	test   ebx,ebx
c001acde:	74 1a                	je     c001acfa <SoundDevice::~SoundDevice()+0x5e>
c001ace0:	83 ec 0c             	sub    esp,0xc
c001ace3:	53                   	push   ebx
c001ace4:	e8 03 fd ff ff       	call   c001a9ec <SoundChannel::~SoundChannel()>
c001ace9:	83 c4 10             	add    esp,0x10
c001acec:	83 ec 08             	sub    esp,0x8
c001acef:	6a 2c                	push   0x2c
c001acf1:	53                   	push   ebx
c001acf2:	e8 ee 3e ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acfe:	eb b3                	jmp    c001acb3 <SoundDevice::~SoundDevice()+0x17>
c001ad00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	50                   	push   eax
c001ad08:	e8 65 52 ff ff       	call   c000ff72 <Device::~Device()>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	90                   	nop
c001ad11:	83 c4 18             	add    esp,0x18
c001ad14:	5b                   	pop    ebx
c001ad15:	c3                   	ret    

c001ad16 <SoundDevice::~SoundDevice()>:
c001ad16:	83 ec 0c             	sub    esp,0xc
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad20:	e8 77 ff ff ff       	call   c001ac9c <SoundDevice::~SoundDevice()>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	83 ec 08             	sub    esp,0x8
c001ad2b:	68 e4 01 00 00       	push   0x1e4
c001ad30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad34:	e8 ac 3e ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	83 c4 0c             	add    esp,0xc
c001ad3f:	c3                   	ret    

c001ad40 <SoundDevice::getFreeChannelNum()>:
c001ad40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad44:	31 c0                	xor    eax,eax
c001ad46:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ad4e:	74 09                	je     c001ad59 <SoundDevice::getFreeChannelNum()+0x19>
c001ad50:	40                   	inc    eax
c001ad51:	83 f8 20             	cmp    eax,0x20
c001ad54:	75 f0                	jne    c001ad46 <SoundDevice::getFreeChannelNum()+0x6>
c001ad56:	83 c8 ff             	or     eax,0xffffffff
c001ad59:	c3                   	ret    

c001ad5a <SoundDevice::addChannel(SoundChannel*)>:
c001ad5a:	56                   	push   esi
c001ad5b:	53                   	push   ebx
c001ad5c:	51                   	push   ecx
c001ad5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad65:	53                   	push   ebx
c001ad66:	e8 d5 ff ff ff       	call   c001ad40 <SoundDevice::getFreeChannelNum()>
c001ad6b:	5a                   	pop    edx
c001ad6c:	83 f8 ff             	cmp    eax,0xffffffff
c001ad6f:	74 51                	je     c001adc2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad71:	85 f6                	test   esi,esi
c001ad73:	74 4d                	je     c001adc2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad75:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ad7c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ad83:	75 30                	jne    c001adb5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ad85:	83 ec 0c             	sub    esp,0xc
c001ad88:	56                   	push   esi
c001ad89:	e8 c4 fd ff ff       	call   c001ab52 <SoundChannel::getSampleRate()>
c001ad8e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ad94:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad97:	e8 be fd ff ff       	call   c001ab5a <SoundChannel::getBits()>
c001ad9c:	83 c4 0c             	add    esp,0xc
c001ad9f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ada5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ada7:	50                   	push   eax
c001ada8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001adae:	53                   	push   ebx
c001adaf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001adbb:	b8 01 00 00 00       	mov    eax,0x1
c001adc0:	eb 03                	jmp    c001adc5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001adc2:	83 c8 ff             	or     eax,0xffffffff
c001adc5:	5a                   	pop    edx
c001adc6:	5b                   	pop    ebx
c001adc7:	5e                   	pop    esi
c001adc8:	c3                   	ret    
c001adc9:	90                   	nop

c001adca <SoundDevice::removeChannel(int)>:
c001adca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001add2:	83 fa 1f             	cmp    edx,0x1f
c001add5:	77 23                	ja     c001adfa <SoundDevice::removeChannel(int)+0x30>
c001add7:	8d 14 90             	lea    edx,[eax+edx*4]
c001adda:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ade1:	74 17                	je     c001adfa <SoundDevice::removeChannel(int)+0x30>
c001ade3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aded:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001adf3:	75 05                	jne    c001adfa <SoundDevice::removeChannel(int)+0x30>
c001adf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001adf7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001adfa:	c3                   	ret    
c001adfb:	90                   	nop

c001adfc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001adfc:	56                   	push   esi
c001adfd:	53                   	push   ebx
c001adfe:	31 db                	xor    ebx,ebx
c001ae00:	83 ec 14             	sub    esp,0x14
c001ae03:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ae07:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ae0b:	7d 55                	jge    c001ae62 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ae0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae11:	d9 e8                	fld1   
c001ae13:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ae16:	d8 0d 3c 1e 02 c0    	fmul   DWORD PTR ds:0xc0021e3c
c001ae1c:	d8 0d 40 1e 02 c0    	fmul   DWORD PTR ds:0xc0021e40
c001ae22:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae26:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae2a:	d8 15 44 1e 02 c0    	fcom   DWORD PTR ds:0xc0021e44
c001ae30:	df e0                	fnstsw ax
c001ae32:	9e                   	sahf   
c001ae33:	72 08                	jb     c001ae3d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ae35:	dd d8                	fstp   st(0)
c001ae37:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ae3b:	eb 22                	jmp    c001ae5f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae3d:	d9 ee                	fldz   
c001ae3f:	d8 d9                	fcomp  st(1)
c001ae41:	df e0                	fnstsw ax
c001ae43:	9e                   	sahf   
c001ae44:	72 08                	jb     c001ae4e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ae46:	dd d8                	fstp   st(0)
c001ae48:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ae4c:	eb 11                	jmp    c001ae5f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae4e:	83 ec 10             	sub    esp,0x10
c001ae51:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae54:	e8 13 36 00 00       	call   c001e46c <lrintf>
c001ae59:	83 c4 10             	add    esp,0x10
c001ae5c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ae5f:	43                   	inc    ebx
c001ae60:	eb a5                	jmp    c001ae07 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ae62:	83 c4 14             	add    esp,0x14
c001ae65:	5b                   	pop    ebx
c001ae66:	5e                   	pop    esi
c001ae67:	c3                   	ret    

c001ae68 <SoundDevice::getAudio(int, float*, float*)>:
c001ae68:	55                   	push   ebp
c001ae69:	57                   	push   edi
c001ae6a:	56                   	push   esi
c001ae6b:	53                   	push   ebx
c001ae6c:	31 db                	xor    ebx,ebx
c001ae6e:	83 ec 20             	sub    esp,0x20
c001ae71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae75:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae79:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ae7d:	c1 e0 02             	shl    eax,0x2
c001ae80:	50                   	push   eax
c001ae81:	6a 00                	push   0x0
c001ae83:	55                   	push   ebp
c001ae84:	e8 7f 57 fe ff       	call   c0000608 <memset>
c001ae89:	83 c4 10             	add    esp,0x10
c001ae8c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae90:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ae97:	85 c0                	test   eax,eax
c001ae99:	0f 84 94 00 00 00    	je     c001af33 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae9f:	83 ec 0c             	sub    esp,0xc
c001aea2:	50                   	push   eax
c001aea3:	e8 a2 fc ff ff       	call   c001ab4a <SoundChannel::paused()>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	84 c0                	test   al,al
c001aead:	0f 85 80 00 00 00    	jne    c001af33 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aeb3:	83 ec 0c             	sub    esp,0xc
c001aeb6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aebd:	e8 76 fb ff ff       	call   c001aa38 <SoundChannel::getVolume()>
c001aec2:	83 c4 10             	add    esp,0x10
c001aec5:	85 c0                	test   eax,eax
c001aec7:	74 6a                	je     c001af33 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aec9:	83 ec 0c             	sub    esp,0xc
c001aecc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aed3:	e8 60 fb ff ff       	call   c001aa38 <SoundChannel::getVolume()>
c001aed8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aedc:	d9 05 48 1e 02 c0    	fld    DWORD PTR ds:0xc0021e48
c001aee2:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001aee6:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001aeea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aeee:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001aef4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001aef8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aeff:	e8 6e fc ff ff       	call   c001ab72 <SoundChannel::unbuffer(float*, int, int)>
c001af04:	83 c4 20             	add    esp,0x20
c001af07:	31 d2                	xor    edx,edx
c001af09:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001af0d:	39 c2                	cmp    edx,eax
c001af0f:	7d 1a                	jge    c001af2b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001af11:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001af15:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001af18:	d8 c9                	fmul   st,st(1)
c001af1a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af20:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af24:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af28:	42                   	inc    edx
c001af29:	eb e2                	jmp    c001af0d <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af2b:	dd d8                	fstp   st(0)
c001af2d:	39 c7                	cmp    edi,eax
c001af2f:	7e 02                	jle    c001af33 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af31:	89 c7                	mov    edi,eax
c001af33:	43                   	inc    ebx
c001af34:	83 fb 20             	cmp    ebx,0x20
c001af37:	0f 85 53 ff ff ff    	jne    c001ae90 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001af3d:	83 c4 1c             	add    esp,0x1c
c001af40:	89 f8                	mov    eax,edi
c001af42:	5b                   	pop    ebx
c001af43:	5e                   	pop    esi
c001af44:	5f                   	pop    edi
c001af45:	5d                   	pop    ebp
c001af46:	c3                   	ret    
c001af47:	90                   	nop

c001af48 <PCI::open(int, int, void*)>:
c001af48:	83 ec 18             	sub    esp,0x18
c001af4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af4f:	8b 10                	mov    edx,DWORD PTR [eax]
c001af51:	50                   	push   eax
c001af52:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af55:	31 c0                	xor    eax,eax
c001af57:	83 c4 1c             	add    esp,0x1c
c001af5a:	c3                   	ret    
c001af5b:	90                   	nop

c001af5c <PCI::close(int, int, void*)>:
c001af5c:	31 c0                	xor    eax,eax
c001af5e:	c3                   	ret    
c001af5f:	90                   	nop

c001af60 <PCI::PCI()>:
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	83 ec 08             	sub    esp,0x8
c001af6a:	68 4c 1e 02 c0       	push   0xc0021e4c
c001af6f:	50                   	push   eax
c001af70:	e8 d7 49 ff ff       	call   c000f94c <Bus::Bus(char const*)>
c001af75:	83 c4 10             	add    esp,0x10
c001af78:	ba f8 1e 02 c0       	mov    edx,0xc0021ef8
c001af7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af81:	89 10                	mov    DWORD PTR [eax],edx
c001af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af8d:	0f b6 d0             	movzx  edx,al
c001af90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af94:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afa5:	0f b6 d0             	movzx  edx,al
c001afa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afac:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001afb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afbb:	8d 50 01             	lea    edx,[eax+0x1]
c001afbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afc2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001afc8:	0f b6 d0             	movzx  edx,al
c001afcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001afd3:	83 c9 c0             	or     ecx,0xffffffc0
c001afd6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001afda:	90                   	nop
c001afdb:	83 c4 0c             	add    esp,0xc
c001afde:	c3                   	ret    
c001afdf:	90                   	nop

c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afe0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001afe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001afe9:	89 ca                	mov    edx,ecx
c001afeb:	c1 e0 10             	shl    eax,0x10
c001afee:	81 e2 fc 00 00 00    	and    edx,0xfc
c001aff4:	09 d0                	or     eax,edx
c001aff6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001affb:	c1 e2 08             	shl    edx,0x8
c001affe:	09 d0                	or     eax,edx
c001b000:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b005:	c1 e2 0b             	shl    edx,0xb
c001b008:	09 d0                	or     eax,edx
c001b00a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b00f:	0d 00 00 00 80       	or     eax,0x80000000
c001b014:	ef                   	out    dx,eax
c001b015:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b01a:	ed                   	in     eax,dx
c001b01b:	83 e1 02             	and    ecx,0x2
c001b01e:	0f b6 c9             	movzx  ecx,cl
c001b021:	c1 e1 03             	shl    ecx,0x3
c001b024:	d3 e8                	shr    eax,cl
c001b026:	c3                   	ret    
c001b027:	90                   	nop

c001b028 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b028:	6a 00                	push   0x0
c001b02a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b02f:	50                   	push   eax
c001b030:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b035:	50                   	push   eax
c001b036:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b03b:	50                   	push   eax
c001b03c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b040:	e8 9b ff ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b045:	83 c4 14             	add    esp,0x14
c001b048:	c3                   	ret    
c001b049:	90                   	nop

c001b04a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b04a:	6a 0e                	push   0xe
c001b04c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b051:	50                   	push   eax
c001b052:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b057:	50                   	push   eax
c001b058:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b05d:	50                   	push   eax
c001b05e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b062:	e8 79 ff ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b067:	83 c4 14             	add    esp,0x14
c001b06a:	0f b6 c0             	movzx  eax,al
c001b06d:	c3                   	ret    

c001b06e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b06e:	55                   	push   ebp
c001b06f:	57                   	push   edi
c001b070:	56                   	push   esi
c001b071:	53                   	push   ebx
c001b072:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b077:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b07c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b081:	6a 0a                	push   0xa
c001b083:	56                   	push   esi
c001b084:	55                   	push   ebp
c001b085:	57                   	push   edi
c001b086:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b08a:	e8 51 ff ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b08f:	6a 0a                	push   0xa
c001b091:	89 c3                	mov    ebx,eax
c001b093:	56                   	push   esi
c001b094:	0f b6 db             	movzx  ebx,bl
c001b097:	55                   	push   ebp
c001b098:	57                   	push   edi
c001b099:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b09d:	e8 3e ff ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a2:	83 c4 28             	add    esp,0x28
c001b0a5:	25 00 ff 00 00       	and    eax,0xff00
c001b0aa:	09 d8                	or     eax,ebx
c001b0ac:	5b                   	pop    ebx
c001b0ad:	5e                   	pop    esi
c001b0ae:	5f                   	pop    edi
c001b0af:	5d                   	pop    ebp
c001b0b0:	c3                   	ret    
c001b0b1:	90                   	nop

c001b0b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b0b2:	6a 08                	push   0x8
c001b0b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0b9:	50                   	push   eax
c001b0ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0bf:	50                   	push   eax
c001b0c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0c5:	50                   	push   eax
c001b0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0ca:	e8 11 ff ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0cf:	83 c4 14             	add    esp,0x14
c001b0d2:	0f b6 c4             	movzx  eax,ah
c001b0d5:	c3                   	ret    

c001b0d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b0d6:	6a 08                	push   0x8
c001b0d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0dd:	50                   	push   eax
c001b0de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0e3:	50                   	push   eax
c001b0e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0e9:	50                   	push   eax
c001b0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0ee:	e8 ed fe ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0f3:	83 c4 14             	add    esp,0x14
c001b0f6:	c3                   	ret    
c001b0f7:	90                   	nop

c001b0f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0f8:	6a 3c                	push   0x3c
c001b0fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0ff:	50                   	push   eax
c001b100:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b105:	50                   	push   eax
c001b106:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b10b:	50                   	push   eax
c001b10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b110:	e8 cb fe ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b115:	83 c4 14             	add    esp,0x14
c001b118:	c3                   	ret    
c001b119:	90                   	nop

c001b11a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b11a:	6a 18                	push   0x18
c001b11c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b121:	50                   	push   eax
c001b122:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b127:	50                   	push   eax
c001b128:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b12d:	50                   	push   eax
c001b12e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b132:	e8 a9 fe ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b137:	83 c4 14             	add    esp,0x14
c001b13a:	0f b6 c4             	movzx  eax,ah
c001b13d:	c3                   	ret    

c001b13e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b13e:	55                   	push   ebp
c001b13f:	57                   	push   edi
c001b140:	56                   	push   esi
c001b141:	53                   	push   ebx
c001b142:	50                   	push   eax
c001b143:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b147:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b14c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b151:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b156:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b15d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b160:	83 c3 10             	add    ebx,0x10
c001b163:	0f b6 c0             	movzx  eax,al
c001b166:	0f b6 db             	movzx  ebx,bl
c001b169:	50                   	push   eax
c001b16a:	51                   	push   ecx
c001b16b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b16f:	57                   	push   edi
c001b170:	55                   	push   ebp
c001b171:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b175:	e8 66 fe ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b17a:	53                   	push   ebx
c001b17b:	89 c6                	mov    esi,eax
c001b17d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b181:	c1 e6 10             	shl    esi,0x10
c001b184:	51                   	push   ecx
c001b185:	57                   	push   edi
c001b186:	55                   	push   ebp
c001b187:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b18b:	e8 50 fe ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b190:	83 c4 2c             	add    esp,0x2c
c001b193:	0f b7 c0             	movzx  eax,ax
c001b196:	5b                   	pop    ebx
c001b197:	09 f0                	or     eax,esi
c001b199:	5e                   	pop    esi
c001b19a:	5f                   	pop    edi
c001b19b:	5d                   	pop    ebp
c001b19c:	c3                   	ret    
c001b19d:	90                   	nop

c001b19e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b19e:	53                   	push   ebx
c001b19f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1a4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ad:	c1 e1 10             	shl    ecx,0x10
c001b1b0:	25 fc 00 00 00       	and    eax,0xfc
c001b1b5:	09 c1                	or     ecx,eax
c001b1b7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1bc:	c1 e0 08             	shl    eax,0x8
c001b1bf:	09 c1                	or     ecx,eax
c001b1c1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b1c6:	c1 e0 0b             	shl    eax,0xb
c001b1c9:	09 c1                	or     ecx,eax
c001b1cb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b1d1:	89 c8                	mov    eax,ecx
c001b1d3:	ef                   	out    dx,eax
c001b1d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1d9:	ed                   	in     eax,dx
c001b1da:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b1df:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b1e4:	74 0a                	je     c001b1f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b1e6:	0f b7 d8             	movzx  ebx,ax
c001b1e9:	89 d0                	mov    eax,edx
c001b1eb:	c1 e0 10             	shl    eax,0x10
c001b1ee:	eb 05                	jmp    c001b1f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b1f0:	66 31 c0             	xor    ax,ax
c001b1f3:	89 d3                	mov    ebx,edx
c001b1f5:	09 c3                	or     ebx,eax
c001b1f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1fc:	89 c8                	mov    eax,ecx
c001b1fe:	ef                   	out    dx,eax
c001b1ff:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b204:	89 d8                	mov    eax,ebx
c001b206:	ef                   	out    dx,eax
c001b207:	5b                   	pop    ebx
c001b208:	c3                   	ret    
c001b209:	90                   	nop

c001b20a <PCI::checkBus(unsigned char)>:
c001b20a:	56                   	push   esi
c001b20b:	53                   	push   ebx
c001b20c:	31 db                	xor    ebx,ebx
c001b20e:	51                   	push   ecx
c001b20f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b214:	52                   	push   edx
c001b215:	53                   	push   ebx
c001b216:	43                   	inc    ebx
c001b217:	56                   	push   esi
c001b218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b21c:	e8 4d 03 00 00       	call   c001b56e <PCI::checkDevice(unsigned char, unsigned char)>
c001b221:	83 c4 10             	add    esp,0x10
c001b224:	83 fb 20             	cmp    ebx,0x20
c001b227:	75 eb                	jne    c001b214 <PCI::checkBus(unsigned char)+0xa>
c001b229:	58                   	pop    eax
c001b22a:	5b                   	pop    ebx
c001b22b:	5e                   	pop    esi
c001b22c:	c3                   	ret    
c001b22d:	90                   	nop

c001b22e <PCI::foundDevice(PCIDeviceInfo)>:
c001b22e:	55                   	push   ebp
c001b22f:	57                   	push   edi
c001b230:	56                   	push   esi
c001b231:	53                   	push   ebx
c001b232:	83 ec 1c             	sub    esp,0x1c
c001b235:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b239:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b23f:	0f 84 51 01 00 00    	je     c001b396 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b245:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b249:	66 81 f9 06 04       	cmp    cx,0x406
c001b24e:	75 2c                	jne    c001b27c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b250:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b255:	50                   	push   eax
c001b256:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b25b:	50                   	push   eax
c001b25c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b261:	50                   	push   eax
c001b262:	56                   	push   esi
c001b263:	e8 b2 fe ff ff       	call   c001b11a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b268:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b26c:	0f b6 c0             	movzx  eax,al
c001b26f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b273:	83 c4 2c             	add    esp,0x2c
c001b276:	5b                   	pop    ebx
c001b277:	5e                   	pop    esi
c001b278:	5f                   	pop    edi
c001b279:	5d                   	pop    ebp
c001b27a:	eb 8e                	jmp    c001b20a <PCI::checkBus(unsigned char)>
c001b27c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b280:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b28a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b28e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b292:	88 d3                	mov    bl,dl
c001b294:	85 c0                	test   eax,eax
c001b296:	74 33                	je     c001b2cb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b298:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b29b:	85 d2                	test   edx,edx
c001b29d:	74 28                	je     c001b2c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b29f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b2a5:	31 ef                	xor    edi,ebp
c001b2a7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b2ad:	75 18                	jne    c001b2c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b2b3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b2b9:	75 0c                	jne    c001b2c7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2bb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b2c1:	0f 84 cf 00 00 00    	je     c001b396 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b2c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2c9:	eb c9                	jmp    c001b294 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b2cb:	66 81 f9 01 06       	cmp    cx,0x601
c001b2d0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b2d4:	75 18                	jne    c001b2ee <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	68 58 01 00 00       	push   0x158
c001b2de:	e8 f3 38 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001b2e3:	59                   	pop    ecx
c001b2e4:	89 c5                	mov    ebp,eax
c001b2e6:	5f                   	pop    edi
c001b2e7:	68 54 1e 02 c0       	push   0xc0021e54
c001b2ec:	eb 7d                	jmp    c001b36b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b2ee:	66 81 f9 01 01       	cmp    cx,0x101
c001b2f3:	75 60                	jne    c001b355 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b2f5:	83 ec 0c             	sub    esp,0xc
c001b2f8:	68 70 02 00 00       	push   0x270
c001b2fd:	e8 d4 38 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001b302:	89 04 24             	mov    DWORD PTR [esp],eax
c001b305:	89 c5                	mov    ebp,eax
c001b307:	e8 26 03 00 00       	call   c001b632 <IDE::IDE()>
c001b30c:	58                   	pop    eax
c001b30d:	5a                   	pop    edx
c001b30e:	55                   	push   ebp
c001b30f:	56                   	push   esi
c001b310:	e8 bb 4d ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001b315:	83 ec 1c             	sub    esp,0x1c
c001b318:	b9 09 00 00 00       	mov    ecx,0x9
c001b31d:	fc                   	cld    
c001b31e:	89 e7                	mov    edi,esp
c001b320:	89 de                	mov    esi,ebx
c001b322:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b324:	55                   	push   ebp
c001b325:	e8 80 4c ff ff       	call   c000ffaa <Device::preOpenPCI(PCIDeviceInfo)>
c001b32a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b32d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b331:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b339:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b341:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b349:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b34c:	83 c4 4c             	add    esp,0x4c
c001b34f:	5b                   	pop    ebx
c001b350:	5e                   	pop    esi
c001b351:	5f                   	pop    edi
c001b352:	5d                   	pop    ebp
c001b353:	ff e0                	jmp    eax
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	68 58 01 00 00       	push   0x158
c001b35d:	e8 74 38 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001b362:	59                   	pop    ecx
c001b363:	89 c5                	mov    ebp,eax
c001b365:	5f                   	pop    edi
c001b366:	68 73 1e 02 c0       	push   0xc0021e73
c001b36b:	55                   	push   ebp
c001b36c:	e8 4b 50 ff ff       	call   c00103bc <DriverlessDevice::DriverlessDevice(char const*)>
c001b371:	58                   	pop    eax
c001b372:	5a                   	pop    edx
c001b373:	55                   	push   ebp
c001b374:	56                   	push   esi
c001b375:	e8 56 4d ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001b37a:	b9 09 00 00 00       	mov    ecx,0x9
c001b37f:	fc                   	cld    
c001b380:	89 df                	mov    edi,ebx
c001b382:	89 de                	mov    esi,ebx
c001b384:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b386:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b38a:	83 c4 2c             	add    esp,0x2c
c001b38d:	5b                   	pop    ebx
c001b38e:	5e                   	pop    esi
c001b38f:	5f                   	pop    edi
c001b390:	5d                   	pop    ebp
c001b391:	e9 14 4c ff ff       	jmp    c000ffaa <Device::preOpenPCI(PCIDeviceInfo)>
c001b396:	83 c4 1c             	add    esp,0x1c
c001b399:	5b                   	pop    ebx
c001b39a:	5e                   	pop    esi
c001b39b:	5f                   	pop    edi
c001b39c:	5d                   	pop    ebp
c001b39d:	c3                   	ret    

c001b39e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b39e:	55                   	push   ebp
c001b39f:	57                   	push   edi
c001b3a0:	56                   	push   esi
c001b3a1:	53                   	push   ebx
c001b3a2:	83 ec 5c             	sub    esp,0x5c
c001b3a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b3a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b3ad:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b3b1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b3b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b3be:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b3c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3c7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b3cc:	6a 0c                	push   0xc
c001b3ce:	55                   	push   ebp
c001b3cf:	53                   	push   ebx
c001b3d0:	57                   	push   edi
c001b3d1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b3d8:	e8 03 fc ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3dd:	83 c4 0c             	add    esp,0xc
c001b3e0:	6a 00                	push   0x0
c001b3e2:	68 8d 1e 02 c0       	push   0xc0021e8d
c001b3e7:	e8 d9 38 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001b3ec:	55                   	push   ebp
c001b3ed:	53                   	push   ebx
c001b3ee:	57                   	push   edi
c001b3ef:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3f6:	e8 73 fc ff ff       	call   c001b06e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b3fb:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b400:	83 c4 20             	add    esp,0x20
c001b403:	55                   	push   ebp
c001b404:	53                   	push   ebx
c001b405:	57                   	push   edi
c001b406:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b40a:	e8 e9 fc ff ff       	call   c001b0f8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b40f:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b416:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b41a:	55                   	push   ebp
c001b41b:	53                   	push   ebx
c001b41c:	57                   	push   edi
c001b41d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b424:	e8 b7 fb ff ff       	call   c001afe0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b429:	0f b6 c4             	movzx  eax,ah
c001b42c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b430:	83 c4 18             	add    esp,0x18
c001b433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b437:	68 a1 1e 02 c0       	push   0xc0021ea1
c001b43c:	e8 84 38 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001b441:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b445:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b449:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001b44e:	83 c4 10             	add    esp,0x10
c001b451:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b457:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b45e:	74 6c                	je     c001b4cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b460:	31 f6                	xor    esi,esi
c001b462:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c001b468:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b46e:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b474:	7e 56                	jle    c001b4cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b476:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b479:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b480:	39 cb                	cmp    ebx,ecx
c001b482:	75 45                	jne    c001b4c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b484:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b48b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b48f:	75 38                	jne    c001b4c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b491:	83 ec 0c             	sub    esp,0xc
c001b494:	68 b0 1e 02 c0       	push   0xc0021eb0
c001b499:	e8 27 38 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001b49e:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c001b4a4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4aa:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b4b2:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b4b6:	52                   	push   edx
c001b4b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4bb:	53                   	push   ebx
c001b4bc:	68 d5 1e 02 c0       	push   0xc0021ed5
c001b4c1:	e8 ff 37 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001b4c6:	83 c4 20             	add    esp,0x20
c001b4c9:	46                   	inc    esi
c001b4ca:	eb 96                	jmp    c001b462 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b4cc:	31 d2                	xor    edx,edx
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	55                   	push   ebp
c001b4d2:	53                   	push   ebx
c001b4d3:	57                   	push   edi
c001b4d4:	52                   	push   edx
c001b4d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4d9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4e0:	e8 59 fc ff ff       	call   c001b13e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e5:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b4e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b4f1:	42                   	inc    edx
c001b4f2:	83 c4 20             	add    esp,0x20
c001b4f5:	83 fa 06             	cmp    edx,0x6
c001b4f8:	75 d4                	jne    c001b4ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b4fa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4fe:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b502:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b506:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b50a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b50e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b512:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b517:	86 e0                	xchg   al,ah
c001b519:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b51e:	55                   	push   ebp
c001b51f:	53                   	push   ebx
c001b520:	57                   	push   edi
c001b521:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b525:	e8 88 fb ff ff       	call   c001b0b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b52a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b52e:	55                   	push   ebp
c001b52f:	53                   	push   ebx
c001b530:	57                   	push   edi
c001b531:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b538:	e8 eb fa ff ff       	call   c001b028 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b53d:	83 ec 0c             	sub    esp,0xc
c001b540:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b545:	b9 09 00 00 00       	mov    ecx,0x9
c001b54a:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b54e:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b552:	fc                   	cld    
c001b553:	89 e7                	mov    edi,esp
c001b555:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b557:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b55e:	e8 cb fc ff ff       	call   c001b22e <PCI::foundDevice(PCIDeviceInfo)>
c001b563:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b569:	5b                   	pop    ebx
c001b56a:	5e                   	pop    esi
c001b56b:	5f                   	pop    edi
c001b56c:	5d                   	pop    ebp
c001b56d:	c3                   	ret    

c001b56e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b56e:	55                   	push   ebp
c001b56f:	57                   	push   edi
c001b570:	56                   	push   esi
c001b571:	53                   	push   ebx
c001b572:	83 ec 0c             	sub    esp,0xc
c001b575:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b579:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b57e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b583:	6a 00                	push   0x0
c001b585:	56                   	push   esi
c001b586:	57                   	push   edi
c001b587:	55                   	push   ebp
c001b588:	e8 9b fa ff ff       	call   c001b028 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b58d:	6a 00                	push   0x0
c001b58f:	56                   	push   esi
c001b590:	57                   	push   edi
c001b591:	55                   	push   ebp
c001b592:	e8 07 fe ff ff       	call   c001b39e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b597:	83 c4 20             	add    esp,0x20
c001b59a:	6a 00                	push   0x0
c001b59c:	56                   	push   esi
c001b59d:	57                   	push   edi
c001b59e:	55                   	push   ebp
c001b59f:	e8 a6 fa ff ff       	call   c001b04a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	84 c0                	test   al,al
c001b5a9:	79 27                	jns    c001b5d2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b5ab:	bb 01 00 00 00       	mov    ebx,0x1
c001b5b0:	53                   	push   ebx
c001b5b1:	56                   	push   esi
c001b5b2:	57                   	push   edi
c001b5b3:	55                   	push   ebp
c001b5b4:	e8 6f fa ff ff       	call   c001b028 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5b9:	83 c4 10             	add    esp,0x10
c001b5bc:	66 40                	inc    ax
c001b5be:	74 0c                	je     c001b5cc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b5c0:	53                   	push   ebx
c001b5c1:	56                   	push   esi
c001b5c2:	57                   	push   edi
c001b5c3:	55                   	push   ebp
c001b5c4:	e8 d5 fd ff ff       	call   c001b39e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b5c9:	83 c4 10             	add    esp,0x10
c001b5cc:	43                   	inc    ebx
c001b5cd:	83 fb 08             	cmp    ebx,0x8
c001b5d0:	75 de                	jne    c001b5b0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b5d2:	83 c4 0c             	add    esp,0xc
c001b5d5:	5b                   	pop    ebx
c001b5d6:	5e                   	pop    esi
c001b5d7:	5f                   	pop    edi
c001b5d8:	5d                   	pop    ebp
c001b5d9:	c3                   	ret    

c001b5da <PCI::detect()>:
c001b5da:	56                   	push   esi
c001b5db:	53                   	push   ebx
c001b5dc:	53                   	push   ebx
c001b5dd:	31 db                	xor    ebx,ebx
c001b5df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5e3:	6a 00                	push   0x0
c001b5e5:	6a 00                	push   0x0
c001b5e7:	6a 00                	push   0x0
c001b5e9:	56                   	push   esi
c001b5ea:	e8 5b fa ff ff       	call   c001b04a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5ef:	83 c4 10             	add    esp,0x10
c001b5f2:	a8 80                	test   al,0x80
c001b5f4:	75 21                	jne    c001b617 <PCI::detect()+0x3d>
c001b5f6:	51                   	push   ecx
c001b5f7:	51                   	push   ecx
c001b5f8:	6a 00                	push   0x0
c001b5fa:	56                   	push   esi
c001b5fb:	e8 0a fc ff ff       	call   c001b20a <PCI::checkBus(unsigned char)>
c001b600:	83 c4 10             	add    esp,0x10
c001b603:	eb 24                	jmp    c001b629 <PCI::detect()+0x4f>
c001b605:	52                   	push   edx
c001b606:	52                   	push   edx
c001b607:	53                   	push   ebx
c001b608:	43                   	inc    ebx
c001b609:	56                   	push   esi
c001b60a:	e8 fb fb ff ff       	call   c001b20a <PCI::checkBus(unsigned char)>
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	83 fb 08             	cmp    ebx,0x8
c001b615:	74 12                	je     c001b629 <PCI::detect()+0x4f>
c001b617:	53                   	push   ebx
c001b618:	6a 00                	push   0x0
c001b61a:	6a 00                	push   0x0
c001b61c:	56                   	push   esi
c001b61d:	e8 06 fa ff ff       	call   c001b028 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	66 40                	inc    ax
c001b627:	74 dc                	je     c001b605 <PCI::detect()+0x2b>
c001b629:	58                   	pop    eax
c001b62a:	5b                   	pop    ebx
c001b62b:	5e                   	pop    esi
c001b62c:	c3                   	ret    
c001b62d:	90                   	nop

c001b62e <IDE::close(int, int, void*)>:
c001b62e:	83 c8 ff             	or     eax,0xffffffff
c001b631:	c3                   	ret    

c001b632 <IDE::IDE()>:
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b639:	83 ec 08             	sub    esp,0x8
c001b63c:	68 1c 1f 02 c0       	push   0xc0021f1c
c001b641:	50                   	push   eax
c001b642:	e8 0b 4e ff ff       	call   c0010452 <HardDiskController::HardDiskController(char const*)>
c001b647:	83 c4 10             	add    esp,0x10
c001b64a:	ba 5c 21 02 c0       	mov    edx,0xc002215c
c001b64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b653:	89 10                	mov    DWORD PTR [eax],edx
c001b655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b659:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b660:	90                   	nop
c001b661:	83 c4 0c             	add    esp,0xc
c001b664:	c3                   	ret    
c001b665:	90                   	nop

c001b666 <IDE::prepareInterrupt(unsigned char)>:
c001b666:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b66b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b66f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b677:	c3                   	ret    

c001b678 <selectDrive(unsigned char, unsigned char)>:
c001b678:	c3                   	ret    
c001b679:	90                   	nop

c001b67a <IDE::getBase(unsigned char)>:
c001b67a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b683:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b68b:	c3                   	ret    

c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b68c:	55                   	push   ebp
c001b68d:	57                   	push   edi
c001b68e:	56                   	push   esi
c001b68f:	53                   	push   ebx
c001b690:	83 ec 1c             	sub    esp,0x1c
c001b693:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b697:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b69b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b69e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b6a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6a6:	80 f9 03             	cmp    cl,0x3
c001b6a9:	77 51                	ja     c001b6fc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b6ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6af:	0f b6 f2             	movzx  esi,dl
c001b6b2:	0f b6 db             	movzx  ebx,bl
c001b6b5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b6b8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b6bc:	83 ca 80             	or     edx,0xffffff80
c001b6bf:	0f b6 d2             	movzx  edx,dl
c001b6c2:	52                   	push   edx
c001b6c3:	6a 0c                	push   0xc
c001b6c5:	56                   	push   esi
c001b6c6:	57                   	push   edi
c001b6c7:	e8 c0 ff ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6cc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6d5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b6d9:	ee                   	out    dx,al
c001b6da:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b6df:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b6e3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b6e7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b6eb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b6f3:	83 c4 2c             	add    esp,0x2c
c001b6f6:	5b                   	pop    ebx
c001b6f7:	5e                   	pop    esi
c001b6f8:	5f                   	pop    edi
c001b6f9:	5d                   	pop    ebp
c001b6fa:	eb 90                	jmp    c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6fc:	80 fb 07             	cmp    bl,0x7
c001b6ff:	77 12                	ja     c001b713 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b701:	0f b6 d2             	movzx  edx,dl
c001b704:	0f b6 db             	movzx  ebx,bl
c001b707:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b70f:	89 da                	mov    edx,ebx
c001b711:	eb 2f                	jmp    c001b742 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b713:	80 fb 0d             	cmp    bl,0xd
c001b716:	77 13                	ja     c001b72b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b718:	0f b6 d2             	movzx  edx,dl
c001b71b:	0f b6 db             	movzx  ebx,bl
c001b71e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b725:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b729:	eb 17                	jmp    c001b742 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b72b:	80 fb 15             	cmp    bl,0x15
c001b72e:	77 13                	ja     c001b743 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b730:	0f b6 d2             	movzx  edx,dl
c001b733:	0f b6 db             	movzx  ebx,bl
c001b736:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b73e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b742:	ee                   	out    dx,al
c001b743:	83 c4 1c             	add    esp,0x1c
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	5f                   	pop    edi
c001b749:	5d                   	pop    ebp
c001b74a:	c3                   	ret    
c001b74b:	90                   	nop

c001b74c <IDE::read(unsigned char, unsigned char)>:
c001b74c:	55                   	push   ebp
c001b74d:	57                   	push   edi
c001b74e:	56                   	push   esi
c001b74f:	53                   	push   ebx
c001b750:	83 ec 1c             	sub    esp,0x1c
c001b753:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b757:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b75b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b75e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b762:	3c 03                	cmp    al,0x3
c001b764:	77 43                	ja     c001b7a9 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b766:	0f b6 f2             	movzx  esi,dl
c001b769:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b76c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b770:	83 c8 80             	or     eax,0xffffff80
c001b773:	0f b6 c0             	movzx  eax,al
c001b776:	50                   	push   eax
c001b777:	6a 0c                	push   0xc
c001b779:	56                   	push   esi
c001b77a:	57                   	push   edi
c001b77b:	e8 0c ff ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b780:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b785:	0f b6 c3             	movzx  eax,bl
c001b788:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b78c:	ec                   	in     al,dx
c001b78d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b791:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b796:	52                   	push   edx
c001b797:	6a 0c                	push   0xc
c001b799:	56                   	push   esi
c001b79a:	57                   	push   edi
c001b79b:	e8 ec fe ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7a0:	83 c4 20             	add    esp,0x20
c001b7a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b7a7:	eb 49                	jmp    c001b7f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b7a9:	80 fb 07             	cmp    bl,0x7
c001b7ac:	77 12                	ja     c001b7c0 <IDE::read(unsigned char, unsigned char)+0x74>
c001b7ae:	0f b6 d2             	movzx  edx,dl
c001b7b1:	0f b6 c3             	movzx  eax,bl
c001b7b4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b7bc:	89 c2                	mov    edx,eax
c001b7be:	eb 31                	jmp    c001b7f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b7c0:	80 fb 0d             	cmp    bl,0xd
c001b7c3:	77 13                	ja     c001b7d8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b7c5:	0f b6 d2             	movzx  edx,dl
c001b7c8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b7cf:	0f b6 d3             	movzx  edx,bl
c001b7d2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b7d6:	eb 19                	jmp    c001b7f1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b7d8:	31 c0                	xor    eax,eax
c001b7da:	80 fb 15             	cmp    bl,0x15
c001b7dd:	77 13                	ja     c001b7f2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b7df:	0f b6 d2             	movzx  edx,dl
c001b7e2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b7ea:	0f b6 d3             	movzx  edx,bl
c001b7ed:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b7f1:	ec                   	in     al,dx
c001b7f2:	83 c4 1c             	add    esp,0x1c
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	5d                   	pop    ebp
c001b7f9:	c3                   	ret    

c001b7fa <IDE::waitInterrupt(unsigned char)>:
c001b7fa:	55                   	push   ebp
c001b7fb:	57                   	push   edi
c001b7fc:	56                   	push   esi
c001b7fd:	53                   	push   ebx
c001b7fe:	31 db                	xor    ebx,ebx
c001b800:	83 ec 0c             	sub    esp,0xc
c001b803:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b807:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b80c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b814:	89 e8                	mov    eax,ebp
c001b816:	84 c0                	test   al,al
c001b818:	75 34                	jne    c001b84e <IDE::waitInterrupt(unsigned char)+0x54>
c001b81a:	52                   	push   edx
c001b81b:	6a 0c                	push   0xc
c001b81d:	56                   	push   esi
c001b81e:	57                   	push   edi
c001b81f:	e8 28 ff ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	a8 01                	test   al,0x1
c001b829:	75 2b                	jne    c001b856 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b82b:	f6 c3 04             	test   bl,0x4
c001b82e:	75 16                	jne    c001b846 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b830:	83 fb 32             	cmp    ebx,0x32
c001b833:	7e 11                	jle    c001b846 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b835:	50                   	push   eax
c001b836:	50                   	push   eax
c001b837:	6a 00                	push   0x0
c001b839:	68 80 96 98 00       	push   0x989680
c001b83e:	e8 75 c5 ff ff       	call   c0017db8 <nanoSleep(unsigned long long)>
c001b843:	83 c4 10             	add    esp,0x10
c001b846:	83 fb 3c             	cmp    ebx,0x3c
c001b849:	74 0b                	je     c001b856 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b84b:	43                   	inc    ebx
c001b84c:	eb be                	jmp    c001b80c <IDE::waitInterrupt(unsigned char)+0x12>
c001b84e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b856:	83 c4 0c             	add    esp,0xc
c001b859:	89 e8                	mov    eax,ebp
c001b85b:	5b                   	pop    ebx
c001b85c:	5e                   	pop    esi
c001b85d:	5f                   	pop    edi
c001b85e:	5d                   	pop    ebp
c001b85f:	c3                   	ret    

c001b860 <ideChannel0IRQHandler(regs*, void*)>:
c001b860:	83 ec 10             	sub    esp,0x10
c001b863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b867:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b86e:	6a 07                	push   0x7
c001b870:	6a 00                	push   0x0
c001b872:	50                   	push   eax
c001b873:	e8 d4 fe ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001b878:	83 c4 1c             	add    esp,0x1c
c001b87b:	c3                   	ret    

c001b87c <ideChannel1IRQHandler(regs*, void*)>:
c001b87c:	83 ec 10             	sub    esp,0x10
c001b87f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b883:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b88a:	6a 07                	push   0x7
c001b88c:	6a 01                	push   0x1
c001b88e:	50                   	push   eax
c001b88f:	e8 b8 fe ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001b894:	83 c4 1c             	add    esp,0x1c
c001b897:	c3                   	ret    

c001b898 <IDE::enableIRQs(unsigned char, bool)>:
c001b898:	57                   	push   edi
c001b899:	56                   	push   esi
c001b89a:	be 04 00 00 00       	mov    esi,0x4
c001b89f:	53                   	push   ebx
c001b8a0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b8a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b8ae:	0f 94 c0             	sete   al
c001b8b1:	d1 e0                	shl    eax,1
c001b8b3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b8ba:	0f b6 c0             	movzx  eax,al
c001b8bd:	50                   	push   eax
c001b8be:	6a 0c                	push   0xc
c001b8c0:	57                   	push   edi
c001b8c1:	53                   	push   ebx
c001b8c2:	e8 c5 fd ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	50                   	push   eax
c001b8cb:	6a 0c                	push   0xc
c001b8cd:	57                   	push   edi
c001b8ce:	53                   	push   ebx
c001b8cf:	e8 78 fe ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001b8d4:	83 c4 10             	add    esp,0x10
c001b8d7:	4e                   	dec    esi
c001b8d8:	75 f0                	jne    c001b8ca <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b8da:	5b                   	pop    ebx
c001b8db:	5e                   	pop    esi
c001b8dc:	5f                   	pop    edi
c001b8dd:	c3                   	ret    

c001b8de <IDE::open(int, int, void*)>:
c001b8de:	55                   	push   ebp
c001b8df:	57                   	push   edi
c001b8e0:	56                   	push   esi
c001b8e1:	53                   	push   ebx
c001b8e2:	83 ec 1c             	sub    esp,0x1c
c001b8e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8e9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b8f2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b8fb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b902:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b909:	0f 85 b0 02 00 00    	jne    c001bbbf <IDE::open(int, int, void*)+0x2e1>
c001b90f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b915:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b919:	83 e0 7f             	and    eax,0x7f
c001b91c:	3c 05                	cmp    al,0x5
c001b91e:	74 04                	je     c001b924 <IDE::open(int, int, void*)+0x46>
c001b920:	3c 0f                	cmp    al,0xf
c001b922:	75 32                	jne    c001b956 <IDE::open(int, int, void*)+0x78>
c001b924:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b92a:	83 e0 fc             	and    eax,0xfffffffc
c001b92d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b934:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b93a:	83 e0 fc             	and    eax,0xfffffffc
c001b93d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b944:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b94a:	83 e0 fc             	and    eax,0xfffffffc
c001b94d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b954:	eb 14                	jmp    c001b96a <IDE::open(int, int, void*)+0x8c>
c001b956:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b960:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b96a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b971:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b978:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b97c:	89 c6                	mov    esi,eax
c001b97e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b983:	c1 e6 10             	shl    esi,0x10
c001b986:	89 e8                	mov    eax,ebp
c001b988:	89 fa                	mov    edx,edi
c001b98a:	c1 e0 0b             	shl    eax,0xb
c001b98d:	09 f0                	or     eax,esi
c001b98f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b996:	c1 e6 08             	shl    esi,0x8
c001b999:	09 c6                	or     esi,eax
c001b99b:	89 f0                	mov    eax,esi
c001b99d:	0d 08 00 00 80       	or     eax,0x80000008
c001b9a2:	ef                   	out    dx,eax
c001b9a3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b9a8:	89 ca                	mov    edx,ecx
c001b9aa:	ed                   	in     eax,dx
c001b9ab:	c1 e8 10             	shr    eax,0x10
c001b9ae:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9b3:	0f 84 f5 00 00 00    	je     c001baae <IDE::open(int, int, void*)+0x1d0>
c001b9b9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b9bf:	89 fa                	mov    edx,edi
c001b9c1:	89 f0                	mov    eax,esi
c001b9c3:	ef                   	out    dx,eax
c001b9c4:	b0 fe                	mov    al,0xfe
c001b9c6:	89 ca                	mov    edx,ecx
c001b9c8:	ee                   	out    dx,al
c001b9c9:	89 f0                	mov    eax,esi
c001b9cb:	89 fa                	mov    edx,edi
c001b9cd:	ef                   	out    dx,eax
c001b9ce:	89 ca                	mov    edx,ecx
c001b9d0:	ed                   	in     eax,dx
c001b9d1:	3c fe                	cmp    al,0xfe
c001b9d3:	0f 85 a9 00 00 00    	jne    c001ba82 <IDE::open(int, int, void*)+0x1a4>
c001b9d9:	8b 15 68 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023168
c001b9df:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001b9e6:	74 33                	je     c001ba1b <IDE::open(int, int, void*)+0x13d>
c001b9e8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b9ee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b9f2:	40                   	inc    eax
c001b9f3:	83 ec 0c             	sub    esp,0xc
c001b9f6:	0f b6 c0             	movzx  eax,al
c001b9f9:	50                   	push   eax
c001b9fa:	55                   	push   ebp
c001b9fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9ff:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ba05:	51                   	push   ecx
c001ba06:	e8 0f 78 ff ff       	call   c001321a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ba0b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ba10:	83 c4 1c             	add    esp,0x1c
c001ba13:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ba19:	eb 0a                	jmp    c001ba25 <IDE::open(int, int, void*)+0x147>
c001ba1b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ba25:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ba2c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ba33:	c1 e1 10             	shl    ecx,0x10
c001ba36:	c1 e0 08             	shl    eax,0x8
c001ba39:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba3e:	09 c1                	or     ecx,eax
c001ba40:	89 fa                	mov    edx,edi
c001ba42:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ba49:	c1 e0 0b             	shl    eax,0xb
c001ba4c:	09 c1                	or     ecx,eax
c001ba4e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ba54:	89 c8                	mov    eax,ecx
c001ba56:	ef                   	out    dx,eax
c001ba57:	be fc 0c 00 00       	mov    esi,0xcfc
c001ba5c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ba62:	89 f2                	mov    edx,esi
c001ba64:	ee                   	out    dx,al
c001ba65:	89 c8                	mov    eax,ecx
c001ba67:	89 fa                	mov    edx,edi
c001ba69:	ef                   	out    dx,eax
c001ba6a:	89 f2                	mov    edx,esi
c001ba6c:	ed                   	in     eax,dx
c001ba6d:	0f b6 c0             	movzx  eax,al
c001ba70:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ba76:	74 46                	je     c001babe <IDE::open(int, int, void*)+0x1e0>
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	68 34 1f 02 c0       	push   0xc0021f34
c001ba80:	eb 34                	jmp    c001bab6 <IDE::open(int, int, void*)+0x1d8>
c001ba82:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ba8b:	75 17                	jne    c001baa4 <IDE::open(int, int, void*)+0x1c6>
c001ba8d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ba92:	74 07                	je     c001ba9b <IDE::open(int, int, void*)+0x1bd>
c001ba94:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ba99:	75 09                	jne    c001baa4 <IDE::open(int, int, void*)+0x1c6>
c001ba9b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001baa2:	eb 1a                	jmp    c001babe <IDE::open(int, int, void*)+0x1e0>
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	68 3c 1f 02 c0       	push   0xc0021f3c
c001baac:	eb 08                	jmp    c001bab6 <IDE::open(int, int, void*)+0x1d8>
c001baae:	83 ec 0c             	sub    esp,0xc
c001bab1:	68 6d 1f 02 c0       	push   0xc0021f6d
c001bab6:	e8 9f 8e ff ff       	call   c001495a <Krnl::panic(char const*)>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bac5:	79 1a                	jns    c001bae1 <IDE::open(int, int, void*)+0x203>
c001bac7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bacd:	83 e0 fc             	and    eax,0xfffffffc
c001bad0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bad7:	83 c0 08             	add    eax,0x8
c001bada:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bae1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bae7:	89 c2                	mov    edx,eax
c001bae9:	83 e2 0f             	and    edx,0xf
c001baec:	66 83 fa 08          	cmp    dx,0x8
c001baf0:	75 0a                	jne    c001bafc <IDE::open(int, int, void*)+0x21e>
c001baf2:	83 e8 02             	sub    eax,0x2
c001baf5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bafc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bb02:	89 c2                	mov    edx,eax
c001bb04:	83 e2 0f             	and    edx,0xf
c001bb07:	66 83 fa 08          	cmp    dx,0x8
c001bb0b:	75 0a                	jne    c001bb17 <IDE::open(int, int, void*)+0x239>
c001bb0d:	83 e8 02             	sub    eax,0x2
c001bb10:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bb17:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bb1e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bb25:	89 d0                	mov    eax,edx
c001bb27:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bb2a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bb2e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bb32:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bb35:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bb3a:	0f b6 c9             	movzx  ecx,cl
c001bb3d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bb44:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bb47:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bb4b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bb4f:	8d 50 02             	lea    edx,[eax+0x2]
c001bb52:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bb57:	0f b6 d2             	movzx  edx,dl
c001bb5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bb60:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bb63:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bb67:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bb6b:	8d 48 03             	lea    ecx,[eax+0x3]
c001bb6e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bb73:	0f b6 c9             	movzx  ecx,cl
c001bb76:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bb7c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bb7f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bb83:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bb87:	8d 50 04             	lea    edx,[eax+0x4]
c001bb8a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bb90:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bb95:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bb9c:	66 85 f6             	test   si,si
c001bb9f:	74 3e                	je     c001bbdf <IDE::open(int, int, void*)+0x301>
c001bba1:	0f b6 d2             	movzx  edx,dl
c001bba4:	83 c0 05             	add    eax,0x5
c001bba7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bbaa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bbae:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bbb2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bbb8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bbbd:	eb 20                	jmp    c001bbdf <IDE::open(int, int, void*)+0x301>
c001bbbf:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bbc9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bbd3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bbda:	e9 02 ff ff ff       	jmp    c001bae1 <IDE::open(int, int, void*)+0x203>
c001bbdf:	52                   	push   edx
c001bbe0:	52                   	push   edx
c001bbe1:	6a 00                	push   0x0
c001bbe3:	53                   	push   ebx
c001bbe4:	e8 7d fa ff ff       	call   c001b666 <IDE::prepareInterrupt(unsigned char)>
c001bbe9:	59                   	pop    ecx
c001bbea:	5e                   	pop    esi
c001bbeb:	6a 01                	push   0x1
c001bbed:	53                   	push   ebx
c001bbee:	e8 73 fa ff ff       	call   c001b666 <IDE::prepareInterrupt(unsigned char)>
c001bbf3:	83 c4 0c             	add    esp,0xc
c001bbf6:	6a 00                	push   0x0
c001bbf8:	6a 00                	push   0x0
c001bbfa:	53                   	push   ebx
c001bbfb:	e8 98 fc ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001bc00:	83 c4 0c             	add    esp,0xc
c001bc03:	6a 00                	push   0x0
c001bc05:	6a 01                	push   0x1
c001bc07:	53                   	push   ebx
c001bc08:	e8 8b fc ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001bc0d:	83 c4 10             	add    esp,0x10
c001bc10:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bc17:	74 40                	je     c001bc59 <IDE::open(int, int, void*)+0x37b>
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	68 97 1f 02 c0       	push   0xc0021f97
c001bc21:	e8 9f 30 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001bc26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc29:	6a 01                	push   0x1
c001bc2b:	68 60 b8 01 c0       	push   0xc001b860
c001bc30:	6a 0e                	push   0xe
c001bc32:	53                   	push   ebx
c001bc33:	e8 ec 43 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bc38:	83 c4 14             	add    esp,0x14
c001bc3b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc41:	53                   	push   ebx
c001bc42:	6a 01                	push   0x1
c001bc44:	68 7c b8 01 c0       	push   0xc001b87c
c001bc49:	6a 0f                	push   0xf
c001bc4b:	53                   	push   ebx
c001bc4c:	e8 d3 43 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bc51:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bc57:	eb 4a                	jmp    c001bca3 <IDE::open(int, int, void*)+0x3c5>
c001bc59:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bc63:	50                   	push   eax
c001bc64:	6a 0f                	push   0xf
c001bc66:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bc6c:	68 b3 1f 02 c0       	push   0xc0021fb3
c001bc71:	e8 4f 30 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001bc76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc79:	6a 00                	push   0x0
c001bc7b:	68 60 b8 01 c0       	push   0xc001b860
c001bc80:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bc86:	53                   	push   ebx
c001bc87:	e8 98 43 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bc8c:	83 c4 14             	add    esp,0x14
c001bc8f:	53                   	push   ebx
c001bc90:	6a 00                	push   0x0
c001bc92:	68 7c b8 01 c0       	push   0xc001b87c
c001bc97:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bc9d:	53                   	push   ebx
c001bc9e:	e8 81 43 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bca3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bca5:	83 c4 20             	add    esp,0x20
c001bca8:	83 ec 0c             	sub    esp,0xc
c001bcab:	53                   	push   ebx
c001bcac:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bcaf:	83 c4 0c             	add    esp,0xc
c001bcb2:	6a 07                	push   0x7
c001bcb4:	6a 00                	push   0x0
c001bcb6:	53                   	push   ebx
c001bcb7:	e8 90 fa ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001bcbc:	83 c4 0c             	add    esp,0xc
c001bcbf:	6a 07                	push   0x7
c001bcc1:	6a 01                	push   0x1
c001bcc3:	53                   	push   ebx
c001bcc4:	e8 83 fa ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001bcc9:	83 c4 0c             	add    esp,0xc
c001bccc:	6a 01                	push   0x1
c001bcce:	6a 00                	push   0x0
c001bcd0:	53                   	push   ebx
c001bcd1:	e8 c2 fb ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001bcd6:	83 c4 0c             	add    esp,0xc
c001bcd9:	6a 01                	push   0x1
c001bcdb:	6a 01                	push   0x1
c001bcdd:	53                   	push   ebx
c001bcde:	e8 b5 fb ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001bce3:	83 c4 2c             	add    esp,0x2c
c001bce6:	31 c0                	xor    eax,eax
c001bce8:	5b                   	pop    ebx
c001bce9:	5e                   	pop    esi
c001bcea:	5f                   	pop    edi
c001bceb:	5d                   	pop    ebp
c001bcec:	c3                   	ret    
c001bced:	90                   	nop

c001bcee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bcee:	55                   	push   ebp
c001bcef:	57                   	push   edi
c001bcf0:	56                   	push   esi
c001bcf1:	53                   	push   ebx
c001bcf2:	83 ec 1c             	sub    esp,0x1c
c001bcf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bcf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bcfd:	8d 50 f8             	lea    edx,[eax-0x8]
c001bd00:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd04:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bd08:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bd0c:	80 fa 03             	cmp    dl,0x3
c001bd0f:	77 5d                	ja     c001bd6e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bd11:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bd15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd19:	0f b6 db             	movzx  ebx,bl
c001bd1c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bd1f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bd23:	83 ca 80             	or     edx,0xffffff80
c001bd26:	0f b6 d2             	movzx  edx,dl
c001bd29:	52                   	push   edx
c001bd2a:	6a 0c                	push   0xc
c001bd2c:	53                   	push   ebx
c001bd2d:	56                   	push   esi
c001bd2e:	e8 59 f9 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd33:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bd38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd40:	0f b6 c0             	movzx  eax,al
c001bd43:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001bd47:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bd49:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bd4e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bd52:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bd56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd5a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd62:	83 c4 2c             	add    esp,0x2c
c001bd65:	5b                   	pop    ebx
c001bd66:	5e                   	pop    esi
c001bd67:	5f                   	pop    edi
c001bd68:	5d                   	pop    ebp
c001bd69:	e9 1e f9 ff ff       	jmp    c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd6e:	3c 07                	cmp    al,0x7
c001bd70:	77 10                	ja     c001bd82 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bd72:	0f b6 db             	movzx  ebx,bl
c001bd75:	0f b6 d0             	movzx  edx,al
c001bd78:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bd80:	eb 2d                	jmp    c001bdaf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bd82:	3c 0d                	cmp    al,0xd
c001bd84:	77 13                	ja     c001bd99 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bd86:	0f b6 db             	movzx  ebx,bl
c001bd89:	0f b6 c0             	movzx  eax,al
c001bd8c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bd93:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bd97:	eb 16                	jmp    c001bdaf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bd99:	3c 15                	cmp    al,0x15
c001bd9b:	77 14                	ja     c001bdb1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bd9d:	0f b6 db             	movzx  ebx,bl
c001bda0:	0f b6 c0             	movzx  eax,al
c001bda3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bdab:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bdaf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bdb1:	83 c4 1c             	add    esp,0x1c
c001bdb4:	5b                   	pop    ebx
c001bdb5:	5e                   	pop    esi
c001bdb6:	5f                   	pop    edi
c001bdb7:	5d                   	pop    ebp
c001bdb8:	c3                   	ret    
c001bdb9:	90                   	nop

c001bdba <IDE::detect()>:
c001bdba:	55                   	push   ebp
c001bdbb:	57                   	push   edi
c001bdbc:	56                   	push   esi
c001bdbd:	53                   	push   ebx
c001bdbe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bdc4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bdcb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bdd2:	0f 85 be 02 00 00    	jne    c001c096 <IDE::detect()+0x2dc>
c001bdd8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bddf:	31 f6                	xor    esi,esi
c001bde1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bde9:	31 ed                	xor    ebp,ebp
c001bdeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdef:	c1 e0 06             	shl    eax,0x6
c001bdf2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bdfa:	89 e8                	mov    eax,ebp
c001bdfc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be00:	c1 e0 04             	shl    eax,0x4
c001be03:	83 c8 a0             	or     eax,0xffffffa0
c001be06:	0f b6 c0             	movzx  eax,al
c001be09:	50                   	push   eax
c001be0a:	6a 06                	push   0x6
c001be0c:	56                   	push   esi
c001be0d:	53                   	push   ebx
c001be0e:	e8 79 f8 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be13:	83 c4 0c             	add    esp,0xc
c001be16:	6a 0c                	push   0xc
c001be18:	56                   	push   esi
c001be19:	53                   	push   ebx
c001be1a:	e8 2d f9 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be1f:	83 c4 0c             	add    esp,0xc
c001be22:	6a 0c                	push   0xc
c001be24:	56                   	push   esi
c001be25:	53                   	push   ebx
c001be26:	e8 21 f9 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be2b:	83 c4 0c             	add    esp,0xc
c001be2e:	6a 0c                	push   0xc
c001be30:	56                   	push   esi
c001be31:	53                   	push   ebx
c001be32:	e8 15 f9 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be37:	83 c4 0c             	add    esp,0xc
c001be3a:	6a 0c                	push   0xc
c001be3c:	56                   	push   esi
c001be3d:	53                   	push   ebx
c001be3e:	e8 09 f9 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be43:	68 ec 00 00 00       	push   0xec
c001be48:	6a 07                	push   0x7
c001be4a:	56                   	push   esi
c001be4b:	53                   	push   ebx
c001be4c:	e8 3b f8 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be51:	83 c4 1c             	add    esp,0x1c
c001be54:	6a 0c                	push   0xc
c001be56:	56                   	push   esi
c001be57:	53                   	push   ebx
c001be58:	e8 ef f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be5d:	83 c4 0c             	add    esp,0xc
c001be60:	6a 0c                	push   0xc
c001be62:	56                   	push   esi
c001be63:	53                   	push   ebx
c001be64:	e8 e3 f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be69:	83 c4 0c             	add    esp,0xc
c001be6c:	6a 0c                	push   0xc
c001be6e:	56                   	push   esi
c001be6f:	53                   	push   ebx
c001be70:	e8 d7 f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be75:	83 c4 0c             	add    esp,0xc
c001be78:	6a 0c                	push   0xc
c001be7a:	56                   	push   esi
c001be7b:	53                   	push   ebx
c001be7c:	e8 cb f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be81:	83 c4 0c             	add    esp,0xc
c001be84:	6a 0c                	push   0xc
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	e8 bf f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	84 c0                	test   al,al
c001be92:	0f 84 8b 01 00 00    	je     c001c023 <IDE::detect()+0x269>
c001be98:	31 ff                	xor    edi,edi
c001be9a:	50                   	push   eax
c001be9b:	6a 0c                	push   0xc
c001be9d:	56                   	push   esi
c001be9e:	53                   	push   ebx
c001be9f:	e8 a8 f8 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001bea4:	83 c4 10             	add    esp,0x10
c001bea7:	a8 01                	test   al,0x1
c001bea9:	0f 85 8e 01 00 00    	jne    c001c03d <IDE::detect()+0x283>
c001beaf:	84 c0                	test   al,al
c001beb1:	78 04                	js     c001beb7 <IDE::detect()+0xfd>
c001beb3:	a8 08                	test   al,0x8
c001beb5:	75 27                	jne    c001bede <IDE::detect()+0x124>
c001beb7:	47                   	inc    edi
c001beb8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bebe:	7e da                	jle    c001be9a <IDE::detect()+0xe0>
c001bec0:	50                   	push   eax
c001bec1:	50                   	push   eax
c001bec2:	6a 00                	push   0x0
c001bec4:	68 40 4b 4c 00       	push   0x4c4b40
c001bec9:	e8 ea be ff ff       	call   c0017db8 <nanoSleep(unsigned long long)>
c001bece:	83 c4 10             	add    esp,0x10
c001bed1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bed7:	75 c1                	jne    c001be9a <IDE::detect()+0xe0>
c001bed9:	e9 5f 01 00 00       	jmp    c001c03d <IDE::detect()+0x283>
c001bede:	31 c9                	xor    ecx,ecx
c001bee0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bee4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bee8:	83 ec 0c             	sub    esp,0xc
c001beeb:	68 80 00 00 00       	push   0x80
c001bef0:	57                   	push   edi
c001bef1:	6a 00                	push   0x0
c001bef3:	56                   	push   esi
c001bef4:	53                   	push   ebx
c001bef5:	e8 f4 fd ff ff       	call   c001bcee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001befa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001beff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf03:	89 d1                	mov    ecx,edx
c001bf05:	c1 e0 06             	shl    eax,0x6
c001bf08:	01 d8                	add    eax,ebx
c001bf0a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bf11:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bf18:	89 f2                	mov    edx,esi
c001bf1a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bf20:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bf24:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bf2a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf2e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bf35:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bf3d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001bf44:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001bf4c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001bf52:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001bf59:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001bf5f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001bf63:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bf67:	83 c4 20             	add    esp,0x20
c001bf6a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001bf6d:	83 c0 02             	add    eax,0x2
c001bf70:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001bf76:	83 c7 02             	add    edi,0x2
c001bf79:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001bf7c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001bf82:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001bf86:	75 e2                	jne    c001bf6a <IDE::detect()+0x1b0>
c001bf88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf8c:	c1 e0 06             	shl    eax,0x6
c001bf8f:	01 d8                	add    eax,ebx
c001bf91:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001bf97:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001bf9e:	66 c1 ea 09          	shr    dx,0x9
c001bfa2:	83 e2 01             	and    edx,0x1
c001bfa5:	84 c9                	test   cl,cl
c001bfa7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001bfad:	75 2f                	jne    c001bfde <IDE::detect()+0x224>
c001bfaf:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001bfb5:	85 c0                	test   eax,eax
c001bfb7:	74 66                	je     c001c01f <IDE::detect()+0x265>
c001bfb9:	50                   	push   eax
c001bfba:	55                   	push   ebp
c001bfbb:	56                   	push   esi
c001bfbc:	68 cf 1f 02 c0       	push   0xc0021fcf
c001bfc1:	e8 ff 2c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001bfc6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bfcd:	e8 04 2c ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001bfd2:	89 c7                	mov    edi,eax
c001bfd4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfd7:	e8 e8 02 00 00       	call   c001c2c4 <ATA::ATA()>
c001bfdc:	eb 28                	jmp    c001c006 <IDE::detect()+0x24c>
c001bfde:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001bfe4:	55                   	push   ebp
c001bfe5:	56                   	push   esi
c001bfe6:	68 fe 1f 02 c0       	push   0xc0021ffe
c001bfeb:	e8 d5 2c ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001bff0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001bff7:	e8 da 2b ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001bffc:	89 c7                	mov    edi,eax
c001bffe:	89 04 24             	mov    DWORD PTR [esp],eax
c001c001:	e8 ee 08 00 00       	call   c001c8f4 <ATAPI::ATAPI()>
c001c006:	5a                   	pop    edx
c001c007:	59                   	pop    ecx
c001c008:	57                   	push   edi
c001c009:	53                   	push   ebx
c001c00a:	e8 c1 40 ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001c00f:	8b 07                	mov    eax,DWORD PTR [edi]
c001c011:	53                   	push   ebx
c001c012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c016:	6a 00                	push   0x0
c001c018:	57                   	push   edi
c001c019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c01c:	83 c4 20             	add    esp,0x20
c001c01f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c023:	4d                   	dec    ebp
c001c024:	74 0a                	je     c001c030 <IDE::detect()+0x276>
c001c026:	bd 01 00 00 00       	mov    ebp,0x1
c001c02b:	e9 bb fd ff ff       	jmp    c001bdeb <IDE::detect()+0x31>
c001c030:	4e                   	dec    esi
c001c031:	74 63                	je     c001c096 <IDE::detect()+0x2dc>
c001c033:	be 01 00 00 00       	mov    esi,0x1
c001c038:	e9 ac fd ff ff       	jmp    c001bde9 <IDE::detect()+0x2f>
c001c03d:	50                   	push   eax
c001c03e:	6a 04                	push   0x4
c001c040:	56                   	push   esi
c001c041:	53                   	push   ebx
c001c042:	e8 05 f7 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c047:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c04b:	83 c4 0c             	add    esp,0xc
c001c04e:	6a 05                	push   0x5
c001c050:	56                   	push   esi
c001c051:	53                   	push   ebx
c001c052:	e8 f5 f6 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c05e:	80 fa 14             	cmp    dl,0x14
c001c061:	75 04                	jne    c001c067 <IDE::detect()+0x2ad>
c001c063:	3c eb                	cmp    al,0xeb
c001c065:	eb 07                	jmp    c001c06e <IDE::detect()+0x2b4>
c001c067:	3c 96                	cmp    al,0x96
c001c069:	75 b8                	jne    c001c023 <IDE::detect()+0x269>
c001c06b:	80 fa 69             	cmp    dl,0x69
c001c06e:	75 b3                	jne    c001c023 <IDE::detect()+0x269>
c001c070:	68 a1 00 00 00       	push   0xa1
c001c075:	6a 07                	push   0x7
c001c077:	56                   	push   esi
c001c078:	53                   	push   ebx
c001c079:	e8 0e f6 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c07e:	5f                   	pop    edi
c001c07f:	58                   	pop    eax
c001c080:	6a 00                	push   0x0
c001c082:	68 40 42 0f 00       	push   0xf4240
c001c087:	e8 2c bd ff ff       	call   c0017db8 <nanoSleep(unsigned long long)>
c001c08c:	83 c4 10             	add    esp,0x10
c001c08f:	b1 01                	mov    cl,0x1
c001c091:	e9 4a fe ff ff       	jmp    c001bee0 <IDE::detect()+0x126>
c001c096:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c09c:	5b                   	pop    ebx
c001c09d:	5e                   	pop    esi
c001c09e:	5f                   	pop    edi
c001c09f:	5d                   	pop    ebp
c001c0a0:	c3                   	ret    
c001c0a1:	90                   	nop

c001c0a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c0a2:	55                   	push   ebp
c001c0a3:	57                   	push   edi
c001c0a4:	56                   	push   esi
c001c0a5:	53                   	push   ebx
c001c0a6:	83 ec 1c             	sub    esp,0x1c
c001c0a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c0ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c0b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0b5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c0b9:	88 c3                	mov    bl,al
c001c0bb:	84 c0                	test   al,al
c001c0bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0c1:	0f 84 67 01 00 00    	je     c001c22e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	68 2f 20 02 c0       	push   0xc002202f
c001c0cf:	e8 f1 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0db:	3c 01                	cmp    al,0x1
c001c0dd:	75 17                	jne    c001c0f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	b3 13                	mov    bl,0x13
c001c0e4:	68 3b 20 02 c0       	push   0xc002203b
c001c0e9:	e8 d7 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c0ee:	83 c4 10             	add    esp,0x10
c001c0f1:	e9 25 01 00 00       	jmp    c001c21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0f6:	3c 02                	cmp    al,0x2
c001c0f8:	0f 85 ef 00 00 00    	jne    c001c1ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c0fe:	d1 e6                	shl    esi,1
c001c100:	09 ee                	or     esi,ebp
c001c102:	52                   	push   edx
c001c103:	89 f0                	mov    eax,esi
c001c105:	6a 01                	push   0x1
c001c107:	0f b6 f0             	movzx  esi,al
c001c10a:	c1 e6 06             	shl    esi,0x6
c001c10d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c115:	50                   	push   eax
c001c116:	57                   	push   edi
c001c117:	e8 30 f6 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c11c:	83 c4 10             	add    esp,0x10
c001c11f:	89 c6                	mov    esi,eax
c001c121:	a8 01                	test   al,0x1
c001c123:	74 12                	je     c001c137 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c125:	83 ec 0c             	sub    esp,0xc
c001c128:	b3 07                	mov    bl,0x7
c001c12a:	68 50 20 02 c0       	push   0xc0022050
c001c12f:	e8 91 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c134:	83 c4 10             	add    esp,0x10
c001c137:	f7 c6 02 00 00 00    	test   esi,0x2
c001c13d:	74 12                	je     c001c151 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c13f:	83 ec 0c             	sub    esp,0xc
c001c142:	b3 03                	mov    bl,0x3
c001c144:	68 6e 20 02 c0       	push   0xc002206e
c001c149:	e8 77 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c14e:	83 c4 10             	add    esp,0x10
c001c151:	f7 c6 04 00 00 00    	test   esi,0x4
c001c157:	74 12                	je     c001c16b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c159:	83 ec 0c             	sub    esp,0xc
c001c15c:	b3 14                	mov    bl,0x14
c001c15e:	68 8e 20 02 c0       	push   0xc002208e
c001c163:	e8 5d 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	f7 c6 08 00 00 00    	test   esi,0x8
c001c171:	74 12                	je     c001c185 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	b3 03                	mov    bl,0x3
c001c178:	68 6e 20 02 c0       	push   0xc002206e
c001c17d:	e8 43 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c182:	83 c4 10             	add    esp,0x10
c001c185:	f7 c6 10 00 00 00    	test   esi,0x10
c001c18b:	74 12                	je     c001c19f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c18d:	83 ec 0c             	sub    esp,0xc
c001c190:	b3 15                	mov    bl,0x15
c001c192:	68 a6 20 02 c0       	push   0xc00220a6
c001c197:	e8 29 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	f7 c6 20 00 00 00    	test   esi,0x20
c001c1a5:	74 12                	je     c001c1b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c1a7:	83 ec 0c             	sub    esp,0xc
c001c1aa:	b3 03                	mov    bl,0x3
c001c1ac:	68 6e 20 02 c0       	push   0xc002206e
c001c1b1:	e8 0f 2b ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c1b6:	83 c4 10             	add    esp,0x10
c001c1b9:	f7 c6 40 00 00 00    	test   esi,0x40
c001c1bf:	74 12                	je     c001c1d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c1c1:	83 ec 0c             	sub    esp,0xc
c001c1c4:	b3 16                	mov    bl,0x16
c001c1c6:	68 c0 20 02 c0       	push   0xc00220c0
c001c1cb:	e8 f5 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	89 f0                	mov    eax,esi
c001c1d5:	84 c0                	test   al,al
c001c1d7:	79 42                	jns    c001c21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c1d9:	83 ec 0c             	sub    esp,0xc
c001c1dc:	b3 0d                	mov    bl,0xd
c001c1de:	68 e1 20 02 c0       	push   0xc00220e1
c001c1e3:	e8 dd 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c1e8:	83 c4 10             	add    esp,0x10
c001c1eb:	eb 2e                	jmp    c001c21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c1ed:	3c 03                	cmp    al,0x3
c001c1ef:	75 14                	jne    c001c205 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c1f1:	83 ec 0c             	sub    esp,0xc
c001c1f4:	b3 17                	mov    bl,0x17
c001c1f6:	68 f5 20 02 c0       	push   0xc00220f5
c001c1fb:	e8 c5 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c200:	83 c4 10             	add    esp,0x10
c001c203:	eb 16                	jmp    c001c21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c205:	3c 04                	cmp    al,0x4
c001c207:	75 12                	jne    c001c21b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c209:	83 ec 0c             	sub    esp,0xc
c001c20c:	b3 08                	mov    bl,0x8
c001c20e:	68 0b 21 02 c0       	push   0xc002210b
c001c213:	e8 ad 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c218:	83 c4 10             	add    esp,0x10
c001c21b:	50                   	push   eax
c001c21c:	50                   	push   eax
c001c21d:	0f b6 c3             	movzx  eax,bl
c001c220:	50                   	push   eax
c001c221:	68 23 21 02 c0       	push   0xc0022123
c001c226:	e8 9a 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c22b:	83 c4 10             	add    esp,0x10
c001c22e:	83 c4 1c             	add    esp,0x1c
c001c231:	88 d8                	mov    al,bl
c001c233:	5b                   	pop    ebx
c001c234:	5e                   	pop    esi
c001c235:	5f                   	pop    edi
c001c236:	5d                   	pop    ebp
c001c237:	c3                   	ret    

c001c238 <IDE::polling(unsigned char, unsigned int)>:
c001c238:	57                   	push   edi
c001c239:	56                   	push   esi
c001c23a:	53                   	push   ebx
c001c23b:	bb 04 00 00 00       	mov    ebx,0x4
c001c240:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c244:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c249:	52                   	push   edx
c001c24a:	6a 0c                	push   0xc
c001c24c:	56                   	push   esi
c001c24d:	57                   	push   edi
c001c24e:	e8 f9 f4 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	4b                   	dec    ebx
c001c257:	75 f0                	jne    c001c249 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c259:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c25e:	50                   	push   eax
c001c25f:	6a 0c                	push   0xc
c001c261:	56                   	push   esi
c001c262:	57                   	push   edi
c001c263:	e8 e4 f4 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c268:	83 c4 10             	add    esp,0x10
c001c26b:	a8 01                	test   al,0x1
c001c26d:	74 12                	je     c001c281 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c26f:	83 ec 0c             	sub    esp,0xc
c001c272:	68 3d 21 02 c0       	push   0xc002213d
c001c277:	e8 49 2a ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001c27c:	83 c4 10             	add    esp,0x10
c001c27f:	eb 17                	jmp    c001c298 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c281:	a8 20                	test   al,0x20
c001c283:	75 0f                	jne    c001c294 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c285:	4b                   	dec    ebx
c001c286:	74 10                	je     c001c298 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c288:	84 c0                	test   al,al
c001c28a:	78 d2                	js     c001c25e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c28c:	a8 08                	test   al,0x8
c001c28e:	74 ce                	je     c001c25e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c290:	31 c0                	xor    eax,eax
c001c292:	eb 06                	jmp    c001c29a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c294:	b0 01                	mov    al,0x1
c001c296:	eb 02                	jmp    c001c29a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c298:	b0 02                	mov    al,0x2
c001c29a:	5b                   	pop    ebx
c001c29b:	5e                   	pop    esi
c001c29c:	5f                   	pop    edi
c001c29d:	c3                   	ret    

c001c29e <ATA::close(int, int, void*)>:
c001c29e:	83 ec 0c             	sub    esp,0xc
c001c2a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c2ab:	85 c0                	test   eax,eax
c001c2ad:	74 0c                	je     c001c2bb <ATA::close(int, int, void*)+0x1d>
c001c2af:	83 ec 0c             	sub    esp,0xc
c001c2b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c2b4:	50                   	push   eax
c001c2b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	31 c0                	xor    eax,eax
c001c2bd:	83 c4 0c             	add    esp,0xc
c001c2c0:	c3                   	ret    
c001c2c1:	90                   	nop

c001c2c2 <ATA::powerSaving(PowerSavingLevel)>:
c001c2c2:	c3                   	ret    
c001c2c3:	90                   	nop

c001c2c4 <ATA::ATA()>:
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cb:	83 ec 04             	sub    esp,0x4
c001c2ce:	68 00 02 00 00       	push   0x200
c001c2d3:	68 80 21 02 c0       	push   0xc0022180
c001c2d8:	50                   	push   eax
c001c2d9:	e8 f8 41 ff ff       	call   c00104d6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c2de:	83 c4 10             	add    esp,0x10
c001c2e1:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c001c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ea:	89 10                	mov    DWORD PTR [eax],edx
c001c2ec:	90                   	nop
c001c2ed:	83 c4 0c             	add    esp,0xc
c001c2f0:	c3                   	ret    
c001c2f1:	90                   	nop

c001c2f2 <ATA::flush(bool)>:
c001c2f2:	53                   	push   ebx
c001c2f3:	83 ec 08             	sub    esp,0x8
c001c2f6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c2fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2ff:	19 c0                	sbb    eax,eax
c001c301:	83 e0 fd             	and    eax,0xfffffffd
c001c304:	05 ea 00 00 00       	add    eax,0xea
c001c309:	50                   	push   eax
c001c30a:	6a 07                	push   0x7
c001c30c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c313:	50                   	push   eax
c001c314:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c31a:	e8 6d f3 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c31f:	83 c4 0c             	add    esp,0xc
c001c322:	6a 00                	push   0x0
c001c324:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c32b:	50                   	push   eax
c001c32c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c332:	e8 01 ff ff ff       	call   c001c238 <IDE::polling(unsigned char, unsigned int)>
c001c337:	83 c4 18             	add    esp,0x18
c001c33a:	5b                   	pop    ebx
c001c33b:	c3                   	ret    

c001c33c <ATA::readyForCommand()>:
c001c33c:	56                   	push   esi
c001c33d:	53                   	push   ebx
c001c33e:	31 db                	xor    ebx,ebx
c001c340:	50                   	push   eax
c001c341:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c345:	50                   	push   eax
c001c346:	6a 0c                	push   0xc
c001c348:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c34f:	50                   	push   eax
c001c350:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c356:	e8 f1 f3 ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	a8 88                	test   al,0x88
c001c360:	74 23                	je     c001c385 <ATA::readyForCommand()+0x49>
c001c362:	43                   	inc    ebx
c001c363:	83 fb 63             	cmp    ebx,0x63
c001c366:	7e dd                	jle    c001c345 <ATA::readyForCommand()+0x9>
c001c368:	51                   	push   ecx
c001c369:	51                   	push   ecx
c001c36a:	6a 00                	push   0x0
c001c36c:	68 40 42 0f 00       	push   0xf4240
c001c371:	e8 42 ba ff ff       	call   c0017db8 <nanoSleep(unsigned long long)>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c37f:	75 c4                	jne    c001c345 <ATA::readyForCommand()+0x9>
c001c381:	31 c0                	xor    eax,eax
c001c383:	eb 02                	jmp    c001c387 <ATA::readyForCommand()+0x4b>
c001c385:	b0 01                	mov    al,0x1
c001c387:	5a                   	pop    edx
c001c388:	5b                   	pop    ebx
c001c389:	5e                   	pop    esi
c001c38a:	c3                   	ret    
c001c38b:	90                   	nop

c001c38c <ATA::access(unsigned long long, int, void*, bool)>:
c001c38c:	55                   	push   ebp
c001c38d:	57                   	push   edi
c001c38e:	56                   	push   esi
c001c38f:	53                   	push   ebx
c001c390:	83 ec 2c             	sub    esp,0x2c
c001c393:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c397:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c39b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c39f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3a3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c3a7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c3ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c3af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c3b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c3bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3c3:	c1 e0 06             	shl    eax,0x6
c001c3c6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c3ce:	74 5d                	je     c001c42d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c3d0:	89 fa                	mov    edx,edi
c001c3d2:	89 f0                	mov    eax,esi
c001c3d4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c3d8:	c1 ea 1c             	shr    edx,0x1c
c001c3db:	89 d1                	mov    ecx,edx
c001c3dd:	09 c1                	or     ecx,eax
c001c3df:	74 25                	je     c001c406 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c3e1:	31 ed                	xor    ebp,ebp
c001c3e3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c3ea:	89 fa                	mov    edx,edi
c001c3ec:	89 f0                	mov    eax,esi
c001c3ee:	0f ad d0             	shrd   eax,edx,cl
c001c3f1:	d3 ea                	shr    edx,cl
c001c3f3:	f6 c1 20             	test   cl,0x20
c001c3f6:	74 02                	je     c001c3fa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c3f8:	89 d0                	mov    eax,edx
c001c3fa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c3fe:	45                   	inc    ebp
c001c3ff:	83 fd 06             	cmp    ebp,0x6
c001c402:	75 df                	jne    c001c3e3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c404:	eb 76                	jmp    c001c47c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c406:	89 f0                	mov    eax,esi
c001c408:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c40d:	89 fa                	mov    edx,edi
c001c40f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c416:	0f ac d0 10          	shrd   eax,edx,0x10
c001c41a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c41f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c423:	c1 ee 18             	shr    esi,0x18
c001c426:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c42b:	eb 56                	jmp    c001c483 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c42d:	6a 00                	push   0x0
c001c42f:	6a 3f                	push   0x3f
c001c431:	57                   	push   edi
c001c432:	56                   	push   esi
c001c433:	e8 e4 1e 00 00       	call   c001e31c <__umoddi3>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	40                   	inc    eax
c001c43c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c440:	6a 00                	push   0x0
c001c442:	68 f0 03 00 00       	push   0x3f0
c001c447:	57                   	push   edi
c001c448:	56                   	push   esi
c001c449:	e8 ce 1d 00 00       	call   c001e21c <__udivdi3>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c456:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c45d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c462:	6a 00                	push   0x0
c001c464:	6a 3f                	push   0x3f
c001c466:	57                   	push   edi
c001c467:	56                   	push   esi
c001c468:	e8 af 1d 00 00       	call   c001e21c <__udivdi3>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	89 c6                	mov    esi,eax
c001c472:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c477:	83 e6 0f             	and    esi,0xf
c001c47a:	eb 07                	jmp    c001c483 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c47c:	31 f6                	xor    esi,esi
c001c47e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c483:	bf 01 00 00 00       	mov    edi,0x1
c001c488:	50                   	push   eax
c001c489:	6a 00                	push   0x0
c001c48b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c492:	50                   	push   eax
c001c493:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c497:	e8 fc f3 ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001c49c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c49f:	e8 98 fe ff ff       	call   c001c33c <ATA::readyForCommand()>
c001c4a4:	83 c4 10             	add    esp,0x10
c001c4a7:	84 c0                	test   al,al
c001c4a9:	0f 84 50 02 00 00    	je     c001c6ff <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c4af:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c4b5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c4bb:	c1 e0 04             	shl    eax,0x4
c001c4be:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c4c5:	09 c6                	or     esi,eax
c001c4c7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c4cc:	75 05                	jne    c001c4d3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c4ce:	83 ce a0             	or     esi,0xffffffa0
c001c4d1:	eb 03                	jmp    c001c4d6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c4d3:	83 ce e0             	or     esi,0xffffffe0
c001c4d6:	89 f0                	mov    eax,esi
c001c4d8:	0f b6 f0             	movzx  esi,al
c001c4db:	56                   	push   esi
c001c4dc:	6a 06                	push   0x6
c001c4de:	51                   	push   ecx
c001c4df:	52                   	push   edx
c001c4e0:	e8 a7 f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4e5:	83 c4 10             	add    esp,0x10
c001c4e8:	6a 00                	push   0x0
c001c4ea:	6a 01                	push   0x1
c001c4ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4f3:	50                   	push   eax
c001c4f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4fa:	e8 8d f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ff:	83 c4 10             	add    esp,0x10
c001c502:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c507:	75 6e                	jne    c001c577 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c509:	6a 00                	push   0x0
c001c50b:	6a 08                	push   0x8
c001c50d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c514:	50                   	push   eax
c001c515:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c51b:	e8 6c f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c520:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c525:	50                   	push   eax
c001c526:	6a 09                	push   0x9
c001c528:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c52f:	50                   	push   eax
c001c530:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c536:	e8 51 f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c53b:	83 c4 20             	add    esp,0x20
c001c53e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c543:	50                   	push   eax
c001c544:	6a 0a                	push   0xa
c001c546:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c54d:	50                   	push   eax
c001c54e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c554:	e8 33 f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c559:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c55e:	50                   	push   eax
c001c55f:	6a 0b                	push   0xb
c001c561:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c568:	50                   	push   eax
c001c569:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c56f:	e8 18 f1 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c574:	83 c4 20             	add    esp,0x20
c001c577:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c57c:	50                   	push   eax
c001c57d:	6a 02                	push   0x2
c001c57f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c586:	50                   	push   eax
c001c587:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c58d:	e8 fa f0 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c592:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c597:	50                   	push   eax
c001c598:	6a 03                	push   0x3
c001c59a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5a1:	50                   	push   eax
c001c5a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5a8:	e8 df f0 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ad:	83 c4 20             	add    esp,0x20
c001c5b0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c5b5:	50                   	push   eax
c001c5b6:	6a 04                	push   0x4
c001c5b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5bf:	50                   	push   eax
c001c5c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5c6:	e8 c1 f0 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c5d0:	50                   	push   eax
c001c5d1:	6a 05                	push   0x5
c001c5d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5da:	50                   	push   eax
c001c5db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5e1:	e8 a6 f0 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e6:	83 c4 20             	add    esp,0x20
c001c5e9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c5ee:	0f 94 c0             	sete   al
c001c5f1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c5f6:	74 09                	je     c001c601 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c5f8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c5ff:	eb 07                	jmp    c001c608 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c601:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c608:	0f b6 c0             	movzx  eax,al
c001c60b:	50                   	push   eax
c001c60c:	6a 07                	push   0x7
c001c60e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c615:	50                   	push   eax
c001c616:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c61c:	e8 6b f0 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c621:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c625:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	85 f6                	test   esi,esi
c001c62e:	0f 84 ac 00 00 00    	je     c001c6e0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c634:	50                   	push   eax
c001c635:	6a 01                	push   0x1
c001c637:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c63e:	50                   	push   eax
c001c63f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c645:	e8 ee fb ff ff       	call   c001c238 <IDE::polling(unsigned char, unsigned int)>
c001c64a:	83 c4 10             	add    esp,0x10
c001c64d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c653:	84 c0                	test   al,al
c001c655:	74 20                	je     c001c677 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c657:	0f b6 f8             	movzx  edi,al
c001c65a:	0f b6 d2             	movzx  edx,dl
c001c65d:	57                   	push   edi
c001c65e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c665:	50                   	push   eax
c001c666:	52                   	push   edx
c001c667:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c66d:	e8 30 fa ff ff       	call   c001c0a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c672:	e9 85 00 00 00       	jmp    c001c6fc <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c677:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c67c:	74 41                	je     c001c6bf <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c67e:	31 c9                	xor    ecx,ecx
c001c680:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c684:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c688:	50                   	push   eax
c001c689:	50                   	push   eax
c001c68a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c691:	50                   	push   eax
c001c692:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c698:	e8 dd ef ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001c69d:	89 c2                	mov    edx,eax
c001c69f:	89 e8                	mov    eax,ebp
c001c6a1:	66 ef                	out    dx,ax
c001c6a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	41                   	inc    ecx
c001c6ab:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c6b1:	75 cd                	jne    c001c680 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c6b3:	4e                   	dec    esi
c001c6b4:	81 c7 00 02 00 00    	add    edi,0x200
c001c6ba:	e9 6d ff ff ff       	jmp    c001c62c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c6bf:	0f b6 d2             	movzx  edx,dl
c001c6c2:	51                   	push   ecx
c001c6c3:	51                   	push   ecx
c001c6c4:	52                   	push   edx
c001c6c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6cb:	e8 aa ef ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001c6d0:	b9 00 01 00 00       	mov    ecx,0x100
c001c6d5:	89 c2                	mov    edx,eax
c001c6d7:	fc                   	cld    
c001c6d8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c6db:	83 c4 10             	add    esp,0x10
c001c6de:	eb d3                	jmp    c001c6b3 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c6e0:	31 ff                	xor    edi,edi
c001c6e2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c6e7:	74 16                	je     c001c6ff <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c6e9:	50                   	push   eax
c001c6ea:	50                   	push   eax
c001c6eb:	31 c0                	xor    eax,eax
c001c6ed:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c6f2:	0f 94 c0             	sete   al
c001c6f5:	50                   	push   eax
c001c6f6:	53                   	push   ebx
c001c6f7:	e8 f6 fb ff ff       	call   c001c2f2 <ATA::flush(bool)>
c001c6fc:	83 c4 10             	add    esp,0x10
c001c6ff:	83 c4 2c             	add    esp,0x2c
c001c702:	89 f8                	mov    eax,edi
c001c704:	5b                   	pop    ebx
c001c705:	5e                   	pop    esi
c001c706:	5f                   	pop    edi
c001c707:	5d                   	pop    ebp
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <ATA::read(unsigned long long, int, void*)>:
c001c70a:	57                   	push   edi
c001c70b:	b8 04 00 00 00       	mov    eax,0x4
c001c710:	56                   	push   esi
c001c711:	53                   	push   ebx
c001c712:	83 ec 10             	sub    esp,0x10
c001c715:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c719:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c71d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c720:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c724:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c728:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c72e:	77 3b                	ja     c001c76b <ATA::read(unsigned long long, int, void*)+0x61>
c001c730:	b8 06 00 00 00       	mov    eax,0x6
c001c735:	85 d2                	test   edx,edx
c001c737:	74 32                	je     c001c76b <ATA::read(unsigned long long, int, void*)+0x61>
c001c739:	50                   	push   eax
c001c73a:	50                   	push   eax
c001c73b:	6a 00                	push   0x0
c001c73d:	52                   	push   edx
c001c73e:	53                   	push   ebx
c001c73f:	57                   	push   edi
c001c740:	56                   	push   esi
c001c741:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c745:	e8 42 fc ff ff       	call   c001c38c <ATA::access(unsigned long long, int, void*, bool)>
c001c74a:	83 c4 20             	add    esp,0x20
c001c74d:	85 c0                	test   eax,eax
c001c74f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c753:	75 11                	jne    c001c766 <ATA::read(unsigned long long, int, void*)+0x5c>
c001c755:	01 1d 04 4f 02 c0    	add    DWORD PTR ds:0xc0024f04,ebx
c001c75b:	e8 04 04 ff ff       	call   c000cb64 <VgaText::updateDiskUsage()>
c001c760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c764:	eb 05                	jmp    c001c76b <ATA::read(unsigned long long, int, void*)+0x61>
c001c766:	b8 01 00 00 00       	mov    eax,0x1
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	5b                   	pop    ebx
c001c76f:	5e                   	pop    esi
c001c770:	5f                   	pop    edi
c001c771:	c3                   	ret    

c001c772 <ATA::write(unsigned long long, int, void*)>:
c001c772:	57                   	push   edi
c001c773:	b8 04 00 00 00       	mov    eax,0x4
c001c778:	56                   	push   esi
c001c779:	53                   	push   ebx
c001c77a:	83 ec 10             	sub    esp,0x10
c001c77d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c781:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c785:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c788:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c78c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c790:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c796:	77 3b                	ja     c001c7d3 <ATA::write(unsigned long long, int, void*)+0x61>
c001c798:	b8 06 00 00 00       	mov    eax,0x6
c001c79d:	85 d2                	test   edx,edx
c001c79f:	74 32                	je     c001c7d3 <ATA::write(unsigned long long, int, void*)+0x61>
c001c7a1:	50                   	push   eax
c001c7a2:	50                   	push   eax
c001c7a3:	6a 01                	push   0x1
c001c7a5:	52                   	push   edx
c001c7a6:	53                   	push   ebx
c001c7a7:	57                   	push   edi
c001c7a8:	56                   	push   esi
c001c7a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c7ad:	e8 da fb ff ff       	call   c001c38c <ATA::access(unsigned long long, int, void*, bool)>
c001c7b2:	83 c4 20             	add    esp,0x20
c001c7b5:	85 c0                	test   eax,eax
c001c7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7bb:	75 11                	jne    c001c7ce <ATA::write(unsigned long long, int, void*)+0x5c>
c001c7bd:	01 1d 00 4f 02 c0    	add    DWORD PTR ds:0xc0024f00,ebx
c001c7c3:	e8 9c 03 ff ff       	call   c000cb64 <VgaText::updateDiskUsage()>
c001c7c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7cc:	eb 05                	jmp    c001c7d3 <ATA::write(unsigned long long, int, void*)+0x61>
c001c7ce:	b8 01 00 00 00       	mov    eax,0x1
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	5b                   	pop    ebx
c001c7d7:	5e                   	pop    esi
c001c7d8:	5f                   	pop    edi
c001c7d9:	c3                   	ret    

c001c7da <ATA::detectCHS()>:
c001c7da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c7de:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c7e4:	c1 e0 06             	shl    eax,0x6
c001c7e7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c7ed:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c7f7:	c7 44 24 04 8f 21 02 c0 	mov    DWORD PTR [esp+0x4],0xc002218f
c001c7ff:	e9 56 81 ff ff       	jmp    c001495a <Krnl::panic(char const*)>

c001c804 <ATA::open(int, int, void*)>:
c001c804:	53                   	push   ebx
c001c805:	83 ec 08             	sub    esp,0x8
c001c808:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c80c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c810:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c814:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c81a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c820:	c1 e0 06             	shl    eax,0x6
c001c823:	01 d0                	add    eax,edx
c001c825:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c82c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c832:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c839:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c843:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c849:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c850:	75 0c                	jne    c001c85e <ATA::open(int, int, void*)+0x5a>
c001c852:	83 ec 0c             	sub    esp,0xc
c001c855:	53                   	push   ebx
c001c856:	e8 7f ff ff ff       	call   c001c7da <ATA::detectCHS()>
c001c85b:	83 c4 10             	add    esp,0x10
c001c85e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c864:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c86a:	c1 e0 06             	shl    eax,0x6
c001c86d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c874:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c87e:	d1 e8                	shr    eax,1
c001c880:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c886:	6a 04                	push   0x4
c001c888:	6a 0c                	push   0xc
c001c88a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c891:	50                   	push   eax
c001c892:	52                   	push   edx
c001c893:	e8 f4 ed ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c898:	90                   	nop
c001c899:	90                   	nop
c001c89a:	6a 00                	push   0x0
c001c89c:	6a 0c                	push   0xc
c001c89e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a5:	50                   	push   eax
c001c8a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ac:	e8 db ed ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b1:	83 c4 14             	add    esp,0x14
c001c8b4:	53                   	push   ebx
c001c8b5:	e8 84 3c ff ff       	call   c001053e <PhysicalDisk::startCache()>
c001c8ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8bd:	e8 8a 55 ff ff       	call   c0011e4c <createPartitionsForDisk(PhysicalDisk*)>
c001c8c2:	31 c0                	xor    eax,eax
c001c8c4:	83 c4 18             	add    esp,0x18
c001c8c7:	5b                   	pop    ebx
c001c8c8:	c3                   	ret    
c001c8c9:	90                   	nop

c001c8ca <ATAPI::write(unsigned long long, int, void*)>:
c001c8ca:	b8 03 00 00 00       	mov    eax,0x3
c001c8cf:	c3                   	ret    

c001c8d0 <ATAPI::close(int, int, void*)>:
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c8dd:	85 c0                	test   eax,eax
c001c8df:	74 0c                	je     c001c8ed <ATAPI::close(int, int, void*)+0x1d>
c001c8e1:	83 ec 0c             	sub    esp,0xc
c001c8e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001c8e6:	50                   	push   eax
c001c8e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	31 c0                	xor    eax,eax
c001c8ef:	83 c4 0c             	add    esp,0xc
c001c8f2:	c3                   	ret    
c001c8f3:	90                   	nop

c001c8f4 <ATAPI::ATAPI()>:
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fb:	83 ec 04             	sub    esp,0x4
c001c8fe:	68 00 08 00 00       	push   0x800
c001c903:	68 d8 21 02 c0       	push   0xc00221d8
c001c908:	50                   	push   eax
c001c909:	e8 c8 3b ff ff       	call   c00104d6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c90e:	83 c4 10             	add    esp,0x10
c001c911:	ba 18 22 02 c0       	mov    edx,0xc0022218
c001c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91a:	89 10                	mov    DWORD PTR [eax],edx
c001c91c:	90                   	nop
c001c91d:	83 c4 0c             	add    esp,0xc
c001c920:	c3                   	ret    
c001c921:	90                   	nop

c001c922 <ATAPI::readyForCommand()>:
c001c922:	56                   	push   esi
c001c923:	53                   	push   ebx
c001c924:	31 db                	xor    ebx,ebx
c001c926:	50                   	push   eax
c001c927:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c92b:	50                   	push   eax
c001c92c:	6a 0c                	push   0xc
c001c92e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c935:	50                   	push   eax
c001c936:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c93c:	e8 0b ee ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001c941:	83 c4 10             	add    esp,0x10
c001c944:	a8 88                	test   al,0x88
c001c946:	74 23                	je     c001c96b <ATAPI::readyForCommand()+0x49>
c001c948:	43                   	inc    ebx
c001c949:	83 fb 63             	cmp    ebx,0x63
c001c94c:	7e dd                	jle    c001c92b <ATAPI::readyForCommand()+0x9>
c001c94e:	51                   	push   ecx
c001c94f:	51                   	push   ecx
c001c950:	6a 00                	push   0x0
c001c952:	68 40 42 0f 00       	push   0xf4240
c001c957:	e8 5c b4 ff ff       	call   c0017db8 <nanoSleep(unsigned long long)>
c001c95c:	83 c4 10             	add    esp,0x10
c001c95f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c965:	75 c4                	jne    c001c92b <ATAPI::readyForCommand()+0x9>
c001c967:	31 c0                	xor    eax,eax
c001c969:	eb 02                	jmp    c001c96d <ATAPI::readyForCommand()+0x4b>
c001c96b:	b0 01                	mov    al,0x1
c001c96d:	5a                   	pop    edx
c001c96e:	5b                   	pop    ebx
c001c96f:	5e                   	pop    esi
c001c970:	c3                   	ret    
c001c971:	90                   	nop

c001c972 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c972:	55                   	push   ebp
c001c973:	57                   	push   edi
c001c974:	56                   	push   esi
c001c975:	53                   	push   ebx
c001c976:	83 ec 20             	sub    esp,0x20
c001c979:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c97d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c981:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c985:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c989:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c98d:	6a 01                	push   0x1
c001c98f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c996:	50                   	push   eax
c001c997:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c99d:	e8 f6 ee ff ff       	call   c001b898 <IDE::enableIRQs(unsigned char, bool)>
c001c9a2:	5e                   	pop    esi
c001c9a3:	58                   	pop    eax
c001c9a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9ab:	50                   	push   eax
c001c9ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9b2:	e8 af ec ff ff       	call   c001b666 <IDE::prepareInterrupt(unsigned char)>
c001c9b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9ba:	e8 63 ff ff ff       	call   c001c922 <ATAPI::readyForCommand()>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	84 c0                	test   al,al
c001c9c4:	75 0a                	jne    c001c9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c9c6:	bb 01 00 00 00       	mov    ebx,0x1
c001c9cb:	e9 57 02 00 00       	jmp    c001cc27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c9d0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c9d6:	c1 e0 04             	shl    eax,0x4
c001c9d9:	0f b6 c0             	movzx  eax,al
c001c9dc:	50                   	push   eax
c001c9dd:	6a 06                	push   0x6
c001c9df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9e6:	50                   	push   eax
c001c9e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9ed:	e8 9a ec ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f2:	6a 00                	push   0x0
c001c9f4:	6a 01                	push   0x1
c001c9f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9fd:	50                   	push   eax
c001c9fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca04:	e8 83 ec ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca09:	83 c4 20             	add    esp,0x20
c001ca0c:	0f b6 c3             	movzx  eax,bl
c001ca0f:	0f b6 df             	movzx  ebx,bh
c001ca12:	50                   	push   eax
c001ca13:	6a 04                	push   0x4
c001ca15:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca1c:	50                   	push   eax
c001ca1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca23:	e8 64 ec ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca28:	53                   	push   ebx
c001ca29:	6a 05                	push   0x5
c001ca2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca32:	50                   	push   eax
c001ca33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca39:	e8 4e ec ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca3e:	83 c4 20             	add    esp,0x20
c001ca41:	68 a0 00 00 00       	push   0xa0
c001ca46:	6a 07                	push   0x7
c001ca48:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca4f:	50                   	push   eax
c001ca50:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca56:	e8 31 ec ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca5b:	83 c4 0c             	add    esp,0xc
c001ca5e:	6a 01                	push   0x1
c001ca60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca67:	50                   	push   eax
c001ca68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca6e:	e8 c5 f7 ff ff       	call   c001c238 <IDE::polling(unsigned char, unsigned int)>
c001ca73:	83 c4 10             	add    esp,0x10
c001ca76:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ca7c:	84 c0                	test   al,al
c001ca7e:	74 23                	je     c001caa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ca80:	0f b6 d8             	movzx  ebx,al
c001ca83:	0f b6 d2             	movzx  edx,dl
c001ca86:	53                   	push   ebx
c001ca87:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ca8e:	50                   	push   eax
c001ca8f:	52                   	push   edx
c001ca90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca96:	e8 07 f6 ff ff       	call   c001c0a2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	e9 84 01 00 00       	jmp    c001cc27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001caa3:	0f b6 d2             	movzx  edx,dl
c001caa6:	53                   	push   ebx
c001caa7:	53                   	push   ebx
c001caa8:	52                   	push   edx
c001caa9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caaf:	e8 c6 eb ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001cab4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cab8:	b9 06 00 00 00       	mov    ecx,0x6
c001cabd:	89 c2                	mov    edx,eax
c001cabf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cac2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cacf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cad6:	85 db                	test   ebx,ebx
c001cad8:	0f 84 ec 00 00 00    	je     c001cbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cade:	51                   	push   ecx
c001cadf:	51                   	push   ecx
c001cae0:	52                   	push   edx
c001cae1:	50                   	push   eax
c001cae2:	e8 13 ed ff ff       	call   c001b7fa <IDE::waitInterrupt(unsigned char)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	84 c0                	test   al,al
c001caec:	0f 84 d4 fe ff ff    	je     c001c9c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001caf2:	56                   	push   esi
c001caf3:	56                   	push   esi
c001caf4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cafb:	50                   	push   eax
c001cafc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb02:	e8 5f eb ff ff       	call   c001b666 <IDE::prepareInterrupt(unsigned char)>
c001cb07:	83 c4 0c             	add    esp,0xc
c001cb0a:	6a 04                	push   0x4
c001cb0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb13:	50                   	push   eax
c001cb14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb1a:	e8 2d ec ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001cb1f:	83 c4 0c             	add    esp,0xc
c001cb22:	89 c6                	mov    esi,eax
c001cb24:	6a 05                	push   0x5
c001cb26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb2d:	50                   	push   eax
c001cb2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb34:	e8 13 ec ff ff       	call   c001b74c <IDE::read(unsigned char, unsigned char)>
c001cb39:	89 f1                	mov    ecx,esi
c001cb3b:	0f b6 c0             	movzx  eax,al
c001cb3e:	0f b6 f1             	movzx  esi,cl
c001cb41:	c1 e0 08             	shl    eax,0x8
c001cb44:	09 c6                	or     esi,eax
c001cb46:	d1 fe                	sar    esi,1
c001cb48:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cb4c:	83 c4 10             	add    esp,0x10
c001cb4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cb54:	74 41                	je     c001cb97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cb56:	31 c9                	xor    ecx,ecx
c001cb58:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb5e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cb65:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cb69:	75 0a                	jne    c001cb75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cb6b:	01 c9                	add    ecx,ecx
c001cb6d:	01 cd                	add    ebp,ecx
c001cb6f:	4b                   	dec    ebx
c001cb70:	e9 54 ff ff ff       	jmp    c001cac9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cb75:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cb7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cb7e:	51                   	push   ecx
c001cb7f:	51                   	push   ecx
c001cb80:	52                   	push   edx
c001cb81:	50                   	push   eax
c001cb82:	e8 f3 ea ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001cb87:	89 c2                	mov    edx,eax
c001cb89:	89 f0                	mov    eax,esi
c001cb8b:	66 ef                	out    dx,ax
c001cb8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	41                   	inc    ecx
c001cb95:	eb c1                	jmp    c001cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cb97:	31 f6                	xor    esi,esi
c001cb99:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb9f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cba6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cbaa:	75 06                	jne    c001cbb2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cbac:	01 f6                	add    esi,esi
c001cbae:	01 f5                	add    ebp,esi
c001cbb0:	eb bd                	jmp    c001cb6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cbb2:	51                   	push   ecx
c001cbb3:	51                   	push   ecx
c001cbb4:	52                   	push   edx
c001cbb5:	50                   	push   eax
c001cbb6:	e8 bf ea ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001cbbb:	89 c2                	mov    edx,eax
c001cbbd:	66 ed                	in     ax,dx
c001cbbf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cbc4:	83 c4 10             	add    esp,0x10
c001cbc7:	46                   	inc    esi
c001cbc8:	eb cf                	jmp    c001cb99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cbca:	51                   	push   ecx
c001cbcb:	51                   	push   ecx
c001cbcc:	52                   	push   edx
c001cbcd:	50                   	push   eax
c001cbce:	e8 27 ec ff ff       	call   c001b7fa <IDE::waitInterrupt(unsigned char)>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	84 c0                	test   al,al
c001cbd8:	0f 84 e8 fd ff ff    	je     c001c9c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cbde:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cbe3:	52                   	push   edx
c001cbe4:	52                   	push   edx
c001cbe5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbec:	50                   	push   eax
c001cbed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbf3:	e8 6e ea ff ff       	call   c001b666 <IDE::prepareInterrupt(unsigned char)>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	50                   	push   eax
c001cbfc:	50                   	push   eax
c001cbfd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc04:	50                   	push   eax
c001cc05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc0b:	e8 6a ea ff ff       	call   c001b67a <IDE::getBase(unsigned char)>
c001cc10:	8d 50 07             	lea    edx,[eax+0x7]
c001cc13:	ec                   	in     al,dx
c001cc14:	83 c4 10             	add    esp,0x10
c001cc17:	a8 88                	test   al,0x88
c001cc19:	74 0a                	je     c001cc25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cc1b:	4b                   	dec    ebx
c001cc1c:	75 dd                	jne    c001cbfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cc1e:	bb 02 00 00 00       	mov    ebx,0x2
c001cc23:	eb 02                	jmp    c001cc27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cc25:	31 db                	xor    ebx,ebx
c001cc27:	83 c4 1c             	add    esp,0x1c
c001cc2a:	89 d8                	mov    eax,ebx
c001cc2c:	5b                   	pop    ebx
c001cc2d:	5e                   	pop    esi
c001cc2e:	5f                   	pop    edi
c001cc2f:	5d                   	pop    ebp
c001cc30:	c3                   	ret    
c001cc31:	90                   	nop

c001cc32 <ATAPI::diskRemoved()>:
c001cc32:	83 ec 18             	sub    esp,0x18
c001cc35:	68 e3 21 02 c0       	push   0xc00221e3
c001cc3a:	e8 86 20 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001cc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc43:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cc4a:	83 c4 1c             	add    esp,0x1c
c001cc4d:	c3                   	ret    

c001cc4e <ATAPI::eject()>:
c001cc4e:	57                   	push   edi
c001cc4f:	b9 03 00 00 00       	mov    ecx,0x3
c001cc54:	53                   	push   ebx
c001cc55:	83 ec 14             	sub    esp,0x14
c001cc58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cc60:	fc                   	cld    
c001cc61:	31 c0                	xor    eax,eax
c001cc63:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc65:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cc6a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cc6f:	50                   	push   eax
c001cc70:	50                   	push   eax
c001cc71:	6a 00                	push   0x0
c001cc73:	6a 00                	push   0x0
c001cc75:	6a 00                	push   0x0
c001cc77:	6a 02                	push   0x2
c001cc79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc7d:	50                   	push   eax
c001cc7e:	53                   	push   ebx
c001cc7f:	e8 ee fc ff ff       	call   c001c972 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc84:	83 c4 14             	add    esp,0x14
c001cc87:	53                   	push   ebx
c001cc88:	e8 a5 ff ff ff       	call   c001cc32 <ATAPI::diskRemoved()>
c001cc8d:	83 c4 24             	add    esp,0x24
c001cc90:	5b                   	pop    ebx
c001cc91:	5f                   	pop    edi
c001cc92:	c3                   	ret    
c001cc93:	90                   	nop

c001cc94 <ATAPI::diskInserted()>:
c001cc94:	53                   	push   ebx
c001cc95:	83 ec 14             	sub    esp,0x14
c001cc98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cc9c:	68 f9 21 02 c0       	push   0xc00221f9
c001cca1:	e8 1f 20 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001cca6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ccad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccb0:	e8 89 38 ff ff       	call   c001053e <PhysicalDisk::startCache()>
c001ccb5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ccb9:	83 c4 18             	add    esp,0x18
c001ccbc:	5b                   	pop    ebx
c001ccbd:	e9 8a 51 ff ff       	jmp    c0011e4c <createPartitionsForDisk(PhysicalDisk*)>

c001ccc2 <ATAPI::detectMedia()>:
c001ccc2:	56                   	push   esi
c001ccc3:	53                   	push   ebx
c001ccc4:	83 ec 28             	sub    esp,0x28
c001ccc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cccb:	6a 0c                	push   0xc
c001cccd:	6a 00                	push   0x0
c001cccf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ccd3:	56                   	push   esi
c001ccd4:	e8 2f 39 fe ff       	call   c0000608 <memset>
c001ccd9:	58                   	pop    eax
c001ccda:	5a                   	pop    edx
c001ccdb:	6a 00                	push   0x0
c001ccdd:	6a 00                	push   0x0
c001ccdf:	6a 00                	push   0x0
c001cce1:	6a 00                	push   0x0
c001cce3:	56                   	push   esi
c001cce4:	53                   	push   ebx
c001cce5:	e8 88 fc ff ff       	call   c001c972 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ccea:	83 c4 1c             	add    esp,0x1c
c001cced:	6a 0c                	push   0xc
c001ccef:	6a 00                	push   0x0
c001ccf1:	56                   	push   esi
c001ccf2:	e8 11 39 fe ff       	call   c0000608 <memset>
c001ccf7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ccfc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cd01:	59                   	pop    ecx
c001cd02:	58                   	pop    eax
c001cd03:	6a 01                	push   0x1
c001cd05:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cd09:	50                   	push   eax
c001cd0a:	6a 00                	push   0x0
c001cd0c:	6a 12                	push   0x12
c001cd0e:	56                   	push   esi
c001cd0f:	53                   	push   ebx
c001cd10:	e8 5d fc ff ff       	call   c001c972 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd15:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cd19:	83 c4 20             	add    esp,0x20
c001cd1c:	83 e0 7f             	and    eax,0x7f
c001cd1f:	3c 70                	cmp    al,0x70
c001cd21:	74 15                	je     c001cd38 <ATAPI::detectMedia()+0x76>
c001cd23:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd2a:	75 0c                	jne    c001cd38 <ATAPI::detectMedia()+0x76>
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	53                   	push   ebx
c001cd30:	e8 5f ff ff ff       	call   c001cc94 <ATAPI::diskInserted()>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cd3c:	83 e0 0f             	and    eax,0xf
c001cd3f:	3c 02                	cmp    al,0x2
c001cd41:	75 1b                	jne    c001cd5e <ATAPI::detectMedia()+0x9c>
c001cd43:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cd48:	75 2d                	jne    c001cd77 <ATAPI::detectMedia()+0xb5>
c001cd4a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd51:	74 24                	je     c001cd77 <ATAPI::detectMedia()+0xb5>
c001cd53:	83 ec 0c             	sub    esp,0xc
c001cd56:	53                   	push   ebx
c001cd57:	e8 d6 fe ff ff       	call   c001cc32 <ATAPI::diskRemoved()>
c001cd5c:	eb 16                	jmp    c001cd74 <ATAPI::detectMedia()+0xb2>
c001cd5e:	84 c0                	test   al,al
c001cd60:	75 15                	jne    c001cd77 <ATAPI::detectMedia()+0xb5>
c001cd62:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd69:	75 0c                	jne    c001cd77 <ATAPI::detectMedia()+0xb5>
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	53                   	push   ebx
c001cd6f:	e8 20 ff ff ff       	call   c001cc94 <ATAPI::diskInserted()>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	83 c4 24             	add    esp,0x24
c001cd7a:	5b                   	pop    ebx
c001cd7b:	5e                   	pop    esi
c001cd7c:	c3                   	ret    
c001cd7d:	90                   	nop

c001cd7e <ATAPI::open(int, int, void*)>:
c001cd7e:	53                   	push   ebx
c001cd7f:	83 ec 08             	sub    esp,0x8
c001cd82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd8e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd94:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd9a:	c1 e0 06             	shl    eax,0x6
c001cd9d:	01 d0                	add    eax,edx
c001cd9f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cda6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cdac:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cdb3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cdbd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cdc3:	6a 04                	push   0x4
c001cdc5:	6a 0c                	push   0xc
c001cdc7:	51                   	push   ecx
c001cdc8:	52                   	push   edx
c001cdc9:	e8 be e8 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdce:	90                   	nop
c001cdcf:	90                   	nop
c001cdd0:	6a 00                	push   0x0
c001cdd2:	6a 0c                	push   0xc
c001cdd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cddb:	50                   	push   eax
c001cddc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cde2:	e8 a5 e8 ff ff       	call   c001b68c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cdee:	83 c4 14             	add    esp,0x14
c001cdf1:	53                   	push   ebx
c001cdf2:	e8 cb fe ff ff       	call   c001ccc2 <ATAPI::detectMedia()>
c001cdf7:	31 c0                	xor    eax,eax
c001cdf9:	83 c4 18             	add    esp,0x18
c001cdfc:	5b                   	pop    ebx
c001cdfd:	c3                   	ret    

c001cdfe <ATAPI::read(unsigned long long, int, void*)>:
c001cdfe:	55                   	push   ebp
c001cdff:	57                   	push   edi
c001ce00:	56                   	push   esi
c001ce01:	53                   	push   ebx
c001ce02:	83 ec 1c             	sub    esp,0x1c
c001ce05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce0d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ce11:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ce18:	74 41                	je     c001ce5b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ce1a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce1e:	b9 03 00 00 00       	mov    ecx,0x3
c001ce23:	fc                   	cld    
c001ce24:	31 c0                	xor    eax,eax
c001ce26:	86 fb                	xchg   bl,bh
c001ce28:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce2a:	c1 c3 10             	rol    ebx,0x10
c001ce2d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ce32:	89 e8                	mov    eax,ebp
c001ce34:	86 fb                	xchg   bl,bh
c001ce36:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ce3a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ce3e:	50                   	push   eax
c001ce3f:	50                   	push   eax
c001ce40:	55                   	push   ebp
c001ce41:	c1 e5 0b             	shl    ebp,0xb
c001ce44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce48:	6a 00                	push   0x0
c001ce4a:	55                   	push   ebp
c001ce4b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce4f:	50                   	push   eax
c001ce50:	56                   	push   esi
c001ce51:	e8 1c fb ff ff       	call   c001c972 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce56:	83 c4 20             	add    esp,0x20
c001ce59:	eb 1a                	jmp    c001ce75 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	56                   	push   esi
c001ce5f:	e8 5e fe ff ff       	call   c001ccc2 <ATAPI::detectMedia()>
c001ce64:	83 c4 10             	add    esp,0x10
c001ce67:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ce6e:	75 aa                	jne    c001ce1a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ce70:	b8 02 00 00 00       	mov    eax,0x2
c001ce75:	83 c4 1c             	add    esp,0x1c
c001ce78:	5b                   	pop    ebx
c001ce79:	5e                   	pop    esi
c001ce7a:	5f                   	pop    edi
c001ce7b:	5d                   	pop    ebp
c001ce7c:	c3                   	ret    
c001ce7d:	90                   	nop

c001ce7e <AVX::open(int, int, void*)>:
c001ce7e:	83 ec 0c             	sub    esp,0xc
c001ce81:	e8 12 10 00 00       	call   c001de98 <avxInit>
c001ce86:	b8 00 00 00 00       	mov    eax,0x0
c001ce8b:	83 c4 0c             	add    esp,0xc
c001ce8e:	c3                   	ret    
c001ce8f:	90                   	nop

c001ce90 <AVX::close(int, int, void*)>:
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	e8 01 10 00 00       	call   c001de99 <avxClose>
c001ce98:	b8 00 00 00 00       	mov    eax,0x0
c001ce9d:	83 c4 0c             	add    esp,0xc
c001cea0:	c3                   	ret    
c001cea1:	90                   	nop

c001cea2 <AVX::available()>:
c001cea2:	83 ec 0c             	sub    esp,0xc
c001cea5:	e8 e6 0f 00 00       	call   c001de90 <avxDetect>
c001ceaa:	85 c0                	test   eax,eax
c001ceac:	0f 95 c0             	setne  al
c001ceaf:	83 c4 0c             	add    esp,0xc
c001ceb2:	c3                   	ret    
c001ceb3:	90                   	nop

c001ceb4 <AVX::save(void*)>:
c001ceb4:	83 ec 0c             	sub    esp,0xc
c001ceb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	50                   	push   eax
c001cebf:	e8 d2 0f 00 00       	call   c001de96 <avxSave>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	90                   	nop
c001cec8:	83 c4 0c             	add    esp,0xc
c001cecb:	c3                   	ret    

c001cecc <AVX::load(void*)>:
c001cecc:	83 ec 0c             	sub    esp,0xc
c001cecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ced3:	83 ec 0c             	sub    esp,0xc
c001ced6:	50                   	push   eax
c001ced7:	e8 bb 0f 00 00       	call   c001de97 <avxLoad>
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	90                   	nop
c001cee0:	83 c4 0c             	add    esp,0xc
c001cee3:	c3                   	ret    

c001cee4 <AVX::AVX()>:
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceeb:	83 ec 08             	sub    esp,0x8
c001ceee:	68 44 22 02 c0       	push   0xc0022244
c001cef3:	50                   	push   eax
c001cef4:	e8 bb 36 ff ff       	call   c00105b4 <FPU::FPU(char const*)>
c001cef9:	83 c4 10             	add    esp,0x10
c001cefc:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001cf01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf05:	89 10                	mov    DWORD PTR [eax],edx
c001cf07:	90                   	nop
c001cf08:	83 c4 0c             	add    esp,0xc
c001cf0b:	c3                   	ret    

c001cf0c <MMX::available()>:
c001cf0c:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001cf11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cf17:	83 e0 20             	and    eax,0x20
c001cf1a:	84 c0                	test   al,al
c001cf1c:	0f 95 c0             	setne  al
c001cf1f:	c3                   	ret    

c001cf20 <MMX::open(int, int, void*)>:
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	e8 e4 0f 00 00       	call   c001df0c <x87Init>
c001cf28:	b8 00 00 00 00       	mov    eax,0x0
c001cf2d:	83 c4 0c             	add    esp,0xc
c001cf30:	c3                   	ret    
c001cf31:	90                   	nop

c001cf32 <MMX::close(int, int, void*)>:
c001cf32:	83 ec 0c             	sub    esp,0xc
c001cf35:	e8 ec 0f 00 00       	call   c001df26 <x87Close>
c001cf3a:	b8 00 00 00 00       	mov    eax,0x0
c001cf3f:	83 c4 0c             	add    esp,0xc
c001cf42:	c3                   	ret    
c001cf43:	90                   	nop

c001cf44 <MMX::save(void*)>:
c001cf44:	83 ec 0c             	sub    esp,0xc
c001cf47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf4b:	83 ec 0c             	sub    esp,0xc
c001cf4e:	50                   	push   eax
c001cf4f:	e8 ad 0f 00 00       	call   c001df01 <x87Save>
c001cf54:	83 c4 10             	add    esp,0x10
c001cf57:	90                   	nop
c001cf58:	83 c4 0c             	add    esp,0xc
c001cf5b:	c3                   	ret    

c001cf5c <MMX::load(void*)>:
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf63:	83 ec 0c             	sub    esp,0xc
c001cf66:	50                   	push   eax
c001cf67:	e8 9b 0f 00 00       	call   c001df07 <x87Load>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	90                   	nop
c001cf70:	83 c4 0c             	add    esp,0xc
c001cf73:	c3                   	ret    

c001cf74 <MMX::MMX()>:
c001cf74:	83 ec 0c             	sub    esp,0xc
c001cf77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7b:	83 ec 08             	sub    esp,0x8
c001cf7e:	68 84 22 02 c0       	push   0xc0022284
c001cf83:	50                   	push   eax
c001cf84:	e8 2b 36 ff ff       	call   c00105b4 <FPU::FPU(char const*)>
c001cf89:	83 c4 10             	add    esp,0x10
c001cf8c:	ba 94 22 02 c0       	mov    edx,0xc0022294
c001cf91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf95:	89 10                	mov    DWORD PTR [eax],edx
c001cf97:	90                   	nop
c001cf98:	83 c4 0c             	add    esp,0xc
c001cf9b:	c3                   	ret    

c001cf9c <SSE::open(int, int, void*)>:
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	e8 23 0f 00 00       	call   c001dec7 <sseInit>
c001cfa4:	b8 00 00 00 00       	mov    eax,0x0
c001cfa9:	83 c4 0c             	add    esp,0xc
c001cfac:	c3                   	ret    
c001cfad:	90                   	nop

c001cfae <SSE::close(int, int, void*)>:
c001cfae:	83 ec 0c             	sub    esp,0xc
c001cfb1:	e8 21 0f 00 00       	call   c001ded7 <sseClose>
c001cfb6:	b8 00 00 00 00       	mov    eax,0x0
c001cfbb:	83 c4 0c             	add    esp,0xc
c001cfbe:	c3                   	ret    
c001cfbf:	90                   	nop

c001cfc0 <SSE::available()>:
c001cfc0:	83 ec 1c             	sub    esp,0x1c
c001cfc3:	e8 d8 0e 00 00       	call   c001dea0 <sseDetect>
c001cfc8:	85 c0                	test   eax,eax
c001cfca:	0f 95 c0             	setne  al
c001cfcd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cfd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cfd5:	83 c4 1c             	add    esp,0x1c
c001cfd8:	c3                   	ret    
c001cfd9:	90                   	nop

c001cfda <SSE::save(void*)>:
c001cfda:	83 ec 0c             	sub    esp,0xc
c001cfdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfe1:	83 ec 0c             	sub    esp,0xc
c001cfe4:	50                   	push   eax
c001cfe5:	e8 d1 0e 00 00       	call   c001debb <sseSave>
c001cfea:	83 c4 10             	add    esp,0x10
c001cfed:	90                   	nop
c001cfee:	83 c4 0c             	add    esp,0xc
c001cff1:	c3                   	ret    

c001cff2 <SSE::load(void*)>:
c001cff2:	83 ec 0c             	sub    esp,0xc
c001cff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cff9:	83 ec 0c             	sub    esp,0xc
c001cffc:	50                   	push   eax
c001cffd:	e8 bf 0e 00 00       	call   c001dec1 <sseLoad>
c001d002:	83 c4 10             	add    esp,0x10
c001d005:	90                   	nop
c001d006:	83 c4 0c             	add    esp,0xc
c001d009:	c3                   	ret    

c001d00a <SSE::SSE()>:
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d011:	83 ec 08             	sub    esp,0x8
c001d014:	68 c4 22 02 c0       	push   0xc00222c4
c001d019:	50                   	push   eax
c001d01a:	e8 95 35 ff ff       	call   c00105b4 <FPU::FPU(char const*)>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	ba d4 22 02 c0       	mov    edx,0xc00222d4
c001d027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02b:	89 10                	mov    DWORD PTR [eax],edx
c001d02d:	90                   	nop
c001d02e:	83 c4 0c             	add    esp,0xc
c001d031:	c3                   	ret    

c001d032 <x87::open(int, int, void*)>:
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	e8 d2 0e 00 00       	call   c001df0c <x87Init>
c001d03a:	b8 00 00 00 00       	mov    eax,0x0
c001d03f:	83 c4 0c             	add    esp,0xc
c001d042:	c3                   	ret    
c001d043:	90                   	nop

c001d044 <x87::close(int, int, void*)>:
c001d044:	83 ec 0c             	sub    esp,0xc
c001d047:	e8 da 0e 00 00       	call   c001df26 <x87Close>
c001d04c:	b8 00 00 00 00       	mov    eax,0x0
c001d051:	83 c4 0c             	add    esp,0xc
c001d054:	c3                   	ret    
c001d055:	90                   	nop

c001d056 <x87::available()>:
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	e8 88 0e 00 00       	call   c001dee6 <x87Detect>
c001d05e:	85 c0                	test   eax,eax
c001d060:	0f 95 c0             	setne  al
c001d063:	83 c4 0c             	add    esp,0xc
c001d066:	c3                   	ret    
c001d067:	90                   	nop

c001d068 <x87::save(void*)>:
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d06f:	83 ec 0c             	sub    esp,0xc
c001d072:	50                   	push   eax
c001d073:	e8 89 0e 00 00       	call   c001df01 <x87Save>
c001d078:	83 c4 10             	add    esp,0x10
c001d07b:	90                   	nop
c001d07c:	83 c4 0c             	add    esp,0xc
c001d07f:	c3                   	ret    

c001d080 <x87::load(void*)>:
c001d080:	83 ec 0c             	sub    esp,0xc
c001d083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d087:	83 ec 0c             	sub    esp,0xc
c001d08a:	50                   	push   eax
c001d08b:	e8 77 0e 00 00       	call   c001df07 <x87Load>
c001d090:	83 c4 10             	add    esp,0x10
c001d093:	90                   	nop
c001d094:	83 c4 0c             	add    esp,0xc
c001d097:	c3                   	ret    

c001d098 <x87::x87()>:
c001d098:	83 ec 0c             	sub    esp,0xc
c001d09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09f:	83 ec 08             	sub    esp,0x8
c001d0a2:	68 04 23 02 c0       	push   0xc0022304
c001d0a7:	50                   	push   eax
c001d0a8:	e8 07 35 ff ff       	call   c00105b4 <FPU::FPU(char const*)>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	ba 14 23 02 c0       	mov    edx,0xc0022314
c001d0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b9:	89 10                	mov    DWORD PTR [eax],edx
c001d0bb:	90                   	nop
c001d0bc:	83 c4 0c             	add    esp,0xc
c001d0bf:	c3                   	ret    

c001d0c0 <APIC::disable()>:
c001d0c0:	90                   	nop
c001d0c1:	c3                   	ret    

c001d0c2 <APIC::close(int, int, void*)>:
c001d0c2:	55                   	push   ebp
c001d0c3:	89 e5                	mov    ebp,esp
c001d0c5:	83 ec 08             	sub    esp,0x8
c001d0c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0cd:	83 c0 3c             	add    eax,0x3c
c001d0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d0d8:	ff d0                	call   eax
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	b8 00 00 00 00       	mov    eax,0x0
c001d0e2:	c9                   	leave  
c001d0e3:	c3                   	ret    

c001d0e4 <IOAPIC::close(int, int, void*)>:
c001d0e4:	b8 00 00 00 00       	mov    eax,0x0
c001d0e9:	c3                   	ret    

c001d0ea <APIC::io_wait()>:
c001d0ea:	eb 00                	jmp    c001d0ec <APIC::io_wait()+0x2>
c001d0ec:	eb 00                	jmp    c001d0ee <APIC::io_wait()+0x4>
c001d0ee:	90                   	nop
c001d0ef:	c3                   	ret    

c001d0f0 <APIC::getBase()>:
c001d0f0:	55                   	push   ebp
c001d0f1:	89 e5                	mov    ebp,esp
c001d0f3:	83 ec 18             	sub    esp,0x18
c001d0f6:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001d0fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d101:	83 e0 08             	and    eax,0x8
c001d104:	84 c0                	test   al,al
c001d106:	75 07                	jne    c001d10f <APIC::getBase()+0x1f>
c001d108:	b8 00 00 00 00       	mov    eax,0x0
c001d10d:	eb 21                	jmp    c001d130 <APIC::getBase()+0x40>
c001d10f:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001d114:	83 ec 08             	sub    esp,0x8
c001d117:	6a 1b                	push   0x1b
c001d119:	50                   	push   eax
c001d11a:	e8 a7 e0 fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d125:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d128:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d12b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d130:	c9                   	leave  
c001d131:	c3                   	ret    

c001d132 <APIC::eoi(unsigned char)>:
c001d132:	55                   	push   ebp
c001d133:	89 e5                	mov    ebp,esp
c001d135:	83 ec 28             	sub    esp,0x28
c001d138:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d13b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d13e:	83 ec 0c             	sub    esp,0xc
c001d141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d144:	e8 a7 ff ff ff       	call   c001d0f0 <APIC::getBase()>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	05 b0 00 00 00       	add    eax,0xb0
c001d151:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d154:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d157:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d15d:	90                   	nop
c001d15e:	c9                   	leave  
c001d15f:	c3                   	ret    

c001d160 <APIC::open(int, int, void*)>:
c001d160:	55                   	push   ebp
c001d161:	89 e5                	mov    ebp,esp
c001d163:	57                   	push   edi
c001d164:	56                   	push   esi
c001d165:	53                   	push   ebx
c001d166:	83 ec 1c             	sub    esp,0x1c
c001d169:	83 ec 0c             	sub    esp,0xc
c001d16c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d16f:	e8 7c ff ff ff       	call   c001d0f0 <APIC::getBase()>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	05 f0 00 00 00       	add    eax,0xf0
c001d17c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d17f:	83 ec 0c             	sub    esp,0xc
c001d182:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d185:	e8 66 ff ff ff       	call   c001d0f0 <APIC::getBase()>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	89 c2                	mov    edx,eax
c001d18f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d192:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d198:	0f b6 f8             	movzx  edi,al
c001d19b:	89 d0                	mov    eax,edx
c001d19d:	ba 00 00 00 00       	mov    edx,0x0
c001d1a2:	89 c1                	mov    ecx,eax
c001d1a4:	80 e5 ff             	and    ch,0xff
c001d1a7:	89 cb                	mov    ebx,ecx
c001d1a9:	0f b6 f2             	movzx  esi,dl
c001d1ac:	89 d8                	mov    eax,ebx
c001d1ae:	89 f2                	mov    edx,esi
c001d1b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d1b3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d1b6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d1ba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d1be:	83 e0 00             	and    eax,0x0
c001d1c1:	09 d0                	or     eax,edx
c001d1c3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d1c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d1d0:	8d 50 01             	lea    edx,[eax+0x1]
c001d1d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d1d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d1dc:	0f b6 d0             	movzx  edx,al
c001d1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1e2:	83 c2 08             	add    edx,0x8
c001d1e5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d1e9:	0f b6 c9             	movzx  ecx,cl
c001d1ec:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d1f2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d1f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d1f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d1fe:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d205:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d208:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d20b:	89 10                	mov    DWORD PTR [eax],edx
c001d20d:	b8 00 00 00 00       	mov    eax,0x0
c001d212:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d215:	5b                   	pop    ebx
c001d216:	5e                   	pop    esi
c001d217:	5f                   	pop    edi
c001d218:	5d                   	pop    ebp
c001d219:	c3                   	ret    

c001d21a <IOAPIC::IOAPIC()>:
c001d21a:	83 ec 0c             	sub    esp,0xc
c001d21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d221:	83 ec 08             	sub    esp,0x8
c001d224:	68 44 23 02 c0       	push   0xc0022344
c001d229:	50                   	push   eax
c001d22a:	e8 91 30 ff ff       	call   c00102c0 <Device::Device(char const*)>
c001d22f:	83 c4 10             	add    esp,0x10
c001d232:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c001d237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23b:	89 10                	mov    DWORD PTR [eax],edx
c001d23d:	90                   	nop
c001d23e:	83 c4 0c             	add    esp,0xc
c001d241:	c3                   	ret    

c001d242 <APIC::APIC()>:
c001d242:	53                   	push   ebx
c001d243:	83 ec 18             	sub    esp,0x18
c001d246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24a:	83 ec 08             	sub    esp,0x8
c001d24d:	68 4c 23 02 c0       	push   0xc002234c
c001d252:	50                   	push   eax
c001d253:	e8 aa 37 ff ff       	call   c0010a02 <InterruptController::InterruptController(char const*)>
c001d258:	83 c4 10             	add    esp,0x10
c001d25b:	ba 24 24 02 c0       	mov    edx,0xc0022424
c001d260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d264:	89 10                	mov    DWORD PTR [eax],edx
c001d266:	a0 60 4f 02 c0       	mov    al,ds:0xc0024f60
c001d26b:	83 f0 01             	xor    eax,0x1
c001d26e:	84 c0                	test   al,al
c001d270:	0f 84 96 00 00 00    	je     c001d30c <APIC::APIC()+0xca>
c001d276:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d27b:	a0 10 3a 02 c0       	mov    al,ds:0xc0023a10
c001d280:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d284:	73 7f                	jae    c001d305 <APIC::APIC()+0xc3>
c001d286:	83 ec 0c             	sub    esp,0xc
c001d289:	68 68 01 00 00       	push   0x168
c001d28e:	e8 43 19 ff ff       	call   c000ebd6 <operator new(unsigned long)>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	89 c3                	mov    ebx,eax
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	53                   	push   ebx
c001d29c:	e8 79 ff ff ff       	call   c001d21a <IOAPIC::IOAPIC()>
c001d2a1:	83 c4 10             	add    esp,0x10
c001d2a4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d2a8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d2ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2b1:	89 14 85 40 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0c0],edx
c001d2b8:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c001d2bd:	40                   	inc    eax
c001d2be:	a3 20 4f 02 c0       	mov    ds:0xc0024f20,eax
c001d2c3:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c001d2c8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d2ce:	83 ec 08             	sub    esp,0x8
c001d2d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d2d5:	50                   	push   eax
c001d2d6:	e8 f5 2d ff ff       	call   c00100d0 <Device::addChild(Device*)>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2e4:	83 c0 08             	add    eax,0x8
c001d2e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2e9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d2ee:	6a 00                	push   0x0
c001d2f0:	6a 00                	push   0x0
c001d2f2:	52                   	push   edx
c001d2f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2f7:	ff d0                	call   eax
c001d2f9:	83 c4 10             	add    esp,0x10
c001d2fc:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d300:	e9 76 ff ff ff       	jmp    c001d27b <APIC::APIC()+0x39>
c001d305:	c6 05 60 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f60,0x1
c001d30c:	90                   	nop
c001d30d:	83 c4 18             	add    esp,0x18
c001d310:	5b                   	pop    ebx
c001d311:	c3                   	ret    

c001d312 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d312:	55                   	push   ebp
c001d313:	89 e5                	mov    ebp,esp
c001d315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d318:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d31e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d321:	72 1d                	jb     c001d340 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d326:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d32f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d335:	01 d0                	add    eax,edx
c001d337:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d33a:	73 04                	jae    c001d340 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d33c:	b0 01                	mov    al,0x1
c001d33e:	eb 02                	jmp    c001d342 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d340:	b0 00                	mov    al,0x0
c001d342:	5d                   	pop    ebp
c001d343:	c3                   	ret    

c001d344 <IOAPIC::read(int)>:
c001d344:	55                   	push   ebp
c001d345:	89 e5                	mov    ebp,esp
c001d347:	83 ec 10             	sub    esp,0x10
c001d34a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d34d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d353:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d356:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d359:	0f b6 d0             	movzx  edx,al
c001d35c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d35f:	89 10                	mov    DWORD PTR [eax],edx
c001d361:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d364:	83 c0 10             	add    eax,0x10
c001d367:	8b 00                	mov    eax,DWORD PTR [eax]
c001d369:	c9                   	leave  
c001d36a:	c3                   	ret    
c001d36b:	90                   	nop

c001d36c <IOAPIC::open(int, int, void*)>:
c001d36c:	55                   	push   ebp
c001d36d:	89 e5                	mov    ebp,esp
c001d36f:	57                   	push   edi
c001d370:	56                   	push   esi
c001d371:	53                   	push   ebx
c001d372:	83 ec 0c             	sub    esp,0xc
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	68 77 23 02 c0       	push   0xc0022377
c001d37d:	e8 43 19 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d38b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d394:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d39a:	8b 14 85 40 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5c0]
c001d3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3b3:	8b 14 85 c0 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc540]
c001d3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d3c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d3cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d3d5:	0f b6 f8             	movzx  edi,al
c001d3d8:	89 d0                	mov    eax,edx
c001d3da:	ba 00 00 00 00       	mov    edx,0x0
c001d3df:	89 c1                	mov    ecx,eax
c001d3e1:	80 e5 ff             	and    ch,0xff
c001d3e4:	89 cb                	mov    ebx,ecx
c001d3e6:	0f b6 f2             	movzx  esi,dl
c001d3e9:	89 d8                	mov    eax,ebx
c001d3eb:	89 f2                	mov    edx,esi
c001d3ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d3f0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d3f3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d3f7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d3fb:	83 e0 00             	and    eax,0x0
c001d3fe:	09 d0                	or     eax,edx
c001d400:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d407:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d40d:	8d 50 01             	lea    edx,[eax+0x1]
c001d410:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d413:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d419:	0f b6 d0             	movzx  edx,al
c001d41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d41f:	83 c2 08             	add    edx,0x8
c001d422:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d426:	0f b6 c9             	movzx  ecx,cl
c001d429:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d42f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d433:	83 ec 08             	sub    esp,0x8
c001d436:	6a 01                	push   0x1
c001d438:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d43b:	e8 04 ff ff ff       	call   c001d344 <IOAPIC::read(int)>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	c1 f8 10             	sar    eax,0x10
c001d446:	0f b6 c0             	movzx  eax,al
c001d449:	8d 50 01             	lea    edx,[eax+0x1]
c001d44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d44f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d455:	b8 00 00 00 00       	mov    eax,0x0
c001d45a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d45d:	5b                   	pop    ebx
c001d45e:	5e                   	pop    esi
c001d45f:	5f                   	pop    edi
c001d460:	5d                   	pop    ebp
c001d461:	c3                   	ret    

c001d462 <IOAPIC::write(int, int)>:
c001d462:	55                   	push   ebp
c001d463:	89 e5                	mov    ebp,esp
c001d465:	83 ec 10             	sub    esp,0x10
c001d468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d46b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d471:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d477:	0f b6 d0             	movzx  edx,al
c001d47a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d47d:	89 10                	mov    DWORD PTR [eax],edx
c001d47f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d482:	8d 50 10             	lea    edx,[eax+0x10]
c001d485:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d488:	89 02                	mov    DWORD PTR [edx],eax
c001d48a:	90                   	nop
c001d48b:	c9                   	leave  
c001d48c:	c3                   	ret    
c001d48d:	90                   	nop

c001d48e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d48e:	55                   	push   ebp
c001d48f:	89 e5                	mov    ebp,esp
c001d491:	83 ec 20             	sub    esp,0x20
c001d494:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d497:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d49a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d49d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d4a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d4a3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d4a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d4a9:	88 d0                	mov    al,dl
c001d4ab:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d4ae:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d4b2:	83 c0 08             	add    eax,0x8
c001d4b5:	01 c0                	add    eax,eax
c001d4b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d4ba:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d4be:	83 c0 08             	add    eax,0x8
c001d4c1:	01 c0                	add    eax,eax
c001d4c3:	40                   	inc    eax
c001d4c4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d4c7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d4ca:	50                   	push   eax
c001d4cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4ce:	e8 71 fe ff ff       	call   c001d344 <IOAPIC::read(int)>
c001d4d3:	83 c4 08             	add    esp,0x8
c001d4d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d4d9:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d4e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d4e3:	c1 e0 18             	shl    eax,0x18
c001d4e6:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d4e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d4ec:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d4ef:	52                   	push   edx
c001d4f0:	50                   	push   eax
c001d4f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4f4:	e8 69 ff ff ff       	call   c001d462 <IOAPIC::write(int, int)>
c001d4f9:	83 c4 0c             	add    esp,0xc
c001d4fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d4ff:	50                   	push   eax
c001d500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d503:	e8 3c fe ff ff       	call   c001d344 <IOAPIC::read(int)>
c001d508:	83 c4 08             	add    esp,0x8
c001d50b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d50e:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d515:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d51c:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d523:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d52a:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d52e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d531:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d534:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d537:	52                   	push   edx
c001d538:	50                   	push   eax
c001d539:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d53c:	e8 21 ff ff ff       	call   c001d462 <IOAPIC::write(int, int)>
c001d541:	83 c4 0c             	add    esp,0xc
c001d544:	90                   	nop
c001d545:	c9                   	leave  
c001d546:	c3                   	ret    
c001d547:	90                   	nop

c001d548 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d548:	55                   	push   ebp
c001d549:	89 e5                	mov    ebp,esp
c001d54b:	56                   	push   esi
c001d54c:	53                   	push   ebx
c001d54d:	83 ec 20             	sub    esp,0x20
c001d550:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d553:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d556:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d55a:	74 28                	je     c001d584 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d55c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d560:	7f 12                	jg     c001d574 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d562:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d565:	05 c0 28 02 c0       	add    eax,0xc00228c0
c001d56a:	8a 00                	mov    al,BYTE PTR [eax]
c001d56c:	0f b6 c0             	movzx  eax,al
c001d56f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d572:	eb 10                	jmp    c001d584 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	68 88 23 02 c0       	push   0xc0022388
c001d57c:	e8 d9 73 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d588:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c001d58d:	83 ec 08             	sub    esp,0x8
c001d590:	50                   	push   eax
c001d591:	68 c0 23 02 c0       	push   0xc00223c0
c001d596:	e8 2a 17 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001d59b:	83 c4 10             	add    esp,0x10
c001d59e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d5a5:	a1 20 4f 02 c0       	mov    eax,ds:0xc0024f20
c001d5aa:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d5ad:	7d 58                	jge    c001d607 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d5af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5b2:	8b 04 85 40 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0c0]
c001d5b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d5bc:	83 ec 08             	sub    esp,0x8
c001d5bf:	52                   	push   edx
c001d5c0:	50                   	push   eax
c001d5c1:	e8 4c fd ff ff       	call   c001d312 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	84 c0                	test   al,al
c001d5cb:	74 35                	je     c001d602 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d5cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5d0:	8b 1c 85 40 4f 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb0c0]
c001d5d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5da:	83 c0 20             	add    eax,0x20
c001d5dd:	0f b6 f0             	movzx  esi,al
c001d5e0:	e8 6c 66 ff ff       	call   c0013c51 <getCPUNumber()>
c001d5e5:	99                   	cdq    
c001d5e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d5e9:	0f b6 c9             	movzx  ecx,cl
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	56                   	push   esi
c001d5f0:	52                   	push   edx
c001d5f1:	50                   	push   eax
c001d5f2:	51                   	push   ecx
c001d5f3:	53                   	push   ebx
c001d5f4:	e8 95 fe ff ff       	call   c001d48e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d5f9:	83 c4 20             	add    esp,0x20
c001d5fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d600:	eb 05                	jmp    c001d607 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d602:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d605:	eb 9e                	jmp    c001d5a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d607:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d60a:	83 f0 01             	xor    eax,0x1
c001d60d:	84 c0                	test   al,al
c001d60f:	74 10                	je     c001d621 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d611:	83 ec 0c             	sub    esp,0xc
c001d614:	68 d7 23 02 c0       	push   0xc00223d7
c001d619:	e8 3c 73 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d625:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d62c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d630:	7f 65                	jg     c001d697 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d635:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d638:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d63f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d642:	01 ca                	add    edx,ecx
c001d644:	83 c2 54             	add    edx,0x54
c001d647:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d64b:	85 c0                	test   eax,eax
c001d64d:	75 43                	jne    c001d692 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d652:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d655:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d65c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d65f:	01 ca                	add    edx,ecx
c001d661:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d664:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d667:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d66e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d671:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d678:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d67b:	01 ca                	add    edx,ecx
c001d67d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d683:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d686:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d68a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d68d:	83 e8 20             	sub    eax,0x20
c001d690:	eb 1a                	jmp    c001d6ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d692:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d695:	eb 95                	jmp    c001d62c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d697:	83 ec 0c             	sub    esp,0xc
c001d69a:	68 e4 23 02 c0       	push   0xc00223e4
c001d69f:	e8 b6 72 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d6ac:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d6af:	5b                   	pop    ebx
c001d6b0:	5e                   	pop    esi
c001d6b1:	5d                   	pop    ebp
c001d6b2:	c3                   	ret    
c001d6b3:	90                   	nop

c001d6b4 <PIC::disable()>:
c001d6b4:	55                   	push   ebp
c001d6b5:	89 e5                	mov    ebp,esp
c001d6b7:	83 ec 10             	sub    esp,0x10
c001d6ba:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d6c0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d6c4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d6c7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d6cb:	ee                   	out    dx,al
c001d6cc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d6d2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d6d6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d6d9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d6dd:	ee                   	out    dx,al
c001d6de:	90                   	nop
c001d6df:	c9                   	leave  
c001d6e0:	c3                   	ret    
c001d6e1:	90                   	nop

c001d6e2 <PIC::close(int, int, void*)>:
c001d6e2:	55                   	push   ebp
c001d6e3:	89 e5                	mov    ebp,esp
c001d6e5:	83 ec 08             	sub    esp,0x8
c001d6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6ed:	83 c0 3c             	add    eax,0x3c
c001d6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f2:	83 ec 0c             	sub    esp,0xc
c001d6f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6f8:	ff d0                	call   eax
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	b8 00 00 00 00       	mov    eax,0x0
c001d702:	c9                   	leave  
c001d703:	c3                   	ret    

c001d704 <PIC::PIC()>:
c001d704:	83 ec 0c             	sub    esp,0xc
c001d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d70b:	83 ec 08             	sub    esp,0x8
c001d70e:	68 90 24 02 c0       	push   0xc0022490
c001d713:	50                   	push   eax
c001d714:	e8 e9 32 ff ff       	call   c0010a02 <InterruptController::InterruptController(char const*)>
c001d719:	83 c4 10             	add    esp,0x10
c001d71c:	ba bc 24 02 c0       	mov    edx,0xc00224bc
c001d721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d725:	89 10                	mov    DWORD PTR [eax],edx
c001d727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d72b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d731:	0f b6 d0             	movzx  edx,al
c001d734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d738:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d743:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d749:	0f b6 d0             	movzx  edx,al
c001d74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d750:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d759:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d75f:	8d 50 01             	lea    edx,[eax+0x1]
c001d762:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d766:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d76c:	0f b6 d0             	movzx  edx,al
c001d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d773:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d777:	83 e1 3f             	and    ecx,0x3f
c001d77a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d782:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d788:	0f b6 d0             	movzx  edx,al
c001d78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d79a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d7a0:	0f b6 d0             	movzx  edx,al
c001d7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d7b6:	8d 50 01             	lea    edx,[eax+0x1]
c001d7b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7bd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d7c3:	0f b6 d0             	movzx  edx,al
c001d7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d7ce:	83 e1 3f             	and    ecx,0x3f
c001d7d1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d7d5:	90                   	nop
c001d7d6:	83 c4 0c             	add    esp,0xc
c001d7d9:	c3                   	ret    

c001d7da <PIC::ioWait()>:
c001d7da:	eb 00                	jmp    c001d7dc <PIC::ioWait()+0x2>
c001d7dc:	eb 00                	jmp    c001d7de <PIC::ioWait()+0x4>
c001d7de:	90                   	nop
c001d7df:	c3                   	ret    

c001d7e0 <PIC::getIRQReg(int)>:
c001d7e0:	55                   	push   ebp
c001d7e1:	89 e5                	mov    ebp,esp
c001d7e3:	83 ec 10             	sub    esp,0x10
c001d7e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d7e9:	0f b6 c0             	movzx  eax,al
c001d7ec:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d7f2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d7f5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d7f8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d7fc:	ee                   	out    dx,al
c001d7fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d800:	0f b6 c0             	movzx  eax,al
c001d803:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d809:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d80c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d80f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d813:	ee                   	out    dx,al
c001d814:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d81a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d81e:	89 c2                	mov    edx,eax
c001d820:	ec                   	in     al,dx
c001d821:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d824:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d827:	0f b6 c0             	movzx  eax,al
c001d82a:	c1 e0 08             	shl    eax,0x8
c001d82d:	89 c1                	mov    ecx,eax
c001d82f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d835:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d839:	89 c2                	mov    edx,eax
c001d83b:	ec                   	in     al,dx
c001d83c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d83f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d842:	0f b6 c0             	movzx  eax,al
c001d845:	09 c8                	or     eax,ecx
c001d847:	c9                   	leave  
c001d848:	c3                   	ret    
c001d849:	90                   	nop

c001d84a <PIC::eoi(unsigned char)>:
c001d84a:	55                   	push   ebp
c001d84b:	89 e5                	mov    ebp,esp
c001d84d:	83 ec 14             	sub    esp,0x14
c001d850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d853:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d856:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d85a:	75 1e                	jne    c001d87a <PIC::eoi(unsigned char)+0x30>
c001d85c:	6a 0b                	push   0xb
c001d85e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d861:	e8 7a ff ff ff       	call   c001d7e0 <PIC::getIRQReg(int)>
c001d866:	83 c4 08             	add    esp,0x8
c001d869:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d86d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d871:	25 80 00 00 00       	and    eax,0x80
c001d876:	85 c0                	test   eax,eax
c001d878:	74 5f                	je     c001d8d9 <PIC::eoi(unsigned char)+0x8f>
c001d87a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d87e:	75 2d                	jne    c001d8ad <PIC::eoi(unsigned char)+0x63>
c001d880:	6a 0b                	push   0xb
c001d882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d885:	e8 56 ff ff ff       	call   c001d7e0 <PIC::getIRQReg(int)>
c001d88a:	83 c4 08             	add    esp,0x8
c001d88d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d891:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d894:	66 85 c0             	test   ax,ax
c001d897:	78 14                	js     c001d8ad <PIC::eoi(unsigned char)+0x63>
c001d899:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d89f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d8a3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d8a6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d8aa:	ee                   	out    dx,al
c001d8ab:	eb 2d                	jmp    c001d8da <PIC::eoi(unsigned char)+0x90>
c001d8ad:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d8b1:	76 12                	jbe    c001d8c5 <PIC::eoi(unsigned char)+0x7b>
c001d8b3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d8b9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d8bd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d8c0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d8c4:	ee                   	out    dx,al
c001d8c5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d8cb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d8cf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d8d2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d8d6:	ee                   	out    dx,al
c001d8d7:	eb 01                	jmp    c001d8da <PIC::eoi(unsigned char)+0x90>
c001d8d9:	90                   	nop
c001d8da:	c9                   	leave  
c001d8db:	c3                   	ret    

c001d8dc <PIC::remap()>:
c001d8dc:	55                   	push   ebp
c001d8dd:	89 e5                	mov    ebp,esp
c001d8df:	83 ec 48             	sub    esp,0x48
c001d8e2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d8e9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d8f0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d8f6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d8f9:	89 c2                	mov    edx,eax
c001d8fb:	ec                   	in     al,dx
c001d8fc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d8ff:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d902:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d905:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d90b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d90e:	89 c2                	mov    edx,eax
c001d910:	ec                   	in     al,dx
c001d911:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d914:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d917:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d91a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d920:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d924:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d927:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d92a:	ee                   	out    dx,al
c001d92b:	83 ec 0c             	sub    esp,0xc
c001d92e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d931:	e8 a4 fe ff ff       	call   c001d7da <PIC::ioWait()>
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d93f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001d943:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001d946:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001d949:	ee                   	out    dx,al
c001d94a:	83 ec 0c             	sub    esp,0xc
c001d94d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d950:	e8 85 fe ff ff       	call   c001d7da <PIC::ioWait()>
c001d955:	83 c4 10             	add    esp,0x10
c001d958:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d95b:	0f b6 c0             	movzx  eax,al
c001d95e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001d964:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001d967:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001d96a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001d96d:	ee                   	out    dx,al
c001d96e:	83 ec 0c             	sub    esp,0xc
c001d971:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d974:	e8 61 fe ff ff       	call   c001d7da <PIC::ioWait()>
c001d979:	83 c4 10             	add    esp,0x10
c001d97c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d97f:	0f b6 c0             	movzx  eax,al
c001d982:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001d988:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001d98b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001d98e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d991:	ee                   	out    dx,al
c001d992:	83 ec 0c             	sub    esp,0xc
c001d995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d998:	e8 3d fe ff ff       	call   c001d7da <PIC::ioWait()>
c001d99d:	83 c4 10             	add    esp,0x10
c001d9a0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001d9a6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001d9aa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001d9ad:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001d9b0:	ee                   	out    dx,al
c001d9b1:	83 ec 0c             	sub    esp,0xc
c001d9b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9b7:	e8 1e fe ff ff       	call   c001d7da <PIC::ioWait()>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001d9c5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001d9c9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001d9cc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001d9cf:	ee                   	out    dx,al
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9d6:	e8 ff fd ff ff       	call   c001d7da <PIC::ioWait()>
c001d9db:	83 c4 10             	add    esp,0x10
c001d9de:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001d9e4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001d9e8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001d9eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d9ee:	ee                   	out    dx,al
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9f5:	e8 e0 fd ff ff       	call   c001d7da <PIC::ioWait()>
c001d9fa:	83 c4 10             	add    esp,0x10
c001d9fd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001da03:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001da07:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001da0a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001da0d:	ee                   	out    dx,al
c001da0e:	83 ec 0c             	sub    esp,0xc
c001da11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da14:	e8 c1 fd ff ff       	call   c001d7da <PIC::ioWait()>
c001da19:	83 c4 10             	add    esp,0x10
c001da1c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001da20:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001da26:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001da29:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001da2c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001da2f:	ee                   	out    dx,al
c001da30:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001da34:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001da3a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001da3d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001da40:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001da43:	ee                   	out    dx,al
c001da44:	90                   	nop
c001da45:	c9                   	leave  
c001da46:	c3                   	ret    
c001da47:	90                   	nop

c001da48 <PIC::open(int, int, void*)>:
c001da48:	55                   	push   ebp
c001da49:	89 e5                	mov    ebp,esp
c001da4b:	83 ec 18             	sub    esp,0x18
c001da4e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001da54:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001da58:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001da5b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001da5f:	ee                   	out    dx,al
c001da60:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001da66:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001da6a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001da6d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001da71:	ee                   	out    dx,al
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da78:	e8 5f fe ff ff       	call   c001d8dc <PIC::remap()>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	b8 00 00 00 00       	mov    eax,0x0
c001da85:	c9                   	leave  
c001da86:	c3                   	ret    
c001da87:	90                   	nop

c001da88 <APICTimer::close(int, int, void*)>:
c001da88:	b8 00 00 00 00       	mov    eax,0x0
c001da8d:	c3                   	ret    

c001da8e <apicTimerHandler(regs*, void*)>:
c001da8e:	83 ec 0c             	sub    esp,0xc
c001da91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da95:	8b 00                	mov    eax,DWORD PTR [eax]
c001da97:	99                   	cdq    
c001da98:	52                   	push   edx
c001da99:	50                   	push   eax
c001da9a:	6a 00                	push   0x0
c001da9c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001daa1:	e8 76 07 00 00       	call   c001e21c <__udivdi3>
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	83 ec 08             	sub    esp,0x8
c001daac:	52                   	push   edx
c001daad:	50                   	push   eax
c001daae:	e8 ba 46 ff ff       	call   c001216d <timerHandler(unsigned long long)>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	90                   	nop
c001dab7:	83 c4 0c             	add    esp,0xc
c001daba:	c3                   	ret    
c001dabb:	90                   	nop

c001dabc <APICTimer::write(int)>:
c001dabc:	53                   	push   ebx
c001dabd:	83 ec 28             	sub    esp,0x28
c001dac0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dac4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dac8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dace:	e8 81 61 ff ff       	call   c0013c54 <thisCPU()>
c001dad3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dad9:	83 ec 0c             	sub    esp,0xc
c001dadc:	50                   	push   eax
c001dadd:	e8 0e f6 ff ff       	call   c001d0f0 <APIC::getBase()>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dae9:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c001daee:	8b 15 d4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237d4
c001daf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001daf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dafc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db00:	05 e0 03 00 00       	add    eax,0x3e0
c001db05:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001db0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db0f:	05 80 03 00 00       	add    eax,0x380
c001db14:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001db1a:	fb                   	sti    
c001db1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db23:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001db28:	83 d2 00             	adc    edx,0x0
c001db2b:	89 c1                	mov    ecx,eax
c001db2d:	89 d3                	mov    ebx,edx
c001db2f:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c001db34:	8b 15 d4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237d4
c001db3a:	39 c8                	cmp    eax,ecx
c001db3c:	89 d0                	mov    eax,edx
c001db3e:	19 d8                	sbb    eax,ebx
c001db40:	73 02                	jae    c001db44 <APICTimer::write(int)+0x88>
c001db42:	eb d7                	jmp    c001db1b <APICTimer::write(int)+0x5f>
c001db44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db48:	05 20 03 00 00       	add    eax,0x320
c001db4d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001db53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db57:	05 90 03 00 00       	add    eax,0x390
c001db5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001db5e:	f7 d0                	not    eax
c001db60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001db68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db6c:	ba 00 00 00 00       	mov    edx,0x0
c001db71:	f7 f3                	div    ebx
c001db73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db81:	0d 00 00 02 00       	or     eax,0x20000
c001db86:	89 c2                	mov    edx,eax
c001db88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db8c:	05 20 03 00 00       	add    eax,0x320
c001db91:	89 10                	mov    DWORD PTR [eax],edx
c001db93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db97:	05 e0 03 00 00       	add    eax,0x3e0
c001db9c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dba6:	05 80 03 00 00       	add    eax,0x380
c001dbab:	89 c2                	mov    edx,eax
c001dbad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbb1:	89 02                	mov    DWORD PTR [edx],eax
c001dbb3:	90                   	nop
c001dbb4:	83 c4 28             	add    esp,0x28
c001dbb7:	5b                   	pop    ebx
c001dbb8:	c3                   	ret    
c001dbb9:	90                   	nop

c001dbba <APICTimer::open(int, int, void*)>:
c001dbba:	57                   	push   edi
c001dbbb:	56                   	push   esi
c001dbbc:	53                   	push   ebx
c001dbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbc3:	83 c0 24             	add    eax,0x24
c001dbc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbc8:	83 ec 08             	sub    esp,0x8
c001dbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbd3:	ff d0                	call   eax
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	e8 77 60 ff ff       	call   c0013c54 <thisCPU()>
c001dbdd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dbe3:	83 ec 0c             	sub    esp,0xc
c001dbe6:	50                   	push   eax
c001dbe7:	e8 04 f5 ff ff       	call   c001d0f0 <APIC::getBase()>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dbff:	0f b6 f8             	movzx  edi,al
c001dc02:	89 d0                	mov    eax,edx
c001dc04:	ba 00 00 00 00       	mov    edx,0x0
c001dc09:	89 c1                	mov    ecx,eax
c001dc0b:	80 e5 ff             	and    ch,0xff
c001dc0e:	89 cb                	mov    ebx,ecx
c001dc10:	0f b6 f2             	movzx  esi,dl
c001dc13:	89 d8                	mov    eax,ebx
c001dc15:	89 f2                	mov    edx,esi
c001dc17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc1b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dc1e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dc22:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dc26:	83 e0 00             	and    eax,0x0
c001dc29:	09 d0                	or     eax,edx
c001dc2b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dc39:	8d 50 01             	lea    edx,[eax+0x1]
c001dc3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc40:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dc46:	0f b6 d0             	movzx  edx,al
c001dc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4d:	83 c2 08             	add    edx,0x8
c001dc50:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dc54:	0f b6 c9             	movzx  ecx,cl
c001dc57:	81 c9 00 00 01 00    	or     ecx,0x10000
c001dc5d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc69:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc77:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc81:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc87:	83 ec 0c             	sub    esp,0xc
c001dc8a:	51                   	push   ecx
c001dc8b:	6a 01                	push   0x1
c001dc8d:	68 8e da 01 c0       	push   0xc001da8e
c001dc92:	52                   	push   edx
c001dc93:	50                   	push   eax
c001dc94:	e8 8b 23 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc99:	83 c4 20             	add    esp,0x20
c001dc9c:	89 c2                	mov    edx,eax
c001dc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dca8:	b8 00 00 00 00       	mov    eax,0x0
c001dcad:	5b                   	pop    ebx
c001dcae:	5e                   	pop    esi
c001dcaf:	5f                   	pop    edi
c001dcb0:	c3                   	ret    
c001dcb1:	90                   	nop

c001dcb2 <APICTimer::APICTimer()>:
c001dcb2:	83 ec 0c             	sub    esp,0xc
c001dcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb9:	83 ec 08             	sub    esp,0x8
c001dcbc:	68 fc 24 02 c0       	push   0xc00224fc
c001dcc1:	50                   	push   eax
c001dcc2:	e8 17 44 ff ff       	call   c00120de <Timer::Timer(char const*)>
c001dcc7:	83 c4 10             	add    esp,0x10
c001dcca:	ba 10 25 02 c0       	mov    edx,0xc0022510
c001dccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd3:	89 10                	mov    DWORD PTR [eax],edx
c001dcd5:	90                   	nop
c001dcd6:	83 c4 0c             	add    esp,0xc
c001dcd9:	c3                   	ret    

c001dcda <PIT::write(int)>:
c001dcda:	83 ec 10             	sub    esp,0x10
c001dcdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dce1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dce5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcef:	a3 64 4f 02 c0       	mov    ds:0xc0024f64,eax
c001dcf4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dcf9:	99                   	cdq    
c001dcfa:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dcfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd02:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd09:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd0e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd12:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd17:	ee                   	out    dx,al
c001dd18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd1c:	0f b6 c0             	movzx  eax,al
c001dd1f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd26:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd2a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd2e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd33:	ee                   	out    dx,al
c001dd34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd38:	c1 f8 08             	sar    eax,0x8
c001dd3b:	0f b6 c0             	movzx  eax,al
c001dd3e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd45:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd49:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd4d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd52:	ee                   	out    dx,al
c001dd53:	90                   	nop
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	c3                   	ret    

c001dd58 <pitHandler(regs*, void*)>:
c001dd58:	83 ec 0c             	sub    esp,0xc
c001dd5b:	a1 64 4f 02 c0       	mov    eax,ds:0xc0024f64
c001dd60:	99                   	cdq    
c001dd61:	52                   	push   edx
c001dd62:	50                   	push   eax
c001dd63:	6a 00                	push   0x0
c001dd65:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dd6a:	e8 ad 04 00 00       	call   c001e21c <__udivdi3>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	83 ec 08             	sub    esp,0x8
c001dd75:	52                   	push   edx
c001dd76:	50                   	push   eax
c001dd77:	e8 f1 43 ff ff       	call   c001216d <timerHandler(unsigned long long)>
c001dd7c:	83 c4 10             	add    esp,0x10
c001dd7f:	90                   	nop
c001dd80:	83 c4 0c             	add    esp,0xc
c001dd83:	c3                   	ret    

c001dd84 <PIT::open(int, int, void*)>:
c001dd84:	83 ec 0c             	sub    esp,0xc
c001dd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd8d:	83 c0 24             	add    eax,0x24
c001dd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd92:	83 ec 08             	sub    esp,0x8
c001dd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd9d:	ff d0                	call   eax
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda6:	83 ec 0c             	sub    esp,0xc
c001dda9:	6a 00                	push   0x0
c001ddab:	6a 01                	push   0x1
c001ddad:	68 58 dd 01 c0       	push   0xc001dd58
c001ddb2:	6a 00                	push   0x0
c001ddb4:	50                   	push   eax
c001ddb5:	e8 6a 22 ff ff       	call   c0010024 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddba:	83 c4 20             	add    esp,0x20
c001ddbd:	89 c2                	mov    edx,eax
c001ddbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddc9:	b8 00 00 00 00       	mov    eax,0x0
c001ddce:	83 c4 0c             	add    esp,0xc
c001ddd1:	c3                   	ret    

c001ddd2 <PIT::close(int, int, void*)>:
c001ddd2:	83 ec 0c             	sub    esp,0xc
c001ddd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde7:	6a 01                	push   0x1
c001dde9:	68 58 dd 01 c0       	push   0xc001dd58
c001ddee:	6a 00                	push   0x0
c001ddf0:	50                   	push   eax
c001ddf1:	e8 8c 22 ff ff       	call   c0010082 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ddf6:	83 c4 10             	add    esp,0x10
c001ddf9:	b8 00 00 00 00       	mov    eax,0x0
c001ddfe:	83 c4 0c             	add    esp,0xc
c001de01:	c3                   	ret    

c001de02 <PIT::PIT()>:
c001de02:	83 ec 0c             	sub    esp,0xc
c001de05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de09:	83 ec 08             	sub    esp,0x8
c001de0c:	68 38 25 02 c0       	push   0xc0022538
c001de11:	50                   	push   eax
c001de12:	e8 c7 42 ff ff       	call   c00120de <Timer::Timer(char const*)>
c001de17:	83 c4 10             	add    esp,0x10
c001de1a:	ba 60 25 02 c0       	mov    edx,0xc0022560
c001de1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de23:	89 10                	mov    DWORD PTR [eax],edx
c001de25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de2f:	0f b6 d0             	movzx  edx,al
c001de32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de36:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de41:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de47:	0f b6 d0             	movzx  edx,al
c001de4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de5d:	8d 50 01             	lea    edx,[eax+0x1]
c001de60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de64:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001de6a:	0f b6 d0             	movzx  edx,al
c001de6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de71:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de75:	83 e1 3f             	and    ecx,0x3f
c001de78:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de7c:	90                   	nop
c001de7d:	83 c4 0c             	add    esp,0xc
c001de80:	c3                   	ret    
c001de81:	66 90                	xchg   ax,ax
c001de83:	66 90                	xchg   ax,ax
c001de85:	66 90                	xchg   ax,ax
c001de87:	66 90                	xchg   ax,ax
c001de89:	66 90                	xchg   ax,ax
c001de8b:	66 90                	xchg   ax,ax
c001de8d:	66 90                	xchg   ax,ax
c001de8f:	90                   	nop

c001de90 <avxDetect>:
c001de90:	b8 00 00 00 00       	mov    eax,0x0
c001de95:	c3                   	ret    

c001de96 <avxSave>:
c001de96:	c3                   	ret    

c001de97 <avxLoad>:
c001de97:	c3                   	ret    

c001de98 <avxInit>:
c001de98:	c3                   	ret    

c001de99 <avxClose>:
c001de99:	c3                   	ret    
c001de9a:	66 90                	xchg   ax,ax
c001de9c:	66 90                	xchg   ax,ax
c001de9e:	66 90                	xchg   ax,ax

c001dea0 <sseDetect>:
c001dea0:	b8 01 00 00 00       	mov    eax,0x1
c001dea5:	0f a2                	cpuid  
c001dea7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dead:	74 06                	je     c001deb5 <sseDetect.noSSE>
c001deaf:	b8 01 00 00 00       	mov    eax,0x1
c001deb4:	c3                   	ret    

c001deb5 <sseDetect.noSSE>:
c001deb5:	b8 00 00 00 00       	mov    eax,0x0
c001deba:	c3                   	ret    

c001debb <sseSave>:
c001debb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dec0:	c3                   	ret    

c001dec1 <sseLoad>:
c001dec1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dec6:	c3                   	ret    

c001dec7 <sseInit>:
c001dec7:	e8 40 00 00 00       	call   c001df0c <x87Init>
c001decc:	0f 20 e0             	mov    eax,cr4
c001decf:	66 0d 00 06          	or     ax,0x600
c001ded3:	0f 22 e0             	mov    cr4,eax
c001ded6:	c3                   	ret    

c001ded7 <sseClose>:
c001ded7:	c3                   	ret    
c001ded8:	66 90                	xchg   ax,ax
c001deda:	66 90                	xchg   ax,ax
c001dedc:	66 90                	xchg   ax,ax
c001dede:	66 90                	xchg   ax,ax

c001dee0 <value_37F>:
c001dee0:	7f 03                	jg     c001dee5 <value_37A+0x1>

c001dee2 <value_37E>:
c001dee2:	7e 03                	jle    c001dee7 <x87Detect+0x1>

c001dee4 <value_37A>:
c001dee4:	7a 03                	jp     c001dee9 <x87Detect+0x3>

c001dee6 <x87Detect>:
c001dee6:	b8 01 00 00 00       	mov    eax,0x1
c001deeb:	0f a2                	cpuid  
c001deed:	f7 c2 01 00 00 00    	test   edx,0x1
c001def3:	74 06                	je     c001defb <x87Detect.nox87>
c001def5:	b8 01 00 00 00       	mov    eax,0x1
c001defa:	c3                   	ret    

c001defb <x87Detect.nox87>:
c001defb:	b8 00 00 00 00       	mov    eax,0x0
c001df00:	c3                   	ret    

c001df01 <x87Save>:
c001df01:	9b dd 74 24 08       	fsave  [esp+0x8]
c001df06:	c3                   	ret    

c001df07 <x87Load>:
c001df07:	dd 64 24 08          	frstor [esp+0x8]
c001df0b:	c3                   	ret    

c001df0c <x87Init>:
c001df0c:	9b db e3             	finit  
c001df0f:	0f 20 c0             	mov    eax,cr0
c001df12:	66 25 fb ff          	and    ax,0xfffb
c001df16:	66 0d 22 00          	or     ax,0x22
c001df1a:	0f 22 c0             	mov    cr0,eax
c001df1d:	0f 06                	clts   
c001df1f:	d9 2d e4 de 01 c0    	fldcw  WORD PTR ds:0xc001dee4
c001df25:	c3                   	ret    

c001df26 <x87Close>:
c001df26:	c3                   	ret    
c001df27:	90                   	nop

c001df28 <__do_global_ctors_aux>:
c001df28:	a1 08 f0 01 c0       	mov    eax,ds:0xc001f008
c001df2d:	83 f8 ff             	cmp    eax,0xffffffff
c001df30:	74 1a                	je     c001df4c <__do_global_ctors_aux+0x24>
c001df32:	55                   	push   ebp
c001df33:	89 e5                	mov    ebp,esp
c001df35:	53                   	push   ebx
c001df36:	52                   	push   edx
c001df37:	bb 08 f0 01 c0       	mov    ebx,0xc001f008
c001df3c:	ff d0                	call   eax
c001df3e:	83 eb 04             	sub    ebx,0x4
c001df41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001df43:	83 f8 ff             	cmp    eax,0xffffffff
c001df46:	75 f4                	jne    c001df3c <__do_global_ctors_aux+0x14>
c001df48:	58                   	pop    eax
c001df49:	5b                   	pop    ebx
c001df4a:	5d                   	pop    ebp
c001df4b:	c3                   	ret    
c001df4c:	c3                   	ret    
c001df4d:	66 90                	xchg   ax,ax
c001df4f:	90                   	nop

c001df50 <__divdi3>:
c001df50:	55                   	push   ebp
c001df51:	57                   	push   edi
c001df52:	56                   	push   esi
c001df53:	53                   	push   ebx
c001df54:	83 ec 1c             	sub    esp,0x1c
c001df57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df5f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001df62:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001df66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001df6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df6e:	85 db                	test   ebx,ebx
c001df70:	0f 88 8e 00 00 00    	js     c001e004 <__divdi3+0xb4>
c001df76:	89 dd                	mov    ebp,ebx
c001df78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001df80:	89 d3                	mov    ebx,edx
c001df82:	85 d2                	test   edx,edx
c001df84:	79 0d                	jns    c001df93 <__divdi3+0x43>
c001df86:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001df8a:	f7 d8                	neg    eax
c001df8c:	83 d2 00             	adc    edx,0x0
c001df8f:	f7 da                	neg    edx
c001df91:	89 d3                	mov    ebx,edx
c001df93:	89 c7                	mov    edi,eax
c001df95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001df98:	85 db                	test   ebx,ebx
c001df9a:	75 48                	jne    c001dfe4 <__divdi3+0x94>
c001df9c:	39 ef                	cmp    edi,ebp
c001df9e:	76 24                	jbe    c001dfc4 <__divdi3+0x74>
c001dfa0:	89 ea                	mov    edx,ebp
c001dfa2:	f7 f7                	div    edi
c001dfa4:	89 c1                	mov    ecx,eax
c001dfa6:	31 f6                	xor    esi,esi
c001dfa8:	89 c8                	mov    eax,ecx
c001dfaa:	89 f2                	mov    edx,esi
c001dfac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dfb0:	85 c9                	test   ecx,ecx
c001dfb2:	74 07                	je     c001dfbb <__divdi3+0x6b>
c001dfb4:	f7 d8                	neg    eax
c001dfb6:	83 d2 00             	adc    edx,0x0
c001dfb9:	f7 da                	neg    edx
c001dfbb:	83 c4 1c             	add    esp,0x1c
c001dfbe:	5b                   	pop    ebx
c001dfbf:	5e                   	pop    esi
c001dfc0:	5f                   	pop    edi
c001dfc1:	5d                   	pop    ebp
c001dfc2:	c3                   	ret    
c001dfc3:	90                   	nop
c001dfc4:	85 ff                	test   edi,edi
c001dfc6:	75 0b                	jne    c001dfd3 <__divdi3+0x83>
c001dfc8:	b8 01 00 00 00       	mov    eax,0x1
c001dfcd:	31 d2                	xor    edx,edx
c001dfcf:	f7 f3                	div    ebx
c001dfd1:	89 c7                	mov    edi,eax
c001dfd3:	31 d2                	xor    edx,edx
c001dfd5:	89 e8                	mov    eax,ebp
c001dfd7:	f7 f7                	div    edi
c001dfd9:	89 c6                	mov    esi,eax
c001dfdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dfde:	f7 f7                	div    edi
c001dfe0:	89 c1                	mov    ecx,eax
c001dfe2:	eb c4                	jmp    c001dfa8 <__divdi3+0x58>
c001dfe4:	39 eb                	cmp    ebx,ebp
c001dfe6:	77 3c                	ja     c001e024 <__divdi3+0xd4>
c001dfe8:	0f bd f3             	bsr    esi,ebx
c001dfeb:	83 f6 1f             	xor    esi,0x1f
c001dfee:	75 40                	jne    c001e030 <__divdi3+0xe0>
c001dff0:	39 eb                	cmp    ebx,ebp
c001dff2:	72 09                	jb     c001dffd <__divdi3+0xad>
c001dff4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dff7:	0f 87 97 00 00 00    	ja     c001e094 <__divdi3+0x144>
c001dffd:	b9 01 00 00 00       	mov    ecx,0x1
c001e002:	eb a4                	jmp    c001dfa8 <__divdi3+0x58>
c001e004:	f7 d9                	neg    ecx
c001e006:	83 d3 00             	adc    ebx,0x0
c001e009:	f7 db                	neg    ebx
c001e00b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e00e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e012:	89 dd                	mov    ebp,ebx
c001e014:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e01c:	e9 5f ff ff ff       	jmp    c001df80 <__divdi3+0x30>
c001e021:	8d 76 00             	lea    esi,[esi+0x0]
c001e024:	31 f6                	xor    esi,esi
c001e026:	31 c9                	xor    ecx,ecx
c001e028:	e9 7b ff ff ff       	jmp    c001dfa8 <__divdi3+0x58>
c001e02d:	8d 76 00             	lea    esi,[esi+0x0]
c001e030:	b8 20 00 00 00       	mov    eax,0x20
c001e035:	29 f0                	sub    eax,esi
c001e037:	89 f1                	mov    ecx,esi
c001e039:	d3 e3                	shl    ebx,cl
c001e03b:	89 fa                	mov    edx,edi
c001e03d:	88 c1                	mov    cl,al
c001e03f:	d3 ea                	shr    edx,cl
c001e041:	09 da                	or     edx,ebx
c001e043:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e047:	89 f1                	mov    ecx,esi
c001e049:	d3 e7                	shl    edi,cl
c001e04b:	89 eb                	mov    ebx,ebp
c001e04d:	88 c1                	mov    cl,al
c001e04f:	d3 eb                	shr    ebx,cl
c001e051:	89 f1                	mov    ecx,esi
c001e053:	d3 e5                	shl    ebp,cl
c001e055:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e058:	88 c1                	mov    cl,al
c001e05a:	d3 ea                	shr    edx,cl
c001e05c:	09 d5                	or     ebp,edx
c001e05e:	89 e8                	mov    eax,ebp
c001e060:	89 da                	mov    edx,ebx
c001e062:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e066:	89 d3                	mov    ebx,edx
c001e068:	89 c5                	mov    ebp,eax
c001e06a:	f7 e7                	mul    edi
c001e06c:	39 d3                	cmp    ebx,edx
c001e06e:	72 18                	jb     c001e088 <__divdi3+0x138>
c001e070:	74 0a                	je     c001e07c <__divdi3+0x12c>
c001e072:	89 e9                	mov    ecx,ebp
c001e074:	31 f6                	xor    esi,esi
c001e076:	e9 2d ff ff ff       	jmp    c001dfa8 <__divdi3+0x58>
c001e07b:	90                   	nop
c001e07c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e07f:	89 f1                	mov    ecx,esi
c001e081:	d3 e7                	shl    edi,cl
c001e083:	39 c7                	cmp    edi,eax
c001e085:	73 eb                	jae    c001e072 <__divdi3+0x122>
c001e087:	90                   	nop
c001e088:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e08b:	31 f6                	xor    esi,esi
c001e08d:	e9 16 ff ff ff       	jmp    c001dfa8 <__divdi3+0x58>
c001e092:	66 90                	xchg   ax,ax
c001e094:	31 c9                	xor    ecx,ecx
c001e096:	e9 0d ff ff ff       	jmp    c001dfa8 <__divdi3+0x58>
c001e09b:	90                   	nop

c001e09c <__moddi3>:
c001e09c:	55                   	push   ebp
c001e09d:	57                   	push   edi
c001e09e:	56                   	push   esi
c001e09f:	53                   	push   ebx
c001e0a0:	83 ec 2c             	sub    esp,0x2c
c001e0a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e0a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e0ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e0af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e0b3:	85 db                	test   ebx,ebx
c001e0b5:	0f 88 85 00 00 00    	js     c001e140 <__moddi3+0xa4>
c001e0bb:	89 de                	mov    esi,ebx
c001e0bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e0c5:	89 d7                	mov    edi,edx
c001e0c7:	85 d2                	test   edx,edx
c001e0c9:	79 09                	jns    c001e0d4 <__moddi3+0x38>
c001e0cb:	f7 d8                	neg    eax
c001e0cd:	83 d2 00             	adc    edx,0x0
c001e0d0:	f7 da                	neg    edx
c001e0d2:	89 d7                	mov    edi,edx
c001e0d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0d8:	89 cd                	mov    ebp,ecx
c001e0da:	85 ff                	test   edi,edi
c001e0dc:	75 52                	jne    c001e130 <__moddi3+0x94>
c001e0de:	89 c3                	mov    ebx,eax
c001e0e0:	39 f0                	cmp    eax,esi
c001e0e2:	76 24                	jbe    c001e108 <__moddi3+0x6c>
c001e0e4:	89 c8                	mov    eax,ecx
c001e0e6:	89 f2                	mov    edx,esi
c001e0e8:	f7 f3                	div    ebx
c001e0ea:	89 d6                	mov    esi,edx
c001e0ec:	89 f0                	mov    eax,esi
c001e0ee:	31 d2                	xor    edx,edx
c001e0f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0f4:	85 c9                	test   ecx,ecx
c001e0f6:	74 07                	je     c001e0ff <__moddi3+0x63>
c001e0f8:	f7 d8                	neg    eax
c001e0fa:	83 d2 00             	adc    edx,0x0
c001e0fd:	f7 da                	neg    edx
c001e0ff:	83 c4 2c             	add    esp,0x2c
c001e102:	5b                   	pop    ebx
c001e103:	5e                   	pop    esi
c001e104:	5f                   	pop    edi
c001e105:	5d                   	pop    ebp
c001e106:	c3                   	ret    
c001e107:	90                   	nop
c001e108:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e10c:	85 db                	test   ebx,ebx
c001e10e:	75 0d                	jne    c001e11d <__moddi3+0x81>
c001e110:	b8 01 00 00 00       	mov    eax,0x1
c001e115:	31 d2                	xor    edx,edx
c001e117:	f7 f7                	div    edi
c001e119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e11d:	89 f0                	mov    eax,esi
c001e11f:	31 d2                	xor    edx,edx
c001e121:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e125:	f7 f7                	div    edi
c001e127:	89 e8                	mov    eax,ebp
c001e129:	f7 f7                	div    edi
c001e12b:	89 d6                	mov    esi,edx
c001e12d:	eb bd                	jmp    c001e0ec <__moddi3+0x50>
c001e12f:	90                   	nop
c001e130:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e134:	39 f7                	cmp    edi,esi
c001e136:	76 20                	jbe    c001e158 <__moddi3+0xbc>
c001e138:	89 c8                	mov    eax,ecx
c001e13a:	89 f2                	mov    edx,esi
c001e13c:	eb b2                	jmp    c001e0f0 <__moddi3+0x54>
c001e13e:	66 90                	xchg   ax,ax
c001e140:	f7 d9                	neg    ecx
c001e142:	83 d3 00             	adc    ebx,0x0
c001e145:	f7 db                	neg    ebx
c001e147:	89 de                	mov    esi,ebx
c001e149:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e151:	e9 6f ff ff ff       	jmp    c001e0c5 <__moddi3+0x29>
c001e156:	66 90                	xchg   ax,ax
c001e158:	0f bd c7             	bsr    eax,edi
c001e15b:	83 f0 1f             	xor    eax,0x1f
c001e15e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e162:	75 24                	jne    c001e188 <__moddi3+0xec>
c001e164:	39 f7                	cmp    edi,esi
c001e166:	72 06                	jb     c001e16e <__moddi3+0xd2>
c001e168:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e16c:	77 0c                	ja     c001e17a <__moddi3+0xde>
c001e16e:	89 e9                	mov    ecx,ebp
c001e170:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e174:	19 fe                	sbb    esi,edi
c001e176:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e17a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e17e:	89 f2                	mov    edx,esi
c001e180:	e9 6b ff ff ff       	jmp    c001e0f0 <__moddi3+0x54>
c001e185:	8d 76 00             	lea    esi,[esi+0x0]
c001e188:	b8 20 00 00 00       	mov    eax,0x20
c001e18d:	89 c2                	mov    edx,eax
c001e18f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e193:	29 da                	sub    edx,ebx
c001e195:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e199:	88 d9                	mov    cl,bl
c001e19b:	d3 e7                	shl    edi,cl
c001e19d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1a1:	88 d1                	mov    cl,dl
c001e1a3:	d3 e8                	shr    eax,cl
c001e1a5:	09 c7                	or     edi,eax
c001e1a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e1ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e1af:	89 d8                	mov    eax,ebx
c001e1b1:	88 d9                	mov    cl,bl
c001e1b3:	d3 e7                	shl    edi,cl
c001e1b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e1b9:	89 f3                	mov    ebx,esi
c001e1bb:	88 d1                	mov    cl,dl
c001e1bd:	d3 eb                	shr    ebx,cl
c001e1bf:	89 c7                	mov    edi,eax
c001e1c1:	88 c1                	mov    cl,al
c001e1c3:	d3 e6                	shl    esi,cl
c001e1c5:	89 e8                	mov    eax,ebp
c001e1c7:	88 d1                	mov    cl,dl
c001e1c9:	d3 e8                	shr    eax,cl
c001e1cb:	09 f0                	or     eax,esi
c001e1cd:	89 f9                	mov    ecx,edi
c001e1cf:	d3 e5                	shl    ebp,cl
c001e1d1:	89 da                	mov    edx,ebx
c001e1d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e1d7:	89 d3                	mov    ebx,edx
c001e1d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e1dd:	89 c6                	mov    esi,eax
c001e1df:	89 d1                	mov    ecx,edx
c001e1e1:	39 d3                	cmp    ebx,edx
c001e1e3:	72 27                	jb     c001e20c <__moddi3+0x170>
c001e1e5:	74 21                	je     c001e208 <__moddi3+0x16c>
c001e1e7:	29 f5                	sub    ebp,esi
c001e1e9:	19 cb                	sbb    ebx,ecx
c001e1eb:	89 de                	mov    esi,ebx
c001e1ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e1f1:	d3 e6                	shl    esi,cl
c001e1f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e1f7:	89 f9                	mov    ecx,edi
c001e1f9:	d3 ed                	shr    ebp,cl
c001e1fb:	09 ee                	or     esi,ebp
c001e1fd:	89 f0                	mov    eax,esi
c001e1ff:	d3 eb                	shr    ebx,cl
c001e201:	89 da                	mov    edx,ebx
c001e203:	e9 e8 fe ff ff       	jmp    c001e0f0 <__moddi3+0x54>
c001e208:	39 c5                	cmp    ebp,eax
c001e20a:	73 db                	jae    c001e1e7 <__moddi3+0x14b>
c001e20c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e210:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e214:	89 d1                	mov    ecx,edx
c001e216:	89 c6                	mov    esi,eax
c001e218:	eb cd                	jmp    c001e1e7 <__moddi3+0x14b>
c001e21a:	66 90                	xchg   ax,ax

c001e21c <__udivdi3>:
c001e21c:	55                   	push   ebp
c001e21d:	57                   	push   edi
c001e21e:	56                   	push   esi
c001e21f:	53                   	push   ebx
c001e220:	83 ec 1c             	sub    esp,0x1c
c001e223:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e227:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e22b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e22f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e233:	85 d2                	test   edx,edx
c001e235:	75 41                	jne    c001e278 <__udivdi3+0x5c>
c001e237:	39 f7                	cmp    edi,esi
c001e239:	76 15                	jbe    c001e250 <__udivdi3+0x34>
c001e23b:	89 e8                	mov    eax,ebp
c001e23d:	89 f2                	mov    edx,esi
c001e23f:	f7 f7                	div    edi
c001e241:	31 db                	xor    ebx,ebx
c001e243:	89 da                	mov    edx,ebx
c001e245:	83 c4 1c             	add    esp,0x1c
c001e248:	5b                   	pop    ebx
c001e249:	5e                   	pop    esi
c001e24a:	5f                   	pop    edi
c001e24b:	5d                   	pop    ebp
c001e24c:	c3                   	ret    
c001e24d:	8d 76 00             	lea    esi,[esi+0x0]
c001e250:	89 f9                	mov    ecx,edi
c001e252:	85 ff                	test   edi,edi
c001e254:	75 0b                	jne    c001e261 <__udivdi3+0x45>
c001e256:	b8 01 00 00 00       	mov    eax,0x1
c001e25b:	31 d2                	xor    edx,edx
c001e25d:	f7 f7                	div    edi
c001e25f:	89 c1                	mov    ecx,eax
c001e261:	31 d2                	xor    edx,edx
c001e263:	89 f0                	mov    eax,esi
c001e265:	f7 f1                	div    ecx
c001e267:	89 c3                	mov    ebx,eax
c001e269:	89 e8                	mov    eax,ebp
c001e26b:	f7 f1                	div    ecx
c001e26d:	89 da                	mov    edx,ebx
c001e26f:	83 c4 1c             	add    esp,0x1c
c001e272:	5b                   	pop    ebx
c001e273:	5e                   	pop    esi
c001e274:	5f                   	pop    edi
c001e275:	5d                   	pop    ebp
c001e276:	c3                   	ret    
c001e277:	90                   	nop
c001e278:	39 f2                	cmp    edx,esi
c001e27a:	77 1c                	ja     c001e298 <__udivdi3+0x7c>
c001e27c:	0f bd da             	bsr    ebx,edx
c001e27f:	83 f3 1f             	xor    ebx,0x1f
c001e282:	75 24                	jne    c001e2a8 <__udivdi3+0x8c>
c001e284:	39 f2                	cmp    edx,esi
c001e286:	72 08                	jb     c001e290 <__udivdi3+0x74>
c001e288:	39 ef                	cmp    edi,ebp
c001e28a:	0f 87 84 00 00 00    	ja     c001e314 <__udivdi3+0xf8>
c001e290:	b8 01 00 00 00       	mov    eax,0x1
c001e295:	eb ac                	jmp    c001e243 <__udivdi3+0x27>
c001e297:	90                   	nop
c001e298:	31 db                	xor    ebx,ebx
c001e29a:	31 c0                	xor    eax,eax
c001e29c:	89 da                	mov    edx,ebx
c001e29e:	83 c4 1c             	add    esp,0x1c
c001e2a1:	5b                   	pop    ebx
c001e2a2:	5e                   	pop    esi
c001e2a3:	5f                   	pop    edi
c001e2a4:	5d                   	pop    ebp
c001e2a5:	c3                   	ret    
c001e2a6:	66 90                	xchg   ax,ax
c001e2a8:	b8 20 00 00 00       	mov    eax,0x20
c001e2ad:	29 d8                	sub    eax,ebx
c001e2af:	88 d9                	mov    cl,bl
c001e2b1:	d3 e2                	shl    edx,cl
c001e2b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2b7:	89 fa                	mov    edx,edi
c001e2b9:	88 c1                	mov    cl,al
c001e2bb:	d3 ea                	shr    edx,cl
c001e2bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e2c1:	09 d1                	or     ecx,edx
c001e2c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e2c7:	88 d9                	mov    cl,bl
c001e2c9:	d3 e7                	shl    edi,cl
c001e2cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e2cf:	89 f7                	mov    edi,esi
c001e2d1:	88 c1                	mov    cl,al
c001e2d3:	d3 ef                	shr    edi,cl
c001e2d5:	88 d9                	mov    cl,bl
c001e2d7:	d3 e6                	shl    esi,cl
c001e2d9:	89 ea                	mov    edx,ebp
c001e2db:	88 c1                	mov    cl,al
c001e2dd:	d3 ea                	shr    edx,cl
c001e2df:	09 d6                	or     esi,edx
c001e2e1:	89 f0                	mov    eax,esi
c001e2e3:	89 fa                	mov    edx,edi
c001e2e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e2e9:	89 d7                	mov    edi,edx
c001e2eb:	89 c6                	mov    esi,eax
c001e2ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2f1:	39 d7                	cmp    edi,edx
c001e2f3:	72 13                	jb     c001e308 <__udivdi3+0xec>
c001e2f5:	74 09                	je     c001e300 <__udivdi3+0xe4>
c001e2f7:	89 f0                	mov    eax,esi
c001e2f9:	31 db                	xor    ebx,ebx
c001e2fb:	e9 43 ff ff ff       	jmp    c001e243 <__udivdi3+0x27>
c001e300:	88 d9                	mov    cl,bl
c001e302:	d3 e5                	shl    ebp,cl
c001e304:	39 c5                	cmp    ebp,eax
c001e306:	73 ef                	jae    c001e2f7 <__udivdi3+0xdb>
c001e308:	8d 46 ff             	lea    eax,[esi-0x1]
c001e30b:	31 db                	xor    ebx,ebx
c001e30d:	e9 31 ff ff ff       	jmp    c001e243 <__udivdi3+0x27>
c001e312:	66 90                	xchg   ax,ax
c001e314:	31 c0                	xor    eax,eax
c001e316:	e9 28 ff ff ff       	jmp    c001e243 <__udivdi3+0x27>
c001e31b:	90                   	nop

c001e31c <__umoddi3>:
c001e31c:	55                   	push   ebp
c001e31d:	57                   	push   edi
c001e31e:	56                   	push   esi
c001e31f:	53                   	push   ebx
c001e320:	83 ec 1c             	sub    esp,0x1c
c001e323:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e327:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e32b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e32f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e333:	89 da                	mov    edx,ebx
c001e335:	85 c0                	test   eax,eax
c001e337:	75 37                	jne    c001e370 <__umoddi3+0x54>
c001e339:	39 df                	cmp    edi,ebx
c001e33b:	76 13                	jbe    c001e350 <__umoddi3+0x34>
c001e33d:	89 f0                	mov    eax,esi
c001e33f:	f7 f7                	div    edi
c001e341:	89 d0                	mov    eax,edx
c001e343:	31 d2                	xor    edx,edx
c001e345:	83 c4 1c             	add    esp,0x1c
c001e348:	5b                   	pop    ebx
c001e349:	5e                   	pop    esi
c001e34a:	5f                   	pop    edi
c001e34b:	5d                   	pop    ebp
c001e34c:	c3                   	ret    
c001e34d:	8d 76 00             	lea    esi,[esi+0x0]
c001e350:	89 fd                	mov    ebp,edi
c001e352:	85 ff                	test   edi,edi
c001e354:	75 0b                	jne    c001e361 <__umoddi3+0x45>
c001e356:	b8 01 00 00 00       	mov    eax,0x1
c001e35b:	31 d2                	xor    edx,edx
c001e35d:	f7 f7                	div    edi
c001e35f:	89 c5                	mov    ebp,eax
c001e361:	89 d8                	mov    eax,ebx
c001e363:	31 d2                	xor    edx,edx
c001e365:	f7 f5                	div    ebp
c001e367:	89 f0                	mov    eax,esi
c001e369:	f7 f5                	div    ebp
c001e36b:	89 d0                	mov    eax,edx
c001e36d:	eb d4                	jmp    c001e343 <__umoddi3+0x27>
c001e36f:	90                   	nop
c001e370:	89 f1                	mov    ecx,esi
c001e372:	39 d8                	cmp    eax,ebx
c001e374:	76 0a                	jbe    c001e380 <__umoddi3+0x64>
c001e376:	89 f0                	mov    eax,esi
c001e378:	83 c4 1c             	add    esp,0x1c
c001e37b:	5b                   	pop    ebx
c001e37c:	5e                   	pop    esi
c001e37d:	5f                   	pop    edi
c001e37e:	5d                   	pop    ebp
c001e37f:	c3                   	ret    
c001e380:	0f bd e8             	bsr    ebp,eax
c001e383:	83 f5 1f             	xor    ebp,0x1f
c001e386:	75 1c                	jne    c001e3a4 <__umoddi3+0x88>
c001e388:	39 d8                	cmp    eax,ebx
c001e38a:	72 04                	jb     c001e390 <__umoddi3+0x74>
c001e38c:	39 f7                	cmp    edi,esi
c001e38e:	77 08                	ja     c001e398 <__umoddi3+0x7c>
c001e390:	89 da                	mov    edx,ebx
c001e392:	29 fe                	sub    esi,edi
c001e394:	19 c2                	sbb    edx,eax
c001e396:	89 f1                	mov    ecx,esi
c001e398:	89 c8                	mov    eax,ecx
c001e39a:	83 c4 1c             	add    esp,0x1c
c001e39d:	5b                   	pop    ebx
c001e39e:	5e                   	pop    esi
c001e39f:	5f                   	pop    edi
c001e3a0:	5d                   	pop    ebp
c001e3a1:	c3                   	ret    
c001e3a2:	66 90                	xchg   ax,ax
c001e3a4:	ba 20 00 00 00       	mov    edx,0x20
c001e3a9:	29 ea                	sub    edx,ebp
c001e3ab:	89 e9                	mov    ecx,ebp
c001e3ad:	d3 e0                	shl    eax,cl
c001e3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3b3:	89 f8                	mov    eax,edi
c001e3b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e3b9:	88 d1                	mov    cl,dl
c001e3bb:	d3 e8                	shr    eax,cl
c001e3bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3c1:	09 c1                	or     ecx,eax
c001e3c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3c7:	89 e9                	mov    ecx,ebp
c001e3c9:	d3 e7                	shl    edi,cl
c001e3cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3cf:	89 d8                	mov    eax,ebx
c001e3d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e3d5:	88 d1                	mov    cl,dl
c001e3d7:	d3 e8                	shr    eax,cl
c001e3d9:	89 c7                	mov    edi,eax
c001e3db:	89 e9                	mov    ecx,ebp
c001e3dd:	d3 e3                	shl    ebx,cl
c001e3df:	89 f0                	mov    eax,esi
c001e3e1:	88 d1                	mov    cl,dl
c001e3e3:	d3 e8                	shr    eax,cl
c001e3e5:	09 d8                	or     eax,ebx
c001e3e7:	89 e9                	mov    ecx,ebp
c001e3e9:	d3 e6                	shl    esi,cl
c001e3eb:	89 f3                	mov    ebx,esi
c001e3ed:	89 fa                	mov    edx,edi
c001e3ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e3f3:	89 d1                	mov    ecx,edx
c001e3f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3f9:	89 c6                	mov    esi,eax
c001e3fb:	89 d7                	mov    edi,edx
c001e3fd:	39 d1                	cmp    ecx,edx
c001e3ff:	72 27                	jb     c001e428 <__umoddi3+0x10c>
c001e401:	74 21                	je     c001e424 <__umoddi3+0x108>
c001e403:	89 ca                	mov    edx,ecx
c001e405:	29 f3                	sub    ebx,esi
c001e407:	19 fa                	sbb    edx,edi
c001e409:	89 d0                	mov    eax,edx
c001e40b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e40f:	d3 e0                	shl    eax,cl
c001e411:	89 e9                	mov    ecx,ebp
c001e413:	d3 eb                	shr    ebx,cl
c001e415:	09 d8                	or     eax,ebx
c001e417:	d3 ea                	shr    edx,cl
c001e419:	83 c4 1c             	add    esp,0x1c
c001e41c:	5b                   	pop    ebx
c001e41d:	5e                   	pop    esi
c001e41e:	5f                   	pop    edi
c001e41f:	5d                   	pop    ebp
c001e420:	c3                   	ret    
c001e421:	8d 76 00             	lea    esi,[esi+0x0]
c001e424:	39 c3                	cmp    ebx,eax
c001e426:	73 db                	jae    c001e403 <__umoddi3+0xe7>
c001e428:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e42c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e430:	89 d7                	mov    edi,edx
c001e432:	89 c6                	mov    esi,eax
c001e434:	eb cd                	jmp    c001e403 <__umoddi3+0xe7>
c001e436:	66 90                	xchg   ax,ax
c001e438:	66 90                	xchg   ax,ax
c001e43a:	66 90                	xchg   ax,ax
c001e43c:	66 90                	xchg   ax,ax
c001e43e:	66 90                	xchg   ax,ax

c001e440 <fabs>:
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e447:	89 04 24             	mov    DWORD PTR [esp],eax
c001e44a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e44e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e453:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e457:	dd 04 24             	fld    QWORD PTR [esp]
c001e45a:	83 c4 0c             	add    esp,0xc
c001e45d:	c3                   	ret    
c001e45e:	66 90                	xchg   ax,ax

c001e460 <lrint>:
c001e460:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e464:	83 ec 04             	sub    esp,0x4
c001e467:	db 1c 24             	fistp  DWORD PTR [esp]
c001e46a:	58                   	pop    eax
c001e46b:	c3                   	ret    

c001e46c <lrintf>:
c001e46c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e470:	83 ec 04             	sub    esp,0x4
c001e473:	db 1c 24             	fistp  DWORD PTR [esp]
c001e476:	58                   	pop    eax
c001e477:	c3                   	ret    

Disassembly of section .init:

c001e478 <_init>:
c001e478:	55                   	push   ebp
c001e479:	89 e5                	mov    ebp,esp
c001e47b:	e8 98 1c fe ff       	call   c0000118 <frame_dummy>
c001e480:	e8 a3 fa ff ff       	call   c001df28 <__do_global_ctors_aux>
c001e485:	5d                   	pop    ebp
c001e486:	c3                   	ret    

Disassembly of section .fini:

c001e487 <_fini>:
c001e487:	55                   	push   ebp
c001e488:	89 e5                	mov    ebp,esp
c001e48a:	e8 19 1c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e48f:	5d                   	pop    ebp
c001e490:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e492 <Computer::~Computer()>:
c001e492:	83 ec 0c             	sub    esp,0xc
c001e495:	ba 58 fe 01 c0       	mov    edx,0xc001fe58
c001e49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49e:	89 10                	mov    DWORD PTR [eax],edx
c001e4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a4:	83 ec 0c             	sub    esp,0xc
c001e4a7:	50                   	push   eax
c001e4a8:	e8 c5 1a ff ff       	call   c000ff72 <Device::~Device()>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	90                   	nop
c001e4b1:	83 c4 0c             	add    esp,0xc
c001e4b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e4b6 <Computer::~Computer()>:
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4c0:	e8 cd ff ff ff       	call   c001e492 <Computer::~Computer()>
c001e4c5:	83 c4 10             	add    esp,0x10
c001e4c8:	83 ec 08             	sub    esp,0x8
c001e4cb:	68 ec 01 00 00       	push   0x1ec
c001e4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4d4:	e8 0c 07 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	83 c4 0c             	add    esp,0xc
c001e4df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e4e0 <idleCommon()>:
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	e8 88 93 ff ff       	call   c0017870 <lockScheduler()>
c001e4e8:	e8 b7 96 ff ff       	call   c0017ba4 <schedule()>
c001e4ed:	83 c4 0c             	add    esp,0xc
c001e4f0:	e9 7d 93 ff ff       	jmp    c0017872 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e4f5 <CPU::readCR3()>:
c001e4f5:	83 ec 10             	sub    esp,0x10
c001e4f8:	0f 20 d8             	mov    eax,cr3
c001e4fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e503:	83 c4 10             	add    esp,0x10
c001e506:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e507 <CPU::writeCR3(unsigned long)>:
c001e507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e50b:	0f 22 d8             	mov    cr3,eax
c001e50e:	90                   	nop
c001e50f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e510 <LinkedList<UnixFile>::~LinkedList()>:
c001e510:	90                   	nop
c001e511:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e512 <LinkedList<UnixFile>::LinkedList()>:
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e519:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e523:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e52e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e539:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e543:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e555:	83 ec 0c             	sub    esp,0xc
c001e558:	68 15 01 02 c0       	push   0xc0020115
c001e55d:	e8 63 07 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001e562:	83 c4 10             	add    esp,0x10
c001e565:	90                   	nop
c001e566:	83 c4 0c             	add    esp,0xc
c001e569:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e56a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e56a:	83 ec 0c             	sub    esp,0xc
c001e56d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e572:	75 10                	jne    c001e584 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e574:	83 ec 0c             	sub    esp,0xc
c001e577:	68 30 01 02 c0       	push   0xc0020130
c001e57c:	e8 d9 63 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e581:	83 c4 10             	add    esp,0x10
c001e584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e588:	8b 00                	mov    eax,DWORD PTR [eax]
c001e58a:	85 c0                	test   eax,eax
c001e58c:	74 34                	je     c001e5c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e595:	85 c0                	test   eax,eax
c001e597:	74 29                	je     c001e5c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5c0:	eb 65                	jmp    c001e627 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c8:	85 c0                	test   eax,eax
c001e5ca:	75 4b                	jne    c001e617 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5d3:	85 c0                	test   eax,eax
c001e5d5:	75 40                	jne    c001e617 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5df:	89 10                	mov    DWORD PTR [eax],edx
c001e5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e601:	85 c0                	test   eax,eax
c001e603:	74 22                	je     c001e627 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e605:	83 ec 0c             	sub    esp,0xc
c001e608:	68 52 01 02 c0       	push   0xc0020152
c001e60d:	e8 48 63 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e612:	83 c4 10             	add    esp,0x10
c001e615:	eb 10                	jmp    c001e627 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e617:	83 ec 0c             	sub    esp,0xc
c001e61a:	68 5c 01 02 c0       	push   0xc002015c
c001e61f:	e8 36 63 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e62b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e62e:	8d 50 01             	lea    edx,[eax+0x1]
c001e631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e635:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e638:	90                   	nop
c001e639:	83 c4 0c             	add    esp,0xc
c001e63c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e63e <LinkedList<UnixFile>::getFirstElement()>:
c001e63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e642:	8b 00                	mov    eax,DWORD PTR [eax]
c001e644:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e646 <LinkedList<UnixFile>::removeFirst()>:
c001e646:	83 ec 0c             	sub    esp,0xc
c001e649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e64d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e64f:	85 c0                	test   eax,eax
c001e651:	75 12                	jne    c001e665 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e653:	83 ec 0c             	sub    esp,0xc
c001e656:	68 68 01 02 c0       	push   0xc0020168
c001e65b:	e8 fa 62 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	eb 7e                	jmp    c001e6e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e66c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e66f:	85 c0                	test   eax,eax
c001e671:	74 10                	je     c001e683 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e673:	83 ec 0c             	sub    esp,0xc
c001e676:	68 b3 01 02 c0       	push   0xc00201b3
c001e67b:	e8 da 62 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e680:	83 c4 10             	add    esp,0x10
c001e683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e687:	8b 00                	mov    eax,DWORD PTR [eax]
c001e689:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e68c:	85 c0                	test   eax,eax
c001e68e:	75 33                	jne    c001e6c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e694:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6ac:	83 f8 01             	cmp    eax,0x1
c001e6af:	74 21                	je     c001e6d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e6b1:	83 ec 0c             	sub    esp,0xc
c001e6b4:	68 8c 01 02 c0       	push   0xc002018c
c001e6b9:	e8 9c 62 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	eb 0f                	jmp    c001e6d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d0:	89 10                	mov    DWORD PTR [eax],edx
c001e6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6d9:	8d 50 ff             	lea    edx,[eax-0x1]
c001e6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6e3:	83 c4 0c             	add    esp,0xc
c001e6e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e6e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e6e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e6f0 <DriverlessDevice::~DriverlessDevice()>:
c001e6f0:	ba 24 08 02 c0       	mov    edx,0xc0020824
c001e6f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f9:	89 10                	mov    DWORD PTR [eax],edx
c001e6fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ff:	50                   	push   eax
c001e700:	e8 6d 18 ff ff       	call   c000ff72 <Device::~Device()>
c001e705:	83 c4 04             	add    esp,0x4
c001e708:	90                   	nop
c001e709:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e70a <DriverlessDevice::~DriverlessDevice()>:
c001e70a:	83 ec 0c             	sub    esp,0xc
c001e70d:	83 ec 0c             	sub    esp,0xc
c001e710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e714:	e8 d7 ff ff ff       	call   c001e6f0 <DriverlessDevice::~DriverlessDevice()>
c001e719:	83 c4 10             	add    esp,0x10
c001e71c:	83 ec 08             	sub    esp,0x8
c001e71f:	68 58 01 00 00       	push   0x158
c001e724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e728:	e8 b8 04 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001e72d:	83 c4 10             	add    esp,0x10
c001e730:	83 c4 0c             	add    esp,0xc
c001e733:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e734 <LinkedList<Device>::addElement(Device*)>:
c001e734:	83 ec 0c             	sub    esp,0xc
c001e737:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e73c:	75 10                	jne    c001e74e <LinkedList<Device>::addElement(Device*)+0x1a>
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	68 30 01 02 c0       	push   0xc0020130
c001e746:	e8 0f 62 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e752:	8b 00                	mov    eax,DWORD PTR [eax]
c001e754:	85 c0                	test   eax,eax
c001e756:	74 3a                	je     c001e792 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e75f:	85 c0                	test   eax,eax
c001e761:	74 2f                	je     c001e792 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e76a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e76e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e778:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e77c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e786:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e790:	eb 68                	jmp    c001e7fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e796:	8b 00                	mov    eax,DWORD PTR [eax]
c001e798:	85 c0                	test   eax,eax
c001e79a:	75 4e                	jne    c001e7ea <LinkedList<Device>::addElement(Device*)+0xb6>
c001e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7a3:	85 c0                	test   eax,eax
c001e7a5:	75 43                	jne    c001e7ea <LinkedList<Device>::addElement(Device*)+0xb6>
c001e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7af:	89 10                	mov    DWORD PTR [eax],edx
c001e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7c3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7d4:	85 c0                	test   eax,eax
c001e7d6:	74 22                	je     c001e7fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	68 52 01 02 c0       	push   0xc0020152
c001e7e0:	e8 75 61 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	eb 10                	jmp    c001e7fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e7ea:	83 ec 0c             	sub    esp,0xc
c001e7ed:	68 5c 01 02 c0       	push   0xc002015c
c001e7f2:	e8 63 61 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e7f7:	83 c4 10             	add    esp,0x10
c001e7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e801:	8d 50 01             	lea    edx,[eax+0x1]
c001e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e808:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e80b:	90                   	nop
c001e80c:	83 c4 0c             	add    esp,0xc
c001e80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e810 <LinkedList<Device>::LinkedList()>:
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e817:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e821:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e837:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e841:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e853:	83 ec 0c             	sub    esp,0xc
c001e856:	68 15 01 02 c0       	push   0xc0020115
c001e85b:	e8 65 04 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001e860:	83 c4 10             	add    esp,0x10
c001e863:	90                   	nop
c001e864:	83 c4 0c             	add    esp,0xc
c001e867:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e868 <CPU::readCR0()>:
c001e868:	83 ec 10             	sub    esp,0x10
c001e86b:	0f 20 c0             	mov    eax,cr0
c001e86e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e876:	83 c4 10             	add    esp,0x10
c001e879:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001e87a <CPU::writeCR0(unsigned long)>:
c001e87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87e:	0f 22 c0             	mov    cr0,eax
c001e881:	90                   	nop
c001e882:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e883 <CPU::readDR0()>:
c001e883:	83 ec 10             	sub    esp,0x10
c001e886:	0f 21 c0             	mov    eax,db0
c001e889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e88d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e891:	83 c4 10             	add    esp,0x10
c001e894:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e895 <CPU::readDR1()>:
c001e895:	83 ec 10             	sub    esp,0x10
c001e898:	0f 21 c8             	mov    eax,db1
c001e89b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001e8a7 <CPU::readDR2()>:
c001e8a7:	83 ec 10             	sub    esp,0x10
c001e8aa:	0f 21 d0             	mov    eax,db2
c001e8ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001e8b9 <CPU::readDR3()>:
c001e8b9:	83 ec 10             	sub    esp,0x10
c001e8bc:	0f 21 d8             	mov    eax,db3
c001e8bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8c7:	83 c4 10             	add    esp,0x10
c001e8ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001e8cb <CPU::readDR6()>:
c001e8cb:	83 ec 10             	sub    esp,0x10
c001e8ce:	0f 21 f0             	mov    eax,db6
c001e8d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8d9:	83 c4 10             	add    esp,0x10
c001e8dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001e8dd <CPU::readDR7()>:
c001e8dd:	83 ec 10             	sub    esp,0x10
c001e8e0:	0f 21 f8             	mov    eax,db7
c001e8e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e8f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e8f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8fe:	85 c0                	test   eax,eax
c001e900:	75 0e                	jne    c001e910 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e909:	85 c0                	test   eax,eax
c001e90b:	75 03                	jne    c001e910 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e90d:	b0 01                	mov    al,0x1
c001e90f:	c3                   	ret    
c001e910:	b0 00                	mov    al,0x0
c001e912:	90                   	nop
c001e913:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e914 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e914:	83 ec 0c             	sub    esp,0xc
c001e917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e91d:	85 c0                	test   eax,eax
c001e91f:	75 15                	jne    c001e936 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e921:	83 ec 0c             	sub    esp,0xc
c001e924:	68 68 01 02 c0       	push   0xc0020168
c001e929:	e8 2c 60 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e92e:	83 c4 10             	add    esp,0x10
c001e931:	e9 88 00 00 00       	jmp    c001e9be <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e93d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e940:	85 c0                	test   eax,eax
c001e942:	0f 95 c0             	setne  al
c001e945:	84 c0                	test   al,al
c001e947:	74 10                	je     c001e959 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	68 b3 01 02 c0       	push   0xc00201b3
c001e951:	e8 04 60 ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e956:	83 c4 10             	add    esp,0x10
c001e959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e962:	85 c0                	test   eax,eax
c001e964:	0f 94 c0             	sete   al
c001e967:	84 c0                	test   al,al
c001e969:	74 33                	je     c001e99e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e979:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e987:	83 f8 01             	cmp    eax,0x1
c001e98a:	74 21                	je     c001e9ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	68 8c 01 02 c0       	push   0xc002018c
c001e994:	e8 c1 5f ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	eb 0f                	jmp    c001e9ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	89 10                	mov    DWORD PTR [eax],edx
c001e9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9b4:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9be:	83 c4 0c             	add    esp,0xc
c001e9c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e9c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e9ca:	75 10                	jne    c001e9dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e9cc:	83 ec 0c             	sub    esp,0xc
c001e9cf:	68 30 01 02 c0       	push   0xc0020130
c001e9d4:	e8 81 5f ff ff       	call   c001495a <Krnl::panic(char const*)>
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e2:	85 c0                	test   eax,eax
c001e9e4:	74 34                	je     c001ea1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9ed:	85 c0                	test   eax,eax
c001e9ef:	74 29                	je     c001ea1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea18:	eb 65                	jmp    c001ea7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea20:	85 c0                	test   eax,eax
c001ea22:	75 4b                	jne    c001ea6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ea24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea2b:	85 c0                	test   eax,eax
c001ea2d:	75 40                	jne    c001ea6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea37:	89 10                	mov    DWORD PTR [eax],edx
c001ea39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea4b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea59:	85 c0                	test   eax,eax
c001ea5b:	74 22                	je     c001ea7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea5d:	83 ec 0c             	sub    esp,0xc
c001ea60:	68 52 01 02 c0       	push   0xc0020152
c001ea65:	e8 f0 5e ff ff       	call   c001495a <Krnl::panic(char const*)>
c001ea6a:	83 c4 10             	add    esp,0x10
c001ea6d:	eb 10                	jmp    c001ea7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	68 5c 01 02 c0       	push   0xc002015c
c001ea77:	e8 de 5e ff ff       	call   c001495a <Krnl::panic(char const*)>
c001ea7c:	83 c4 10             	add    esp,0x10
c001ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea86:	8d 50 01             	lea    edx,[eax+0x1]
c001ea89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea90:	90                   	nop
c001ea91:	83 c4 0c             	add    esp,0xc
c001ea94:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ea96 <ACPI::~ACPI()>:
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	ba b0 0f 02 c0       	mov    edx,0xc0020fb0
c001ea9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa2:	89 10                	mov    DWORD PTR [eax],edx
c001eaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	50                   	push   eax
c001eaac:	e8 c1 14 ff ff       	call   c000ff72 <Device::~Device()>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	90                   	nop
c001eab5:	83 c4 0c             	add    esp,0xc
c001eab8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eaba <ACPI::~ACPI()>:
c001eaba:	83 ec 0c             	sub    esp,0xc
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac4:	e8 cd ff ff ff       	call   c001ea96 <ACPI::~ACPI()>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	83 ec 08             	sub    esp,0x8
c001eacf:	68 68 22 00 00       	push   0x2268
c001ead4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead8:	e8 08 01 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	83 c4 0c             	add    esp,0xc
c001eae3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eae4 <CPU::~CPU()>:
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	ba 00 12 02 c0       	mov    edx,0xc0021200
c001eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf0:	89 10                	mov    DWORD PTR [eax],edx
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	50                   	push   eax
c001eafa:	e8 73 14 ff ff       	call   c000ff72 <Device::~Device()>
c001eaff:	83 c4 10             	add    esp,0x10
c001eb02:	90                   	nop
c001eb03:	83 c4 0c             	add    esp,0xc
c001eb06:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eb08 <CPU::~CPU()>:
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	83 ec 0c             	sub    esp,0xc
c001eb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb12:	e8 cd ff ff ff       	call   c001eae4 <CPU::~CPU()>
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	83 ec 08             	sub    esp,0x8
c001eb1d:	68 98 11 00 00       	push   0x1198
c001eb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb26:	e8 ba 00 ff ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001eb2b:	83 c4 10             	add    esp,0x10
c001eb2e:	83 c4 0c             	add    esp,0xc
c001eb31:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001eb32 <CPU::readCR4()>:
c001eb32:	83 ec 10             	sub    esp,0x10
c001eb35:	0f 20 e0             	mov    eax,cr4
c001eb38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb40:	83 c4 10             	add    esp,0x10
c001eb43:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001eb44 <CPU::writeDR7(unsigned long)>:
c001eb44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb48:	0f 23 f8             	mov    db7,eax
c001eb4b:	90                   	nop
c001eb4c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001eb4d <CPU::writeCR4(unsigned long)>:
c001eb4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb51:	0f 22 e0             	mov    cr4,eax
c001eb54:	90                   	nop
c001eb55:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001eb56 <CPU::readCR2()>:
c001eb56:	83 ec 10             	sub    esp,0x10
c001eb59:	0f 20 d0             	mov    eax,cr2
c001eb5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb64:	83 c4 10             	add    esp,0x10
c001eb67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eb68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eb68:	90                   	nop
c001eb69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eb6a <ThreadControlBlock::ThreadControlBlock()>:
c001eb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eb80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb84:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb8f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001eb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb9a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001eba6:	90                   	nop
c001eba7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eba8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebeb:	83 ec 0c             	sub    esp,0xc
c001ebee:	68 15 01 02 c0       	push   0xc0020115
c001ebf3:	e8 cd 00 ff ff       	call   c000ecc5 <Dbg::kprintf(char const*, ...)>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	90                   	nop
c001ebfc:	83 c4 0c             	add    esp,0xc
c001ebff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec07:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ec08 <PCI::~PCI()>:
c001ec08:	83 ec 0c             	sub    esp,0xc
c001ec0b:	ba f8 1e 02 c0       	mov    edx,0xc0021ef8
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	89 10                	mov    DWORD PTR [eax],edx
c001ec16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1a:	83 ec 0c             	sub    esp,0xc
c001ec1d:	50                   	push   eax
c001ec1e:	e8 5f 0d ff ff       	call   c000f982 <Bus::~Bus()>
c001ec23:	83 c4 10             	add    esp,0x10
c001ec26:	90                   	nop
c001ec27:	83 c4 0c             	add    esp,0xc
c001ec2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ec2c <PCI::~PCI()>:
c001ec2c:	83 ec 0c             	sub    esp,0xc
c001ec2f:	83 ec 0c             	sub    esp,0xc
c001ec32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec36:	e8 cd ff ff ff       	call   c001ec08 <PCI::~PCI()>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	83 ec 08             	sub    esp,0x8
c001ec41:	68 58 01 00 00       	push   0x158
c001ec46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec4a:	e8 96 ff fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ec4f:	83 c4 10             	add    esp,0x10
c001ec52:	83 c4 0c             	add    esp,0xc
c001ec55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ec56 <IDE::~IDE()>:
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	ba 5c 21 02 c0       	mov    edx,0xc002215c
c001ec5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec62:	89 10                	mov    DWORD PTR [eax],edx
c001ec64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	50                   	push   eax
c001ec6c:	e8 17 18 ff ff       	call   c0010488 <HardDiskController::~HardDiskController()>
c001ec71:	83 c4 10             	add    esp,0x10
c001ec74:	90                   	nop
c001ec75:	83 c4 0c             	add    esp,0xc
c001ec78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ec7a <IDE::~IDE()>:
c001ec7a:	83 ec 0c             	sub    esp,0xc
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec84:	e8 cd ff ff ff       	call   c001ec56 <IDE::~IDE()>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	83 ec 08             	sub    esp,0x8
c001ec8f:	68 70 02 00 00       	push   0x270
c001ec94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec98:	e8 48 ff fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	83 c4 0c             	add    esp,0xc
c001eca3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001eca4 <ATA::~ATA()>:
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c001ecac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb0:	89 10                	mov    DWORD PTR [eax],edx
c001ecb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb6:	83 ec 0c             	sub    esp,0xc
c001ecb9:	50                   	push   eax
c001ecba:	e8 a7 18 ff ff       	call   c0010566 <PhysicalDisk::~PhysicalDisk()>
c001ecbf:	83 c4 10             	add    esp,0x10
c001ecc2:	90                   	nop
c001ecc3:	83 c4 0c             	add    esp,0xc
c001ecc6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ecc8 <ATA::~ATA()>:
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecd2:	e8 cd ff ff ff       	call   c001eca4 <ATA::~ATA()>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	83 ec 08             	sub    esp,0x8
c001ecdd:	68 7c 01 00 00       	push   0x17c
c001ece2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece6:	e8 fa fe fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	83 c4 0c             	add    esp,0xc
c001ecf1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ecf2 <ATAPI::~ATAPI()>:
c001ecf2:	83 ec 0c             	sub    esp,0xc
c001ecf5:	ba 18 22 02 c0       	mov    edx,0xc0022218
c001ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfe:	89 10                	mov    DWORD PTR [eax],edx
c001ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed04:	83 ec 0c             	sub    esp,0xc
c001ed07:	50                   	push   eax
c001ed08:	e8 59 18 ff ff       	call   c0010566 <PhysicalDisk::~PhysicalDisk()>
c001ed0d:	83 c4 10             	add    esp,0x10
c001ed10:	90                   	nop
c001ed11:	83 c4 0c             	add    esp,0xc
c001ed14:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ed16 <ATAPI::~ATAPI()>:
c001ed16:	83 ec 0c             	sub    esp,0xc
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed20:	e8 cd ff ff ff       	call   c001ecf2 <ATAPI::~ATAPI()>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	83 ec 08             	sub    esp,0x8
c001ed2b:	68 80 01 00 00       	push   0x180
c001ed30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed34:	e8 ac fe fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	83 c4 0c             	add    esp,0xc
c001ed3f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ed40 <AVX::~AVX()>:
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001ed48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4c:	89 10                	mov    DWORD PTR [eax],edx
c001ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed52:	83 ec 0c             	sub    esp,0xc
c001ed55:	50                   	push   eax
c001ed56:	e8 8f 18 ff ff       	call   c00105ea <FPU::~FPU()>
c001ed5b:	83 c4 10             	add    esp,0x10
c001ed5e:	90                   	nop
c001ed5f:	83 c4 0c             	add    esp,0xc
c001ed62:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ed64 <AVX::~AVX()>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	83 ec 0c             	sub    esp,0xc
c001ed6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6e:	e8 cd ff ff ff       	call   c001ed40 <AVX::~AVX()>
c001ed73:	83 c4 10             	add    esp,0x10
c001ed76:	83 ec 08             	sub    esp,0x8
c001ed79:	68 58 01 00 00       	push   0x158
c001ed7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed82:	e8 5e fe fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	83 c4 0c             	add    esp,0xc
c001ed8d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ed8e <MMX::~MMX()>:
c001ed8e:	83 ec 0c             	sub    esp,0xc
c001ed91:	ba 94 22 02 c0       	mov    edx,0xc0022294
c001ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9a:	89 10                	mov    DWORD PTR [eax],edx
c001ed9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	50                   	push   eax
c001eda4:	e8 41 18 ff ff       	call   c00105ea <FPU::~FPU()>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	90                   	nop
c001edad:	83 c4 0c             	add    esp,0xc
c001edb0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001edb2 <MMX::~MMX()>:
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	83 ec 0c             	sub    esp,0xc
c001edb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edbc:	e8 cd ff ff ff       	call   c001ed8e <MMX::~MMX()>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	83 ec 08             	sub    esp,0x8
c001edc7:	68 58 01 00 00       	push   0x158
c001edcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edd0:	e8 10 fe fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001edd5:	83 c4 10             	add    esp,0x10
c001edd8:	83 c4 0c             	add    esp,0xc
c001eddb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001eddc <SSE::~SSE()>:
c001eddc:	83 ec 0c             	sub    esp,0xc
c001eddf:	ba d4 22 02 c0       	mov    edx,0xc00222d4
c001ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede8:	89 10                	mov    DWORD PTR [eax],edx
c001edea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edee:	83 ec 0c             	sub    esp,0xc
c001edf1:	50                   	push   eax
c001edf2:	e8 f3 17 ff ff       	call   c00105ea <FPU::~FPU()>
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	90                   	nop
c001edfb:	83 c4 0c             	add    esp,0xc
c001edfe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ee00 <SSE::~SSE()>:
c001ee00:	83 ec 0c             	sub    esp,0xc
c001ee03:	83 ec 0c             	sub    esp,0xc
c001ee06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0a:	e8 cd ff ff ff       	call   c001eddc <SSE::~SSE()>
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	83 ec 08             	sub    esp,0x8
c001ee15:	68 58 01 00 00       	push   0x158
c001ee1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee1e:	e8 c2 fd fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ee23:	83 c4 10             	add    esp,0x10
c001ee26:	83 c4 0c             	add    esp,0xc
c001ee29:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ee2a <x87::~x87()>:
c001ee2a:	83 ec 0c             	sub    esp,0xc
c001ee2d:	ba 14 23 02 c0       	mov    edx,0xc0022314
c001ee32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee36:	89 10                	mov    DWORD PTR [eax],edx
c001ee38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3c:	83 ec 0c             	sub    esp,0xc
c001ee3f:	50                   	push   eax
c001ee40:	e8 a5 17 ff ff       	call   c00105ea <FPU::~FPU()>
c001ee45:	83 c4 10             	add    esp,0x10
c001ee48:	90                   	nop
c001ee49:	83 c4 0c             	add    esp,0xc
c001ee4c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ee4e <x87::~x87()>:
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	83 ec 0c             	sub    esp,0xc
c001ee54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee58:	e8 cd ff ff ff       	call   c001ee2a <x87::~x87()>
c001ee5d:	83 c4 10             	add    esp,0x10
c001ee60:	83 ec 08             	sub    esp,0x8
c001ee63:	68 58 01 00 00       	push   0x158
c001ee68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee6c:	e8 74 fd fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ee71:	83 c4 10             	add    esp,0x10
c001ee74:	83 c4 0c             	add    esp,0xc
c001ee77:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ee78 <IOAPIC::~IOAPIC()>:
c001ee78:	83 ec 0c             	sub    esp,0xc
c001ee7b:	ba 6c 24 02 c0       	mov    edx,0xc002246c
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	89 10                	mov    DWORD PTR [eax],edx
c001ee86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8a:	83 ec 0c             	sub    esp,0xc
c001ee8d:	50                   	push   eax
c001ee8e:	e8 df 10 ff ff       	call   c000ff72 <Device::~Device()>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	90                   	nop
c001ee97:	83 c4 0c             	add    esp,0xc
c001ee9a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ee9c <IOAPIC::~IOAPIC()>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	83 ec 0c             	sub    esp,0xc
c001eea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea6:	e8 cd ff ff ff       	call   c001ee78 <IOAPIC::~IOAPIC()>
c001eeab:	83 c4 10             	add    esp,0x10
c001eeae:	83 ec 08             	sub    esp,0x8
c001eeb1:	68 68 01 00 00       	push   0x168
c001eeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeba:	e8 26 fd fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	83 c4 0c             	add    esp,0xc
c001eec5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001eec6 <APIC::~APIC()>:
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	ba 24 24 02 c0       	mov    edx,0xc0022424
c001eece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed2:	89 10                	mov    DWORD PTR [eax],edx
c001eed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	50                   	push   eax
c001eedc:	e8 c7 1b ff ff       	call   c0010aa8 <InterruptController::~InterruptController()>
c001eee1:	83 c4 10             	add    esp,0x10
c001eee4:	90                   	nop
c001eee5:	83 c4 0c             	add    esp,0xc
c001eee8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001eeea <APIC::~APIC()>:
c001eeea:	83 ec 0c             	sub    esp,0xc
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef4:	e8 cd ff ff ff       	call   c001eec6 <APIC::~APIC()>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	83 ec 08             	sub    esp,0x8
c001eeff:	68 58 21 00 00       	push   0x2158
c001ef04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef08:	e8 d8 fc fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	83 c4 0c             	add    esp,0xc
c001ef13:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001ef14 <PIC::~PIC()>:
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	ba bc 24 02 c0       	mov    edx,0xc00224bc
c001ef1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef20:	89 10                	mov    DWORD PTR [eax],edx
c001ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef26:	83 ec 0c             	sub    esp,0xc
c001ef29:	50                   	push   eax
c001ef2a:	e8 79 1b ff ff       	call   c0010aa8 <InterruptController::~InterruptController()>
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	90                   	nop
c001ef33:	83 c4 0c             	add    esp,0xc
c001ef36:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001ef38 <PIC::~PIC()>:
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	83 ec 0c             	sub    esp,0xc
c001ef3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef42:	e8 cd ff ff ff       	call   c001ef14 <PIC::~PIC()>
c001ef47:	83 c4 10             	add    esp,0x10
c001ef4a:	83 ec 08             	sub    esp,0x8
c001ef4d:	68 58 21 00 00       	push   0x2158
c001ef52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef56:	e8 8a fc fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001ef5b:	83 c4 10             	add    esp,0x10
c001ef5e:	83 c4 0c             	add    esp,0xc
c001ef61:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ef62 <APICTimer::~APICTimer()>:
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	ba 10 25 02 c0       	mov    edx,0xc0022510
c001ef6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6e:	89 10                	mov    DWORD PTR [eax],edx
c001ef70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	50                   	push   eax
c001ef78:	e8 97 31 ff ff       	call   c0012114 <Timer::~Timer()>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	90                   	nop
c001ef81:	83 c4 0c             	add    esp,0xc
c001ef84:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ef86 <APICTimer::~APICTimer()>:
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	83 ec 0c             	sub    esp,0xc
c001ef8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef90:	e8 cd ff ff ff       	call   c001ef62 <APICTimer::~APICTimer()>
c001ef95:	83 c4 10             	add    esp,0x10
c001ef98:	83 ec 08             	sub    esp,0x8
c001ef9b:	68 60 01 00 00       	push   0x160
c001efa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa4:	e8 3c fc fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	83 c4 0c             	add    esp,0xc
c001efaf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001efb0 <PIT::~PIT()>:
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	ba 60 25 02 c0       	mov    edx,0xc0022560
c001efb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbc:	89 10                	mov    DWORD PTR [eax],edx
c001efbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc2:	83 ec 0c             	sub    esp,0xc
c001efc5:	50                   	push   eax
c001efc6:	e8 49 31 ff ff       	call   c0012114 <Timer::~Timer()>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	90                   	nop
c001efcf:	83 c4 0c             	add    esp,0xc
c001efd2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001efd4 <PIT::~PIT()>:
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	83 ec 0c             	sub    esp,0xc
c001efda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efde:	e8 cd ff ff ff       	call   c001efb0 <PIT::~PIT()>
c001efe3:	83 c4 10             	add    esp,0x10
c001efe6:	83 ec 08             	sub    esp,0x8
c001efe9:	68 5c 01 00 00       	push   0x15c
c001efee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff2:	e8 ee fb fe ff       	call   c000ebe5 <operator delete(void*, unsigned long)>
c001eff7:	83 c4 10             	add    esp,0x10
c001effa:	83 c4 0c             	add    esp,0xc
c001effd:	c3                   	ret    
