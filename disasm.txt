
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 e9 01 00       	call   c001e9e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 f5 01 c0       	mov    ebx,0xc001f572
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c f5 01 c0    	cmp    ebx,0xc001f57c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 31 02 c0       	mov    eax,0xc00231ac
c0000049:	3d ac 31 02 c0       	cmp    eax,0xc00231ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 31 02 c0       	push   0xc00231ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 31 02 c0       	mov    eax,0xc00231ac
c0000075:	2d ac 31 02 c0       	sub    eax,0xc00231ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 31 02 c0       	push   0xc00231ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 33 02 c0 00 	cmp    BYTE PTR ds:0xc002334c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 f5 01 c0       	mov    ebx,0xc001f584
c00000bb:	81 eb 80 f5 01 c0    	sub    ebx,0xc001f580
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 f5 01 c0       	mov    esi,0xc001f580
c00000ca:	a1 50 33 02 c0       	mov    eax,ds:0xc0023350
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 33 02 c0       	mov    ds:0xc0023350,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 33 02 c0       	mov    eax,ds:0xc0023350
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 31 02 c0       	push   0xc00231ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 33 02 c0 01 	mov    BYTE PTR ds:0xc002334c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 33 02 c0       	push   0xc0023354
c000012c:	68 ac 31 02 c0       	push   0xc00231ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 71 eb 00 00       	call   c000edd0 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 97 75 01 00       	call   c0017800 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 83 79 01 00       	call   c0017c13 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 29 81 01 00       	call   c00183c2 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 58 75 01 00       	call   c0017800 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 90 37 02 c0 	lgdtd  ds:0xc0023790
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 9d 0c 01 c0       	mov    ecx,0xc0010c9d
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 9d 0c 01 c0       	mov    ecx,0xc0010c9d
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 6c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002336c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 6c 33 02 c0       	mov    ds:0xc002336c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 6c 33 02 c0       	mov    eax,ds:0xc002336c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 6c 33 02 c0    	mov    DWORD PTR ds:0xc002336c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 a0 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0a60],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 a0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a60],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 a0 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0a60],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 a0 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0a60],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 a0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a60],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 80 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023380
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 84 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcc7c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 84 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc7c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 ac 33 02 c0    	cmp    DWORD PTR ds:0xc00233ac,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d bc 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233bc
c0000b8d:	c7 42 0c b4 33 02 c0 	mov    DWORD PTR [edx+0xc],0xc00233b4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 bc 33 02 c0    	mov    DWORD PTR ds:0xc00233bc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 ac 33 02 c0    	mov    DWORD PTR ds:0xc00233ac,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 80 33 02 c0 02 	test   BYTE PTR ds:0xc0023380,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 80 33 02 c0       	mov    eax,0xc0023380
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 80 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023380
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 80 33 02 c0       	mov    eax,0xc0023380
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 84 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcc7c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 84 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcc7c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 b4 33 02 c0 	lea    edx,[eax*8-0x3ffdcc4c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 80 33 02 c0       	mov    eax,0xc0023380
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d c0 33 02 c0    	mov    ebx,DWORD PTR ds:0xc00233c0
c0000f0f:	81 fb b4 33 02 c0    	cmp    ebx,0xc00233b4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d b4 33 02 c0       	cmp    eax,0xc00233b4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d b0 33 02 c0    	cmp    DWORD PTR ds:0xc00233b0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 bc 33 02 c0       	mov    ds:0xc00233bc,eax
c0000f4b:	a3 c0 33 02 c0       	mov    ds:0xc00233c0,eax
c0000f50:	a3 b0 33 02 c0       	mov    ds:0xc00233b0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 b4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233b4
c0000f5e:	c7 40 0c b4 33 02 c0 	mov    DWORD PTR [eax+0xc],0xc00233b4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 c0 33 02 c0       	mov    ds:0xc00233c0,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 b4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233b4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 78 33 02 c0 	lea    ebp,[edx*4-0x3ffdcc88]
c0000faf:	8b 14 95 80 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc80]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 80 33 02 c0 	lea    ecx,[edx*4-0x3ffdcc80]
c0000fca:	8b 14 95 80 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc80]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd b4 36 02 c0 	or     DWORD PTR [edi*4-0x3ffdc94c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 b4 33 02 c0 	lea    eax,[eax*8-0x3ffdcc4c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d bc 33 02 c0    	mov    DWORD PTR ds:0xc00233bc,ecx
c0001084:	89 0d c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,ecx
c000108a:	c7 41 08 b4 33 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00233b4
c0001091:	c7 41 0c b4 33 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00233b4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd ac 33 02 c0 	lea    edx,[ecx*8-0x3ffdcc54]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d b4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc94c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d b4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc94c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 ac 33 02 c0 	lea    edx,[eax*4-0x3ffdcc54]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d b4 36 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc94c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d bc 33 02 c0    	mov    DWORD PTR ds:0xc00233bc,edi
c0001157:	89 3d c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,edi
c000115d:	c7 47 08 b4 33 02 c0 	mov    DWORD PTR [edi+0x8],0xc00233b4
c0001164:	c7 47 0c b4 33 02 c0 	mov    DWORD PTR [edi+0xc],0xc00233b4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d b0 33 02 c0    	mov    DWORD PTR ds:0xc00233b0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d ac 33 02 c0    	mov    DWORD PTR ds:0xc00233ac,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 80 33 02 c0       	mov    edx,0xc0023380
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 80 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023380,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 80 33 02 c0       	mov    eax,0xc0023380
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d d4 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236d4
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 d4 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236d4,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d d4 36 02 c0    	mov    DWORD PTR ds:0xc00236d4,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 ac 33 02 c0    	cmp    DWORD PTR ds:0xc00233ac,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d ac 33 02 c0    	mov    DWORD PTR ds:0xc00233ac,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 80 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023380,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 80 33 02 c0       	mov    eax,0xc0023380
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 dc 36 02 c0    	push   DWORD PTR ds:0xc00236dc
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 80 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023380,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 80 33 02 c0       	mov    eax,0xc0023380
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 dc 36 02 c0       	mov    eax,ds:0xc00236dc
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 80 33 02 c0       	mov    eax,0xc0023380
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d ac 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233ac,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 80 33 02 c0       	mov    eax,0xc0023380
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 84 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc7c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 b4 33 02 c0       	mov    eax,0xc00233b4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d ac 36 02 c0       	cmp    eax,0xc00236ac
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 d0 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236d0
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 e4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236e4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 f4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236f4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 80 33 02 c0       	mov    eax,0xc0023380
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 a4 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe095c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 80 33 02 c0       	mov    eax,ds:0xc0023380
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 80 33 02 c0       	mov    ds:0xc0023380,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d c8 36 02 c0    	mov    DWORD PTR ds:0xc00236c8,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d cc 36 02 c0    	mov    DWORD PTR ds:0xc00236cc,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 d4 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236d4,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 a0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb360]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 d7 81 01 00       	jmp    c0019b30 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 a0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb360]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 08 82 01 00       	jmp    c0019b77 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 a0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb360]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 30 82 01 00       	jmp    c0019bbe <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 1b cb 01 00       	call   c001e78c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 c0 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0840]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 c0 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0840]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba a4 22 02 c0       	mov    edx,0xc00222a4
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba ec f7 01 c0       	mov    edx,0xc001f7ec
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 20 37 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc8e0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 00 37 02 c0    	mov    ax,ds:0xc0023700
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 00 37 02 c0    	mov    ds:0xc0023700,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 18 b9 01 00       	call   c001e78c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 f2 f7 01 c0       	mov    eax,0xc001f7f2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 40 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe08c0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 fb f7 01 c0       	mov    eax,0xc001f7fb
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 c0 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0840]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 e3 a2 01 00       	call   c001e78c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 20 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8e0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 20 37 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc8e0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 aa 8c 01 00       	call   c001e78c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 90 8c 01 00       	call   c001e78c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 17 f7 01 c0       	mov    eax,0xc001f717
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 10 f7 01 c0       	mov    eax,0xc001f710
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 20 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8e0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 00 f7 01 c0       	mov    esi,0xc001f700
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 d3 73 01 00       	call   c001e78c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 02 f8 01 c0       	mov    edx,0xc001f802
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 0e f8 01 c0       	mov    edx,0xc001f80e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 22 f8 01 c0       	mov    edx,0xc001f822
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 40 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb40
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 40 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb40
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 80 f8 01 c0       	mov    eax,0xc001f880
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 40 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07c0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 20 01 02 c0    	fld    DWORD PTR ds:0xc0020120
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 db 63 01 00       	call   c001e9b0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 10 01 02 c0    	fld    QWORD PTR ds:0xc0020110
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 40 fc 01 c0       	mov    eax,0xc001fc40
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 a0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff60]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 24 01 02 c0    	fld    DWORD PTR ds:0xc0020124
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 19 5f 01 00       	call   c001e9d0 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 30 01 02 c0    	fld    DWORD PTR ds:0xc0020130
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 8d 5e 01 00       	call   c001e9d0 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 1a 5e 01 00       	call   c001e9d0 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 e6 5c 01 00       	call   c001e9b0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 7f 5c 01 00       	call   c001e9d0 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 0c 5c 01 00       	call   c001e9b0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 34 01 02 c0       	mov    eax,0xc0020134
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 48 01 02 c0       	mov    eax,0xc0020148
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 08 03 02 c0    	fld    DWORD PTR ds:0xc0020308
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 80 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe80]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 9c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe64]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 b8 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe48]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 0c 03 02 c0    	fld    DWORD PTR ds:0xc002030c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 7e 4f 01 00       	jmp    c001e9d0 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 5b 4f 01 00       	call   c001e9d0 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 06 4d 01 00       	call   c001e9d0 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 d1 4c 01 00       	call   c001e9d0 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 e3 4b 01 00       	call   c001e9b0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 46 4b 01 00       	call   c001e9d0 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 82 4a 01 00       	call   c001e9d0 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 4d 4a 01 00       	call   c001e9d0 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 5f 49 01 00       	call   c001e9b0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 c7 48 01 00       	call   c001e9d0 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 03 48 01 00       	call   c001e9d0 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 ce 47 01 00       	call   c001e9d0 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 e0 46 01 00       	call   c001e9b0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 48 46 01 00       	call   c001e9d0 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 84 45 01 00       	call   c001e9d0 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 4f 45 01 00       	call   c001e9d0 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 61 44 01 00       	call   c001e9b0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 c9 43 01 00       	call   c001e9d0 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 05 43 01 00       	call   c001e9d0 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 d0 42 01 00       	call   c001e9d0 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 e9 41 01 00       	call   c001e9b0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 4b 41 01 00       	call   c001e9d0 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 e0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe20]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 d4 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe2c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 de 3f 01 00       	call   c001e9d0 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 b2 3e 01 00       	call   c001e9b0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 57 3e 01 00       	call   c001e9d0 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 e4 3d 01 00       	call   c001e9b0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 14 03 02 c0       	mov    eax,0xc0020314
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 25 03 02 c0       	mov    eax,0xc0020325
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 01 58 00 00       	call   c001057c <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 5c 03 02 c0       	push   0xc002035c
c000adb1:	50                   	push   eax
c000adb2:	e8 3f 58 00 00       	call   c00105f6 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba d8 03 02 c0       	mov    edx,0xc00203d8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 d4 cc 00 00       	call   c0017be0 <lockScheduler()>
c000af0c:	e8 03 d0 00 00       	call   c0017f14 <schedule()>
c000af11:	e8 cc cc 00 00       	call   c0017be2 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 e8 3f 00 00       	call   c000ef0c <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 d4 4b 02 c0    	push   DWORD PTR ds:0xc0024bd4
c000af33:	68 65 03 02 c0       	push   0xc0020365
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 00 cb 00 00       	call   c0017a40 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 b5 cd 00 00       	call   c0017d0a <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 43 87 01 c0       	push   0xc0018743
c000af5e:	ff 35 d4 4b 02 c0    	push   DWORD PTR ds:0xc0024bd4
c000af64:	e8 a1 cd 00 00       	call   c0017d0a <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 88 4b 02 c0       	mov    ds:0xc0024b88,eax
c000af71:	c6 05 8d 37 02 c0 01 	mov    BYTE PTR ds:0xc002378d,0x1
c000af78:	e8 d9 43 00 00       	call   c000f356 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 26 b5 00 00       	call   c00164ba <setupSystemCalls()>
c000af94:	e8 bb 4e 00 00       	call   c000fe54 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 af 55 00 00       	call   c0010550 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 72 03 02 c0       	push   0xc0020372
c000afb0:	e8 cd c6 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 17 c8 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 3c 14 02 c0 	mov    DWORD PTR [esp],0xc002143c
c000afc5:	e8 31 40 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 08 d2 00 00       	call   c00181df <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 a1 37 02 c0 04 	test   BYTE PTR ds:0xc00237a1,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 21 34 01 00       	call   c001e456 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 63 8e 00 00       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 3c 8e 00 00       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 1a 8e 00 00       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 f8 8d 00 00       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 a0 37 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00237a0,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 21 8d 00 00       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 fc 8c 00 00       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 a5 32 01 00       	call   c001e410 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 72 32 01 00       	call   c001e400 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 17 8d 00 00       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 8e 03 02 c0       	push   0xc002038e
c000b1e8:	e8 a3 9a 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 94 03 02 c0       	push   0xc0020394
c000b220:	e8 6b 9a 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 a0 37 02 c0 04 	test   BYTE PTR ds:0xc00237a0,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 c0 2b 02 c0 	sete   BYTE PTR ds:0xc0022bc0
c000b284:	e8 83 3c 00 00       	call   c000ef0c <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 5d 82 00 00       	call   c00134f0 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 64 51 00 00       	call   c0010406 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 4c 3c 00 00       	call   c000ef0c <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 d4 8c 00 00       	call   c0013f9e <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 2d 51 00 00       	call   c0010406 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 79 56 00 00       	call   c001096e <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 fd 50 00 00       	call   c0010406 <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 df ca 00 00       	call   c0017e0a <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 9a 03 02 c0       	push   0xc002039a
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 82 3c 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 ab 03 02 c0       	push   0xc00203ab
c000b396:	e8 f5 98 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 b8 03 02 c0       	push   0xc00203b8
c000b3ab:	e8 e0 98 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 c2 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203c2
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 c9 98 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 fc 03 02 c0       	push   0xc00203fc
c000b45c:	e8 9a 3b 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 92 37 02 c0       	mov    ds:0xc0023792,eax
c000b49d:	66 89 15 90 37 02 c0 	mov    WORD PTR ds:0xc0023790,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 2e c6 00 00       	call   c0017be2 <unlockScheduler()>
c000b5b4:	e8 d1 89 00 00       	call   c0013f8a <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 4f 34 01 00       	call   c001ea50 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 46 34 01 00       	call   c001ea50 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 98 37 02 c0 ff 07 	mov    WORD PTR ds:0xc0023798,0x7ff
c000b6f7:	a3 9a 37 02 c0       	mov    ds:0xc002379a,eax
c000b6fc:	0f 01 1d 98 37 02 c0 	lidtd  ds:0xc0023798
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 22 25 00 00       	call   c000df0b <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 be 2a 00 00       	call   c000e4b2 <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 0a 35 00 00       	call   c000ef0c <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 3a 1c 00 00       	call   c000d64c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 6b 1c 00 00       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 09 85 00 00       	call   c0013f8a <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 b8 2b 02 c0       	mov    eax,ds:0xc0022bb8
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 b8 2b 02 c0       	mov    eax,ds:0xc0022bb8
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 18 04 02 c0       	push   0xc0020418
c000bac4:	e8 32 35 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 b8 2b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022bb8,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 19 24 00 00       	call   c000df0b <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d b8 2b 02 c0    	mov    ebp,DWORD PTR ds:0xc0022bb8
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 a6 28 00 00       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d b8 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022bb8
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 f0 2e 01 00       	call   c001ea65 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 f9 2e 01 00       	call   c001ea77 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 48 04 02 c0       	push   0xc0020448
c000bb8b:	e8 00 91 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 4d 04 02 c0       	push   0xc002044d
c000bba1:	e8 ea 90 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 29 c0 00 00       	call   c0017be0 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 1a c0 00 00       	call   c0017be2 <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 32 23 00 00       	call   c000df0b <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 ca 28 00 00       	call   c000e4b2 <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 17 23 00 00       	call   c000df0b <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 d3 25 00 00       	call   c000e1d4 <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 e0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 b0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 45 0b 00 00       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 38 38 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc0023838,0xc000bd9c
c000bec6:	c7 05 24 38 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc0023824,0xc000bc78
c000bed0:	c7 05 20 38 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc0023820,0xc000bcbd
c000beda:	c7 05 2c 38 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc002382c,0xc000bdd8
c000bee4:	c7 05 34 38 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc0023834,0xc000bcff
c000beee:	c7 05 28 38 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc0023828,0xc000bd53
c000bef8:	c7 05 30 38 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc0023830,0xc000bd54
c000bf02:	c7 05 3c 38 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc002383c,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 67 08 00 00       	call   c000c786 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 18 1f 00 00       	call   c000de8c <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 7b 18 02 c0       	push   0xc002187b
c000bf9b:	e8 f0 8c 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d a0 37 02 c0    	mov    DWORD PTR ds:0xc00237a0,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 80 20 00 00       	call   c000e036 <VAS::VAS()>
c000bfb6:	89 1d e4 38 02 c0    	mov    DWORD PTR ds:0xc00238e4,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 3f 2f 00 00       	call   c000ef0c <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 54 22 00 00       	call   c000e246 <VAS::~VAS()>
c000bff2:	c7 04 24 54 04 02 c0 	mov    DWORD PTR [esp],0xc0020454
c000bff9:	e8 92 8c 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba e0 37 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc820],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be e0 37 02 c0       	mov    esi,0xc00237e0
c000c06f:	8d 90 e0 37 02 c0    	lea    edx,[eax-0x3ffdc820]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 e0 37 02 c0    	lea    eax,[edx-0x3ffdc820]
c000c0d5:	8d 94 11 e0 37 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc820]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 bc 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022bbc
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 bc 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022bbc
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 bc 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022bbc
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 cc 37 02 c0       	mov    eax,ds:0xc00237cc
c000c161:	48                   	dec    eax
c000c162:	a3 cc 37 02 c0       	mov    ds:0xc00237cc,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d d0 37 02 c0    	idiv   DWORD PTR ds:0xc00237d0
c000c177:	39 05 c8 37 02 c0    	cmp    DWORD PTR ds:0xc00237c8,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 c8 37 02 c0       	mov    ds:0xc00237c8,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 7a 09 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 6f 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc002046f
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 c8 8a 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 c0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237c0
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d c0 37 02 c0    	mov    DWORD PTR ds:0xc00237c0,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 c0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237c0,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 85 04 02 c0       	push   0xc0020485
c000c21f:	e8 6c 8a 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d c0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c0
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 cc 37 02 c0       	mov    eax,ds:0xc00237cc
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 cc 37 02 c0       	mov    ds:0xc00237cc,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d d0 37 02 c0    	idiv   DWORD PTR ds:0xc00237d0
c000c25d:	39 05 c8 37 02 c0    	cmp    DWORD PTR ds:0xc00237c8,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 c8 37 02 c0       	mov    ds:0xc00237c8,eax
c000c279:	50                   	push   eax
c000c27a:	e8 9b 08 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d c4 37 02 c0    	cmp    DWORD PTR ds:0xc00237c4,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 30             	sub    esp,0x30
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 e0 37 02 c0       	push   0xc00237e0
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 28 01 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c30f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c313:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c319:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c31e:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c324:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c32a:	89 f1                	mov    ecx,esi
c000c32c:	89 fb                	mov    ebx,edi
c000c32e:	01 c1                	add    ecx,eax
c000c330:	89 d5                	mov    ebp,edx
c000c332:	11 d3                	adc    ebx,edx
c000c334:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c337:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c33b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c33f:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c345:	09 dd                	or     ebp,ebx
c000c347:	0f 85 fa 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c359:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c365:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c36d:	eb 45                	jmp    c000c3b4 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c36f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c373:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c37c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c380:	0f 84 c1 00 00 00    	je     c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c386:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c38a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c390:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c393:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c396:	89 c1                	mov    ecx,eax
c000c398:	89 d3                	mov    ebx,edx
c000c39a:	01 f1                	add    ecx,esi
c000c39c:	11 fb                	adc    ebx,edi
c000c39e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3a5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3ac:	09 d3                	or     ebx,edx
c000c3ae:	0f 85 93 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	49                   	dec    ecx
c000c3b5:	75 b8                	jne    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3be:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3c2:	39 e9                	cmp    ecx,ebp
c000c3c4:	89 d9                	mov    ecx,ebx
c000c3c6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3ca:	72 a3                	jb     c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3d1:	39 f1                	cmp    ecx,esi
c000c3d3:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d8:	19 f9                	sbb    ecx,edi
c000c3da:	73 93                	jae    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3dc:	39 e8                	cmp    eax,ebp
c000c3de:	89 d1                	mov    ecx,edx
c000c3e0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3e4:	73 13                	jae    c000c3f9 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3ed:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f5:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c400:	50                   	push   eax
c000c401:	e8 7e fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	89 fa                	mov    edx,edi
c000c40b:	89 f0                	mov    eax,esi
c000c40d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c411:	03 05 d0 37 02 c0    	add    eax,DWORD PTR ds:0xc00237d0
c000c417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c41e:	a3 d0 37 02 c0       	mov    ds:0xc00237d0,eax
c000c423:	52                   	push   edx
c000c424:	50                   	push   eax
c000c425:	68 a1 04 02 c0       	push   0xc00204a1
c000c42a:	e8 cc 2b 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	e9 38 ff ff ff       	jmp    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	68 93 04 02 c0       	push   0xc0020493
c000c43f:	e8 4c 88 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	bb 40 01 00 00       	mov    ebx,0x140
c000c44c:	83 ec 08             	sub    esp,0x8
c000c44f:	6a 00                	push   0x0
c000c451:	53                   	push   ebx
c000c452:	43                   	inc    ebx
c000c453:	e8 98 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c458:	ff 05 d0 37 02 c0    	inc    DWORD PTR ds:0xc00237d0
c000c45e:	83 c4 10             	add    esp,0x10
c000c461:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c467:	75 e3                	jne    c000c44c <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c469:	83 c4 2c             	add    esp,0x2c
c000c46c:	5b                   	pop    ebx
c000c46d:	5e                   	pop    esi
c000c46e:	5f                   	pop    edi
c000c46f:	5d                   	pop    ebp
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <Pipe::isAtty()>:
c000c472:	31 c0                	xor    eax,eax
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Pipe::~Pipe()>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ba 00 05 02 c0       	mov    edx,0xc0020500
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	89 10                	mov    DWORD PTR [eax],edx
c000c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	50                   	push   eax
c000c48c:	e8 5b 16 00 00       	call   c000daec <UnixFile::~UnixFile()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	90                   	nop
c000c495:	83 c4 0c             	add    esp,0xc
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Pipe::~Pipe()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	e8 cd ff ff ff       	call   c000c476 <Pipe::~Pipe()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	83 ec 08             	sub    esp,0x8
c000c4af:	6a 20                	push   0x20
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	e8 61 2a 00 00       	call   c000ef1b <operator delete(void*, unsigned long)>
c000c4ba:	83 c4 10             	add    esp,0x10
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d8:	89 c8                	mov    eax,ecx
c000c4da:	99                   	cdq    
c000c4db:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4df:	74 19                	je     c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e1:	39 f9                	cmp    ecx,edi
c000c4e3:	89 d1                	mov    ecx,edx
c000c4e5:	19 f1                	sbb    ecx,esi
c000c4e7:	73 11                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e9:	e8 f2 b6 00 00       	call   c0017be0 <lockScheduler()>
c000c4ee:	e8 21 ba 00 00       	call   c0017f14 <schedule()>
c000c4f3:	e8 ea b6 00 00       	call   c0017be2 <unlockScheduler()>
c000c4f8:	eb db                	jmp    c000c4d5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4fa:	39 f8                	cmp    eax,edi
c000c4fc:	89 d1                	mov    ecx,edx
c000c4fe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c502:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c506:	19 f1                	sbb    ecx,esi
c000c508:	73 08                	jae    c000c512 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c512:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c515:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c518:	29 c6                	sub    esi,eax
c000c51a:	89 f1                	mov    ecx,esi
c000c51c:	c1 f9 1f             	sar    ecx,0x1f
c000c51f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c523:	89 ca                	mov    edx,ecx
c000c525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c529:	19 d1                	sbb    ecx,edx
c000c52b:	73 04                	jae    c000c531 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c52d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c531:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c535:	89 fd                	mov    ebp,edi
c000c537:	29 f5                	sub    ebp,esi
c000c539:	85 f6                	test   esi,esi
c000c53b:	74 12                	je     c000c54f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c53d:	52                   	push   edx
c000c53e:	56                   	push   esi
c000c53f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c542:	50                   	push   eax
c000c543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c547:	e8 86 40 ff ff       	call   c00005d2 <memcpy>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	85 ed                	test   ebp,ebp
c000c551:	74 12                	je     c000c565 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c553:	50                   	push   eax
c000c554:	55                   	push   ebp
c000c555:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c558:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c55c:	56                   	push   esi
c000c55d:	e8 70 40 ff ff       	call   c00005d2 <memcpy>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c56b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c56e:	99                   	cdq    
c000c56f:	89 f7                	mov    edi,esi
c000c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c575:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c579:	c1 ff 1f             	sar    edi,0x1f
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	52                   	push   edx
c000c57f:	50                   	push   eax
c000c580:	e8 07 23 01 00       	call   c001e88c <__umoddi3>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c58b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c590:	75 10                	jne    c000c5a2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c592:	83 ec 0c             	sub    esp,0xc
c000c595:	68 bd 04 02 c0       	push   0xc00204bd
c000c59a:	e8 f1 86 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5aa:	89 10                	mov    DWORD PTR [eax],edx
c000c5ac:	83 c4 1c             	add    esp,0x1c
c000c5af:	31 c0                	xor    eax,eax
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 1c             	sub    esp,0x1c
c000c5bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5cc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5cf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	89 de                	mov    esi,ebx
c000c5d8:	89 df                	mov    edi,ebx
c000c5da:	c1 ff 1f             	sar    edi,0x1f
c000c5dd:	01 c6                	add    esi,eax
c000c5df:	89 c8                	mov    eax,ecx
c000c5e1:	11 d7                	adc    edi,edx
c000c5e3:	99                   	cdq    
c000c5e4:	39 f1                	cmp    ecx,esi
c000c5e6:	89 d0                	mov    eax,edx
c000c5e8:	19 f8                	sbb    eax,edi
c000c5ea:	b8 01 00 00 00       	mov    eax,0x1
c000c5ef:	0f 82 80 00 00 00    	jb     c000c675 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5fb:	01 d8                	add    eax,ebx
c000c5fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c601:	99                   	cdq    
c000c602:	f7 f9                	idiv   ecx
c000c604:	29 d1                	sub    ecx,edx
c000c606:	89 d7                	mov    edi,edx
c000c608:	89 c8                	mov    eax,ecx
c000c60a:	99                   	cdq    
c000c60b:	39 ce                	cmp    esi,ecx
c000c60d:	19 d3                	sbb    ebx,edx
c000c60f:	bb 00 00 00 00       	mov    ebx,0x0
c000c614:	72 04                	jb     c000c61a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c616:	89 f3                	mov    ebx,esi
c000c618:	29 cb                	sub    ebx,ecx
c000c61a:	89 f1                	mov    ecx,esi
c000c61c:	29 d9                	sub    ecx,ebx
c000c61e:	74 1a                	je     c000c63a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c620:	52                   	push   edx
c000c621:	51                   	push   ecx
c000c622:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c626:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c62a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c62d:	57                   	push   edi
c000c62e:	e8 9f 3f ff ff       	call   c00005d2 <memcpy>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c63a:	85 db                	test   ebx,ebx
c000c63c:	74 12                	je     c000c650 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c63e:	50                   	push   eax
c000c63f:	53                   	push   ebx
c000c640:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c644:	51                   	push   ecx
c000c645:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c648:	e8 85 3f ff ff       	call   c00005d2 <memcpy>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c653:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c658:	75 10                	jne    c000c66a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	68 d9 04 02 c0       	push   0xc00204d9
c000c662:	e8 29 86 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000c667:	83 c4 10             	add    esp,0x10
c000c66a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c671:	89 38                	mov    DWORD PTR [eax],edi
c000c673:	31 c0                	xor    eax,eax
c000c675:	83 c4 1c             	add    esp,0x1c
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	5f                   	pop    edi
c000c67b:	5d                   	pop    ebp
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Pipe::Pipe(int)>:
c000c67e:	83 ec 0c             	sub    esp,0xc
c000c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 00                	push   0x0
c000c68a:	50                   	push   eax
c000c68b:	e8 ba 12 00 00       	call   c000d94a <UnixFile::UnixFile(int)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	ba 00 05 02 c0       	mov    edx,0xc0020500
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 52 f5 ff ff       	call   c000bc1e <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c2                	mov    edx,eax
c000c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6e0:	90                   	nop
c000c6e1:	83 c4 0c             	add    esp,0xc
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <VgaText::isAtty()>:
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	c3                   	ret    
c000c6e9:	90                   	nop

c000c6ea <VgaText::~VgaText()>:
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	89 10                	mov    DWORD PTR [eax],edx
c000c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 e7 13 00 00       	call   c000daec <UnixFile::~UnixFile()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <VgaText::~VgaText()>:
c000c70e:	83 ec 0c             	sub    esp,0xc
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	e8 cd ff ff ff       	call   c000c6ea <VgaText::~VgaText()>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 60 12 00 00       	push   0x1260
c000c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72c:	e8 ea 27 00 00       	call   c000ef1b <operator delete(void*, unsigned long)>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	83 c4 0c             	add    esp,0xc
c000c737:	c3                   	ret    

c000c738 <VgaText::read(unsigned long long, void*, int*)>:
c000c738:	83 ec 10             	sub    esp,0x10
c000c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c747:	e8 f0 53 00 00       	call   c0011b3c <readKeyboard(VgaText*, char*, unsigned long)>
c000c74c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c750:	89 02                	mov    DWORD PTR [edx],eax
c000c752:	31 c0                	xor    eax,eax
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	c3                   	ret    

c000c758 <setTerminalScrollLock(bool)>:
c000c758:	c3                   	ret    

c000c759 <addToTerminalCycle(VgaText*)>:
c000c759:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c000c75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c763:	85 d2                	test   edx,edx
c000c765:	75 0c                	jne    c000c773 <addToTerminalCycle(VgaText*)+0x1a>
c000c767:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c76d:	a3 40 38 02 c0       	mov    ds:0xc0023840,eax
c000c772:	c3                   	ret    
c000c773:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c779:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c77f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c785:	c3                   	ret    

c000c786 <installVgaTextImplementation()>:
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	6a 20                	push   0x20
c000c78b:	6a 00                	push   0x0
c000c78d:	68 20 38 02 c0       	push   0xc0023820
c000c792:	e8 71 3e ff ff       	call   c0000608 <memset>
c000c797:	83 c4 1c             	add    esp,0x1c
c000c79a:	c3                   	ret    

c000c79b <scrollTerminalScrollLock(int)>:
c000c79b:	c3                   	ret    

c000c79c <VgaText::load()>:
c000c79c:	53                   	push   ebx
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	83 ec 58             	sub    esp,0x58
c000c7a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a6:	89 e2                	mov    edx,esp
c000c7a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7ac:	40                   	inc    eax
c000c7ad:	83 f8 50             	cmp    eax,0x50
c000c7b0:	75 f6                	jne    c000c7a8 <VgaText::load()+0xc>
c000c7b2:	31 c0                	xor    eax,eax
c000c7b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7bb:	84 c9                	test   cl,cl
c000c7bd:	74 06                	je     c000c7c5 <VgaText::load()+0x29>
c000c7bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7c2:	40                   	inc    eax
c000c7c3:	eb ef                	jmp    c000c7b4 <VgaText::load()+0x18>
c000c7c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 09                	je     c000c7d8 <VgaText::load()+0x3c>
c000c7cf:	51                   	push   ecx
c000c7d0:	51                   	push   ecx
c000c7d1:	52                   	push   edx
c000c7d2:	53                   	push   ebx
c000c7d3:	ff d0                	call   eax
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7de:	85 c0                	test   eax,eax
c000c7e0:	74 09                	je     c000c7eb <VgaText::load()+0x4f>
c000c7e2:	83 ec 0c             	sub    esp,0xc
c000c7e5:	53                   	push   ebx
c000c7e6:	ff d0                	call   eax
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 c4 58             	add    esp,0x58
c000c7ee:	5b                   	pop    ebx
c000c7ef:	c3                   	ret    

c000c7f0 <VgaText::updateCursor()>:
c000c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f4:	39 05 44 38 02 c0    	cmp    DWORD PTR ds:0xc0023844,eax
c000c7fa:	75 0c                	jne    c000c808 <VgaText::updateCursor()+0x18>
c000c7fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c802:	85 c0                	test   eax,eax
c000c804:	74 02                	je     c000c808 <VgaText::updateCursor()+0x18>
c000c806:	ff e0                	jmp    eax
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::showCursor(bool)>:
c000c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c80e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c812:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c818:	c3                   	ret    
c000c819:	90                   	nop

c000c81a <VgaText::disableBlink(bool)>:
c000c81a:	56                   	push   esi
c000c81b:	53                   	push   ebx
c000c81c:	51                   	push   ecx
c000c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c825:	39 1d 44 38 02 c0    	cmp    DWORD PTR ds:0xc0023844,ebx
c000c82b:	75 18                	jne    c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c82d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c833:	85 c0                	test   eax,eax
c000c835:	74 0e                	je     c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c837:	89 f1                	mov    ecx,esi
c000c839:	52                   	push   edx
c000c83a:	52                   	push   edx
c000c83b:	0f b6 d1             	movzx  edx,cl
c000c83e:	52                   	push   edx
c000c83f:	53                   	push   ebx
c000c840:	ff d0                	call   eax
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	89 f0                	mov    eax,esi
c000c847:	83 f0 01             	xor    eax,0x1
c000c84a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c850:	58                   	pop    eax
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	c3                   	ret    

c000c854 <VgaText::doANSI_SGR(int)>:
c000c854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 14                	jne    c000c874 <VgaText::doANSI_SGR(int)+0x20>
c000c860:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c866:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c86c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c872:	eb 65                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c874:	83 fa 07             	cmp    edx,0x7
c000c877:	75 14                	jne    c000c88d <VgaText::doANSI_SGR(int)+0x39>
c000c879:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c87f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c885:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c88b:	eb 4c                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c88d:	83 fa 1b             	cmp    edx,0x1b
c000c890:	74 ce                	je     c000c860 <VgaText::doANSI_SGR(int)+0xc>
c000c892:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c895:	83 f9 07             	cmp    ecx,0x7
c000c898:	77 09                	ja     c000c8a3 <VgaText::doANSI_SGR(int)+0x4f>
c000c89a:	8b 14 8d e0 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd420]
c000c8a1:	eb 20                	jmp    c000c8c3 <VgaText::doANSI_SGR(int)+0x6f>
c000c8a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a6:	83 f9 07             	cmp    ecx,0x7
c000c8a9:	77 09                	ja     c000c8b4 <VgaText::doANSI_SGR(int)+0x60>
c000c8ab:	8b 14 8d e0 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd420]
c000c8b2:	eb 25                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c8b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b7:	83 f9 07             	cmp    ecx,0x7
c000c8ba:	77 0e                	ja     c000c8ca <VgaText::doANSI_SGR(int)+0x76>
c000c8bc:	8b 14 95 98 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd568]
c000c8c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c9:	c3                   	ret    
c000c8ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 0d                	ja     c000c8df <VgaText::doANSI_SGR(int)+0x8b>
c000c8d2:	8b 14 95 70 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd590]
c000c8d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8df:	c3                   	ret    

c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c904:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c919:	51                   	push   ecx
c000c91a:	e8 c1 ff ff ff       	call   c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>
c000c91f:	58                   	pop    eax
c000c920:	5a                   	pop    edx
c000c921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c929:	5b                   	pop    ebx
c000c92a:	eb ca                	jmp    c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>

c000c92c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c92c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c930:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c935:	83 e0 0f             	and    eax,0xf
c000c938:	c1 e2 04             	shl    edx,0x4
c000c93b:	09 d0                	or     eax,edx
c000c93d:	c3                   	ret    

c000c93e <VgaText::scrollScreen()>:
c000c93e:	57                   	push   edi
c000c93f:	56                   	push   esi
c000c940:	be 01 00 00 00       	mov    esi,0x1
c000c945:	53                   	push   ebx
c000c946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c950:	31 ff                	xor    edi,edi
c000c952:	01 d9                	add    ecx,ebx
c000c954:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c957:	83 fe 17             	cmp    esi,0x17
c000c95a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c960:	75 28                	jne    c000c98a <VgaText::scrollScreen()+0x4c>
c000c962:	f7 c7 01 00 00 00    	test   edi,0x1
c000c968:	74 1c                	je     c000c986 <VgaText::scrollScreen()+0x48>
c000c96a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c971:	50                   	push   eax
c000c972:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c979:	50                   	push   eax
c000c97a:	e8 ad ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c97f:	5a                   	pop    edx
c000c980:	5a                   	pop    edx
c000c981:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c984:	eb 04                	jmp    c000c98a <VgaText::scrollScreen()+0x4c>
c000c986:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c98a:	47                   	inc    edi
c000c98b:	41                   	inc    ecx
c000c98c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c992:	75 c0                	jne    c000c954 <VgaText::scrollScreen()+0x16>
c000c994:	46                   	inc    esi
c000c995:	83 fe 18             	cmp    esi,0x18
c000c998:	75 b0                	jne    c000c94a <VgaText::scrollScreen()+0xc>
c000c99a:	39 1d 44 38 02 c0    	cmp    DWORD PTR ds:0xc0023844,ebx
c000c9a0:	75 24                	jne    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9a2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a9:	74 08                	je     c000c9b3 <VgaText::scrollScreen()+0x75>
c000c9ab:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9b1:	eb 13                	jmp    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9b3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 09                	je     c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	53                   	push   ebx
c000c9c1:	ff d0                	call   eax
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	5e                   	pop    esi
c000c9cc:	5f                   	pop    edi
c000c9cd:	e9 1e fe ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>

c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d7:	c1 e0 08             	shl    eax,0x8
c000c9da:	89 c2                	mov    edx,eax
c000c9dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9e1:	09 d0                	or     eax,edx
c000c9e3:	c3                   	ret    

c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 2f ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9fd:	5a                   	pop    edx
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	5b                   	pop    ebx
c000ca02:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca07:	50                   	push   eax
c000ca08:	53                   	push   ebx
c000ca09:	e8 c4 ff ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca0e:	5a                   	pop    edx
c000ca0f:	5a                   	pop    edx
c000ca10:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca16:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca1a:	0f b7 d2             	movzx  edx,dx
c000ca1d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca22:	39 0d 44 38 02 c0    	cmp    DWORD PTR ds:0xc0023844,ecx
c000ca28:	75 14                	jne    c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca30:	85 c0                	test   eax,eax
c000ca32:	74 0a                	je     c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	ff e0                	jmp    eax
c000ca3e:	83 c4 08             	add    esp,0x8
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::getCursorX()>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <VgaText::getCursorY()>:
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <VgaText::setCursor(int, int)>:
c000ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca64:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca6e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca74:	e9 77 fd ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ca79:	90                   	nop

c000ca7a <VgaText::setCursorX(int)>:
c000ca7a:	83 ec 10             	sub    esp,0x10
c000ca7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca81:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	50                   	push   eax
c000ca8c:	e8 cb ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000ca91:	83 c4 1c             	add    esp,0x1c
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <VgaText::setCursorY(int)>:
c000ca96:	83 ec 10             	sub    esp,0x10
c000ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa7:	50                   	push   eax
c000caa8:	e8 af ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000caad:	83 c4 1c             	add    esp,0x1c
c000cab0:	c3                   	ret    
c000cab1:	90                   	nop

c000cab2 <VgaText::incrementCursor(bool)>:
c000cab2:	56                   	push   esi
c000cab3:	53                   	push   ebx
c000cab4:	51                   	push   ecx
c000cab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cabd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cac3:	40                   	inc    eax
c000cac4:	83 f8 50             	cmp    eax,0x50
c000cac7:	74 08                	je     c000cad1 <VgaText::incrementCursor(bool)+0x1f>
c000cac9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cacf:	eb 33                	jmp    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000cad1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cae1:	8d 50 01             	lea    edx,[eax+0x1]
c000cae4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000caea:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caf0:	75 12                	jne    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cafb:	53                   	push   ebx
c000cafc:	e8 3d fe ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	89 f0                	mov    eax,esi
c000cb06:	84 c0                	test   al,al
c000cb08:	74 0c                	je     c000cb16 <VgaText::incrementCursor(bool)+0x64>
c000cb0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb0e:	5a                   	pop    edx
c000cb0f:	5b                   	pop    ebx
c000cb10:	5e                   	pop    esi
c000cb11:	e9 da fc ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cb16:	58                   	pop    eax
c000cb17:	5b                   	pop    ebx
c000cb18:	5e                   	pop    esi
c000cb19:	c3                   	ret    

c000cb1a <VgaText::updateRAMUsageDisplay(int)>:
c000cb1a:	53                   	push   ebx
c000cb1b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb20:	6a 0f                	push   0xf
c000cb22:	6a 00                	push   0x0
c000cb24:	e8 03 fe ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb29:	5a                   	pop    edx
c000cb2a:	59                   	pop    ecx
c000cb2b:	0f b6 c8             	movzx  ecx,al
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb33:	99                   	cdq    
c000cb34:	f7 fb                	idiv   ebx
c000cb36:	89 d3                	mov    ebx,edx
c000cb38:	83 c0 30             	add    eax,0x30
c000cb3b:	83 c3 30             	add    ebx,0x30
c000cb3e:	0f be c0             	movsx  eax,al
c000cb41:	0f b6 db             	movzx  ebx,bl
c000cb44:	50                   	push   eax
c000cb45:	e8 88 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb4a:	5a                   	pop    edx
c000cb4b:	5a                   	pop    edx
c000cb4c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb52:	51                   	push   ecx
c000cb53:	53                   	push   ebx
c000cb54:	e8 79 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	5b                   	pop    ebx
c000cb5a:	5a                   	pop    edx
c000cb5b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb61:	51                   	push   ecx
c000cb62:	6a 25                	push   0x25
c000cb64:	e8 69 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb69:	59                   	pop    ecx
c000cb6a:	5b                   	pop    ebx
c000cb6b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb71:	5b                   	pop    ebx
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <VgaText::updateDiskUsage()>:
c000cb74:	55                   	push   ebp
c000cb75:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb7a:	57                   	push   edi
c000cb7b:	56                   	push   esi
c000cb7c:	53                   	push   ebx
c000cb7d:	6a 0f                	push   0xf
c000cb7f:	6a 00                	push   0x0
c000cb81:	e8 a6 fd ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb86:	5a                   	pop    edx
c000cb87:	0f b6 d8             	movzx  ebx,al
c000cb8a:	59                   	pop    ecx
c000cb8b:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c000cb90:	53                   	push   ebx
c000cb91:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb96:	99                   	cdq    
c000cb97:	f7 fd                	idiv   ebp
c000cb99:	99                   	cdq    
c000cb9a:	f7 f9                	idiv   ecx
c000cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb9f:	0f b6 c0             	movzx  eax,al
c000cba2:	50                   	push   eax
c000cba3:	e8 2a fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cba8:	5e                   	pop    esi
c000cba9:	5f                   	pop    edi
c000cbaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbb5:	53                   	push   ebx
c000cbb6:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c000cbbb:	99                   	cdq    
c000cbbc:	f7 ff                	idiv   edi
c000cbbe:	99                   	cdq    
c000cbbf:	f7 f9                	idiv   ecx
c000cbc1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbc4:	0f b6 c0             	movzx  eax,al
c000cbc7:	50                   	push   eax
c000cbc8:	e8 05 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbcd:	5a                   	pop    edx
c000cbce:	5e                   	pop    esi
c000cbcf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbd5:	be 64 00 00 00       	mov    esi,0x64
c000cbda:	53                   	push   ebx
c000cbdb:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c000cbe0:	99                   	cdq    
c000cbe1:	f7 fe                	idiv   esi
c000cbe3:	99                   	cdq    
c000cbe4:	f7 f9                	idiv   ecx
c000cbe6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	50                   	push   eax
c000cbed:	e8 e0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbf2:	5a                   	pop    edx
c000cbf3:	5a                   	pop    edx
c000cbf4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbfa:	53                   	push   ebx
c000cbfb:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c000cc00:	99                   	cdq    
c000cc01:	f7 f9                	idiv   ecx
c000cc03:	99                   	cdq    
c000cc04:	f7 f9                	idiv   ecx
c000cc06:	8d 42 30             	lea    eax,[edx+0x30]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	50                   	push   eax
c000cc0d:	e8 c0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc12:	5a                   	pop    edx
c000cc13:	5a                   	pop    edx
c000cc14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc1a:	53                   	push   ebx
c000cc1b:	a1 24 55 02 c0       	mov    eax,ds:0xc0025524
c000cc20:	99                   	cdq    
c000cc21:	f7 f9                	idiv   ecx
c000cc23:	8d 42 30             	lea    eax,[edx+0x30]
c000cc26:	0f b6 c0             	movzx  eax,al
c000cc29:	50                   	push   eax
c000cc2a:	e8 a3 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2f:	5a                   	pop    edx
c000cc30:	5a                   	pop    edx
c000cc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc37:	53                   	push   ebx
c000cc38:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c000cc3d:	99                   	cdq    
c000cc3e:	f7 fd                	idiv   ebp
c000cc40:	99                   	cdq    
c000cc41:	f7 f9                	idiv   ecx
c000cc43:	8d 42 30             	lea    eax,[edx+0x30]
c000cc46:	0f b6 c0             	movzx  eax,al
c000cc49:	50                   	push   eax
c000cc4a:	e8 83 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4f:	5d                   	pop    ebp
c000cc50:	5a                   	pop    edx
c000cc51:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc57:	53                   	push   ebx
c000cc58:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c000cc5d:	99                   	cdq    
c000cc5e:	f7 ff                	idiv   edi
c000cc60:	99                   	cdq    
c000cc61:	f7 f9                	idiv   ecx
c000cc63:	8d 42 30             	lea    eax,[edx+0x30]
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	50                   	push   eax
c000cc6a:	e8 63 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc77:	53                   	push   ebx
c000cc78:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c000cc7d:	99                   	cdq    
c000cc7e:	f7 fe                	idiv   esi
c000cc80:	99                   	cdq    
c000cc81:	f7 f9                	idiv   ecx
c000cc83:	8d 42 30             	lea    eax,[edx+0x30]
c000cc86:	0f b6 c0             	movzx  eax,al
c000cc89:	50                   	push   eax
c000cc8a:	e8 43 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8f:	5a                   	pop    edx
c000cc90:	5e                   	pop    esi
c000cc91:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc97:	53                   	push   ebx
c000cc98:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c000cc9d:	99                   	cdq    
c000cc9e:	f7 f9                	idiv   ecx
c000cca0:	99                   	cdq    
c000cca1:	f7 f9                	idiv   ecx
c000cca3:	8d 42 30             	lea    eax,[edx+0x30]
c000cca6:	0f b6 c0             	movzx  eax,al
c000cca9:	50                   	push   eax
c000ccaa:	e8 23 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccaf:	5f                   	pop    edi
c000ccb0:	5d                   	pop    ebp
c000ccb1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb7:	53                   	push   ebx
c000ccb8:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c000ccbd:	99                   	cdq    
c000ccbe:	f7 f9                	idiv   ecx
c000ccc0:	83 c2 30             	add    edx,0x30
c000ccc3:	0f b6 d2             	movzx  edx,dl
c000ccc6:	52                   	push   edx
c000ccc7:	e8 06 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cccc:	5a                   	pop    edx
c000cccd:	59                   	pop    ecx
c000ccce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	5d                   	pop    ebp
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <VgaText::updateTitle()>:
c000ccda:	53                   	push   ebx
c000ccdb:	31 c0                	xor    eax,eax
c000ccdd:	83 ec 58             	sub    esp,0x58
c000cce0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cce4:	89 e1                	mov    ecx,esp
c000cce6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccea:	40                   	inc    eax
c000cceb:	83 f8 50             	cmp    eax,0x50
c000ccee:	75 f6                	jne    c000cce6 <VgaText::updateTitle()+0xc>
c000ccf0:	31 c0                	xor    eax,eax
c000ccf2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf9:	84 db                	test   bl,bl
c000ccfb:	74 06                	je     c000cd03 <VgaText::updateTitle()+0x29>
c000ccfd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd00:	40                   	inc    eax
c000cd01:	eb ef                	jmp    c000ccf2 <VgaText::updateTitle()+0x18>
c000cd03:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	74 09                	je     c000cd16 <VgaText::updateTitle()+0x3c>
c000cd0d:	53                   	push   ebx
c000cd0e:	53                   	push   ebx
c000cd0f:	51                   	push   ecx
c000cd10:	52                   	push   edx
c000cd11:	ff d0                	call   eax
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	e8 59 fe ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c000cd1b:	83 c4 58             	add    esp,0x58
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c3                   	ret    

c000cd20 <VgaText::setTitleTextColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd2e:	eb aa                	jmp    c000ccda <VgaText::updateTitle()>

c000cd30 <VgaText::setTitleColour(VgaColour)>:
c000cd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd38:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd3e:	eb 9a                	jmp    c000ccda <VgaText::updateTitle()>

c000cd40 <VgaText::setTitle(char*)>:
c000cd40:	53                   	push   ebx
c000cd41:	83 ec 10             	sub    esp,0x10
c000cd44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd52:	50                   	push   eax
c000cd53:	e8 4f 39 ff ff       	call   c00006a7 <strcpy>
c000cd58:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd5c:	83 c4 18             	add    esp,0x18
c000cd5f:	5b                   	pop    ebx
c000cd60:	e9 75 ff ff ff       	jmp    c000ccda <VgaText::updateTitle()>
c000cd65:	90                   	nop

c000cd66 <VgaText::decrementCursor(bool)>:
c000cd66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 07                	je     c000cd7f <VgaText::decrementCursor(bool)+0x19>
c000cd78:	48                   	dec    eax
c000cd79:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd7f:	84 c9                	test   cl,cl
c000cd81:	74 09                	je     c000cd8c <VgaText::decrementCursor(bool)+0x26>
c000cd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd87:	e9 64 fa ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cda2:	3c 07                	cmp    al,0x7
c000cda4:	75 2a                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda6:	a1 ec 38 02 c0       	mov    eax,ds:0xc00238ec
c000cdab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc7:	83 c4 08             	add    esp,0x8
c000cdca:	5b                   	pop    ebx
c000cdcb:	e9 16 30 00 00       	jmp    c000fde6 <Buzzer::beep(int, int, bool)>
c000cdd0:	3c 0d                	cmp    al,0xd
c000cdd2:	75 0c                	jne    c000cde0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdd4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdde:	eb 3b                	jmp    c000ce1b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cde0:	3c 0a                	cmp    al,0xa
c000cde2:	75 40                	jne    c000ce24 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cde4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdea:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdf4:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdfd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce03:	75 12                	jne    c000ce17 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce0e:	53                   	push   ebx
c000ce0f:	e8 2a fb ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce1b:	83 c4 08             	add    esp,0x8
c000ce1e:	5b                   	pop    ebx
c000ce1f:	e9 cc f9 ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ce24:	3c 08                	cmp    al,0x8
c000ce26:	75 31                	jne    c000ce59 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	6a 01                	push   0x1
c000ce2c:	53                   	push   ebx
c000ce2d:	e8 34 ff ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000ce32:	5a                   	pop    edx
c000ce33:	59                   	pop    ecx
c000ce34:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce3a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce40:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce46:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce4c:	6a 20                	push   0x20
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 90 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce54:	83 c4 28             	add    esp,0x28
c000ce57:	5b                   	pop    ebx
c000ce58:	c3                   	ret    
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f be c0             	movsx  eax,al
c000ce5f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce65:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6b:	51                   	push   ecx
c000ce6c:	52                   	push   edx
c000ce6d:	50                   	push   eax
c000ce6e:	53                   	push   ebx
c000ce6f:	e8 70 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce74:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce78:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce80:	83 c4 28             	add    esp,0x28
c000ce83:	5b                   	pop    ebx
c000ce84:	e9 29 fc ff ff       	jmp    c000cab2 <VgaText::incrementCursor(bool)>
c000ce89:	90                   	nop

c000ce8a <VgaText::isShowingCursor()>:
c000ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <VgaText::isBlinkDisabled()>:
c000ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cea0:	83 f0 01             	xor    eax,0x1
c000cea3:	c3                   	ret    

c000cea4 <VgaText::setCursorHeight(int)>:
c000cea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceac:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceb2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	e9 48 f9 ff ff       	jmp    c000c80a <VgaText::showCursor(bool)>

c000cec2 <VgaText::getCursorHeight()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cecc:	c3                   	ret    

c000cecd <setActiveTerminal(VgaText*)>:
c000cecd:	53                   	push   ebx
c000cece:	83 ec 08             	sub    esp,0x8
c000ced1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	75 11                	jne    c000ceea <setActiveTerminal(VgaText*)+0x1d>
c000ced9:	c7 44 24 10 14 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020514
c000cee1:	83 c4 08             	add    esp,0x8
c000cee4:	5b                   	pop    ebx
c000cee5:	e9 a6 7d 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	53                   	push   ebx
c000ceed:	68 22 05 02 c0       	push   0xc0020522
c000cef2:	e8 04 21 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000cef7:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 0c                	je     c000cf0f <setActiveTerminal(VgaText*)+0x42>
c000cf03:	83 ec 0c             	sub    esp,0xc
c000cf06:	50                   	push   eax
c000cf07:	e8 e4 f8 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	89 1d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ebx
c000cf15:	51                   	push   ecx
c000cf16:	51                   	push   ecx
c000cf17:	53                   	push   ebx
c000cf18:	68 3a 05 02 c0       	push   0xc002053a
c000cf1d:	e8 d9 20 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf2b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf31:	53                   	push   ebx
c000cf32:	e8 25 fb ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3a:	e8 57 ff ff ff       	call   c000ce96 <VgaText::isBlinkDisabled()>
c000cf3f:	5a                   	pop    edx
c000cf40:	0f b6 c0             	movzx  eax,al
c000cf43:	59                   	pop    ecx
c000cf44:	50                   	push   eax
c000cf45:	53                   	push   ebx
c000cf46:	e8 cf f8 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000cf4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf4e:	e8 6f ff ff ff       	call   c000cec2 <VgaText::getCursorHeight()>
c000cf53:	5a                   	pop    edx
c000cf54:	59                   	pop    ecx
c000cf55:	50                   	push   eax
c000cf56:	53                   	push   ebx
c000cf57:	e8 48 ff ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf66:	75 0a                	jne    c000cf72 <setActiveTerminal(VgaText*)+0xa5>
c000cf68:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	83 c4 08             	add    esp,0x8
c000cf79:	5b                   	pop    ebx
c000cf7a:	e9 1d f8 ff ff       	jmp    c000c79c <VgaText::load()>

c000cf7f <doTerminalCycle()>:
c000cf7f:	83 ec 18             	sub    esp,0x18
c000cf82:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c000cf87:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf8d:	50                   	push   eax
c000cf8e:	a3 40 38 02 c0       	mov    ds:0xc0023840,eax
c000cf93:	e8 35 ff ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c000cf98:	83 c4 1c             	add    esp,0x1c
c000cf9b:	c3                   	ret    

c000cf9c <VgaText::doUpdate()>:
c000cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 02                	je     c000cfac <VgaText::doUpdate()+0x10>
c000cfaa:	ff e0                	jmp    eax
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfae:	55                   	push   ebp
c000cfaf:	57                   	push   edi
c000cfb0:	56                   	push   esi
c000cfb1:	53                   	push   ebx
c000cfb2:	83 ec 1c             	sub    esp,0x1c
c000cfb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfc5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc8:	50                   	push   eax
c000cfc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfce:	50                   	push   eax
c000cfcf:	e8 58 f9 ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd4:	59                   	pop    ecx
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	5b                   	pop    ebx
c000cfd9:	31 c9                	xor    ecx,ecx
c000cfdb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff1:	0f b7 db             	movzx  ebx,bx
c000cff4:	01 db                	add    ebx,ebx
c000cff6:	01 fb                	add    ebx,edi
c000cff8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cffb:	84 c0                	test   al,al
c000cffd:	0f 84 38 01 00 00    	je     c000d13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d003:	3c 0d                	cmp    al,0xd
c000d005:	75 0f                	jne    c000d016 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d007:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d011:	e9 1f 01 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d016:	3c 0a                	cmp    al,0xa
c000d018:	75 5b                	jne    c000d075 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d01a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d020:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d02a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d02d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d033:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d039:	75 12                	jne    c000d04d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d044:	55                   	push   ebp
c000d045:	e8 f4 f8 ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	55                   	push   ebp
c000d051:	e8 9a f7 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d056:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	31 c9                	xor    ecx,ecx
c000d069:	0f b7 db             	movzx  ebx,bx
c000d06c:	01 db                	add    ebx,ebx
c000d06e:	01 fb                	add    ebx,edi
c000d070:	e9 c0 00 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d075:	3c 08                	cmp    al,0x8
c000d077:	75 4e                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d079:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d07d:	53                   	push   ebx
c000d07e:	53                   	push   ebx
c000d07f:	6a 01                	push   0x1
c000d081:	55                   	push   ebp
c000d082:	e8 df fc ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000d087:	58                   	pop    eax
c000d088:	5a                   	pop    edx
c000d089:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d08f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d095:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d09b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0a1:	6a 20                	push   0x20
c000d0a3:	55                   	push   ebp
c000d0a4:	e8 3b f9 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0be:	0f b7 db             	movzx  ebx,bx
c000d0c1:	01 db                	add    ebx,ebx
c000d0c3:	01 fb                	add    ebx,edi
c000d0c5:	eb 6e                	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c7:	51                   	push   ecx
c000d0c8:	51                   	push   ecx
c000d0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0cd:	50                   	push   eax
c000d0ce:	e8 ff f8 ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d9:	39 2d 44 38 02 c0    	cmp    DWORD PTR ds:0xc0023844,ebp
c000d0df:	75 2a                	jne    c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	74 20                	je     c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0eb:	52                   	push   edx
c000d0ec:	52                   	push   edx
c000d0ed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0f3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d101:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d104:	51                   	push   ecx
c000d105:	55                   	push   ebp
c000d106:	ff d0                	call   eax
c000d108:	83 c4 20             	add    esp,0x20
c000d10b:	83 c3 02             	add    ebx,0x2
c000d10e:	50                   	push   eax
c000d10f:	50                   	push   eax
c000d110:	6a 00                	push   0x0
c000d112:	55                   	push   ebp
c000d113:	e8 9a f9 ff ff       	call   c000cab2 <VgaText::incrementCursor(bool)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d122:	75 0f                	jne    c000d133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d124:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12c:	0f b7 db             	movzx  ebx,bx
c000d12f:	01 db                	add    ebx,ebx
c000d131:	01 fb                	add    ebx,edi
c000d133:	b1 01                	mov    cl,0x1
c000d135:	46                   	inc    esi
c000d136:	e9 bd fe ff ff       	jmp    c000cff8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d13b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	55                   	push   ebp
c000d143:	e8 a8 f6 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d14f:	84 c9                	test   cl,cl
c000d151:	74 0c                	je     c000d15f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d153:	83 ec 0c             	sub    esp,0xc
c000d156:	55                   	push   ebp
c000d157:	e8 40 fe ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <VgaText::clearScreen()>:
c000d16e:	57                   	push   edi
c000d16f:	56                   	push   esi
c000d170:	31 f6                	xor    esi,esi
c000d172:	53                   	push   ebx
c000d173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d177:	52                   	push   edx
c000d178:	6a 00                	push   0x0
c000d17a:	6a 00                	push   0x0
c000d17c:	53                   	push   ebx
c000d17d:	e8 da f8 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d182:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d192:	7e 26                	jle    c000d1ba <VgaText::clearScreen()+0x4c>
c000d194:	31 ff                	xor    edi,edi
c000d196:	50                   	push   eax
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	57                   	push   edi
c000d19a:	47                   	inc    edi
c000d19b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1a1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a7:	6a 20                	push   0x20
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 35 f8 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	83 ff 50             	cmp    edi,0x50
c000d1b5:	75 df                	jne    c000d196 <VgaText::clearScreen()+0x28>
c000d1b7:	46                   	inc    esi
c000d1b8:	eb d2                	jmp    c000d18c <VgaText::clearScreen()+0x1e>
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	53                   	push   ebx
c000d1be:	e8 d9 fd ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d1c3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	5b                   	pop    ebx
c000d1ce:	5e                   	pop    esi
c000d1cf:	5f                   	pop    edi
c000d1d0:	c3                   	ret    
c000d1d1:	90                   	nop

c000d1d2 <VgaText::putchar(char)>:
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	83 ec 14             	sub    esp,0x14
c000d1d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1df:	3c 5b                	cmp    al,0x5b
c000d1e1:	75 21                	jne    c000d204 <VgaText::putchar(char)+0x32>
c000d1e3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1ea:	74 28                	je     c000d214 <VgaText::putchar(char)+0x42>
c000d1ec:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1f5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ff:	e9 e2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d204:	3c 1b                	cmp    al,0x1b
c000d206:	75 0c                	jne    c000d214 <VgaText::putchar(char)+0x42>
c000d208:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d20f:	e9 d2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d214:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d21a:	84 c9                	test   cl,cl
c000d21c:	0f 84 ab 00 00 00    	je     c000d2cd <VgaText::putchar(char)+0xfb>
c000d222:	8d 50 c0             	lea    edx,[eax-0x40]
c000d225:	80 fa 3e             	cmp    dl,0x3e
c000d228:	0f 87 82 00 00 00    	ja     c000d2b0 <VgaText::putchar(char)+0xde>
c000d22e:	3c 6d                	cmp    al,0x6d
c000d230:	75 4d                	jne    c000d27f <VgaText::putchar(char)+0xad>
c000d232:	31 f6                	xor    esi,esi
c000d234:	31 d2                	xor    edx,edx
c000d236:	31 c0                	xor    eax,eax
c000d238:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d23e:	7e 30                	jle    c000d270 <VgaText::putchar(char)+0x9e>
c000d240:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d248:	80 fa 3b             	cmp    dl,0x3b
c000d24b:	75 17                	jne    c000d264 <VgaText::putchar(char)+0x92>
c000d24d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d251:	50                   	push   eax
c000d252:	53                   	push   ebx
c000d253:	e8 fc f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d258:	59                   	pop    ecx
c000d259:	31 d2                	xor    edx,edx
c000d25b:	58                   	pop    eax
c000d25c:	31 c0                	xor    eax,eax
c000d25e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d262:	eb 09                	jmp    c000d26d <VgaText::putchar(char)+0x9b>
c000d264:	6b c0 0a             	imul   eax,eax,0xa
c000d267:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d26b:	88 ca                	mov    dl,cl
c000d26d:	46                   	inc    esi
c000d26e:	eb c8                	jmp    c000d238 <VgaText::putchar(char)+0x66>
c000d270:	84 d2                	test   dl,dl
c000d272:	74 31                	je     c000d2a5 <VgaText::putchar(char)+0xd3>
c000d274:	50                   	push   eax
c000d275:	53                   	push   ebx
c000d276:	e8 d9 f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d27b:	58                   	pop    eax
c000d27c:	5a                   	pop    edx
c000d27d:	eb 26                	jmp    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d27f:	3c 4a                	cmp    al,0x4a
c000d281:	75 22                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d283:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d28a:	75 19                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	53                   	push   ebx
c000d290:	e8 d9 fe ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	6a 00                	push   0x0
c000d29a:	6a 00                	push   0x0
c000d29c:	53                   	push   ebx
c000d29d:	e8 ba f7 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2ae:	eb 36                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2b0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b6:	83 fa 0e             	cmp    edx,0xe
c000d2b9:	7f 2b                	jg     c000d2e6 <VgaText::putchar(char)+0x114>
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2c4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2cb:	eb 19                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2cd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d3:	0f be c0             	movsx  eax,al
c000d2d6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2dc:	50                   	push   eax
c000d2dd:	53                   	push   ebx
c000d2de:	e8 ab fa ff ff       	call   c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 14             	add    esp,0x14
c000d2e9:	5b                   	pop    ebx
c000d2ea:	5e                   	pop    esi
c000d2eb:	c3                   	ret    

c000d2ec <VgaText::puts(char const*)>:
c000d2ec:	53                   	push   ebx
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f7:	84 c0                	test   al,al
c000d2f9:	74 12                	je     c000d30d <VgaText::puts(char const*)+0x21>
c000d2fb:	43                   	inc    ebx
c000d2fc:	51                   	push   ecx
c000d2fd:	51                   	push   ecx
c000d2fe:	50                   	push   eax
c000d2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d303:	e8 ca fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	eb e7                	jmp    c000d2f4 <VgaText::puts(char const*)+0x8>
c000d30d:	83 c4 08             	add    esp,0x8
c000d310:	5b                   	pop    ebx
c000d311:	c3                   	ret    

c000d312 <VgaText::putx(unsigned int)>:
c000d312:	57                   	push   edi
c000d313:	b9 11 00 00 00       	mov    ecx,0x11
c000d318:	56                   	push   esi
c000d319:	be 56 05 02 c0       	mov    esi,0xc0020556
c000d31e:	53                   	push   ebx
c000d31f:	83 ec 20             	sub    esp,0x20
c000d322:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d326:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d32a:	fc                   	cld    
c000d32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d32d:	be 08 00 00 00       	mov    esi,0x8
c000d332:	50                   	push   eax
c000d333:	50                   	push   eax
c000d334:	89 d8                	mov    eax,ebx
c000d336:	c1 e3 04             	shl    ebx,0x4
c000d339:	c1 e8 1c             	shr    eax,0x1c
c000d33c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d341:	50                   	push   eax
c000d342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d346:	e8 87 fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	4e                   	dec    esi
c000d34f:	75 e1                	jne    c000d332 <VgaText::putx(unsigned int)+0x20>
c000d351:	83 c4 20             	add    esp,0x20
c000d354:	5b                   	pop    ebx
c000d355:	5e                   	pop    esi
c000d356:	5f                   	pop    edi
c000d357:	c3                   	ret    

c000d358 <VgaText::VgaText(char const*)>:
c000d358:	57                   	push   edi
c000d359:	56                   	push   esi
c000d35a:	53                   	push   ebx
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	6a 00                	push   0x0
c000d364:	50                   	push   eax
c000d365:	e8 e0 05 00 00       	call   c000d94a <UnixFile::UnixFile(int)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ca:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e6:	bb 20 38 02 c0       	mov    ebx,0xc0023820
c000d3eb:	b8 08 00 00 00       	mov    eax,0x8
c000d3f0:	fc                   	cld    
c000d3f1:	89 d7                	mov    edi,edx
c000d3f3:	89 de                	mov    esi,ebx
c000d3f5:	89 c1                	mov    ecx,eax
c000d3f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fd:	05 1e 10 00 00       	add    eax,0x101e
c000d402:	83 ec 08             	sub    esp,0x8
c000d405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d409:	50                   	push   eax
c000d40a:	e8 98 32 ff ff       	call   c00006a7 <strcpy>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d416:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 c0 0c             	add    eax,0xc
c000d427:	83 ec 04             	sub    esp,0x4
c000d42a:	68 00 0f 00 00       	push   0xf00
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 d1 31 ff ff       	call   c0000608 <memset>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	83 ec 04             	sub    esp,0x4
c000d43d:	6a 00                	push   0x0
c000d43f:	6a 07                	push   0x7
c000d441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d445:	e8 c2 f4 ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	6a 02                	push   0x2
c000d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d456:	e8 49 fa ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	83 ec 04             	sub    esp,0x4
c000d461:	6a 00                	push   0x0
c000d463:	6a 00                	push   0x0
c000d465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d469:	e8 ee f5 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	83 ec 08             	sub    esp,0x8
c000d474:	6a 01                	push   0x1
c000d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47a:	e8 8b f3 ff ff       	call   c000c80a <VgaText::showCursor(bool)>
c000d47f:	83 c4 10             	add    esp,0x10
c000d482:	83 ec 08             	sub    esp,0x8
c000d485:	6a 01                	push   0x1
c000d487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48b:	e8 8a f3 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	83 ec 0c             	sub    esp,0xc
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	e8 cf fc ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b1:	05 9e 10 00 00       	add    eax,0x109e
c000d4b6:	83 ec 04             	sub    esp,0x4
c000d4b9:	68 96 00 00 00       	push   0x96
c000d4be:	6a 00                	push   0x0
c000d4c0:	50                   	push   eax
c000d4c1:	e8 42 31 ff ff       	call   c0000608 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cd:	05 34 11 00 00       	add    eax,0x1134
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	68 2c 01 00 00       	push   0x12c
c000d4da:	6a 00                	push   0x0
c000d4dc:	50                   	push   eax
c000d4dd:	e8 26 31 ff ff       	call   c0000608 <memset>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	90                   	nop
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	5f                   	pop    edi
c000d4e9:	c3                   	ret    

c000d4ea <VgaText::receiveKey(unsigned char)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	83 ec 1c             	sub    esp,0x1c
c000d4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f9:	84 db                	test   bl,bl
c000d4fb:	0f 84 c9 00 00 00    	je     c000d5ca <VgaText::receiveKey(unsigned char)+0xe0>
c000d501:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d507:	80 fb 08             	cmp    bl,0x8
c000d50a:	75 2c                	jne    c000d538 <VgaText::receiveKey(unsigned char)+0x4e>
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	57                   	push   edi
c000d510:	e8 10 31 ff ff       	call   c0000625 <strlen>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 41                	je     c000d55d <VgaText::receiveKey(unsigned char)+0x73>
c000d51c:	50                   	push   eax
c000d51d:	50                   	push   eax
c000d51e:	6a 08                	push   0x8
c000d520:	56                   	push   esi
c000d521:	e8 ac fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d526:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d529:	e8 f7 30 ff ff       	call   c0000625 <strlen>
c000d52e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d536:	eb 22                	jmp    c000d55a <VgaText::receiveKey(unsigned char)+0x70>
c000d538:	0f be c3             	movsx  eax,bl
c000d53b:	52                   	push   edx
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	56                   	push   esi
c000d53f:	e8 8e fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d544:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d548:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d54d:	59                   	pop    ecx
c000d54e:	5d                   	pop    ebp
c000d54f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d553:	50                   	push   eax
c000d554:	57                   	push   edi
c000d555:	e8 04 32 ff ff       	call   c000075e <strcat>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d564:	75 05                	jne    c000d56b <VgaText::receiveKey(unsigned char)+0x81>
c000d566:	80 fb 0a             	cmp    bl,0xa
c000d569:	75 53                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0xd4>
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d574:	53                   	push   ebx
c000d575:	e8 ab 30 ff ff       	call   c0000625 <strlen>
c000d57a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d57d:	89 c5                	mov    ebp,eax
c000d57f:	e8 a1 30 ff ff       	call   c0000625 <strlen>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d58b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d590:	76 10                	jbe    c000d5a2 <VgaText::receiveKey(unsigned char)+0xb8>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	68 67 05 02 c0       	push   0xc0020567
c000d59a:	e8 f1 76 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	57                   	push   edi
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 b3 31 ff ff       	call   c000075e <strcat>
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	68 96 00 00 00       	push   0x96
c000d5b3:	6a 00                	push   0x0
c000d5b5:	57                   	push   edi
c000d5b6:	e8 4d 30 ff ff       	call   c0000608 <memset>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	56                   	push   esi
c000d5c2:	e8 d5 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 1c             	add    esp,0x1c
c000d5cd:	5b                   	pop    ebx
c000d5ce:	5e                   	pop    esi
c000d5cf:	5f                   	pop    edi
c000d5d0:	5d                   	pop    ebp
c000d5d1:	c3                   	ret    

c000d5d2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5d2:	55                   	push   ebp
c000d5d3:	57                   	push   edi
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5dd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5e5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5ec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5ef:	39 eb                	cmp    ebx,ebp
c000d5f1:	74 13                	je     c000d606 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5f3:	43                   	inc    ebx
c000d5f4:	50                   	push   eax
c000d5f5:	50                   	push   eax
c000d5f6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5fa:	50                   	push   eax
c000d5fb:	56                   	push   esi
c000d5fc:	e8 d1 fb ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	eb e9                	jmp    c000d5ef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d610:	56                   	push   esi
c000d611:	e8 86 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d616:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d61a:	89 38                	mov    DWORD PTR [eax],edi
c000d61c:	83 c4 1c             	add    esp,0x1c
c000d61f:	31 c0                	xor    eax,eax
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	5f                   	pop    edi
c000d624:	5d                   	pop    ebp
c000d625:	c3                   	ret    

c000d626 <newTerminal(char*)>:
c000d626:	83 ec 28             	sub    esp,0x28
c000d629:	68 60 12 00 00       	push   0x1260
c000d62e:	e8 d9 18 00 00       	call   c000ef0c <operator new(unsigned long)>
c000d633:	5a                   	pop    edx
c000d634:	59                   	pop    ecx
c000d635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d639:	50                   	push   eax
c000d63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63e:	e8 15 fd ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c000d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d647:	83 c4 2c             	add    esp,0x2c
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <TSS::TSS()>:
c000d64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d657:	90                   	nop
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <TSS::setESP(unsigned long)>:
c000d65a:	55                   	push   ebp
c000d65b:	89 e5                	mov    ebp,esp
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d666:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d669:	90                   	nop
c000d66a:	5d                   	pop    ebp
c000d66b:	c3                   	ret    

c000d66c <TSS::flush()>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 10             	sub    esp,0x10
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	8b 00                	mov    eax,DWORD PTR [eax]
c000d677:	83 c8 03             	or     eax,0x3
c000d67a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d67e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d682:	66 89 d0             	mov    ax,dx
c000d685:	0f 00 d8             	ltr    ax
c000d688:	90                   	nop
c000d689:	c9                   	leave  
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <TSS::setup(unsigned long, unsigned long)>:
c000d68c:	55                   	push   ebp
c000d68d:	89 e5                	mov    ebp,esp
c000d68f:	53                   	push   ebx
c000d690:	83 ec 14             	sub    esp,0x14
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	6a 68                	push   0x68
c000d698:	e8 81 e5 ff ff       	call   c000bc1e <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ae:	83 ec 04             	sub    esp,0x4
c000d6b1:	6a 68                	push   0x68
c000d6b3:	6a 00                	push   0x0
c000d6b5:	50                   	push   eax
c000d6b6:	e8 4d 2f ff ff       	call   c0000608 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d71b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d730:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d73d:	e8 23 13 01 00       	call   c001ea65 <CPU::readCR3()>
c000d742:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	50                   	push   eax
c000d74f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d752:	50                   	push   eax
c000d753:	e8 9c dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 68                	push   0x68
c000d760:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d763:	50                   	push   eax
c000d764:	e8 a7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d770:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d773:	83 e0 0f             	and    eax,0xf
c000d776:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d779:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77c:	83 c8 40             	or     eax,0x40
c000d77f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d782:	e8 03 68 00 00       	call   c0013f8a <thisCPU()>
c000d787:	05 78 01 00 00       	add    eax,0x178
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d792:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d795:	50                   	push   eax
c000d796:	e8 a9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 c2                	mov    edx,eax
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	89 10                	mov    DWORD PTR [eax],edx
c000d7a5:	e8 e0 67 00 00       	call   c0013f8a <thisCPU()>
c000d7aa:	05 78 01 00 00       	add    eax,0x178
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	50                   	push   eax
c000d7b3:	e8 d0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	50                   	push   eax
c000d7c4:	68 d0 05 02 c0       	push   0xc00205d0
c000d7c9:	e8 2d 18 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d9:	c9                   	leave  
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7dc:	55                   	push   ebp
c000d7dd:	57                   	push   edi
c000d7de:	56                   	push   esi
c000d7df:	53                   	push   ebx
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7ee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7f2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d7f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7fa:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d7ff:	75 08                	jne    c000d809 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d801:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d807:	eb 5e                	jmp    c000d867 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d809:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d80e:	75 3d                	jne    c000d84d <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	68 ee 05 02 c0       	push   0xc00205ee
c000d818:	e8 de 17 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000d81d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d825:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d82b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d82d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d831:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d835:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d839:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d83d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d841:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d844:	83 c4 1c             	add    esp,0x1c
c000d847:	5b                   	pop    ebx
c000d848:	5e                   	pop    esi
c000d849:	5f                   	pop    edi
c000d84a:	5d                   	pop    ebp
c000d84b:	ff e0                	jmp    eax
c000d84d:	89 c2                	mov    edx,eax
c000d84f:	83 e2 fd             	and    edx,0xfffffffd
c000d852:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d858:	74 a7                	je     c000d801 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d85a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d85f:	83 e0 ef             	and    eax,0xffffffef
c000d862:	83 f8 08             	cmp    eax,0x8
c000d865:	76 9a                	jbe    c000d801 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d867:	83 c4 0c             	add    esp,0xc
c000d86a:	31 c0                	xor    eax,eax
c000d86c:	5b                   	pop    ebx
c000d86d:	5e                   	pop    esi
c000d86e:	5f                   	pop    edi
c000d86f:	5d                   	pop    ebp
c000d870:	c3                   	ret    
c000d871:	90                   	nop

c000d872 <ReservedFilename::isAtty()>:
c000d872:	83 ec 18             	sub    esp,0x18
c000d875:	68 fb 05 02 c0       	push   0xc00205fb
c000d87a:	e8 7c 17 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	31 c0                	xor    eax,eax
c000d884:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d888:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d88f:	75 12                	jne    c000d8a3 <ReservedFilename::isAtty()+0x31>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	68 11 06 02 c0       	push   0xc0020611
c000d899:	e8 5d 17 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	b0 01                	mov    al,0x1
c000d8a3:	83 c4 0c             	add    esp,0xc
c000d8a6:	c3                   	ret    
c000d8a7:	90                   	nop

c000d8a8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d8a8:	55                   	push   ebp
c000d8a9:	57                   	push   edi
c000d8aa:	56                   	push   esi
c000d8ab:	53                   	push   ebx
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d8b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8be:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8c2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8c6:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d8cb:	75 08                	jne    c000d8d5 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8d3:	eb 63                	jmp    c000d938 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8d5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d8da:	75 3d                	jne    c000d919 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	68 24 06 02 c0       	push   0xc0020624
c000d8e4:	e8 12 17 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000d8e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8f9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8fd:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d901:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d905:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d909:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d910:	83 c4 1c             	add    esp,0x1c
c000d913:	5b                   	pop    ebx
c000d914:	5e                   	pop    esi
c000d915:	5f                   	pop    edi
c000d916:	5d                   	pop    ebp
c000d917:	ff e0                	jmp    eax
c000d919:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d91e:	75 04                	jne    c000d924 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d920:	89 33                	mov    DWORD PTR [ebx],esi
c000d922:	eb 14                	jmp    c000d938 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d924:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d929:	74 a2                	je     c000d8cd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d92b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d930:	83 e0 ef             	and    eax,0xffffffef
c000d933:	83 f8 08             	cmp    eax,0x8
c000d936:	76 95                	jbe    c000d8cd <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d938:	83 c4 0c             	add    esp,0xc
c000d93b:	31 c0                	xor    eax,eax
c000d93d:	5b                   	pop    ebx
c000d93e:	5e                   	pop    esi
c000d93f:	5f                   	pop    edi
c000d940:	5d                   	pop    ebp
c000d941:	c3                   	ret    

c000d942 <UnixFile::getFileDescriptor()>:
c000d942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d949:	c3                   	ret    

c000d94a <UnixFile::UnixFile(int)>:
c000d94a:	53                   	push   ebx
c000d94b:	83 ec 18             	sub    esp,0x18
c000d94e:	ba 40 07 02 c0       	mov    edx,0xc0020740
c000d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d957:	89 10                	mov    DWORD PTR [eax],edx
c000d959:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d961:	0f 8f 4d 01 00 00    	jg     c000dab4 <UnixFile::UnixFile(int)+0x16a>
c000d967:	a1 20 2c 02 c0       	mov    eax,ds:0xc0022c20
c000d96c:	8d 50 01             	lea    edx,[eax+0x1]
c000d96f:	89 15 20 2c 02 c0    	mov    DWORD PTR ds:0xc0022c20,edx
c000d975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d979:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d97c:	83 ec 08             	sub    esp,0x8
c000d97f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d983:	68 d8 38 02 c0       	push   0xc00238d8
c000d988:	e8 4d 11 01 00       	call   c001eada <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	a0 d4 38 02 c0       	mov    al,ds:0xc00238d4
c000d995:	83 f0 01             	xor    eax,0x1
c000d998:	84 c0                	test   al,al
c000d99a:	0f 84 15 01 00 00    	je     c000dab5 <UnixFile::UnixFile(int)+0x16b>
c000d9a0:	c6 05 d4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238d4,0x1
c000d9a7:	83 ec 0c             	sub    esp,0xc
c000d9aa:	6a 0c                	push   0xc
c000d9ac:	e8 5b 15 00 00       	call   c000ef0c <operator new(unsigned long)>
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	89 c3                	mov    ebx,eax
c000d9b6:	83 ec 08             	sub    esp,0x8
c000d9b9:	68 03 ff ff 0f       	push   0xfffff03
c000d9be:	53                   	push   ebx
c000d9bf:	e8 f6 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	89 1d cc 38 02 c0    	mov    DWORD PTR ds:0xc00238cc,ebx
c000d9cd:	83 ec 0c             	sub    esp,0xc
c000d9d0:	6a 0c                	push   0xc
c000d9d2:	e8 35 15 00 00       	call   c000ef0c <operator new(unsigned long)>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	89 c3                	mov    ebx,eax
c000d9dc:	83 ec 08             	sub    esp,0x8
c000d9df:	68 01 ff ff 0f       	push   0xfffff01
c000d9e4:	53                   	push   ebx
c000d9e5:	e8 d0 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000d9ea:	83 c4 10             	add    esp,0x10
c000d9ed:	89 1d d0 38 02 c0    	mov    DWORD PTR ds:0xc00238d0,ebx
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	6a 0c                	push   0xc
c000d9f8:	e8 0f 15 00 00       	call   c000ef0c <operator new(unsigned long)>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	89 c3                	mov    ebx,eax
c000da02:	83 ec 08             	sub    esp,0x8
c000da05:	68 00 ff ff 0f       	push   0xfffff00
c000da0a:	53                   	push   ebx
c000da0b:	e8 aa 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da10:	83 c4 10             	add    esp,0x10
c000da13:	89 1d c4 38 02 c0    	mov    DWORD PTR ds:0xc00238c4,ebx
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	6a 0c                	push   0xc
c000da1e:	e8 e9 14 00 00       	call   c000ef0c <operator new(unsigned long)>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	89 c3                	mov    ebx,eax
c000da28:	83 ec 08             	sub    esp,0x8
c000da2b:	68 02 ff ff 0f       	push   0xfffff02
c000da30:	53                   	push   ebx
c000da31:	e8 84 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	89 1d c8 38 02 c0    	mov    DWORD PTR ds:0xc00238c8,ebx
c000da3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da47:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da4c:	7f 67                	jg     c000dab5 <UnixFile::UnixFile(int)+0x16b>
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	6a 0c                	push   0xc
c000da53:	e8 b4 14 00 00       	call   c000ef0c <operator new(unsigned long)>
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	89 c3                	mov    ebx,eax
c000da5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da61:	05 10 ff ff 0f       	add    eax,0xfffff10
c000da66:	83 ec 08             	sub    esp,0x8
c000da69:	50                   	push   eax
c000da6a:	53                   	push   ebx
c000da6b:	e8 4a 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da77:	89 1c 85 a0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc760],ebx
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	6a 0c                	push   0xc
c000da83:	e8 84 14 00 00       	call   c000ef0c <operator new(unsigned long)>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	89 c3                	mov    ebx,eax
c000da8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da91:	05 20 ff ff 0f       	add    eax,0xfffff20
c000da96:	83 ec 08             	sub    esp,0x8
c000da99:	50                   	push   eax
c000da9a:	53                   	push   ebx
c000da9b:	e8 1a 00 00 00       	call   c000daba <ReservedFilename::ReservedFilename(int)>
c000daa0:	83 c4 10             	add    esp,0x10
c000daa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daa7:	89 1c 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],ebx
c000daae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dab2:	eb 93                	jmp    c000da47 <UnixFile::UnixFile(int)+0xfd>
c000dab4:	90                   	nop
c000dab5:	83 c4 18             	add    esp,0x18
c000dab8:	5b                   	pop    ebx
c000dab9:	c3                   	ret    

c000daba <ReservedFilename::ReservedFilename(int)>:
c000daba:	83 ec 0c             	sub    esp,0xc
c000dabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac1:	83 ec 08             	sub    esp,0x8
c000dac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac8:	50                   	push   eax
c000dac9:	e8 7c fe ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	ba 5c 07 02 c0       	mov    edx,0xc002075c
c000dad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dada:	89 10                	mov    DWORD PTR [eax],edx
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dae4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dae7:	90                   	nop
c000dae8:	83 c4 0c             	add    esp,0xc
c000daeb:	c3                   	ret    

c000daec <UnixFile::~UnixFile()>:
c000daec:	83 ec 1c             	sub    esp,0x1c
c000daef:	ba 40 07 02 c0       	mov    edx,0xc0020740
c000daf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf8:	89 10                	mov    DWORD PTR [eax],edx
c000dafa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db01:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000db06:	7f 73                	jg     c000db7b <UnixFile::~UnixFile()+0x8f>
c000db08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	68 d8 38 02 c0       	push   0xc00238d8
c000db18:	e8 91 10 01 00       	call   c001ebae <LinkedList<UnixFile>::getFirstElement()>
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	68 d8 38 02 c0       	push   0xc00238d8
c000db2c:	e8 85 10 01 00       	call   c001ebb6 <LinkedList<UnixFile>::removeFirst()>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db38:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db3c:	74 40                	je     c000db7e <UnixFile::~UnixFile()+0x92>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db45:	68 d8 38 02 c0       	push   0xc00238d8
c000db4a:	e8 8b 0f 01 00       	call   c001eada <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db4f:	83 c4 10             	add    esp,0x10
c000db52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db56:	8d 50 01             	lea    edx,[eax+0x1]
c000db59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db5d:	3d 88 13 00 00       	cmp    eax,0x1388
c000db62:	0f 94 c0             	sete   al
c000db65:	84 c0                	test   al,al
c000db67:	74 a7                	je     c000db10 <UnixFile::~UnixFile()+0x24>
c000db69:	83 ec 0c             	sub    esp,0xc
c000db6c:	68 18 07 02 c0       	push   0xc0020718
c000db71:	e8 1a 71 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	eb 95                	jmp    c000db10 <UnixFile::~UnixFile()+0x24>
c000db7b:	90                   	nop
c000db7c:	eb 01                	jmp    c000db7f <UnixFile::~UnixFile()+0x93>
c000db7e:	90                   	nop
c000db7f:	90                   	nop
c000db80:	83 c4 1c             	add    esp,0x1c
c000db83:	c3                   	ret    

c000db84 <UnixFile::~UnixFile()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8e:	e8 59 ff ff ff       	call   c000daec <UnixFile::~UnixFile()>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	83 ec 08             	sub    esp,0x8
c000db99:	6a 0c                	push   0xc
c000db9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9f:	e8 77 13 00 00       	call   c000ef1b <operator delete(void*, unsigned long)>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	83 c4 0c             	add    esp,0xc
c000dbaa:	c3                   	ret    
c000dbab:	90                   	nop

c000dbac <ReservedFilename::~ReservedFilename()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	ba 5c 07 02 c0       	mov    edx,0xc002075c
c000dbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb8:	89 10                	mov    DWORD PTR [eax],edx
c000dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbe:	83 ec 0c             	sub    esp,0xc
c000dbc1:	50                   	push   eax
c000dbc2:	e8 25 ff ff ff       	call   c000daec <UnixFile::~UnixFile()>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	90                   	nop
c000dbcb:	83 c4 0c             	add    esp,0xc
c000dbce:	c3                   	ret    
c000dbcf:	90                   	nop

c000dbd0 <ReservedFilename::~ReservedFilename()>:
c000dbd0:	83 ec 0c             	sub    esp,0xc
c000dbd3:	83 ec 0c             	sub    esp,0xc
c000dbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbda:	e8 cd ff ff ff       	call   c000dbac <ReservedFilename::~ReservedFilename()>
c000dbdf:	83 c4 10             	add    esp,0x10
c000dbe2:	83 ec 08             	sub    esp,0x8
c000dbe5:	6a 0c                	push   0xc
c000dbe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbeb:	e8 2b 13 00 00       	call   c000ef1b <operator delete(void*, unsigned long)>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	83 c4 0c             	add    esp,0xc
c000dbf6:	c3                   	ret    

c000dbf7 <getFromFileDescriptor(int)>:
c000dbf7:	53                   	push   ebx
c000dbf8:	83 ec 08             	sub    esp,0x8
c000dbfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dc05:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dc0b:	7f 33                	jg     c000dc40 <getFromFileDescriptor(int)+0x49>
c000dc0d:	83 ec 0c             	sub    esp,0xc
c000dc10:	68 d8 38 02 c0       	push   0xc00238d8
c000dc15:	e8 94 0f 01 00       	call   c001ebae <LinkedList<UnixFile>::getFirstElement()>
c000dc1a:	83 c4 10             	add    esp,0x10
c000dc1d:	85 c0                	test   eax,eax
c000dc1f:	75 07                	jne    c000dc28 <getFromFileDescriptor(int)+0x31>
c000dc21:	31 c0                	xor    eax,eax
c000dc23:	e9 98 00 00 00       	jmp    c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc28:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc2b:	0f 84 8f 00 00 00    	je     c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc31:	52                   	push   edx
c000dc32:	52                   	push   edx
c000dc33:	50                   	push   eax
c000dc34:	68 d8 38 02 c0       	push   0xc00238d8
c000dc39:	e8 1a 10 01 00       	call   c001ec58 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc3e:	eb da                	jmp    c000dc1a <getFromFileDescriptor(int)+0x23>
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	68 31 06 02 c0       	push   0xc0020631
c000dc48:	e8 ae 13 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000dc4d:	83 c4 10             	add    esp,0x10
c000dc50:	a1 cc 38 02 c0       	mov    eax,ds:0xc00238cc
c000dc55:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dc5b:	74 63                	je     c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc5d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dc63:	75 17                	jne    c000dc7c <getFromFileDescriptor(int)+0x85>
c000dc65:	83 ec 0c             	sub    esp,0xc
c000dc68:	68 58 06 02 c0       	push   0xc0020658
c000dc6d:	e8 89 13 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000dc72:	a1 d0 38 02 c0       	mov    eax,ds:0xc00238d0
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	eb 44                	jmp    c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc7c:	a1 c8 38 02 c0       	mov    eax,ds:0xc00238c8
c000dc81:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dc87:	74 37                	je     c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc89:	a1 c4 38 02 c0       	mov    eax,ds:0xc00238c4
c000dc8e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dc94:	74 2a                	je     c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dc96:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dc9c:	83 f8 08             	cmp    eax,0x8
c000dc9f:	77 09                	ja     c000dcaa <getFromFileDescriptor(int)+0xb3>
c000dca1:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c000dca8:	eb 16                	jmp    c000dcc0 <getFromFileDescriptor(int)+0xc9>
c000dcaa:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dcb0:	83 fb 08             	cmp    ebx,0x8
c000dcb3:	0f 87 68 ff ff ff    	ja     c000dc21 <getFromFileDescriptor(int)+0x2a>
c000dcb9:	8b 04 9d 60 38 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc7a0]
c000dcc0:	83 c4 08             	add    esp,0x8
c000dcc3:	5b                   	pop    ebx
c000dcc4:	c3                   	ret    

c000dcc5 <__static_initialization_and_destruction_0(int, int)>:
c000dcc5:	83 ec 0c             	sub    esp,0xc
c000dcc8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dccd:	75 34                	jne    c000dd03 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dccf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dcd7:	75 2a                	jne    c000dd03 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcd9:	83 ec 0c             	sub    esp,0xc
c000dcdc:	68 d8 38 02 c0       	push   0xc00238d8
c000dce1:	e8 9c 0d 01 00       	call   c001ea82 <LinkedList<UnixFile>::LinkedList()>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	83 ec 04             	sub    esp,0x4
c000dcec:	68 b4 2b 02 c0       	push   0xc0022bb4
c000dcf1:	68 d8 38 02 c0       	push   0xc00238d8
c000dcf6:	68 80 ea 01 c0       	push   0xc001ea80
c000dcfb:	e8 97 11 00 00       	call   c000ee97 <__cxa_atexit>
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	90                   	nop
c000dd04:	83 c4 0c             	add    esp,0xc
c000dd07:	c3                   	ret    

c000dd08 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	83 ec 08             	sub    esp,0x8
c000dd0e:	68 ff ff 00 00       	push   0xffff
c000dd13:	6a 01                	push   0x1
c000dd15:	e8 ab ff ff ff       	call   c000dcc5 <__static_initialization_and_destruction_0(int, int)>
c000dd1a:	83 c4 10             	add    esp,0x10
c000dd1d:	83 c4 0c             	add    esp,0xc
c000dd20:	c3                   	ret    
c000dd21:	90                   	nop

c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd22:	53                   	push   ebx
c000dd23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd2b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd31:	89 c8                	mov    eax,ecx
c000dd33:	d1 e8                	shr    eax,1
c000dd35:	03 05 28 2c 02 c0    	add    eax,DWORD PTR ds:0xc0022c28
c000dd3b:	83 e1 01             	and    ecx,0x1
c000dd3e:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd40:	75 09                	jne    c000dd4b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd42:	83 e2 f0             	and    edx,0xfffffff0
c000dd45:	09 da                	or     edx,ebx
c000dd47:	88 10                	mov    BYTE PTR [eax],dl
c000dd49:	5b                   	pop    ebx
c000dd4a:	c3                   	ret    
c000dd4b:	c1 e3 04             	shl    ebx,0x4
c000dd4e:	83 e2 0f             	and    edx,0xf
c000dd51:	09 da                	or     edx,ebx
c000dd53:	88 10                	mov    BYTE PTR [eax],dl
c000dd55:	5b                   	pop    ebx
c000dd56:	c3                   	ret    

c000dd57 <Virt::getPageState(unsigned long)>:
c000dd57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd5b:	8b 0d 28 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c28
c000dd61:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd67:	89 d0                	mov    eax,edx
c000dd69:	d1 e8                	shr    eax,1
c000dd6b:	83 e2 01             	and    edx,0x1
c000dd6e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd71:	75 04                	jne    c000dd77 <Virt::getPageState(unsigned long)+0x20>
c000dd73:	83 e0 0f             	and    eax,0xf
c000dd76:	c3                   	ret    
c000dd77:	c0 e8 04             	shr    al,0x4
c000dd7a:	c3                   	ret    

c000dd7b <Virt::allocateKernelVirtualPages(int)>:
c000dd7b:	55                   	push   ebp
c000dd7c:	31 ed                	xor    ebp,ebp
c000dd7e:	57                   	push   edi
c000dd7f:	56                   	push   esi
c000dd80:	53                   	push   ebx
c000dd81:	31 db                	xor    ebx,ebx
c000dd83:	83 ec 1c             	sub    esp,0x1c
c000dd86:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd8a:	8b 3d 24 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c24
c000dd90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dd95:	57                   	push   edi
c000dd96:	e8 bc ff ff ff       	call   c000dd57 <Virt::getPageState(unsigned long)>
c000dd9b:	5a                   	pop    edx
c000dd9c:	84 c0                	test   al,al
c000dd9e:	75 3a                	jne    c000ddda <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dda0:	85 db                	test   ebx,ebx
c000dda2:	75 02                	jne    c000dda6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dda4:	89 fd                	mov    ebp,edi
c000dda6:	43                   	inc    ebx
c000dda7:	39 f3                	cmp    ebx,esi
c000dda9:	74 5a                	je     c000de05 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ddab:	47                   	inc    edi
c000ddac:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ddb2:	76 31                	jbe    c000dde5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ddb4:	c7 05 24 2c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022c24,0xc8000
c000ddbe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddc3:	75 28                	jne    c000dded <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddc5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ddca:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ddcf:	57                   	push   edi
c000ddd0:	e8 82 ff ff ff       	call   c000dd57 <Virt::getPageState(unsigned long)>
c000ddd5:	5a                   	pop    edx
c000ddd6:	84 c0                	test   al,al
c000ddd8:	74 c6                	je     c000dda0 <Virt::allocateKernelVirtualPages(int)+0x25>
c000ddda:	31 db                	xor    ebx,ebx
c000dddc:	47                   	inc    edi
c000dddd:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dde3:	77 cf                	ja     c000ddb4 <Virt::allocateKernelVirtualPages(int)+0x39>
c000dde5:	89 3d 24 2c 02 c0    	mov    DWORD PTR ds:0xc0022c24,edi
c000ddeb:	eb a8                	jmp    c000dd95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dded:	83 ec 0c             	sub    esp,0xc
c000ddf0:	68 70 07 02 c0       	push   0xc0020770
c000ddf5:	e8 96 6e 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000ddfa:	8b 3d 24 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c24
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	eb 90                	jmp    c000dd95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de05:	89 2d 24 2c 02 c0    	mov    DWORD PTR ds:0xc0022c24,ebp
c000de0b:	4b                   	dec    ebx
c000de0c:	74 5f                	je     c000de6d <Virt::allocateKernelVirtualPages(int)+0xf2>
c000de0e:	85 f6                	test   esi,esi
c000de10:	74 3d                	je     c000de4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de12:	89 e8                	mov    eax,ebp
c000de14:	31 db                	xor    ebx,ebx
c000de16:	8d 7e ff             	lea    edi,[esi-0x1]
c000de19:	eb 14                	jmp    c000de2f <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de1b:	6a 01                	push   0x1
c000de1d:	43                   	inc    ebx
c000de1e:	50                   	push   eax
c000de1f:	e8 fe fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de24:	58                   	pop    eax
c000de25:	39 f3                	cmp    ebx,esi
c000de27:	5a                   	pop    edx
c000de28:	74 25                	je     c000de4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de2a:	a1 24 2c 02 c0       	mov    eax,ds:0xc0022c24
c000de2f:	8d 50 01             	lea    edx,[eax+0x1]
c000de32:	85 db                	test   ebx,ebx
c000de34:	89 15 24 2c 02 c0    	mov    DWORD PTR ds:0xc0022c24,edx
c000de3a:	74 20                	je     c000de5c <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de3c:	39 df                	cmp    edi,ebx
c000de3e:	75 db                	jne    c000de1b <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de40:	6a 03                	push   0x3
c000de42:	43                   	inc    ebx
c000de43:	50                   	push   eax
c000de44:	e8 d9 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de49:	59                   	pop    ecx
c000de4a:	39 f3                	cmp    ebx,esi
c000de4c:	58                   	pop    eax
c000de4d:	75 db                	jne    c000de2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de4f:	83 c4 1c             	add    esp,0x1c
c000de52:	89 e8                	mov    eax,ebp
c000de54:	5b                   	pop    ebx
c000de55:	c1 e0 0c             	shl    eax,0xc
c000de58:	5e                   	pop    esi
c000de59:	5f                   	pop    edi
c000de5a:	5d                   	pop    ebp
c000de5b:	c3                   	ret    
c000de5c:	6a 02                	push   0x2
c000de5e:	bb 01 00 00 00       	mov    ebx,0x1
c000de63:	50                   	push   eax
c000de64:	e8 b9 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de69:	58                   	pop    eax
c000de6a:	5a                   	pop    edx
c000de6b:	eb bd                	jmp    c000de2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de6d:	6a 04                	push   0x4
c000de6f:	8d 45 01             	lea    eax,[ebp+0x1]
c000de72:	55                   	push   ebp
c000de73:	a3 24 2c 02 c0       	mov    ds:0xc0022c24,eax
c000de78:	e8 a5 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de7d:	59                   	pop    ecx
c000de7e:	89 e8                	mov    eax,ebp
c000de80:	5b                   	pop    ebx
c000de81:	c1 e0 0c             	shl    eax,0xc
c000de84:	83 c4 1c             	add    esp,0x1c
c000de87:	5b                   	pop    ebx
c000de88:	5e                   	pop    esi
c000de89:	5f                   	pop    edi
c000de8a:	5d                   	pop    ebp
c000de8b:	c3                   	ret    

c000de8c <Virt::virtualMemorySetup()>:
c000de8c:	53                   	push   ebx
c000de8d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de92:	83 ec 08             	sub    esp,0x8
c000de95:	6a 0f                	push   0xf
c000de97:	53                   	push   ebx
c000de98:	43                   	inc    ebx
c000de99:	e8 84 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de9e:	59                   	pop    ecx
c000de9f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dea5:	58                   	pop    eax
c000dea6:	75 ed                	jne    c000de95 <Virt::virtualMemorySetup()+0x9>
c000dea8:	83 ec 08             	sub    esp,0x8
c000deab:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000deb0:	68 00 00 00 c8       	push   0xc8000000
c000deb5:	68 1b 09 02 c0       	push   0xc002091b
c000deba:	e8 3c 11 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000debf:	58                   	pop    eax
c000dec0:	5a                   	pop    edx
c000dec1:	68 00 f0 ff ef       	push   0xeffff000
c000dec6:	68 2f 09 02 c0       	push   0xc002092f
c000decb:	e8 2b 11 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000ded0:	83 c4 10             	add    esp,0x10
c000ded3:	83 ec 08             	sub    esp,0x8
c000ded6:	6a 00                	push   0x0
c000ded8:	53                   	push   ebx
c000ded9:	43                   	inc    ebx
c000deda:	e8 43 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dee8:	75 e9                	jne    c000ded3 <Virt::virtualMemorySetup()+0x47>
c000deea:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000deef:	83 ec 08             	sub    esp,0x8
c000def2:	6a 0f                	push   0xf
c000def4:	53                   	push   ebx
c000def5:	43                   	inc    ebx
c000def6:	e8 27 fe ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000defb:	83 c4 10             	add    esp,0x10
c000defe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000df04:	75 e9                	jne    c000deef <Virt::virtualMemorySetup()+0x63>
c000df06:	83 c4 08             	add    esp,0x8
c000df09:	5b                   	pop    ebx
c000df0a:	c3                   	ret    

c000df0b <Virt::getAKernelVAS()>:
c000df0b:	a1 e4 38 02 c0       	mov    eax,ds:0xc00238e4
c000df10:	c3                   	ret    

c000df11 <Virt::setupPageSwapping(int)>:
c000df11:	57                   	push   edi
c000df12:	56                   	push   esi
c000df13:	53                   	push   ebx
c000df14:	83 ec 1c             	sub    esp,0x1c
c000df17:	68 14 01 00 00       	push   0x114
c000df1c:	e8 eb 0f 00 00       	call   c000ef0c <operator new(unsigned long)>
c000df21:	83 c4 0c             	add    esp,0xc
c000df24:	89 c6                	mov    esi,eax
c000df26:	ff 35 d4 4b 02 c0    	push   DWORD PTR ds:0xc0024bd4
c000df2c:	68 43 09 02 c0       	push   0xc0020943
c000df31:	50                   	push   eax
c000df32:	e8 f3 15 00 00       	call   c000f52a <File::File(char const*, Process*)>
c000df37:	89 34 24             	mov    DWORD PTR [esp],esi
c000df3a:	e8 c7 17 00 00       	call   c000f706 <File::unlink()>
c000df3f:	58                   	pop    eax
c000df40:	5a                   	pop    edx
c000df41:	6a 12                	push   0x12
c000df43:	56                   	push   esi
c000df44:	e8 45 16 00 00       	call   c000f58e <File::open(FileOpenMode)>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	85 c0                	test   eax,eax
c000df4e:	0f 85 bf 00 00 00    	jne    c000e013 <Virt::setupPageSwapping(int)+0x102>
c000df54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df60:	c1 e3 08             	shl    ebx,0x8
c000df63:	83 ec 0c             	sub    esp,0xc
c000df66:	68 00 00 01 00       	push   0x10000
c000df6b:	e8 ae dc ff ff       	call   c000bc1e <malloc>
c000df70:	83 c4 0c             	add    esp,0xc
c000df73:	89 c7                	mov    edi,eax
c000df75:	68 00 00 01 00       	push   0x10000
c000df7a:	6a 00                	push   0x0
c000df7c:	50                   	push   eax
c000df7d:	e8 86 26 ff ff       	call   c0000608 <memset>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	85 db                	test   ebx,ebx
c000df87:	79 03                	jns    c000df8c <Virt::setupPageSwapping(int)+0x7b>
c000df89:	83 c3 0f             	add    ebx,0xf
c000df8c:	c1 fb 04             	sar    ebx,0x4
c000df8f:	4b                   	dec    ebx
c000df90:	83 fb ff             	cmp    ebx,0xffffffff
c000df93:	74 4b                	je     c000dfe0 <Virt::setupPageSwapping(int)+0xcf>
c000df95:	83 ec 0c             	sub    esp,0xc
c000df98:	8b 06                	mov    eax,DWORD PTR [esi]
c000df9a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000df9e:	52                   	push   edx
c000df9f:	57                   	push   edi
c000dfa0:	6a 00                	push   0x0
c000dfa2:	68 00 00 01 00       	push   0x10000
c000dfa7:	56                   	push   esi
c000dfa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfab:	83 c4 20             	add    esp,0x20
c000dfae:	85 c0                	test   eax,eax
c000dfb0:	75 4e                	jne    c000e000 <Virt::setupPageSwapping(int)+0xef>
c000dfb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfb6:	3d 00 00 01 00       	cmp    eax,0x10000
c000dfbb:	74 d2                	je     c000df8f <Virt::setupPageSwapping(int)+0x7e>
c000dfbd:	83 ec 08             	sub    esp,0x8
c000dfc0:	4b                   	dec    ebx
c000dfc1:	50                   	push   eax
c000dfc2:	68 96 09 02 c0       	push   0xc0020996
c000dfc7:	e8 2f 10 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000dfcc:	c7 04 24 9f 09 02 c0 	mov    DWORD PTR [esp],0xc002099f
c000dfd3:	e8 b8 6c 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	83 fb ff             	cmp    ebx,0xffffffff
c000dfde:	75 b5                	jne    c000df95 <Virt::setupPageSwapping(int)+0x84>
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	56                   	push   esi
c000dfe4:	e8 03 16 00 00       	call   c000f5ec <File::close()>
c000dfe9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dfec:	e8 4d dc ff ff       	call   c000bc3e <rfree>
c000dff1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dff4:	8b 06                	mov    eax,DWORD PTR [esi]
c000dff6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dff9:	83 c4 20             	add    esp,0x20
c000dffc:	5b                   	pop    ebx
c000dffd:	5e                   	pop    esi
c000dffe:	5f                   	pop    edi
c000dfff:	c3                   	ret    
c000e000:	83 ec 08             	sub    esp,0x8
c000e003:	50                   	push   eax
c000e004:	68 7e 09 02 c0       	push   0xc002097e
c000e009:	e8 ed 0f 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	eb 9f                	jmp    c000dfb2 <Virt::setupPageSwapping(int)+0xa1>
c000e013:	83 ec 08             	sub    esp,0x8
c000e016:	50                   	push   eax
c000e017:	68 5a 09 02 c0       	push   0xc002095a
c000e01c:	e8 da 0f 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e021:	c7 04 24 63 09 02 c0 	mov    DWORD PTR [esp],0xc0020963
c000e028:	e8 63 6c 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	e9 1f ff ff ff       	jmp    c000df54 <Virt::setupPageSwapping(int)+0x43>
c000e035:	90                   	nop

c000e036 <VAS::VAS()>:
c000e036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e041:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e045:	a3 e4 38 02 c0       	mov    ds:0xc00238e4,eax
c000e04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e04e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e056:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e064:	90                   	nop
c000e065:	c3                   	ret    

c000e066 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e06a:	89 c2                	mov    edx,eax
c000e06c:	c1 e8 0a             	shr    eax,0xa
c000e06f:	c1 ea 16             	shr    edx,0x16
c000e072:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e077:	19 c9                	sbb    ecx,ecx
c000e079:	c1 e2 0c             	shl    edx,0xc
c000e07c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e082:	25 fc 0f 00 00       	and    eax,0xffc
c000e087:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e08e:	01 d0                	add    eax,edx
c000e090:	c3                   	ret    
c000e091:	90                   	nop

c000e092 <VAS::getPageTableEntry(unsigned long)>:
c000e092:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e096:	89 ca                	mov    edx,ecx
c000e098:	c1 e9 0a             	shr    ecx,0xa
c000e09b:	c1 ea 16             	shr    edx,0x16
c000e09e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e0a4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e0aa:	c1 e0 0c             	shl    eax,0xc
c000e0ad:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e0b0:	c3                   	ret    

c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e0b1:	57                   	push   edi
c000e0b2:	56                   	push   esi
c000e0b3:	be 01 00 00 00       	mov    esi,0x1
c000e0b8:	53                   	push   ebx
c000e0b9:	83 ec 10             	sub    esp,0x10
c000e0bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0c0:	c1 eb 0c             	shr    ebx,0xc
c000e0c3:	eb 3f                	jmp    c000e104 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0c5:	e8 41 fe ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	57                   	push   edi
c000e0ce:	50                   	push   eax
c000e0cf:	e8 be ff ff ff       	call   c000e092 <VAS::getPageTableEntry(unsigned long)>
c000e0d4:	83 c4 10             	add    esp,0x10
c000e0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0d9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e0dd:	f6 c4 04             	test   ah,0x4
c000e0e0:	75 5f                	jne    c000e141 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e0e2:	80 fa 04             	cmp    dl,0x4
c000e0e5:	74 78                	je     c000e15f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e0e7:	80 fa 02             	cmp    dl,0x2
c000e0ea:	0f 84 88 00 00 00    	je     c000e178 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e0f0:	80 fa 03             	cmp    dl,0x3
c000e0f3:	0f 84 ad 00 00 00    	je     c000e1a6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e0f9:	fe ca                	dec    dl
c000e0fb:	0f 84 92 00 00 00    	je     c000e193 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e101:	43                   	inc    ebx
c000e102:	31 f6                	xor    esi,esi
c000e104:	53                   	push   ebx
c000e105:	e8 4d fc ff ff       	call   c000dd57 <Virt::getPageState(unsigned long)>
c000e10a:	5f                   	pop    edi
c000e10b:	89 df                	mov    edi,ebx
c000e10d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e111:	c1 e7 0c             	shl    edi,0xc
c000e114:	84 c0                	test   al,al
c000e116:	75 ad                	jne    c000e0c5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	68 a5 09 02 c0       	push   0xc00209a5
c000e120:	e8 6b 6b 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000e125:	e8 e1 fd ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e12a:	5a                   	pop    edx
c000e12b:	59                   	pop    ecx
c000e12c:	57                   	push   edi
c000e12d:	50                   	push   eax
c000e12e:	e8 5f ff ff ff       	call   c000e092 <VAS::getPageTableEntry(unsigned long)>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	8b 00                	mov    eax,DWORD PTR [eax]
c000e138:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e13c:	f6 c4 04             	test   ah,0x4
c000e13f:	74 c0                	je     c000e101 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e141:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e145:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	50                   	push   eax
c000e14e:	e8 eb df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e15a:	80 fa 04             	cmp    dl,0x4
c000e15d:	75 88                	jne    c000e0e7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e15f:	89 f0                	mov    eax,esi
c000e161:	84 c0                	test   al,al
c000e163:	75 47                	jne    c000e1ac <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e165:	c7 44 24 20 90 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020790
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	5b                   	pop    ebx
c000e171:	5e                   	pop    esi
c000e172:	5f                   	pop    edi
c000e173:	e9 18 6b 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c000e178:	89 f0                	mov    eax,esi
c000e17a:	84 c0                	test   al,al
c000e17c:	75 15                	jne    c000e193 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e17e:	83 ec 0c             	sub    esp,0xc
c000e181:	68 c1 09 02 c0       	push   0xc00209c1
c000e186:	e8 05 6b 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000e18b:	83 c4 10             	add    esp,0x10
c000e18e:	e9 6e ff ff ff       	jmp    c000e101 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e193:	83 ec 08             	sub    esp,0x8
c000e196:	6a 00                	push   0x0
c000e198:	53                   	push   ebx
c000e199:	e8 84 fb ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	e9 5b ff ff ff       	jmp    c000e101 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1a6:	89 f0                	mov    eax,esi
c000e1a8:	84 c0                	test   al,al
c000e1aa:	75 15                	jne    c000e1c1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e1ac:	83 ec 08             	sub    esp,0x8
c000e1af:	6a 00                	push   0x0
c000e1b1:	53                   	push   ebx
c000e1b2:	e8 6b fb ff ff       	call   c000dd22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1b7:	83 c4 10             	add    esp,0x10
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	5b                   	pop    ebx
c000e1be:	5e                   	pop    esi
c000e1bf:	5f                   	pop    edi
c000e1c0:	c3                   	ret    
c000e1c1:	c7 44 24 20 dd 09 02 c0 	mov    DWORD PTR [esp+0x20],0xc00209dd
c000e1c9:	83 c4 10             	add    esp,0x10
c000e1cc:	5b                   	pop    ebx
c000e1cd:	5e                   	pop    esi
c000e1ce:	5f                   	pop    edi
c000e1cf:	e9 bc 6a 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>

c000e1d4 <VAS::freeAllocatedPages(unsigned long)>:
c000e1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1dc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e1e0:	74 09                	je     c000e1eb <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e1e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e1e6:	e9 c6 fe ff ff       	jmp    c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1eb:	c7 44 24 04 b4 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207b4
c000e1f3:	e9 03 0e 00 00       	jmp    c000effb <Dbg::kprintf(char const*, ...)>

c000e1f8 <VAS::virtualToPhysical(unsigned long)>:
c000e1f8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e200:	e8 8d fe ff ff       	call   c000e092 <VAS::getPageTableEntry(unsigned long)>
c000e205:	5a                   	pop    edx
c000e206:	8b 00                	mov    eax,DWORD PTR [eax]
c000e208:	59                   	pop    ecx
c000e209:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e20e:	c3                   	ret    
c000e20f:	90                   	nop

c000e210 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e210:	83 ec 0c             	sub    esp,0xc
c000e213:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e21c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e223:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e226:	19 c0                	sbb    eax,eax
c000e228:	83 ca 03             	or     edx,0x3
c000e22b:	83 e0 fc             	and    eax,0xfffffffc
c000e22e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e235:	e8 2b 08 01 00       	call   c001ea65 <CPU::readCR3()>
c000e23a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e23e:	83 c4 0c             	add    esp,0xc
c000e241:	e9 31 08 01 00       	jmp    c001ea77 <CPU::writeCR3(unsigned long)>

c000e246 <VAS::~VAS()>:
c000e246:	83 ec 2c             	sub    esp,0x2c
c000e249:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e251:	e8 8a 99 00 00       	call   c0017be0 <lockScheduler()>
c000e256:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e25b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e25d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e260:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e266:	83 ec 04             	sub    esp,0x4
c000e269:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e26d:	6a 01                	push   0x1
c000e26f:	50                   	push   eax
c000e270:	e8 9b ff ff ff       	call   c000e210 <VAS::mapOtherVASIn(bool, VAS*)>
c000e275:	83 c4 10             	add    esp,0x10
c000e278:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e280:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e288:	0f 8f d7 00 00 00    	jg     c000e365 <VAS::~VAS()+0x11f>
c000e28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e292:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e299:	c1 e2 02             	shl    edx,0x2
c000e29c:	01 d0                	add    eax,edx
c000e29e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a8:	83 e0 01             	and    eax,0x1
c000e2ab:	0f 84 ab 00 00 00    	je     c000e35c <VAS::~VAS()+0x116>
c000e2b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2b9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2c1:	7f 75                	jg     c000e338 <VAS::~VAS()+0xf2>
c000e2c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2c7:	c1 e0 0a             	shl    eax,0xa
c000e2ca:	89 c2                	mov    edx,eax
c000e2cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2d0:	01 d0                	add    eax,edx
c000e2d2:	c1 e0 0c             	shl    eax,0xc
c000e2d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2d9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e2de:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2e3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e2e9:	83 ec 04             	sub    esp,0x4
c000e2ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e2f0:	6a 01                	push   0x1
c000e2f2:	50                   	push   eax
c000e2f3:	e8 6e fd ff ff       	call   c000e066 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e2f8:	83 c4 10             	add    esp,0x10
c000e2fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e303:	8b 00                	mov    eax,DWORD PTR [eax]
c000e305:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e30d:	25 01 04 00 00       	and    eax,0x401
c000e312:	3d 01 04 00 00       	cmp    eax,0x401
c000e317:	75 19                	jne    c000e332 <VAS::~VAS()+0xec>
c000e319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e31d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e322:	83 ec 0c             	sub    esp,0xc
c000e325:	50                   	push   eax
c000e326:	e8 13 de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e32b:	83 c4 10             	add    esp,0x10
c000e32e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e332:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e336:	eb 81                	jmp    c000e2b9 <VAS::~VAS()+0x73>
c000e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33c:	25 00 04 00 00       	and    eax,0x400
c000e341:	74 19                	je     c000e35c <VAS::~VAS()+0x116>
c000e343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e347:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	50                   	push   eax
c000e350:	e8 e9 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e355:	83 c4 10             	add    esp,0x10
c000e358:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e35c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e360:	e9 1b ff ff ff       	jmp    c000e280 <VAS::~VAS()+0x3a>
c000e365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e369:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	50                   	push   eax
c000e370:	e8 3c fd ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e375:	83 c4 10             	add    esp,0x10
c000e378:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e37c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e37f:	83 ec 0c             	sub    esp,0xc
c000e382:	50                   	push   eax
c000e383:	e8 b6 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e388:	83 c4 10             	add    esp,0x10
c000e38b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e38f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e393:	c1 e0 02             	shl    eax,0x2
c000e396:	83 ec 08             	sub    esp,0x8
c000e399:	50                   	push   eax
c000e39a:	68 d8 07 02 c0       	push   0xc00207d8
c000e39f:	e8 57 0c 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e3a4:	83 c4 10             	add    esp,0x10
c000e3a7:	e8 36 98 00 00       	call   c0017be2 <unlockScheduler()>
c000e3ac:	90                   	nop
c000e3ad:	83 c4 2c             	add    esp,0x2c
c000e3b0:	c3                   	ret    
c000e3b1:	90                   	nop

c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e3b2:	55                   	push   ebp
c000e3b3:	57                   	push   edi
c000e3b4:	56                   	push   esi
c000e3b5:	53                   	push   ebx
c000e3b6:	83 ec 1c             	sub    esp,0x1c
c000e3b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3c1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3c7:	77 08                	ja     c000e3d1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e3c9:	0f 20 d8             	mov    eax,cr3
c000e3cc:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e3cf:	75 47                	jne    c000e418 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e3d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3d5:	09 d8                	or     eax,ebx
c000e3d7:	a9 ff 0f 00 00       	test   eax,0xfff
c000e3dc:	75 57                	jne    c000e435 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e3de:	89 de                	mov    esi,ebx
c000e3e0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e3e3:	c1 ee 16             	shr    esi,0x16
c000e3e6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e3ed:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e3f1:	74 54                	je     c000e447 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e3f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3f7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e3fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e401:	c1 e6 0c             	shl    esi,0xc
c000e404:	c1 eb 0a             	shr    ebx,0xa
c000e407:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e40d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e410:	83 c4 1c             	add    esp,0x1c
c000e413:	5b                   	pop    ebx
c000e414:	5e                   	pop    esi
c000e415:	5f                   	pop    edi
c000e416:	5d                   	pop    ebp
c000e417:	c3                   	ret    
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	68 f8 07 02 c0       	push   0xc00207f8
c000e420:	e8 d6 0b 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e42c:	09 d8                	or     eax,ebx
c000e42e:	a9 ff 0f 00 00       	test   eax,0xfff
c000e433:	74 a9                	je     c000e3de <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e435:	83 ec 0c             	sub    esp,0xc
c000e438:	68 60 08 02 c0       	push   0xc0020860
c000e43d:	e8 4e 68 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	eb 97                	jmp    c000e3de <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e447:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e44b:	e8 78 dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e450:	89 c5                	mov    ebp,eax
c000e452:	e8 b4 fa ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e457:	83 ec 0c             	sub    esp,0xc
c000e45a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e45e:	6a 01                	push   0x1
c000e460:	e8 16 f9 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000e465:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e46c:	6a 01                	push   0x1
c000e46e:	50                   	push   eax
c000e46f:	55                   	push   ebp
c000e470:	81 cd 07 04 00 00    	or     ebp,0x407
c000e476:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e47a:	51                   	push   ecx
c000e47b:	e8 1e 02 00 00       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e480:	83 c4 1c             	add    esp,0x1c
c000e483:	68 00 10 00 00       	push   0x1000
c000e488:	6a 00                	push   0x0
c000e48a:	50                   	push   eax
c000e48b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e48f:	e8 74 21 ff ff       	call   c0000608 <memset>
c000e494:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e498:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e49b:	e8 11 fc ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e4a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e4ad:	e9 41 ff ff ff       	jmp    c000e3f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e4b2 <VAS::allocatePages(int, int)>:
c000e4b2:	55                   	push   ebp
c000e4b3:	57                   	push   edi
c000e4b4:	56                   	push   esi
c000e4b5:	53                   	push   ebx
c000e4b6:	83 ec 1c             	sub    esp,0x1c
c000e4b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4bd:	e8 c8 5a 00 00       	call   c0013f8a <thisCPU()>
c000e4c2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4c8:	83 e0 01             	and    eax,0x1
c000e4cb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e4cf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4d3:	0f 85 d7 00 00 00    	jne    c000e5b0 <VAS::allocatePages(int, int)+0xfe>
c000e4d9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e4dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4e0:	85 c0                	test   eax,eax
c000e4e2:	0f 84 ac 00 00 00    	je     c000e594 <VAS::allocatePages(int, int)+0xe2>
c000e4e8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e4ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4f0:	c1 e6 0c             	shl    esi,0xc
c000e4f3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e4f7:	85 c0                	test   eax,eax
c000e4f9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e4fc:	7e 33                	jle    c000e531 <VAS::allocatePages(int, int)+0x7f>
c000e4fe:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e502:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e506:	81 cd 00 04 00 00    	or     ebp,0x400
c000e50c:	e8 b7 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e511:	55                   	push   ebp
c000e512:	53                   	push   ebx
c000e513:	50                   	push   eax
c000e514:	57                   	push   edi
c000e515:	e8 98 fe ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e51a:	83 c4 10             	add    esp,0x10
c000e51d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e522:	74 03                	je     c000e527 <VAS::allocatePages(int, int)+0x75>
c000e524:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e527:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e52d:	39 de                	cmp    esi,ebx
c000e52f:	75 db                	jne    c000e50c <VAS::allocatePages(int, int)+0x5a>
c000e531:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e536:	74 3f                	je     c000e577 <VAS::allocatePages(int, int)+0xc5>
c000e538:	c1 ee 0a             	shr    esi,0xa
c000e53b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e53f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e545:	c1 eb 0a             	shr    ebx,0xa
c000e548:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e54e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e554:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e55a:	39 f3                	cmp    ebx,esi
c000e55c:	77 0d                	ja     c000e56b <VAS::allocatePages(int, int)+0xb9>
c000e55e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e561:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e567:	39 de                	cmp    esi,ebx
c000e569:	73 f3                	jae    c000e55e <VAS::allocatePages(int, int)+0xac>
c000e56b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56f:	83 c4 1c             	add    esp,0x1c
c000e572:	5b                   	pop    ebx
c000e573:	5e                   	pop    esi
c000e574:	5f                   	pop    edi
c000e575:	5d                   	pop    ebp
c000e576:	c3                   	ret    
c000e577:	e8 e9 04 01 00       	call   c001ea65 <CPU::readCR3()>
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	50                   	push   eax
c000e580:	e8 f2 04 01 00       	call   c001ea77 <CPU::writeCR3(unsigned long)>
c000e585:	83 c4 10             	add    esp,0x10
c000e588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e58c:	83 c4 1c             	add    esp,0x1c
c000e58f:	5b                   	pop    ebx
c000e590:	5e                   	pop    esi
c000e591:	5f                   	pop    edi
c000e592:	5d                   	pop    ebp
c000e593:	c3                   	ret    
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	68 84 08 02 c0       	push   0xc0020884
c000e59c:	e8 ef 66 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000e5a1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e5a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5a8:	83 c4 10             	add    esp,0x10
c000e5ab:	e9 38 ff ff ff       	jmp    c000e4e8 <VAS::allocatePages(int, int)+0x36>
c000e5b0:	83 ec 0c             	sub    esp,0xc
c000e5b3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e5b7:	e8 bf f7 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000e5bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5c0:	83 c4 10             	add    esp,0x10
c000e5c3:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e5c8:	0f 87 94 00 00 00    	ja     c000e662 <VAS::allocatePages(int, int)+0x1b0>
c000e5ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e5d2:	85 d2                	test   edx,edx
c000e5d4:	7e 3c                	jle    c000e612 <VAS::allocatePages(int, int)+0x160>
c000e5d6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e5de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5e2:	c1 e5 0c             	shl    ebp,0xc
c000e5e5:	81 ce 00 04 00 00    	or     esi,0x400
c000e5eb:	01 dd                	add    ebp,ebx
c000e5ed:	e8 d6 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e5f2:	56                   	push   esi
c000e5f3:	53                   	push   ebx
c000e5f4:	50                   	push   eax
c000e5f5:	57                   	push   edi
c000e5f6:	e8 b7 fd ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5fb:	83 c4 10             	add    esp,0x10
c000e5fe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e603:	74 03                	je     c000e608 <VAS::allocatePages(int, int)+0x156>
c000e605:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e608:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e60e:	39 dd                	cmp    ebp,ebx
c000e610:	75 db                	jne    c000e5ed <VAS::allocatePages(int, int)+0x13b>
c000e612:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e617:	0f 84 5a ff ff ff    	je     c000e577 <VAS::allocatePages(int, int)+0xc5>
c000e61d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e621:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e625:	89 d3                	mov    ebx,edx
c000e627:	c1 e0 0c             	shl    eax,0xc
c000e62a:	c1 eb 0a             	shr    ebx,0xa
c000e62d:	01 d0                	add    eax,edx
c000e62f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e635:	c1 e8 0a             	shr    eax,0xa
c000e638:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e63e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e643:	2d 00 00 40 00       	sub    eax,0x400000
c000e648:	39 c3                	cmp    ebx,eax
c000e64a:	0f 87 1b ff ff ff    	ja     c000e56b <VAS::allocatePages(int, int)+0xb9>
c000e650:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e653:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e659:	39 d8                	cmp    eax,ebx
c000e65b:	73 f3                	jae    c000e650 <VAS::allocatePages(int, int)+0x19e>
c000e65d:	e9 09 ff ff ff       	jmp    c000e56b <VAS::allocatePages(int, int)+0xb9>
c000e662:	e8 23 59 00 00       	call   c0013f8a <thisCPU()>
c000e667:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e66e:	0f 84 5a ff ff ff    	je     c000e5ce <VAS::allocatePages(int, int)+0x11c>
c000e674:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e67c:	e9 4d ff ff ff       	jmp    c000e5ce <VAS::allocatePages(int, int)+0x11c>
c000e681:	90                   	nop

c000e682 <VAS::setCPUSpecific(unsigned long)>:
c000e682:	83 ec 0c             	sub    esp,0xc
c000e685:	6a 05                	push   0x5
c000e687:	68 00 00 40 c2       	push   0xc2400000
c000e68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e694:	e8 19 fd ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e699:	83 c4 1c             	add    esp,0x1c
c000e69c:	c3                   	ret    
c000e69d:	90                   	nop

c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e69e:	55                   	push   ebp
c000e69f:	57                   	push   edi
c000e6a0:	56                   	push   esi
c000e6a1:	53                   	push   ebx
c000e6a2:	83 ec 1c             	sub    esp,0x1c
c000e6a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e6ad:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e6b1:	e8 d4 58 00 00       	call   c0013f8a <thisCPU()>
c000e6b6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6bc:	83 e0 01             	and    eax,0x1
c000e6bf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6c7:	85 c0                	test   eax,eax
c000e6c9:	7e 39                	jle    c000e704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e6cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6cf:	89 f3                	mov    ebx,esi
c000e6d1:	c1 e0 0c             	shl    eax,0xc
c000e6d4:	01 f0                	add    eax,esi
c000e6d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6da:	55                   	push   ebp
c000e6db:	53                   	push   ebx
c000e6dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6e0:	29 f0                	sub    eax,esi
c000e6e2:	01 d8                	add    eax,ebx
c000e6e4:	50                   	push   eax
c000e6e5:	57                   	push   edi
c000e6e6:	e8 c7 fc ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6f3:	74 03                	je     c000e6f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e6f5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6fe:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e702:	75 d6                	jne    c000e6da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e704:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e709:	74 42                	je     c000e74d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e70b:	89 f3                	mov    ebx,esi
c000e70d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e711:	c1 eb 0a             	shr    ebx,0xa
c000e714:	c1 e0 0c             	shl    eax,0xc
c000e717:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e71d:	01 f0                	add    eax,esi
c000e71f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e725:	c1 e8 0a             	shr    eax,0xa
c000e728:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e72d:	2d 00 00 40 00       	sub    eax,0x400000
c000e732:	39 c3                	cmp    ebx,eax
c000e734:	77 0d                	ja     c000e743 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e736:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e739:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e73f:	39 d8                	cmp    eax,ebx
c000e741:	73 f3                	jae    c000e736 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e743:	83 c4 1c             	add    esp,0x1c
c000e746:	89 f0                	mov    eax,esi
c000e748:	5b                   	pop    ebx
c000e749:	5e                   	pop    esi
c000e74a:	5f                   	pop    edi
c000e74b:	5d                   	pop    ebp
c000e74c:	c3                   	ret    
c000e74d:	e8 13 03 01 00       	call   c001ea65 <CPU::readCR3()>
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	50                   	push   eax
c000e756:	e8 1c 03 01 00       	call   c001ea77 <CPU::writeCR3(unsigned long)>
c000e75b:	89 f0                	mov    eax,esi
c000e75d:	83 c4 10             	add    esp,0x10
c000e760:	83 c4 1c             	add    esp,0x1c
c000e763:	5b                   	pop    ebx
c000e764:	5e                   	pop    esi
c000e765:	5f                   	pop    edi
c000e766:	5d                   	pop    ebp
c000e767:	c3                   	ret    

c000e768 <VAS::VAS(VAS*)>:
c000e768:	53                   	push   ebx
c000e769:	83 ec 38             	sub    esp,0x38
c000e76c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e770:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e777:	e8 8b 94 00 00       	call   c0017c07 <lockStuff()>
c000e77c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e780:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e787:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e78a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e78e:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e791:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e795:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e798:	e8 2b da ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e79d:	89 c2                	mov    edx,eax
c000e79f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e7a6:	e8 60 f7 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e7ab:	89 c3                	mov    ebx,eax
c000e7ad:	83 ec 0c             	sub    esp,0xc
c000e7b0:	6a 01                	push   0x1
c000e7b2:	e8 c4 f5 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	89 c2                	mov    edx,eax
c000e7bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7c3:	83 ec 0c             	sub    esp,0xc
c000e7c6:	6a 03                	push   0x3
c000e7c8:	6a 01                	push   0x1
c000e7ca:	52                   	push   edx
c000e7cb:	50                   	push   eax
c000e7cc:	53                   	push   ebx
c000e7cd:	e8 cc fe ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7d2:	83 c4 20             	add    esp,0x20
c000e7d5:	89 c2                	mov    edx,eax
c000e7d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7de:	83 ec 04             	sub    esp,0x4
c000e7e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7e5:	6a 01                	push   0x1
c000e7e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e7eb:	e8 20 fa ff ff       	call   c000e210 <VAS::mapOtherVASIn(bool, VAS*)>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	83 ec 0c             	sub    esp,0xc
c000e7f6:	6a 01                	push   0x1
c000e7f8:	e8 7e f5 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e804:	83 ec 0c             	sub    esp,0xc
c000e807:	6a 01                	push   0x1
c000e809:	e8 6d f5 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e815:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e81d:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e825:	0f 8f 5e 02 00 00    	jg     c000ea89 <VAS::VAS(VAS*)+0x321>
c000e82b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e830:	8b 00                	mov    eax,DWORD PTR [eax]
c000e832:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e835:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e83b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e83e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e842:	c1 e2 02             	shl    edx,0x2
c000e845:	01 d0                	add    eax,edx
c000e847:	8b 00                	mov    eax,DWORD PTR [eax]
c000e849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e84d:	83 ec 08             	sub    esp,0x8
c000e850:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e854:	68 f7 09 02 c0       	push   0xc00209f7
c000e859:	e8 9d 07 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e865:	25 01 04 00 00       	and    eax,0x401
c000e86a:	3d 01 04 00 00       	cmp    eax,0x401
c000e86f:	0f 85 e5 01 00 00    	jne    c000ea5a <VAS::VAS(VAS*)+0x2f2>
c000e875:	83 ec 0c             	sub    esp,0xc
c000e878:	68 08 0a 02 c0       	push   0xc0020a08
c000e87d:	e8 79 07 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e882:	83 c4 10             	add    esp,0x10
c000e885:	e8 3e d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e88a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e88e:	83 ec 08             	sub    esp,0x8
c000e891:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e895:	68 1e 0a 02 c0       	push   0xc0020a1e
c000e89a:	e8 5c 07 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e89f:	83 c4 10             	add    esp,0x10
c000e8a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e8ab:	89 c1                	mov    ecx,eax
c000e8ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e8b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8b8:	c1 e2 02             	shl    edx,0x2
c000e8bb:	01 c2                	add    edx,eax
c000e8bd:	89 c8                	mov    eax,ecx
c000e8bf:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e8c3:	89 02                	mov    DWORD PTR [edx],eax
c000e8c5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e8cd:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e8d5:	0f 8f a5 01 00 00    	jg     c000ea80 <VAS::VAS(VAS*)+0x318>
c000e8db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8df:	c1 e0 0a             	shl    eax,0xa
c000e8e2:	89 c2                	mov    edx,eax
c000e8e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8e8:	01 d0                	add    eax,edx
c000e8ea:	c1 e0 0c             	shl    eax,0xc
c000e8ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8f1:	83 ec 08             	sub    esp,0x8
c000e8f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e8fc:	e8 91 f7 ff ff       	call   c000e092 <VAS::getPageTableEntry(unsigned long)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	8b 00                	mov    eax,DWORD PTR [eax]
c000e906:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e90a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e90f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e911:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e914:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e91a:	83 ec 04             	sub    esp,0x4
c000e91d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e921:	6a 01                	push   0x1
c000e923:	50                   	push   eax
c000e924:	e8 3d f7 ff ff       	call   c000e066 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e929:	83 c4 10             	add    esp,0x10
c000e92c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e930:	83 ec 04             	sub    esp,0x4
c000e933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e93b:	68 b0 08 02 c0       	push   0xc00208b0
c000e940:	e8 b6 06 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e945:	83 c4 10             	add    esp,0x10
c000e948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94c:	25 01 04 00 00       	and    eax,0x401
c000e951:	3d 01 04 00 00       	cmp    eax,0x401
c000e956:	0f 85 db 00 00 00    	jne    c000ea37 <VAS::VAS(VAS*)+0x2cf>
c000e95c:	83 ec 0c             	sub    esp,0xc
c000e95f:	68 2d 0a 02 c0       	push   0xc0020a2d
c000e964:	e8 92 06 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e969:	83 c4 10             	add    esp,0x10
c000e96c:	e8 57 d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e971:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e975:	83 ec 08             	sub    esp,0x8
c000e978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e97c:	68 3c 0a 02 c0       	push   0xc0020a3c
c000e981:	e8 75 06 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e986:	83 c4 10             	add    esp,0x10
c000e989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e98d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e992:	83 ec 08             	sub    esp,0x8
c000e995:	50                   	push   eax
c000e996:	68 50 0a 02 c0       	push   0xc0020a50
c000e99b:	e8 5b 06 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000e9a0:	83 c4 10             	add    esp,0x10
c000e9a3:	e8 63 f5 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e9a8:	83 ec 0c             	sub    esp,0xc
c000e9ab:	6a 03                	push   0x3
c000e9ad:	6a 01                	push   0x1
c000e9af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e9b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e9b7:	50                   	push   eax
c000e9b8:	e8 e1 fc ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9bd:	83 c4 20             	add    esp,0x20
c000e9c0:	e8 46 f5 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000e9c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9c9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9cf:	83 ec 0c             	sub    esp,0xc
c000e9d2:	6a 03                	push   0x3
c000e9d4:	6a 01                	push   0x1
c000e9d6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e9da:	52                   	push   edx
c000e9db:	50                   	push   eax
c000e9dc:	e8 bd fc ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9e1:	83 c4 20             	add    esp,0x20
c000e9e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ec:	83 ec 04             	sub    esp,0x4
c000e9ef:	68 00 10 00 00       	push   0x1000
c000e9f4:	52                   	push   edx
c000e9f5:	50                   	push   eax
c000e9f6:	e8 d7 1b ff ff       	call   c00005d2 <memcpy>
c000e9fb:	83 c4 10             	add    esp,0x10
c000e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea02:	25 ff 0f 00 00       	and    eax,0xfff
c000ea07:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea0b:	89 c2                	mov    edx,eax
c000ea0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea11:	89 10                	mov    DWORD PTR [eax],edx
c000ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea17:	25 ff 0f 00 00       	and    eax,0xfff
c000ea1c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea20:	83 ec 04             	sub    esp,0x4
c000ea23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea27:	50                   	push   eax
c000ea28:	68 d4 08 02 c0       	push   0xc00208d4
c000ea2d:	e8 c9 05 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000ea32:	83 c4 10             	add    esp,0x10
c000ea35:	eb 1a                	jmp    c000ea51 <VAS::VAS(VAS*)+0x2e9>
c000ea37:	83 ec 0c             	sub    esp,0xc
c000ea3a:	68 64 0a 02 c0       	push   0xc0020a64
c000ea3f:	e8 b7 05 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000ea44:	83 c4 10             	add    esp,0x10
c000ea47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea4f:	89 10                	mov    DWORD PTR [eax],edx
c000ea51:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ea55:	e9 73 fe ff ff       	jmp    c000e8cd <VAS::VAS(VAS*)+0x165>
c000ea5a:	83 ec 0c             	sub    esp,0xc
c000ea5d:	68 68 0a 02 c0       	push   0xc0020a68
c000ea62:	e8 94 05 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea71:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea75:	c1 e2 02             	shl    edx,0x2
c000ea78:	01 c2                	add    edx,eax
c000ea7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea7e:	89 02                	mov    DWORD PTR [edx],eax
c000ea80:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea84:	e9 94 fd ff ff       	jmp    c000e81d <VAS::VAS(VAS*)+0xb5>
c000ea89:	83 ec 0c             	sub    esp,0xc
c000ea8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea90:	e8 1c f6 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	83 ec 0c             	sub    esp,0xc
c000ea9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9f:	e8 0d f6 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000eaa4:	83 c4 10             	add    esp,0x10
c000eaa7:	e8 ed 94 00 00       	call   c0017f99 <unlockStuff()>
c000eaac:	90                   	nop
c000eaad:	83 c4 38             	add    esp,0x38
c000eab0:	5b                   	pop    ebx
c000eab1:	c3                   	ret    

c000eab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000eab2:	55                   	push   ebp
c000eab3:	57                   	push   edi
c000eab4:	56                   	push   esi
c000eab5:	53                   	push   ebx
c000eab6:	83 ec 1c             	sub    esp,0x1c
c000eab9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eabd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eac1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000eac5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eac9:	a9 ff 0f 00 00       	test   eax,0xfff
c000eace:	75 4a                	jne    c000eb1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ead0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ead4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ead7:	c1 eb 16             	shr    ebx,0x16
c000eada:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eae1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eae5:	74 4d                	je     c000eb34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000eae7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaeb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000eaef:	c1 e8 0a             	shr    eax,0xa
c000eaf2:	80 fa 01             	cmp    dl,0x1
c000eaf5:	19 d2                	sbb    edx,edx
c000eaf7:	c1 e3 0c             	shl    ebx,0xc
c000eafa:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eafe:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eb04:	25 fc 0f 00 00       	and    eax,0xffc
c000eb09:	01 d8                	add    eax,ebx
c000eb0b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eb12:	83 c4 1c             	add    esp,0x1c
c000eb15:	5b                   	pop    ebx
c000eb16:	5e                   	pop    esi
c000eb17:	5f                   	pop    edi
c000eb18:	5d                   	pop    ebp
c000eb19:	c3                   	ret    
c000eb1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eb1e:	83 ec 0c             	sub    esp,0xc
c000eb21:	68 f8 08 02 c0       	push   0xc00208f8
c000eb26:	e8 65 61 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000eb2b:	83 c4 10             	add    esp,0x10
c000eb2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb32:	eb 9c                	jmp    c000ead0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eb34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb38:	e8 8b d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb3d:	89 c5                	mov    ebp,eax
c000eb3f:	e8 c7 f3 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000eb44:	83 ec 0c             	sub    esp,0xc
c000eb47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb4b:	6a 01                	push   0x1
c000eb4d:	e8 29 f2 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000eb52:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb59:	6a 01                	push   0x1
c000eb5b:	50                   	push   eax
c000eb5c:	55                   	push   ebp
c000eb5d:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb63:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb67:	51                   	push   ecx
c000eb68:	e8 31 fb ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb6d:	83 c4 1c             	add    esp,0x1c
c000eb70:	68 00 10 00 00       	push   0x1000
c000eb75:	6a 00                	push   0x0
c000eb77:	50                   	push   eax
c000eb78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb7c:	e8 87 1a ff ff       	call   c0000608 <memset>
c000eb81:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eb85:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eb88:	e8 24 f5 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c000eb8d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb90:	83 c4 10             	add    esp,0x10
c000eb93:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eb96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb9a:	e9 48 ff ff ff       	jmp    c000eae7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000eb9f:	90                   	nop

c000eba0 <VAS::VAS(bool)>:
c000eba0:	53                   	push   ebx
c000eba1:	83 ec 28             	sub    esp,0x28
c000eba4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eba8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ebac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebb0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ebb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebbb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ebbf:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ebc2:	e8 01 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ebc7:	89 c2                	mov    edx,eax
c000ebc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebcd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ebd0:	e8 36 f3 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c000ebd5:	89 c3                	mov    ebx,eax
c000ebd7:	83 ec 0c             	sub    esp,0xc
c000ebda:	6a 01                	push   0x1
c000ebdc:	e8 9a f1 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	89 c2                	mov    edx,eax
c000ebe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ebed:	83 ec 0c             	sub    esp,0xc
c000ebf0:	6a 03                	push   0x3
c000ebf2:	6a 01                	push   0x1
c000ebf4:	52                   	push   edx
c000ebf5:	50                   	push   eax
c000ebf6:	53                   	push   ebx
c000ebf7:	e8 a2 fa ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebfc:	83 c4 20             	add    esp,0x20
c000ebff:	89 c2                	mov    edx,eax
c000ec01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec05:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec08:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ec10:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ec18:	7f 1c                	jg     c000ec36 <VAS::VAS(bool)+0x96>
c000ec1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec25:	c1 e2 02             	shl    edx,0x2
c000ec28:	01 d0                	add    eax,edx
c000ec2a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec30:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ec34:	eb da                	jmp    c000ec10 <VAS::VAS(bool)+0x70>
c000ec36:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ec3e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ec46:	7f 71                	jg     c000ecb9 <VAS::VAS(bool)+0x119>
c000ec48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec4c:	2d 00 02 00 00       	sub    eax,0x200
c000ec51:	c1 e0 0c             	shl    eax,0xc
c000ec54:	83 c8 03             	or     eax,0x3
c000ec57:	89 c3                	mov    ebx,eax
c000ec59:	e8 2c 53 00 00       	call   c0013f8a <thisCPU()>
c000ec5e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec64:	83 e0 10             	and    eax,0x10
c000ec67:	84 c0                	test   al,al
c000ec69:	74 07                	je     c000ec72 <VAS::VAS(bool)+0xd2>
c000ec6b:	b8 00 01 00 00       	mov    eax,0x100
c000ec70:	eb 05                	jmp    c000ec77 <VAS::VAS(bool)+0xd7>
c000ec72:	b8 00 00 00 00       	mov    eax,0x0
c000ec77:	09 d8                	or     eax,ebx
c000ec79:	89 c1                	mov    ecx,eax
c000ec7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec86:	c1 e2 02             	shl    edx,0x2
c000ec89:	01 d0                	add    eax,edx
c000ec8b:	89 ca                	mov    edx,ecx
c000ec8d:	89 10                	mov    DWORD PTR [eax],edx
c000ec8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec93:	2d 40 03 00 00       	sub    eax,0x340
c000ec98:	83 f8 7f             	cmp    eax,0x7f
c000ec9b:	77 16                	ja     c000ecb3 <VAS::VAS(bool)+0x113>
c000ec9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eca4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eca8:	c1 e2 02             	shl    edx,0x2
c000ecab:	01 d0                	add    eax,edx
c000ecad:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ecb3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ecb7:	eb 85                	jmp    c000ec3e <VAS::VAS(bool)+0x9e>
c000ecb9:	e8 cc 52 00 00       	call   c0013f8a <thisCPU()>
c000ecbe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecc4:	83 e0 10             	and    eax,0x10
c000ecc7:	84 c0                	test   al,al
c000ecc9:	74 07                	je     c000ecd2 <VAS::VAS(bool)+0x132>
c000eccb:	b8 03 41 00 00       	mov    eax,0x4103
c000ecd0:	eb 05                	jmp    c000ecd7 <VAS::VAS(bool)+0x137>
c000ecd2:	b8 03 40 00 00       	mov    eax,0x4003
c000ecd7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ecdb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ecde:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ece4:	89 02                	mov    DWORD PTR [edx],eax
c000ece6:	e8 9f 52 00 00       	call   c0013f8a <thisCPU()>
c000eceb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ecf1:	83 ec 08             	sub    esp,0x8
c000ecf4:	50                   	push   eax
c000ecf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ecf9:	e8 84 f9 ff ff       	call   c000e682 <VAS::setCPUSpecific(unsigned long)>
c000ecfe:	83 c4 10             	add    esp,0x10
c000ed01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed05:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ed08:	e8 7d 52 00 00       	call   c0013f8a <thisCPU()>
c000ed0d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed13:	83 e0 10             	and    eax,0x10
c000ed16:	84 c0                	test   al,al
c000ed18:	74 07                	je     c000ed21 <VAS::VAS(bool)+0x181>
c000ed1a:	b8 00 01 00 00       	mov    eax,0x100
c000ed1f:	eb 05                	jmp    c000ed26 <VAS::VAS(bool)+0x186>
c000ed21:	b8 00 00 00 00       	mov    eax,0x0
c000ed26:	09 d8                	or     eax,ebx
c000ed28:	89 c2                	mov    edx,eax
c000ed2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed31:	05 fc 0f 00 00       	add    eax,0xffc
c000ed36:	83 ca 03             	or     edx,0x3
c000ed39:	89 10                	mov    DWORD PTR [eax],edx
c000ed3b:	e8 4a 52 00 00       	call   c0013f8a <thisCPU()>
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	50                   	push   eax
c000ed44:	e8 9f 19 00 00       	call   c00106e8 <Device::getName()>
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	83 ec 08             	sub    esp,0x8
c000ed4f:	68 78 0a 02 c0       	push   0xc0020a78
c000ed54:	50                   	push   eax
c000ed55:	e8 9e 19 ff ff       	call   c00006f8 <strcmp>
c000ed5a:	83 c4 10             	add    esp,0x10
c000ed5d:	85 c0                	test   eax,eax
c000ed5f:	0f 94 c0             	sete   al
c000ed62:	84 c0                	test   al,al
c000ed64:	74 64                	je     c000edca <VAS::VAS(bool)+0x22a>
c000ed66:	e8 58 8e 00 00       	call   c0017bc3 <disableIRQs()>
c000ed6b:	e8 1a 52 00 00       	call   c0013f8a <thisCPU()>
c000ed70:	05 7c 09 00 00       	add    eax,0x97c
c000ed75:	83 ec 0c             	sub    esp,0xc
c000ed78:	50                   	push   eax
c000ed79:	e8 12 c9 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed7e:	83 c4 10             	add    esp,0x10
c000ed81:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed86:	89 c3                	mov    ebx,eax
c000ed88:	e8 fd 51 00 00       	call   c0013f8a <thisCPU()>
c000ed8d:	05 7c 09 00 00       	add    eax,0x97c
c000ed92:	83 ec 0c             	sub    esp,0xc
c000ed95:	50                   	push   eax
c000ed96:	e8 f5 c8 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	83 ec 08             	sub    esp,0x8
c000eda1:	50                   	push   eax
c000eda2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eda6:	e8 e7 f2 ff ff       	call   c000e092 <VAS::getPageTableEntry(unsigned long)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000edb5:	6a 11                	push   0x11
c000edb7:	53                   	push   ebx
c000edb8:	50                   	push   eax
c000edb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edbd:	e8 f0 f5 ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000edc2:	83 c4 10             	add    esp,0x10
c000edc5:	e8 07 8e 00 00       	call   c0017bd1 <enableIRQs()>
c000edca:	90                   	nop
c000edcb:	83 c4 28             	add    esp,0x28
c000edce:	5b                   	pop    ebx
c000edcf:	c3                   	ret    

c000edd0 <mapVASFirstTime>:
c000edd0:	55                   	push   ebp
c000edd1:	57                   	push   edi
c000edd2:	56                   	push   esi
c000edd3:	53                   	push   ebx
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eddc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eddf:	4a                   	dec    edx
c000ede0:	0f 84 99 00 00 00    	je     c000ee7f <mapVASFirstTime+0xaf>
c000ede6:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ede9:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000edec:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000edf1:	c1 e5 15             	shl    ebp,0x15
c000edf4:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000edf9:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000edff:	29 eb                	sub    ebx,ebp
c000ee01:	29 ee                	sub    esi,ebp
c000ee03:	e8 c0 d3 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	68 03 04 00 00       	push   0x403
c000ee10:	6a 01                	push   0x1
c000ee12:	53                   	push   ebx
c000ee13:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ee19:	50                   	push   eax
c000ee1a:	57                   	push   edi
c000ee1b:	e8 7e f8 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee20:	83 c4 20             	add    esp,0x20
c000ee23:	39 f3                	cmp    ebx,esi
c000ee25:	75 dc                	jne    c000ee03 <mapVASFirstTime+0x33>
c000ee27:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ee2c:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ee31:	29 ee                	sub    esi,ebp
c000ee33:	29 e8                	sub    eax,ebp
c000ee35:	89 c5                	mov    ebp,eax
c000ee37:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ee3b:	19 db                	sbb    ebx,ebx
c000ee3d:	e8 86 d3 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000ee42:	83 e3 04             	and    ebx,0x4
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	81 c3 03 04 00 00    	add    ebx,0x403
c000ee4e:	53                   	push   ebx
c000ee4f:	6a 01                	push   0x1
c000ee51:	56                   	push   esi
c000ee52:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee58:	50                   	push   eax
c000ee59:	57                   	push   edi
c000ee5a:	e8 3f f8 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee5f:	83 c4 20             	add    esp,0x20
c000ee62:	39 f5                	cmp    ebp,esi
c000ee64:	75 d1                	jne    c000ee37 <mapVASFirstTime+0x67>
c000ee66:	e8 fa fb 00 00       	call   c001ea65 <CPU::readCR3()>
c000ee6b:	83 ec 0c             	sub    esp,0xc
c000ee6e:	50                   	push   eax
c000ee6f:	e8 03 fc 00 00       	call   c001ea77 <CPU::writeCR3(unsigned long)>
c000ee74:	83 c4 10             	add    esp,0x10
c000ee77:	83 c4 0c             	add    esp,0xc
c000ee7a:	5b                   	pop    ebx
c000ee7b:	5e                   	pop    esi
c000ee7c:	5f                   	pop    edi
c000ee7d:	5d                   	pop    ebp
c000ee7e:	c3                   	ret    
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	68 86 0a 02 c0       	push   0xc0020a86
c000ee87:	e8 6f 01 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	83 c4 0c             	add    esp,0xc
c000ee92:	5b                   	pop    ebx
c000ee93:	5e                   	pop    esi
c000ee94:	5f                   	pop    edi
c000ee95:	5d                   	pop    ebp
c000ee96:	c3                   	ret    

c000ee97 <__cxa_atexit>:
c000ee97:	31 c0                	xor    eax,eax
c000ee99:	c3                   	ret    

c000ee9a <__cxa_finalize>:
c000ee9a:	c3                   	ret    

c000ee9b <__stack_chk_fail>:
c000ee9b:	55                   	push   ebp
c000ee9c:	89 e5                	mov    ebp,esp
c000ee9e:	83 ec 10             	sub    esp,0x10
c000eea1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000eea4:	68 9f 0a 02 c0       	push   0xc0020a9f
c000eea9:	e8 4d 01 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000eeae:	58                   	pop    eax
c000eeaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eeb2:	5a                   	pop    edx
c000eeb3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eeb6:	68 9f 0a 02 c0       	push   0xc0020a9f
c000eebb:	e8 3b 01 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000eec0:	59                   	pop    ecx
c000eec1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eec4:	5a                   	pop    edx
c000eec5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eeca:	68 9f 0a 02 c0       	push   0xc0020a9f
c000eecf:	e8 27 01 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000eed4:	59                   	pop    ecx
c000eed5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eed8:	5a                   	pop    edx
c000eed9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eedb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eedd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eee0:	68 9f 0a 02 c0       	push   0xc0020a9f
c000eee5:	e8 11 01 00 00       	call   c000effb <Dbg::kprintf(char const*, ...)>
c000eeea:	c7 04 24 a7 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa7
c000eef1:	e8 9a 5d 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000eef6:	83 c4 10             	add    esp,0x10
c000eef9:	c9                   	leave  
c000eefa:	c3                   	ret    

c000eefb <__cxa_pure_virtual>:
c000eefb:	83 ec 18             	sub    esp,0x18
c000eefe:	68 bf 0a 02 c0       	push   0xc0020abf
c000ef03:	e8 88 5d 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c000ef08:	83 c4 1c             	add    esp,0x1c
c000ef0b:	c3                   	ret    

c000ef0c <operator new(unsigned long)>:
c000ef0c:	e9 0d cd ff ff       	jmp    c000bc1e <malloc>

c000ef11 <operator new[](unsigned long)>:
c000ef11:	e9 08 cd ff ff       	jmp    c000bc1e <malloc>

c000ef16 <operator delete(void*)>:
c000ef16:	e9 23 cd ff ff       	jmp    c000bc3e <rfree>

c000ef1b <operator delete(void*, unsigned long)>:
c000ef1b:	e9 1e cd ff ff       	jmp    c000bc3e <rfree>

c000ef20 <operator delete[](void*)>:
c000ef20:	e9 19 cd ff ff       	jmp    c000bc3e <rfree>

c000ef25 <operator delete[](void*, unsigned long)>:
c000ef25:	e9 14 cd ff ff       	jmp    c000bc3e <rfree>

c000ef2a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ef2a:	57                   	push   edi
c000ef2b:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ef30:	56                   	push   esi
c000ef31:	be d4 0a 02 c0       	mov    esi,0xc0020ad4
c000ef36:	53                   	push   ebx
c000ef37:	83 ec 40             	sub    esp,0x40
c000ef3a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ef3e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ef42:	fc                   	cld    
c000ef43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef45:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ef49:	83 f9 3e             	cmp    ecx,0x3e
c000ef4c:	7e 05                	jle    c000ef53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ef4e:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ef53:	89 df                	mov    edi,ebx
c000ef55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef59:	eb 02                	jmp    c000ef5d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef5b:	89 c7                	mov    edi,eax
c000ef5d:	31 d2                	xor    edx,edx
c000ef5f:	46                   	inc    esi
c000ef60:	89 f8                	mov    eax,edi
c000ef62:	f7 f1                	div    ecx
c000ef64:	39 cf                	cmp    edi,ecx
c000ef66:	73 f3                	jae    c000ef5b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ef68:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ef6b:	eb 02                	jmp    c000ef6f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ef6d:	89 c3                	mov    ebx,eax
c000ef6f:	31 d2                	xor    edx,edx
c000ef71:	4e                   	dec    esi
c000ef72:	89 d8                	mov    eax,ebx
c000ef74:	f7 f1                	div    ecx
c000ef76:	39 cb                	cmp    ebx,ecx
c000ef78:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ef7c:	88 16                	mov    BYTE PTR [esi],dl
c000ef7e:	73 ed                	jae    c000ef6d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ef80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef84:	83 c4 40             	add    esp,0x40
c000ef87:	5b                   	pop    ebx
c000ef88:	5e                   	pop    esi
c000ef89:	5f                   	pop    edi
c000ef8a:	c3                   	ret    

c000ef8b <Dbg::logc(char)>:
c000ef8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef8f:	ba fd 03 00 00       	mov    edx,0x3fd
c000ef94:	ec                   	in     al,dx
c000ef95:	a8 20                	test   al,0x20
c000ef97:	74 fb                	je     c000ef94 <Dbg::logc(char)+0x9>
c000ef99:	ba f8 03 00 00       	mov    edx,0x3f8
c000ef9e:	88 c8                	mov    al,cl
c000efa0:	ee                   	out    dx,al
c000efa1:	c3                   	ret    

c000efa2 <Dbg::logs(char*)>:
c000efa2:	53                   	push   ebx
c000efa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000efa7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efaa:	84 c0                	test   al,al
c000efac:	74 0f                	je     c000efbd <Dbg::logs(char*)+0x1b>
c000efae:	50                   	push   eax
c000efaf:	43                   	inc    ebx
c000efb0:	e8 d6 ff ff ff       	call   c000ef8b <Dbg::logc(char)>
c000efb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efb8:	5a                   	pop    edx
c000efb9:	84 c0                	test   al,al
c000efbb:	75 f1                	jne    c000efae <Dbg::logs(char*)+0xc>
c000efbd:	5b                   	pop    ebx
c000efbe:	c3                   	ret    

c000efbf <Dbg::logWriteInt(unsigned int)>:
c000efbf:	83 ec 10             	sub    esp,0x10
c000efc2:	6a 0a                	push   0xa
c000efc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efc8:	50                   	push   eax
c000efc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efcd:	e8 58 ff ff ff       	call   c000ef2a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000efd2:	50                   	push   eax
c000efd3:	e8 ca ff ff ff       	call   c000efa2 <Dbg::logs(char*)>
c000efd8:	83 c4 20             	add    esp,0x20
c000efdb:	c3                   	ret    

c000efdc <Dbg::logWriteIntBase(unsigned int, int)>:
c000efdc:	83 ec 10             	sub    esp,0x10
c000efdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efe3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efe7:	50                   	push   eax
c000efe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efec:	e8 39 ff ff ff       	call   c000ef2a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000eff1:	50                   	push   eax
c000eff2:	e8 ab ff ff ff       	call   c000efa2 <Dbg::logs(char*)>
c000eff7:	83 c4 20             	add    esp,0x20
c000effa:	c3                   	ret    

c000effb <Dbg::kprintf(char const*, ...)>:
c000effb:	55                   	push   ebp
c000effc:	57                   	push   edi
c000effd:	56                   	push   esi
c000effe:	53                   	push   ebx
c000efff:	83 ec 0c             	sub    esp,0xc
c000f002:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f006:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f00a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f00e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f011:	84 c0                	test   al,al
c000f013:	74 4a                	je     c000f05f <Dbg::kprintf(char const*, ...)+0x64>
c000f015:	31 db                	xor    ebx,ebx
c000f017:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f01a:	3c 25                	cmp    al,0x25
c000f01c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f01f:	0f 85 e4 00 00 00    	jne    c000f109 <Dbg::kprintf(char const*, ...)+0x10e>
c000f025:	83 c3 02             	add    ebx,0x2
c000f028:	8a 07                	mov    al,BYTE PTR [edi]
c000f02a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f02d:	83 e8 25             	sub    eax,0x25
c000f030:	3c 53                	cmp    al,0x53
c000f032:	0f 87 ba 00 00 00    	ja     c000f0f2 <Dbg::kprintf(char const*, ...)+0xf7>
c000f038:	0f b6 c0             	movzx  eax,al
c000f03b:	ff 24 85 14 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf4ec]
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	89 c8                	mov    eax,ecx
c000f048:	83 c1 04             	add    ecx,0x4
c000f04b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f04f:	ff 30                	push   DWORD PTR [eax]
c000f051:	e8 4c ff ff ff       	call   c000efa2 <Dbg::logs(char*)>
c000f056:	58                   	pop    eax
c000f057:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f05b:	84 c0                	test   al,al
c000f05d:	75 b8                	jne    c000f017 <Dbg::kprintf(char const*, ...)+0x1c>
c000f05f:	83 c4 0c             	add    esp,0xc
c000f062:	5b                   	pop    ebx
c000f063:	5e                   	pop    esi
c000f064:	5f                   	pop    edi
c000f065:	5d                   	pop    ebp
c000f066:	c3                   	ret    
c000f067:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f06b:	89 d0                	mov    eax,edx
c000f06d:	83 c2 04             	add    edx,0x4
c000f070:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f074:	ff 30                	push   DWORD PTR [eax]
c000f076:	e8 44 ff ff ff       	call   c000efbf <Dbg::logWriteInt(unsigned int)>
c000f07b:	58                   	pop    eax
c000f07c:	eb d9                	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f07e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f082:	89 d0                	mov    eax,edx
c000f084:	83 c2 04             	add    edx,0x4
c000f087:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f08a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f08e:	50                   	push   eax
c000f08f:	e8 f7 fe ff ff       	call   c000ef8b <Dbg::logc(char)>
c000f094:	58                   	pop    eax
c000f095:	eb c0                	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f097:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f09b:	89 c8                	mov    eax,ecx
c000f09d:	83 c1 04             	add    ecx,0x4
c000f0a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0a4:	ff 30                	push   DWORD PTR [eax]
c000f0a6:	e8 14 ff ff ff       	call   c000efbf <Dbg::logWriteInt(unsigned int)>
c000f0ab:	5f                   	pop    edi
c000f0ac:	eb a9                	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0b2:	89 c8                	mov    eax,ecx
c000f0b4:	83 c1 04             	add    ecx,0x4
c000f0b7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0bb:	6a 10                	push   0x10
c000f0bd:	ff 30                	push   DWORD PTR [eax]
c000f0bf:	e8 18 ff ff ff       	call   c000efdc <Dbg::logWriteIntBase(unsigned int, int)>
c000f0c4:	59                   	pop    ecx
c000f0c5:	5f                   	pop    edi
c000f0c6:	eb 8f                	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0cc:	89 d0                	mov    eax,edx
c000f0ce:	83 c2 08             	add    edx,0x8
c000f0d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0d5:	6a 10                	push   0x10
c000f0d7:	ff 30                	push   DWORD PTR [eax]
c000f0d9:	e8 fe fe ff ff       	call   c000efdc <Dbg::logWriteIntBase(unsigned int, int)>
c000f0de:	58                   	pop    eax
c000f0df:	5a                   	pop    edx
c000f0e0:	e9 72 ff ff ff       	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0e5:	6a 25                	push   0x25
c000f0e7:	e8 9f fe ff ff       	call   c000ef8b <Dbg::logc(char)>
c000f0ec:	58                   	pop    eax
c000f0ed:	e9 65 ff ff ff       	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0f2:	6a 25                	push   0x25
c000f0f4:	e8 92 fe ff ff       	call   c000ef8b <Dbg::logc(char)>
c000f0f9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f0fc:	50                   	push   eax
c000f0fd:	e8 89 fe ff ff       	call   c000ef8b <Dbg::logc(char)>
c000f102:	5a                   	pop    edx
c000f103:	59                   	pop    ecx
c000f104:	e9 4e ff ff ff       	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f109:	50                   	push   eax
c000f10a:	89 eb                	mov    ebx,ebp
c000f10c:	e8 7a fe ff ff       	call   c000ef8b <Dbg::logc(char)>
c000f111:	89 fd                	mov    ebp,edi
c000f113:	58                   	pop    eax
c000f114:	e9 3e ff ff ff       	jmp    c000f057 <Dbg::kprintf(char const*, ...)+0x5c>
c000f119:	90                   	nop

c000f11a <File::read(unsigned long long, void*, int*)>:
c000f11a:	53                   	push   ebx
c000f11b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f11f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f123:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f12a:	3c 19                	cmp    al,0x19
c000f12c:	77 35                	ja     c000f163 <File::read(unsigned long long, void*, int*)+0x49>
c000f12e:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c000f135:	85 c0                	test   eax,eax
c000f137:	74 2a                	je     c000f163 <File::read(unsigned long long, void*, int*)+0x49>
c000f139:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f13f:	85 c0                	test   eax,eax
c000f141:	74 20                	je     c000f163 <File::read(unsigned long long, void*, int*)+0x49>
c000f143:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f147:	74 21                	je     c000f16a <File::read(unsigned long long, void*, int*)+0x50>
c000f149:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f14b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f14f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f155:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f15d:	5b                   	pop    ebx
c000f15e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f161:	ff e0                	jmp    eax
c000f163:	b8 0b 00 00 00       	mov    eax,0xb
c000f168:	eb 05                	jmp    c000f16f <File::read(unsigned long long, void*, int*)+0x55>
c000f16a:	b8 05 00 00 00       	mov    eax,0x5
c000f16f:	5b                   	pop    ebx
c000f170:	c3                   	ret    
c000f171:	90                   	nop

c000f172 <File::write(unsigned long long, void*, int*)>:
c000f172:	53                   	push   ebx
c000f173:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f177:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f17b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f182:	3c 19                	cmp    al,0x19
c000f184:	77 35                	ja     c000f1bb <File::write(unsigned long long, void*, int*)+0x49>
c000f186:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c000f18d:	85 c0                	test   eax,eax
c000f18f:	74 2a                	je     c000f1bb <File::write(unsigned long long, void*, int*)+0x49>
c000f191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f197:	85 c0                	test   eax,eax
c000f199:	74 20                	je     c000f1bb <File::write(unsigned long long, void*, int*)+0x49>
c000f19b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f19f:	74 21                	je     c000f1c2 <File::write(unsigned long long, void*, int*)+0x50>
c000f1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1b5:	5b                   	pop    ebx
c000f1b6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f1b9:	ff e0                	jmp    eax
c000f1bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f1c0:	eb 05                	jmp    c000f1c7 <File::write(unsigned long long, void*, int*)+0x55>
c000f1c2:	b8 05 00 00 00       	mov    eax,0x5
c000f1c7:	5b                   	pop    ebx
c000f1c8:	c3                   	ret    
c000f1c9:	90                   	nop

c000f1ca <Directory::read(unsigned long long, void*, int*)>:
c000f1ca:	53                   	push   ebx
c000f1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f1da:	3c 19                	cmp    al,0x19
c000f1dc:	77 35                	ja     c000f213 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1de:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c000f1e5:	85 c0                	test   eax,eax
c000f1e7:	74 2a                	je     c000f213 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f1ef:	85 c0                	test   eax,eax
c000f1f1:	74 20                	je     c000f213 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f1f7:	74 21                	je     c000f21a <Directory::read(unsigned long long, void*, int*)+0x50>
c000f1f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f209:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f20d:	5b                   	pop    ebx
c000f20e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f211:	ff e0                	jmp    eax
c000f213:	b8 0b 00 00 00       	mov    eax,0xb
c000f218:	eb 05                	jmp    c000f21f <Directory::read(unsigned long long, void*, int*)+0x55>
c000f21a:	b8 05 00 00 00       	mov    eax,0x5
c000f21f:	5b                   	pop    ebx
c000f220:	c3                   	ret    
c000f221:	90                   	nop

c000f222 <Directory::write(unsigned long long, void*, int*)>:
c000f222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f226:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f22d:	b8 0b 00 00 00       	mov    eax,0xb
c000f232:	80 fa 19             	cmp    dl,0x19
c000f235:	77 18                	ja     c000f24f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f237:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000f23e:	85 d2                	test   edx,edx
c000f240:	74 0d                	je     c000f24f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f242:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f249:	19 c0                	sbb    eax,eax
c000f24b:	83 e0 0a             	and    eax,0xa
c000f24e:	40                   	inc    eax
c000f24f:	c3                   	ret    

c000f250 <File::isAtty()>:
c000f250:	31 c0                	xor    eax,eax
c000f252:	c3                   	ret    
c000f253:	90                   	nop

c000f254 <Directory::isAtty()>:
c000f254:	31 c0                	xor    eax,eax
c000f256:	c3                   	ret    
c000f257:	90                   	nop

c000f258 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f258:	b8 0a 00 00 00       	mov    eax,0xa
c000f25d:	c3                   	ret    

c000f25e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f25e:	b8 0a 00 00 00       	mov    eax,0xa
c000f263:	c3                   	ret    

c000f264 <File::~File()>:
c000f264:	83 ec 0c             	sub    esp,0xc
c000f267:	ba d0 0c 02 c0       	mov    edx,0xc0020cd0
c000f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f270:	89 10                	mov    DWORD PTR [eax],edx
c000f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f276:	83 ec 0c             	sub    esp,0xc
c000f279:	50                   	push   eax
c000f27a:	e8 6d e8 ff ff       	call   c000daec <UnixFile::~UnixFile()>
c000f27f:	83 c4 10             	add    esp,0x10
c000f282:	90                   	nop
c000f283:	83 c4 0c             	add    esp,0xc
c000f286:	c3                   	ret    
c000f287:	90                   	nop

c000f288 <File::~File()>:
c000f288:	83 ec 0c             	sub    esp,0xc
c000f28b:	83 ec 0c             	sub    esp,0xc
c000f28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f292:	e8 cd ff ff ff       	call   c000f264 <File::~File()>
c000f297:	83 c4 10             	add    esp,0x10
c000f29a:	83 ec 08             	sub    esp,0x8
c000f29d:	68 14 01 00 00       	push   0x114
c000f2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2a6:	e8 70 fc ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000f2ab:	83 c4 10             	add    esp,0x10
c000f2ae:	83 c4 0c             	add    esp,0xc
c000f2b1:	c3                   	ret    

c000f2b2 <Directory::~Directory()>:
c000f2b2:	83 ec 0c             	sub    esp,0xc
c000f2b5:	ba ec 0c 02 c0       	mov    edx,0xc0020cec
c000f2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2be:	89 10                	mov    DWORD PTR [eax],edx
c000f2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2c4:	83 ec 0c             	sub    esp,0xc
c000f2c7:	50                   	push   eax
c000f2c8:	e8 1f e8 ff ff       	call   c000daec <UnixFile::~UnixFile()>
c000f2cd:	83 c4 10             	add    esp,0x10
c000f2d0:	90                   	nop
c000f2d1:	83 c4 0c             	add    esp,0xc
c000f2d4:	c3                   	ret    
c000f2d5:	90                   	nop

c000f2d6 <Directory::~Directory()>:
c000f2d6:	83 ec 0c             	sub    esp,0xc
c000f2d9:	83 ec 0c             	sub    esp,0xc
c000f2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2e0:	e8 cd ff ff ff       	call   c000f2b2 <Directory::~Directory()>
c000f2e5:	83 c4 10             	add    esp,0x10
c000f2e8:	83 ec 08             	sub    esp,0x8
c000f2eb:	68 14 01 00 00       	push   0x114
c000f2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2f4:	e8 22 fc ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000f2f9:	83 c4 10             	add    esp,0x10
c000f2fc:	83 c4 0c             	add    esp,0xc
c000f2ff:	c3                   	ret    

c000f300 <Filesystem::Filesystem()>:
c000f300:	ba 6c 0c 02 c0       	mov    edx,0xc0020c6c
c000f305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f309:	89 10                	mov    DWORD PTR [eax],edx
c000f30b:	8b 15 e8 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238e8
c000f311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f315:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31c:	a3 e8 38 02 c0       	mov    ds:0xc00238e8,eax
c000f321:	90                   	nop
c000f322:	c3                   	ret    
c000f323:	90                   	nop

c000f324 <Filesystem::~Filesystem()>:
c000f324:	ba 6c 0c 02 c0       	mov    edx,0xc0020c6c
c000f329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32d:	89 10                	mov    DWORD PTR [eax],edx
c000f32f:	90                   	nop
c000f330:	c3                   	ret    
c000f331:	90                   	nop

c000f332 <Filesystem::~Filesystem()>:
c000f332:	83 ec 0c             	sub    esp,0xc
c000f335:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f339:	e8 e6 ff ff ff       	call   c000f324 <Filesystem::~Filesystem()>
c000f33e:	83 c4 04             	add    esp,0x4
c000f341:	83 ec 08             	sub    esp,0x8
c000f344:	6a 08                	push   0x8
c000f346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f34a:	e8 cc fb ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000f34f:	83 c4 10             	add    esp,0x10
c000f352:	83 c4 0c             	add    esp,0xc
c000f355:	c3                   	ret    

c000f356 <initVFS()>:
c000f356:	83 ec 18             	sub    esp,0x18
c000f359:	6a 08                	push   0x8
c000f35b:	e8 ac fb ff ff       	call   c000ef0c <operator new(unsigned long)>
c000f360:	89 04 24             	mov    DWORD PTR [esp],eax
c000f363:	e8 5a a9 00 00       	call   c0019cc2 <FAT::FAT()>
c000f368:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f36f:	e8 98 fb ff ff       	call   c000ef0c <operator new(unsigned long)>
c000f374:	89 04 24             	mov    DWORD PTR [esp],eax
c000f377:	e8 bc bb 00 00       	call   c001af38 <ISO9660::ISO9660()>
c000f37c:	83 c4 1c             	add    esp,0x1c
c000f37f:	c3                   	ret    

c000f380 <standardiseFiles(char*, char const*, char const*)>:
c000f380:	55                   	push   ebp
c000f381:	57                   	push   edi
c000f382:	56                   	push   esi
c000f383:	53                   	push   ebx
c000f384:	81 ec 10 04 00 00    	sub    esp,0x410
c000f38a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f391:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f398:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f39f:	68 00 04 00 00       	push   0x400
c000f3a4:	6a 00                	push   0x0
c000f3a6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f3aa:	56                   	push   esi
c000f3ab:	e8 58 12 ff ff       	call   c0000608 <memset>
c000f3b0:	83 c4 10             	add    esp,0x10
c000f3b3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f3b7:	75 0b                	jne    c000f3c4 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f3b9:	50                   	push   eax
c000f3ba:	50                   	push   eax
c000f3bb:	57                   	push   edi
c000f3bc:	56                   	push   esi
c000f3bd:	e8 e5 12 ff ff       	call   c00006a7 <strcpy>
c000f3c2:	eb 41                	jmp    c000f405 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f3c4:	8a 07                	mov    al,BYTE PTR [edi]
c000f3c6:	3c 5c                	cmp    al,0x5c
c000f3c8:	74 04                	je     c000f3ce <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f3ca:	3c 2f                	cmp    al,0x2f
c000f3cc:	75 18                	jne    c000f3e6 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f3ce:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f3d1:	3c 60                	cmp    al,0x60
c000f3d3:	7e 03                	jle    c000f3d8 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f3d5:	83 e8 20             	sub    eax,0x20
c000f3d8:	88 04 24             	mov    BYTE PTR [esp],al
c000f3db:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f3e2:	50                   	push   eax
c000f3e3:	50                   	push   eax
c000f3e4:	eb 18                	jmp    c000f3fe <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f3e6:	50                   	push   eax
c000f3e7:	50                   	push   eax
c000f3e8:	55                   	push   ebp
c000f3e9:	56                   	push   esi
c000f3ea:	e8 b8 12 ff ff       	call   c00006a7 <strcpy>
c000f3ef:	5a                   	pop    edx
c000f3f0:	59                   	pop    ecx
c000f3f1:	68 22 1e 02 c0       	push   0xc0021e22
c000f3f6:	56                   	push   esi
c000f3f7:	e8 62 13 ff ff       	call   c000075e <strcat>
c000f3fc:	5d                   	pop    ebp
c000f3fd:	58                   	pop    eax
c000f3fe:	57                   	push   edi
c000f3ff:	56                   	push   esi
c000f400:	e8 59 13 ff ff       	call   c000075e <strcat>
c000f405:	83 c4 10             	add    esp,0x10
c000f408:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f40b:	3c 60                	cmp    al,0x60
c000f40d:	7e 03                	jle    c000f412 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f40f:	83 e8 20             	sub    eax,0x20
c000f412:	88 04 24             	mov    BYTE PTR [esp],al
c000f415:	88 03                	mov    BYTE PTR [ebx],al
c000f417:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f41e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f424:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f428:	bf 03 00 00 00       	mov    edi,0x3
c000f42d:	b8 03 00 00 00       	mov    eax,0x3
c000f432:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f435:	84 d2                	test   dl,dl
c000f437:	0f 84 91 00 00 00    	je     c000f4ce <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f43d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f440:	80 fa 5c             	cmp    dl,0x5c
c000f443:	74 05                	je     c000f44a <standardiseFiles(char*, char const*, char const*)+0xca>
c000f445:	80 fa 2f             	cmp    dl,0x2f
c000f448:	75 12                	jne    c000f45c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f44a:	89 c5                	mov    ebp,eax
c000f44c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f451:	74 09                	je     c000f45c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f453:	40                   	inc    eax
c000f454:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f458:	89 cf                	mov    edi,ecx
c000f45a:	eb d6                	jmp    c000f432 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f45c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f461:	75 5b                	jne    c000f4be <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f463:	80 fa 2e             	cmp    dl,0x2e
c000f466:	75 56                	jne    c000f4be <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f468:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f46c:	74 19                	je     c000f487 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f46e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f473:	74 53                	je     c000f4c8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f475:	89 f9                	mov    ecx,edi
c000f477:	41                   	inc    ecx
c000f478:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f47b:	80 fa 2f             	cmp    dl,0x2f
c000f47e:	74 f7                	je     c000f477 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f480:	80 fa 5c             	cmp    dl,0x5c
c000f483:	74 f2                	je     c000f477 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f485:	eb d1                	jmp    c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f487:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f48c:	74 3a                	je     c000f4c8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f48e:	83 f8 03             	cmp    eax,0x3
c000f491:	74 c5                	je     c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f493:	41                   	inc    ecx
c000f494:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f497:	80 fa 2f             	cmp    dl,0x2f
c000f49a:	74 f7                	je     c000f493 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f49c:	80 fa 5c             	cmp    dl,0x5c
c000f49f:	74 f2                	je     c000f493 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f4a1:	48                   	dec    eax
c000f4a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4a6:	75 06                	jne    c000f4ae <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4ac:	eb f3                	jmp    c000f4a1 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f4ae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4b2:	74 07                	je     c000f4bb <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f4b4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4b8:	48                   	dec    eax
c000f4b9:	eb f3                	jmp    c000f4ae <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4bb:	40                   	inc    eax
c000f4bc:	eb 9a                	jmp    c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4be:	80 fa 2f             	cmp    dl,0x2f
c000f4c1:	74 95                	je     c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4c3:	80 fa 5c             	cmp    dl,0x5c
c000f4c6:	74 90                	je     c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4c8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f4cb:	40                   	inc    eax
c000f4cc:	eb 8a                	jmp    c000f458 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4ce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	53                   	push   ebx
c000f4d6:	e8 4a 11 ff ff       	call   c0000625 <strlen>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f4e3:	75 26                	jne    c000f50b <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	53                   	push   ebx
c000f4e9:	e8 37 11 ff ff       	call   c0000625 <strlen>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f4f6:	74 26                	je     c000f51e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f4f8:	83 ec 0c             	sub    esp,0xc
c000f4fb:	53                   	push   ebx
c000f4fc:	e8 24 11 ff ff       	call   c0000625 <strlen>
c000f501:	83 c4 10             	add    esp,0x10
c000f504:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f509:	eb c7                	jmp    c000f4d2 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f50b:	83 ec 0c             	sub    esp,0xc
c000f50e:	53                   	push   ebx
c000f50f:	e8 11 11 ff ff       	call   c0000625 <strlen>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f51c:	74 c7                	je     c000f4e5 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f51e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f524:	5b                   	pop    ebx
c000f525:	5e                   	pop    esi
c000f526:	5f                   	pop    edi
c000f527:	5d                   	pop    ebp
c000f528:	c3                   	ret    
c000f529:	90                   	nop

c000f52a <File::File(char const*, Process*)>:
c000f52a:	83 ec 0c             	sub    esp,0xc
c000f52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f531:	83 ec 08             	sub    esp,0x8
c000f534:	6a 00                	push   0x0
c000f536:	50                   	push   eax
c000f537:	e8 0e e4 ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000f53c:	83 c4 10             	add    esp,0x10
c000f53f:	ba d0 0c 02 c0       	mov    edx,0xc0020cd0
c000f544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f548:	89 10                	mov    DWORD PTR [eax],edx
c000f54a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f54e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f558:	83 c0 0d             	add    eax,0xd
c000f55b:	83 ec 04             	sub    esp,0x4
c000f55e:	52                   	push   edx
c000f55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f563:	50                   	push   eax
c000f564:	e8 17 fe ff ff       	call   c000f380 <standardiseFiles(char*, char const*, char const*)>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f570:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f573:	8d 50 bf             	lea    edx,[eax-0x41]
c000f576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f584:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f588:	90                   	nop
c000f589:	83 c4 0c             	add    esp,0xc
c000f58c:	c3                   	ret    
c000f58d:	90                   	nop

c000f58e <File::open(FileOpenMode)>:
c000f58e:	53                   	push   ebx
c000f58f:	b8 0b 00 00 00       	mov    eax,0xb
c000f594:	83 ec 08             	sub    esp,0x8
c000f597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f59b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f5a2:	80 fa 19             	cmp    dl,0x19
c000f5a5:	77 40                	ja     c000f5e7 <File::open(FileOpenMode)+0x59>
c000f5a7:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000f5ae:	85 d2                	test   edx,edx
c000f5b0:	74 35                	je     c000f5e7 <File::open(FileOpenMode)+0x59>
c000f5b2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5b8:	85 d2                	test   edx,edx
c000f5ba:	74 2b                	je     c000f5e7 <File::open(FileOpenMode)+0x59>
c000f5bc:	b8 06 00 00 00       	mov    eax,0x6
c000f5c1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f5c5:	75 20                	jne    c000f5e7 <File::open(FileOpenMode)+0x59>
c000f5c7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5c9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f5cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5d3:	51                   	push   ecx
c000f5d4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f5d7:	51                   	push   ecx
c000f5d8:	52                   	push   edx
c000f5d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f5dc:	83 c4 10             	add    esp,0x10
c000f5df:	85 c0                	test   eax,eax
c000f5e1:	75 04                	jne    c000f5e7 <File::open(FileOpenMode)+0x59>
c000f5e3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f5e7:	83 c4 08             	add    esp,0x8
c000f5ea:	5b                   	pop    ebx
c000f5eb:	c3                   	ret    

c000f5ec <File::close()>:
c000f5ec:	53                   	push   ebx
c000f5ed:	b8 0b 00 00 00       	mov    eax,0xb
c000f5f2:	83 ec 08             	sub    esp,0x8
c000f5f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f5f9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f600:	80 fa 19             	cmp    dl,0x19
c000f603:	77 41                	ja     c000f646 <File::close()+0x5a>
c000f605:	8b 1c 95 80 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc280]
c000f60c:	85 db                	test   ebx,ebx
c000f60e:	74 36                	je     c000f646 <File::close()+0x5a>
c000f610:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f617:	74 2d                	je     c000f646 <File::close()+0x5a>
c000f619:	b8 05 00 00 00       	mov    eax,0x5
c000f61e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f622:	74 22                	je     c000f646 <File::close()+0x5a>
c000f624:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f628:	8b 04 95 80 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc280]
c000f62f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f635:	53                   	push   ebx
c000f636:	53                   	push   ebx
c000f637:	8b 10                	mov    edx,DWORD PTR [eax]
c000f639:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f63f:	50                   	push   eax
c000f640:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f643:	83 c4 10             	add    esp,0x10
c000f646:	83 c4 08             	add    esp,0x8
c000f649:	5b                   	pop    ebx
c000f64a:	c3                   	ret    
c000f64b:	90                   	nop

c000f64c <File::seek(unsigned long long)>:
c000f64c:	56                   	push   esi
c000f64d:	53                   	push   ebx
c000f64e:	b8 0b 00 00 00       	mov    eax,0xb
c000f653:	51                   	push   ecx
c000f654:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f658:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f65c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f663:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f667:	80 fa 19             	cmp    dl,0x19
c000f66a:	77 31                	ja     c000f69d <File::seek(unsigned long long)+0x51>
c000f66c:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000f673:	85 d2                	test   edx,edx
c000f675:	74 26                	je     c000f69d <File::seek(unsigned long long)+0x51>
c000f677:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f67d:	85 d2                	test   edx,edx
c000f67f:	74 1c                	je     c000f69d <File::seek(unsigned long long)+0x51>
c000f681:	b8 05 00 00 00       	mov    eax,0x5
c000f686:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f68a:	74 11                	je     c000f69d <File::seek(unsigned long long)+0x51>
c000f68c:	8b 02                	mov    eax,DWORD PTR [edx]
c000f68e:	53                   	push   ebx
c000f68f:	51                   	push   ecx
c000f690:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f696:	52                   	push   edx
c000f697:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f69a:	83 c4 10             	add    esp,0x10
c000f69d:	5a                   	pop    edx
c000f69e:	5b                   	pop    ebx
c000f69f:	5e                   	pop    esi
c000f6a0:	c3                   	ret    
c000f6a1:	90                   	nop

c000f6a2 <File::tell(unsigned long long*)>:
c000f6a2:	83 ec 0c             	sub    esp,0xc
c000f6a5:	b8 0b 00 00 00       	mov    eax,0xb
c000f6aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f6ae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f6b5:	80 fa 19             	cmp    dl,0x19
c000f6b8:	77 34                	ja     c000f6ee <File::tell(unsigned long long*)+0x4c>
c000f6ba:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000f6c1:	85 d2                	test   edx,edx
c000f6c3:	74 29                	je     c000f6ee <File::tell(unsigned long long*)+0x4c>
c000f6c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6cb:	85 d2                	test   edx,edx
c000f6cd:	74 1f                	je     c000f6ee <File::tell(unsigned long long*)+0x4c>
c000f6cf:	b8 05 00 00 00       	mov    eax,0x5
c000f6d4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f6d8:	74 14                	je     c000f6ee <File::tell(unsigned long long*)+0x4c>
c000f6da:	50                   	push   eax
c000f6db:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f6e7:	52                   	push   edx
c000f6e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f6eb:	83 c4 10             	add    esp,0x10
c000f6ee:	83 c4 0c             	add    esp,0xc
c000f6f1:	c3                   	ret    

c000f6f2 <File::rewind()>:
c000f6f2:	83 ec 10             	sub    esp,0x10
c000f6f5:	6a 00                	push   0x0
c000f6f7:	6a 00                	push   0x0
c000f6f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6fd:	e8 4a ff ff ff       	call   c000f64c <File::seek(unsigned long long)>
c000f702:	83 c4 1c             	add    esp,0x1c
c000f705:	c3                   	ret    

c000f706 <File::unlink()>:
c000f706:	83 ec 0c             	sub    esp,0xc
c000f709:	b8 0b 00 00 00       	mov    eax,0xb
c000f70e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f712:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f719:	80 f9 19             	cmp    cl,0x19
c000f71c:	77 2f                	ja     c000f74d <File::unlink()+0x47>
c000f71e:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000f725:	85 c9                	test   ecx,ecx
c000f727:	74 24                	je     c000f74d <File::unlink()+0x47>
c000f729:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f72f:	85 c9                	test   ecx,ecx
c000f731:	74 1a                	je     c000f74d <File::unlink()+0x47>
c000f733:	b8 06 00 00 00       	mov    eax,0x6
c000f738:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f73c:	75 0f                	jne    c000f74d <File::unlink()+0x47>
c000f73e:	83 c2 0d             	add    edx,0xd
c000f741:	50                   	push   eax
c000f742:	50                   	push   eax
c000f743:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f745:	52                   	push   edx
c000f746:	51                   	push   ecx
c000f747:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	83 c4 0c             	add    esp,0xc
c000f750:	c3                   	ret    
c000f751:	90                   	nop

c000f752 <File::rename(char const*)>:
c000f752:	83 ec 0c             	sub    esp,0xc
c000f755:	b8 0b 00 00 00       	mov    eax,0xb
c000f75a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f75e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f765:	80 f9 19             	cmp    cl,0x19
c000f768:	77 32                	ja     c000f79c <File::rename(char const*)+0x4a>
c000f76a:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000f771:	85 c9                	test   ecx,ecx
c000f773:	74 27                	je     c000f79c <File::rename(char const*)+0x4a>
c000f775:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f77b:	85 c9                	test   ecx,ecx
c000f77d:	74 1d                	je     c000f79c <File::rename(char const*)+0x4a>
c000f77f:	b8 06 00 00 00       	mov    eax,0x6
c000f784:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f788:	75 12                	jne    c000f79c <File::rename(char const*)+0x4a>
c000f78a:	83 c2 0d             	add    edx,0xd
c000f78d:	50                   	push   eax
c000f78e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f790:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f794:	52                   	push   edx
c000f795:	51                   	push   ecx
c000f796:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	83 c4 0c             	add    esp,0xc
c000f79f:	c3                   	ret    

c000f7a0 <File::chfatattr(unsigned char, unsigned char)>:
c000f7a0:	57                   	push   edi
c000f7a1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7a6:	56                   	push   esi
c000f7a7:	53                   	push   ebx
c000f7a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f7bb:	80 f9 19             	cmp    cl,0x19
c000f7be:	77 37                	ja     c000f7f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7c0:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	74 2c                	je     c000f7f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7d1:	85 c9                	test   ecx,ecx
c000f7d3:	74 22                	je     c000f7f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7d5:	b8 06 00 00 00       	mov    eax,0x6
c000f7da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f7de:	75 17                	jne    c000f7f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7e0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f7e2:	89 f0                	mov    eax,esi
c000f7e4:	83 c2 0d             	add    edx,0xd
c000f7e7:	0f b6 f0             	movzx  esi,al
c000f7ea:	0f b6 db             	movzx  ebx,bl
c000f7ed:	56                   	push   esi
c000f7ee:	53                   	push   ebx
c000f7ef:	52                   	push   edx
c000f7f0:	51                   	push   ecx
c000f7f1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f7f4:	83 c4 10             	add    esp,0x10
c000f7f7:	5b                   	pop    ebx
c000f7f8:	5e                   	pop    esi
c000f7f9:	5f                   	pop    edi
c000f7fa:	c3                   	ret    
c000f7fb:	90                   	nop

c000f7fc <File::exists()>:
c000f7fc:	83 ec 0c             	sub    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f805:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f80c:	80 f9 19             	cmp    cl,0x19
c000f80f:	77 24                	ja     c000f835 <File::exists()+0x39>
c000f811:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000f818:	85 c9                	test   ecx,ecx
c000f81a:	74 19                	je     c000f835 <File::exists()+0x39>
c000f81c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f822:	85 c9                	test   ecx,ecx
c000f824:	74 0f                	je     c000f835 <File::exists()+0x39>
c000f826:	83 c2 0d             	add    edx,0xd
c000f829:	50                   	push   eax
c000f82a:	50                   	push   eax
c000f82b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f82d:	52                   	push   edx
c000f82e:	51                   	push   ecx
c000f82f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f832:	83 c4 10             	add    esp,0x10
c000f835:	83 c4 0c             	add    esp,0xc
c000f838:	c3                   	ret    
c000f839:	90                   	nop

c000f83a <File::stat(unsigned long long*, bool*)>:
c000f83a:	56                   	push   esi
c000f83b:	53                   	push   ebx
c000f83c:	50                   	push   eax
c000f83d:	b8 0b 00 00 00       	mov    eax,0xb
c000f842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f846:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f84a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f851:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f855:	80 f9 19             	cmp    cl,0x19
c000f858:	77 3d                	ja     c000f897 <File::stat(unsigned long long*, bool*)+0x5d>
c000f85a:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000f861:	85 c9                	test   ecx,ecx
c000f863:	74 32                	je     c000f897 <File::stat(unsigned long long*, bool*)+0x5d>
c000f865:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f86b:	85 c9                	test   ecx,ecx
c000f86d:	74 28                	je     c000f897 <File::stat(unsigned long long*, bool*)+0x5d>
c000f86f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f871:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f875:	74 13                	je     c000f88a <File::stat(unsigned long long*, bool*)+0x50>
c000f877:	83 ec 04             	sub    esp,0x4
c000f87a:	56                   	push   esi
c000f87b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f881:	51                   	push   ecx
c000f882:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f885:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f888:	eb 0a                	jmp    c000f894 <File::stat(unsigned long long*, bool*)+0x5a>
c000f88a:	53                   	push   ebx
c000f88b:	83 c2 0d             	add    edx,0xd
c000f88e:	56                   	push   esi
c000f88f:	52                   	push   edx
c000f890:	51                   	push   ecx
c000f891:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f894:	83 c4 10             	add    esp,0x10
c000f897:	5a                   	pop    edx
c000f898:	5b                   	pop    ebx
c000f899:	5e                   	pop    esi
c000f89a:	c3                   	ret    

c000f89b <getcwd(Process*, char*, int)>:
c000f89b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f89f:	31 c0                	xor    eax,eax
c000f8a1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f8a4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f8a8:	7d 15                	jge    c000f8bf <getcwd(Process*, char*, int)+0x24>
c000f8aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ae:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f8b5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f8b8:	84 c9                	test   cl,cl
c000f8ba:	74 06                	je     c000f8c2 <getcwd(Process*, char*, int)+0x27>
c000f8bc:	40                   	inc    eax
c000f8bd:	eb e2                	jmp    c000f8a1 <getcwd(Process*, char*, int)+0x6>
c000f8bf:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f8c2:	31 c0                	xor    eax,eax
c000f8c4:	c3                   	ret    

c000f8c5 <setcwd(Process*, char*)>:
c000f8c5:	55                   	push   ebp
c000f8c6:	57                   	push   edi
c000f8c7:	56                   	push   esi
c000f8c8:	53                   	push   ebx
c000f8c9:	81 ec 20 02 00 00    	sub    esp,0x220
c000f8cf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f8d6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f8dc:	57                   	push   edi
c000f8dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f8e4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f8e8:	56                   	push   esi
c000f8e9:	e8 92 fa ff ff       	call   c000f380 <standardiseFiles(char*, char const*, char const*)>
c000f8ee:	89 34 24             	mov    DWORD PTR [esp],esi
c000f8f1:	e8 2f 0d ff ff       	call   c0000625 <strlen>
c000f8f6:	83 c4 10             	add    esp,0x10
c000f8f9:	83 f8 02             	cmp    eax,0x2
c000f8fc:	77 17                	ja     c000f915 <setcwd(Process*, char*)+0x50>
c000f8fe:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f903:	83 e8 41             	sub    eax,0x41
c000f906:	83 f8 19             	cmp    eax,0x19
c000f909:	76 24                	jbe    c000f92f <setcwd(Process*, char*)+0x6a>
c000f90b:	b8 03 00 00 00       	mov    eax,0x3
c000f910:	e9 cb 00 00 00       	jmp    c000f9e0 <setcwd(Process*, char*)+0x11b>
c000f915:	83 ec 0c             	sub    esp,0xc
c000f918:	56                   	push   esi
c000f919:	e8 07 0d ff ff       	call   c0000625 <strlen>
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	83 f8 03             	cmp    eax,0x3
c000f924:	75 33                	jne    c000f959 <setcwd(Process*, char*)+0x94>
c000f926:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f92b:	75 2c                	jne    c000f959 <setcwd(Process*, char*)+0x94>
c000f92d:	eb cf                	jmp    c000f8fe <setcwd(Process*, char*)+0x39>
c000f92f:	8b 14 85 80 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc280]
c000f936:	b8 05 00 00 00       	mov    eax,0x5
c000f93b:	85 d2                	test   edx,edx
c000f93d:	0f 84 9d 00 00 00    	je     c000f9e0 <setcwd(Process*, char*)+0x11b>
c000f943:	b8 06 00 00 00       	mov    eax,0x6
c000f948:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f94f:	0f 84 8b 00 00 00    	je     c000f9e0 <setcwd(Process*, char*)+0x11b>
c000f955:	51                   	push   ecx
c000f956:	51                   	push   ecx
c000f957:	eb 7b                	jmp    c000f9d4 <setcwd(Process*, char*)+0x10f>
c000f959:	83 ec 0c             	sub    esp,0xc
c000f95c:	68 14 01 00 00       	push   0x114
c000f961:	e8 a6 f5 ff ff       	call   c000ef0c <operator new(unsigned long)>
c000f966:	83 c4 0c             	add    esp,0xc
c000f969:	89 c3                	mov    ebx,eax
c000f96b:	55                   	push   ebp
c000f96c:	56                   	push   esi
c000f96d:	50                   	push   eax
c000f96e:	e8 b7 fb ff ff       	call   c000f52a <File::File(char const*, Process*)>
c000f973:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f978:	83 c4 0c             	add    esp,0xc
c000f97b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f97f:	50                   	push   eax
c000f980:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f984:	50                   	push   eax
c000f985:	53                   	push   ebx
c000f986:	e8 af fe ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c000f98b:	83 c4 10             	add    esp,0x10
c000f98e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f990:	83 f8 02             	cmp    eax,0x2
c000f993:	75 09                	jne    c000f99e <setcwd(Process*, char*)+0xd9>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	53                   	push   ebx
c000f999:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f99c:	eb 0d                	jmp    c000f9ab <setcwd(Process*, char*)+0xe6>
c000f99e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f9a1:	85 c0                	test   eax,eax
c000f9a3:	74 10                	je     c000f9b5 <setcwd(Process*, char*)+0xf0>
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	53                   	push   ebx
c000f9a9:	ff d2                	call   edx
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	b8 01 00 00 00       	mov    eax,0x1
c000f9b3:	eb 2b                	jmp    c000f9e0 <setcwd(Process*, char*)+0x11b>
c000f9b5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f9ba:	75 10                	jne    c000f9cc <setcwd(Process*, char*)+0x107>
c000f9bc:	83 ec 0c             	sub    esp,0xc
c000f9bf:	53                   	push   ebx
c000f9c0:	ff d2                	call   edx
c000f9c2:	83 c4 10             	add    esp,0x10
c000f9c5:	b8 02 00 00 00       	mov    eax,0x2
c000f9ca:	eb 14                	jmp    c000f9e0 <setcwd(Process*, char*)+0x11b>
c000f9cc:	83 ec 0c             	sub    esp,0xc
c000f9cf:	53                   	push   ebx
c000f9d0:	ff d2                	call   edx
c000f9d2:	58                   	pop    eax
c000f9d3:	5a                   	pop    edx
c000f9d4:	56                   	push   esi
c000f9d5:	57                   	push   edi
c000f9d6:	e8 cc 0c ff ff       	call   c00006a7 <strcpy>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	31 c0                	xor    eax,eax
c000f9e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	5f                   	pop    edi
c000f9e9:	5d                   	pop    ebp
c000f9ea:	c3                   	ret    
c000f9eb:	90                   	nop

c000f9ec <Directory::Directory(char const*, Process*)>:
c000f9ec:	83 ec 0c             	sub    esp,0xc
c000f9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f3:	83 ec 08             	sub    esp,0x8
c000f9f6:	6a 00                	push   0x0
c000f9f8:	50                   	push   eax
c000f9f9:	e8 4c df ff ff       	call   c000d94a <UnixFile::UnixFile(int)>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	ba ec 0c 02 c0       	mov    edx,0xc0020cec
c000fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0a:	89 10                	mov    DWORD PTR [eax],edx
c000fa0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa10:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1a:	83 c0 0d             	add    eax,0xd
c000fa1d:	83 ec 04             	sub    esp,0x4
c000fa20:	52                   	push   edx
c000fa21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa25:	50                   	push   eax
c000fa26:	e8 55 f9 ff ff       	call   c000f380 <standardiseFiles(char*, char const*, char const*)>
c000fa2b:	83 c4 10             	add    esp,0x10
c000fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa32:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fa35:	8d 50 bf             	lea    edx,[eax-0x41]
c000fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa3c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa46:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fa4a:	90                   	nop
c000fa4b:	83 c4 0c             	add    esp,0xc
c000fa4e:	c3                   	ret    
c000fa4f:	90                   	nop

c000fa50 <Directory::open()>:
c000fa50:	53                   	push   ebx
c000fa51:	b8 0b 00 00 00       	mov    eax,0xb
c000fa56:	83 ec 08             	sub    esp,0x8
c000fa59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa5d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa64:	80 fa 19             	cmp    dl,0x19
c000fa67:	77 3d                	ja     c000faa6 <Directory::open()+0x56>
c000fa69:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000fa70:	85 d2                	test   edx,edx
c000fa72:	74 32                	je     c000faa6 <Directory::open()+0x56>
c000fa74:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fa7a:	85 d2                	test   edx,edx
c000fa7c:	74 28                	je     c000faa6 <Directory::open()+0x56>
c000fa7e:	b8 06 00 00 00       	mov    eax,0x6
c000fa83:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fa87:	75 1d                	jne    c000faa6 <Directory::open()+0x56>
c000fa89:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fa8f:	50                   	push   eax
c000fa90:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa92:	51                   	push   ecx
c000fa93:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fa96:	51                   	push   ecx
c000fa97:	52                   	push   edx
c000fa98:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fa9b:	83 c4 10             	add    esp,0x10
c000fa9e:	85 c0                	test   eax,eax
c000faa0:	75 04                	jne    c000faa6 <Directory::open()+0x56>
c000faa2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000faa6:	83 c4 08             	add    esp,0x8
c000faa9:	5b                   	pop    ebx
c000faaa:	c3                   	ret    
c000faab:	90                   	nop

c000faac <Directory::close()>:
c000faac:	53                   	push   ebx
c000faad:	b8 0b 00 00 00       	mov    eax,0xb
c000fab2:	83 ec 08             	sub    esp,0x8
c000fab5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fab9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fac0:	80 fa 19             	cmp    dl,0x19
c000fac3:	77 41                	ja     c000fb06 <Directory::close()+0x5a>
c000fac5:	8b 1c 95 80 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc280]
c000facc:	85 db                	test   ebx,ebx
c000face:	74 36                	je     c000fb06 <Directory::close()+0x5a>
c000fad0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fad7:	74 2d                	je     c000fb06 <Directory::close()+0x5a>
c000fad9:	b8 05 00 00 00       	mov    eax,0x5
c000fade:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fae2:	74 22                	je     c000fb06 <Directory::close()+0x5a>
c000fae4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fae8:	8b 04 95 80 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc280]
c000faef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000faf5:	53                   	push   ebx
c000faf6:	53                   	push   ebx
c000faf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000faf9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000faff:	50                   	push   eax
c000fb00:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	83 c4 08             	add    esp,0x8
c000fb09:	5b                   	pop    ebx
c000fb0a:	c3                   	ret    
c000fb0b:	90                   	nop

c000fb0c <Directory::unlink()>:
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	b8 0b 00 00 00       	mov    eax,0xb
c000fb14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb1f:	80 f9 19             	cmp    cl,0x19
c000fb22:	77 2f                	ja     c000fb53 <Directory::unlink()+0x47>
c000fb24:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000fb2b:	85 c9                	test   ecx,ecx
c000fb2d:	74 24                	je     c000fb53 <Directory::unlink()+0x47>
c000fb2f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb35:	85 c9                	test   ecx,ecx
c000fb37:	74 1a                	je     c000fb53 <Directory::unlink()+0x47>
c000fb39:	b8 06 00 00 00       	mov    eax,0x6
c000fb3e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb42:	75 0f                	jne    c000fb53 <Directory::unlink()+0x47>
c000fb44:	83 c2 0d             	add    edx,0xd
c000fb47:	50                   	push   eax
c000fb48:	50                   	push   eax
c000fb49:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb4b:	52                   	push   edx
c000fb4c:	51                   	push   ecx
c000fb4d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	83 c4 0c             	add    esp,0xc
c000fb56:	c3                   	ret    
c000fb57:	90                   	nop

c000fb58 <Directory::rename(char const*)>:
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	b8 0b 00 00 00       	mov    eax,0xb
c000fb60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb6b:	80 f9 19             	cmp    cl,0x19
c000fb6e:	77 32                	ja     c000fba2 <Directory::rename(char const*)+0x4a>
c000fb70:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000fb77:	85 c9                	test   ecx,ecx
c000fb79:	74 27                	je     c000fba2 <Directory::rename(char const*)+0x4a>
c000fb7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb81:	85 c9                	test   ecx,ecx
c000fb83:	74 1d                	je     c000fba2 <Directory::rename(char const*)+0x4a>
c000fb85:	b8 06 00 00 00       	mov    eax,0x6
c000fb8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb8e:	75 12                	jne    c000fba2 <Directory::rename(char const*)+0x4a>
c000fb90:	83 c2 0d             	add    edx,0xd
c000fb93:	50                   	push   eax
c000fb94:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb9a:	52                   	push   edx
c000fb9b:	51                   	push   ecx
c000fb9c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fb9f:	83 c4 10             	add    esp,0x10
c000fba2:	83 c4 0c             	add    esp,0xc
c000fba5:	c3                   	ret    

c000fba6 <Directory::exists()>:
c000fba6:	83 ec 0c             	sub    esp,0xc
c000fba9:	31 c0                	xor    eax,eax
c000fbab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fbaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fbb6:	80 f9 19             	cmp    cl,0x19
c000fbb9:	77 24                	ja     c000fbdf <Directory::exists()+0x39>
c000fbbb:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000fbc2:	85 c9                	test   ecx,ecx
c000fbc4:	74 19                	je     c000fbdf <Directory::exists()+0x39>
c000fbc6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbcc:	85 c9                	test   ecx,ecx
c000fbce:	74 0f                	je     c000fbdf <Directory::exists()+0x39>
c000fbd0:	83 c2 0d             	add    edx,0xd
c000fbd3:	50                   	push   eax
c000fbd4:	50                   	push   eax
c000fbd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbd7:	52                   	push   edx
c000fbd8:	51                   	push   ecx
c000fbd9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fbdc:	83 c4 10             	add    esp,0x10
c000fbdf:	83 c4 0c             	add    esp,0xc
c000fbe2:	c3                   	ret    
c000fbe3:	90                   	nop

c000fbe4 <Directory::read(dirent*)>:
c000fbe4:	83 ec 1c             	sub    esp,0x1c
c000fbe7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fbf0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbf7:	80 fa 19             	cmp    dl,0x19
c000fbfa:	77 30                	ja     c000fc2c <Directory::read(dirent*)+0x48>
c000fbfc:	8b 14 95 80 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc280]
c000fc03:	85 d2                	test   edx,edx
c000fc05:	74 25                	je     c000fc2c <Directory::read(dirent*)+0x48>
c000fc07:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fc0e:	74 1c                	je     c000fc2c <Directory::read(dirent*)+0x48>
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc15:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fc19:	52                   	push   edx
c000fc1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fc1e:	6a 00                	push   0x0
c000fc20:	68 10 01 00 00       	push   0x110
c000fc25:	51                   	push   ecx
c000fc26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc29:	83 c4 20             	add    esp,0x20
c000fc2c:	83 c4 1c             	add    esp,0x1c
c000fc2f:	c3                   	ret    

c000fc30 <Directory::create()>:
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	b8 0b 00 00 00       	mov    eax,0xb
c000fc38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc43:	80 f9 19             	cmp    cl,0x19
c000fc46:	77 2f                	ja     c000fc77 <Directory::create()+0x47>
c000fc48:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c000fc4f:	85 c9                	test   ecx,ecx
c000fc51:	74 24                	je     c000fc77 <Directory::create()+0x47>
c000fc53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc59:	85 c9                	test   ecx,ecx
c000fc5b:	74 1a                	je     c000fc77 <Directory::create()+0x47>
c000fc5d:	b8 06 00 00 00       	mov    eax,0x6
c000fc62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc66:	75 0f                	jne    c000fc77 <Directory::create()+0x47>
c000fc68:	83 c2 0d             	add    edx,0xd
c000fc6b:	50                   	push   eax
c000fc6c:	50                   	push   eax
c000fc6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc6f:	52                   	push   edx
c000fc70:	51                   	push   ecx
c000fc71:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	83 c4 0c             	add    esp,0xc
c000fc7a:	c3                   	ret    
c000fc7b:	90                   	nop

c000fc7c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fc7c:	b8 0a 00 00 00       	mov    eax,0xa
c000fc81:	c3                   	ret    

c000fc82 <Bus::Bus(char const*)>:
c000fc82:	83 ec 0c             	sub    esp,0xc
c000fc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc89:	83 ec 08             	sub    esp,0x8
c000fc8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc90:	50                   	push   eax
c000fc91:	e8 60 09 00 00       	call   c00105f6 <Device::Device(char const*)>
c000fc96:	83 c4 10             	add    esp,0x10
c000fc99:	ba 08 0d 02 c0       	mov    edx,0xc0020d08
c000fc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca2:	89 10                	mov    DWORD PTR [eax],edx
c000fca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fcb2:	90                   	nop
c000fcb3:	83 c4 0c             	add    esp,0xc
c000fcb6:	c3                   	ret    
c000fcb7:	90                   	nop

c000fcb8 <Bus::~Bus()>:
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	ba 08 0d 02 c0       	mov    edx,0xc0020d08
c000fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc4:	89 10                	mov    DWORD PTR [eax],edx
c000fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	50                   	push   eax
c000fcce:	e8 d5 05 00 00       	call   c00102a8 <Device::~Device()>
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	90                   	nop
c000fcd7:	83 c4 0c             	add    esp,0xc
c000fcda:	c3                   	ret    
c000fcdb:	90                   	nop

c000fcdc <Bus::~Bus()>:
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	83 ec 0c             	sub    esp,0xc
c000fce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce6:	e8 cd ff ff ff       	call   c000fcb8 <Bus::~Bus()>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	83 ec 08             	sub    esp,0x8
c000fcf1:	68 58 01 00 00       	push   0x158
c000fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcfa:	e8 1c f2 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	83 c4 0c             	add    esp,0xc
c000fd05:	c3                   	ret    

c000fd06 <Buzzer::Buzzer(char const*)>:
c000fd06:	83 ec 0c             	sub    esp,0xc
c000fd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd0d:	83 ec 08             	sub    esp,0x8
c000fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd14:	50                   	push   eax
c000fd15:	e8 dc 08 00 00       	call   c00105f6 <Device::Device(char const*)>
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	ba 34 0d 02 c0       	mov    edx,0xc0020d34
c000fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd26:	89 10                	mov    DWORD PTR [eax],edx
c000fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd2c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd3a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fd44:	90                   	nop
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop

c000fd4a <Buzzer::~Buzzer()>:
c000fd4a:	83 ec 0c             	sub    esp,0xc
c000fd4d:	ba 34 0d 02 c0       	mov    edx,0xc0020d34
c000fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd56:	89 10                	mov    DWORD PTR [eax],edx
c000fd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	50                   	push   eax
c000fd60:	e8 43 05 00 00       	call   c00102a8 <Device::~Device()>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	90                   	nop
c000fd69:	83 c4 0c             	add    esp,0xc
c000fd6c:	c3                   	ret    
c000fd6d:	90                   	nop

c000fd6e <Buzzer::~Buzzer()>:
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	83 ec 0c             	sub    esp,0xc
c000fd74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd78:	e8 cd ff ff ff       	call   c000fd4a <Buzzer::~Buzzer()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	83 ec 08             	sub    esp,0x8
c000fd83:	68 5c 01 00 00       	push   0x15c
c000fd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd8c:	e8 8a f1 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	83 c4 0c             	add    esp,0xc
c000fd97:	c3                   	ret    

c000fd98 <Buzzer::stop()>:
c000fd98:	83 ec 14             	sub    esp,0x14
c000fd9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fda1:	6a 00                	push   0x0
c000fda3:	50                   	push   eax
c000fda4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fda7:	83 c4 1c             	add    esp,0x1c
c000fdaa:	c3                   	ret    

c000fdab <beepThread(void*)>:
c000fdab:	53                   	push   ebx
c000fdac:	83 ec 08             	sub    esp,0x8
c000fdaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdb3:	e8 2a 7e 00 00       	call   c0017be2 <unlockScheduler()>
c000fdb8:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fdbd:	52                   	push   edx
c000fdbe:	52                   	push   edx
c000fdbf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fdc5:	52                   	push   edx
c000fdc6:	50                   	push   eax
c000fdc7:	e8 cd 84 00 00       	call   c0018299 <nanoSleep(unsigned long long)>
c000fdcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdcf:	e8 c4 ff ff ff       	call   c000fd98 <Buzzer::stop()>
c000fdd4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fddc:	83 c4 18             	add    esp,0x18
c000fddf:	5b                   	pop    ebx
c000fde0:	e9 fa 83 00 00       	jmp    c00181df <blockTask(TaskState)>
c000fde5:	90                   	nop

c000fde6 <Buzzer::beep(int, int, bool)>:
c000fde6:	57                   	push   edi
c000fde7:	56                   	push   esi
c000fde8:	53                   	push   ebx
c000fde9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fded:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdf5:	52                   	push   edx
c000fdf6:	52                   	push   edx
c000fdf7:	8b 06                	mov    eax,DWORD PTR [esi]
c000fdf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdfd:	56                   	push   esi
c000fdfe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	89 f8                	mov    eax,edi
c000fe06:	84 c0                	test   al,al
c000fe08:	74 1f                	je     c000fe29 <Buzzer::beep(int, int, bool)+0x43>
c000fe0a:	50                   	push   eax
c000fe0b:	50                   	push   eax
c000fe0c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fe12:	99                   	cdq    
c000fe13:	52                   	push   edx
c000fe14:	50                   	push   eax
c000fe15:	e8 7f 84 00 00       	call   c0018299 <nanoSleep(unsigned long long)>
c000fe1a:	83 c4 10             	add    esp,0x10
c000fe1d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe21:	5b                   	pop    ebx
c000fe22:	5e                   	pop    esi
c000fe23:	5f                   	pop    edi
c000fe24:	e9 6f ff ff ff       	jmp    c000fd98 <Buzzer::stop()>
c000fe29:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fe2f:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c000fe34:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fe3c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fe40:	c7 44 24 14 ab fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fdab
c000fe48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe4c:	5b                   	pop    ebx
c000fe4d:	5e                   	pop    esi
c000fe4e:	5f                   	pop    edi
c000fe4f:	e9 b6 7e 00 00       	jmp    c0017d0a <Process::createThread(void (*)(void*), void*, int)>

c000fe54 <loadClockSettings()>:
c000fe54:	c7 05 f4 38 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00238f4,0xa
c000fe5e:	c6 05 f1 38 02 c0 00 	mov    BYTE PTR ds:0xc00238f1,0x0
c000fe65:	c6 05 f0 38 02 c0 01 	mov    BYTE PTR ds:0xc00238f0,0x1
c000fe6c:	c3                   	ret    
c000fe6d:	90                   	nop

c000fe6e <Clock::Clock(char const*)>:
c000fe6e:	83 ec 0c             	sub    esp,0xc
c000fe71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe75:	83 ec 08             	sub    esp,0x8
c000fe78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7c:	50                   	push   eax
c000fe7d:	e8 74 07 00 00       	call   c00105f6 <Device::Device(char const*)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	ba 64 0d 02 c0       	mov    edx,0xc0020d64
c000fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8e:	89 10                	mov    DWORD PTR [eax],edx
c000fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe94:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fe9e:	90                   	nop
c000fe9f:	83 c4 0c             	add    esp,0xc
c000fea2:	c3                   	ret    
c000fea3:	90                   	nop

c000fea4 <Clock::~Clock()>:
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	ba 64 0d 02 c0       	mov    edx,0xc0020d64
c000feac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb0:	89 10                	mov    DWORD PTR [eax],edx
c000feb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb6:	83 ec 0c             	sub    esp,0xc
c000feb9:	50                   	push   eax
c000feba:	e8 e9 03 00 00       	call   c00102a8 <Device::~Device()>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	90                   	nop
c000fec3:	83 c4 0c             	add    esp,0xc
c000fec6:	c3                   	ret    
c000fec7:	90                   	nop

c000fec8 <Clock::~Clock()>:
c000fec8:	83 ec 0c             	sub    esp,0xc
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fed2:	e8 cd ff ff ff       	call   c000fea4 <Clock::~Clock()>
c000fed7:	83 c4 10             	add    esp,0x10
c000feda:	83 ec 08             	sub    esp,0x8
c000fedd:	68 58 01 00 00       	push   0x158
c000fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee6:	e8 30 f0 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c000feeb:	83 c4 10             	add    esp,0x10
c000feee:	83 c4 0c             	add    esp,0xc
c000fef1:	c3                   	ret    

c000fef2 <Clock::timeInSecondsLocal()>:
c000fef2:	53                   	push   ebx
c000fef3:	83 ec 14             	sub    esp,0x14
c000fef6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fefa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fefc:	50                   	push   eax
c000fefd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff00:	0f b6 0d f0 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc00238f0
c000ff07:	03 0d f4 38 02 c0    	add    ecx,DWORD PTR ds:0xc00238f4
c000ff0d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ff13:	89 cb                	mov    ebx,ecx
c000ff15:	c1 fb 1f             	sar    ebx,0x1f
c000ff18:	01 c8                	add    eax,ecx
c000ff1a:	11 da                	adc    edx,ebx
c000ff1c:	83 c4 10             	add    esp,0x10
c000ff1f:	31 c9                	xor    ecx,ecx
c000ff21:	80 3d f1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238f1,0x0
c000ff28:	74 05                	je     c000ff2f <Clock::timeInSecondsLocal()+0x3d>
c000ff2a:	b9 08 07 00 00       	mov    ecx,0x708
c000ff2f:	31 db                	xor    ebx,ebx
c000ff31:	01 c8                	add    eax,ecx
c000ff33:	11 da                	adc    edx,ebx
c000ff35:	83 c4 08             	add    esp,0x8
c000ff38:	5b                   	pop    ebx
c000ff39:	c3                   	ret    

c000ff3a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	53                   	push   ebx
c000ff3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff45:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff4b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ff4e:	0f b6 05 f0 38 02 c0 	movzx  eax,BYTE PTR ds:0xc00238f0
c000ff55:	03 05 f4 38 02 c0    	add    eax,DWORD PTR ds:0xc00238f4
c000ff5b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff61:	99                   	cdq    
c000ff62:	29 c6                	sub    esi,eax
c000ff64:	19 d7                	sbb    edi,edx
c000ff66:	89 f0                	mov    eax,esi
c000ff68:	89 fa                	mov    edx,edi
c000ff6a:	31 f6                	xor    esi,esi
c000ff6c:	80 3d f1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238f1,0x0
c000ff73:	74 05                	je     c000ff7a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ff75:	be 08 07 00 00       	mov    esi,0x708
c000ff7a:	31 ff                	xor    edi,edi
c000ff7c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ff80:	29 f0                	sub    eax,esi
c000ff82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff86:	19 fa                	sbb    edx,edi
c000ff88:	89 d8                	mov    eax,ebx
c000ff8a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff8e:	5b                   	pop    ebx
c000ff8f:	5e                   	pop    esi
c000ff90:	5f                   	pop    edi
c000ff91:	ff e0                	jmp    eax

c000ff93 <datetimeToSeconds(datetime_t)>:
c000ff93:	55                   	push   ebp
c000ff94:	57                   	push   edi
c000ff95:	56                   	push   esi
c000ff96:	53                   	push   ebx
c000ff97:	83 ec 14             	sub    esp,0x14
c000ff9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ff9e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffa2:	89 d3                	mov    ebx,edx
c000ffa4:	0f b6 c6             	movzx  eax,dh
c000ffa7:	c1 eb 10             	shr    ebx,0x10
c000ffaa:	48                   	dec    eax
c000ffab:	66 81 eb 6c 07       	sub    bx,0x76c
c000ffb0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ffb4:	0f b6 f5             	movzx  esi,ch
c000ffb7:	89 cf                	mov    edi,ecx
c000ffb9:	6b f6 3c             	imul   esi,esi,0x3c
c000ffbc:	c1 ef 10             	shr    edi,0x10
c000ffbf:	0f b6 c9             	movzx  ecx,cl
c000ffc2:	89 f8                	mov    eax,edi
c000ffc4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ffca:	0f b6 f8             	movzx  edi,al
c000ffcd:	0f b6 d2             	movzx  edx,dl
c000ffd0:	01 fe                	add    esi,edi
c000ffd2:	01 f1                	add    ecx,esi
c000ffd4:	0f b7 f3             	movzx  esi,bx
c000ffd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ffdb:	c1 f9 1f             	sar    ecx,0x1f
c000ffde:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ffe3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ffe7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ffec:	8b 0c 8d a0 0d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf260]
c000fff3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fff7:	76 29                	jbe    c0010022 <datetimeToSeconds(datetime_t)+0x8f>
c000fff9:	f6 c3 03             	test   bl,0x3
c000fffc:	75 24                	jne    c0010022 <datetimeToSeconds(datetime_t)+0x8f>
c000fffe:	31 d2                	xor    edx,edx
c0010000:	bf 64 00 00 00       	mov    edi,0x64
c0010005:	89 d8                	mov    eax,ebx
c0010007:	66 f7 f7             	div    di
c001000a:	66 85 d2             	test   dx,dx
c001000d:	75 12                	jne    c0010021 <datetimeToSeconds(datetime_t)+0x8e>
c001000f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010015:	bf 90 01 00 00       	mov    edi,0x190
c001001a:	99                   	cdq    
c001001b:	f7 ff                	idiv   edi
c001001d:	85 d2                	test   edx,edx
c001001f:	75 01                	jne    c0010022 <datetimeToSeconds(datetime_t)+0x8f>
c0010021:	41                   	inc    ecx
c0010022:	66 83 fb 46          	cmp    bx,0x46
c0010026:	76 45                	jbe    c001006d <datetimeToSeconds(datetime_t)+0xda>
c0010028:	bb 46 00 00 00       	mov    ebx,0x46
c001002d:	bf 64 00 00 00       	mov    edi,0x64
c0010032:	bd 90 01 00 00       	mov    ebp,0x190
c0010037:	b8 6d 01 00 00       	mov    eax,0x16d
c001003c:	f6 c3 03             	test   bl,0x3
c001003f:	75 23                	jne    c0010064 <datetimeToSeconds(datetime_t)+0xd1>
c0010041:	89 d8                	mov    eax,ebx
c0010043:	99                   	cdq    
c0010044:	f7 ff                	idiv   edi
c0010046:	b8 6e 01 00 00       	mov    eax,0x16e
c001004b:	85 d2                	test   edx,edx
c001004d:	75 15                	jne    c0010064 <datetimeToSeconds(datetime_t)+0xd1>
c001004f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010055:	99                   	cdq    
c0010056:	f7 fd                	idiv   ebp
c0010058:	83 fa 01             	cmp    edx,0x1
c001005b:	19 c0                	sbb    eax,eax
c001005d:	f7 d0                	not    eax
c001005f:	05 6e 01 00 00       	add    eax,0x16e
c0010064:	01 c1                	add    ecx,eax
c0010066:	43                   	inc    ebx
c0010067:	39 f3                	cmp    ebx,esi
c0010069:	7c cc                	jl     c0010037 <datetimeToSeconds(datetime_t)+0xa4>
c001006b:	eb 35                	jmp    c00100a2 <datetimeToSeconds(datetime_t)+0x10f>
c001006d:	74 33                	je     c00100a2 <datetimeToSeconds(datetime_t)+0x10f>
c001006f:	b8 45 00 00 00       	mov    eax,0x45
c0010074:	89 c2                	mov    edx,eax
c0010076:	83 e2 03             	and    edx,0x3
c0010079:	39 f0                	cmp    eax,esi
c001007b:	7e 0f                	jle    c001008c <datetimeToSeconds(datetime_t)+0xf9>
c001007d:	83 fa 01             	cmp    edx,0x1
c0010080:	19 d2                	sbb    edx,edx
c0010082:	48                   	dec    eax
c0010083:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001008a:	eb e8                	jmp    c0010074 <datetimeToSeconds(datetime_t)+0xe1>
c001008c:	b8 6d 01 00 00       	mov    eax,0x16d
c0010091:	85 d2                	test   edx,edx
c0010093:	75 0b                	jne    c00100a0 <datetimeToSeconds(datetime_t)+0x10d>
c0010095:	66 83 fb 01          	cmp    bx,0x1
c0010099:	19 c0                	sbb    eax,eax
c001009b:	05 6e 01 00 00       	add    eax,0x16e
c00100a0:	29 c1                	sub    ecx,eax
c00100a2:	b8 80 51 01 00       	mov    eax,0x15180
c00100a7:	f7 e9                	imul   ecx
c00100a9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00100ad:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00100b1:	83 c4 14             	add    esp,0x14
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	5f                   	pop    edi
c00100b7:	5d                   	pop    ebp
c00100b8:	c3                   	ret    
c00100b9:	90                   	nop

c00100ba <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00100ba:	57                   	push   edi
c00100bb:	56                   	push   esi
c00100bc:	53                   	push   ebx
c00100bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00100c3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00100c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100ce:	e8 c0 fe ff ff       	call   c000ff93 <datetimeToSeconds(datetime_t)>
c00100d3:	59                   	pop    ecx
c00100d4:	0f b6 0d f0 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc00238f0
c00100db:	5b                   	pop    ebx
c00100dc:	03 0d f4 38 02 c0    	add    ecx,DWORD PTR ds:0xc00238f4
c00100e2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100e8:	89 cb                	mov    ebx,ecx
c00100ea:	c1 fb 1f             	sar    ebx,0x1f
c00100ed:	29 c8                	sub    eax,ecx
c00100ef:	19 da                	sbb    edx,ebx
c00100f1:	31 c9                	xor    ecx,ecx
c00100f3:	80 3d f1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238f1,0x0
c00100fa:	74 05                	je     c0010101 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00100fc:	b9 08 07 00 00       	mov    ecx,0x708
c0010101:	31 db                	xor    ebx,ebx
c0010103:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010107:	29 c8                	sub    eax,ecx
c0010109:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001010d:	19 da                	sbb    edx,ebx
c001010f:	89 f8                	mov    eax,edi
c0010111:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010115:	5b                   	pop    ebx
c0010116:	5e                   	pop    esi
c0010117:	5f                   	pop    edi
c0010118:	ff e0                	jmp    eax

c001011a <secondsToDatetime(unsigned long long)>:
c001011a:	55                   	push   ebp
c001011b:	57                   	push   edi
c001011c:	56                   	push   esi
c001011d:	53                   	push   ebx
c001011e:	83 ec 1c             	sub    esp,0x1c
c0010121:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010125:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010129:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001012d:	6a 00                	push   0x0
c001012f:	68 80 51 01 00       	push   0x15180
c0010134:	55                   	push   ebp
c0010135:	57                   	push   edi
c0010136:	e8 51 e6 00 00       	call   c001e78c <__udivdi3>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010148:	6a 00                	push   0x0
c001014a:	68 80 51 01 00       	push   0x15180
c001014f:	55                   	push   ebp
c0010150:	57                   	push   edi
c0010151:	bf 10 0e 00 00       	mov    edi,0xe10
c0010156:	e8 31 e7 00 00       	call   c001e88c <__umoddi3>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	99                   	cdq    
c001015f:	f7 ff                	idiv   edi
c0010161:	bf 3c 00 00 00       	mov    edi,0x3c
c0010166:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010169:	89 d0                	mov    eax,edx
c001016b:	99                   	cdq    
c001016c:	f7 ff                	idiv   edi
c001016e:	85 db                	test   ebx,ebx
c0010170:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010173:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010176:	79 11                	jns    c0010189 <secondsToDatetime(unsigned long long)+0x6f>
c0010178:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001017c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0010182:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010187:	eb 07                	jmp    c0010190 <secondsToDatetime(unsigned long long)+0x76>
c0010189:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001018e:	89 d8                	mov    eax,ebx
c0010190:	bf b4 05 00 00       	mov    edi,0x5b4
c0010195:	99                   	cdq    
c0010196:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001019b:	f7 f9                	idiv   ecx
c001019d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00101a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101a6:	31 d2                	xor    edx,edx
c00101a8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00101b0:	01 c3                	add    ebx,eax
c00101b2:	89 d8                	mov    eax,ebx
c00101b4:	f7 f1                	div    ecx
c00101b6:	31 d2                	xor    edx,edx
c00101b8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00101bb:	89 d8                	mov    eax,ebx
c00101bd:	f7 f7                	div    edi
c00101bf:	31 d2                	xor    edx,edx
c00101c1:	29 c1                	sub    ecx,eax
c00101c3:	89 d8                	mov    eax,ebx
c00101c5:	f7 f5                	div    ebp
c00101c7:	bd 6d 01 00 00       	mov    ebp,0x16d
c00101cc:	29 c1                	sub    ecx,eax
c00101ce:	31 d2                	xor    edx,edx
c00101d0:	89 c8                	mov    eax,ecx
c00101d2:	f7 f5                	div    ebp
c00101d4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00101d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101dd:	31 d2                	xor    edx,edx
c00101df:	89 c8                	mov    eax,ecx
c00101e1:	f7 f5                	div    ebp
c00101e3:	31 d2                	xor    edx,edx
c00101e5:	01 c3                	add    ebx,eax
c00101e7:	89 c8                	mov    eax,ecx
c00101e9:	f7 f7                	div    edi
c00101eb:	bf 99 00 00 00       	mov    edi,0x99
c00101f0:	29 c3                	sub    ebx,eax
c00101f2:	31 d2                	xor    edx,edx
c00101f4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00101fc:	29 c3                	sub    ebx,eax
c00101fe:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010201:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010204:	bb 05 00 00 00       	mov    ebx,0x5
c0010209:	83 c1 02             	add    ecx,0x2
c001020c:	89 c8                	mov    eax,ecx
c001020e:	f7 f7                	div    edi
c0010210:	31 d2                	xor    edx,edx
c0010212:	89 c7                	mov    edi,eax
c0010214:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001021a:	83 c0 02             	add    eax,0x2
c001021d:	f7 f3                	div    ebx
c001021f:	89 eb                	mov    ebx,ebp
c0010221:	29 c3                	sub    ebx,eax
c0010223:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010229:	88 1e                	mov    BYTE PTR [esi],bl
c001022b:	19 c0                	sbb    eax,eax
c001022d:	31 d2                	xor    edx,edx
c001022f:	83 e0 0c             	and    eax,0xc
c0010232:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010236:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001023e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010242:	83 f9 01             	cmp    ecx,0x1
c0010245:	0f 96 c2             	setbe  dl
c0010248:	41                   	inc    ecx
c0010249:	01 d0                	add    eax,edx
c001024b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001024e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010252:	83 c4 1c             	add    esp,0x1c
c0010255:	89 f0                	mov    eax,esi
c0010257:	5b                   	pop    ebx
c0010258:	5e                   	pop    esi
c0010259:	5f                   	pop    edi
c001025a:	5d                   	pop    ebp
c001025b:	c2 04 00             	ret    0x4

c001025e <Clock::timeInDatetimeLocal()>:
c001025e:	53                   	push   ebx
c001025f:	83 ec 14             	sub    esp,0x14
c0010262:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001026a:	e8 83 fc ff ff       	call   c000fef2 <Clock::timeInSecondsLocal()>
c001026f:	83 c4 0c             	add    esp,0xc
c0010272:	52                   	push   edx
c0010273:	50                   	push   eax
c0010274:	53                   	push   ebx
c0010275:	e8 a0 fe ff ff       	call   c001011a <secondsToDatetime(unsigned long long)>
c001027a:	89 d8                	mov    eax,ebx
c001027c:	83 c4 14             	add    esp,0x14
c001027f:	5b                   	pop    ebx
c0010280:	c2 04 00             	ret    0x4
c0010283:	90                   	nop

c0010284 <Device::hibernate()>:
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Device::wake()>:
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <Device::detect()>:
c0010288:	c3                   	ret    
c0010289:	90                   	nop

c001028a <Device::disableLegacy()>:
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <Device::powerSaving(PowerSavingLevel)>:
c001028c:	c3                   	ret    
c001028d:	90                   	nop

c001028e <DriverlessDevice::close(int, int, void*)>:
c001028e:	31 c0                	xor    eax,eax
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <DriverlessDevice::detect()>:
c0010292:	c3                   	ret    
c0010293:	90                   	nop

c0010294 <DriverlessDevice::open(int, int, void*)>:
c0010294:	83 ec 18             	sub    esp,0x18
c0010297:	68 d0 0d 02 c0       	push   0xc0020dd0
c001029c:	e8 ef 49 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c00102a1:	83 c8 ff             	or     eax,0xffffffff
c00102a4:	83 c4 1c             	add    esp,0x1c
c00102a7:	c3                   	ret    

c00102a8 <Device::~Device()>:
c00102a8:	ba f8 0d 02 c0       	mov    edx,0xc0020df8
c00102ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b1:	89 10                	mov    DWORD PTR [eax],edx
c00102b3:	90                   	nop
c00102b4:	c3                   	ret    
c00102b5:	90                   	nop

c00102b6 <Device::~Device()>:
c00102b6:	83 ec 0c             	sub    esp,0xc
c00102b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102bd:	e8 e6 ff ff ff       	call   c00102a8 <Device::~Device()>
c00102c2:	83 c4 04             	add    esp,0x4
c00102c5:	83 ec 08             	sub    esp,0x8
c00102c8:	68 58 01 00 00       	push   0x158
c00102cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d1:	e8 45 ec ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c00102d6:	83 c4 10             	add    esp,0x10
c00102d9:	83 c4 0c             	add    esp,0xc
c00102dc:	c3                   	ret    
c00102dd:	90                   	nop

c00102de <Device::findAndLoadDriver()>:
c00102de:	c3                   	ret    
c00102df:	90                   	nop

c00102e0 <Device::preOpenPCI(PCIDeviceInfo)>:
c00102e0:	57                   	push   edi
c00102e1:	b9 09 00 00 00       	mov    ecx,0x9
c00102e6:	56                   	push   esi
c00102e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00102eb:	8d 74 24 10          	lea    esi,[esp+0x10]
c00102ef:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00102f9:	81 c7 18 01 00 00    	add    edi,0x118
c00102ff:	fc                   	cld    
c0010300:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010302:	5e                   	pop    esi
c0010303:	5f                   	pop    edi
c0010304:	c3                   	ret    
c0010305:	90                   	nop

c0010306 <Device::preOpenACPI(void*, char*, char*)>:
c0010306:	56                   	push   esi
c0010307:	53                   	push   ebx
c0010308:	83 ec 08             	sub    esp,0x8
c001030b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001030f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010313:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001031d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010321:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010327:	6a 1e                	push   0x1e
c0010329:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001032f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010333:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010339:	50                   	push   eax
c001033a:	e8 93 02 ff ff       	call   c00005d2 <memcpy>
c001033f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010343:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010347:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001034f:	83 c4 14             	add    esp,0x14
c0010352:	5b                   	pop    ebx
c0010353:	5e                   	pop    esi
c0010354:	e9 79 02 ff ff       	jmp    c00005d2 <memcpy>
c0010359:	90                   	nop

c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001035a:	55                   	push   ebp
c001035b:	57                   	push   edi
c001035c:	56                   	push   esi
c001035d:	53                   	push   ebx
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010365:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010369:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001036d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010371:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010376:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001037d:	75 0b                	jne    c001038a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001037f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010381:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010385:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010388:	eb 24                	jmp    c00103ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001038a:	e8 fb 3b 00 00       	call   c0013f8a <thisCPU()>
c001038f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010395:	8b 10                	mov    edx,DWORD PTR [eax]
c0010397:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001039b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001039f:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00103a3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00103a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00103ab:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00103ae:	83 c4 0c             	add    esp,0xc
c00103b1:	5b                   	pop    ebx
c00103b2:	5e                   	pop    esi
c00103b3:	5f                   	pop    edi
c00103b4:	5d                   	pop    ebp
c00103b5:	ff e0                	jmp    eax
c00103b7:	90                   	nop

c00103b8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00103b8:	57                   	push   edi
c00103b9:	56                   	push   esi
c00103ba:	53                   	push   ebx
c00103bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103c7:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00103cc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00103d3:	75 0b                	jne    c00103e0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00103d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00103d7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103db:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00103de:	eb 20                	jmp    c0010400 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00103e0:	e8 a5 3b 00 00       	call   c0013f8a <thisCPU()>
c00103e5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00103eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00103ed:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103f1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00103f5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00103fd:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010400:	5b                   	pop    ebx
c0010401:	5e                   	pop    esi
c0010402:	5f                   	pop    edi
c0010403:	ff e0                	jmp    eax
c0010405:	90                   	nop

c0010406 <Device::addChild(Device*)>:
c0010406:	53                   	push   ebx
c0010407:	83 ec 08             	sub    esp,0x8
c001040a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001040e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010412:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010418:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001041e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010420:	85 d2                	test   edx,edx
c0010422:	74 04                	je     c0010428 <Device::addChild(Device*)+0x22>
c0010424:	89 d3                	mov    ebx,edx
c0010426:	eb f6                	jmp    c001041e <Device::addChild(Device*)+0x18>
c0010428:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001042b:	83 ec 0c             	sub    esp,0xc
c001042e:	6a 08                	push   0x8
c0010430:	e8 d7 ea ff ff       	call   c000ef0c <operator new(unsigned long)>
c0010435:	89 03                	mov    DWORD PTR [ebx],eax
c0010437:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001043d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010444:	83 c4 18             	add    esp,0x18
c0010447:	5b                   	pop    ebx
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <Device::removeAllChildren()>:
c001044a:	56                   	push   esi
c001044b:	53                   	push   ebx
c001044c:	52                   	push   edx
c001044d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010451:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010457:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001045a:	74 17                	je     c0010473 <Device::removeAllChildren()+0x29>
c001045c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 0c                	je     c001046f <Device::removeAllChildren()+0x25>
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	8b 10                	mov    edx,DWORD PTR [eax]
c0010468:	50                   	push   eax
c0010469:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001046c:	83 c4 10             	add    esp,0x10
c001046f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010471:	eb e4                	jmp    c0010457 <Device::removeAllChildren()+0xd>
c0010473:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010479:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001047f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010485:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001048c:	58                   	pop    eax
c001048d:	5b                   	pop    ebx
c001048e:	5e                   	pop    esi
c001048f:	c3                   	ret    

c0010490 <Device::hibernateAll()>:
c0010490:	53                   	push   ebx
c0010491:	83 ec 14             	sub    esp,0x14
c0010494:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010498:	8b 03                	mov    eax,DWORD PTR [ebx]
c001049a:	53                   	push   ebx
c001049b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001049e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104a4:	83 c4 10             	add    esp,0x10
c00104a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104aa:	74 0f                	je     c00104bb <Device::hibernateAll()+0x2b>
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104b2:	e8 d9 ff ff ff       	call   c0010490 <Device::hibernateAll()>
c00104b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104b9:	eb e9                	jmp    c00104a4 <Device::hibernateAll()+0x14>
c00104bb:	83 c4 08             	add    esp,0x8
c00104be:	5b                   	pop    ebx
c00104bf:	c3                   	ret    

c00104c0 <Device::wakeAll()>:
c00104c0:	53                   	push   ebx
c00104c1:	83 ec 14             	sub    esp,0x14
c00104c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104ca:	53                   	push   ebx
c00104cb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00104ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104da:	74 0f                	je     c00104eb <Device::wakeAll()+0x2b>
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104e2:	e8 d9 ff ff ff       	call   c00104c0 <Device::wakeAll()>
c00104e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104e9:	eb e9                	jmp    c00104d4 <Device::wakeAll()+0x14>
c00104eb:	83 c4 08             	add    esp,0x8
c00104ee:	5b                   	pop    ebx
c00104ef:	c3                   	ret    

c00104f0 <Device::detectAll()>:
c00104f0:	53                   	push   ebx
c00104f1:	83 ec 14             	sub    esp,0x14
c00104f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104fa:	53                   	push   ebx
c00104fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00104fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010504:	83 c4 10             	add    esp,0x10
c0010507:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001050a:	74 0f                	je     c001051b <Device::detectAll()+0x2b>
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010512:	e8 d9 ff ff ff       	call   c00104f0 <Device::detectAll()>
c0010517:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010519:	eb e9                	jmp    c0010504 <Device::detectAll()+0x14>
c001051b:	83 c4 08             	add    esp,0x8
c001051e:	5b                   	pop    ebx
c001051f:	c3                   	ret    

c0010520 <Device::disableLegacyAll()>:
c0010520:	53                   	push   ebx
c0010521:	83 ec 14             	sub    esp,0x14
c0010524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001052a:	53                   	push   ebx
c001052b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001052e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010534:	83 c4 10             	add    esp,0x10
c0010537:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001053a:	74 0f                	je     c001054b <Device::disableLegacyAll()+0x2b>
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010542:	e8 d9 ff ff ff       	call   c0010520 <Device::disableLegacyAll()>
c0010547:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010549:	eb e9                	jmp    c0010534 <Device::disableLegacyAll()+0x14>
c001054b:	83 c4 08             	add    esp,0x8
c001054e:	5b                   	pop    ebx
c001054f:	c3                   	ret    

c0010550 <Device::loadDriversForAll()>:
c0010550:	53                   	push   ebx
c0010551:	83 ec 08             	sub    esp,0x8
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001055e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010560:	85 db                	test   ebx,ebx
c0010562:	74 12                	je     c0010576 <Device::loadDriversForAll()+0x26>
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001056a:	e8 e1 ff ff ff       	call   c0010550 <Device::loadDriversForAll()>
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	89 d8                	mov    eax,ebx
c0010574:	eb e8                	jmp    c001055e <Device::loadDriversForAll()+0xe>
c0010576:	83 c4 08             	add    esp,0x8
c0010579:	5b                   	pop    ebx
c001057a:	c3                   	ret    
c001057b:	90                   	nop

c001057c <Device::closeAll()>:
c001057c:	53                   	push   ebx
c001057d:	83 ec 08             	sub    esp,0x8
c0010580:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010584:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010586:	6a 00                	push   0x0
c0010588:	6a 00                	push   0x0
c001058a:	6a 00                	push   0x0
c001058c:	53                   	push   ebx
c001058d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010590:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010596:	83 c4 10             	add    esp,0x10
c0010599:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001059c:	74 0f                	je     c00105ad <Device::closeAll()+0x31>
c001059e:	83 ec 0c             	sub    esp,0xc
c00105a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105a4:	e8 d3 ff ff ff       	call   c001057c <Device::closeAll()>
c00105a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105ab:	eb e9                	jmp    c0010596 <Device::closeAll()+0x1a>
c00105ad:	83 c4 08             	add    esp,0x8
c00105b0:	5b                   	pop    ebx
c00105b1:	c3                   	ret    

c00105b2 <Device::powerSavingAll(PowerSavingLevel)>:
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00105bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105c1:	56                   	push   esi
c00105c2:	53                   	push   ebx
c00105c3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00105c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105cc:	83 c4 10             	add    esp,0x10
c00105cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105d2:	74 0f                	je     c00105e3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00105d4:	52                   	push   edx
c00105d5:	52                   	push   edx
c00105d6:	56                   	push   esi
c00105d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105da:	e8 d3 ff ff ff       	call   c00105b2 <Device::powerSavingAll(PowerSavingLevel)>
c00105df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105e1:	eb e9                	jmp    c00105cc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00105e3:	58                   	pop    eax
c00105e4:	5b                   	pop    ebx
c00105e5:	5e                   	pop    esi
c00105e6:	c3                   	ret    
c00105e7:	90                   	nop

c00105e8 <Device::setName(char const*)>:
c00105e8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00105f0:	e9 b2 00 ff ff       	jmp    c00006a7 <strcpy>
c00105f5:	90                   	nop

c00105f6 <Device::Device(char const*)>:
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	ba f8 0d 02 c0       	mov    edx,0xc0020df8
c00105fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010602:	89 10                	mov    DWORD PTR [eax],edx
c0010604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010608:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010616:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001062e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010632:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001063c:	83 ec 08             	sub    esp,0x8
c001063f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010647:	e8 9c ff ff ff       	call   c00105e8 <Device::setName(char const*)>
c001064c:	83 c4 10             	add    esp,0x10
c001064f:	83 ec 0c             	sub    esp,0xc
c0010652:	6a 08                	push   0x8
c0010654:	e8 b3 e8 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0010659:	83 c4 10             	add    esp,0x10
c001065c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010662:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010669:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001066d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010677:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001067d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010687:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001068d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010698:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00106b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00106c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00106d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00106e2:	90                   	nop
c00106e3:	83 c4 0c             	add    esp,0xc
c00106e6:	c3                   	ret    
c00106e7:	90                   	nop

c00106e8 <Device::getName()>:
c00106e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ec:	05 d0 00 00 00       	add    eax,0xd0
c00106f1:	c3                   	ret    

c00106f2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f9:	83 ec 08             	sub    esp,0x8
c00106fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010700:	50                   	push   eax
c0010701:	e8 f0 fe ff ff       	call   c00105f6 <Device::Device(char const*)>
c0010706:	83 c4 10             	add    esp,0x10
c0010709:	ba 24 0e 02 c0       	mov    edx,0xc0020e24
c001070e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010712:	89 10                	mov    DWORD PTR [eax],edx
c0010714:	90                   	nop
c0010715:	83 c4 0c             	add    esp,0xc
c0010718:	c3                   	ret    
c0010719:	90                   	nop

c001071a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001071a:	57                   	push   edi
c001071b:	56                   	push   esi
c001071c:	53                   	push   ebx
c001071d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010721:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010725:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010729:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001072f:	75 0c                	jne    c001073d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010731:	52                   	push   edx
c0010732:	52                   	push   edx
c0010733:	53                   	push   ebx
c0010734:	56                   	push   esi
c0010735:	e8 6a e5 00 00       	call   c001eca4 <LinkedList<Device>::addElement(Device*)>
c001073a:	83 c4 10             	add    esp,0x10
c001073d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010743:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010746:	74 12                	je     c001075a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010748:	50                   	push   eax
c0010749:	57                   	push   edi
c001074a:	56                   	push   esi
c001074b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001074e:	e8 c7 ff ff ff       	call   c001071a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010753:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010755:	83 c4 10             	add    esp,0x10
c0010758:	eb e9                	jmp    c0010743 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001075a:	5b                   	pop    ebx
c001075b:	5e                   	pop    esi
c001075c:	5f                   	pop    edi
c001075d:	c3                   	ret    

c001075e <getDevicesOfType(DeviceType)>:
c001075e:	53                   	push   ebx
c001075f:	83 ec 14             	sub    esp,0x14
c0010762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010766:	53                   	push   ebx
c0010767:	e8 14 e6 00 00       	call   c001ed80 <LinkedList<Device>::LinkedList()>
c001076c:	83 c4 0c             	add    esp,0xc
c001076f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010773:	53                   	push   ebx
c0010774:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c001077a:	e8 9b ff ff ff       	call   c001071a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001077f:	89 d8                	mov    eax,ebx
c0010781:	83 c4 18             	add    esp,0x18
c0010784:	5b                   	pop    ebx
c0010785:	c2 04 00             	ret    0x4

c0010788 <HardDiskController::HardDiskController(char const*)>:
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078f:	83 ec 08             	sub    esp,0x8
c0010792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010796:	50                   	push   eax
c0010797:	e8 5a fe ff ff       	call   c00105f6 <Device::Device(char const*)>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	ba 50 0e 02 c0       	mov    edx,0xc0020e50
c00107a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a8:	89 10                	mov    DWORD PTR [eax],edx
c00107aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00107b8:	90                   	nop
c00107b9:	83 c4 0c             	add    esp,0xc
c00107bc:	c3                   	ret    
c00107bd:	90                   	nop

c00107be <HardDiskController::~HardDiskController()>:
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	ba 50 0e 02 c0       	mov    edx,0xc0020e50
c00107c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ca:	89 10                	mov    DWORD PTR [eax],edx
c00107cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d0:	83 ec 0c             	sub    esp,0xc
c00107d3:	50                   	push   eax
c00107d4:	e8 cf fa ff ff       	call   c00102a8 <Device::~Device()>
c00107d9:	83 c4 10             	add    esp,0x10
c00107dc:	90                   	nop
c00107dd:	83 c4 0c             	add    esp,0xc
c00107e0:	c3                   	ret    
c00107e1:	90                   	nop

c00107e2 <HardDiskController::~HardDiskController()>:
c00107e2:	83 ec 0c             	sub    esp,0xc
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ec:	e8 cd ff ff ff       	call   c00107be <HardDiskController::~HardDiskController()>
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	83 ec 08             	sub    esp,0x8
c00107f7:	68 58 01 00 00       	push   0x158
c00107fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010800:	e8 16 e7 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0010805:	83 c4 10             	add    esp,0x10
c0010808:	83 c4 0c             	add    esp,0xc
c001080b:	c3                   	ret    

c001080c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001080c:	83 ec 0c             	sub    esp,0xc
c001080f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010813:	83 ec 08             	sub    esp,0x8
c0010816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081a:	50                   	push   eax
c001081b:	e8 d6 fd ff ff       	call   c00105f6 <Device::Device(char const*)>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c0010828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082c:	89 10                	mov    DWORD PTR [eax],edx
c001082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010832:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001085a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010864:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001086e:	90                   	nop
c001086f:	83 c4 0c             	add    esp,0xc
c0010872:	c3                   	ret    
c0010873:	90                   	nop

c0010874 <PhysicalDisk::startCache()>:
c0010874:	56                   	push   esi
c0010875:	53                   	push   ebx
c0010876:	83 ec 10             	sub    esp,0x10
c0010879:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001087d:	6a 30                	push   0x30
c001087f:	e8 88 e6 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0010884:	89 c6                	mov    esi,eax
c0010886:	58                   	pop    eax
c0010887:	5a                   	pop    edx
c0010888:	53                   	push   ebx
c0010889:	56                   	push   esi
c001088a:	e8 6d 1e 00 00       	call   c00126fc <VCache::VCache(PhysicalDisk*)>
c001088f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010895:	83 c4 14             	add    esp,0x14
c0010898:	5b                   	pop    ebx
c0010899:	5e                   	pop    esi
c001089a:	c3                   	ret    
c001089b:	90                   	nop

c001089c <PhysicalDisk::~PhysicalDisk()>:
c001089c:	83 ec 0c             	sub    esp,0xc
c001089f:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	89 10                	mov    DWORD PTR [eax],edx
c00108aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ae:	83 ec 0c             	sub    esp,0xc
c00108b1:	50                   	push   eax
c00108b2:	e8 f1 f9 ff ff       	call   c00102a8 <Device::~Device()>
c00108b7:	83 c4 10             	add    esp,0x10
c00108ba:	90                   	nop
c00108bb:	83 c4 0c             	add    esp,0xc
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <PhysicalDisk::~PhysicalDisk()>:
c00108c0:	83 ec 0c             	sub    esp,0xc
c00108c3:	83 ec 0c             	sub    esp,0xc
c00108c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ca:	e8 cd ff ff ff       	call   c001089c <PhysicalDisk::~PhysicalDisk()>
c00108cf:	83 c4 10             	add    esp,0x10
c00108d2:	83 ec 08             	sub    esp,0x8
c00108d5:	68 6c 01 00 00       	push   0x16c
c00108da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108de:	e8 38 e6 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	83 c4 0c             	add    esp,0xc
c00108e9:	c3                   	ret    

c00108ea <FPU::FPU(char const*)>:
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	83 ec 08             	sub    esp,0x8
c00108f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f8:	50                   	push   eax
c00108f9:	e8 f8 fc ff ff       	call   c00105f6 <Device::Device(char const*)>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	89 10                	mov    DWORD PTR [eax],edx
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001091a:	90                   	nop
c001091b:	83 c4 0c             	add    esp,0xc
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <FPU::~FPU()>:
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c0010928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092c:	89 10                	mov    DWORD PTR [eax],edx
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	50                   	push   eax
c0010936:	e8 6d f9 ff ff       	call   c00102a8 <Device::~Device()>
c001093b:	83 c4 10             	add    esp,0x10
c001093e:	90                   	nop
c001093f:	83 c4 0c             	add    esp,0xc
c0010942:	c3                   	ret    
c0010943:	90                   	nop

c0010944 <FPU::~FPU()>:
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	83 ec 0c             	sub    esp,0xc
c001094a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094e:	e8 cd ff ff ff       	call   c0010920 <FPU::~FPU()>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	83 ec 08             	sub    esp,0x8
c0010959:	68 58 01 00 00       	push   0x158
c001095e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010962:	e8 b4 e5 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0010967:	83 c4 10             	add    esp,0x10
c001096a:	83 c4 0c             	add    esp,0xc
c001096d:	c3                   	ret    

c001096e <setupFPU()>:
c001096e:	53                   	push   ebx
c001096f:	83 ec 08             	sub    esp,0x8
c0010972:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0010977:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c001097e:	74 19                	je     c0010999 <setupFPU()+0x2b>
c0010980:	83 ec 0c             	sub    esp,0xc
c0010983:	68 58 01 00 00       	push   0x158
c0010988:	e8 7f e5 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001098d:	89 c3                	mov    ebx,eax
c001098f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010992:	e8 bd ca 00 00       	call   c001d454 <AVX::AVX()>
c0010997:	eb 5b                	jmp    c00109f4 <setupFPU()+0x86>
c0010999:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001099f:	84 c0                	test   al,al
c00109a1:	79 19                	jns    c00109bc <setupFPU()+0x4e>
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	68 58 01 00 00       	push   0x158
c00109ab:	e8 5c e5 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00109b0:	89 c3                	mov    ebx,eax
c00109b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00109b5:	e8 c0 cb 00 00       	call   c001d57a <SSE::SSE()>
c00109ba:	eb 38                	jmp    c00109f4 <setupFPU()+0x86>
c00109bc:	a8 20                	test   al,0x20
c00109be:	74 19                	je     c00109d9 <setupFPU()+0x6b>
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	68 58 01 00 00       	push   0x158
c00109c8:	e8 3f e5 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00109cd:	89 c3                	mov    ebx,eax
c00109cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00109d2:	e8 0d cb 00 00       	call   c001d4e4 <MMX::MMX()>
c00109d7:	eb 1b                	jmp    c00109f4 <setupFPU()+0x86>
c00109d9:	a8 10                	test   al,0x10
c00109db:	74 1c                	je     c00109f9 <setupFPU()+0x8b>
c00109dd:	83 ec 0c             	sub    esp,0xc
c00109e0:	68 58 01 00 00       	push   0x158
c00109e5:	e8 22 e5 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00109ea:	89 c3                	mov    ebx,eax
c00109ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ef:	e8 14 cc 00 00       	call   c001d608 <x87::x87()>
c00109f4:	83 c4 10             	add    esp,0x10
c00109f7:	eb 2c                	jmp    c0010a25 <setupFPU()+0xb7>
c00109f9:	83 ec 0c             	sub    esp,0xc
c00109fc:	31 db                	xor    ebx,ebx
c00109fe:	68 a8 0e 02 c0       	push   0xc0020ea8
c0010a03:	e8 f3 e5 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010a08:	e8 7d 35 00 00       	call   c0013f8a <thisCPU()>
c0010a0d:	e8 78 35 00 00       	call   c0013f8a <thisCPU()>
c0010a12:	e8 c1 e3 00 00       	call   c001edd8 <CPU::readCR0()>
c0010a17:	83 c8 04             	or     eax,0x4
c0010a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a1d:	e8 c8 e3 00 00       	call   c001edea <CPU::writeCR0(unsigned long)>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	89 d8                	mov    eax,ebx
c0010a27:	83 c4 08             	add    esp,0x8
c0010a2a:	5b                   	pop    ebx
c0010a2b:	c3                   	ret    

c0010a2c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010a2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a34:	c1 e0 04             	shl    eax,0x4
c0010a37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010a3b:	8d 50 10             	lea    edx,[eax+0x10]
c0010a3e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010a44:	74 08                	je     c0010a4e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010a46:	83 c0 04             	add    eax,0x4
c0010a49:	39 d0                	cmp    eax,edx
c0010a4b:	75 f1                	jne    c0010a3e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010a4d:	c3                   	ret    
c0010a4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a58:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a62:	eb e2                	jmp    c0010a46 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a64 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a64:	57                   	push   edi
c0010a65:	31 c0                	xor    eax,eax
c0010a67:	56                   	push   esi
c0010a68:	53                   	push   ebx
c0010a69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010a6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a71:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010a75:	89 da                	mov    edx,ebx
c0010a77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010a7b:	c1 e2 04             	shl    edx,0x4
c0010a7e:	01 ca                	add    edx,ecx
c0010a80:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010a88:	74 16                	je     c0010aa0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010a8a:	40                   	inc    eax
c0010a8b:	83 f8 04             	cmp    eax,0x4
c0010a8e:	75 f0                	jne    c0010a80 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010a90:	c7 44 24 10 ec 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020eec
c0010a98:	5b                   	pop    ebx
c0010a99:	5e                   	pop    esi
c0010a9a:	5f                   	pop    edi
c0010a9b:	e9 f0 41 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c0010aa0:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010aa3:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010aa6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010aac:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010ab2:	5b                   	pop    ebx
c0010ab3:	5e                   	pop    esi
c0010ab4:	5f                   	pop    edi
c0010ab5:	c3                   	ret    

c0010ab6 <doubleFault(regs*, void*)>:
c0010ab6:	c7 44 24 04 1c 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002101c
c0010abe:	e9 cd 41 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c0010ac3:	90                   	nop

c0010ac4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010ac4:	56                   	push   esi
c0010ac5:	53                   	push   ebx
c0010ac6:	50                   	push   eax
c0010ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010acb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010acf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010ad4:	75 35                	jne    c0010b0b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010ad6:	8d 43 20             	lea    eax,[ebx+0x20]
c0010ad9:	31 d2                	xor    edx,edx
c0010adb:	89 c1                	mov    ecx,eax
c0010add:	c1 e1 04             	shl    ecx,0x4
c0010ae0:	01 f1                	add    ecx,esi
c0010ae2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010aea:	74 3e                	je     c0010b2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010aec:	42                   	inc    edx
c0010aed:	83 fa 04             	cmp    edx,0x4
c0010af0:	75 f0                	jne    c0010ae2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	68 60 0f 02 c0       	push   0xc0020f60
c0010afa:	e8 91 41 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b07:	5a                   	pop    edx
c0010b08:	5b                   	pop    ebx
c0010b09:	5e                   	pop    esi
c0010b0a:	c3                   	ret    
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	56                   	push   esi
c0010b0f:	e8 d4 fb ff ff       	call   c00106e8 <Device::getName()>
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b1a:	75 ba                	jne    c0010ad6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b1c:	83 fb 0f             	cmp    ebx,0xf
c0010b1f:	7f 29                	jg     c0010b4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010b21:	0f b6 9b e0 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd120]
c0010b28:	eb ac                	jmp    c0010ad6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b2a:	8d 04 82             	lea    eax,[edx+eax*4]
c0010b2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b31:	8d 04 86             	lea    eax,[esi+eax*4]
c0010b34:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010b3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b3e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010b44:	89 d8                	mov    eax,ebx
c0010b46:	5a                   	pop    edx
c0010b47:	5b                   	pop    ebx
c0010b48:	5e                   	pop    esi
c0010b49:	c3                   	ret    
c0010b4a:	83 ec 0c             	sub    esp,0xc
c0010b4d:	68 28 0f 02 c0       	push   0xc0020f28
c0010b52:	e8 39 41 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0010b57:	83 c4 10             	add    esp,0x10
c0010b5a:	e9 77 ff ff ff       	jmp    c0010ad6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b5f:	90                   	nop

c0010b60 <InterruptController::clearAllHandlers(int, bool)>:
c0010b60:	56                   	push   esi
c0010b61:	53                   	push   ebx
c0010b62:	52                   	push   edx
c0010b63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010b6b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010b70:	75 61                	jne    c0010bd3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010b72:	8d 46 20             	lea    eax,[esi+0x20]
c0010b75:	c1 e6 04             	shl    esi,0x4
c0010b78:	c1 e0 04             	shl    eax,0x4
c0010b7b:	01 de                	add    esi,ebx
c0010b7d:	01 d8                	add    eax,ebx
c0010b7f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010b89:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010b93:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010b9d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010ba7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010bb1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010bbb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010bc5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010bcf:	58                   	pop    eax
c0010bd0:	5b                   	pop    ebx
c0010bd1:	5e                   	pop    esi
c0010bd2:	c3                   	ret    
c0010bd3:	83 ec 0c             	sub    esp,0xc
c0010bd6:	53                   	push   ebx
c0010bd7:	e8 0c fb ff ff       	call   c00106e8 <Device::getName()>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010be2:	75 8e                	jne    c0010b72 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010be4:	83 fe 0f             	cmp    esi,0xf
c0010be7:	7f 09                	jg     c0010bf2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010be9:	0f b6 b6 e0 2e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd120]
c0010bf0:	eb 80                	jmp    c0010b72 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bf2:	83 ec 0c             	sub    esp,0xc
c0010bf5:	68 9c 0f 02 c0       	push   0xc0020f9c
c0010bfa:	e8 91 40 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	e9 6b ff ff ff       	jmp    c0010b72 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c07:	90                   	nop

c0010c08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010c08:	56                   	push   esi
c0010c09:	53                   	push   ebx
c0010c0a:	52                   	push   edx
c0010c0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c13:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c18:	75 3a                	jne    c0010c54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1e:	8d 50 20             	lea    edx,[eax+0x20]
c0010c21:	c1 e2 04             	shl    edx,0x4
c0010c24:	8d 04 16             	lea    eax,[esi+edx*1]
c0010c27:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010c2b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010c31:	74 0b                	je     c0010c3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010c33:	83 c0 04             	add    eax,0x4
c0010c36:	39 d0                	cmp    eax,edx
c0010c38:	75 f1                	jne    c0010c2b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010c3a:	58                   	pop    eax
c0010c3b:	5b                   	pop    ebx
c0010c3c:	5e                   	pop    esi
c0010c3d:	c3                   	ret    
c0010c3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c48:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c52:	eb df                	jmp    c0010c33 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010c54:	83 ec 0c             	sub    esp,0xc
c0010c57:	56                   	push   esi
c0010c58:	e8 8b fa ff ff       	call   c00106e8 <Device::getName()>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c63:	75 b5                	jne    c0010c1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c65:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010c6a:	7f 11                	jg     c0010c7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c70:	0f b6 80 e0 2e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd120]
c0010c77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c7b:	eb 9d                	jmp    c0010c1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c7d:	83 ec 0c             	sub    esp,0xc
c0010c80:	68 9c 0f 02 c0       	push   0xc0020f9c
c0010c85:	e8 06 40 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	eb 8b                	jmp    c0010c1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010c8f <nmiHandler(regs*, void*)>:
c0010c8f:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0010c94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c98:	e9 c5 a6 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010c9d <int_handler>:
c0010c9d:	55                   	push   ebp
c0010c9e:	57                   	push   edi
c0010c9f:	56                   	push   esi
c0010ca0:	53                   	push   ebx
c0010ca1:	83 ec 0c             	sub    esp,0xc
c0010ca4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ca8:	80 3d d0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241d0,0x0
c0010caf:	74 0b                	je     c0010cbc <int_handler+0x1f>
c0010cb1:	fa                   	cli    
c0010cb2:	f4                   	hlt    
c0010cb3:	80 3d d0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241d0,0x0
c0010cba:	75 f5                	jne    c0010cb1 <int_handler+0x14>
c0010cbc:	e8 c9 32 00 00       	call   c0013f8a <thisCPU()>
c0010cc1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010cc4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010cca:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ccd:	83 f8 17             	cmp    eax,0x17
c0010cd0:	77 13                	ja     c0010ce5 <int_handler+0x48>
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cd7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cda:	0f b6 c0             	movzx  eax,al
c0010cdd:	50                   	push   eax
c0010cde:	57                   	push   edi
c0010cdf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	83 c3 15             	add    ebx,0x15
c0010ce8:	c1 e3 04             	shl    ebx,0x4
c0010ceb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010cef:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010cf6:	31 db                	xor    ebx,ebx
c0010cf8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010cfc:	85 c0                	test   eax,eax
c0010cfe:	74 13                	je     c0010d13 <int_handler+0x76>
c0010d00:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010d03:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010d07:	74 1c                	je     c0010d25 <int_handler+0x88>
c0010d09:	83 ec 08             	sub    esp,0x8
c0010d0c:	52                   	push   edx
c0010d0d:	56                   	push   esi
c0010d0e:	ff d0                	call   eax
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	43                   	inc    ebx
c0010d14:	83 fb 04             	cmp    ebx,0x4
c0010d17:	75 df                	jne    c0010cf8 <int_handler+0x5b>
c0010d19:	83 c4 0c             	add    esp,0xc
c0010d1c:	31 c0                	xor    eax,eax
c0010d1e:	5b                   	pop    ebx
c0010d1f:	31 d2                	xor    edx,edx
c0010d21:	5e                   	pop    esi
c0010d22:	5f                   	pop    edi
c0010d23:	5d                   	pop    ebp
c0010d24:	c3                   	ret    
c0010d25:	83 ec 08             	sub    esp,0x8
c0010d28:	52                   	push   edx
c0010d29:	56                   	push   esi
c0010d2a:	ff d0                	call   eax
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	83 c4 0c             	add    esp,0xc
c0010d32:	5b                   	pop    ebx
c0010d33:	5e                   	pop    esi
c0010d34:	5f                   	pop    edi
c0010d35:	5d                   	pop    ebp
c0010d36:	c3                   	ret    
c0010d37:	90                   	nop

c0010d38 <InterruptController::InterruptController(char const*)>:
c0010d38:	83 ec 1c             	sub    esp,0x1c
c0010d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d3f:	83 ec 08             	sub    esp,0x8
c0010d42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d46:	50                   	push   eax
c0010d47:	e8 aa f8 ff ff       	call   c00105f6 <Device::Device(char const*)>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c0010d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d58:	89 10                	mov    DWORD PTR [eax],edx
c0010d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d5e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010d68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d70:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010d78:	7f 5e                	jg     c0010dd8 <InterruptController::InterruptController(char const*)+0xa0>
c0010d7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d82:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010d87:	7f 49                	jg     c0010dd2 <InterruptController::InterruptController(char const*)+0x9a>
c0010d89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d91:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d9c:	01 ca                	add    edx,ecx
c0010d9e:	83 c2 54             	add    edx,0x54
c0010da1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010db1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010db8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dbc:	01 ca                	add    edx,ecx
c0010dbe:	81 c2 54 04 00 00    	add    edx,0x454
c0010dc4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010dcc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010dd0:	eb b0                	jmp    c0010d82 <InterruptController::InterruptController(char const*)+0x4a>
c0010dd2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010dd6:	eb 98                	jmp    c0010d70 <InterruptController::InterruptController(char const*)+0x38>
c0010dd8:	90                   	nop
c0010dd9:	83 c4 1c             	add    esp,0x1c
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <InterruptController::~InterruptController()>:
c0010dde:	83 ec 0c             	sub    esp,0xc
c0010de1:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	89 10                	mov    DWORD PTR [eax],edx
c0010dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	50                   	push   eax
c0010df4:	e8 af f4 ff ff       	call   c00102a8 <Device::~Device()>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	90                   	nop
c0010dfd:	83 c4 0c             	add    esp,0xc
c0010e00:	c3                   	ret    
c0010e01:	90                   	nop

c0010e02 <InterruptController::~InterruptController()>:
c0010e02:	83 ec 0c             	sub    esp,0xc
c0010e05:	83 ec 0c             	sub    esp,0xc
c0010e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0c:	e8 cd ff ff ff       	call   c0010dde <InterruptController::~InterruptController()>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	83 ec 08             	sub    esp,0x8
c0010e17:	68 58 21 00 00       	push   0x2158
c0010e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e20:	e8 f6 e0 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	83 c4 0c             	add    esp,0xc
c0010e2b:	c3                   	ret    

c0010e2c <displayDebugInfo(regs*)>:
c0010e2c:	55                   	push   ebp
c0010e2d:	57                   	push   edi
c0010e2e:	56                   	push   esi
c0010e2f:	53                   	push   ebx
c0010e30:	83 ec 24             	sub    esp,0x24
c0010e33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e37:	0f 20 c2             	mov    edx,cr0
c0010e3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e3e:	0f 20 d7             	mov    edi,cr2
c0010e41:	0f 20 de             	mov    esi,cr3
c0010e44:	0f 20 e5             	mov    ebp,cr4
c0010e47:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010e4a:	68 29 10 02 c0       	push   0xc0021029
c0010e4f:	e8 a7 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e54:	58                   	pop    eax
c0010e55:	5a                   	pop    edx
c0010e56:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e59:	68 34 10 02 c0       	push   0xc0021034
c0010e5e:	e8 98 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e63:	59                   	pop    ecx
c0010e64:	58                   	pop    eax
c0010e65:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e68:	68 3f 10 02 c0       	push   0xc002103f
c0010e6d:	e8 89 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e72:	58                   	pop    eax
c0010e73:	5a                   	pop    edx
c0010e74:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010e77:	68 4a 10 02 c0       	push   0xc002104a
c0010e7c:	e8 7a e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e81:	59                   	pop    ecx
c0010e82:	58                   	pop    eax
c0010e83:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e86:	68 55 10 02 c0       	push   0xc0021055
c0010e8b:	e8 6b e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e90:	58                   	pop    eax
c0010e91:	5a                   	pop    edx
c0010e92:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010e95:	68 60 10 02 c0       	push   0xc0021060
c0010e9a:	e8 5c e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010e9f:	59                   	pop    ecx
c0010ea0:	58                   	pop    eax
c0010ea1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010ea4:	68 7a 10 02 c0       	push   0xc002107a
c0010ea9:	e8 4d e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010eae:	58                   	pop    eax
c0010eaf:	5a                   	pop    edx
c0010eb0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010eb3:	68 6b 10 02 c0       	push   0xc002106b
c0010eb8:	e8 3e e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010ebd:	59                   	pop    ecx
c0010ebe:	58                   	pop    eax
c0010ebf:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010ec2:	68 76 10 02 c0       	push   0xc0021076
c0010ec7:	e8 2f e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010ecc:	58                   	pop    eax
c0010ecd:	5a                   	pop    edx
c0010ece:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010ed1:	68 85 10 02 c0       	push   0xc0021085
c0010ed6:	e8 20 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010edb:	59                   	pop    ecx
c0010edc:	58                   	pop    eax
c0010edd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ee0:	68 90 10 02 c0       	push   0xc0021090
c0010ee5:	e8 11 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010eea:	58                   	pop    eax
c0010eeb:	5a                   	pop    edx
c0010eec:	57                   	push   edi
c0010eed:	68 9b 10 02 c0       	push   0xc002109b
c0010ef2:	e8 04 e1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010ef7:	59                   	pop    ecx
c0010ef8:	58                   	pop    eax
c0010ef9:	56                   	push   esi
c0010efa:	68 a6 10 02 c0       	push   0xc00210a6
c0010eff:	e8 f7 e0 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0010f04:	58                   	pop    eax
c0010f05:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f10:	e8 b8 bf ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0010f15:	58                   	pop    eax
c0010f16:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010f19:	5a                   	pop    edx
c0010f1a:	c1 e0 05             	shl    eax,0x5
c0010f1d:	05 40 2c 02 c0       	add    eax,0xc0022c40
c0010f22:	50                   	push   eax
c0010f23:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f2e:	e8 b9 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f33:	59                   	pop    ecx
c0010f34:	58                   	pop    eax
c0010f35:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f3a:	68 b1 10 02 c0       	push   0xc00210b1
c0010f3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f45:	e8 a2 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f4a:	58                   	pop    eax
c0010f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f50:	5a                   	pop    edx
c0010f51:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f54:	83 c0 0c             	add    eax,0xc
c0010f57:	50                   	push   eax
c0010f58:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f63:	e8 84 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f68:	59                   	pop    ecx
c0010f69:	58                   	pop    eax
c0010f6a:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f6f:	68 ba 10 02 c0       	push   0xc00210ba
c0010f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7a:	e8 6d c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f7f:	58                   	pop    eax
c0010f80:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f85:	5a                   	pop    edx
c0010f86:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f8f:	e8 7e c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f94:	59                   	pop    ecx
c0010f95:	58                   	pop    eax
c0010f96:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010f9b:	68 c2 10 02 c0       	push   0xc00210c2
c0010fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa6:	e8 41 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fab:	58                   	pop    eax
c0010fac:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010fb1:	5a                   	pop    edx
c0010fb2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fbb:	e8 52 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fc0:	59                   	pop    ecx
c0010fc1:	58                   	pop    eax
c0010fc2:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010fc7:	68 ca 10 02 c0       	push   0xc00210ca
c0010fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd2:	e8 15 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fd7:	58                   	pop    eax
c0010fd8:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010fdd:	5a                   	pop    edx
c0010fde:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fe7:	e8 26 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fec:	59                   	pop    ecx
c0010fed:	58                   	pop    eax
c0010fee:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0010ff3:	68 d2 10 02 c0       	push   0xc00210d2
c0010ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ffe:	e8 e9 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011003:	58                   	pop    eax
c0011004:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011009:	5a                   	pop    edx
c001100a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001100d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011013:	e8 fa c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011018:	59                   	pop    ecx
c0011019:	58                   	pop    eax
c001101a:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c001101f:	68 da 10 02 c0       	push   0xc00210da
c0011024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001102a:	e8 bd c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001102f:	58                   	pop    eax
c0011030:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011035:	5a                   	pop    edx
c0011036:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011039:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001103f:	e8 ce c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011044:	59                   	pop    ecx
c0011045:	58                   	pop    eax
c0011046:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c001104b:	68 e2 10 02 c0       	push   0xc00210e2
c0011050:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011056:	e8 91 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001105b:	58                   	pop    eax
c001105c:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011061:	5a                   	pop    edx
c0011062:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001106b:	e8 a2 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011070:	59                   	pop    ecx
c0011071:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011076:	5b                   	pop    ebx
c0011077:	68 ea 10 02 c0       	push   0xc00210ea
c001107c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011082:	e8 65 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011087:	58                   	pop    eax
c0011088:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c001108d:	5a                   	pop    edx
c001108e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011092:	52                   	push   edx
c0011093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011099:	e8 74 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001109e:	59                   	pop    ecx
c001109f:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00110a4:	5b                   	pop    ebx
c00110a5:	68 f3 10 02 c0       	push   0xc00210f3
c00110aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b0:	e8 37 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110b5:	58                   	pop    eax
c00110b6:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00110bb:	5a                   	pop    edx
c00110bc:	57                   	push   edi
c00110bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c3:	e8 4a c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110c8:	59                   	pop    ecx
c00110c9:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00110ce:	5b                   	pop    ebx
c00110cf:	68 fb 10 02 c0       	push   0xc00210fb
c00110d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110da:	e8 0d c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110df:	5f                   	pop    edi
c00110e0:	58                   	pop    eax
c00110e1:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00110e6:	56                   	push   esi
c00110e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ed:	e8 20 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110f2:	58                   	pop    eax
c00110f3:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00110f8:	5a                   	pop    edx
c00110f9:	68 03 11 02 c0       	push   0xc0021103
c00110fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011104:	e8 e3 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011109:	59                   	pop    ecx
c001110a:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c001110f:	5b                   	pop    ebx
c0011110:	55                   	push   ebp
c0011111:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011117:	e8 f6 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001111c:	5e                   	pop    esi
c001111d:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011122:	5f                   	pop    edi
c0011123:	68 0b 11 02 c0       	push   0xc002110b
c0011128:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001112e:	e8 b9 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011133:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011138:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001113e:	e8 b0 dc 00 00       	call   c001edf3 <CPU::readDR0()>
c0011143:	5d                   	pop    ebp
c0011144:	5a                   	pop    edx
c0011145:	50                   	push   eax
c0011146:	53                   	push   ebx
c0011147:	e8 c6 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001114c:	59                   	pop    ecx
c001114d:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011152:	5b                   	pop    ebx
c0011153:	68 14 11 02 c0       	push   0xc0021114
c0011158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115e:	e8 89 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011163:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011168:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001116e:	e8 92 dc 00 00       	call   c001ee05 <CPU::readDR1()>
c0011173:	5e                   	pop    esi
c0011174:	5f                   	pop    edi
c0011175:	50                   	push   eax
c0011176:	53                   	push   ebx
c0011177:	e8 96 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001117c:	5d                   	pop    ebp
c001117d:	58                   	pop    eax
c001117e:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011183:	68 1c 11 02 c0       	push   0xc002111c
c0011188:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118e:	e8 59 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011193:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011198:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001119e:	e8 74 dc 00 00       	call   c001ee17 <CPU::readDR2()>
c00111a3:	5a                   	pop    edx
c00111a4:	59                   	pop    ecx
c00111a5:	50                   	push   eax
c00111a6:	53                   	push   ebx
c00111a7:	e8 66 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111ac:	5b                   	pop    ebx
c00111ad:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00111b2:	5e                   	pop    esi
c00111b3:	68 24 11 02 c0       	push   0xc0021124
c00111b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111be:	e8 29 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00111c3:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00111c8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111ce:	e8 56 dc 00 00       	call   c001ee29 <CPU::readDR3()>
c00111d3:	5f                   	pop    edi
c00111d4:	5d                   	pop    ebp
c00111d5:	50                   	push   eax
c00111d6:	53                   	push   ebx
c00111d7:	e8 36 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111dc:	58                   	pop    eax
c00111dd:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00111e2:	5a                   	pop    edx
c00111e3:	68 2c 11 02 c0       	push   0xc002112c
c00111e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ee:	e8 f9 c0 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00111f3:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c00111f8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111fe:	e8 38 dc 00 00       	call   c001ee3b <CPU::readDR6()>
c0011203:	59                   	pop    ecx
c0011204:	5e                   	pop    esi
c0011205:	50                   	push   eax
c0011206:	53                   	push   ebx
c0011207:	e8 06 c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001120c:	5f                   	pop    edi
c001120d:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011212:	5d                   	pop    ebp
c0011213:	68 34 11 02 c0       	push   0xc0021134
c0011218:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121e:	e8 c9 c0 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011223:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011228:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001122e:	e8 1a dc 00 00       	call   c001ee4d <CPU::readDR7()>
c0011233:	5a                   	pop    edx
c0011234:	59                   	pop    ecx
c0011235:	50                   	push   eax
c0011236:	53                   	push   ebx
c0011237:	e8 d6 c0 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001123c:	fa                   	cli    
c001123d:	f4                   	hlt    
c001123e:	83 c4 10             	add    esp,0x10
c0011241:	eb fe                	jmp    c0011241 <displayDebugInfo(regs*)+0x415>

c0011243 <x87EmulHandler(regs*, void*)>:
c0011243:	53                   	push   ebx
c0011244:	83 ec 08             	sub    esp,0x8
c0011247:	a1 14 39 02 c0       	mov    eax,ds:0xc0023914
c001124c:	85 c0                	test   eax,eax
c001124e:	74 15                	je     c0011265 <x87EmulHandler(regs*, void*)+0x22>
c0011250:	83 ec 0c             	sub    esp,0xc
c0011253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011257:	ff d0                	call   eax
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	84 c0                	test   al,al
c001125e:	74 2f                	je     c001128f <x87EmulHandler(regs*, void*)+0x4c>
c0011260:	83 c4 08             	add    esp,0x8
c0011263:	5b                   	pop    ebx
c0011264:	c3                   	ret    
c0011265:	83 ec 08             	sub    esp,0x8
c0011268:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c001126e:	6a 01                	push   0x1
c0011270:	68 3c 11 02 c0       	push   0xc002113c
c0011275:	e8 08 64 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c001127a:	5a                   	pop    edx
c001127b:	59                   	pop    ecx
c001127c:	53                   	push   ebx
c001127d:	50                   	push   eax
c001127e:	e8 52 65 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c0011283:	a1 14 39 02 c0       	mov    eax,ds:0xc0023914
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	85 c0                	test   eax,eax
c001128d:	75 c1                	jne    c0011250 <x87EmulHandler(regs*, void*)+0xd>
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	68 59 11 02 c0       	push   0xc0021159
c0011297:	e8 5f dd ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001129c:	58                   	pop    eax
c001129d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a1:	e8 86 fb ff ff       	call   c0010e2c <displayDebugInfo(regs*)>

c00112a6 <gpFault(regs*, void*)>:
c00112a6:	53                   	push   ebx
c00112a7:	83 ec 14             	sub    esp,0x14
c00112aa:	c7 05 10 39 02 c0 53 8c 01 c0 	mov    DWORD PTR ds:0xc0023910,0xc0018c53
c00112b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00112b8:	53                   	push   ebx
c00112b9:	e8 95 79 00 00       	call   c0018c53 <Vm::faultHandler(regs*)>
c00112be:	83 c4 10             	add    esp,0x10
c00112c1:	84 c0                	test   al,al
c00112c3:	74 05                	je     c00112ca <gpFault(regs*, void*)+0x24>
c00112c5:	83 c4 08             	add    esp,0x8
c00112c8:	5b                   	pop    ebx
c00112c9:	c3                   	ret    
c00112ca:	83 ec 0c             	sub    esp,0xc
c00112cd:	68 59 11 02 c0       	push   0xc0021159
c00112d2:	e8 24 dd ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00112d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112da:	e8 4d fb ff ff       	call   c0010e2c <displayDebugInfo(regs*)>

c00112df <pgFault(regs*, void*)>:
c00112df:	83 ec 18             	sub    esp,0x18
c00112e2:	68 74 11 02 c0       	push   0xc0021174
c00112e7:	e8 0f dd ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00112ec:	58                   	pop    eax
c00112ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f1:	e8 36 fb ff ff       	call   c0010e2c <displayDebugInfo(regs*)>

c00112f6 <otherISRHandler(regs*, void*)>:
c00112f6:	53                   	push   ebx
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112fe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011301:	50                   	push   eax
c0011302:	50                   	push   eax
c0011303:	68 81 11 02 c0       	push   0xc0021181
c0011308:	e8 ee dc ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001130d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011310:	e8 17 fb ff ff       	call   c0010e2c <displayDebugInfo(regs*)>

c0011315 <opcodeFault(regs*, void*)>:
c0011315:	53                   	push   ebx
c0011316:	83 ec 08             	sub    esp,0x8
c0011319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001131d:	e8 68 2c 00 00       	call   c0013f8a <thisCPU()>
c0011322:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011329:	74 16                	je     c0011341 <opcodeFault(regs*, void*)+0x2c>
c001132b:	83 ec 0c             	sub    esp,0xc
c001132e:	68 d8 0f 02 c0       	push   0xc0020fd8
c0011333:	e8 c3 dc ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0011338:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001133c:	83 c4 18             	add    esp,0x18
c001133f:	5b                   	pop    ebx
c0011340:	c3                   	ret    
c0011341:	83 ec 0c             	sub    esp,0xc
c0011344:	68 9e 11 02 c0       	push   0xc002119e
c0011349:	e8 ad dc ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001134e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011351:	c1 e0 04             	shl    eax,0x4
c0011354:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011357:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001135b:	89 14 24             	mov    DWORD PTR [esp],edx
c001135e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011362:	52                   	push   edx
c0011363:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011367:	52                   	push   edx
c0011368:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001136b:	50                   	push   eax
c001136c:	68 fc 0f 02 c0       	push   0xc0020ffc
c0011371:	e8 85 dc ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0011376:	83 c4 14             	add    esp,0x14
c0011379:	53                   	push   ebx
c001137a:	e8 ad fa ff ff       	call   c0010e2c <displayDebugInfo(regs*)>

c001137f <displayProgramFault(char const*)>:
c001137f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011384:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011387:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001138d:	85 c0                	test   eax,eax
c001138f:	74 15                	je     c00113a6 <displayProgramFault(char const*)+0x27>
c0011391:	83 ec 0c             	sub    esp,0xc
c0011394:	6a 04                	push   0x4
c0011396:	6a 0f                	push   0xf
c0011398:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001139c:	50                   	push   eax
c001139d:	e8 0c bc ff ff       	call   c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>
c00113a2:	83 c4 1c             	add    esp,0x1c
c00113a5:	c3                   	ret    
c00113a6:	c3                   	ret    
c00113a7:	90                   	nop

c00113a8 <InterruptController::convertLegacyIRQNumber(int)>:
c00113a8:	53                   	push   ebx
c00113a9:	83 ec 14             	sub    esp,0x14
c00113ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b4:	e8 2f f3 ff ff       	call   c00106e8 <Device::getName()>
c00113b9:	83 c4 10             	add    esp,0x10
c00113bc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00113bf:	74 07                	je     c00113c8 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00113c1:	89 d8                	mov    eax,ebx
c00113c3:	83 c4 08             	add    esp,0x8
c00113c6:	5b                   	pop    ebx
c00113c7:	c3                   	ret    
c00113c8:	83 fb 0f             	cmp    ebx,0xf
c00113cb:	7f 0e                	jg     c00113db <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00113cd:	0f b6 9b e0 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd120]
c00113d4:	83 c4 08             	add    esp,0x8
c00113d7:	89 d8                	mov    eax,ebx
c00113d9:	5b                   	pop    ebx
c00113da:	c3                   	ret    
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	68 28 0f 02 c0       	push   0xc0020f28
c00113e3:	e8 a8 38 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c00113e8:	89 d8                	mov    eax,ebx
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	83 c4 08             	add    esp,0x8
c00113f0:	5b                   	pop    ebx
c00113f1:	c3                   	ret    

c00113f2 <setupInterruptController()>:
c00113f2:	56                   	push   esi
c00113f3:	53                   	push   ebx
c00113f4:	51                   	push   ecx
c00113f5:	e8 8d 2b 00 00       	call   c0013f87 <getCPUNumber()>
c00113fa:	85 c0                	test   eax,eax
c00113fc:	0f 85 10 02 00 00    	jne    c0011612 <setupInterruptController()+0x220>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001140a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011410:	68 58 21 00 00       	push   0x2158
c0011415:	83 e0 01             	and    eax,0x1
c0011418:	89 c6                	mov    esi,eax
c001141a:	e8 ed da ff ff       	call   c000ef0c <operator new(unsigned long)>
c001141f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011422:	89 c3                	mov    ebx,eax
c0011424:	e8 4b c8 00 00       	call   c001dc74 <PIC::PIC()>
c0011429:	6a 00                	push   0x0
c001142b:	6a 00                	push   0x0
c001142d:	6a 00                	push   0x0
c001142f:	53                   	push   ebx
c0011430:	e8 83 cb 00 00       	call   c001dfb8 <PIC::open(int, int, void*)>
c0011435:	83 c4 20             	add    esp,0x20
c0011438:	89 f0                	mov    eax,esi
c001143a:	84 c0                	test   al,al
c001143c:	0f 85 92 01 00 00    	jne    c00115d4 <setupInterruptController()+0x1e2>
c0011442:	83 ec 08             	sub    esp,0x8
c0011445:	53                   	push   ebx
c0011446:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c001144c:	e8 b5 ef ff ff       	call   c0010406 <Device::addChild(Device*)>
c0011451:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011453:	6a 00                	push   0x0
c0011455:	68 f6 12 01 c0       	push   0xc00112f6
c001145a:	6a 00                	push   0x0
c001145c:	53                   	push   ebx
c001145d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011460:	83 c4 20             	add    esp,0x20
c0011463:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011465:	6a 00                	push   0x0
c0011467:	68 f6 12 01 c0       	push   0xc00112f6
c001146c:	6a 01                	push   0x1
c001146e:	53                   	push   ebx
c001146f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011472:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011474:	6a 00                	push   0x0
c0011476:	68 8f 0c 01 c0       	push   0xc0010c8f
c001147b:	6a 02                	push   0x2
c001147d:	53                   	push   ebx
c001147e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011481:	83 c4 20             	add    esp,0x20
c0011484:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011486:	6a 00                	push   0x0
c0011488:	68 f6 12 01 c0       	push   0xc00112f6
c001148d:	6a 03                	push   0x3
c001148f:	53                   	push   ebx
c0011490:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011495:	6a 00                	push   0x0
c0011497:	68 f6 12 01 c0       	push   0xc00112f6
c001149c:	6a 04                	push   0x4
c001149e:	53                   	push   ebx
c001149f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114a2:	83 c4 20             	add    esp,0x20
c00114a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a7:	6a 00                	push   0x0
c00114a9:	68 f6 12 01 c0       	push   0xc00112f6
c00114ae:	6a 05                	push   0x5
c00114b0:	53                   	push   ebx
c00114b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114b6:	6a 00                	push   0x0
c00114b8:	68 15 13 01 c0       	push   0xc0011315
c00114bd:	6a 06                	push   0x6
c00114bf:	53                   	push   ebx
c00114c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114c3:	83 c4 20             	add    esp,0x20
c00114c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114c8:	6a 00                	push   0x0
c00114ca:	68 43 12 01 c0       	push   0xc0011243
c00114cf:	6a 07                	push   0x7
c00114d1:	53                   	push   ebx
c00114d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d7:	6a 00                	push   0x0
c00114d9:	68 b6 0a 01 c0       	push   0xc0010ab6
c00114de:	6a 08                	push   0x8
c00114e0:	53                   	push   ebx
c00114e1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114e4:	83 c4 20             	add    esp,0x20
c00114e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e9:	6a 00                	push   0x0
c00114eb:	68 f6 12 01 c0       	push   0xc00112f6
c00114f0:	6a 09                	push   0x9
c00114f2:	53                   	push   ebx
c00114f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f8:	6a 00                	push   0x0
c00114fa:	68 f6 12 01 c0       	push   0xc00112f6
c00114ff:	6a 0a                	push   0xa
c0011501:	53                   	push   ebx
c0011502:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011505:	83 c4 20             	add    esp,0x20
c0011508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001150a:	6a 00                	push   0x0
c001150c:	68 f6 12 01 c0       	push   0xc00112f6
c0011511:	6a 0b                	push   0xb
c0011513:	53                   	push   ebx
c0011514:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011517:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011519:	6a 00                	push   0x0
c001151b:	68 f6 12 01 c0       	push   0xc00112f6
c0011520:	6a 0c                	push   0xc
c0011522:	53                   	push   ebx
c0011523:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011526:	83 c4 20             	add    esp,0x20
c0011529:	8b 03                	mov    eax,DWORD PTR [ebx]
c001152b:	6a 00                	push   0x0
c001152d:	68 a6 12 01 c0       	push   0xc00112a6
c0011532:	6a 0d                	push   0xd
c0011534:	53                   	push   ebx
c0011535:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011538:	8b 03                	mov    eax,DWORD PTR [ebx]
c001153a:	6a 00                	push   0x0
c001153c:	68 df 12 01 c0       	push   0xc00112df
c0011541:	6a 0e                	push   0xe
c0011543:	53                   	push   ebx
c0011544:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011547:	83 c4 20             	add    esp,0x20
c001154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001154c:	6a 00                	push   0x0
c001154e:	68 f6 12 01 c0       	push   0xc00112f6
c0011553:	6a 0f                	push   0xf
c0011555:	53                   	push   ebx
c0011556:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011559:	8b 03                	mov    eax,DWORD PTR [ebx]
c001155b:	6a 00                	push   0x0
c001155d:	68 f6 12 01 c0       	push   0xc00112f6
c0011562:	6a 10                	push   0x10
c0011564:	53                   	push   ebx
c0011565:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011568:	83 c4 20             	add    esp,0x20
c001156b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001156d:	6a 00                	push   0x0
c001156f:	68 f6 12 01 c0       	push   0xc00112f6
c0011574:	6a 11                	push   0x11
c0011576:	53                   	push   ebx
c0011577:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001157a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001157c:	6a 00                	push   0x0
c001157e:	68 f6 12 01 c0       	push   0xc00112f6
c0011583:	6a 12                	push   0x12
c0011585:	53                   	push   ebx
c0011586:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011589:	83 c4 20             	add    esp,0x20
c001158c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001158e:	6a 00                	push   0x0
c0011590:	68 f6 12 01 c0       	push   0xc00112f6
c0011595:	6a 13                	push   0x13
c0011597:	53                   	push   ebx
c0011598:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001159b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001159d:	6a 00                	push   0x0
c001159f:	68 f6 12 01 c0       	push   0xc00112f6
c00115a4:	6a 14                	push   0x14
c00115a6:	53                   	push   ebx
c00115a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115aa:	83 c4 20             	add    esp,0x20
c00115ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115af:	6a 00                	push   0x0
c00115b1:	68 f6 12 01 c0       	push   0xc00112f6
c00115b6:	6a 1e                	push   0x1e
c00115b8:	53                   	push   ebx
c00115b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115be:	6a 00                	push   0x0
c00115c0:	68 73 66 01 c0       	push   0xc0016673
c00115c5:	6a 60                	push   0x60
c00115c7:	53                   	push   ebx
c00115c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115cb:	83 c4 20             	add    esp,0x20
c00115ce:	89 d8                	mov    eax,ebx
c00115d0:	5a                   	pop    edx
c00115d1:	5b                   	pop    ebx
c00115d2:	5e                   	pop    esi
c00115d3:	c3                   	ret    
c00115d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115d6:	6a 00                	push   0x0
c00115d8:	6a 00                	push   0x0
c00115da:	6a 00                	push   0x0
c00115dc:	53                   	push   ebx
c00115dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115e5:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00115e8:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00115ef:	e8 18 d9 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00115f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00115f7:	89 c3                	mov    ebx,eax
c00115f9:	e8 b4 c1 00 00       	call   c001d7b2 <APIC::APIC()>
c00115fe:	6a 00                	push   0x0
c0011600:	6a 00                	push   0x0
c0011602:	6a 00                	push   0x0
c0011604:	53                   	push   ebx
c0011605:	e8 c6 c0 00 00       	call   c001d6d0 <APIC::open(int, int, void*)>
c001160a:	83 c4 20             	add    esp,0x20
c001160d:	e9 30 fe ff ff       	jmp    c0011442 <setupInterruptController()+0x50>
c0011612:	83 ec 0c             	sub    esp,0xc
c0011615:	68 58 21 00 00       	push   0x2158
c001161a:	e8 ed d8 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001161f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011622:	89 c3                	mov    ebx,eax
c0011624:	e8 89 c1 00 00       	call   c001d7b2 <APIC::APIC()>
c0011629:	6a 00                	push   0x0
c001162b:	6a 00                	push   0x0
c001162d:	6a 00                	push   0x0
c001162f:	53                   	push   ebx
c0011630:	e8 9b c0 00 00       	call   c001d6d0 <APIC::open(int, int, void*)>
c0011635:	83 c4 18             	add    esp,0x18
c0011638:	53                   	push   ebx
c0011639:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c001163f:	e8 c2 ed ff ff       	call   c0010406 <Device::addChild(Device*)>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	89 d8                	mov    eax,ebx
c0011649:	5a                   	pop    edx
c001164a:	5b                   	pop    ebx
c001164b:	5e                   	pop    esi
c001164c:	c3                   	ret    
c001164d:	90                   	nop

c001164e <startGUI(void*)>:
c001164e:	55                   	push   ebp
c001164f:	89 e5                	mov    ebp,esp
c0011651:	53                   	push   ebx
c0011652:	83 ec 04             	sub    esp,0x4
c0011655:	e8 88 65 00 00       	call   c0017be2 <unlockScheduler()>
c001165a:	e8 6c 65 00 00       	call   c0017bcb <getIRQNestingLevel()>
c001165f:	83 ec 08             	sub    esp,0x8
c0011662:	50                   	push   eax
c0011663:	68 f8 11 02 c0       	push   0xc00211f8
c0011668:	e8 8e d9 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c0011676:	83 ec 08             	sub    esp,0x8
c0011679:	6a 01                	push   0x1
c001167b:	68 12 12 02 c0       	push   0xc0021212
c0011680:	e8 fd 5f 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	83 ec 08             	sub    esp,0x8
c001168b:	53                   	push   ebx
c001168c:	50                   	push   eax
c001168d:	e8 43 61 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c0011692:	83 c4 10             	add    esp,0x10
c0011695:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c001169b:	83 ec 08             	sub    esp,0x8
c001169e:	6a 01                	push   0x1
c00116a0:	68 2c 12 02 c0       	push   0xc002122c
c00116a5:	e8 d8 5f 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c00116aa:	83 c4 10             	add    esp,0x10
c00116ad:	83 ec 08             	sub    esp,0x8
c00116b0:	53                   	push   ebx
c00116b1:	50                   	push   eax
c00116b2:	e8 1e 61 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	90                   	nop
c00116bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00116be:	c9                   	leave  
c00116bf:	c3                   	ret    

c00116c0 <sendKeyToTerminal(unsigned char)>:
c00116c0:	55                   	push   ebp
c00116c1:	89 e5                	mov    ebp,esp
c00116c3:	83 ec 28             	sub    esp,0x28
c00116c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00116cc:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00116d1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00116d5:	83 ec 08             	sub    esp,0x8
c00116d8:	52                   	push   edx
c00116d9:	50                   	push   eax
c00116da:	e8 0b be ff ff       	call   c000d4ea <VgaText::receiveKey(unsigned char)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00116e6:	75 41                	jne    c0011729 <sendKeyToTerminal(unsigned char)+0x69>
c00116e8:	e8 1a 65 00 00       	call   c0017c07 <lockStuff()>
c00116ed:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c00116f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00116f5:	c7 05 20 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023920,0x0
c00116ff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011703:	74 1f                	je     c0011724 <sendKeyToTerminal(unsigned char)+0x64>
c0011705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011708:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001170b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001170e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011711:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011714:	83 ec 0c             	sub    esp,0xc
c0011717:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001171a:	e8 d1 6c 00 00       	call   c00183f0 <unblockTask(ThreadControlBlock*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	eb db                	jmp    c00116ff <sendKeyToTerminal(unsigned char)+0x3f>
c0011724:	e8 70 68 00 00       	call   c0017f99 <unlockStuff()>
c0011729:	90                   	nop
c001172a:	c9                   	leave  
c001172b:	c3                   	ret    

c001172c <sendKeyboardToken(KeyboardToken)>:
c001172c:	55                   	push   ebp
c001172d:	89 e5                	mov    ebp,esp
c001172f:	83 ec 18             	sub    esp,0x18
c0011732:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011738:	0f b7 c0             	movzx  eax,ax
c001173b:	83 f2 01             	xor    edx,0x1
c001173e:	88 90 40 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc6c0],dl
c0011744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011747:	66 3d 03 02          	cmp    ax,0x203
c001174b:	75 07                	jne    c0011754 <sendKeyboardToken(KeyboardToken)+0x28>
c001174d:	a0 40 3a 02 c0       	mov    al,ds:0xc0023a40
c0011752:	84 c0                	test   al,al
c0011754:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011758:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001175b:	a0 48 3d 02 c0       	mov    al,ds:0xc0023d48
c0011760:	38 c2                	cmp    dl,al
c0011762:	74 1c                	je     c0011780 <sendKeyboardToken(KeyboardToken)+0x54>
c0011764:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011767:	a2 48 3d 02 c0       	mov    ds:0xc0023d48,al
c001176c:	a0 48 3d 02 c0       	mov    al,ds:0xc0023d48
c0011771:	0f b6 c0             	movzx  eax,al
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	50                   	push   eax
c0011778:	e8 db af ff ff       	call   c000c758 <setTerminalScrollLock(bool)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011783:	84 c0                	test   al,al
c0011785:	0f 84 ae 00 00 00    	je     c0011839 <sendKeyboardToken(KeyboardToken)+0x10d>
c001178b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001178e:	66 3d 10 03          	cmp    ax,0x310
c0011792:	75 06                	jne    c001179a <sendKeyboardToken(KeyboardToken)+0x6e>
c0011794:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001179a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179d:	66 3d 11 03          	cmp    ax,0x311
c00117a1:	75 06                	jne    c00117a9 <sendKeyboardToken(KeyboardToken)+0x7d>
c00117a3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00117a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ac:	66 3d 12 03          	cmp    ax,0x312
c00117b0:	75 06                	jne    c00117b8 <sendKeyboardToken(KeyboardToken)+0x8c>
c00117b2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00117b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bb:	66 3d 13 03          	cmp    ax,0x313
c00117bf:	75 06                	jne    c00117c7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00117c1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00117c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ca:	66 3d 14 03          	cmp    ax,0x314
c00117ce:	75 06                	jne    c00117d6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00117d0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00117d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d9:	66 3d 15 03          	cmp    ax,0x315
c00117dd:	75 06                	jne    c00117e5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00117df:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00117e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e8:	66 3d 16 03          	cmp    ax,0x316
c00117ec:	75 06                	jne    c00117f4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00117ee:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00117f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f7:	66 3d 17 03          	cmp    ax,0x317
c00117fb:	75 06                	jne    c0011803 <sendKeyboardToken(KeyboardToken)+0xd7>
c00117fd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011806:	66 3d 18 03          	cmp    ax,0x318
c001180a:	75 06                	jne    c0011812 <sendKeyboardToken(KeyboardToken)+0xe6>
c001180c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011815:	66 3d 19 03          	cmp    ax,0x319
c0011819:	75 06                	jne    c0011821 <sendKeyboardToken(KeyboardToken)+0xf5>
c001181b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011824:	66 3d 1a 03          	cmp    ax,0x31a
c0011828:	0f 85 c9 00 00 00    	jne    c00118f7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001182e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011834:	e9 be 00 00 00       	jmp    c00118f7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001183c:	66 3d 10 03          	cmp    ax,0x310
c0011840:	75 0a                	jne    c001184c <sendKeyboardToken(KeyboardToken)+0x120>
c0011842:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011848:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001184c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184f:	66 3d 11 03          	cmp    ax,0x311
c0011853:	75 0a                	jne    c001185f <sendKeyboardToken(KeyboardToken)+0x133>
c0011855:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001185b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001185f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011862:	66 3d 12 03          	cmp    ax,0x312
c0011866:	75 0a                	jne    c0011872 <sendKeyboardToken(KeyboardToken)+0x146>
c0011868:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001186e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011875:	66 3d 13 03          	cmp    ax,0x313
c0011879:	75 0a                	jne    c0011885 <sendKeyboardToken(KeyboardToken)+0x159>
c001187b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011881:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011888:	66 3d 14 03          	cmp    ax,0x314
c001188c:	75 0a                	jne    c0011898 <sendKeyboardToken(KeyboardToken)+0x16c>
c001188e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011894:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189b:	66 3d 15 03          	cmp    ax,0x315
c001189f:	75 0a                	jne    c00118ab <sendKeyboardToken(KeyboardToken)+0x17f>
c00118a1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00118a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ae:	66 3d 16 03          	cmp    ax,0x316
c00118b2:	75 0a                	jne    c00118be <sendKeyboardToken(KeyboardToken)+0x192>
c00118b4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00118ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c1:	66 3d 17 03          	cmp    ax,0x317
c00118c5:	75 0a                	jne    c00118d1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00118c7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00118cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d4:	66 3d 18 03          	cmp    ax,0x318
c00118d8:	75 0a                	jne    c00118e4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00118da:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00118e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e7:	66 3d 19 03          	cmp    ax,0x319
c00118eb:	75 0a                	jne    c00118f7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00118ed:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00118f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fa:	66 3d 00 02          	cmp    ax,0x200
c00118fe:	75 2a                	jne    c001192a <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011900:	a0 40 3d 02 c0       	mov    al,ds:0xc0023d40
c0011905:	83 f0 01             	xor    eax,0x1
c0011908:	84 c0                	test   al,al
c001190a:	74 1e                	je     c001192a <sendKeyboardToken(KeyboardToken)+0x1fe>
c001190c:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0011911:	6a 01                	push   0x1
c0011913:	6a 00                	push   0x0
c0011915:	68 4e 16 01 c0       	push   0xc001164e
c001191a:	50                   	push   eax
c001191b:	e8 ea 63 00 00       	call   c0017d0a <Process::createThread(void (*)(void*), void*, int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	c6 05 40 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d40,0x1
c001192a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192d:	66 3d 1d 03          	cmp    ax,0x31d
c0011931:	75 06                	jne    c0011939 <sendKeyboardToken(KeyboardToken)+0x20d>
c0011933:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193c:	66 3d 1c 03          	cmp    ax,0x31c
c0011940:	75 06                	jne    c0011948 <sendKeyboardToken(KeyboardToken)+0x21c>
c0011942:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194b:	66 3d 1b 03          	cmp    ax,0x31b
c001194f:	75 06                	jne    c0011957 <sendKeyboardToken(KeyboardToken)+0x22b>
c0011951:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195a:	66 3d 1e 03          	cmp    ax,0x31e
c001195e:	75 06                	jne    c0011966 <sendKeyboardToken(KeyboardToken)+0x23a>
c0011960:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011969:	66 3d 1f 03          	cmp    ax,0x31f
c001196d:	75 06                	jne    c0011975 <sendKeyboardToken(KeyboardToken)+0x249>
c001196f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011978:	66 3d 1a 03          	cmp    ax,0x31a
c001197c:	75 06                	jne    c0011984 <sendKeyboardToken(KeyboardToken)+0x258>
c001197e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011984:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011988:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001198b:	83 f0 01             	xor    eax,0x1
c001198e:	84 c0                	test   al,al
c0011990:	74 77                	je     c0011a09 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0011992:	a0 41 3a 02 c0       	mov    al,ds:0xc0023a41
c0011997:	84 c0                	test   al,al
c0011999:	74 41                	je     c00119dc <sendKeyboardToken(KeyboardToken)+0x2b0>
c001199b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001199f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00119a3:	74 2b                	je     c00119d0 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00119a5:	8b 15 44 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d44
c00119ab:	89 d0                	mov    eax,edx
c00119ad:	c1 e0 02             	shl    eax,0x2
c00119b0:	01 d0                	add    eax,edx
c00119b2:	01 c0                	add    eax,eax
c00119b4:	a3 44 3d 02 c0       	mov    ds:0xc0023d44,eax
c00119b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bc:	0f b7 c0             	movzx  eax,ax
c00119bf:	8d 50 d0             	lea    edx,[eax-0x30]
c00119c2:	a1 44 3d 02 c0       	mov    eax,ds:0xc0023d44
c00119c7:	01 d0                	add    eax,edx
c00119c9:	a3 44 3d 02 c0       	mov    ds:0xc0023d44,eax
c00119ce:	eb 6d                	jmp    c0011a3d <sendKeyboardToken(KeyboardToken)+0x311>
c00119d0:	c7 05 44 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d44,0x0
c00119da:	eb 61                	jmp    c0011a3d <sendKeyboardToken(KeyboardToken)+0x311>
c00119dc:	a1 44 3d 02 c0       	mov    eax,ds:0xc0023d44
c00119e1:	85 c0                	test   eax,eax
c00119e3:	74 18                	je     c00119fd <sendKeyboardToken(KeyboardToken)+0x2d1>
c00119e5:	a1 44 3d 02 c0       	mov    eax,ds:0xc0023d44
c00119ea:	0f b6 c0             	movzx  eax,al
c00119ed:	83 ec 0c             	sub    esp,0xc
c00119f0:	50                   	push   eax
c00119f1:	e8 ca fc ff ff       	call   c00116c0 <sendKeyToTerminal(unsigned char)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119fd:	c7 05 44 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d44,0x0
c0011a07:	eb 34                	jmp    c0011a3d <sendKeyboardToken(KeyboardToken)+0x311>
c0011a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0c:	66 3d 01 01          	cmp    ax,0x101
c0011a10:	75 2b                	jne    c0011a3d <sendKeyboardToken(KeyboardToken)+0x311>
c0011a12:	a1 44 3d 02 c0       	mov    eax,ds:0xc0023d44
c0011a17:	85 c0                	test   eax,eax
c0011a19:	74 18                	je     c0011a33 <sendKeyboardToken(KeyboardToken)+0x307>
c0011a1b:	a1 44 3d 02 c0       	mov    eax,ds:0xc0023d44
c0011a20:	0f b6 c0             	movzx  eax,al
c0011a23:	83 ec 0c             	sub    esp,0xc
c0011a26:	50                   	push   eax
c0011a27:	e8 94 fc ff ff       	call   c00116c0 <sendKeyToTerminal(unsigned char)>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a33:	c7 05 44 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d44,0x0
c0011a3d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a40:	83 f0 01             	xor    eax,0x1
c0011a43:	84 c0                	test   al,al
c0011a45:	74 4c                	je     c0011a93 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a47:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a4a:	83 f0 01             	xor    eax,0x1
c0011a4d:	84 c0                	test   al,al
c0011a4f:	74 42                	je     c0011a93 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a51:	a0 40 3a 02 c0       	mov    al,ds:0xc0023a40
c0011a56:	83 f0 01             	xor    eax,0x1
c0011a59:	84 c0                	test   al,al
c0011a5b:	74 36                	je     c0011a93 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a60:	66 83 f8 1f          	cmp    ax,0x1f
c0011a64:	76 09                	jbe    c0011a6f <sendKeyboardToken(KeyboardToken)+0x343>
c0011a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a69:	66 83 f8 7e          	cmp    ax,0x7e
c0011a6d:	76 12                	jbe    c0011a81 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a72:	66 83 f8 0a          	cmp    ax,0xa
c0011a76:	74 09                	je     c0011a81 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7b:	66 83 f8 08          	cmp    ax,0x8
c0011a7f:	75 12                	jne    c0011a93 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a84:	0f b6 c0             	movzx  eax,al
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	50                   	push   eax
c0011a8b:	e8 30 fc ff ff       	call   c00116c0 <sendKeyToTerminal(unsigned char)>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a96:	83 f0 01             	xor    eax,0x1
c0011a99:	84 c0                	test   al,al
c0011a9b:	74 4f                	je     c0011aec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a9d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011aa0:	83 f0 01             	xor    eax,0x1
c0011aa3:	84 c0                	test   al,al
c0011aa5:	74 45                	je     c0011aec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011aa7:	a0 40 3a 02 c0       	mov    al,ds:0xc0023a40
c0011aac:	84 c0                	test   al,al
c0011aae:	74 3c                	je     c0011aec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab3:	66 83 f8 3f          	cmp    ax,0x3f
c0011ab7:	76 33                	jbe    c0011aec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abc:	66 83 f8 7f          	cmp    ax,0x7f
c0011ac0:	77 2a                	ja     c0011aec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac5:	88 c2                	mov    dl,al
c0011ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aca:	66 83 f8 5f          	cmp    ax,0x5f
c0011ace:	76 04                	jbe    c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011ad0:	b0 20                	mov    al,0x20
c0011ad2:	eb 02                	jmp    c0011ad6 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011ad4:	b0 00                	mov    al,0x0
c0011ad6:	29 c2                	sub    edx,eax
c0011ad8:	88 d0                	mov    al,dl
c0011ada:	83 e8 40             	sub    eax,0x40
c0011add:	0f b6 c0             	movzx  eax,al
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	50                   	push   eax
c0011ae4:	e8 d7 fb ff ff       	call   c00116c0 <sendKeyToTerminal(unsigned char)>
c0011ae9:	83 c4 10             	add    esp,0x10
c0011aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aef:	66 3d 00 03          	cmp    ax,0x300
c0011af3:	75 0f                	jne    c0011b04 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011af5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011af8:	83 f0 01             	xor    eax,0x1
c0011afb:	84 c0                	test   al,al
c0011afd:	74 05                	je     c0011b04 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011aff:	e8 7b b4 ff ff       	call   c000cf7f <doTerminalCycle()>
c0011b04:	90                   	nop
c0011b05:	c9                   	leave  
c0011b06:	c3                   	ret    

c0011b07 <clearInternalKeybuffer(VgaText*)>:
c0011b07:	55                   	push   ebp
c0011b08:	89 e5                	mov    ebp,esp
c0011b0a:	83 ec 08             	sub    esp,0x8
c0011b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b10:	05 34 11 00 00       	add    eax,0x1134
c0011b15:	83 ec 0c             	sub    esp,0xc
c0011b18:	50                   	push   eax
c0011b19:	e8 07 eb fe ff       	call   c0000625 <strlen>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b24:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b2a:	83 ec 04             	sub    esp,0x4
c0011b2d:	50                   	push   eax
c0011b2e:	6a 00                	push   0x0
c0011b30:	52                   	push   edx
c0011b31:	e8 d2 ea fe ff       	call   c0000608 <memset>
c0011b36:	83 c4 10             	add    esp,0x10
c0011b39:	90                   	nop
c0011b3a:	c9                   	leave  
c0011b3b:	c3                   	ret    

c0011b3c <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b3c:	55                   	push   ebp
c0011b3d:	89 e5                	mov    ebp,esp
c0011b3f:	83 ec 18             	sub    esp,0x18
c0011b42:	fb                   	sti    
c0011b43:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011b4a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011b4e:	74 77                	je     c0011bc7 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b53:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b59:	84 c0                	test   al,al
c0011b5b:	75 02                	jne    c0011b5f <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b5d:	eb f1                	jmp    c0011b50 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b62:	8d 50 01             	lea    edx,[eax+0x1]
c0011b65:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011b68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b6b:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011b71:	88 10                	mov    BYTE PTR [eax],dl
c0011b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b76:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b7c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b82:	05 34 11 00 00       	add    eax,0x1134
c0011b87:	83 ec 0c             	sub    esp,0xc
c0011b8a:	50                   	push   eax
c0011b8b:	e8 95 ea fe ff       	call   c0000625 <strlen>
c0011b90:	83 c4 10             	add    esp,0x10
c0011b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b96:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011ba2:	81 c2 34 11 00 00    	add    edx,0x1134
c0011ba8:	83 ec 04             	sub    esp,0x4
c0011bab:	50                   	push   eax
c0011bac:	51                   	push   ecx
c0011bad:	52                   	push   edx
c0011bae:	e8 e7 e9 fe ff       	call   c000059a <memmove>
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011bb9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011bbc:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011bc0:	75 88                	jne    c0011b4a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011bc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc5:	eb 03                	jmp    c0011bca <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011bc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bca:	c9                   	leave  
c0011bcb:	c3                   	ret    

c0011bcc <Keyboard::Keyboard(char const*)>:
c0011bcc:	83 ec 0c             	sub    esp,0xc
c0011bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bd3:	83 ec 08             	sub    esp,0x8
c0011bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bda:	50                   	push   eax
c0011bdb:	e8 16 ea ff ff       	call   c00105f6 <Device::Device(char const*)>
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	ba 50 12 02 c0       	mov    edx,0xc0021250
c0011be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bec:	89 10                	mov    DWORD PTR [eax],edx
c0011bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bf2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011bfc:	c6 05 24 39 02 c0 01 	mov    BYTE PTR ds:0xc0023924,0x1
c0011c03:	90                   	nop
c0011c04:	83 c4 0c             	add    esp,0xc
c0011c07:	c3                   	ret    

c0011c08 <Keyboard::~Keyboard()>:
c0011c08:	83 ec 0c             	sub    esp,0xc
c0011c0b:	ba 50 12 02 c0       	mov    edx,0xc0021250
c0011c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c14:	89 10                	mov    DWORD PTR [eax],edx
c0011c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c1a:	83 ec 0c             	sub    esp,0xc
c0011c1d:	50                   	push   eax
c0011c1e:	e8 85 e6 ff ff       	call   c00102a8 <Device::~Device()>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	90                   	nop
c0011c27:	83 c4 0c             	add    esp,0xc
c0011c2a:	c3                   	ret    
c0011c2b:	90                   	nop

c0011c2c <Keyboard::~Keyboard()>:
c0011c2c:	83 ec 0c             	sub    esp,0xc
c0011c2f:	83 ec 0c             	sub    esp,0xc
c0011c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c36:	e8 cd ff ff ff       	call   c0011c08 <Keyboard::~Keyboard()>
c0011c3b:	83 c4 10             	add    esp,0x10
c0011c3e:	83 ec 08             	sub    esp,0x8
c0011c41:	68 5c 01 00 00       	push   0x15c
c0011c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c4a:	e8 cc d2 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	83 c4 0c             	add    esp,0xc
c0011c55:	c3                   	ret    

c0011c56 <LogicalDisk::close(int, int, void*)>:
c0011c56:	83 c8 ff             	or     eax,0xffffffff
c0011c59:	c3                   	ret    

c0011c5a <LogicalDisk::~LogicalDisk()>:
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	ba 00 13 02 c0       	mov    edx,0xc0021300
c0011c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c66:	89 10                	mov    DWORD PTR [eax],edx
c0011c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c6c:	83 ec 0c             	sub    esp,0xc
c0011c6f:	50                   	push   eax
c0011c70:	e8 33 e6 ff ff       	call   c00102a8 <Device::~Device()>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	90                   	nop
c0011c79:	83 c4 0c             	add    esp,0xc
c0011c7c:	c3                   	ret    
c0011c7d:	90                   	nop

c0011c7e <LogicalDisk::~LogicalDisk()>:
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	83 ec 0c             	sub    esp,0xc
c0011c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c88:	e8 cd ff ff ff       	call   c0011c5a <LogicalDisk::~LogicalDisk()>
c0011c8d:	83 c4 10             	add    esp,0x10
c0011c90:	83 ec 08             	sub    esp,0x8
c0011c93:	68 74 01 00 00       	push   0x174
c0011c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c9c:	e8 7a d2 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	83 c4 0c             	add    esp,0xc
c0011ca7:	c3                   	ret    

c0011ca8 <LogicalDisk::open(int, int, void*)>:
c0011ca8:	83 ec 18             	sub    esp,0x18
c0011cab:	68 7c 12 02 c0       	push   0xc002127c
c0011cb0:	e8 db 2f 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0011cb5:	83 c8 ff             	or     eax,0xffffffff
c0011cb8:	83 c4 1c             	add    esp,0x1c
c0011cbb:	c3                   	ret    

c0011cbc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011cbc:	53                   	push   ebx
c0011cbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cc9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011ccf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011cd5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011cdb:	77 10                	ja     c0011ced <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011cdd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011ce3:	89 d3                	mov    ebx,edx
c0011ce5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011ceb:	72 05                	jb     c0011cf2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011ced:	83 c8 ff             	or     eax,0xffffffff
c0011cf0:	89 c2                	mov    edx,eax
c0011cf2:	5b                   	pop    ebx
c0011cf3:	c3                   	ret    

c0011cf4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011cf4:	56                   	push   esi
c0011cf5:	83 c8 ff             	or     eax,0xffffffff
c0011cf8:	53                   	push   ebx
c0011cf9:	89 c2                	mov    edx,eax
c0011cfb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011cff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011d03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011d07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d0d:	77 27                	ja     c0011d36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d0f:	89 d8                	mov    eax,ebx
c0011d11:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011d17:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d22:	89 c2                	mov    edx,eax
c0011d24:	73 10                	jae    c0011d36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d26:	89 c8                	mov    eax,ecx
c0011d28:	89 da                	mov    edx,ebx
c0011d2a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d30:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d36:	5b                   	pop    ebx
c0011d37:	5e                   	pop    esi
c0011d38:	c3                   	ret    
c0011d39:	90                   	nop

c0011d3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d3a:	83 ec 1c             	sub    esp,0x1c
c0011d3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d51:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d60:	83 ec 08             	sub    esp,0x8
c0011d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d67:	50                   	push   eax
c0011d68:	e8 89 e8 ff ff       	call   c00105f6 <Device::Device(char const*)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	ba 00 13 02 c0       	mov    edx,0xc0021300
c0011d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d79:	89 10                	mov    DWORD PTR [eax],edx
c0011d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d7f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d8a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d95:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011d9f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011da7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011db1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011db7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011dbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011dbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011dc2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011dc8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dd6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011de0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011dea:	90                   	nop
c0011deb:	83 c4 1c             	add    esp,0x1c
c0011dee:	c3                   	ret    
c0011def:	90                   	nop

c0011df0 <LogicalDisk::assignDriveLetter()>:
c0011df0:	55                   	push   ebp
c0011df1:	57                   	push   edi
c0011df2:	56                   	push   esi
c0011df3:	53                   	push   ebx
c0011df4:	83 ec 14             	sub    esp,0x14
c0011df7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dfb:	8b 3d 60 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d60
c0011e01:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011e07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011e0b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011e11:	8b 3d 64 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d64
c0011e17:	3c 01                	cmp    al,0x1
c0011e19:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e1d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e21:	19 c0                	sbb    eax,eax
c0011e23:	83 e0 02             	and    eax,0x2
c0011e26:	83 c0 41             	add    eax,0x41
c0011e29:	0f be e8             	movsx  ebp,al
c0011e2c:	3c 43                	cmp    al,0x43
c0011e2e:	75 10                	jne    c0011e40 <LogicalDisk::assignDriveLetter()+0x50>
c0011e30:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e37:	75 5d                	jne    c0011e96 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e39:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e3e:	75 56                	jne    c0011e96 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e40:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e43:	ba 01 00 00 00       	mov    edx,0x1
c0011e48:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011e4c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011e50:	d3 e2                	shl    edx,cl
c0011e52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e56:	89 d7                	mov    edi,edx
c0011e58:	89 d6                	mov    esi,edx
c0011e5a:	c1 ff 1f             	sar    edi,0x1f
c0011e5d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e61:	21 f9                	and    ecx,edi
c0011e63:	09 d1                	or     ecx,edx
c0011e65:	75 2f                	jne    c0011e96 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e67:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011e6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e6f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011e75:	09 f2                	or     edx,esi
c0011e77:	89 15 60 3d 02 c0    	mov    DWORD PTR ds:0xc0023d60,edx
c0011e7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e81:	09 fa                	or     edx,edi
c0011e83:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011e87:	89 15 64 3d 02 c0    	mov    DWORD PTR ds:0xc0023d64,edx
c0011e8d:	89 1c bd 80 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc280],ebx
c0011e94:	eb 08                	jmp    c0011e9e <LogicalDisk::assignDriveLetter()+0xae>
c0011e96:	45                   	inc    ebp
c0011e97:	40                   	inc    eax
c0011e98:	3c 5b                	cmp    al,0x5b
c0011e9a:	75 90                	jne    c0011e2c <LogicalDisk::assignDriveLetter()+0x3c>
c0011e9c:	31 c0                	xor    eax,eax
c0011e9e:	83 c4 14             	add    esp,0x14
c0011ea1:	5b                   	pop    ebx
c0011ea2:	5e                   	pop    esi
c0011ea3:	5f                   	pop    edi
c0011ea4:	5d                   	pop    ebp
c0011ea5:	c3                   	ret    

c0011ea6 <LogicalDisk::mount()>:
c0011ea6:	56                   	push   esi
c0011ea7:	53                   	push   ebx
c0011ea8:	51                   	push   ecx
c0011ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ead:	8b 1d e8 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238e8
c0011eb3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011ebd:	85 db                	test   ebx,ebx
c0011ebf:	74 50                	je     c0011f11 <LogicalDisk::mount()+0x6b>
c0011ec1:	e8 05 5d 00 00       	call   c0017bcb <getIRQNestingLevel()>
c0011ec6:	52                   	push   edx
c0011ec7:	52                   	push   edx
c0011ec8:	50                   	push   eax
c0011ec9:	68 a0 12 02 c0       	push   0xc00212a0
c0011ece:	e8 28 d1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0011ed3:	83 c4 0c             	add    esp,0xc
c0011ed6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011edd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011edf:	83 e8 41             	sub    eax,0x41
c0011ee2:	50                   	push   eax
c0011ee3:	56                   	push   esi
c0011ee4:	53                   	push   ebx
c0011ee5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ee8:	83 c4 10             	add    esp,0x10
c0011eeb:	84 c0                	test   al,al
c0011eed:	74 08                	je     c0011ef7 <LogicalDisk::mount()+0x51>
c0011eef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011ef5:	eb 1c                	jmp    c0011f13 <LogicalDisk::mount()+0x6d>
c0011ef7:	e8 cf 5c 00 00       	call   c0017bcb <getIRQNestingLevel()>
c0011efc:	51                   	push   ecx
c0011efd:	51                   	push   ecx
c0011efe:	50                   	push   eax
c0011eff:	68 bb 12 02 c0       	push   0xc00212bb
c0011f04:	e8 f2 d0 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0011f09:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	eb ac                	jmp    c0011ebd <LogicalDisk::mount()+0x17>
c0011f11:	31 c0                	xor    eax,eax
c0011f13:	5a                   	pop    edx
c0011f14:	5b                   	pop    ebx
c0011f15:	5e                   	pop    esi
c0011f16:	c3                   	ret    
c0011f17:	90                   	nop

c0011f18 <LogicalDisk::unmount()>:
c0011f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f26:	c3                   	ret    
c0011f27:	90                   	nop

c0011f28 <LogicalDisk::unassignDriveLetter()>:
c0011f28:	57                   	push   edi
c0011f29:	56                   	push   esi
c0011f2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f2e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f35:	84 c9                	test   cl,cl
c0011f37:	75 0f                	jne    c0011f48 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f39:	c7 44 24 0c d6 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc00212d6
c0011f41:	5e                   	pop    esi
c0011f42:	5f                   	pop    edi
c0011f43:	e9 48 2d 00 00       	jmp    c0014c90 <Krnl::panic(char const*)>
c0011f48:	83 e9 41             	sub    ecx,0x41
c0011f4b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011f52:	b8 01 00 00 00       	mov    eax,0x1
c0011f57:	c7 04 8d 80 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc280],0x0
c0011f62:	d3 e0                	shl    eax,cl
c0011f64:	89 c7                	mov    edi,eax
c0011f66:	f7 d0                	not    eax
c0011f68:	c1 ff 1f             	sar    edi,0x1f
c0011f6b:	21 05 60 3d 02 c0    	and    DWORD PTR ds:0xc0023d60,eax
c0011f71:	89 fe                	mov    esi,edi
c0011f73:	f7 d6                	not    esi
c0011f75:	21 35 64 3d 02 c0    	and    DWORD PTR ds:0xc0023d64,esi
c0011f7b:	5e                   	pop    esi
c0011f7c:	5f                   	pop    edi
c0011f7d:	c3                   	ret    

c0011f7e <LogicalDisk::read(unsigned long long, int, void*)>:
c0011f7e:	57                   	push   edi
c0011f7f:	56                   	push   esi
c0011f80:	53                   	push   ebx
c0011f81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011f97:	77 41                	ja     c0011fda <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011f99:	99                   	cdq    
c0011f9a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011fa0:	01 c8                	add    eax,ecx
c0011fa2:	11 da                	adc    edx,ebx
c0011fa4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011faa:	19 d7                	sbb    edi,edx
c0011fac:	72 33                	jb     c0011fe1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011fae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011fb4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011fba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fbe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011fc2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011fc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fd2:	5b                   	pop    ebx
c0011fd3:	5e                   	pop    esi
c0011fd4:	5f                   	pop    edi
c0011fd5:	e9 9a 09 00 00       	jmp    c0012974 <VCache::read(unsigned long long, int, void*)>
c0011fda:	b8 05 00 00 00       	mov    eax,0x5
c0011fdf:	eb 05                	jmp    c0011fe6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011fe1:	b8 07 00 00 00       	mov    eax,0x7
c0011fe6:	5b                   	pop    ebx
c0011fe7:	5e                   	pop    esi
c0011fe8:	5f                   	pop    edi
c0011fe9:	c3                   	ret    

c0011fea <LogicalDisk::write(unsigned long long, int, void*)>:
c0011fea:	57                   	push   edi
c0011feb:	56                   	push   esi
c0011fec:	53                   	push   ebx
c0011fed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ff1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ff5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ffd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012003:	77 41                	ja     c0012046 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012005:	99                   	cdq    
c0012006:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001200c:	01 c8                	add    eax,ecx
c001200e:	11 da                	adc    edx,ebx
c0012010:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012016:	19 d7                	sbb    edi,edx
c0012018:	72 33                	jb     c001204d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001201a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012020:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012026:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001202a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001202e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012034:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001203a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001203e:	5b                   	pop    ebx
c001203f:	5e                   	pop    esi
c0012040:	5f                   	pop    edi
c0012041:	e9 4a 08 00 00       	jmp    c0012890 <VCache::write(unsigned long long, int, void*)>
c0012046:	b8 05 00 00 00       	mov    eax,0x5
c001204b:	eb 05                	jmp    c0012052 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001204d:	b8 07 00 00 00       	mov    eax,0x7
c0012052:	5b                   	pop    ebx
c0012053:	5e                   	pop    esi
c0012054:	5f                   	pop    edi
c0012055:	c3                   	ret    

c0012056 <Mouse::Mouse(char const*)>:
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001205d:	83 ec 08             	sub    esp,0x8
c0012060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012064:	50                   	push   eax
c0012065:	e8 8c e5 ff ff       	call   c00105f6 <Device::Device(char const*)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	ba 2c 13 02 c0       	mov    edx,0xc002132c
c0012072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012076:	89 10                	mov    DWORD PTR [eax],edx
c0012078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012086:	90                   	nop
c0012087:	83 c4 0c             	add    esp,0xc
c001208a:	c3                   	ret    
c001208b:	90                   	nop

c001208c <Mouse::~Mouse()>:
c001208c:	83 ec 0c             	sub    esp,0xc
c001208f:	ba 2c 13 02 c0       	mov    edx,0xc002132c
c0012094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012098:	89 10                	mov    DWORD PTR [eax],edx
c001209a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	50                   	push   eax
c00120a2:	e8 01 e2 ff ff       	call   c00102a8 <Device::~Device()>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	90                   	nop
c00120ab:	83 c4 0c             	add    esp,0xc
c00120ae:	c3                   	ret    
c00120af:	90                   	nop

c00120b0 <Mouse::~Mouse()>:
c00120b0:	83 ec 0c             	sub    esp,0xc
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ba:	e8 cd ff ff ff       	call   c001208c <Mouse::~Mouse()>
c00120bf:	83 c4 10             	add    esp,0x10
c00120c2:	83 ec 08             	sub    esp,0x8
c00120c5:	68 58 01 00 00       	push   0x158
c00120ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ce:	e8 48 ce ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	83 c4 0c             	add    esp,0xc
c00120d9:	c3                   	ret    

c00120da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00120da:	55                   	push   ebp
c00120db:	57                   	push   edi
c00120dc:	56                   	push   esi
c00120dd:	53                   	push   ebx
c00120de:	81 ec 28 01 00 00    	sub    esp,0x128
c00120e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00120eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00120f2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00120f9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012100:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012104:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012108:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001210f:	e8 d4 e5 ff ff       	call   c00106e8 <Device::getName()>
c0012114:	5a                   	pop    edx
c0012115:	59                   	pop    ecx
c0012116:	50                   	push   eax
c0012117:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001211b:	55                   	push   ebp
c001211c:	e8 86 e5 fe ff       	call   c00006a7 <strcpy>
c0012121:	5b                   	pop    ebx
c0012122:	58                   	pop    eax
c0012123:	68 50 13 02 c0       	push   0xc0021350
c0012128:	55                   	push   ebp
c0012129:	e8 30 e6 fe ff       	call   c000075e <strcat>
c001212e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012135:	e8 d2 cd ff ff       	call   c000ef0c <operator new(unsigned long)>
c001213a:	83 c4 0c             	add    esp,0xc
c001213d:	89 c3                	mov    ebx,eax
c001213f:	57                   	push   edi
c0012140:	56                   	push   esi
c0012141:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012145:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012149:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012150:	55                   	push   ebp
c0012151:	50                   	push   eax
c0012152:	e8 e3 fb ff ff       	call   c0011d3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012157:	83 c4 14             	add    esp,0x14
c001215a:	53                   	push   ebx
c001215b:	e8 90 fc ff ff       	call   c0011df0 <LogicalDisk::assignDriveLetter()>
c0012160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012163:	e8 3e fd ff ff       	call   c0011ea6 <LogicalDisk::mount()>
c0012168:	58                   	pop    eax
c0012169:	5a                   	pop    edx
c001216a:	53                   	push   ebx
c001216b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012172:	e8 8f e2 ff ff       	call   c0010406 <Device::addChild(Device*)>
c0012177:	81 c4 2c 01 00 00    	add    esp,0x12c
c001217d:	5b                   	pop    ebx
c001217e:	5e                   	pop    esi
c001217f:	5f                   	pop    edi
c0012180:	5d                   	pop    ebp
c0012181:	c3                   	ret    

c0012182 <createPartitionsForDisk(PhysicalDisk*)>:
c0012182:	55                   	push   ebp
c0012183:	57                   	push   edi
c0012184:	56                   	push   esi
c0012185:	53                   	push   ebx
c0012186:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001218c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012193:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012199:	3d 00 02 00 00       	cmp    eax,0x200
c001219e:	74 27                	je     c00121c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00121a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00121a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00121ac:	83 ec 10             	sub    esp,0x10
c00121af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00121b3:	99                   	cdq    
c00121b4:	c1 e6 0a             	shl    esi,0xa
c00121b7:	52                   	push   edx
c00121b8:	89 fd                	mov    ebp,edi
c00121ba:	50                   	push   eax
c00121bb:	55                   	push   ebp
c00121bc:	56                   	push   esi
c00121bd:	e8 ca c5 00 00       	call   c001e78c <__udivdi3>
c00121c2:	e9 b1 00 00 00       	jmp    c0012278 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121c7:	83 ec 0c             	sub    esp,0xc
c00121ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00121d0:	56                   	push   esi
c00121d1:	6a 01                	push   0x1
c00121d3:	6a 00                	push   0x0
c00121d5:	6a 00                	push   0x0
c00121d7:	53                   	push   ebx
c00121d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00121db:	83 c4 20             	add    esp,0x20
c00121de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00121e6:	75 0a                	jne    c00121f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00121e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00121f0:	74 2c                	je     c001221e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00121f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00121f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00121fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012204:	83 ec 10             	sub    esp,0x10
c0012207:	0f a4 c2 0a          	shld   edx,eax,0xa
c001220b:	89 f7                	mov    edi,esi
c001220d:	c1 e0 0a             	shl    eax,0xa
c0012210:	c1 ff 1f             	sar    edi,0x1f
c0012213:	57                   	push   edi
c0012214:	56                   	push   esi
c0012215:	52                   	push   edx
c0012216:	50                   	push   eax
c0012217:	e8 70 c5 00 00       	call   c001e78c <__udivdi3>
c001221c:	eb 5a                	jmp    c0012278 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001221e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012225:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001222c:	83 e1 7f             	and    ecx,0x7f
c001222f:	83 e0 7f             	and    eax,0x7f
c0012232:	01 c1                	add    ecx,eax
c0012234:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001223b:	83 e0 7f             	and    eax,0x7f
c001223e:	01 c1                	add    ecx,eax
c0012240:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012247:	83 e0 7f             	and    eax,0x7f
c001224a:	00 c1                	add    cl,al
c001224c:	74 41                	je     c001228f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001224e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012254:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001225a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012260:	83 ec 10             	sub    esp,0x10
c0012263:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012267:	89 f7                	mov    edi,esi
c0012269:	c1 e0 0a             	shl    eax,0xa
c001226c:	c1 ff 1f             	sar    edi,0x1f
c001226f:	57                   	push   edi
c0012270:	56                   	push   esi
c0012271:	52                   	push   edx
c0012272:	50                   	push   eax
c0012273:	e8 14 c5 00 00       	call   c001e78c <__udivdi3>
c0012278:	83 c4 14             	add    esp,0x14
c001227b:	52                   	push   edx
c001227c:	50                   	push   eax
c001227d:	6a 00                	push   0x0
c001227f:	6a 00                	push   0x0
c0012281:	53                   	push   ebx
c0012282:	e8 53 fe ff ff       	call   c00120da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012287:	83 c4 20             	add    esp,0x20
c001228a:	e9 79 01 00 00       	jmp    c0012408 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001228f:	89 f0                	mov    eax,esi
c0012291:	31 f6                	xor    esi,esi
c0012293:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001229a:	75 02                	jne    c001229e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001229c:	89 f1                	mov    ecx,esi
c001229e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00122a5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00122ac:	c1 e2 08             	shl    edx,0x8
c00122af:	c1 e7 10             	shl    edi,0x10
c00122b2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00122ba:	09 fa                	or     edx,edi
c00122bc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00122c4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00122cb:	83 c0 10             	add    eax,0x10
c00122ce:	09 fa                	or     edx,edi
c00122d0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00122d7:	c1 e7 18             	shl    edi,0x18
c00122da:	09 fa                	or     edx,edi
c00122dc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00122e3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00122e7:	c1 e7 10             	shl    edi,0x10
c00122ea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00122f1:	c1 e2 08             	shl    edx,0x8
c00122f4:	09 fa                	or     edx,edi
c00122f6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00122fd:	09 fa                	or     edx,edi
c00122ff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012306:	c1 e7 18             	shl    edi,0x18
c0012309:	09 fa                	or     edx,edi
c001230b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001230f:	46                   	inc    esi
c0012310:	83 fe 04             	cmp    esi,0x4
c0012313:	0f 85 7a ff ff ff    	jne    c0012293 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231d:	83 f0 01             	xor    eax,0x1
c0012320:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012324:	75 57                	jne    c001237d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232a:	83 f0 01             	xor    eax,0x1
c001232d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012331:	75 4a                	jne    c001237d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012333:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012337:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001233f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012347:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001234d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012353:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012359:	0f a4 c2 0a          	shld   edx,eax,0xa
c001235d:	89 f7                	mov    edi,esi
c001235f:	c1 e0 0a             	shl    eax,0xa
c0012362:	c1 ff 1f             	sar    edi,0x1f
c0012365:	57                   	push   edi
c0012366:	56                   	push   esi
c0012367:	52                   	push   edx
c0012368:	50                   	push   eax
c0012369:	e8 1e c4 00 00       	call   c001e78c <__udivdi3>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012375:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012379:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001237d:	84 c9                	test   cl,cl
c001237f:	74 53                	je     c00123d4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012381:	0f b6 c9             	movzx  ecx,cl
c0012384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012388:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001238c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012390:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001239c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00123a0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00123a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00123ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123b4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00123b8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00123bc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00123c0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00123c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123cc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00123d0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00123d4:	31 ed                	xor    ebp,ebp
c00123d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00123da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00123de:	89 f8                	mov    eax,edi
c00123e0:	09 f0                	or     eax,esi
c00123e2:	74 1e                	je     c0012402 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123e4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00123e8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00123ec:	89 d1                	mov    ecx,edx
c00123ee:	09 c1                	or     ecx,eax
c00123f0:	74 10                	je     c0012402 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	57                   	push   edi
c00123f6:	56                   	push   esi
c00123f7:	52                   	push   edx
c00123f8:	50                   	push   eax
c00123f9:	53                   	push   ebx
c00123fa:	e8 db fc ff ff       	call   c00120da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00123ff:	83 c4 20             	add    esp,0x20
c0012402:	45                   	inc    ebp
c0012403:	83 fd 04             	cmp    ebp,0x4
c0012406:	75 ce                	jne    c00123d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012408:	81 c4 5c 02 00 00    	add    esp,0x25c
c001240e:	5b                   	pop    ebx
c001240f:	5e                   	pop    esi
c0012410:	5f                   	pop    edi
c0012411:	5d                   	pop    ebp
c0012412:	c3                   	ret    
c0012413:	90                   	nop

c0012414 <Timer::Timer(char const*)>:
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241b:	83 ec 08             	sub    esp,0x8
c001241e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012422:	50                   	push   eax
c0012423:	e8 ce e1 ff ff       	call   c00105f6 <Device::Device(char const*)>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	ba 64 13 02 c0       	mov    edx,0xc0021364
c0012430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012434:	89 10                	mov    DWORD PTR [eax],edx
c0012436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012444:	90                   	nop
c0012445:	83 c4 0c             	add    esp,0xc
c0012448:	c3                   	ret    
c0012449:	90                   	nop

c001244a <Timer::~Timer()>:
c001244a:	83 ec 0c             	sub    esp,0xc
c001244d:	ba 64 13 02 c0       	mov    edx,0xc0021364
c0012452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012456:	89 10                	mov    DWORD PTR [eax],edx
c0012458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001245c:	83 ec 0c             	sub    esp,0xc
c001245f:	50                   	push   eax
c0012460:	e8 43 de ff ff       	call   c00102a8 <Device::~Device()>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	90                   	nop
c0012469:	83 c4 0c             	add    esp,0xc
c001246c:	c3                   	ret    
c001246d:	90                   	nop

c001246e <Timer::~Timer()>:
c001246e:	83 ec 0c             	sub    esp,0xc
c0012471:	83 ec 0c             	sub    esp,0xc
c0012474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012478:	e8 cd ff ff ff       	call   c001244a <Timer::~Timer()>
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	83 ec 08             	sub    esp,0x8
c0012483:	68 5c 01 00 00       	push   0x15c
c0012488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001248c:	e8 8a ca ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	83 c4 0c             	add    esp,0xc
c0012497:	c3                   	ret    

c0012498 <Timer::read()>:
c0012498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001249c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00124a2:	c3                   	ret    

c00124a3 <timerHandler(unsigned long long)>:
c00124a3:	55                   	push   ebp
c00124a4:	57                   	push   edi
c00124a5:	56                   	push   esi
c00124a6:	53                   	push   ebx
c00124a7:	83 ec 0c             	sub    esp,0xc
c00124aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00124ae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124b2:	01 35 f0 3d 02 c0    	add    DWORD PTR ds:0xc0023df0,esi
c00124b8:	11 3d f4 3d 02 c0    	adc    DWORD PTR ds:0xc0023df4,edi
c00124be:	80 3d 8d 37 02 c0 00 	cmp    BYTE PTR ds:0xc002378d,0x0
c00124c5:	0f 84 07 01 00 00    	je     c00125d2 <timerHandler(unsigned long long)+0x12f>
c00124cb:	e8 37 57 00 00       	call   c0017c07 <lockStuff()>
c00124d0:	83 ec 0c             	sub    esp,0xc
c00124d3:	68 bc 4b 02 c0       	push   0xc0024bbc
c00124d8:	e8 83 c9 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00124dd:	c7 04 24 bc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bbc
c00124e4:	89 c3                	mov    ebx,eax
c00124e6:	e8 7d c9 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00124eb:	83 c4 10             	add    esp,0x10
c00124ee:	84 c0                	test   al,al
c00124f0:	74 60                	je     c0012552 <timerHandler(unsigned long long)+0xaf>
c00124f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00124f8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00124fb:	85 c0                	test   eax,eax
c00124fd:	0f 85 91 00 00 00    	jne    c0012594 <timerHandler(unsigned long long)+0xf1>
c0012503:	e9 be 00 00 00       	jmp    c00125c6 <timerHandler(unsigned long long)+0x123>
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	55                   	push   ebp
c001250c:	e8 df 5e 00 00       	call   c00183f0 <unblockTask(ThreadControlBlock*)>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	39 eb                	cmp    ebx,ebp
c0012516:	75 12                	jne    c001252a <timerHandler(unsigned long long)+0x87>
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	68 bc 4b 02 c0       	push   0xc0024bbc
c0012520:	e8 3b c9 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012525:	89 c3                	mov    ebx,eax
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	83 ec 0c             	sub    esp,0xc
c001252d:	68 bc 4b 02 c0       	push   0xc0024bbc
c0012532:	e8 31 c9 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	84 c0                	test   al,al
c001253c:	75 b4                	jne    c00124f2 <timerHandler(unsigned long long)+0x4f>
c001253e:	83 ec 0c             	sub    esp,0xc
c0012541:	68 bc 4b 02 c0       	push   0xc0024bbc
c0012546:	e8 15 c9 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001254b:	83 c4 10             	add    esp,0x10
c001254e:	39 d8                	cmp    eax,ebx
c0012550:	74 a0                	je     c00124f2 <timerHandler(unsigned long long)+0x4f>
c0012552:	83 ec 0c             	sub    esp,0xc
c0012555:	68 bc 4b 02 c0       	push   0xc0024bbc
c001255a:	e8 01 c9 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001255f:	c7 04 24 bc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bbc
c0012566:	89 c5                	mov    ebp,eax
c0012568:	e8 17 c9 00 00       	call   c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001256d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012570:	83 c4 10             	add    esp,0x10
c0012573:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012576:	39 15 f0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023df0,edx
c001257c:	a1 f4 3d 02 c0       	mov    eax,ds:0xc0023df4
c0012581:	19 c8                	sbb    eax,ecx
c0012583:	73 83                	jae    c0012508 <timerHandler(unsigned long long)+0x65>
c0012585:	50                   	push   eax
c0012586:	50                   	push   eax
c0012587:	55                   	push   ebp
c0012588:	68 bc 4b 02 c0       	push   0xc0024bbc
c001258d:	e8 a0 c9 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012592:	eb 93                	jmp    c0012527 <timerHandler(unsigned long long)+0x84>
c0012594:	80 3d 8c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002378c,0x0
c001259b:	74 29                	je     c00125c6 <timerHandler(unsigned long long)+0x123>
c001259d:	39 c6                	cmp    esi,eax
c001259f:	bb 00 00 00 00       	mov    ebx,0x0
c00125a4:	19 df                	sbb    edi,ebx
c00125a6:	72 19                	jb     c00125c1 <timerHandler(unsigned long long)+0x11e>
c00125a8:	e8 33 56 00 00       	call   c0017be0 <lockScheduler()>
c00125ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125b2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00125b5:	e8 5a 59 00 00       	call   c0017f14 <schedule()>
c00125ba:	e8 23 56 00 00       	call   c0017be2 <unlockScheduler()>
c00125bf:	eb 05                	jmp    c00125c6 <timerHandler(unsigned long long)+0x123>
c00125c1:	29 f0                	sub    eax,esi
c00125c3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00125c6:	83 c4 0c             	add    esp,0xc
c00125c9:	5b                   	pop    ebx
c00125ca:	5e                   	pop    esi
c00125cb:	5f                   	pop    edi
c00125cc:	5d                   	pop    ebp
c00125cd:	e9 c7 59 00 00       	jmp    c0017f99 <unlockStuff()>
c00125d2:	83 c4 0c             	add    esp,0xc
c00125d5:	5b                   	pop    ebx
c00125d6:	5e                   	pop    esi
c00125d7:	5f                   	pop    edi
c00125d8:	5d                   	pop    ebp
c00125d9:	c3                   	ret    

c00125da <setupTimer(int)>:
c00125da:	57                   	push   edi
c00125db:	56                   	push   esi
c00125dc:	53                   	push   ebx
c00125dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125e1:	e8 a1 19 00 00       	call   c0013f87 <getCPUNumber()>
c00125e6:	85 c0                	test   eax,eax
c00125e8:	74 32                	je     c001261c <setupTimer(int)+0x42>
c00125ea:	83 ec 0c             	sub    esp,0xc
c00125ed:	68 60 01 00 00       	push   0x160
c00125f2:	e8 15 c9 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00125f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00125fa:	89 c3                	mov    ebx,eax
c00125fc:	e8 21 bc 00 00       	call   c001e222 <APICTimer::APICTimer()>
c0012601:	6a 00                	push   0x0
c0012603:	6a 00                	push   0x0
c0012605:	56                   	push   esi
c0012606:	53                   	push   ebx
c0012607:	e8 1e bb 00 00       	call   c001e12a <APICTimer::open(int, int, void*)>
c001260c:	83 c4 20             	add    esp,0x20
c001260f:	e8 76 19 00 00       	call   c0013f8a <thisCPU()>
c0012614:	56                   	push   esi
c0012615:	56                   	push   esi
c0012616:	53                   	push   ebx
c0012617:	e9 96 00 00 00       	jmp    c00126b2 <setupTimer(int)+0xd8>
c001261c:	e8 69 19 00 00       	call   c0013f8a <thisCPU()>
c0012621:	83 ec 0c             	sub    esp,0xc
c0012624:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001262a:	e8 b9 e0 ff ff       	call   c00106e8 <Device::getName()>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012635:	0f 85 87 00 00 00    	jne    c00126c2 <setupTimer(int)+0xe8>
c001263b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012640:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012647:	74 79                	je     c00126c2 <setupTimer(int)+0xe8>
c0012649:	83 ec 0c             	sub    esp,0xc
c001264c:	68 5c 01 00 00       	push   0x15c
c0012651:	e8 b6 c8 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0012656:	89 04 24             	mov    DWORD PTR [esp],eax
c0012659:	89 c3                	mov    ebx,eax
c001265b:	e8 12 bd 00 00       	call   c001e372 <PIT::PIT()>
c0012660:	59                   	pop    ecx
c0012661:	5f                   	pop    edi
c0012662:	53                   	push   ebx
c0012663:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c0012669:	e8 98 dd ff ff       	call   c0010406 <Device::addChild(Device*)>
c001266e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012670:	6a 00                	push   0x0
c0012672:	6a 00                	push   0x0
c0012674:	56                   	push   esi
c0012675:	53                   	push   ebx
c0012676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012679:	83 c4 14             	add    esp,0x14
c001267c:	68 60 01 00 00       	push   0x160
c0012681:	e8 86 c8 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0012686:	89 04 24             	mov    DWORD PTR [esp],eax
c0012689:	89 c7                	mov    edi,eax
c001268b:	e8 92 bb 00 00       	call   c001e222 <APICTimer::APICTimer()>
c0012690:	6a 00                	push   0x0
c0012692:	6a 00                	push   0x0
c0012694:	56                   	push   esi
c0012695:	57                   	push   edi
c0012696:	e8 8f ba 00 00       	call   c001e12a <APICTimer::open(int, int, void*)>
c001269b:	83 c4 20             	add    esp,0x20
c001269e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126a0:	6a 00                	push   0x0
c00126a2:	6a 00                	push   0x0
c00126a4:	6a 00                	push   0x0
c00126a6:	53                   	push   ebx
c00126a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126aa:	e8 db 18 00 00       	call   c0013f8a <thisCPU()>
c00126af:	5a                   	pop    edx
c00126b0:	59                   	pop    ecx
c00126b1:	57                   	push   edi
c00126b2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00126b8:	e8 49 dd ff ff       	call   c0010406 <Device::addChild(Device*)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	eb 33                	jmp    c00126f5 <setupTimer(int)+0x11b>
c00126c2:	83 ec 0c             	sub    esp,0xc
c00126c5:	68 5c 01 00 00       	push   0x15c
c00126ca:	e8 3d c8 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00126cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00126d2:	89 c3                	mov    ebx,eax
c00126d4:	e8 99 bc 00 00       	call   c001e372 <PIT::PIT()>
c00126d9:	58                   	pop    eax
c00126da:	5a                   	pop    edx
c00126db:	53                   	push   ebx
c00126dc:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c00126e2:	e8 1f dd ff ff       	call   c0010406 <Device::addChild(Device*)>
c00126e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126e9:	6a 00                	push   0x0
c00126eb:	6a 00                	push   0x0
c00126ed:	56                   	push   esi
c00126ee:	53                   	push   ebx
c00126ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126f2:	83 c4 20             	add    esp,0x20
c00126f5:	89 d8                	mov    eax,ebx
c00126f7:	5b                   	pop    ebx
c00126f8:	5e                   	pop    esi
c00126f9:	5f                   	pop    edi
c00126fa:	c3                   	ret    
c00126fb:	90                   	nop

c00126fc <VCache::VCache(PhysicalDisk*)>:
c00126fc:	53                   	push   ebx
c00126fd:	83 ec 08             	sub    esp,0x8
c0012700:	ba 94 13 02 c0       	mov    edx,0xc0021394
c0012705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012709:	89 10                	mov    DWORD PTR [eax],edx
c001270b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001270f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001271a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012725:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001272c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012737:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001273e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012749:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012754:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012758:	83 ec 0c             	sub    esp,0xc
c001275b:	6a 10                	push   0x10
c001275d:	e8 aa c7 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0012762:	83 c4 10             	add    esp,0x10
c0012765:	89 c3                	mov    ebx,eax
c0012767:	83 ec 0c             	sub    esp,0xc
c001276a:	53                   	push   ebx
c001276b:	e8 88 55 00 00       	call   c0017cf8 <Mutex::Mutex()>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012777:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001277a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012782:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012789:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012794:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001279a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127a5:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00127ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127b5:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00127b8:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00127bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127bf:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127cd:	c1 e0 06             	shl    eax,0x6
c00127d0:	83 ec 0c             	sub    esp,0xc
c00127d3:	50                   	push   eax
c00127d4:	e8 45 94 ff ff       	call   c000bc1e <malloc>
c00127d9:	83 c4 10             	add    esp,0x10
c00127dc:	89 c2                	mov    edx,eax
c00127de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00127e5:	90                   	nop
c00127e6:	83 c4 08             	add    esp,0x8
c00127e9:	5b                   	pop    ebx
c00127ea:	c3                   	ret    
c00127eb:	90                   	nop

c00127ec <VCache::writeWriteBuffer()>:
c00127ec:	53                   	push   ebx
c00127ed:	83 ec 14             	sub    esp,0x14
c00127f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00127f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00127f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00127fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00127ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012802:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012805:	50                   	push   eax
c0012806:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012809:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012810:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012817:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001281b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012822:	83 c4 28             	add    esp,0x28
c0012825:	5b                   	pop    ebx
c0012826:	c3                   	ret    
c0012827:	90                   	nop

c0012828 <VCache::~VCache()>:
c0012828:	83 ec 0c             	sub    esp,0xc
c001282b:	ba 94 13 02 c0       	mov    edx,0xc0021394
c0012830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012834:	89 10                	mov    DWORD PTR [eax],edx
c0012836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001283d:	84 c0                	test   al,al
c001283f:	74 0f                	je     c0012850 <VCache::~VCache()+0x28>
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012848:	e8 9f ff ff ff       	call   c00127ec <VCache::writeWriteBuffer()>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012854:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	50                   	push   eax
c001285b:	e8 ce 93 ff ff       	call   c000bc2e <free>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	90                   	nop
c0012864:	83 c4 0c             	add    esp,0xc
c0012867:	c3                   	ret    

c0012868 <VCache::~VCache()>:
c0012868:	83 ec 0c             	sub    esp,0xc
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012872:	e8 b1 ff ff ff       	call   c0012828 <VCache::~VCache()>
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	83 ec 08             	sub    esp,0x8
c001287d:	6a 30                	push   0x30
c001287f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012883:	e8 93 c6 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	83 c4 0c             	add    esp,0xc
c001288e:	c3                   	ret    
c001288f:	90                   	nop

c0012890 <VCache::write(unsigned long long, int, void*)>:
c0012890:	55                   	push   ebp
c0012891:	57                   	push   edi
c0012892:	56                   	push   esi
c0012893:	53                   	push   ebx
c0012894:	83 ec 28             	sub    esp,0x28
c0012897:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001289b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001289f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00128a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00128aa:	e8 1d 5a 00 00       	call   c00182cc <Semaphore::acquire()>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00128b6:	74 66                	je     c001291e <VCache::write(unsigned long long, int, void*)+0x8e>
c00128b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128bb:	99                   	cdq    
c00128bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00128c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00128c6:	89 c1                	mov    ecx,eax
c00128c8:	89 d0                	mov    eax,edx
c00128ca:	31 f1                	xor    ecx,esi
c00128cc:	31 f8                	xor    eax,edi
c00128ce:	89 ca                	mov    edx,ecx
c00128d0:	09 c2                	or     edx,eax
c00128d2:	75 3e                	jne    c0012912 <VCache::write(unsigned long long, int, void*)+0x82>
c00128d4:	83 fd 01             	cmp    ebp,0x1
c00128d7:	75 39                	jne    c0012912 <VCache::write(unsigned long long, int, void*)+0x82>
c00128d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128e2:	51                   	push   ecx
c00128e3:	50                   	push   eax
c00128e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00128ec:	0f af c8             	imul   ecx,eax
c00128ef:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00128f2:	51                   	push   ecx
c00128f3:	e8 da dc fe ff       	call   c00005d2 <memcpy>
c00128f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	40                   	inc    eax
c00128ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012902:	83 f8 40             	cmp    eax,0x40
c0012905:	75 57                	jne    c001295e <VCache::write(unsigned long long, int, void*)+0xce>
c0012907:	83 ec 0c             	sub    esp,0xc
c001290a:	53                   	push   ebx
c001290b:	e8 dc fe ff ff       	call   c00127ec <VCache::writeWriteBuffer()>
c0012910:	eb 34                	jmp    c0012946 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012912:	83 ec 0c             	sub    esp,0xc
c0012915:	53                   	push   ebx
c0012916:	e8 d1 fe ff ff       	call   c00127ec <VCache::writeWriteBuffer()>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012921:	83 fd 3f             	cmp    ebp,0x3f
c0012924:	7f 25                	jg     c001294b <VCache::write(unsigned long long, int, void*)+0xbb>
c0012926:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012929:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001292c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001292f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012933:	52                   	push   edx
c0012934:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001293a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001293e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012941:	e8 8c dc fe ff       	call   c00005d2 <memcpy>
c0012946:	83 c4 10             	add    esp,0x10
c0012949:	eb 13                	jmp    c001295e <VCache::write(unsigned long long, int, void*)+0xce>
c001294b:	83 ec 0c             	sub    esp,0xc
c001294e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012950:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012954:	55                   	push   ebp
c0012955:	57                   	push   edi
c0012956:	56                   	push   esi
c0012957:	50                   	push   eax
c0012958:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001295b:	83 c4 20             	add    esp,0x20
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012964:	e8 79 5f 00 00       	call   c00188e2 <Semaphore::release()>
c0012969:	83 c4 2c             	add    esp,0x2c
c001296c:	31 c0                	xor    eax,eax
c001296e:	5b                   	pop    ebx
c001296f:	5e                   	pop    esi
c0012970:	5f                   	pop    edi
c0012971:	5d                   	pop    ebp
c0012972:	c3                   	ret    
c0012973:	90                   	nop

c0012974 <VCache::read(unsigned long long, int, void*)>:
c0012974:	57                   	push   edi
c0012975:	56                   	push   esi
c0012976:	53                   	push   ebx
c0012977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001297b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001297f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012983:	83 ec 0c             	sub    esp,0xc
c0012986:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012989:	e8 3e 59 00 00       	call   c00182cc <Semaphore::acquire()>
c001298e:	83 c4 10             	add    esp,0x10
c0012991:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012995:	74 0c                	je     c00129a3 <VCache::read(unsigned long long, int, void*)+0x2f>
c0012997:	83 ec 0c             	sub    esp,0xc
c001299a:	53                   	push   ebx
c001299b:	e8 4c fe ff ff       	call   c00127ec <VCache::writeWriteBuffer()>
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129a6:	83 ec 0c             	sub    esp,0xc
c00129a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00129ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129b3:	57                   	push   edi
c00129b4:	56                   	push   esi
c00129b5:	50                   	push   eax
c00129b6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129b9:	83 c4 14             	add    esp,0x14
c00129bc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129bf:	e8 1e 5f 00 00       	call   c00188e2 <Semaphore::release()>
c00129c4:	83 c4 10             	add    esp,0x10
c00129c7:	31 c0                	xor    eax,eax
c00129c9:	5b                   	pop    ebx
c00129ca:	5e                   	pop    esi
c00129cb:	5f                   	pop    edi
c00129cc:	c3                   	ret    
c00129cd:	90                   	nop

c00129ce <Video::putrect(int, int, int, int, unsigned int)>:
c00129ce:	55                   	push   ebp
c00129cf:	57                   	push   edi
c00129d0:	56                   	push   esi
c00129d1:	53                   	push   ebx
c00129d2:	83 ec 1c             	sub    esp,0x1c
c00129d5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00129dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129e1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00129e5:	01 e8                	add    eax,ebp
c00129e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00129eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ef:	01 df                	add    edi,ebx
c00129f1:	39 fb                	cmp    ebx,edi
c00129f3:	7d 1b                	jge    c0012a10 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00129f5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00129f9:	7d 12                	jge    c0012a0d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00129fb:	8b 16                	mov    edx,DWORD PTR [esi]
c00129fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a01:	53                   	push   ebx
c0012a02:	55                   	push   ebp
c0012a03:	45                   	inc    ebp
c0012a04:	56                   	push   esi
c0012a05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012a08:	83 c4 10             	add    esp,0x10
c0012a0b:	eb e8                	jmp    c00129f5 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012a0d:	43                   	inc    ebx
c0012a0e:	eb e1                	jmp    c00129f1 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012a10:	83 c4 1c             	add    esp,0x1c
c0012a13:	5b                   	pop    ebx
c0012a14:	5e                   	pop    esi
c0012a15:	5f                   	pop    edi
c0012a16:	5d                   	pop    ebp
c0012a17:	c3                   	ret    

c0012a18 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a18:	55                   	push   ebp
c0012a19:	57                   	push   edi
c0012a1a:	56                   	push   esi
c0012a1b:	53                   	push   ebx
c0012a1c:	83 ec 1c             	sub    esp,0x1c
c0012a1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a27:	85 c0                	test   eax,eax
c0012a29:	79 02                	jns    c0012a2d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a2b:	31 c0                	xor    eax,eax
c0012a2d:	c1 e0 02             	shl    eax,0x2
c0012a30:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a3c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a40:	39 d8                	cmp    eax,ebx
c0012a42:	7e 49                	jle    c0012a8d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a44:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a4a:	7c 41                	jl     c0012a8d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a4c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a50:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a58:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a5c:	39 f9                	cmp    ecx,edi
c0012a5e:	7e 22                	jle    c0012a82 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a60:	83 c5 04             	add    ebp,0x4
c0012a63:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a69:	7c 14                	jl     c0012a7f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012a6b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012a6d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012a70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a78:	56                   	push   esi
c0012a79:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	47                   	inc    edi
c0012a80:	eb d2                	jmp    c0012a54 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012a82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a86:	43                   	inc    ebx
c0012a87:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012a8b:	eb ab                	jmp    c0012a38 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012a8d:	83 c4 1c             	add    esp,0x1c
c0012a90:	5b                   	pop    ebx
c0012a91:	5e                   	pop    esi
c0012a92:	5f                   	pop    edi
c0012a93:	5d                   	pop    ebp
c0012a94:	c3                   	ret    
c0012a95:	90                   	nop

c0012a96 <Video::clearScreen(unsigned int)>:
c0012a96:	57                   	push   edi
c0012a97:	56                   	push   esi
c0012a98:	53                   	push   ebx
c0012a99:	31 db                	xor    ebx,ebx
c0012a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a9f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012aa5:	7e 1f                	jle    c0012ac6 <Video::clearScreen(unsigned int)+0x30>
c0012aa7:	31 ff                	xor    edi,edi
c0012aa9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012aaf:	7e 12                	jle    c0012ac3 <Video::clearScreen(unsigned int)+0x2d>
c0012ab1:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ab3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ab7:	53                   	push   ebx
c0012ab8:	57                   	push   edi
c0012ab9:	47                   	inc    edi
c0012aba:	56                   	push   esi
c0012abb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	eb e6                	jmp    c0012aa9 <Video::clearScreen(unsigned int)+0x13>
c0012ac3:	43                   	inc    ebx
c0012ac4:	eb d9                	jmp    c0012a9f <Video::clearScreen(unsigned int)+0x9>
c0012ac6:	5b                   	pop    ebx
c0012ac7:	5e                   	pop    esi
c0012ac8:	5f                   	pop    edi
c0012ac9:	c3                   	ret    

c0012aca <Video::putpixel(int, int, unsigned int)>:
c0012aca:	c7 44 24 04 9c 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002139c
c0012ad2:	e9 24 c5 ff ff       	jmp    c000effb <Dbg::kprintf(char const*, ...)>
c0012ad7:	90                   	nop

c0012ad8 <Video::Video(char const*)>:
c0012ad8:	83 ec 0c             	sub    esp,0xc
c0012adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012adf:	83 ec 08             	sub    esp,0x8
c0012ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae6:	50                   	push   eax
c0012ae7:	e8 0a db ff ff       	call   c00105f6 <Device::Device(char const*)>
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c0012af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af8:	89 10                	mov    DWORD PTR [eax],edx
c0012afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012b08:	90                   	nop
c0012b09:	83 c4 0c             	add    esp,0xc
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop

c0012b0e <Video::~Video()>:
c0012b0e:	83 ec 0c             	sub    esp,0xc
c0012b11:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c0012b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b1a:	89 10                	mov    DWORD PTR [eax],edx
c0012b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b20:	83 ec 0c             	sub    esp,0xc
c0012b23:	50                   	push   eax
c0012b24:	e8 7f d7 ff ff       	call   c00102a8 <Device::~Device()>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	90                   	nop
c0012b2d:	83 c4 0c             	add    esp,0xc
c0012b30:	c3                   	ret    
c0012b31:	90                   	nop

c0012b32 <Video::~Video()>:
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b3c:	e8 cd ff ff ff       	call   c0012b0e <Video::~Video()>
c0012b41:	83 c4 10             	add    esp,0x10
c0012b44:	83 ec 08             	sub    esp,0x8
c0012b47:	68 64 01 00 00       	push   0x164
c0012b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b50:	e8 c6 c3 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	83 c4 0c             	add    esp,0xc
c0012b5b:	c3                   	ret    

c0012b5c <Video::isMonochrome()>:
c0012b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b60:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <Video::getWidth()>:
c0012b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012b72:	c3                   	ret    
c0012b73:	90                   	nop

c0012b74 <Video::getHeight()>:
c0012b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b7e:	c3                   	ret    
c0012b7f:	90                   	nop

c0012b80 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012b80:	55                   	push   ebp
c0012b81:	57                   	push   edi
c0012b82:	56                   	push   esi
c0012b83:	53                   	push   ebx
c0012b84:	83 ec 2c             	sub    esp,0x2c
c0012b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012b8f:	83 f8 01             	cmp    eax,0x1
c0012b92:	19 c9                	sbb    ecx,ecx
c0012b94:	31 db                	xor    ebx,ebx
c0012b96:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012b9a:	89 cd                	mov    ebp,ecx
c0012b9c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012ba4:	f7 d5                	not    ebp
c0012ba6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012bac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012bb0:	01 d8                	add    eax,ebx
c0012bb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012bb6:	56                   	push   esi
c0012bb7:	e8 b8 ff ff ff       	call   c0012b74 <Video::getHeight()>
c0012bbc:	59                   	pop    ecx
c0012bbd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bc1:	7e 70                	jle    c0012c33 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012bc3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bc7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012bcb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012bce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bd2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bd6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012bdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012be1:	89 f8                	mov    eax,edi
c0012be3:	83 c0 20             	add    eax,0x20
c0012be6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bea:	56                   	push   esi
c0012beb:	e8 78 ff ff ff       	call   c0012b68 <Video::getWidth()>
c0012bf0:	5a                   	pop    edx
c0012bf1:	39 c7                	cmp    edi,eax
c0012bf3:	7d 34                	jge    c0012c29 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012bf5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012bfa:	74 05                	je     c0012c01 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012bfc:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bfe:	55                   	push   ebp
c0012bff:	eb 0d                	jmp    c0012c0e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012c01:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012c06:	74 12                	je     c0012c1a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012c08:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c12:	57                   	push   edi
c0012c13:	56                   	push   esi
c0012c14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c17:	83 c4 10             	add    esp,0x10
c0012c1a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c1e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c22:	47                   	inc    edi
c0012c23:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c27:	75 c1                	jne    c0012bea <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c29:	43                   	inc    ebx
c0012c2a:	83 fb 20             	cmp    ebx,0x20
c0012c2d:	0f 85 79 ff ff ff    	jne    c0012bac <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c33:	83 c4 2c             	add    esp,0x2c
c0012c36:	5b                   	pop    ebx
c0012c37:	5e                   	pop    esi
c0012c38:	5f                   	pop    edi
c0012c39:	5d                   	pop    ebp
c0012c3a:	c3                   	ret    
c0012c3b:	90                   	nop

c0012c3c <ACPI::close(int, int, void*)>:
c0012c3c:	83 ec 1c             	sub    esp,0x1c
c0012c3f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012c47:	74 0a                	je     c0012c53 <ACPI::close(int, int, void*)+0x17>
c0012c49:	b8 00 00 00 00       	mov    eax,0x0
c0012c4e:	e9 9a 00 00 00       	jmp    c0012ced <ACPI::close(int, int, void*)+0xb1>
c0012c53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c58:	75 37                	jne    c0012c91 <ACPI::close(int, int, void*)+0x55>
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	68 ec 13 02 c0       	push   0xc00213ec
c0012c62:	e8 94 c3 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0012c67:	83 c4 10             	add    esp,0x10
c0012c6a:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012c6f:	85 c0                	test   eax,eax
c0012c71:	74 07                	je     c0012c7a <ACPI::close(int, int, void*)+0x3e>
c0012c73:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012c78:	ff d0                	call   eax
c0012c7a:	83 ec 0c             	sub    esp,0xc
c0012c7d:	68 c0 14 02 c0       	push   0xc00214c0
c0012c82:	e8 09 20 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012c8f:	eb 5c                	jmp    c0012ced <ACPI::close(int, int, void*)+0xb1>
c0012c91:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012c96:	75 50                	jne    c0012ce8 <ACPI::close(int, int, void*)+0xac>
c0012c98:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0012c9d:	85 c0                	test   eax,eax
c0012c9f:	74 07                	je     c0012ca8 <ACPI::close(int, int, void*)+0x6c>
c0012ca1:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0012ca6:	ff d0                	call   eax
c0012ca8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012cad:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012cb2:	83 e0 02             	and    eax,0x2
c0012cb5:	74 1c                	je     c0012cd3 <ACPI::close(int, int, void*)+0x97>
c0012cb7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012cbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cc2:	89 c2                	mov    edx,eax
c0012cc4:	ec                   	in     al,dx
c0012cc5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cc9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012ccd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012cd1:	eb da                	jmp    c0012cad <ACPI::close(int, int, void*)+0x71>
c0012cd3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012cda:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012cdf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012ce3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce7:	ee                   	out    dx,al
c0012ce8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012ced:	83 c4 1c             	add    esp,0x1c
c0012cf0:	c3                   	ret    

c0012cf1 <findRSDP()>:
c0012cf1:	83 ec 1c             	sub    esp,0x1c
c0012cf4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012cf9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012cff:	83 e0 04             	and    eax,0x4
c0012d02:	84 c0                	test   al,al
c0012d04:	75 07                	jne    c0012d0d <findRSDP()+0x1c>
c0012d06:	b8 00 00 00 00       	mov    eax,0x0
c0012d0b:	eb 6a                	jmp    c0012d77 <findRSDP()+0x86>
c0012d0d:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0012d12:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012d17:	7f 1b                	jg     c0012d34 <findRSDP()+0x43>
c0012d19:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012d1e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d24:	83 e2 fb             	and    edx,0xfffffffb
c0012d27:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d2d:	b8 00 00 00 00       	mov    eax,0x0
c0012d32:	eb 43                	jmp    c0012d77 <findRSDP()+0x86>
c0012d34:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d3c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d44:	77 2c                	ja     c0012d72 <findRSDP()+0x81>
c0012d46:	83 ec 04             	sub    esp,0x4
c0012d49:	6a 08                	push   0x8
c0012d4b:	68 f9 13 02 c0       	push   0xc00213f9
c0012d50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d54:	e8 16 d8 fe ff       	call   c000056f <memcmp>
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	85 c0                	test   eax,eax
c0012d5e:	0f 94 c0             	sete   al
c0012d61:	84 c0                	test   al,al
c0012d63:	74 06                	je     c0012d6b <findRSDP()+0x7a>
c0012d65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d69:	eb 0c                	jmp    c0012d77 <findRSDP()+0x86>
c0012d6b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012d70:	eb ca                	jmp    c0012d3c <findRSDP()+0x4b>
c0012d72:	b8 00 00 00 00       	mov    eax,0x0
c0012d77:	83 c4 1c             	add    esp,0x1c
c0012d7a:	c3                   	ret    

c0012d7b <loadACPITables(unsigned char*)>:
c0012d7b:	56                   	push   esi
c0012d7c:	53                   	push   ebx
c0012d7d:	83 ec 44             	sub    esp,0x44
c0012d80:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012d85:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d8b:	83 e0 04             	and    eax,0x4
c0012d8e:	84 c0                	test   al,al
c0012d90:	0f 84 05 02 00 00    	je     c0012f9b <loadACPITables(unsigned char*)+0x220>
c0012d96:	a0 20 40 02 c0       	mov    al,ds:0xc0024020
c0012d9b:	84 c0                	test   al,al
c0012d9d:	74 75                	je     c0012e14 <loadACPITables(unsigned char*)+0x99>
c0012d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012da3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012da7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012dab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dae:	83 e8 24             	sub    eax,0x24
c0012db1:	c1 e8 03             	shr    eax,0x3
c0012db4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012db8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012dc0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dc4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012dc8:	0f 8d b2 00 00 00    	jge    c0012e80 <loadACPITables(unsigned char*)+0x105>
c0012dce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dd2:	83 c0 24             	add    eax,0x24
c0012dd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ddd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012de1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012de5:	c1 e0 03             	shl    eax,0x3
c0012de8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012dec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012df0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df5:	89 c1                	mov    ecx,eax
c0012df7:	a1 0c 3e 02 c0       	mov    eax,ds:0xc0023e0c
c0012dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0012dff:	89 15 0c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e0c,edx
c0012e05:	89 ca                	mov    edx,ecx
c0012e07:	89 14 c5 24 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1dc],edx
c0012e0e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012e12:	eb ac                	jmp    c0012dc0 <loadACPITables(unsigned char*)+0x45>
c0012e14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e23:	83 e8 24             	sub    eax,0x24
c0012e26:	c1 e8 02             	shr    eax,0x2
c0012e29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e2d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e39:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e3d:	7d 41                	jge    c0012e80 <loadACPITables(unsigned char*)+0x105>
c0012e3f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e43:	83 c0 24             	add    eax,0x24
c0012e46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e52:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e56:	c1 e0 02             	shl    eax,0x2
c0012e59:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e61:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e63:	a1 0c 3e 02 c0       	mov    eax,ds:0xc0023e0c
c0012e68:	8d 50 01             	lea    edx,[eax+0x1]
c0012e6b:	89 15 0c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e0c,edx
c0012e71:	89 ca                	mov    edx,ecx
c0012e73:	89 14 c5 24 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1dc],edx
c0012e7a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012e7e:	eb b5                	jmp    c0012e35 <loadACPITables(unsigned char*)+0xba>
c0012e80:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012e88:	a1 0c 3e 02 c0       	mov    eax,ds:0xc0023e0c
c0012e8d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012e91:	0f 8d 05 01 00 00    	jge    c0012f9c <loadACPITables(unsigned char*)+0x221>
c0012e97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e9b:	8b 04 c5 24 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc1dc]
c0012ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb2:	25 ff 0f 00 00       	and    eax,0xfff
c0012eb7:	89 c6                	mov    esi,eax
c0012eb9:	e8 4d b0 ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c0012ebe:	89 c3                	mov    ebx,eax
c0012ec0:	83 ec 0c             	sub    esp,0xc
c0012ec3:	6a 01                	push   0x1
c0012ec5:	e8 b1 ae ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ed1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012ed7:	83 ec 0c             	sub    esp,0xc
c0012eda:	6a 01                	push   0x1
c0012edc:	6a 01                	push   0x1
c0012ede:	50                   	push   eax
c0012edf:	52                   	push   edx
c0012ee0:	53                   	push   ebx
c0012ee1:	e8 b8 b7 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ee6:	83 c4 20             	add    esp,0x20
c0012ee9:	09 f0                	or     eax,esi
c0012eeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012eef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ef3:	c1 e0 03             	shl    eax,0x3
c0012ef6:	05 20 3e 02 c0       	add    eax,0xc0023e20
c0012efb:	83 ec 04             	sub    esp,0x4
c0012efe:	6a 04                	push   0x4
c0012f00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f04:	50                   	push   eax
c0012f05:	e8 c8 d6 fe ff       	call   c00005d2 <memcpy>
c0012f0a:	83 c4 10             	add    esp,0x10
c0012f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f1c:	05 00 10 00 00       	add    eax,0x1000
c0012f21:	c1 e8 0c             	shr    eax,0xc
c0012f24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f33:	25 ff 0f 00 00       	and    eax,0xfff
c0012f38:	89 c6                	mov    esi,eax
c0012f3a:	e8 cc af ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c0012f3f:	89 c3                	mov    ebx,eax
c0012f41:	83 ec 0c             	sub    esp,0xc
c0012f44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f48:	e8 2e ae ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f54:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f5a:	83 ec 0c             	sub    esp,0xc
c0012f5d:	6a 01                	push   0x1
c0012f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f63:	50                   	push   eax
c0012f64:	52                   	push   edx
c0012f65:	53                   	push   ebx
c0012f66:	e8 33 b7 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f6b:	83 c4 20             	add    esp,0x20
c0012f6e:	09 f0                	or     eax,esi
c0012f70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f74:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012f77:	83 ec 0c             	sub    esp,0xc
c0012f7a:	50                   	push   eax
c0012f7b:	e8 31 b1 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f8b:	89 14 c5 24 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1dc],edx
c0012f92:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012f96:	e9 ed fe ff ff       	jmp    c0012e88 <loadACPITables(unsigned char*)+0x10d>
c0012f9b:	90                   	nop
c0012f9c:	83 c4 44             	add    esp,0x44
c0012f9f:	5b                   	pop    ebx
c0012fa0:	5e                   	pop    esi
c0012fa1:	c3                   	ret    

c0012fa2 <findRSDT(unsigned char*)>:
c0012fa2:	56                   	push   esi
c0012fa3:	53                   	push   ebx
c0012fa4:	83 ec 44             	sub    esp,0x44
c0012fa7:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012fac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012fb2:	83 e0 04             	and    eax,0x4
c0012fb5:	84 c0                	test   al,al
c0012fb7:	75 0a                	jne    c0012fc3 <findRSDT(unsigned char*)+0x21>
c0012fb9:	b8 00 00 00 00       	mov    eax,0x0
c0012fbe:	e9 f7 00 00 00       	jmp    c00130ba <findRSDT(unsigned char*)+0x118>
c0012fc3:	83 ec 04             	sub    esp,0x4
c0012fc6:	6a 24                	push   0x24
c0012fc8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012fcc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012fd0:	50                   	push   eax
c0012fd1:	e8 fc d5 fe ff       	call   c00005d2 <memcpy>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012fdd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012fe1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012fed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012ff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ff9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ffd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013001:	25 ff 0f 00 00       	and    eax,0xfff
c0013006:	89 c6                	mov    esi,eax
c0013008:	e8 fe ae ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c001300d:	89 c3                	mov    ebx,eax
c001300f:	83 ec 0c             	sub    esp,0xc
c0013012:	6a 02                	push   0x2
c0013014:	e8 62 ad ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013020:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013026:	83 ec 0c             	sub    esp,0xc
c0013029:	6a 01                	push   0x1
c001302b:	6a 02                	push   0x2
c001302d:	50                   	push   eax
c001302e:	52                   	push   edx
c001302f:	53                   	push   ebx
c0013030:	e8 69 b6 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013035:	83 c4 20             	add    esp,0x20
c0013038:	09 f0                	or     eax,esi
c001303a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001303e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013042:	25 ff 0f 00 00       	and    eax,0xfff
c0013047:	89 c6                	mov    esi,eax
c0013049:	e8 bd ae ff ff       	call   c000df0b <Virt::getAKernelVAS()>
c001304e:	89 c3                	mov    ebx,eax
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	6a 02                	push   0x2
c0013055:	e8 21 ad ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c001305a:	83 c4 10             	add    esp,0x10
c001305d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013061:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013067:	83 ec 0c             	sub    esp,0xc
c001306a:	6a 01                	push   0x1
c001306c:	6a 02                	push   0x2
c001306e:	50                   	push   eax
c001306f:	52                   	push   edx
c0013070:	53                   	push   ebx
c0013071:	e8 28 b6 ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013076:	83 c4 20             	add    esp,0x20
c0013079:	09 f0                	or     eax,esi
c001307b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001307f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013084:	75 11                	jne    c0013097 <findRSDT(unsigned char*)+0xf5>
c0013086:	c6 05 20 40 02 c0 00 	mov    BYTE PTR ds:0xc0024020,0x0
c001308d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013091:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013095:	eb 1f                	jmp    c00130b6 <findRSDT(unsigned char*)+0x114>
c0013097:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001309c:	75 11                	jne    c00130af <findRSDT(unsigned char*)+0x10d>
c001309e:	c6 05 20 40 02 c0 01 	mov    BYTE PTR ds:0xc0024020,0x1
c00130a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00130a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130ad:	eb 07                	jmp    c00130b6 <findRSDT(unsigned char*)+0x114>
c00130af:	b8 00 00 00 00       	mov    eax,0x0
c00130b4:	eb 04                	jmp    c00130ba <findRSDT(unsigned char*)+0x118>
c00130b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00130ba:	83 c4 44             	add    esp,0x44
c00130bd:	5b                   	pop    ebx
c00130be:	5e                   	pop    esi
c00130bf:	c3                   	ret    

c00130c0 <findDataTable(unsigned char*, char*)>:
c00130c0:	83 ec 1c             	sub    esp,0x1c
c00130c3:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00130c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130ce:	83 e0 04             	and    eax,0x4
c00130d1:	84 c0                	test   al,al
c00130d3:	75 07                	jne    c00130dc <findDataTable(unsigned char*, char*)+0x1c>
c00130d5:	b8 00 00 00 00       	mov    eax,0x0
c00130da:	eb 7c                	jmp    c0013158 <findDataTable(unsigned char*, char*)+0x98>
c00130dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130e4:	a1 0c 3e 02 c0       	mov    eax,ds:0xc0023e0c
c00130e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00130ed:	7d 3a                	jge    c0013129 <findDataTable(unsigned char*, char*)+0x69>
c00130ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130f3:	c1 e0 03             	shl    eax,0x3
c00130f6:	05 20 3e 02 c0       	add    eax,0xc0023e20
c00130fb:	83 ec 04             	sub    esp,0x4
c00130fe:	6a 04                	push   0x4
c0013100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013104:	50                   	push   eax
c0013105:	e8 65 d4 fe ff       	call   c000056f <memcmp>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	85 c0                	test   eax,eax
c001310f:	0f 94 c0             	sete   al
c0013112:	84 c0                	test   al,al
c0013114:	74 0d                	je     c0013123 <findDataTable(unsigned char*, char*)+0x63>
c0013116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001311a:	8b 04 c5 24 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc1dc]
c0013121:	eb 35                	jmp    c0013158 <findDataTable(unsigned char*, char*)+0x98>
c0013123:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013127:	eb bb                	jmp    c00130e4 <findDataTable(unsigned char*, char*)+0x24>
c0013129:	a0 20 40 02 c0       	mov    al,ds:0xc0024020
c001312e:	84 c0                	test   al,al
c0013130:	74 07                	je     c0013139 <findDataTable(unsigned char*, char*)+0x79>
c0013132:	b8 58 00 00 00       	mov    eax,0x58
c0013137:	eb 05                	jmp    c001313e <findDataTable(unsigned char*, char*)+0x7e>
c0013139:	b8 52 00 00 00       	mov    eax,0x52
c001313e:	83 ec 04             	sub    esp,0x4
c0013141:	50                   	push   eax
c0013142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013146:	68 e4 14 02 c0       	push   0xc00214e4
c001314b:	e8 ab be ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	b8 00 00 00 00       	mov    eax,0x0
c0013158:	83 c4 1c             	add    esp,0x1c
c001315b:	c3                   	ret    

c001315c <scanMADT()>:
c001315c:	83 ec 2c             	sub    esp,0x2c
c001315f:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013164:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001316a:	83 e0 04             	and    eax,0x4
c001316d:	84 c0                	test   al,al
c001316f:	0f 84 73 03 00 00    	je     c00134e8 <scanMADT()+0x38c>
c0013175:	e8 77 fb ff ff       	call   c0012cf1 <findRSDP()>
c001317a:	a3 2c 40 02 c0       	mov    ds:0xc002402c,eax
c001317f:	a1 2c 40 02 c0       	mov    eax,ds:0xc002402c
c0013184:	85 c0                	test   eax,eax
c0013186:	75 19                	jne    c00131a1 <scanMADT()+0x45>
c0013188:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001318d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013193:	83 e2 fb             	and    edx,0xfffffffb
c0013196:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001319c:	e9 4b 03 00 00       	jmp    c00134ec <scanMADT()+0x390>
c00131a1:	a1 2c 40 02 c0       	mov    eax,ds:0xc002402c
c00131a6:	83 ec 0c             	sub    esp,0xc
c00131a9:	50                   	push   eax
c00131aa:	e8 f3 fd ff ff       	call   c0012fa2 <findRSDT(unsigned char*)>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	a3 28 40 02 c0       	mov    ds:0xc0024028,eax
c00131b7:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c00131bc:	85 c0                	test   eax,eax
c00131be:	75 19                	jne    c00131d9 <scanMADT()+0x7d>
c00131c0:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00131c5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131cb:	83 e2 fb             	and    edx,0xfffffffb
c00131ce:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131d4:	e9 13 03 00 00       	jmp    c00134ec <scanMADT()+0x390>
c00131d9:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	50                   	push   eax
c00131e2:	e8 94 fb ff ff       	call   c0012d7b <loadACPITables(unsigned char*)>
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c00131ef:	83 ec 08             	sub    esp,0x8
c00131f2:	68 02 14 02 c0       	push   0xc0021402
c00131f7:	50                   	push   eax
c00131f8:	e8 c3 fe ff ff       	call   c00130c0 <findDataTable(unsigned char*, char*)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013204:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013209:	75 19                	jne    c0013224 <scanMADT()+0xc8>
c001320b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013210:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013216:	83 e2 fe             	and    edx,0xfffffffe
c0013219:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001321f:	e9 c8 02 00 00       	jmp    c00134ec <scanMADT()+0x390>
c0013224:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001322c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013230:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013233:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013237:	0f 87 af 02 00 00    	ja     c00134ec <scanMADT()+0x390>
c001323d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013245:	0f 87 a1 02 00 00    	ja     c00134ec <scanMADT()+0x390>
c001324b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001324f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013257:	8d 50 01             	lea    edx,[eax+0x1]
c001325a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001325e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013262:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013266:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001326a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326e:	8d 50 01             	lea    edx,[eax+0x1]
c0013271:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013275:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013279:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001327d:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013281:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013286:	0f 86 5f 02 00 00    	jbe    c00134eb <scanMADT()+0x38f>
c001328c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013291:	75 57                	jne    c00132ea <scanMADT()+0x18e>
c0013293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013297:	8d 50 01             	lea    edx,[eax+0x1]
c001329a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001329e:	8a 15 60 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024160
c00132a4:	0f b6 d2             	movzx  edx,dl
c00132a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132af:	88 82 a0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe60],al
c00132b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b9:	8d 50 01             	lea    edx,[eax+0x1]
c00132bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132c0:	8a 15 60 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024160
c00132c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00132c9:	88 0d 60 41 02 c0    	mov    BYTE PTR ds:0xc0024160,cl
c00132cf:	0f b6 d2             	movzx  edx,dl
c00132d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132da:	88 82 80 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe80],al
c00132e0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00132e5:	e9 ea 01 00 00       	jmp    c00134d4 <scanMADT()+0x378>
c00132ea:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00132ef:	0f 85 14 01 00 00    	jne    c0013409 <scanMADT()+0x2ad>
c00132f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f9:	8d 50 01             	lea    edx,[eax+0x1]
c00132fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013300:	8a 15 30 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024030
c0013306:	0f b6 d2             	movzx  edx,dl
c0013309:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001330d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013311:	88 82 40 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfc0],al
c0013317:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001331b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001331f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013323:	01 d0                	add    eax,edx
c0013325:	83 c0 2c             	add    eax,0x2c
c0013328:	8a 00                	mov    al,BYTE PTR [eax]
c001332a:	0f b6 d0             	movzx  edx,al
c001332d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013331:	8d 48 01             	lea    ecx,[eax+0x1]
c0013334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013338:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001333c:	0f b6 c0             	movzx  eax,al
c001333f:	c1 e0 08             	shl    eax,0x8
c0013342:	89 d1                	mov    ecx,edx
c0013344:	09 c1                	or     ecx,eax
c0013346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001334a:	8d 50 02             	lea    edx,[eax+0x2]
c001334d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013351:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013355:	0f b6 c0             	movzx  eax,al
c0013358:	c1 e0 10             	shl    eax,0x10
c001335b:	09 c1                	or     ecx,eax
c001335d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013361:	8d 50 03             	lea    edx,[eax+0x3]
c0013364:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013368:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001336c:	0f b6 c0             	movzx  eax,al
c001336f:	c1 e0 18             	shl    eax,0x18
c0013372:	09 c1                	or     ecx,eax
c0013374:	89 ca                	mov    edx,ecx
c0013376:	a0 30 40 02 c0       	mov    al,ds:0xc0024030
c001337b:	0f b6 c0             	movzx  eax,al
c001337e:	89 14 85 60 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfa0],edx
c0013385:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001338a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001338e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013392:	01 d0                	add    eax,edx
c0013394:	83 c0 2c             	add    eax,0x2c
c0013397:	8a 00                	mov    al,BYTE PTR [eax]
c0013399:	0f b6 d0             	movzx  edx,al
c001339c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a0:	8d 48 01             	lea    ecx,[eax+0x1]
c00133a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133a7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00133ab:	0f b6 c0             	movzx  eax,al
c00133ae:	c1 e0 08             	shl    eax,0x8
c00133b1:	89 d1                	mov    ecx,edx
c00133b3:	09 c1                	or     ecx,eax
c00133b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b9:	8d 50 02             	lea    edx,[eax+0x2]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133c4:	0f b6 c0             	movzx  eax,al
c00133c7:	c1 e0 10             	shl    eax,0x10
c00133ca:	09 c1                	or     ecx,eax
c00133cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d0:	8d 50 03             	lea    edx,[eax+0x3]
c00133d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133db:	0f b6 c0             	movzx  eax,al
c00133de:	c1 e0 18             	shl    eax,0x18
c00133e1:	09 c1                	or     ecx,eax
c00133e3:	89 ca                	mov    edx,ecx
c00133e5:	a0 30 40 02 c0       	mov    al,ds:0xc0024030
c00133ea:	0f b6 c0             	movzx  eax,al
c00133ed:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c00133f4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133f9:	a0 30 40 02 c0       	mov    al,ds:0xc0024030
c00133fe:	40                   	inc    eax
c00133ff:	a2 30 40 02 c0       	mov    ds:0xc0024030,al
c0013404:	e9 cb 00 00 00       	jmp    c00134d4 <scanMADT()+0x378>
c0013409:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c001340e:	0f 85 a6 00 00 00    	jne    c00134ba <scanMADT()+0x35e>
c0013414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013418:	8d 50 01             	lea    edx,[eax+0x1]
c001341b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001341f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013423:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013427:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001342b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342f:	8d 50 01             	lea    edx,[eax+0x1]
c0013432:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013436:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001343a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001343e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013442:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013446:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001344a:	01 d0                	add    eax,edx
c001344c:	83 c0 2c             	add    eax,0x2c
c001344f:	8a 00                	mov    al,BYTE PTR [eax]
c0013451:	0f b6 d0             	movzx  edx,al
c0013454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013458:	8d 48 01             	lea    ecx,[eax+0x1]
c001345b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013463:	0f b6 c0             	movzx  eax,al
c0013466:	c1 e0 08             	shl    eax,0x8
c0013469:	89 d1                	mov    ecx,edx
c001346b:	09 c1                	or     ecx,eax
c001346d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013471:	8d 50 02             	lea    edx,[eax+0x2]
c0013474:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013478:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001347c:	0f b6 c0             	movzx  eax,al
c001347f:	c1 e0 10             	shl    eax,0x10
c0013482:	09 c1                	or     ecx,eax
c0013484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013488:	8d 50 03             	lea    edx,[eax+0x3]
c001348b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013493:	0f b6 c0             	movzx  eax,al
c0013496:	c1 e0 18             	shl    eax,0x18
c0013499:	09 c8                	or     eax,ecx
c001349b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001349f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134a4:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00134a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00134ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134b2:	88 90 e0 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd120],dl
c00134b8:	eb 1a                	jmp    c00134d4 <scanMADT()+0x378>
c00134ba:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00134bf:	75 07                	jne    c00134c8 <scanMADT()+0x36c>
c00134c1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134c6:	eb 0c                	jmp    c00134d4 <scanMADT()+0x378>
c00134c8:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00134cd:	75 05                	jne    c00134d4 <scanMADT()+0x378>
c00134cf:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00134d4:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00134d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00134dd:	01 d0                	add    eax,edx
c00134df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134e3:	e9 44 fd ff ff       	jmp    c001322c <scanMADT()+0xd0>
c00134e8:	90                   	nop
c00134e9:	eb 01                	jmp    c00134ec <scanMADT()+0x390>
c00134eb:	90                   	nop
c00134ec:	83 c4 2c             	add    esp,0x2c
c00134ef:	c3                   	ret    

c00134f0 <ACPI::ACPI()>:
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f7:	83 ec 08             	sub    esp,0x8
c00134fa:	68 07 14 02 c0       	push   0xc0021407
c00134ff:	50                   	push   eax
c0013500:	e8 f1 d0 ff ff       	call   c00105f6 <Device::Device(char const*)>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c001350d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013511:	89 10                	mov    DWORD PTR [eax],edx
c0013513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013517:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001351e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013522:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001352c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013530:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001353a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013545:	e8 12 fc ff ff       	call   c001315c <scanMADT()>
c001354a:	90                   	nop
c001354b:	83 c4 0c             	add    esp,0xc
c001354e:	c3                   	ret    
c001354f:	90                   	nop

c0013550 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013550:	83 ec 2c             	sub    esp,0x2c
c0013553:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013557:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001355b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001355f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013563:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013568:	88 d0                	mov    al,dl
c001356a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001356e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013573:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001357b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001357f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013585:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013589:	0f 8d 97 00 00 00    	jge    c0013626 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001358f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013593:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013597:	83 c2 2a             	add    edx,0x2a
c001359a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001359e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00135a3:	75 78                	jne    c001361d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135ad:	83 c2 2a             	add    edx,0x2a
c00135b0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00135b4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00135b8:	75 63                	jne    c001361d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00135bf:	74 3a                	je     c00135fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00135c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135c9:	83 c2 2a             	add    edx,0x2a
c00135cc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00135d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135d7:	39 c2                	cmp    edx,eax
c00135d9:	74 10                	je     c00135eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00135db:	83 ec 0c             	sub    esp,0xc
c00135de:	68 14 15 02 c0       	push   0xc0021514
c00135e3:	e8 a8 16 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	68 0c 14 02 c0       	push   0xc002140c
c00135f3:	e8 98 16 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c00135f8:	83 c4 10             	add    esp,0x10
c00135fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00135ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013603:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013607:	83 c2 2a             	add    edx,0x2a
c001360a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001360e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013610:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013613:	89 01                	mov    DWORD PTR [ecx],eax
c0013615:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013618:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001361d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013621:	e9 55 ff ff ff       	jmp    c001357b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013626:	90                   	nop
c0013627:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001362b:	83 c4 2c             	add    esp,0x2c
c001362e:	c2 04 00             	ret    0x4
c0013631:	90                   	nop

c0013632 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013632:	56                   	push   esi
c0013633:	53                   	push   ebx
c0013634:	83 ec 14             	sub    esp,0x14
c0013637:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001363b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001363f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013643:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013648:	88 c8                	mov    al,cl
c001364a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001364e:	88 d0                	mov    al,dl
c0013650:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013658:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001365e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013662:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013668:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001366d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013672:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013677:	83 ec 04             	sub    esp,0x4
c001367a:	56                   	push   esi
c001367b:	53                   	push   ebx
c001367c:	51                   	push   ecx
c001367d:	52                   	push   edx
c001367e:	50                   	push   eax
c001367f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013683:	68 44 15 02 c0       	push   0xc0021544
c0013688:	e8 6e b9 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001368d:	83 c4 20             	add    esp,0x20
c0013690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013694:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001369a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001369e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136a1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00136a5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00136a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ad:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136b7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00136ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136be:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00136c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136cd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00136d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00136d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136d8:	83 c2 2a             	add    edx,0x2a
c00136db:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00136df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136e3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ed:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136f4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00136f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136fc:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013702:	8d 50 01             	lea    edx,[eax+0x1]
c0013705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013709:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001370f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013713:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013719:	3d 00 08 00 00       	cmp    eax,0x800
c001371e:	75 10                	jne    c0013730 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013720:	83 ec 0c             	sub    esp,0xc
c0013723:	68 1b 14 02 c0       	push   0xc002141b
c0013728:	e8 63 15 00 00       	call   c0014c90 <Krnl::panic(char const*)>
c001372d:	83 c4 10             	add    esp,0x10
c0013730:	90                   	nop
c0013731:	83 c4 14             	add    esp,0x14
c0013734:	5b                   	pop    ebx
c0013735:	5e                   	pop    esi
c0013736:	c3                   	ret    
c0013737:	90                   	nop

c0013738 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013738:	b8 00 00 00 00       	mov    eax,0x0
c001373d:	c3                   	ret    

c001373e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001373e:	83 ec 1c             	sub    esp,0x1c
c0013741:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013745:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013748:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001374c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013751:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013756:	83 ec 08             	sub    esp,0x8
c0013759:	52                   	push   edx
c001375a:	50                   	push   eax
c001375b:	e8 d6 7a ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013767:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001376c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013771:	83 ec 04             	sub    esp,0x4
c0013774:	6a 01                	push   0x1
c0013776:	52                   	push   edx
c0013777:	50                   	push   eax
c0013778:	e8 c7 7b ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c001377d:	83 c4 10             	add    esp,0x10
c0013780:	90                   	nop
c0013781:	83 c4 1c             	add    esp,0x1c
c0013784:	c3                   	ret    
c0013785:	90                   	nop

c0013786 <ACPI::open(int, int, void*)>:
c0013786:	53                   	push   ebx
c0013787:	83 ec 18             	sub    esp,0x18
c001378a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001378e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013799:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001379f:	84 c0                	test   al,al
c00137a1:	74 60                	je     c0013803 <ACPI::open(int, int, void*)+0x7d>
c00137a3:	83 ec 0c             	sub    esp,0xc
c00137a6:	68 58 01 00 00       	push   0x158
c00137ab:	e8 5c b7 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	89 c3                	mov    ebx,eax
c00137b5:	83 ec 0c             	sub    esp,0xc
c00137b8:	53                   	push   ebx
c00137b9:	e8 12 7d 00 00       	call   c001b4d0 <PCI::PCI()>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00137c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137c9:	83 ec 08             	sub    esp,0x8
c00137cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137d0:	50                   	push   eax
c00137d1:	e8 30 cc ff ff       	call   c0010406 <Device::addChild(Device*)>
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00137df:	83 c0 08             	add    eax,0x8
c00137e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e4:	6a 00                	push   0x0
c00137e6:	6a 00                	push   0x0
c00137e8:	6a 00                	push   0x0
c00137ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ee:	ff d0                	call   eax
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	83 ec 0c             	sub    esp,0xc
c00137f6:	68 38 14 02 c0       	push   0xc0021438
c00137fb:	e8 fb b7 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	83 ec 0c             	sub    esp,0xc
c0013806:	68 43 14 02 c0       	push   0xc0021443
c001380b:	e8 ad 33 00 00       	call   c0016bbd <Thr::loadKernelSymbolTable(char const*)>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c0013819:	83 ec 08             	sub    esp,0x8
c001381c:	6a 01                	push   0x1
c001381e:	68 61 14 02 c0       	push   0xc0021461
c0013823:	e8 5a 3e 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	83 ec 08             	sub    esp,0x8
c001382e:	53                   	push   ebx
c001382f:	50                   	push   eax
c0013830:	e8 a0 3f 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c0013835:	83 c4 10             	add    esp,0x10
c0013838:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c001383e:	83 ec 08             	sub    esp,0x8
c0013841:	6a 01                	push   0x1
c0013843:	68 7e 14 02 c0       	push   0xc002147e
c0013848:	e8 35 3e 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	83 ec 08             	sub    esp,0x8
c0013853:	53                   	push   ebx
c0013854:	50                   	push   eax
c0013855:	e8 7b 3f 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013862:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013868:	83 e0 04             	and    eax,0x4
c001386b:	84 c0                	test   al,al
c001386d:	0f 84 cf 00 00 00    	je     c0013942 <ACPI::open(int, int, void*)+0x1bc>
c0013873:	83 ec 0c             	sub    esp,0xc
c0013876:	68 14 01 00 00       	push   0x114
c001387b:	e8 8c b6 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	89 c3                	mov    ebx,eax
c0013885:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c001388a:	83 ec 04             	sub    esp,0x4
c001388d:	50                   	push   eax
c001388e:	68 9b 14 02 c0       	push   0xc002149b
c0013893:	53                   	push   ebx
c0013894:	e8 91 bc ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00138a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138a5:	74 17                	je     c00138be <ACPI::open(int, int, void*)+0x138>
c00138a7:	83 ec 0c             	sub    esp,0xc
c00138aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138ae:	e8 49 bf ff ff       	call   c000f7fc <File::exists()>
c00138b3:	83 c4 10             	add    esp,0x10
c00138b6:	84 c0                	test   al,al
c00138b8:	74 04                	je     c00138be <ACPI::open(int, int, void*)+0x138>
c00138ba:	b0 01                	mov    al,0x1
c00138bc:	eb 02                	jmp    c00138c0 <ACPI::open(int, int, void*)+0x13a>
c00138be:	b0 00                	mov    al,0x0
c00138c0:	84 c0                	test   al,al
c00138c2:	74 25                	je     c00138e9 <ACPI::open(int, int, void*)+0x163>
c00138c4:	8b 1d 88 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023788
c00138ca:	83 ec 08             	sub    esp,0x8
c00138cd:	6a 01                	push   0x1
c00138cf:	68 9b 14 02 c0       	push   0xc002149b
c00138d4:	e8 a9 3d 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c00138d9:	83 c4 10             	add    esp,0x10
c00138dc:	83 ec 08             	sub    esp,0x8
c00138df:	53                   	push   ebx
c00138e0:	50                   	push   eax
c00138e1:	e8 ef 3e 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c00138e6:	83 c4 10             	add    esp,0x10
c00138e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138ee:	74 1e                	je     c001390e <ACPI::open(int, int, void*)+0x188>
c00138f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138f5:	74 17                	je     c001390e <ACPI::open(int, int, void*)+0x188>
c00138f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00138fd:	83 c0 08             	add    eax,0x8
c0013900:	8b 00                	mov    eax,DWORD PTR [eax]
c0013902:	83 ec 0c             	sub    esp,0xc
c0013905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013909:	ff d0                	call   eax
c001390b:	83 c4 10             	add    esp,0x10
c001390e:	a1 28 40 02 c0       	mov    eax,ds:0xc0024028
c0013913:	83 ec 08             	sub    esp,0x8
c0013916:	68 b8 14 02 c0       	push   0xc00214b8
c001391b:	50                   	push   eax
c001391c:	e8 9f f7 ff ff       	call   c00130c0 <findDataTable(unsigned char*, char*)>
c0013921:	83 c4 10             	add    esp,0x10
c0013924:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013928:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001392d:	74 13                	je     c0013942 <ACPI::open(int, int, void*)+0x1bc>
c001392f:	83 ec 08             	sub    esp,0x8
c0013932:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001393a:	e8 ff fd ff ff       	call   c001373e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001393f:	83 c4 10             	add    esp,0x10
c0013942:	b8 00 00 00 00       	mov    eax,0x0
c0013947:	83 c4 18             	add    esp,0x18
c001394a:	5b                   	pop    ebx
c001394b:	c3                   	ret    

c001394c <ACPI::sleep()>:
c001394c:	83 ec 0c             	sub    esp,0xc
c001394f:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013954:	85 c0                	test   eax,eax
c0013956:	74 07                	je     c001395f <ACPI::sleep()+0x13>
c0013958:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c001395d:	ff d0                	call   eax
c001395f:	90                   	nop
c0013960:	83 c4 0c             	add    esp,0xc
c0013963:	c3                   	ret    

c0013964 <CPU::close(int, int, void*)>:
c0013964:	31 c0                	xor    eax,eax
c0013966:	c3                   	ret    

c0013967 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013967:	55                   	push   ebp
c0013968:	57                   	push   edi
c0013969:	56                   	push   esi
c001396a:	53                   	push   ebx
c001396b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001396f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013973:	89 ce                	mov    esi,ecx
c0013975:	89 d5                	mov    ebp,edx
c0013977:	80 f9 04             	cmp    cl,0x4
c001397a:	75 28                	jne    c00139a4 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001397c:	8d 42 f9             	lea    eax,[edx-0x7]
c001397f:	3c 03                	cmp    al,0x3
c0013981:	0f 86 63 01 00 00    	jbe    c0013aea <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013987:	80 fa 03             	cmp    dl,0x3
c001398a:	0f 84 5a 01 00 00    	je     c0013aea <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013990:	8d 7a f2             	lea    edi,[edx-0xe]
c0013993:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c0013998:	89 fb                	mov    ebx,edi
c001399a:	80 fb 01             	cmp    bl,0x1
c001399d:	77 4e                	ja     c00139ed <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001399f:	e9 52 01 00 00       	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139a4:	80 f9 05             	cmp    cl,0x5
c00139a7:	75 4d                	jne    c00139f6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00139a9:	b8 c0 30 02 c0       	mov    eax,0xc00230c0
c00139ae:	80 fa 03             	cmp    dl,0x3
c00139b1:	0f 86 3f 01 00 00    	jbe    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139b7:	8d 7a fa             	lea    edi,[edx-0x6]
c00139ba:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c00139bf:	89 fb                	mov    ebx,edi
c00139c1:	80 fb 01             	cmp    bl,0x1
c00139c4:	0f 86 2c 01 00 00    	jbe    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139ca:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c00139cf:	80 fa 08             	cmp    dl,0x8
c00139d2:	0f 84 1e 01 00 00    	je     c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139d8:	89 d7                	mov    edi,edx
c00139da:	b8 f0 30 02 c0       	mov    eax,0xc00230f0
c00139df:	83 e7 fb             	and    edi,0xfffffffb
c00139e2:	89 fb                	mov    ebx,edi
c00139e4:	80 fb 09             	cmp    bl,0x9
c00139e7:	0f 84 09 01 00 00    	je     c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139ed:	31 c0                	xor    eax,eax
c00139ef:	89 eb                	mov    ebx,ebp
c00139f1:	0f b6 fb             	movzx  edi,bl
c00139f4:	eb 30                	jmp    c0013a26 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00139f6:	31 c0                	xor    eax,eax
c00139f8:	80 f9 06             	cmp    cl,0x6
c00139fb:	75 f2                	jne    c00139ef <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139fd:	80 fa 0a             	cmp    dl,0xa
c0013a00:	77 ed                	ja     c00139ef <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a02:	bf de 05 00 00       	mov    edi,0x5de
c0013a07:	0f a3 d7             	bt     edi,edx
c0013a0a:	73 e3                	jae    c00139ef <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a0c:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0013a11:	e9 e0 00 00 00       	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a16:	39 c7                	cmp    edi,eax
c0013a18:	0f 84 d3 00 00 00    	je     c0013af1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a1e:	40                   	inc    eax
c0013a1f:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a24:	74 09                	je     c0013a2f <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a26:	89 f3                	mov    ebx,esi
c0013a28:	80 fb 0f             	cmp    bl,0xf
c0013a2b:	75 f1                	jne    c0013a1e <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a2d:	eb e7                	jmp    c0013a16 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a2f:	80 f9 10             	cmp    cl,0x10
c0013a32:	75 14                	jne    c0013a48 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a34:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a37:	83 e0 fb             	and    eax,0xfffffffb
c0013a3a:	3c 02                	cmp    al,0x2
c0013a3c:	76 34                	jbe    c0013a72 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a3e:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013a43:	80 fa 02             	cmp    dl,0x2
c0013a46:	eb 24                	jmp    c0013a6c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a48:	80 f9 11             	cmp    cl,0x11
c0013a4b:	75 13                	jne    c0013a60 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a4d:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013a52:	80 fa 03             	cmp    dl,0x3
c0013a55:	0f 85 9b 00 00 00    	jne    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a5b:	e9 91 00 00 00       	jmp    c0013af1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a60:	80 f9 12             	cmp    cl,0x12
c0013a63:	75 14                	jne    c0013a79 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a65:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013a6a:	fe ca                	dec    dl
c0013a6c:	0f 85 84 00 00 00    	jne    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a72:	b8 20 31 02 c0       	mov    eax,0xc0023120
c0013a77:	eb 7d                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a79:	80 f9 14             	cmp    cl,0x14
c0013a7c:	75 12                	jne    c0013a90 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013a7e:	4a                   	dec    edx
c0013a7f:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013a84:	80 fa 01             	cmp    dl,0x1
c0013a87:	77 6d                	ja     c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a89:	b8 30 31 02 c0       	mov    eax,0xc0023130
c0013a8e:	eb 66                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a90:	80 f9 15             	cmp    cl,0x15
c0013a93:	75 31                	jne    c0013ac6 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013a95:	b8 40 31 02 c0       	mov    eax,0xc0023140
c0013a9a:	80 fa 01             	cmp    dl,0x1
c0013a9d:	74 57                	je     c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a9f:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013aa4:	80 fa 13             	cmp    dl,0x13
c0013aa7:	76 0c                	jbe    c0013ab5 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013aa9:	80 fa 30             	cmp    dl,0x30
c0013aac:	75 48                	jne    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aae:	b8 60 31 02 c0       	mov    eax,0xc0023160
c0013ab3:	eb 41                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab5:	b9 04 00 09 00       	mov    ecx,0x90004
c0013aba:	0f a3 d1             	bt     ecx,edx
c0013abd:	73 37                	jae    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013abf:	b8 50 31 02 c0       	mov    eax,0xc0023150
c0013ac4:	eb 30                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac6:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013acb:	80 f9 16             	cmp    cl,0x16
c0013ace:	75 26                	jne    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad0:	b8 70 31 02 c0       	mov    eax,0xc0023170
c0013ad5:	84 d2                	test   dl,dl
c0013ad7:	74 1d                	je     c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad9:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013ade:	80 fa 30             	cmp    dl,0x30
c0013ae1:	75 13                	jne    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ae3:	b8 80 31 02 c0       	mov    eax,0xc0023180
c0013ae8:	eb 0c                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aea:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c0013aef:	eb 05                	jmp    c0013af6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013af1:	b8 10 31 02 c0       	mov    eax,0xc0023110
c0013af6:	5b                   	pop    ebx
c0013af7:	5e                   	pop    esi
c0013af8:	5f                   	pop    edi
c0013af9:	5d                   	pop    ebp
c0013afa:	c3                   	ret    

c0013afb <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013afb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013aff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b03:	80 f9 04             	cmp    cl,0x4
c0013b06:	75 6b                	jne    c0013b73 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013b08:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c0013b0d:	80 fa 01             	cmp    dl,0x1
c0013b10:	0f 86 92 02 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b16:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013b1b:	80 fa 02             	cmp    dl,0x2
c0013b1e:	0f 84 84 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b24:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013b29:	80 fa 03             	cmp    dl,0x3
c0013b2c:	0f 84 76 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b32:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013b37:	80 fa 04             	cmp    dl,0x4
c0013b3a:	0f 84 68 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b40:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013b45:	80 fa 05             	cmp    dl,0x5
c0013b48:	0f 84 5a 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b4e:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013b53:	80 fa 07             	cmp    dl,0x7
c0013b56:	0f 84 4c 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b5c:	83 ea 08             	sub    edx,0x8
c0013b5f:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013b64:	80 fa 01             	cmp    dl,0x1
c0013b67:	0f 87 3b 02 00 00    	ja     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b6d:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013b72:	c3                   	ret    
c0013b73:	80 f9 05             	cmp    cl,0x5
c0013b76:	75 45                	jne    c0013bbd <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013b78:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013b7b:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013b80:	80 f9 02             	cmp    cl,0x2
c0013b83:	0f 86 1f 02 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b89:	80 fa 04             	cmp    dl,0x4
c0013b8c:	0f 84 f3 01 00 00    	je     c0013d85 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013b92:	80 fa 07             	cmp    dl,0x7
c0013b95:	0f 84 0d 02 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b9b:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013ba0:	80 fa 08             	cmp    dl,0x8
c0013ba3:	0f 84 ff 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ba9:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013bae:	80 fa 09             	cmp    dl,0x9
c0013bb1:	0f 85 f1 01 00 00    	jne    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bb7:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013bbc:	c3                   	ret    
c0013bbd:	80 f9 06             	cmp    cl,0x6
c0013bc0:	0f 85 85 01 00 00    	jne    c0013d4b <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013bc6:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013bcb:	80 fa 01             	cmp    dl,0x1
c0013bce:	0f 84 d4 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bd4:	8d 42 fb             	lea    eax,[edx-0x5]
c0013bd7:	3c 01                	cmp    al,0x1
c0013bd9:	0f 86 ac 01 00 00    	jbe    c0013d8b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bdf:	80 fa 03             	cmp    dl,0x3
c0013be2:	0f 84 a3 01 00 00    	je     c0013d8b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013be8:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013beb:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013bf0:	80 f9 01             	cmp    cl,0x1
c0013bf3:	0f 86 af 01 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bf9:	80 fa 09             	cmp    dl,0x9
c0013bfc:	0f 84 8f 01 00 00    	je     c0013d91 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013c02:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013c05:	80 f9 01             	cmp    cl,0x1
c0013c08:	0f 86 9a 01 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c0e:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013c13:	80 fa 0d             	cmp    dl,0xd
c0013c16:	0f 84 8c 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c1c:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013c21:	80 fa 0e             	cmp    dl,0xe
c0013c24:	0f 84 7e 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c2a:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c2f:	80 fa 0f             	cmp    dl,0xf
c0013c32:	0f 84 70 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c38:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013c3d:	80 fa 15             	cmp    dl,0x15
c0013c40:	0f 84 62 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c46:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c49:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c4e:	80 f9 01             	cmp    cl,0x1
c0013c51:	0f 86 51 01 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c57:	80 fa 1a             	cmp    dl,0x1a
c0013c5a:	0f 84 37 01 00 00    	je     c0013d97 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c60:	80 fa 1c             	cmp    dl,0x1c
c0013c63:	0f 84 34 01 00 00    	je     c0013d9d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c69:	80 fa 1d             	cmp    dl,0x1d
c0013c6c:	0f 84 36 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c72:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013c77:	80 fa 25             	cmp    dl,0x25
c0013c7a:	0f 84 28 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c80:	8d 4a da             	lea    ecx,[edx-0x26]
c0013c83:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013c88:	80 f9 01             	cmp    cl,0x1
c0013c8b:	0f 86 17 01 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c91:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013c96:	80 fa 2a             	cmp    dl,0x2a
c0013c99:	0f 84 09 01 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c9f:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013ca4:	80 fa 2c             	cmp    dl,0x2c
c0013ca7:	0f 84 fb 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cad:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013cb2:	80 fa 2d             	cmp    dl,0x2d
c0013cb5:	0f 84 ed 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cbb:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013cc0:	80 fa 2e             	cmp    dl,0x2e
c0013cc3:	0f 84 df 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cc9:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013cce:	80 fa 2f             	cmp    dl,0x2f
c0013cd1:	0f 84 d1 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd7:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013cda:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013cdf:	80 f9 01             	cmp    cl,0x1
c0013ce2:	0f 86 c0 00 00 00    	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ce8:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013ced:	80 fa 37             	cmp    dl,0x37
c0013cf0:	0f 84 b2 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf6:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013cfb:	80 fa 3a             	cmp    dl,0x3a
c0013cfe:	0f 84 a4 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d04:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013d09:	80 fa 3c             	cmp    dl,0x3c
c0013d0c:	0f 84 96 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d12:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013d17:	80 fa 3d             	cmp    dl,0x3d
c0013d1a:	0f 84 88 00 00 00    	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d20:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013d25:	80 fa 3e             	cmp    dl,0x3e
c0013d28:	74 7e                	je     c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d2a:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d2d:	3c 01                	cmp    al,0x1
c0013d2f:	76 72                	jbe    c0013da3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d31:	80 fa 3f             	cmp    dl,0x3f
c0013d34:	74 6d                	je     c0013da3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d36:	80 fa 4a             	cmp    dl,0x4a
c0013d39:	74 0a                	je     c0013d45 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d3b:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013d40:	80 fa 4d             	cmp    dl,0x4d
c0013d43:	75 63                	jne    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d45:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013d4a:	c3                   	ret    
c0013d4b:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013d50:	80 f9 0b             	cmp    cl,0xb
c0013d53:	75 0a                	jne    c0013d5f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d55:	fe ca                	dec    dl
c0013d57:	75 4f                	jne    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d59:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013d5e:	c3                   	ret    
c0013d5f:	80 f9 0f             	cmp    cl,0xf
c0013d62:	75 44                	jne    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d64:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0013d69:	80 fa 02             	cmp    dl,0x2
c0013d6c:	76 3a                	jbe    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d6e:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d71:	3c 01                	cmp    al,0x1
c0013d73:	76 0a                	jbe    c0013d7f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013d75:	b8 29 17 02 c0       	mov    eax,0xc0021729
c0013d7a:	80 fa 06             	cmp    dl,0x6
c0013d7d:	75 29                	jne    c0013da8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d7f:	b8 90 30 02 c0       	mov    eax,0xc0023090
c0013d84:	c3                   	ret    
c0013d85:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013d8a:	c3                   	ret    
c0013d8b:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013d90:	c3                   	ret    
c0013d91:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013d96:	c3                   	ret    
c0013d97:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013d9c:	c3                   	ret    
c0013d9d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013da2:	c3                   	ret    
c0013da3:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013da8:	c3                   	ret    

c0013da9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013da9:	60                   	pusha  
c0013daa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013dae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013db2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013db6:	9c                   	pushf  
c0013db7:	fa                   	cli    
c0013db8:	0f 09                	wbinvd 
c0013dba:	0f 30                	wrmsr  
c0013dbc:	9d                   	popf   
c0013dbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dc1:	89 02                	mov    DWORD PTR [edx],eax
c0013dc3:	61                   	popa   
c0013dc4:	c3                   	ret    

c0013dc5 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013dc5:	60                   	pusha  
c0013dc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013dca:	9c                   	pushf  
c0013dcb:	fa                   	cli    
c0013dcc:	0f 09                	wbinvd 
c0013dce:	31 c0                	xor    eax,eax
c0013dd0:	31 d2                	xor    edx,edx
c0013dd2:	0f 32                	rdmsr  
c0013dd4:	9d                   	popf   
c0013dd5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013dd9:	89 02                	mov    DWORD PTR [edx],eax
c0013ddb:	61                   	popa   
c0013ddc:	c3                   	ret    

c0013ddd <AMD_K6_writeback(int, int, int)>:
c0013ddd:	56                   	push   esi
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 10             	sub    esp,0x10
c0013de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de6:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013deb:	75 5d                	jne    c0013e4a <AMD_K6_writeback(int, int, int)+0x6d>
c0013ded:	83 f8 08             	cmp    eax,0x8
c0013df0:	75 09                	jne    c0013dfb <AMD_K6_writeback(int, int, int)+0x1e>
c0013df2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013df7:	7e 13                	jle    c0013e0c <AMD_K6_writeback(int, int, int)+0x2f>
c0013df9:	eb 30                	jmp    c0013e2b <AMD_K6_writeback(int, int, int)+0x4e>
c0013dfb:	83 f8 06             	cmp    eax,0x6
c0013dfe:	7c 4a                	jl     c0013e4a <AMD_K6_writeback(int, int, int)+0x6d>
c0013e00:	83 f8 07             	cmp    eax,0x7
c0013e03:	7e 07                	jle    c0013e0c <AMD_K6_writeback(int, int, int)+0x2f>
c0013e05:	83 f8 09             	cmp    eax,0x9
c0013e08:	74 21                	je     c0013e2b <AMD_K6_writeback(int, int, int)+0x4e>
c0013e0a:	eb 3e                	jmp    c0013e4a <AMD_K6_writeback(int, int, int)+0x6d>
c0013e0c:	89 e6                	mov    esi,esp
c0013e0e:	8b 1d c4 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237c4
c0013e14:	56                   	push   esi
c0013e15:	c1 eb 15             	shr    ebx,0x15
c0013e18:	68 82 00 00 c0       	push   0xc0000082
c0013e1d:	83 e3 7e             	and    ebx,0x7e
c0013e20:	e8 a0 ff ff ff       	call   c0013dc5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e25:	56                   	push   esi
c0013e26:	6a 00                	push   0x0
c0013e28:	53                   	push   ebx
c0013e29:	eb 12                	jmp    c0013e3d <AMD_K6_writeback(int, int, int)+0x60>
c0013e2b:	89 e3                	mov    ebx,esp
c0013e2d:	53                   	push   ebx
c0013e2e:	68 82 00 00 c0       	push   0xc0000082
c0013e33:	e8 8d ff ff ff       	call   c0013dc5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e38:	53                   	push   ebx
c0013e39:	6a 00                	push   0x0
c0013e3b:	6a 00                	push   0x0
c0013e3d:	68 82 00 00 c0       	push   0xc0000082
c0013e42:	e8 62 ff ff ff       	call   c0013da9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e47:	83 c4 18             	add    esp,0x18
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	5b                   	pop    ebx
c0013e4e:	5e                   	pop    esi
c0013e4f:	c3                   	ret    

c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e50:	55                   	push   ebp
c0013e51:	57                   	push   edi
c0013e52:	56                   	push   esi
c0013e53:	53                   	push   ebx
c0013e54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e58:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e5c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e60:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e64:	39 05 a0 31 02 c0    	cmp    DWORD PTR ds:0xc00231a0,eax
c0013e6a:	75 23                	jne    c0013e8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e6c:	a1 cc 41 02 c0       	mov    eax,ds:0xc00241cc
c0013e71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e75:	89 06                	mov    DWORD PTR [esi],eax
c0013e77:	a1 c8 41 02 c0       	mov    eax,ds:0xc00241c8
c0013e7c:	89 07                	mov    DWORD PTR [edi],eax
c0013e7e:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c0013e83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e86:	a1 c0 41 02 c0       	mov    eax,ds:0xc00241c0
c0013e8b:	89 02                	mov    DWORD PTR [edx],eax
c0013e8d:	eb 3f                	jmp    c0013ece <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013e8f:	31 c9                	xor    ecx,ecx
c0013e91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e95:	0f a2                	cpuid  
c0013e97:	89 06                	mov    DWORD PTR [esi],eax
c0013e99:	89 1f                	mov    DWORD PTR [edi],ebx
c0013e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e9f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013ea2:	89 10                	mov    DWORD PTR [eax],edx
c0013ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea8:	a3 a0 31 02 c0       	mov    ds:0xc00231a0,eax
c0013ead:	8b 06                	mov    eax,DWORD PTR [esi]
c0013eaf:	a3 cc 41 02 c0       	mov    ds:0xc00241cc,eax
c0013eb4:	8b 07                	mov    eax,DWORD PTR [edi]
c0013eb6:	a3 c8 41 02 c0       	mov    ds:0xc00241c8,eax
c0013ebb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ebe:	a3 c4 41 02 c0       	mov    ds:0xc00241c4,eax
c0013ec3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ec7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ec9:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	5d                   	pop    ebp
c0013ed2:	c3                   	ret    

c0013ed3 <cpuidCheckEDX(unsigned int)>:
c0013ed3:	83 ec 10             	sub    esp,0x10
c0013ed6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eda:	50                   	push   eax
c0013edb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013edf:	50                   	push   eax
c0013ee0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ee4:	50                   	push   eax
c0013ee5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ee9:	50                   	push   eax
c0013eea:	6a 01                	push   0x1
c0013eec:	e8 5f ff ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ef5:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ef9:	0f 95 c0             	setne  al
c0013efc:	83 c4 24             	add    esp,0x24
c0013eff:	c3                   	ret    

c0013f00 <cpuidCheckECX(unsigned int)>:
c0013f00:	83 ec 10             	sub    esp,0x10
c0013f03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f07:	50                   	push   eax
c0013f08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f0c:	50                   	push   eax
c0013f0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f11:	50                   	push   eax
c0013f12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f16:	50                   	push   eax
c0013f17:	6a 01                	push   0x1
c0013f19:	e8 32 ff ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f22:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f26:	0f 95 c0             	setne  al
c0013f29:	83 c4 24             	add    esp,0x24
c0013f2c:	c3                   	ret    

c0013f2d <cpuidCheckExtendedEBX(unsigned int)>:
c0013f2d:	83 ec 10             	sub    esp,0x10
c0013f30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f34:	50                   	push   eax
c0013f35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f39:	50                   	push   eax
c0013f3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f3e:	50                   	push   eax
c0013f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f43:	50                   	push   eax
c0013f44:	6a 07                	push   0x7
c0013f46:	e8 05 ff ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f4f:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f53:	0f 95 c0             	setne  al
c0013f56:	83 c4 24             	add    esp,0x24
c0013f59:	c3                   	ret    

c0013f5a <cpuidCheckExtendedECX(unsigned int)>:
c0013f5a:	83 ec 10             	sub    esp,0x10
c0013f5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f61:	50                   	push   eax
c0013f62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f66:	50                   	push   eax
c0013f67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f6b:	50                   	push   eax
c0013f6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f70:	50                   	push   eax
c0013f71:	6a 07                	push   0x7
c0013f73:	e8 d8 fe ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f7c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f80:	0f 95 c0             	setne  al
c0013f83:	83 c4 24             	add    esp,0x24
c0013f86:	c3                   	ret    

c0013f87 <getCPUNumber()>:
c0013f87:	31 c0                	xor    eax,eax
c0013f89:	c3                   	ret    

c0013f8a <thisCPU()>:
c0013f8a:	e8 f8 ff ff ff       	call   c0013f87 <getCPUNumber()>
c0013f8f:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c0013f95:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013f9c:	c3                   	ret    
c0013f9d:	90                   	nop

c0013f9e <CPU::CPU()>:
c0013f9e:	83 ec 0c             	sub    esp,0xc
c0013fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa5:	83 ec 08             	sub    esp,0x8
c0013fa8:	68 29 17 02 c0       	push   0xc0021729
c0013fad:	50                   	push   eax
c0013fae:	e8 43 c6 ff ff       	call   c00105f6 <Device::Device(char const*)>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	ba 00 18 02 c0       	mov    edx,0xc0021800
c0013fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbf:	89 10                	mov    DWORD PTR [eax],edx
c0013fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd3:	05 78 01 00 00       	add    eax,0x178
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	50                   	push   eax
c0013fdc:	e8 4d 74 ff ff       	call   c000b42e <GDT::GDT()>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe8:	05 7c 09 00 00       	add    eax,0x97c
c0013fed:	83 ec 0c             	sub    esp,0xc
c0013ff0:	50                   	push   eax
c0013ff1:	e8 98 76 ff ff       	call   c000b68e <IDT::IDT()>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffd:	05 7c 11 00 00       	add    eax,0x117c
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	50                   	push   eax
c0014006:	e8 41 96 ff ff       	call   c000d64c <TSS::TSS()>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014012:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014027:	90                   	nop
c0014028:	83 c4 0c             	add    esp,0xc
c001402b:	c3                   	ret    

c001402c <CPU::displayFeatures()>:
c001402c:	c3                   	ret    
c001402d:	90                   	nop

c001402e <CPU::detectFeatures()>:
c001402e:	55                   	push   ebp
c001402f:	57                   	push   edi
c0014030:	56                   	push   esi
c0014031:	53                   	push   ebx
c0014032:	83 ec 50             	sub    esp,0x50
c0014035:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014039:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014043:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001404a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014050:	6a 0d                	push   0xd
c0014052:	6a 00                	push   0x0
c0014054:	57                   	push   edi
c0014055:	e8 ae c5 fe ff       	call   c0000608 <memset>
c001405a:	83 c4 10             	add    esp,0x10
c001405d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014062:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014069:	0f 84 20 09 00 00    	je     c001498f <CPU::detectFeatures()+0x961>
c001406f:	83 ec 0c             	sub    esp,0xc
c0014072:	6a 10                	push   0x10
c0014074:	e8 5a fe ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c0014079:	83 e0 01             	and    eax,0x1
c001407c:	8d 14 00             	lea    edx,[eax+eax*1]
c001407f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014085:	83 e0 fd             	and    eax,0xfffffffd
c0014088:	09 d0                	or     eax,edx
c001408a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014090:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014097:	e8 37 fe ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c001409c:	83 e0 01             	and    eax,0x1
c001409f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00140a6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140ac:	83 e0 fb             	and    eax,0xfffffffb
c00140af:	09 d0                	or     eax,edx
c00140b1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140b7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00140be:	e8 10 fe ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c00140c3:	83 e0 01             	and    eax,0x1
c00140c6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00140cd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140d3:	83 e0 f7             	and    eax,0xfffffff7
c00140d6:	09 d0                	or     eax,edx
c00140d8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140de:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00140e5:	e8 e9 fd ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c00140ea:	83 e0 01             	and    eax,0x1
c00140ed:	c1 e0 04             	shl    eax,0x4
c00140f0:	88 c2                	mov    dl,al
c00140f2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140f8:	83 e0 ef             	and    eax,0xffffffef
c00140fb:	09 d0                	or     eax,edx
c00140fd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014103:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001410a:	e8 c4 fd ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c001410f:	83 e0 01             	and    eax,0x1
c0014112:	c1 e0 05             	shl    eax,0x5
c0014115:	88 c2                	mov    dl,al
c0014117:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001411d:	83 e0 df             	and    eax,0xffffffdf
c0014120:	09 d0                	or     eax,edx
c0014122:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014128:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001412f:	e8 9f fd ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c0014134:	83 e0 01             	and    eax,0x1
c0014137:	8d 14 00             	lea    edx,[eax+eax*1]
c001413a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014140:	83 e0 fd             	and    eax,0xfffffffd
c0014143:	09 d0                	or     eax,edx
c0014145:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001414b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014152:	e8 7c fd ff ff       	call   c0013ed3 <cpuidCheckEDX(unsigned int)>
c0014157:	83 e0 01             	and    eax,0x1
c001415a:	c1 e0 06             	shl    eax,0x6
c001415d:	88 c2                	mov    dl,al
c001415f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014165:	83 e0 bf             	and    eax,0xffffffbf
c0014168:	09 d0                	or     eax,edx
c001416a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014170:	58                   	pop    eax
c0014171:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014175:	56                   	push   esi
c0014176:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001417a:	55                   	push   ebp
c001417b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001417f:	50                   	push   eax
c0014180:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014184:	52                   	push   edx
c0014185:	6a 00                	push   0x0
c0014187:	e8 c4 fc ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001418c:	83 c4 1c             	add    esp,0x1c
c001418f:	6a 04                	push   0x4
c0014191:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014195:	50                   	push   eax
c0014196:	57                   	push   edi
c0014197:	e8 36 c4 fe ff       	call   c00005d2 <memcpy>
c001419c:	83 c4 0c             	add    esp,0xc
c001419f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00141a5:	6a 04                	push   0x4
c00141a7:	56                   	push   esi
c00141a8:	50                   	push   eax
c00141a9:	e8 24 c4 fe ff       	call   c00005d2 <memcpy>
c00141ae:	83 c4 0c             	add    esp,0xc
c00141b1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00141b7:	6a 04                	push   0x4
c00141b9:	55                   	push   ebp
c00141ba:	50                   	push   eax
c00141bb:	e8 12 c4 fe ff       	call   c00005d2 <memcpy>
c00141c0:	58                   	pop    eax
c00141c1:	5a                   	pop    edx
c00141c2:	68 d4 15 02 c0       	push   0xc00215d4
c00141c7:	57                   	push   edi
c00141c8:	e8 2b c5 fe ff       	call   c00006f8 <strcmp>
c00141cd:	83 c4 10             	add    esp,0x10
c00141d0:	85 c0                	test   eax,eax
c00141d2:	75 0f                	jne    c00141e3 <CPU::detectFeatures()+0x1b5>
c00141d4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00141de:	e9 22 02 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c00141e3:	50                   	push   eax
c00141e4:	50                   	push   eax
c00141e5:	68 e1 15 02 c0       	push   0xc00215e1
c00141ea:	57                   	push   edi
c00141eb:	e8 08 c5 fe ff       	call   c00006f8 <strcmp>
c00141f0:	83 c4 10             	add    esp,0x10
c00141f3:	85 c0                	test   eax,eax
c00141f5:	74 dd                	je     c00141d4 <CPU::detectFeatures()+0x1a6>
c00141f7:	51                   	push   ecx
c00141f8:	51                   	push   ecx
c00141f9:	68 ee 15 02 c0       	push   0xc00215ee
c00141fe:	57                   	push   edi
c00141ff:	e8 f4 c4 fe ff       	call   c00006f8 <strcmp>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	85 c0                	test   eax,eax
c0014209:	74 2a                	je     c0014235 <CPU::detectFeatures()+0x207>
c001420b:	52                   	push   edx
c001420c:	52                   	push   edx
c001420d:	68 fb 15 02 c0       	push   0xc00215fb
c0014212:	57                   	push   edi
c0014213:	e8 e0 c4 fe ff       	call   c00006f8 <strcmp>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	85 c0                	test   eax,eax
c001421d:	74 16                	je     c0014235 <CPU::detectFeatures()+0x207>
c001421f:	50                   	push   eax
c0014220:	50                   	push   eax
c0014221:	68 08 16 02 c0       	push   0xc0021608
c0014226:	57                   	push   edi
c0014227:	e8 cc c4 fe ff       	call   c00006f8 <strcmp>
c001422c:	83 c4 10             	add    esp,0x10
c001422f:	85 c0                	test   eax,eax
c0014231:	74 48                	je     c001427b <CPU::detectFeatures()+0x24d>
c0014233:	eb 0f                	jmp    c0014244 <CPU::detectFeatures()+0x216>
c0014235:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001423f:	e9 c1 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c0014244:	50                   	push   eax
c0014245:	50                   	push   eax
c0014246:	68 15 16 02 c0       	push   0xc0021615
c001424b:	57                   	push   edi
c001424c:	e8 a7 c4 fe ff       	call   c00006f8 <strcmp>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	85 c0                	test   eax,eax
c0014256:	74 23                	je     c001427b <CPU::detectFeatures()+0x24d>
c0014258:	50                   	push   eax
c0014259:	50                   	push   eax
c001425a:	68 22 16 02 c0       	push   0xc0021622
c001425f:	57                   	push   edi
c0014260:	e8 93 c4 fe ff       	call   c00006f8 <strcmp>
c0014265:	83 c4 10             	add    esp,0x10
c0014268:	85 c0                	test   eax,eax
c001426a:	75 1e                	jne    c001428a <CPU::detectFeatures()+0x25c>
c001426c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014276:	e9 8a 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c001427b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014285:	e9 7b 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c001428a:	50                   	push   eax
c001428b:	50                   	push   eax
c001428c:	68 2f 16 02 c0       	push   0xc002162f
c0014291:	57                   	push   edi
c0014292:	e8 61 c4 fe ff       	call   c00006f8 <strcmp>
c0014297:	83 c4 10             	add    esp,0x10
c001429a:	85 c0                	test   eax,eax
c001429c:	75 0f                	jne    c00142ad <CPU::detectFeatures()+0x27f>
c001429e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00142a8:	e9 58 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c00142ad:	50                   	push   eax
c00142ae:	50                   	push   eax
c00142af:	68 ee 15 02 c0       	push   0xc00215ee
c00142b4:	57                   	push   edi
c00142b5:	e8 3e c4 fe ff       	call   c00006f8 <strcmp>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	85 c0                	test   eax,eax
c00142bf:	75 0f                	jne    c00142d0 <CPU::detectFeatures()+0x2a2>
c00142c1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00142cb:	e9 35 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c00142d0:	50                   	push   eax
c00142d1:	50                   	push   eax
c00142d2:	68 3c 16 02 c0       	push   0xc002163c
c00142d7:	57                   	push   edi
c00142d8:	e8 1b c4 fe ff       	call   c00006f8 <strcmp>
c00142dd:	83 c4 10             	add    esp,0x10
c00142e0:	85 c0                	test   eax,eax
c00142e2:	75 0f                	jne    c00142f3 <CPU::detectFeatures()+0x2c5>
c00142e4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00142ee:	e9 12 01 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c00142f3:	51                   	push   ecx
c00142f4:	51                   	push   ecx
c00142f5:	68 49 16 02 c0       	push   0xc0021649
c00142fa:	57                   	push   edi
c00142fb:	e8 f8 c3 fe ff       	call   c00006f8 <strcmp>
c0014300:	83 c4 10             	add    esp,0x10
c0014303:	85 c0                	test   eax,eax
c0014305:	75 0f                	jne    c0014316 <CPU::detectFeatures()+0x2e8>
c0014307:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014311:	e9 ef 00 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c0014316:	52                   	push   edx
c0014317:	52                   	push   edx
c0014318:	68 56 16 02 c0       	push   0xc0021656
c001431d:	57                   	push   edi
c001431e:	e8 d5 c3 fe ff       	call   c00006f8 <strcmp>
c0014323:	83 c4 10             	add    esp,0x10
c0014326:	85 c0                	test   eax,eax
c0014328:	75 0f                	jne    c0014339 <CPU::detectFeatures()+0x30b>
c001432a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014334:	e9 cc 00 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c0014339:	50                   	push   eax
c001433a:	50                   	push   eax
c001433b:	68 63 16 02 c0       	push   0xc0021663
c0014340:	57                   	push   edi
c0014341:	e8 b2 c3 fe ff       	call   c00006f8 <strcmp>
c0014346:	83 c4 10             	add    esp,0x10
c0014349:	85 c0                	test   eax,eax
c001434b:	75 0f                	jne    c001435c <CPU::detectFeatures()+0x32e>
c001434d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014357:	e9 a9 00 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c001435c:	50                   	push   eax
c001435d:	50                   	push   eax
c001435e:	68 70 16 02 c0       	push   0xc0021670
c0014363:	57                   	push   edi
c0014364:	e8 8f c3 fe ff       	call   c00006f8 <strcmp>
c0014369:	83 c4 10             	add    esp,0x10
c001436c:	85 c0                	test   eax,eax
c001436e:	75 0f                	jne    c001437f <CPU::detectFeatures()+0x351>
c0014370:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001437a:	e9 86 00 00 00       	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c001437f:	50                   	push   eax
c0014380:	50                   	push   eax
c0014381:	68 7d 16 02 c0       	push   0xc002167d
c0014386:	57                   	push   edi
c0014387:	e8 6c c3 fe ff       	call   c00006f8 <strcmp>
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	85 c0                	test   eax,eax
c0014391:	75 0c                	jne    c001439f <CPU::detectFeatures()+0x371>
c0014393:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001439d:	eb 66                	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c001439f:	50                   	push   eax
c00143a0:	50                   	push   eax
c00143a1:	68 8a 16 02 c0       	push   0xc002168a
c00143a6:	57                   	push   edi
c00143a7:	e8 4c c3 fe ff       	call   c00006f8 <strcmp>
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	85 c0                	test   eax,eax
c00143b1:	75 0c                	jne    c00143bf <CPU::detectFeatures()+0x391>
c00143b3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00143bd:	eb 46                	jmp    c0014405 <CPU::detectFeatures()+0x3d7>
c00143bf:	50                   	push   eax
c00143c0:	50                   	push   eax
c00143c1:	68 97 16 02 c0       	push   0xc0021697
c00143c6:	57                   	push   edi
c00143c7:	e8 2c c3 fe ff       	call   c00006f8 <strcmp>
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	85 c0                	test   eax,eax
c00143d1:	74 e0                	je     c00143b3 <CPU::detectFeatures()+0x385>
c00143d3:	50                   	push   eax
c00143d4:	50                   	push   eax
c00143d5:	68 a4 16 02 c0       	push   0xc00216a4
c00143da:	57                   	push   edi
c00143db:	e8 18 c3 fe ff       	call   c00006f8 <strcmp>
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	85 c0                	test   eax,eax
c00143e5:	74 cc                	je     c00143b3 <CPU::detectFeatures()+0x385>
c00143e7:	51                   	push   ecx
c00143e8:	51                   	push   ecx
c00143e9:	68 b1 16 02 c0       	push   0xc00216b1
c00143ee:	57                   	push   edi
c00143ef:	e8 04 c3 fe ff       	call   c00006f8 <strcmp>
c00143f4:	83 c4 10             	add    esp,0x10
c00143f7:	85 c0                	test   eax,eax
c00143f9:	74 b8                	je     c00143b3 <CPU::detectFeatures()+0x385>
c00143fb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014405:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001440a:	0f 86 be 00 00 00    	jbe    c00144ce <CPU::detectFeatures()+0x4a0>
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	68 80 00 00 00       	push   0x80
c0014418:	e8 10 fb ff ff       	call   c0013f2d <cpuidCheckExtendedEBX(unsigned int)>
c001441d:	83 e0 01             	and    eax,0x1
c0014420:	c1 e0 06             	shl    eax,0x6
c0014423:	88 c2                	mov    dl,al
c0014425:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001442b:	83 e0 bf             	and    eax,0xffffffbf
c001442e:	09 d0                	or     eax,edx
c0014430:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014436:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001443d:	e8 eb fa ff ff       	call   c0013f2d <cpuidCheckExtendedEBX(unsigned int)>
c0014442:	83 e0 01             	and    eax,0x1
c0014445:	c1 e0 04             	shl    eax,0x4
c0014448:	88 c2                	mov    dl,al
c001444a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014450:	83 e0 ef             	and    eax,0xffffffef
c0014453:	09 d0                	or     eax,edx
c0014455:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001445b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014462:	e8 c6 fa ff ff       	call   c0013f2d <cpuidCheckExtendedEBX(unsigned int)>
c0014467:	c1 e0 07             	shl    eax,0x7
c001446a:	88 c2                	mov    dl,al
c001446c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014472:	83 e0 7f             	and    eax,0x7f
c0014475:	09 d0                	or     eax,edx
c0014477:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001447d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014484:	e8 d1 fa ff ff       	call   c0013f5a <cpuidCheckExtendedECX(unsigned int)>
c0014489:	83 e0 01             	and    eax,0x1
c001448c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014493:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014499:	83 e0 f7             	and    eax,0xfffffff7
c001449c:	09 d0                	or     eax,edx
c001449e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00144a4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00144ab:	e8 aa fa ff ff       	call   c0013f5a <cpuidCheckExtendedECX(unsigned int)>
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	83 e0 01             	and    eax,0x1
c00144b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00144bd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144c3:	83 e0 fb             	and    eax,0xfffffffb
c00144c6:	09 d0                	or     eax,edx
c00144c8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	56                   	push   esi
c00144d2:	55                   	push   ebp
c00144d3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00144d7:	57                   	push   edi
c00144d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144dc:	50                   	push   eax
c00144dd:	6a 01                	push   0x1
c00144df:	e8 6c f9 ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00144e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00144e8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00144ee:	88 ca                	mov    dl,cl
c00144f0:	83 e0 f0             	and    eax,0xfffffff0
c00144f3:	83 e2 0f             	and    edx,0xf
c00144f6:	09 d0                	or     eax,edx
c00144f8:	88 ca                	mov    dl,cl
c00144fa:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014500:	c0 ea 04             	shr    dl,0x4
c0014503:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014507:	0f b6 c2             	movzx  eax,dl
c001450a:	83 c4 20             	add    esp,0x20
c001450d:	c1 e0 06             	shl    eax,0x6
c0014510:	89 c5                	mov    ebp,eax
c0014512:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014518:	66 25 3f c0          	and    ax,0xc03f
c001451c:	09 e8                	or     eax,ebp
c001451e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014525:	89 c8                	mov    eax,ecx
c0014527:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001452d:	c1 e8 08             	shr    eax,0x8
c0014530:	83 e2 3f             	and    edx,0x3f
c0014533:	83 e0 0f             	and    eax,0xf
c0014536:	89 c5                	mov    ebp,eax
c0014538:	c1 e5 06             	shl    ebp,0x6
c001453b:	09 d5                	or     ebp,edx
c001453d:	89 ea                	mov    edx,ebp
c001453f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014545:	88 c2                	mov    dl,al
c0014547:	c0 ea 02             	shr    dl,0x2
c001454a:	89 d5                	mov    ebp,edx
c001454c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014552:	83 e2 c0             	and    edx,0xffffffc0
c0014555:	09 d5                	or     ebp,edx
c0014557:	89 ea                	mov    edx,ebp
c0014559:	89 cd                	mov    ebp,ecx
c001455b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014561:	c1 ed 0c             	shr    ebp,0xc
c0014564:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001456a:	83 e5 03             	and    ebp,0x3
c001456d:	83 e2 cf             	and    edx,0xffffffcf
c0014570:	c1 e5 04             	shl    ebp,0x4
c0014573:	09 d5                	or     ebp,edx
c0014575:	3c 06                	cmp    al,0x6
c0014577:	89 ea                	mov    edx,ebp
c0014579:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001457f:	74 04                	je     c0014585 <CPU::detectFeatures()+0x557>
c0014581:	3c 0f                	cmp    al,0xf
c0014583:	75 5c                	jne    c00145e1 <CPU::detectFeatures()+0x5b3>
c0014585:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014589:	89 cd                	mov    ebp,ecx
c001458b:	c1 ed 10             	shr    ebp,0x10
c001458e:	c1 e5 04             	shl    ebp,0x4
c0014591:	09 ea                	or     edx,ebp
c0014593:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014599:	0f b6 d2             	movzx  edx,dl
c001459c:	66 81 e5 3f c0       	and    bp,0xc03f
c00145a1:	c1 e2 06             	shl    edx,0x6
c00145a4:	09 ea                	or     edx,ebp
c00145a6:	3c 0f                	cmp    al,0xf
c00145a8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00145af:	75 30                	jne    c00145e1 <CPU::detectFeatures()+0x5b3>
c00145b1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00145b7:	c1 e9 14             	shr    ecx,0x14
c00145ba:	83 e0 3f             	and    eax,0x3f
c00145bd:	83 c1 0f             	add    ecx,0xf
c00145c0:	88 ca                	mov    dl,cl
c00145c2:	c0 e9 02             	shr    cl,0x2
c00145c5:	c1 e2 06             	shl    edx,0x6
c00145c8:	09 d0                	or     eax,edx
c00145ca:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00145d0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00145d6:	83 e0 c0             	and    eax,0xffffffc0
c00145d9:	09 c1                	or     ecx,eax
c00145db:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00145e1:	83 ec 0c             	sub    esp,0xc
c00145e4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00145eb:	56                   	push   esi
c00145ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145f0:	50                   	push   eax
c00145f1:	57                   	push   edi
c00145f2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00145f6:	55                   	push   ebp
c00145f7:	68 00 00 00 80       	push   0x80000000
c00145fc:	e8 4f f8 ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014601:	83 c4 20             	add    esp,0x20
c0014604:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001460c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014610:	76 1e                	jbe    c0014630 <CPU::detectFeatures()+0x602>
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	56                   	push   esi
c0014616:	50                   	push   eax
c0014617:	57                   	push   edi
c0014618:	55                   	push   ebp
c0014619:	68 01 00 00 80       	push   0x80000001
c001461e:	e8 2d f8 ff ff       	call   c0013e50 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014623:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001462d:	83 c4 20             	add    esp,0x20
c0014630:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014636:	83 f8 01             	cmp    eax,0x1
c0014639:	75 6f                	jne    c00146aa <CPU::detectFeatures()+0x67c>
c001463b:	51                   	push   ecx
c001463c:	51                   	push   ecx
c001463d:	68 bd 16 02 c0       	push   0xc00216bd
c0014642:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014646:	56                   	push   esi
c0014647:	e8 5b c0 fe ff       	call   c00006a7 <strcpy>
c001464c:	5f                   	pop    edi
c001464d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014653:	5d                   	pop    ebp
c0014654:	66 c1 e8 06          	shr    ax,0x6
c0014658:	0f b6 c0             	movzx  eax,al
c001465b:	50                   	push   eax
c001465c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014662:	c1 e8 0e             	shr    eax,0xe
c0014665:	0f b6 c0             	movzx  eax,al
c0014668:	50                   	push   eax
c0014669:	e8 8d f4 ff ff       	call   c0013afb <lookupIntelCPUName(unsigned char, unsigned char)>
c001466e:	5a                   	pop    edx
c001466f:	59                   	pop    ecx
c0014670:	50                   	push   eax
c0014671:	56                   	push   esi
c0014672:	e8 e7 c0 fe ff       	call   c000075e <strcat>
c0014677:	5f                   	pop    edi
c0014678:	5d                   	pop    ebp
c0014679:	56                   	push   esi
c001467a:	53                   	push   ebx
c001467b:	e8 68 bf ff ff       	call   c00105e8 <Device::setName(char const*)>
c0014680:	58                   	pop    eax
c0014681:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014687:	5a                   	pop    edx
c0014688:	68 c4 16 02 c0       	push   0xc00216c4
c001468d:	50                   	push   eax
c001468e:	e8 65 c0 fe ff       	call   c00006f8 <strcmp>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	85 c0                	test   eax,eax
c0014698:	0f 85 73 03 00 00    	jne    c0014a11 <CPU::detectFeatures()+0x9e3>
c001469e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00146a5:	e9 67 03 00 00       	jmp    c0014a11 <CPU::detectFeatures()+0x9e3>
c00146aa:	83 f8 02             	cmp    eax,0x2
c00146ad:	0f 85 b5 00 00 00    	jne    c0014768 <CPU::detectFeatures()+0x73a>
c00146b3:	57                   	push   edi
c00146b4:	57                   	push   edi
c00146b5:	68 d6 16 02 c0       	push   0xc00216d6
c00146ba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00146be:	56                   	push   esi
c00146bf:	e8 e3 bf fe ff       	call   c00006a7 <strcpy>
c00146c4:	5d                   	pop    ebp
c00146c5:	58                   	pop    eax
c00146c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146cc:	66 c1 e8 06          	shr    ax,0x6
c00146d0:	0f b6 c0             	movzx  eax,al
c00146d3:	50                   	push   eax
c00146d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146da:	c1 e8 0e             	shr    eax,0xe
c00146dd:	0f b6 c0             	movzx  eax,al
c00146e0:	50                   	push   eax
c00146e1:	e8 81 f2 ff ff       	call   c0013967 <lookupAMDCPUName(unsigned char, unsigned char)>
c00146e6:	5a                   	pop    edx
c00146e7:	59                   	pop    ecx
c00146e8:	50                   	push   eax
c00146e9:	56                   	push   esi
c00146ea:	e8 6f c0 fe ff       	call   c000075e <strcat>
c00146ef:	5f                   	pop    edi
c00146f0:	5d                   	pop    ebp
c00146f1:	56                   	push   esi
c00146f2:	53                   	push   ebx
c00146f3:	e8 f0 be ff ff       	call   c00105e8 <Device::setName(char const*)>
c00146f8:	58                   	pop    eax
c00146f9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146ff:	5a                   	pop    edx
c0014700:	68 db 16 02 c0       	push   0xc00216db
c0014705:	50                   	push   eax
c0014706:	e8 ed bf fe ff       	call   c00006f8 <strcmp>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	85 c0                	test   eax,eax
c0014710:	75 20                	jne    c0014732 <CPU::detectFeatures()+0x704>
c0014712:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c0014718:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001471e:	a8 01                	test   al,0x1
c0014720:	74 10                	je     c0014732 <CPU::detectFeatures()+0x704>
c0014722:	83 e0 fe             	and    eax,0xfffffffe
c0014725:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001472b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014732:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014738:	c1 e8 0e             	shr    eax,0xe
c001473b:	3c 05                	cmp    al,0x5
c001473d:	0f 85 ce 02 00 00    	jne    c0014a11 <CPU::detectFeatures()+0x9e3>
c0014743:	56                   	push   esi
c0014744:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001474a:	83 e0 0f             	and    eax,0xf
c001474d:	50                   	push   eax
c001474e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014754:	66 c1 e8 06          	shr    ax,0x6
c0014758:	0f b6 c0             	movzx  eax,al
c001475b:	50                   	push   eax
c001475c:	6a 05                	push   0x5
c001475e:	e8 7a f6 ff ff       	call   c0013ddd <AMD_K6_writeback(int, int, int)>
c0014763:	e9 1f 02 00 00       	jmp    c0014987 <CPU::detectFeatures()+0x959>
c0014768:	8d 50 fd             	lea    edx,[eax-0x3]
c001476b:	83 fa 01             	cmp    edx,0x1
c001476e:	76 09                	jbe    c0014779 <CPU::detectFeatures()+0x74b>
c0014770:	83 f8 06             	cmp    eax,0x6
c0014773:	0f 85 91 01 00 00    	jne    c001490a <CPU::detectFeatures()+0x8dc>
c0014779:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001477f:	c1 ea 0e             	shr    edx,0xe
c0014782:	80 fa 05             	cmp    dl,0x5
c0014785:	75 7b                	jne    c0014802 <CPU::detectFeatures()+0x7d4>
c0014787:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001478d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014792:	66 81 fa 00 01       	cmp    dx,0x100
c0014797:	75 0c                	jne    c00147a5 <CPU::detectFeatures()+0x777>
c0014799:	51                   	push   ecx
c001479a:	51                   	push   ecx
c001479b:	68 e2 16 02 c0       	push   0xc00216e2
c00147a0:	e9 dc 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c00147a5:	66 81 fa 00 02       	cmp    dx,0x200
c00147aa:	75 0c                	jne    c00147b8 <CPU::detectFeatures()+0x78a>
c00147ac:	52                   	push   edx
c00147ad:	52                   	push   edx
c00147ae:	68 f5 16 02 c0       	push   0xc00216f5
c00147b3:	e9 c9 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c00147b8:	66 81 fa 40 02       	cmp    dx,0x240
c00147bd:	75 0c                	jne    c00147cb <CPU::detectFeatures()+0x79d>
c00147bf:	50                   	push   eax
c00147c0:	50                   	push   eax
c00147c1:	68 07 17 02 c0       	push   0xc0021707
c00147c6:	e9 b6 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c00147cb:	83 f8 06             	cmp    eax,0x6
c00147ce:	75 0c                	jne    c00147dc <CPU::detectFeatures()+0x7ae>
c00147d0:	50                   	push   eax
c00147d1:	50                   	push   eax
c00147d2:	68 19 17 02 c0       	push   0xc0021719
c00147d7:	e9 a5 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c00147dc:	83 f8 04             	cmp    eax,0x4
c00147df:	75 0c                	jne    c00147ed <CPU::detectFeatures()+0x7bf>
c00147e1:	50                   	push   eax
c00147e2:	50                   	push   eax
c00147e3:	68 25 17 02 c0       	push   0xc0021725
c00147e8:	e9 94 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c00147ed:	83 f8 03             	cmp    eax,0x3
c00147f0:	0f 85 1b 02 00 00    	jne    c0014a11 <CPU::detectFeatures()+0x9e3>
c00147f6:	50                   	push   eax
c00147f7:	50                   	push   eax
c00147f8:	68 2d 17 02 c0       	push   0xc002172d
c00147fd:	e9 7f 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014802:	80 fa 06             	cmp    dl,0x6
c0014805:	0f 85 db 00 00 00    	jne    c00148e6 <CPU::detectFeatures()+0x8b8>
c001480b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014811:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014816:	66 81 fa 80 01       	cmp    dx,0x180
c001481b:	75 0c                	jne    c0014829 <CPU::detectFeatures()+0x7fb>
c001481d:	50                   	push   eax
c001481e:	50                   	push   eax
c001481f:	68 38 17 02 c0       	push   0xc0021738
c0014824:	e9 58 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014829:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001482f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014834:	75 0c                	jne    c0014842 <CPU::detectFeatures()+0x814>
c0014836:	50                   	push   eax
c0014837:	50                   	push   eax
c0014838:	68 48 17 02 c0       	push   0xc0021748
c001483d:	e9 3f 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014842:	66 81 fa 40 02       	cmp    dx,0x240
c0014847:	75 0c                	jne    c0014855 <CPU::detectFeatures()+0x827>
c0014849:	55                   	push   ebp
c001484a:	55                   	push   ebp
c001484b:	68 4f 17 02 c0       	push   0xc002174f
c0014850:	e9 2c 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014855:	66 81 fa 80 02       	cmp    dx,0x280
c001485a:	75 0c                	jne    c0014868 <CPU::detectFeatures()+0x83a>
c001485c:	57                   	push   edi
c001485d:	57                   	push   edi
c001485e:	68 58 17 02 c0       	push   0xc0021758
c0014863:	e9 19 01 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014868:	66 81 fa 40 03       	cmp    dx,0x340
c001486d:	74 ed                	je     c001485c <CPU::detectFeatures()+0x82e>
c001486f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014874:	75 0c                	jne    c0014882 <CPU::detectFeatures()+0x854>
c0014876:	56                   	push   esi
c0014877:	56                   	push   esi
c0014878:	68 5f 17 02 c0       	push   0xc002175f
c001487d:	e9 ff 00 00 00       	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014882:	83 f8 06             	cmp    eax,0x6
c0014885:	0f 84 45 ff ff ff    	je     c00147d0 <CPU::detectFeatures()+0x7a2>
c001488b:	83 f8 04             	cmp    eax,0x4
c001488e:	0f 84 4d ff ff ff    	je     c00147e1 <CPU::detectFeatures()+0x7b3>
c0014894:	83 f8 03             	cmp    eax,0x3
c0014897:	0f 85 74 01 00 00    	jne    c0014a11 <CPU::detectFeatures()+0x9e3>
c001489d:	51                   	push   ecx
c001489e:	51                   	push   ecx
c001489f:	68 68 17 02 c0       	push   0xc0021768
c00148a4:	53                   	push   ebx
c00148a5:	e8 3e bd ff ff       	call   c00105e8 <Device::setName(char const*)>
c00148aa:	b1 c1                	mov    cl,0xc1
c00148ac:	88 c8                	mov    al,cl
c00148ae:	e6 22                	out    0x22,al
c00148b0:	e4 23                	in     al,0x23
c00148b2:	88 c2                	mov    dl,al
c00148b4:	88 c8                	mov    al,cl
c00148b6:	e6 22                	out    0x22,al
c00148b8:	88 d0                	mov    al,dl
c00148ba:	83 c8 10             	or     eax,0x10
c00148bd:	e6 23                	out    0x23,al
c00148bf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148c6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00148c9:	89 d0                	mov    eax,edx
c00148cb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00148d1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00148d5:	40                   	inc    eax
c00148d6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00148dc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00148e1:	e9 a1 00 00 00       	jmp    c0014987 <CPU::detectFeatures()+0x959>
c00148e6:	83 f8 06             	cmp    eax,0x6
c00148e9:	0f 84 e1 fe ff ff    	je     c00147d0 <CPU::detectFeatures()+0x7a2>
c00148ef:	83 f8 04             	cmp    eax,0x4
c00148f2:	0f 84 e9 fe ff ff    	je     c00147e1 <CPU::detectFeatures()+0x7b3>
c00148f8:	83 f8 03             	cmp    eax,0x3
c00148fb:	0f 85 10 01 00 00    	jne    c0014a11 <CPU::detectFeatures()+0x9e3>
c0014901:	52                   	push   edx
c0014902:	52                   	push   edx
c0014903:	68 73 17 02 c0       	push   0xc0021773
c0014908:	eb 77                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c001490a:	83 f8 07             	cmp    eax,0x7
c001490d:	75 09                	jne    c0014918 <CPU::detectFeatures()+0x8ea>
c001490f:	50                   	push   eax
c0014910:	50                   	push   eax
c0014911:	68 7d 17 02 c0       	push   0xc002177d
c0014916:	eb 69                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014918:	83 f8 0a             	cmp    eax,0xa
c001491b:	75 09                	jne    c0014926 <CPU::detectFeatures()+0x8f8>
c001491d:	50                   	push   eax
c001491e:	50                   	push   eax
c001491f:	68 88 17 02 c0       	push   0xc0021788
c0014924:	eb 5b                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014926:	83 f8 0b             	cmp    eax,0xb
c0014929:	75 09                	jne    c0014934 <CPU::detectFeatures()+0x906>
c001492b:	50                   	push   eax
c001492c:	50                   	push   eax
c001492d:	68 90 17 02 c0       	push   0xc0021790
c0014932:	eb 4d                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014934:	83 f8 08             	cmp    eax,0x8
c0014937:	75 09                	jne    c0014942 <CPU::detectFeatures()+0x914>
c0014939:	50                   	push   eax
c001493a:	50                   	push   eax
c001493b:	68 99 17 02 c0       	push   0xc0021799
c0014940:	eb 3f                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014942:	83 f8 09             	cmp    eax,0x9
c0014945:	75 09                	jne    c0014950 <CPU::detectFeatures()+0x922>
c0014947:	50                   	push   eax
c0014948:	50                   	push   eax
c0014949:	68 a1 17 02 c0       	push   0xc00217a1
c001494e:	eb 31                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c0014950:	83 f8 05             	cmp    eax,0x5
c0014953:	75 09                	jne    c001495e <CPU::detectFeatures()+0x930>
c0014955:	50                   	push   eax
c0014956:	50                   	push   eax
c0014957:	68 a9 17 02 c0       	push   0xc00217a9
c001495c:	eb 23                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c001495e:	83 f8 0c             	cmp    eax,0xc
c0014961:	75 09                	jne    c001496c <CPU::detectFeatures()+0x93e>
c0014963:	55                   	push   ebp
c0014964:	55                   	push   ebp
c0014965:	68 b7 17 02 c0       	push   0xc00217b7
c001496a:	eb 15                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c001496c:	83 f8 0d             	cmp    eax,0xd
c001496f:	75 09                	jne    c001497a <CPU::detectFeatures()+0x94c>
c0014971:	57                   	push   edi
c0014972:	57                   	push   edi
c0014973:	68 c2 17 02 c0       	push   0xc00217c2
c0014978:	eb 07                	jmp    c0014981 <CPU::detectFeatures()+0x953>
c001497a:	56                   	push   esi
c001497b:	56                   	push   esi
c001497c:	68 d6 17 02 c0       	push   0xc00217d6
c0014981:	53                   	push   ebx
c0014982:	e8 61 bc ff ff       	call   c00105e8 <Device::setName(char const*)>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	e9 82 00 00 00       	jmp    c0014a11 <CPU::detectFeatures()+0x9e3>
c001498f:	51                   	push   ecx
c0014990:	51                   	push   ecx
c0014991:	68 22 16 02 c0       	push   0xc0021622
c0014996:	57                   	push   edi
c0014997:	e8 0b bd fe ff       	call   c00006a7 <strcpy>
c001499c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00149a6:	e8 d4 b7 fe ff       	call   c000017f <is486>
c00149ab:	83 c4 10             	add    esp,0x10
c00149ae:	85 c0                	test   eax,eax
c00149b0:	74 2d                	je     c00149df <CPU::detectFeatures()+0x9b1>
c00149b2:	52                   	push   edx
c00149b3:	52                   	push   edx
c00149b4:	68 e2 17 02 c0       	push   0xc00217e2
c00149b9:	53                   	push   ebx
c00149ba:	e8 29 bc ff ff       	call   c00105e8 <Device::setName(char const*)>
c00149bf:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149c6:	e8 0d a4 00 00       	call   c001edd8 <CPU::readCR0()>
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	83 e0 14             	and    eax,0x14
c00149d1:	83 f8 04             	cmp    eax,0x4
c00149d4:	75 1f                	jne    c00149f5 <CPU::detectFeatures()+0x9c7>
c00149d6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00149dd:	eb 32                	jmp    c0014a11 <CPU::detectFeatures()+0x9e3>
c00149df:	50                   	push   eax
c00149e0:	50                   	push   eax
c00149e1:	68 ed 17 02 c0       	push   0xc00217ed
c00149e6:	53                   	push   ebx
c00149e7:	e8 fc bb ff ff       	call   c00105e8 <Device::setName(char const*)>
c00149ec:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00149f3:	eb d1                	jmp    c00149c6 <CPU::detectFeatures()+0x998>
c00149f5:	e8 60 b7 fe ff       	call   c000015a <hasLegacyFPU>
c00149fa:	83 e0 01             	and    eax,0x1
c00149fd:	8d 14 00             	lea    edx,[eax+eax*1]
c0014a00:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014a06:	83 e0 fd             	and    eax,0xfffffffd
c0014a09:	09 d0                	or     eax,edx
c0014a0b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014a11:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014a18:	83 c4 4c             	add    esp,0x4c
c0014a1b:	5b                   	pop    ebx
c0014a1c:	5e                   	pop    esi
c0014a1d:	5f                   	pop    edi
c0014a1e:	5d                   	pop    ebp
c0014a1f:	c3                   	ret    

c0014a20 <CPU::setupSMEP()>:
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	e8 7a a6 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014a28:	0d 00 00 10 00       	or     eax,0x100000
c0014a2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a31:	83 c4 0c             	add    esp,0xc
c0014a34:	e9 84 a6 00 00       	jmp    c001f0bd <CPU::writeCR4(unsigned long)>
c0014a39:	90                   	nop

c0014a3a <CPU::setupUMIP()>:
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	e8 60 a6 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014a42:	80 cc 08             	or     ah,0x8
c0014a45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a49:	83 c4 0c             	add    esp,0xc
c0014a4c:	e9 6c a6 00 00       	jmp    c001f0bd <CPU::writeCR4(unsigned long)>
c0014a51:	90                   	nop

c0014a52 <CPU::setupTSC()>:
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	e8 48 a6 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014a5a:	83 c8 04             	or     eax,0x4
c0014a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a61:	83 c4 0c             	add    esp,0xc
c0014a64:	e9 54 a6 00 00       	jmp    c001f0bd <CPU::writeCR4(unsigned long)>
c0014a69:	90                   	nop

c0014a6a <CPU::setupLargePages()>:
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	e8 30 a6 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014a72:	83 c8 10             	or     eax,0x10
c0014a75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a79:	83 c4 0c             	add    esp,0xc
c0014a7c:	e9 3c a6 00 00       	jmp    c001f0bd <CPU::writeCR4(unsigned long)>
c0014a81:	90                   	nop

c0014a82 <CPU::setupPAT()>:
c0014a82:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014a87:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a8e:	74 2c                	je     c0014abc <CPU::setupPAT()+0x3a>
c0014a90:	53                   	push   ebx
c0014a91:	83 ec 10             	sub    esp,0x10
c0014a94:	68 77 02 00 00       	push   0x277
c0014a99:	50                   	push   eax
c0014a9a:	e8 27 67 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014a9f:	83 e2 f8             	and    edx,0xfffffff8
c0014aa2:	83 ca 01             	or     edx,0x1
c0014aa5:	52                   	push   edx
c0014aa6:	50                   	push   eax
c0014aa7:	68 77 02 00 00       	push   0x277
c0014aac:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c0014ab2:	e8 3b 67 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014ab7:	83 c4 28             	add    esp,0x28
c0014aba:	5b                   	pop    ebx
c0014abb:	c3                   	ret    
c0014abc:	c3                   	ret    
c0014abd:	90                   	nop

c0014abe <CPU::setupMTRR()>:
c0014abe:	c3                   	ret    
c0014abf:	90                   	nop

c0014ac0 <CPU::setupGlobalPages()>:
c0014ac0:	83 ec 0c             	sub    esp,0xc
c0014ac3:	e8 da a5 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014ac8:	0c 80                	or     al,0x80
c0014aca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ace:	83 c4 0c             	add    esp,0xc
c0014ad1:	e9 e7 a5 00 00       	jmp    c001f0bd <CPU::writeCR4(unsigned long)>

c0014ad6 <CPU::allowUsermodeDataAccess()>:
c0014ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ada:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ae1:	74 03                	je     c0014ae6 <CPU::allowUsermodeDataAccess()+0x10>
c0014ae3:	0f 01 cb             	stac   
c0014ae6:	c3                   	ret    
c0014ae7:	90                   	nop

c0014ae8 <CPU::prohibitUsermodeDataAccess()>:
c0014ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aec:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014af3:	74 03                	je     c0014af8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014af5:	0f 01 ca             	clac   
c0014af8:	c3                   	ret    
c0014af9:	90                   	nop

c0014afa <CPU::setupSMAP()>:
c0014afa:	53                   	push   ebx
c0014afb:	83 ec 08             	sub    esp,0x8
c0014afe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b02:	e8 9b a5 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014b07:	83 ec 0c             	sub    esp,0xc
c0014b0a:	0d 00 00 20 00       	or     eax,0x200000
c0014b0f:	50                   	push   eax
c0014b10:	e8 a8 a5 00 00       	call   c001f0bd <CPU::writeCR4(unsigned long)>
c0014b15:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b19:	83 c4 18             	add    esp,0x18
c0014b1c:	5b                   	pop    ebx
c0014b1d:	eb c9                	jmp    c0014ae8 <CPU::prohibitUsermodeDataAccess()>
c0014b1f:	90                   	nop

c0014b20 <CPU::setupFeatures()>:
c0014b20:	53                   	push   ebx
c0014b21:	83 ec 08             	sub    esp,0x8
c0014b24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b28:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b2f:	74 0c                	je     c0014b3d <CPU::setupFeatures()+0x1d>
c0014b31:	83 ec 0c             	sub    esp,0xc
c0014b34:	53                   	push   ebx
c0014b35:	e8 e6 fe ff ff       	call   c0014a20 <CPU::setupSMEP()>
c0014b3a:	83 c4 10             	add    esp,0x10
c0014b3d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b44:	74 0c                	je     c0014b52 <CPU::setupFeatures()+0x32>
c0014b46:	83 ec 0c             	sub    esp,0xc
c0014b49:	53                   	push   ebx
c0014b4a:	e8 ab ff ff ff       	call   c0014afa <CPU::setupSMAP()>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b59:	74 0c                	je     c0014b67 <CPU::setupFeatures()+0x47>
c0014b5b:	83 ec 0c             	sub    esp,0xc
c0014b5e:	53                   	push   ebx
c0014b5f:	e8 d6 fe ff ff       	call   c0014a3a <CPU::setupUMIP()>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b6e:	74 0c                	je     c0014b7c <CPU::setupFeatures()+0x5c>
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	53                   	push   ebx
c0014b74:	e8 d9 fe ff ff       	call   c0014a52 <CPU::setupTSC()>
c0014b79:	83 c4 10             	add    esp,0x10
c0014b7c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014b83:	74 0c                	je     c0014b91 <CPU::setupFeatures()+0x71>
c0014b85:	83 ec 0c             	sub    esp,0xc
c0014b88:	53                   	push   ebx
c0014b89:	e8 dc fe ff ff       	call   c0014a6a <CPU::setupLargePages()>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014b98:	74 0c                	je     c0014ba6 <CPU::setupFeatures()+0x86>
c0014b9a:	83 ec 0c             	sub    esp,0xc
c0014b9d:	53                   	push   ebx
c0014b9e:	e8 1d ff ff ff       	call   c0014ac0 <CPU::setupGlobalPages()>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014bad:	74 0d                	je     c0014bbc <CPU::setupFeatures()+0x9c>
c0014baf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014bb3:	83 c4 08             	add    esp,0x8
c0014bb6:	5b                   	pop    ebx
c0014bb7:	e9 c6 fe ff ff       	jmp    c0014a82 <CPU::setupPAT()>
c0014bbc:	83 c4 08             	add    esp,0x8
c0014bbf:	5b                   	pop    ebx
c0014bc0:	c3                   	ret    
c0014bc1:	90                   	nop

c0014bc2 <CPU::open(int, int, void*)>:
c0014bc2:	57                   	push   edi
c0014bc3:	56                   	push   esi
c0014bc4:	53                   	push   ebx
c0014bc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bcd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014bd3:	83 ec 0c             	sub    esp,0xc
c0014bd6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014bdc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014be2:	50                   	push   eax
c0014be3:	e8 c2 68 ff ff       	call   c000b4aa <GDT::setup()>
c0014be8:	83 c4 0c             	add    esp,0xc
c0014beb:	6a 00                	push   0x0
c0014bed:	68 ef be ad de       	push   0xdeadbeef
c0014bf2:	57                   	push   edi
c0014bf3:	e8 94 8a ff ff       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c0014bf8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bfb:	e8 6c 8a ff ff       	call   c000d66c <TSS::flush()>
c0014c00:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c09:	e8 f6 6a ff ff       	call   c000b704 <IDT::setup()>
c0014c0e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014c15:	e8 9a a4 00 00       	call   c001f0b4 <CPU::writeDR7(unsigned long)>
c0014c1a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c24:	e8 9f 75 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014c29:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c2f:	89 30                	mov    DWORD PTR [eax],esi
c0014c31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c37:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c3a:	58                   	pop    eax
c0014c3b:	5a                   	pop    edx
c0014c3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c46:	e8 37 9a ff ff       	call   c000e682 <VAS::setCPUSpecific(unsigned long)>
c0014c4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c4e:	e8 db f3 ff ff       	call   c001402e <CPU::detectFeatures()>
c0014c53:	e8 9a c7 ff ff       	call   c00113f2 <setupInterruptController()>
c0014c58:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c5e:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0014c63:	83 e0 10             	and    eax,0x10
c0014c66:	83 f8 01             	cmp    eax,0x1
c0014c69:	19 c0                	sbb    eax,eax
c0014c6b:	83 e0 46             	and    eax,0x46
c0014c6e:	83 c0 1e             	add    eax,0x1e
c0014c71:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c74:	e8 61 d9 ff ff       	call   c00125da <setupTimer(int)>
c0014c79:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014c7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c82:	e8 99 fe ff ff       	call   c0014b20 <CPU::setupFeatures()>
c0014c87:	83 c4 10             	add    esp,0x10
c0014c8a:	31 c0                	xor    eax,eax
c0014c8c:	5b                   	pop    ebx
c0014c8d:	5e                   	pop    esi
c0014c8e:	5f                   	pop    edi
c0014c8f:	c3                   	ret    

c0014c90 <Krnl::panic(char const*)>:
c0014c90:	55                   	push   ebp
c0014c91:	89 e5                	mov    ebp,esp
c0014c93:	53                   	push   ebx
c0014c94:	83 ec 0c             	sub    esp,0xc
c0014c97:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014c9a:	fa                   	cli    
c0014c9b:	c6 05 d0 41 02 c0 01 	mov    BYTE PTR ds:0xc00241d0,0x1
c0014ca2:	53                   	push   ebx
c0014ca3:	c6 05 c0 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022bc0,0x0
c0014caa:	68 24 18 02 c0       	push   0xc0021824
c0014caf:	e8 47 a3 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0014cb4:	58                   	pop    eax
c0014cb5:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014cba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc0:	e8 08 82 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0014cc5:	83 c4 0c             	add    esp,0xc
c0014cc8:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014ccd:	6a 01                	push   0x1
c0014ccf:	6a 0f                	push   0xf
c0014cd1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd7:	e8 30 7c ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014cdc:	5a                   	pop    edx
c0014cdd:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce8:	e8 81 84 ff ff       	call   c000d16e <VgaText::clearScreen()>
c0014ced:	59                   	pop    ecx
c0014cee:	58                   	pop    eax
c0014cef:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014cf4:	68 3d 18 02 c0       	push   0xc002183d
c0014cf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cff:	e8 e8 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d04:	58                   	pop    eax
c0014d05:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d0a:	5a                   	pop    edx
c0014d0b:	68 dc 18 02 c0       	push   0xc00218dc
c0014d10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d16:	e8 d1 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d1b:	59                   	pop    ecx
c0014d1c:	58                   	pop    eax
c0014d1d:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d22:	68 59 18 02 c0       	push   0xc0021859
c0014d27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2d:	e8 ba 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d32:	58                   	pop    eax
c0014d33:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d38:	5a                   	pop    edx
c0014d39:	53                   	push   ebx
c0014d3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d40:	e8 a7 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d45:	59                   	pop    ecx
c0014d46:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d4b:	5b                   	pop    ebx
c0014d4c:	68 79 18 02 c0       	push   0xc0021879
c0014d51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d57:	e8 90 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d5c:	58                   	pop    eax
c0014d5d:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d62:	5a                   	pop    edx
c0014d63:	68 18 19 02 c0       	push   0xc0021918
c0014d68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6e:	e8 79 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d73:	59                   	pop    ecx
c0014d74:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d79:	5b                   	pop    ebx
c0014d7a:	68 59 18 02 c0       	push   0xc0021859
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 62 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d8a:	58                   	pop    eax
c0014d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d90:	5a                   	pop    edx
c0014d91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d94:	83 c0 0c             	add    eax,0xc
c0014d97:	50                   	push   eax
c0014d98:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014d9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da3:	e8 44 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014da8:	59                   	pop    ecx
c0014da9:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014dae:	5b                   	pop    ebx
c0014daf:	68 78 18 02 c0       	push   0xc0021878
c0014db4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dba:	e8 2d 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014dbf:	58                   	pop    eax
c0014dc0:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014dc5:	5a                   	pop    edx
c0014dc6:	68 44 19 02 c0       	push   0xc0021944
c0014dcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd1:	e8 16 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014dd6:	59                   	pop    ecx
c0014dd7:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014ddc:	5b                   	pop    ebx
c0014ddd:	68 84 19 02 c0       	push   0xc0021984
c0014de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de8:	e8 ff 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ded:	58                   	pop    eax
c0014dee:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014df3:	5a                   	pop    edx
c0014df4:	68 64 18 02 c0       	push   0xc0021864
c0014df9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dff:	e8 e8 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e04:	59                   	pop    ecx
c0014e05:	5b                   	pop    ebx
c0014e06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014e09:	68 7c 18 02 c0       	push   0xc002187c
c0014e0e:	e8 e8 a1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0014e13:	58                   	pop    eax
c0014e14:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e17:	5a                   	pop    edx
c0014e18:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e1b:	68 85 18 02 c0       	push   0xc0021885
c0014e20:	e8 d6 a1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0014e25:	59                   	pop    ecx
c0014e26:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e29:	5b                   	pop    ebx
c0014e2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e2f:	68 9d 10 02 c0       	push   0xc002109d
c0014e34:	e8 c2 a1 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0014e39:	58                   	pop    eax
c0014e3a:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014e3f:	5a                   	pop    edx
c0014e40:	68 c8 19 02 c0       	push   0xc00219c8
c0014e45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4b:	e8 9c 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e50:	59                   	pop    ecx
c0014e51:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014e56:	5b                   	pop    ebx
c0014e57:	68 8e 18 02 c0       	push   0xc002188e
c0014e5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e62:	e8 85 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e67:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014e6c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e72:	e8 61 9f 00 00       	call   c001edd8 <CPU::readCR0()>
c0014e77:	5a                   	pop    edx
c0014e78:	59                   	pop    ecx
c0014e79:	50                   	push   eax
c0014e7a:	53                   	push   ebx
c0014e7b:	e8 92 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e80:	5b                   	pop    ebx
c0014e81:	58                   	pop    eax
c0014e82:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014e87:	68 98 18 02 c0       	push   0xc0021898
c0014e8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e92:	e8 55 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e97:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014e9c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ea2:	e8 1f a2 00 00       	call   c001f0c6 <CPU::readCR2()>
c0014ea7:	5a                   	pop    edx
c0014ea8:	59                   	pop    ecx
c0014ea9:	50                   	push   eax
c0014eaa:	53                   	push   ebx
c0014eab:	e8 62 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014eb0:	5b                   	pop    ebx
c0014eb1:	58                   	pop    eax
c0014eb2:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014eb7:	68 a2 18 02 c0       	push   0xc00218a2
c0014ebc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec2:	e8 25 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ec7:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014ecc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ed2:	e8 8e 9b 00 00       	call   c001ea65 <CPU::readCR3()>
c0014ed7:	5a                   	pop    edx
c0014ed8:	59                   	pop    ecx
c0014ed9:	50                   	push   eax
c0014eda:	53                   	push   ebx
c0014edb:	e8 32 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014ee0:	5b                   	pop    ebx
c0014ee1:	58                   	pop    eax
c0014ee2:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014ee7:	68 b5 18 02 c0       	push   0xc00218b5
c0014eec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef2:	e8 f5 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ef7:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014efc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014f02:	e8 9b a1 00 00       	call   c001f0a2 <CPU::readCR4()>
c0014f07:	5a                   	pop    edx
c0014f08:	59                   	pop    ecx
c0014f09:	50                   	push   eax
c0014f0a:	53                   	push   ebx
c0014f0b:	e8 02 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f10:	5b                   	pop    ebx
c0014f11:	58                   	pop    eax
c0014f12:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f17:	68 bf 18 02 c0       	push   0xc00218bf
c0014f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f22:	e8 c5 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f27:	5a                   	pop    edx
c0014f28:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f2d:	59                   	pop    ecx
c0014f2e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014f37:	50                   	push   eax
c0014f38:	e8 d5 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f3d:	5b                   	pop    ebx
c0014f3e:	58                   	pop    eax
c0014f3f:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f44:	68 d6 18 02 c0       	push   0xc00218d6
c0014f49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4f:	e8 98 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f54:	5a                   	pop    edx
c0014f55:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f5a:	59                   	pop    ecx
c0014f5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f61:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f64:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f67:	50                   	push   eax
c0014f68:	e8 a5 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f6d:	5b                   	pop    ebx
c0014f6e:	58                   	pop    eax
c0014f6f:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f74:	68 d6 18 02 c0       	push   0xc00218d6
c0014f79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7f:	e8 68 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f84:	59                   	pop    ecx
c0014f85:	a1 d4 4b 02 c0       	mov    eax,ds:0xc0024bd4
c0014f8a:	5b                   	pop    ebx
c0014f8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f91:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f94:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f96:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f99:	50                   	push   eax
c0014f9a:	e8 73 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f9f:	83 c4 10             	add    esp,0x10
c0014fa2:	b2 fe                	mov    dl,0xfe
c0014fa4:	e4 60                	in     al,0x60
c0014fa6:	3c 1c                	cmp    al,0x1c
c0014fa8:	74 04                	je     c0014fae <Krnl::panic(char const*)+0x31e>
c0014faa:	3c 5a                	cmp    al,0x5a
c0014fac:	75 f6                	jne    c0014fa4 <Krnl::panic(char const*)+0x314>
c0014fae:	e4 64                	in     al,0x64
c0014fb0:	a8 02                	test   al,0x2
c0014fb2:	75 fa                	jne    c0014fae <Krnl::panic(char const*)+0x31e>
c0014fb4:	88 d0                	mov    al,dl
c0014fb6:	e6 64                	out    0x64,al
c0014fb8:	fa                   	cli    
c0014fb9:	f4                   	hlt    
c0014fba:	eb e8                	jmp    c0014fa4 <Krnl::panic(char const*)+0x314>

c0014fbc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014fbc:	55                   	push   ebp
c0014fbd:	57                   	push   edi
c0014fbe:	56                   	push   esi
c0014fbf:	53                   	push   ebx
c0014fc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014fc6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014fcd:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014fcf:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014fd2:	80 fb 40             	cmp    bl,0x40
c0014fd5:	75 1b                	jne    c0014ff2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014fd7:	8a 16                	mov    dl,BYTE PTR [esi]
c0014fd9:	84 d2                	test   dl,dl
c0014fdb:	0f 84 f1 00 00 00    	je     c00150d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fe1:	8d 46 01             	lea    eax,[esi+0x1]
c0014fe4:	80 fa 3a             	cmp    dl,0x3a
c0014fe7:	74 04                	je     c0014fed <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014fe9:	89 c6                	mov    esi,eax
c0014feb:	eb ea                	jmp    c0014fd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014fed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ff0:	89 c6                	mov    esi,eax
c0014ff2:	50                   	push   eax
c0014ff3:	6a 40                	push   0x40
c0014ff5:	6a 00                	push   0x0
c0014ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014ffb:	50                   	push   eax
c0014ffc:	e8 07 b6 fe ff       	call   c0000608 <memset>
c0015001:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015008:	31 c0                	xor    eax,eax
c001500a:	83 c4 10             	add    esp,0x10
c001500d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001500f:	84 c9                	test   cl,cl
c0015011:	0f 84 bb 00 00 00    	je     c00150d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015017:	3d c7 00 00 00       	cmp    eax,0xc7
c001501c:	0f 8f b0 00 00 00    	jg     c00150d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015022:	80 f9 0a             	cmp    cl,0xa
c0015025:	0f 85 98 00 00 00    	jne    c00150c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001502b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015030:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015034:	a8 df                	test   al,0xdf
c0015036:	0f 94 c1             	sete   cl
c0015039:	3c 23                	cmp    al,0x23
c001503b:	0f 94 c2             	sete   dl
c001503e:	08 d1                	or     cl,dl
c0015040:	75 4a                	jne    c001508c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015042:	8d 50 f7             	lea    edx,[eax-0x9]
c0015045:	80 fa 01             	cmp    dl,0x1
c0015048:	76 42                	jbe    c001508c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001504a:	3c 5b                	cmp    al,0x5b
c001504c:	75 42                	jne    c0015090 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001504e:	80 fb 40             	cmp    bl,0x40
c0015051:	75 39                	jne    c001508c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015053:	83 ec 0c             	sub    esp,0xc
c0015056:	8d 54 24 65          	lea    edx,[esp+0x65]
c001505a:	52                   	push   edx
c001505b:	e8 c5 b5 fe ff       	call   c0000625 <strlen>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	83 f8 3f             	cmp    eax,0x3f
c0015066:	77 6a                	ja     c00150d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015068:	50                   	push   eax
c0015069:	50                   	push   eax
c001506a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001506e:	52                   	push   edx
c001506f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015073:	52                   	push   edx
c0015074:	e8 2e b6 fe ff       	call   c00006a7 <strcpy>
c0015079:	58                   	pop    eax
c001507a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001507e:	52                   	push   edx
c001507f:	e8 a1 b5 fe ff       	call   c0000625 <strlen>
c0015084:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	31 d2                	xor    edx,edx
c001508e:	eb 3a                	jmp    c00150ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015090:	80 fb 40             	cmp    bl,0x40
c0015093:	74 06                	je     c001509b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015095:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015099:	eb 20                	jmp    c00150bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001509b:	50                   	push   eax
c001509c:	50                   	push   eax
c001509d:	55                   	push   ebp
c001509e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00150a2:	50                   	push   eax
c00150a3:	e8 50 b6 fe ff       	call   c00006f8 <strcmp>
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	85 c0                	test   eax,eax
c00150ad:	75 dd                	jne    c001508c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150af:	eb e4                	jmp    c0015095 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00150b1:	8d 50 01             	lea    edx,[eax+0x1]
c00150b4:	80 f9 3d             	cmp    cl,0x3d
c00150b7:	74 1d                	je     c00150d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00150b9:	89 d0                	mov    eax,edx
c00150bb:	8a 08                	mov    cl,BYTE PTR [eax]
c00150bd:	84 c9                	test   cl,cl
c00150bf:	75 f0                	jne    c00150b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00150c1:	eb 0f                	jmp    c00150d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150c3:	8d 50 01             	lea    edx,[eax+0x1]
c00150c6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00150ca:	47                   	inc    edi
c00150cb:	89 d0                	mov    eax,edx
c00150cd:	e9 3b ff ff ff       	jmp    c001500d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00150d2:	31 c0                	xor    eax,eax
c00150d4:	eb 33                	jmp    c0015109 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00150d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00150da:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00150dd:	50                   	push   eax
c00150de:	50                   	push   eax
c00150df:	8d 44 24 60          	lea    eax,[esp+0x60]
c00150e3:	50                   	push   eax
c00150e4:	56                   	push   esi
c00150e5:	e8 0e b6 fe ff       	call   c00006f8 <strcmp>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	85 c0                	test   eax,eax
c00150ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150f3:	75 97                	jne    c001508c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150f5:	51                   	push   ecx
c00150f6:	51                   	push   ecx
c00150f7:	52                   	push   edx
c00150f8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00150ff:	e8 a3 b5 fe ff       	call   c00006a7 <strcpy>
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	b0 01                	mov    al,0x1
c0015109:	81 c4 2c 01 00 00    	add    esp,0x12c
c001510f:	5b                   	pop    ebx
c0015110:	5e                   	pop    esi
c0015111:	5f                   	pop    edi
c0015112:	5d                   	pop    ebp
c0015113:	c3                   	ret    

c0015114 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015114:	57                   	push   edi
c0015115:	56                   	push   esi
c0015116:	53                   	push   ebx
c0015117:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001511d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015124:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001512b:	53                   	push   ebx
c001512c:	e8 f4 b4 fe ff       	call   c0000625 <strlen>
c0015131:	89 34 24             	mov    DWORD PTR [esp],esi
c0015134:	89 c7                	mov    edi,eax
c0015136:	e8 ea b4 fe ff       	call   c0000625 <strlen>
c001513b:	83 c4 10             	add    esp,0x10
c001513e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015142:	31 ff                	xor    edi,edi
c0015144:	3d ff 00 00 00       	cmp    eax,0xff
c0015149:	0f 87 18 01 00 00    	ja     c0015267 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001514f:	51                   	push   ecx
c0015150:	51                   	push   ecx
c0015151:	56                   	push   esi
c0015152:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015156:	56                   	push   esi
c0015157:	e8 4b b5 fe ff       	call   c00006a7 <strcpy>
c001515c:	58                   	pop    eax
c001515d:	5a                   	pop    edx
c001515e:	68 22 1e 02 c0       	push   0xc0021e22
c0015163:	56                   	push   esi
c0015164:	e8 f5 b5 fe ff       	call   c000075e <strcat>
c0015169:	59                   	pop    ecx
c001516a:	58                   	pop    eax
c001516b:	53                   	push   ebx
c001516c:	56                   	push   esi
c001516d:	e8 ec b5 fe ff       	call   c000075e <strcat>
c0015172:	58                   	pop    eax
c0015173:	5a                   	pop    edx
c0015174:	68 ee 19 02 c0       	push   0xc00219ee
c0015179:	56                   	push   esi
c001517a:	e8 df b5 fe ff       	call   c000075e <strcat>
c001517f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015186:	e8 81 9d ff ff       	call   c000ef0c <operator new(unsigned long)>
c001518b:	83 c4 0c             	add    esp,0xc
c001518e:	89 c3                	mov    ebx,eax
c0015190:	ff 35 d4 4b 02 c0    	push   DWORD PTR ds:0xc0024bd4
c0015196:	56                   	push   esi
c0015197:	50                   	push   eax
c0015198:	e8 8d a3 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c001519d:	59                   	pop    ecx
c001519e:	5e                   	pop    esi
c001519f:	6a 01                	push   0x1
c00151a1:	53                   	push   ebx
c00151a2:	e8 e7 a3 ff ff       	call   c000f58e <File::open(FileOpenMode)>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	85 c0                	test   eax,eax
c00151ac:	74 08                	je     c00151b6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c00151ae:	83 ec 0c             	sub    esp,0xc
c00151b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151b3:	53                   	push   ebx
c00151b4:	eb 2e                	jmp    c00151e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00151b6:	52                   	push   edx
c00151b7:	8d 44 24 07          	lea    eax,[esp+0x7]
c00151bb:	50                   	push   eax
c00151bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151c0:	50                   	push   eax
c00151c1:	53                   	push   ebx
c00151c2:	e8 73 a6 ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c00151c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151cb:	83 c4 10             	add    esp,0x10
c00151ce:	89 c1                	mov    ecx,eax
c00151d0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00151d4:	75 13                	jne    c00151e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00151d6:	83 ec 0c             	sub    esp,0xc
c00151d9:	53                   	push   ebx
c00151da:	e8 0d a4 ff ff       	call   c000f5ec <File::close()>
c00151df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151e7:	eb 7b                	jmp    c0015264 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00151e9:	83 ec 0c             	sub    esp,0xc
c00151ec:	50                   	push   eax
c00151ed:	e8 2c 6a ff ff       	call   c000bc1e <malloc>
c00151f2:	89 c6                	mov    esi,eax
c00151f4:	58                   	pop    eax
c00151f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151f7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00151fb:	52                   	push   edx
c00151fc:	56                   	push   esi
c00151fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015201:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015205:	53                   	push   ebx
c0015206:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015209:	83 c4 20             	add    esp,0x20
c001520c:	85 c0                	test   eax,eax
c001520e:	75 0a                	jne    c001521a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015214:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015218:	74 18                	je     c0015232 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001521a:	83 ec 0c             	sub    esp,0xc
c001521d:	31 ff                	xor    edi,edi
c001521f:	53                   	push   ebx
c0015220:	e8 c7 a3 ff ff       	call   c000f5ec <File::close()>
c0015225:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001522a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	eb 35                	jmp    c0015267 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	53                   	push   ebx
c0015236:	e8 b1 a3 ff ff       	call   c000f5ec <File::close()>
c001523b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001523d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015240:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015243:	83 c4 0c             	add    esp,0xc
c0015246:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001524d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015254:	56                   	push   esi
c0015255:	e8 62 fd ff ff       	call   c0014fbc <Reg::findLineFromLoadedData(char*, char*, char*)>
c001525a:	89 34 24             	mov    DWORD PTR [esp],esi
c001525d:	89 c7                	mov    edi,eax
c001525f:	e8 ca 69 ff ff       	call   c000bc2e <free>
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	81 c4 10 01 00 00    	add    esp,0x110
c001526d:	89 f8                	mov    eax,edi
c001526f:	5b                   	pop    ebx
c0015270:	5e                   	pop    esi
c0015271:	5f                   	pop    edi
c0015272:	c3                   	ret    

c0015273 <Reg::getLine(char*, char*, char*)>:
c0015273:	57                   	push   edi
c0015274:	56                   	push   esi
c0015275:	53                   	push   ebx
c0015276:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001527a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001527e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015282:	57                   	push   edi
c0015283:	56                   	push   esi
c0015284:	53                   	push   ebx
c0015285:	68 f3 19 02 c0       	push   0xc00219f3
c001528a:	e8 85 fe ff ff       	call   c0015114 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	84 c0                	test   al,al
c0015294:	75 10                	jne    c00152a6 <Reg::getLine(char*, char*, char*)+0x33>
c0015296:	57                   	push   edi
c0015297:	56                   	push   esi
c0015298:	53                   	push   ebx
c0015299:	68 18 1a 02 c0       	push   0xc0021a18
c001529e:	e8 71 fe ff ff       	call   c0015114 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	5b                   	pop    ebx
c00152a7:	5e                   	pop    esi
c00152a8:	5f                   	pop    edi
c00152a9:	c3                   	ret    

c00152aa <Reg::readInt(char*, char*, int*)>:
c00152aa:	55                   	push   ebp
c00152ab:	57                   	push   edi
c00152ac:	56                   	push   esi
c00152ad:	53                   	push   ebx
c00152ae:	81 ec f0 00 00 00    	sub    esp,0xf0
c00152b4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00152b8:	57                   	push   edi
c00152b9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152c0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152c7:	e8 a7 ff ff ff       	call   c0015273 <Reg::getLine(char*, char*, char*)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	84 c0                	test   al,al
c00152d1:	0f 84 b3 00 00 00    	je     c001538a <Reg::readInt(char*, char*, int*)+0xe0>
c00152d7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00152db:	80 fa 2b             	cmp    dl,0x2b
c00152de:	74 0c                	je     c00152ec <Reg::readInt(char*, char*, int*)+0x42>
c00152e0:	80 fa 2d             	cmp    dl,0x2d
c00152e3:	75 0e                	jne    c00152f3 <Reg::readInt(char*, char*, int*)+0x49>
c00152e5:	ba 01 00 00 00       	mov    edx,0x1
c00152ea:	eb 0b                	jmp    c00152f7 <Reg::readInt(char*, char*, int*)+0x4d>
c00152ec:	ba 01 00 00 00       	mov    edx,0x1
c00152f1:	eb 02                	jmp    c00152f5 <Reg::readInt(char*, char*, int*)+0x4b>
c00152f3:	31 d2                	xor    edx,edx
c00152f5:	31 c0                	xor    eax,eax
c00152f7:	be 0a 00 00 00       	mov    esi,0xa
c00152fc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015301:	75 20                	jne    c0015323 <Reg::readInt(char*, char*, int*)+0x79>
c0015303:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015307:	80 f9 78             	cmp    cl,0x78
c001530a:	75 0a                	jne    c0015316 <Reg::readInt(char*, char*, int*)+0x6c>
c001530c:	83 c2 02             	add    edx,0x2
c001530f:	be 10 00 00 00       	mov    esi,0x10
c0015314:	eb 0d                	jmp    c0015323 <Reg::readInt(char*, char*, int*)+0x79>
c0015316:	80 f9 62             	cmp    cl,0x62
c0015319:	75 08                	jne    c0015323 <Reg::readInt(char*, char*, int*)+0x79>
c001531b:	83 c2 02             	add    edx,0x2
c001531e:	be 02 00 00 00       	mov    esi,0x2
c0015323:	01 d7                	add    edi,edx
c0015325:	31 d2                	xor    edx,edx
c0015327:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015329:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001532d:	80 fb 0d             	cmp    bl,0xd
c0015330:	0f 94 c3             	sete   bl
c0015333:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015338:	0f 94 c1             	sete   cl
c001533b:	08 cb                	or     bl,cl
c001533d:	75 3a                	jne    c0015379 <Reg::readInt(char*, char*, int*)+0xcf>
c001533f:	0f af d6             	imul   edx,esi
c0015342:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015347:	83 fe 10             	cmp    esi,0x10
c001534a:	75 26                	jne    c0015372 <Reg::readInt(char*, char*, int*)+0xc8>
c001534c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015350:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015353:	89 e9                	mov    ecx,ebp
c0015355:	80 f9 05             	cmp    cl,0x5
c0015358:	77 06                	ja     c0015360 <Reg::readInt(char*, char*, int*)+0xb6>
c001535a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001535e:	eb 16                	jmp    c0015376 <Reg::readInt(char*, char*, int*)+0xcc>
c0015360:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015364:	83 e9 61             	sub    ecx,0x61
c0015367:	80 f9 05             	cmp    cl,0x5
c001536a:	77 06                	ja     c0015372 <Reg::readInt(char*, char*, int*)+0xc8>
c001536c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015370:	eb 04                	jmp    c0015376 <Reg::readInt(char*, char*, int*)+0xcc>
c0015372:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015376:	47                   	inc    edi
c0015377:	eb ae                	jmp    c0015327 <Reg::readInt(char*, char*, int*)+0x7d>
c0015379:	84 c0                	test   al,al
c001537b:	74 02                	je     c001537f <Reg::readInt(char*, char*, int*)+0xd5>
c001537d:	f7 da                	neg    edx
c001537f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015386:	89 10                	mov    DWORD PTR [eax],edx
c0015388:	88 d8                	mov    al,bl
c001538a:	81 c4 ec 00 00 00    	add    esp,0xec
c0015390:	5b                   	pop    ebx
c0015391:	5e                   	pop    esi
c0015392:	5f                   	pop    edi
c0015393:	5d                   	pop    ebp
c0015394:	c3                   	ret    

c0015395 <Reg::readString(char*, char*, char*, int)>:
c0015395:	57                   	push   edi
c0015396:	56                   	push   esi
c0015397:	53                   	push   ebx
c0015398:	81 ec d4 00 00 00    	sub    esp,0xd4
c001539e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00153a5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00153a9:	57                   	push   edi
c00153aa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153b1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153b8:	e8 b6 fe ff ff       	call   c0015273 <Reg::getLine(char*, char*, char*)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	89 c6                	mov    esi,eax
c00153c2:	84 c0                	test   al,al
c00153c4:	74 44                	je     c001540a <Reg::readString(char*, char*, char*, int)+0x75>
c00153c6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00153cd:	31 c0                	xor    eax,eax
c00153cf:	4a                   	dec    edx
c00153d0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00153d3:	84 c9                	test   cl,cl
c00153d5:	74 0f                	je     c00153e6 <Reg::readString(char*, char*, char*, int)+0x51>
c00153d7:	39 c2                	cmp    edx,eax
c00153d9:	7e 0b                	jle    c00153e6 <Reg::readString(char*, char*, char*, int)+0x51>
c00153db:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00153de:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00153e3:	40                   	inc    eax
c00153e4:	eb ea                	jmp    c00153d0 <Reg::readString(char*, char*, char*, int)+0x3b>
c00153e6:	83 ec 0c             	sub    esp,0xc
c00153e9:	53                   	push   ebx
c00153ea:	e8 36 b2 fe ff       	call   c0000625 <strlen>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00153f7:	75 11                	jne    c001540a <Reg::readString(char*, char*, char*, int)+0x75>
c00153f9:	83 ec 0c             	sub    esp,0xc
c00153fc:	53                   	push   ebx
c00153fd:	e8 23 b2 fe ff       	call   c0000625 <strlen>
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001540a:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015410:	89 f0                	mov    eax,esi
c0015412:	5b                   	pop    ebx
c0015413:	5e                   	pop    esi
c0015414:	5f                   	pop    edi
c0015415:	c3                   	ret    

c0015416 <Reg::readBool(char*, char*, bool*)>:
c0015416:	83 ec 20             	sub    esp,0x20
c0015419:	8d 44 24 10          	lea    eax,[esp+0x10]
c001541d:	50                   	push   eax
c001541e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015422:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015426:	e8 7f fe ff ff       	call   c00152aa <Reg::readInt(char*, char*, int*)>
c001542b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015430:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015434:	0f 95 02             	setne  BYTE PTR [edx]
c0015437:	83 c4 2c             	add    esp,0x2c
c001543a:	c3                   	ret    

c001543b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001543b:	53                   	push   ebx
c001543c:	83 ec 1c             	sub    esp,0x1c
c001543f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015443:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015447:	50                   	push   eax
c0015448:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001544c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015450:	e8 c1 ff ff ff       	call   c0015416 <Reg::readBool(char*, char*, bool*)>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	84 c0                	test   al,al
c001545a:	74 04                	je     c0015460 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001545c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015460:	88 d8                	mov    al,bl
c0015462:	83 c4 18             	add    esp,0x18
c0015465:	5b                   	pop    ebx
c0015466:	c3                   	ret    

c0015467 <Reg::readIntWithDefault(char*, char*, int)>:
c0015467:	53                   	push   ebx
c0015468:	83 ec 1c             	sub    esp,0x1c
c001546b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001546f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015473:	50                   	push   eax
c0015474:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015478:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001547c:	e8 29 fe ff ff       	call   c00152aa <Reg::readInt(char*, char*, int*)>
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	84 c0                	test   al,al
c0015486:	74 04                	je     c001548c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015488:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001548c:	89 d8                	mov    eax,ebx
c001548e:	83 c4 18             	add    esp,0x18
c0015491:	5b                   	pop    ebx
c0015492:	c3                   	ret    

c0015493 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015493:	56                   	push   esi
c0015494:	53                   	push   ebx
c0015495:	51                   	push   ecx
c0015496:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001549a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001549e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154a2:	56                   	push   esi
c00154a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ab:	e8 e5 fe ff ff       	call   c0015395 <Reg::readString(char*, char*, char*, int)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	84 c0                	test   al,al
c00154b5:	74 02                	je     c00154b9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00154b7:	89 f3                	mov    ebx,esi
c00154b9:	89 d8                	mov    eax,ebx
c00154bb:	5a                   	pop    edx
c00154bc:	5b                   	pop    ebx
c00154bd:	5e                   	pop    esi
c00154be:	c3                   	ret    

c00154bf <Sys::exit(regs*)>:
c00154bf:	83 ec 18             	sub    esp,0x18
c00154c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154c9:	e8 28 33 00 00       	call   c00187f6 <terminateTask(int)>
c00154ce:	83 c8 ff             	or     eax,0xffffffff
c00154d1:	83 c4 1c             	add    esp,0x1c
c00154d4:	89 c2                	mov    edx,eax
c00154d6:	c3                   	ret    

c00154d7 <Sys::loadDLL(regs*)>:
c00154d7:	56                   	push   esi
c00154d8:	53                   	push   ebx
c00154d9:	31 d2                	xor    edx,edx
c00154db:	51                   	push   ecx
c00154dc:	b8 01 00 00 00       	mov    eax,0x1
c00154e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154e5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00154e9:	74 7d                	je     c0015568 <Sys::loadDLL(regs*)+0x91>
c00154eb:	83 ec 0c             	sub    esp,0xc
c00154ee:	68 14 01 00 00       	push   0x114
c00154f3:	e8 14 9a ff ff       	call   c000ef0c <operator new(unsigned long)>
c00154f8:	83 c4 0c             	add    esp,0xc
c00154fb:	89 c3                	mov    ebx,eax
c00154fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015502:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015505:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015508:	53                   	push   ebx
c0015509:	e8 1c a0 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c001550e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015511:	e8 e6 a2 ff ff       	call   c000f7fc <File::exists()>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	84 c0                	test   al,al
c001551b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001551d:	75 11                	jne    c0015530 <Sys::loadDLL(regs*)+0x59>
c001551f:	83 ec 0c             	sub    esp,0xc
c0015522:	53                   	push   ebx
c0015523:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	b8 03 00 00 00       	mov    eax,0x3
c001552e:	eb 36                	jmp    c0015566 <Sys::loadDLL(regs*)+0x8f>
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	53                   	push   ebx
c0015534:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015537:	58                   	pop    eax
c0015538:	5a                   	pop    edx
c0015539:	6a 00                	push   0x0
c001553b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001553e:	e8 3f 21 00 00       	call   c0017682 <Thr::loadDLL(char const*, bool)>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	89 c1                	mov    ecx,eax
c0015548:	31 d2                	xor    edx,edx
c001554a:	b8 04 00 00 00       	mov    eax,0x4
c001554f:	85 c9                	test   ecx,ecx
c0015551:	74 15                	je     c0015568 <Sys::loadDLL(regs*)+0x91>
c0015553:	53                   	push   ebx
c0015554:	53                   	push   ebx
c0015555:	ff 35 88 37 02 c0    	push   DWORD PTR ds:0xc0023788
c001555b:	51                   	push   ecx
c001555c:	e8 74 22 00 00       	call   c00177d5 <Thr::executeDLL(unsigned long, void*)>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	31 c0                	xor    eax,eax
c0015566:	31 d2                	xor    edx,edx
c0015568:	59                   	pop    ecx
c0015569:	5b                   	pop    ebx
c001556a:	5e                   	pop    esi
c001556b:	c3                   	ret    

c001556c <Sys::read(regs*)>:
c001556c:	57                   	push   edi
c001556d:	56                   	push   esi
c001556e:	53                   	push   ebx
c001556f:	83 ec 10             	sub    esp,0x10
c0015572:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015576:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015579:	83 f8 02             	cmp    eax,0x2
c001557c:	77 10                	ja     c001558e <Sys::read(regs*)+0x22>
c001557e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015583:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015586:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001558c:	eb 0e                	jmp    c001559c <Sys::read(regs*)+0x30>
c001558e:	83 ec 0c             	sub    esp,0xc
c0015591:	50                   	push   eax
c0015592:	e8 60 86 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	89 c1                	mov    ecx,eax
c001559c:	83 c8 ff             	or     eax,0xffffffff
c001559f:	85 c9                	test   ecx,ecx
c00155a1:	89 c2                	mov    edx,eax
c00155a3:	74 28                	je     c00155cd <Sys::read(regs*)+0x61>
c00155a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155ad:	31 ff                	xor    edi,edi
c00155af:	83 ec 0c             	sub    esp,0xc
c00155b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155b4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155b8:	52                   	push   edx
c00155b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155bc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155bf:	57                   	push   edi
c00155c0:	56                   	push   esi
c00155c1:	51                   	push   ecx
c00155c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155c9:	83 c4 20             	add    esp,0x20
c00155cc:	99                   	cdq    
c00155cd:	83 c4 10             	add    esp,0x10
c00155d0:	5b                   	pop    ebx
c00155d1:	5e                   	pop    esi
c00155d2:	5f                   	pop    edi
c00155d3:	c3                   	ret    

c00155d4 <Sys::sbrk(regs*)>:
c00155d4:	56                   	push   esi
c00155d5:	53                   	push   ebx
c00155d6:	50                   	push   eax
c00155d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155e3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00155e6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00155ec:	85 db                	test   ebx,ebx
c00155ee:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00155f1:	74 02                	je     c00155f5 <Sys::sbrk(regs*)+0x21>
c00155f3:	79 06                	jns    c00155fb <Sys::sbrk(regs*)+0x27>
c00155f5:	89 f0                	mov    eax,esi
c00155f7:	31 d2                	xor    edx,edx
c00155f9:	eb 2a                	jmp    c0015625 <Sys::sbrk(regs*)+0x51>
c00155fb:	83 c8 ff             	or     eax,0xffffffff
c00155fe:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015604:	89 c2                	mov    edx,eax
c0015606:	77 1d                	ja     c0015625 <Sys::sbrk(regs*)+0x51>
c0015608:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001560e:	50                   	push   eax
c001560f:	c1 ea 0c             	shr    edx,0xc
c0015612:	68 07 04 00 00       	push   0x407
c0015617:	52                   	push   edx
c0015618:	51                   	push   ecx
c0015619:	e8 94 8e ff ff       	call   c000e4b2 <VAS::allocatePages(int, int)>
c001561e:	89 f0                	mov    eax,esi
c0015620:	31 d2                	xor    edx,edx
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	59                   	pop    ecx
c0015626:	5b                   	pop    ebx
c0015627:	5e                   	pop    esi
c0015628:	c3                   	ret    

c0015629 <Sys::write(regs*)>:
c0015629:	57                   	push   edi
c001562a:	56                   	push   esi
c001562b:	53                   	push   ebx
c001562c:	83 ec 18             	sub    esp,0x18
c001562f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015633:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015636:	68 33 1a 02 c0       	push   0xc0021a33
c001563b:	e8 bb 99 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015640:	83 c4 10             	add    esp,0x10
c0015643:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015647:	77 10                	ja     c0015659 <Sys::write(regs*)+0x30>
c0015649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001564e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015651:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015657:	eb 1b                	jmp    c0015674 <Sys::write(regs*)+0x4b>
c0015659:	83 ec 0c             	sub    esp,0xc
c001565c:	68 52 1a 02 c0       	push   0xc0021a52
c0015661:	e8 95 99 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015666:	58                   	pop    eax
c0015667:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001566a:	e8 88 85 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	89 c1                	mov    ecx,eax
c0015674:	83 c8 ff             	or     eax,0xffffffff
c0015677:	85 c9                	test   ecx,ecx
c0015679:	89 c2                	mov    edx,eax
c001567b:	74 28                	je     c00156a5 <Sys::write(regs*)+0x7c>
c001567d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015685:	31 ff                	xor    edi,edi
c0015687:	83 ec 0c             	sub    esp,0xc
c001568a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001568c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015690:	52                   	push   edx
c0015691:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015694:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015697:	57                   	push   edi
c0015698:	56                   	push   esi
c0015699:	51                   	push   ecx
c001569a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001569d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00156a1:	83 c4 20             	add    esp,0x20
c00156a4:	99                   	cdq    
c00156a5:	83 c4 10             	add    esp,0x10
c00156a8:	5b                   	pop    ebx
c00156a9:	5e                   	pop    esi
c00156aa:	5f                   	pop    edi
c00156ab:	c3                   	ret    

c00156ac <Sys::yield(regs*)>:
c00156ac:	83 ec 0c             	sub    esp,0xc
c00156af:	e8 2c 25 00 00       	call   c0017be0 <lockScheduler()>
c00156b4:	e8 5b 28 00 00       	call   c0017f14 <schedule()>
c00156b9:	e8 24 25 00 00       	call   c0017be2 <unlockScheduler()>
c00156be:	31 c0                	xor    eax,eax
c00156c0:	31 d2                	xor    edx,edx
c00156c2:	83 c4 0c             	add    esp,0xc
c00156c5:	c3                   	ret    

c00156c6 <sysCallGetPID(regs*)>:
c00156c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d0:	99                   	cdq    
c00156d1:	c3                   	ret    

c00156d2 <sysCallSeekDir(regs*)>:
c00156d2:	31 c0                	xor    eax,eax
c00156d4:	31 d2                	xor    edx,edx
c00156d6:	c3                   	ret    

c00156d7 <sysCallTellDir(regs*)>:
c00156d7:	31 c0                	xor    eax,eax
c00156d9:	31 d2                	xor    edx,edx
c00156db:	c3                   	ret    

c00156dc <sysCallVerify(regs*)>:
c00156dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156e0:	31 d2                	xor    edx,edx
c00156e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e5:	c3                   	ret    

c00156e6 <sysCallGetArgc(regs*)>:
c00156e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156ee:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00156f4:	99                   	cdq    
c00156f5:	c3                   	ret    

c00156f6 <sysFormatDisk(regs*)>:
c00156f6:	56                   	push   esi
c00156f7:	53                   	push   ebx
c00156f8:	53                   	push   ebx
c00156f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156fd:	8b 1d e8 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238e8
c0015703:	eb 25                	jmp    c001572a <sysFormatDisk(regs*)+0x34>
c0015705:	83 ec 0c             	sub    esp,0xc
c0015708:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001570b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001570d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015710:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015713:	50                   	push   eax
c0015714:	ff 34 85 80 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc280]
c001571b:	53                   	push   ebx
c001571c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001571f:	83 c4 20             	add    esp,0x20
c0015722:	83 f8 08             	cmp    eax,0x8
c0015725:	75 12                	jne    c0015739 <sysFormatDisk(regs*)+0x43>
c0015727:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001572a:	85 db                	test   ebx,ebx
c001572c:	75 d7                	jne    c0015705 <sysFormatDisk(regs*)+0xf>
c001572e:	59                   	pop    ecx
c001572f:	b8 03 00 00 00       	mov    eax,0x3
c0015734:	31 d2                	xor    edx,edx
c0015736:	5b                   	pop    ebx
c0015737:	5e                   	pop    esi
c0015738:	c3                   	ret    
c0015739:	85 c0                	test   eax,eax
c001573b:	74 1b                	je     c0015758 <sysFormatDisk(regs*)+0x62>
c001573d:	83 f8 09             	cmp    eax,0x9
c0015740:	74 0b                	je     c001574d <sysFormatDisk(regs*)+0x57>
c0015742:	59                   	pop    ecx
c0015743:	b8 02 00 00 00       	mov    eax,0x2
c0015748:	31 d2                	xor    edx,edx
c001574a:	5b                   	pop    ebx
c001574b:	5e                   	pop    esi
c001574c:	c3                   	ret    
c001574d:	59                   	pop    ecx
c001574e:	b8 01 00 00 00       	mov    eax,0x1
c0015753:	31 d2                	xor    edx,edx
c0015755:	5b                   	pop    ebx
c0015756:	5e                   	pop    esi
c0015757:	c3                   	ret    
c0015758:	59                   	pop    ecx
c0015759:	31 c0                	xor    eax,eax
c001575b:	31 d2                	xor    edx,edx
c001575d:	5b                   	pop    ebx
c001575e:	5e                   	pop    esi
c001575f:	c3                   	ret    

c0015760 <sysSetDiskVolumeLabel(regs*)>:
c0015760:	56                   	push   esi
c0015761:	53                   	push   ebx
c0015762:	53                   	push   ebx
c0015763:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015767:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001576a:	83 f8 19             	cmp    eax,0x19
c001576d:	77 29                	ja     c0015798 <sysSetDiskVolumeLabel(regs*)+0x38>
c001576f:	8b 0c 85 80 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc280]
c0015776:	85 c9                	test   ecx,ecx
c0015778:	74 1e                	je     c0015798 <sysSetDiskVolumeLabel(regs*)+0x38>
c001577a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001577d:	85 d2                	test   edx,edx
c001577f:	74 17                	je     c0015798 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015781:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015787:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015789:	52                   	push   edx
c001578a:	50                   	push   eax
c001578b:	51                   	push   ecx
c001578c:	53                   	push   ebx
c001578d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	99                   	cdq    
c0015794:	59                   	pop    ecx
c0015795:	5b                   	pop    ebx
c0015796:	5e                   	pop    esi
c0015797:	c3                   	ret    
c0015798:	59                   	pop    ecx
c0015799:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001579e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157a3:	5b                   	pop    ebx
c00157a4:	5e                   	pop    esi
c00157a5:	c3                   	ret    

c00157a6 <sysGetDiskVolumeLabel(regs*)>:
c00157a6:	57                   	push   edi
c00157a7:	56                   	push   esi
c00157a8:	53                   	push   ebx
c00157a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00157b0:	83 fa 19             	cmp    edx,0x19
c00157b3:	77 34                	ja     c00157e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157b5:	8b 0c 95 80 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc280]
c00157bc:	85 c9                	test   ecx,ecx
c00157be:	74 29                	je     c00157e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157c0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00157c3:	85 db                	test   ebx,ebx
c00157c5:	74 22                	je     c00157e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157c7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157ca:	85 c0                	test   eax,eax
c00157cc:	74 1b                	je     c00157e9 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157ce:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00157d4:	83 ec 0c             	sub    esp,0xc
c00157d7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00157d9:	50                   	push   eax
c00157da:	53                   	push   ebx
c00157db:	52                   	push   edx
c00157dc:	51                   	push   ecx
c00157dd:	56                   	push   esi
c00157de:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00157e1:	83 c4 20             	add    esp,0x20
c00157e4:	99                   	cdq    
c00157e5:	5b                   	pop    ebx
c00157e6:	5e                   	pop    esi
c00157e7:	5f                   	pop    edi
c00157e8:	c3                   	ret    
c00157e9:	5b                   	pop    ebx
c00157ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157f4:	5e                   	pop    esi
c00157f5:	5f                   	pop    edi
c00157f6:	c3                   	ret    

c00157f7 <sysShutdown(regs*)>:
c00157f7:	83 ec 0c             	sub    esp,0xc
c00157fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015801:	85 c0                	test   eax,eax
c0015803:	74 18                	je     c001581d <sysShutdown(regs*)+0x26>
c0015805:	83 f8 01             	cmp    eax,0x1
c0015808:	74 38                	je     c0015842 <sysShutdown(regs*)+0x4b>
c001580a:	83 f8 02             	cmp    eax,0x2
c001580d:	74 24                	je     c0015833 <sysShutdown(regs*)+0x3c>
c001580f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015814:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015819:	83 c4 0c             	add    esp,0xc
c001581c:	c3                   	ret    
c001581d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015822:	8b 10                	mov    edx,DWORD PTR [eax]
c0015824:	6a 00                	push   0x0
c0015826:	6a 00                	push   0x0
c0015828:	6a 00                	push   0x0
c001582a:	50                   	push   eax
c001582b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	eb dc                	jmp    c001580f <sysShutdown(regs*)+0x18>
c0015833:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015838:	8b 10                	mov    edx,DWORD PTR [eax]
c001583a:	6a 00                	push   0x0
c001583c:	6a 00                	push   0x0
c001583e:	6a 01                	push   0x1
c0015840:	eb e8                	jmp    c001582a <sysShutdown(regs*)+0x33>
c0015842:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0015847:	85 c0                	test   eax,eax
c0015849:	74 02                	je     c001584d <sysShutdown(regs*)+0x56>
c001584b:	ff d0                	call   eax
c001584d:	31 c0                	xor    eax,eax
c001584f:	31 d2                	xor    edx,edx
c0015851:	83 c4 0c             	add    esp,0xc
c0015854:	c3                   	ret    

c0015855 <sysCallGetCwd(regs*)>:
c0015855:	83 ec 10             	sub    esp,0x10
c0015858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001585c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001585f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015867:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001586a:	e8 2c a0 ff ff       	call   c000f89b <getcwd(Process*, char*, int)>
c001586f:	83 c4 1c             	add    esp,0x1c
c0015872:	99                   	cdq    
c0015873:	c3                   	ret    

c0015874 <sysCallSetCwd(regs*)>:
c0015874:	83 ec 14             	sub    esp,0x14
c0015877:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001587b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001587e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015883:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015886:	e8 3a a0 ff ff       	call   c000f8c5 <setcwd(Process*, char*)>
c001588b:	83 c4 1c             	add    esp,0x1c
c001588e:	99                   	cdq    
c001588f:	c3                   	ret    

c0015890 <sysCallRealpath(regs*)>:
c0015890:	83 ec 0c             	sub    esp,0xc
c0015893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015897:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001589a:	85 d2                	test   edx,edx
c001589c:	74 07                	je     c00158a5 <sysCallRealpath(regs*)+0x15>
c001589e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00158a1:	85 c0                	test   eax,eax
c00158a3:	75 0b                	jne    c00158b0 <sysCallRealpath(regs*)+0x20>
c00158a5:	b8 01 00 00 00       	mov    eax,0x1
c00158aa:	31 d2                	xor    edx,edx
c00158ac:	83 c4 0c             	add    esp,0xc
c00158af:	c3                   	ret    
c00158b0:	51                   	push   ecx
c00158b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158b7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158ba:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158c0:	51                   	push   ecx
c00158c1:	52                   	push   edx
c00158c2:	50                   	push   eax
c00158c3:	e8 b8 9a ff ff       	call   c000f380 <standardiseFiles(char*, char const*, char const*)>
c00158c8:	83 c4 10             	add    esp,0x10
c00158cb:	31 c0                	xor    eax,eax
c00158cd:	31 d2                	xor    edx,edx
c00158cf:	83 c4 0c             	add    esp,0xc
c00158d2:	c3                   	ret    

c00158d3 <sysCallReadDir(regs*)>:
c00158d3:	53                   	push   ebx
c00158d4:	83 ec 18             	sub    esp,0x18
c00158d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158de:	83 f8 02             	cmp    eax,0x2
c00158e1:	76 53                	jbe    c0015936 <sysCallReadDir(regs*)+0x63>
c00158e3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00158e6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00158ec:	77 4f                	ja     c001593d <sysCallReadDir(regs*)+0x6a>
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	50                   	push   eax
c00158f2:	e8 00 83 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	85 c0                	test   eax,eax
c00158fc:	74 50                	je     c001594e <sysCallReadDir(regs*)+0x7b>
c00158fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015906:	83 ec 0c             	sub    esp,0xc
c0015909:	8b 10                	mov    edx,DWORD PTR [eax]
c001590b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001590f:	51                   	push   ecx
c0015910:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015913:	6a 00                	push   0x0
c0015915:	68 10 01 00 00       	push   0x110
c001591a:	50                   	push   eax
c001591b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001591e:	83 c4 20             	add    esp,0x20
c0015921:	85 c0                	test   eax,eax
c0015923:	74 38                	je     c001595d <sysCallReadDir(regs*)+0x8a>
c0015925:	83 f8 07             	cmp    eax,0x7
c0015928:	74 0c                	je     c0015936 <sysCallReadDir(regs*)+0x63>
c001592a:	b8 02 00 00 00       	mov    eax,0x2
c001592f:	31 d2                	xor    edx,edx
c0015931:	83 c4 18             	add    esp,0x18
c0015934:	5b                   	pop    ebx
c0015935:	c3                   	ret    
c0015936:	b8 01 00 00 00       	mov    eax,0x1
c001593b:	eb f2                	jmp    c001592f <sysCallReadDir(regs*)+0x5c>
c001593d:	83 ec 08             	sub    esp,0x8
c0015940:	52                   	push   edx
c0015941:	68 74 1a 02 c0       	push   0xc0021a74
c0015946:	e8 b0 96 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001594b:	83 c4 10             	add    esp,0x10
c001594e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015953:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015958:	83 c4 18             	add    esp,0x18
c001595b:	5b                   	pop    ebx
c001595c:	c3                   	ret    
c001595d:	31 c0                	xor    eax,eax
c001595f:	eb ce                	jmp    c001592f <sysCallReadDir(regs*)+0x5c>

c0015961 <sysCallIsATTY(regs*)>:
c0015961:	83 ec 0c             	sub    esp,0xc
c0015964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015968:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001596b:	83 f8 02             	cmp    eax,0x2
c001596e:	76 07                	jbe    c0015977 <sysCallIsATTY(regs*)+0x16>
c0015970:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015975:	75 26                	jne    c001599d <sysCallIsATTY(regs*)+0x3c>
c0015977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001597c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001597f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015985:	85 c0                	test   eax,eax
c0015987:	74 24                	je     c00159ad <sysCallIsATTY(regs*)+0x4c>
c0015989:	83 ec 0c             	sub    esp,0xc
c001598c:	8b 10                	mov    edx,DWORD PTR [eax]
c001598e:	50                   	push   eax
c001598f:	ff 12                	call   DWORD PTR [edx]
c0015991:	31 d2                	xor    edx,edx
c0015993:	0f b6 c0             	movzx  eax,al
c0015996:	83 c4 10             	add    esp,0x10
c0015999:	83 c4 0c             	add    esp,0xc
c001599c:	c3                   	ret    
c001599d:	83 ec 0c             	sub    esp,0xc
c00159a0:	50                   	push   eax
c00159a1:	e8 51 82 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	85 c0                	test   eax,eax
c00159ab:	75 dc                	jne    c0015989 <sysCallIsATTY(regs*)+0x28>
c00159ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159b7:	83 c4 0c             	add    esp,0xc
c00159ba:	c3                   	ret    

c00159bb <sysCallSeek(regs*)>:
c00159bb:	53                   	push   ebx
c00159bc:	83 ec 08             	sub    esp,0x8
c00159bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159c6:	83 f8 02             	cmp    eax,0x2
c00159c9:	76 4a                	jbe    c0015a15 <sysCallSeek(regs*)+0x5a>
c00159cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159d0:	77 32                	ja     c0015a04 <sysCallSeek(regs*)+0x49>
c00159d2:	83 ec 0c             	sub    esp,0xc
c00159d5:	50                   	push   eax
c00159d6:	e8 1c 82 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c00159db:	83 c4 0c             	add    esp,0xc
c00159de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00159e1:	31 db                	xor    ebx,ebx
c00159e3:	53                   	push   ebx
c00159e4:	51                   	push   ecx
c00159e5:	50                   	push   eax
c00159e6:	e8 61 9c ff ff       	call   c000f64c <File::seek(unsigned long long)>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	85 c0                	test   eax,eax
c00159f0:	0f 95 c0             	setne  al
c00159f3:	31 d2                	xor    edx,edx
c00159f5:	0f b6 c0             	movzx  eax,al
c00159f8:	f7 d8                	neg    eax
c00159fa:	83 d2 00             	adc    edx,0x0
c00159fd:	83 c4 08             	add    esp,0x8
c0015a00:	f7 da                	neg    edx
c0015a02:	5b                   	pop    ebx
c0015a03:	c3                   	ret    
c0015a04:	83 ec 08             	sub    esp,0x8
c0015a07:	50                   	push   eax
c0015a08:	68 30 1b 02 c0       	push   0xc0021b30
c0015a0d:	e8 e9 95 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a1f:	83 c4 08             	add    esp,0x8
c0015a22:	5b                   	pop    ebx
c0015a23:	c3                   	ret    

c0015a24 <sysCallTell(regs*)>:
c0015a24:	53                   	push   ebx
c0015a25:	83 ec 08             	sub    esp,0x8
c0015a28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a2f:	83 f8 02             	cmp    eax,0x2
c0015a32:	76 5e                	jbe    c0015a92 <sysCallTell(regs*)+0x6e>
c0015a34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a39:	77 2d                	ja     c0015a68 <sysCallTell(regs*)+0x44>
c0015a3b:	83 ec 0c             	sub    esp,0xc
c0015a3e:	50                   	push   eax
c0015a3f:	e8 b3 81 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015a44:	5a                   	pop    edx
c0015a45:	59                   	pop    ecx
c0015a46:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a49:	50                   	push   eax
c0015a4a:	e8 53 9c ff ff       	call   c000f6a2 <File::tell(unsigned long long*)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	85 c0                	test   eax,eax
c0015a54:	0f 95 c0             	setne  al
c0015a57:	31 d2                	xor    edx,edx
c0015a59:	0f b6 c0             	movzx  eax,al
c0015a5c:	f7 d8                	neg    eax
c0015a5e:	83 d2 00             	adc    edx,0x0
c0015a61:	83 c4 08             	add    esp,0x8
c0015a64:	f7 da                	neg    edx
c0015a66:	5b                   	pop    ebx
c0015a67:	c3                   	ret    
c0015a68:	83 ec 08             	sub    esp,0x8
c0015a6b:	50                   	push   eax
c0015a6c:	68 4a 1b 02 c0       	push   0xc0021b4a
c0015a71:	e8 85 95 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015a76:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a89:	31 d2                	xor    edx,edx
c0015a8b:	31 c0                	xor    eax,eax
c0015a8d:	83 c4 08             	add    esp,0x8
c0015a90:	5b                   	pop    ebx
c0015a91:	c3                   	ret    
c0015a92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a9c:	83 c4 08             	add    esp,0x8
c0015a9f:	5b                   	pop    ebx
c0015aa0:	c3                   	ret    

c0015aa1 <sysCallSizeFromFilename(regs*)>:
c0015aa1:	57                   	push   edi
c0015aa2:	56                   	push   esi
c0015aa3:	53                   	push   ebx
c0015aa4:	83 ec 10             	sub    esp,0x10
c0015aa7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015aab:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015aae:	83 fb 02             	cmp    ebx,0x2
c0015ab1:	0f 86 8a 00 00 00    	jbe    c0015b41 <sysCallSizeFromFilename(regs*)+0xa0>
c0015ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015abd:	77 56                	ja     c0015b15 <sysCallSizeFromFilename(regs*)+0x74>
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	68 14 01 00 00       	push   0x114
c0015ac7:	e8 40 94 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0015acc:	83 c4 0c             	add    esp,0xc
c0015acf:	89 c7                	mov    edi,eax
c0015ad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ad9:	53                   	push   ebx
c0015ada:	57                   	push   edi
c0015adb:	e8 4a 9a ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0015ae0:	83 c4 0c             	add    esp,0xc
c0015ae3:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015ae7:	50                   	push   eax
c0015ae8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015aeb:	57                   	push   edi
c0015aec:	e8 49 9d ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c0015af1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015af4:	89 c3                	mov    ebx,eax
c0015af6:	8b 07                	mov    eax,DWORD PTR [edi]
c0015af8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	31 c0                	xor    eax,eax
c0015b00:	85 db                	test   ebx,ebx
c0015b02:	0f 95 c0             	setne  al
c0015b05:	31 d2                	xor    edx,edx
c0015b07:	f7 d8                	neg    eax
c0015b09:	83 d2 00             	adc    edx,0x0
c0015b0c:	83 c4 10             	add    esp,0x10
c0015b0f:	f7 da                	neg    edx
c0015b11:	5b                   	pop    ebx
c0015b12:	5e                   	pop    esi
c0015b13:	5f                   	pop    edi
c0015b14:	c3                   	ret    
c0015b15:	83 ec 08             	sub    esp,0x8
c0015b18:	53                   	push   ebx
c0015b19:	68 64 1b 02 c0       	push   0xc0021b64
c0015b1e:	e8 d8 94 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015b23:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b36:	31 d2                	xor    edx,edx
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	31 c0                	xor    eax,eax
c0015b3d:	5b                   	pop    ebx
c0015b3e:	5e                   	pop    esi
c0015b3f:	5f                   	pop    edi
c0015b40:	c3                   	ret    
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b49:	5b                   	pop    ebx
c0015b4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b4f:	5e                   	pop    esi
c0015b50:	5f                   	pop    edi
c0015b51:	c3                   	ret    

c0015b52 <sysCallSize(regs*)>:
c0015b52:	53                   	push   ebx
c0015b53:	83 ec 18             	sub    esp,0x18
c0015b56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b5d:	83 f8 02             	cmp    eax,0x2
c0015b60:	76 64                	jbe    c0015bc6 <sysCallSize(regs*)+0x74>
c0015b62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b67:	77 33                	ja     c0015b9c <sysCallSize(regs*)+0x4a>
c0015b69:	83 ec 0c             	sub    esp,0xc
c0015b6c:	50                   	push   eax
c0015b6d:	e8 85 80 ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015b72:	83 c4 0c             	add    esp,0xc
c0015b75:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015b79:	52                   	push   edx
c0015b7a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b7d:	50                   	push   eax
c0015b7e:	e8 b7 9c ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	85 c0                	test   eax,eax
c0015b88:	0f 95 c0             	setne  al
c0015b8b:	31 d2                	xor    edx,edx
c0015b8d:	0f b6 c0             	movzx  eax,al
c0015b90:	f7 d8                	neg    eax
c0015b92:	83 d2 00             	adc    edx,0x0
c0015b95:	83 c4 18             	add    esp,0x18
c0015b98:	f7 da                	neg    edx
c0015b9a:	5b                   	pop    ebx
c0015b9b:	c3                   	ret    
c0015b9c:	83 ec 08             	sub    esp,0x8
c0015b9f:	50                   	push   eax
c0015ba0:	68 64 1b 02 c0       	push   0xc0021b64
c0015ba5:	e8 51 94 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015baa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015bbd:	31 d2                	xor    edx,edx
c0015bbf:	31 c0                	xor    eax,eax
c0015bc1:	83 c4 18             	add    esp,0x18
c0015bc4:	5b                   	pop    ebx
c0015bc5:	c3                   	ret    
c0015bc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bd0:	83 c4 18             	add    esp,0x18
c0015bd3:	5b                   	pop    ebx
c0015bd4:	c3                   	ret    

c0015bd5 <sysCallClose(regs*)>:
c0015bd5:	53                   	push   ebx
c0015bd6:	83 ec 08             	sub    esp,0x8
c0015bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bdd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015be0:	83 f8 02             	cmp    eax,0x2
c0015be3:	76 50                	jbe    c0015c35 <sysCallClose(regs*)+0x60>
c0015be5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015bea:	74 58                	je     c0015c44 <sysCallClose(regs*)+0x6f>
c0015bec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015bf1:	74 60                	je     c0015c53 <sysCallClose(regs*)+0x7e>
c0015bf3:	77 2f                	ja     c0015c24 <sysCallClose(regs*)+0x4f>
c0015bf5:	83 ec 0c             	sub    esp,0xc
c0015bf8:	50                   	push   eax
c0015bf9:	e8 f9 7f ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015bfe:	89 c3                	mov    ebx,eax
c0015c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c03:	e8 e4 99 ff ff       	call   c000f5ec <File::close()>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	85 db                	test   ebx,ebx
c0015c0d:	74 0c                	je     c0015c1b <sysCallClose(regs*)+0x46>
c0015c0f:	83 ec 0c             	sub    esp,0xc
c0015c12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c14:	53                   	push   ebx
c0015c15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c18:	83 c4 10             	add    esp,0x10
c0015c1b:	31 c0                	xor    eax,eax
c0015c1d:	31 d2                	xor    edx,edx
c0015c1f:	83 c4 08             	add    esp,0x8
c0015c22:	5b                   	pop    ebx
c0015c23:	c3                   	ret    
c0015c24:	83 ec 08             	sub    esp,0x8
c0015c27:	50                   	push   eax
c0015c28:	68 98 1a 02 c0       	push   0xc0021a98
c0015c2d:	e8 c9 93 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c3f:	83 c4 08             	add    esp,0x8
c0015c42:	5b                   	pop    ebx
c0015c43:	c3                   	ret    
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	68 7f 1b 02 c0       	push   0xc0021b7f
c0015c4c:	e8 aa 93 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015c51:	eb c5                	jmp    c0015c18 <sysCallClose(regs*)+0x43>
c0015c53:	83 ec 0c             	sub    esp,0xc
c0015c56:	68 8d 1b 02 c0       	push   0xc0021b8d
c0015c5b:	eb ef                	jmp    c0015c4c <sysCallClose(regs*)+0x77>

c0015c5d <sysCallOpenDir(regs*)>:
c0015c5d:	56                   	push   esi
c0015c5e:	53                   	push   ebx
c0015c5f:	53                   	push   ebx
c0015c60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c64:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c67:	85 f6                	test   esi,esi
c0015c69:	74 51                	je     c0015cbc <sysCallOpenDir(regs*)+0x5f>
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	68 14 01 00 00       	push   0x114
c0015c73:	e8 94 92 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0015c78:	83 c4 0c             	add    esp,0xc
c0015c7b:	89 c6                	mov    esi,eax
c0015c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c88:	56                   	push   esi
c0015c89:	e8 5e 9d ff ff       	call   c000f9ec <Directory::Directory(char const*, Process*)>
c0015c8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c91:	e8 ba 9d ff ff       	call   c000fa50 <Directory::open()>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	85 c0                	test   eax,eax
c0015c9b:	75 1f                	jne    c0015cbc <sysCallOpenDir(regs*)+0x5f>
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	56                   	push   esi
c0015ca1:	e8 9c 7c ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0015ca6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	89 02                	mov    DWORD PTR [edx],eax
c0015cae:	c1 f8 1f             	sar    eax,0x1f
c0015cb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015cb4:	31 c0                	xor    eax,eax
c0015cb6:	59                   	pop    ecx
c0015cb7:	31 d2                	xor    edx,edx
c0015cb9:	5b                   	pop    ebx
c0015cba:	5e                   	pop    esi
c0015cbb:	c3                   	ret    
c0015cbc:	59                   	pop    ecx
c0015cbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cc2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cc7:	5b                   	pop    ebx
c0015cc8:	5e                   	pop    esi
c0015cc9:	c3                   	ret    

c0015cca <sysCallMakeDir(regs*)>:
c0015cca:	56                   	push   esi
c0015ccb:	53                   	push   ebx
c0015ccc:	83 ec 10             	sub    esp,0x10
c0015ccf:	68 14 01 00 00       	push   0x114
c0015cd4:	e8 33 92 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0015cd9:	83 c4 0c             	add    esp,0xc
c0015cdc:	89 c3                	mov    ebx,eax
c0015cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ce6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cea:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ced:	53                   	push   ebx
c0015cee:	e8 f9 9c ff ff       	call   c000f9ec <Directory::Directory(char const*, Process*)>
c0015cf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf6:	e8 35 9f ff ff       	call   c000fc30 <Directory::create()>
c0015cfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cfe:	89 c6                	mov    esi,eax
c0015d00:	e8 a7 9d ff ff       	call   c000faac <Directory::close()>
c0015d05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d0d:	31 c0                	xor    eax,eax
c0015d0f:	85 f6                	test   esi,esi
c0015d11:	0f 95 c0             	setne  al
c0015d14:	31 d2                	xor    edx,edx
c0015d16:	f7 d8                	neg    eax
c0015d18:	83 d2 00             	adc    edx,0x0
c0015d1b:	83 c4 14             	add    esp,0x14
c0015d1e:	f7 da                	neg    edx
c0015d20:	5b                   	pop    ebx
c0015d21:	5e                   	pop    esi
c0015d22:	c3                   	ret    

c0015d23 <sysCallCloseDir(regs*)>:
c0015d23:	53                   	push   ebx
c0015d24:	83 ec 08             	sub    esp,0x8
c0015d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d2e:	83 f8 02             	cmp    eax,0x2
c0015d31:	76 47                	jbe    c0015d7a <sysCallCloseDir(regs*)+0x57>
c0015d33:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d38:	77 2f                	ja     c0015d69 <sysCallCloseDir(regs*)+0x46>
c0015d3a:	83 ec 0c             	sub    esp,0xc
c0015d3d:	50                   	push   eax
c0015d3e:	e8 b4 7e ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015d43:	89 c3                	mov    ebx,eax
c0015d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d48:	e8 5f 9d ff ff       	call   c000faac <Directory::close()>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	85 db                	test   ebx,ebx
c0015d52:	74 0c                	je     c0015d60 <sysCallCloseDir(regs*)+0x3d>
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d59:	53                   	push   ebx
c0015d5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	31 c0                	xor    eax,eax
c0015d62:	31 d2                	xor    edx,edx
c0015d64:	83 c4 08             	add    esp,0x8
c0015d67:	5b                   	pop    ebx
c0015d68:	c3                   	ret    
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	50                   	push   eax
c0015d6d:	68 c0 1a 02 c0       	push   0xc0021ac0
c0015d72:	e8 84 92 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015d77:	83 c4 10             	add    esp,0x10
c0015d7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d84:	83 c4 08             	add    esp,0x8
c0015d87:	5b                   	pop    ebx
c0015d88:	c3                   	ret    

c0015d89 <sysCallWait(regs*)>:
c0015d89:	83 ec 10             	sub    esp,0x10
c0015d8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d90:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015d93:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015d99:	e8 62 24 00 00       	call   c0018200 <waitTask(int, int*, int)>
c0015d9e:	83 c4 1c             	add    esp,0x1c
c0015da1:	99                   	cdq    
c0015da2:	c3                   	ret    

c0015da3 <sysCallFork(regs*)>:
c0015da3:	83 ec 18             	sub    esp,0x18
c0015da6:	68 9b 1b 02 c0       	push   0xc0021b9b
c0015dab:	e8 4b 92 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015db0:	58                   	pop    eax
c0015db1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db5:	e8 14 22 00 00       	call   c0017fce <forkProcess(regs*)>
c0015dba:	83 c4 1c             	add    esp,0x1c
c0015dbd:	99                   	cdq    
c0015dbe:	c3                   	ret    

c0015dbf <sysCallExecve(regs*)>:
c0015dbf:	53                   	push   ebx
c0015dc0:	81 ec 24 01 00 00    	sub    esp,0x124
c0015dc6:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015dcd:	68 a9 1b 02 c0       	push   0xc0021ba9
c0015dd2:	e8 24 92 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0015dd7:	83 c4 0c             	add    esp,0xc
c0015dda:	68 00 01 00 00       	push   0x100
c0015ddf:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015de3:	50                   	push   eax
c0015de4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015dec:	e8 aa 9a ff ff       	call   c000f89b <getcwd(Process*, char*, int)>
c0015df1:	83 c4 0c             	add    esp,0xc
c0015df4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015df7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015dfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015dfd:	e8 32 25 00 00       	call   c0018334 <execveProcess(char const*, char* const*, char* const*)>
c0015e02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e0c:	81 c4 28 01 00 00    	add    esp,0x128
c0015e12:	5b                   	pop    ebx
c0015e13:	c3                   	ret    

c0015e14 <sysCallRmdir(regs*)>:
c0015e14:	56                   	push   esi
c0015e15:	53                   	push   ebx
c0015e16:	83 ec 10             	sub    esp,0x10
c0015e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e1d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e20:	68 14 01 00 00       	push   0x114
c0015e25:	e8 e2 90 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0015e2a:	83 c4 0c             	add    esp,0xc
c0015e2d:	89 c3                	mov    ebx,eax
c0015e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e34:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e37:	56                   	push   esi
c0015e38:	53                   	push   ebx
c0015e39:	e8 ec 96 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0015e3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e41:	e8 c0 98 ff ff       	call   c000f706 <File::unlink()>
c0015e46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e49:	89 c6                	mov    esi,eax
c0015e4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e50:	31 c0                	xor    eax,eax
c0015e52:	85 f6                	test   esi,esi
c0015e54:	0f 95 c0             	setne  al
c0015e57:	31 d2                	xor    edx,edx
c0015e59:	f7 d8                	neg    eax
c0015e5b:	83 d2 00             	adc    edx,0x0
c0015e5e:	83 c4 14             	add    esp,0x14
c0015e61:	f7 da                	neg    edx
c0015e63:	5b                   	pop    ebx
c0015e64:	5e                   	pop    esi
c0015e65:	c3                   	ret    

c0015e66 <sysCallUnlink(regs*)>:
c0015e66:	56                   	push   esi
c0015e67:	53                   	push   ebx
c0015e68:	83 ec 10             	sub    esp,0x10
c0015e6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e6f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e72:	68 14 01 00 00       	push   0x114
c0015e77:	e8 90 90 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0015e7c:	83 c4 0c             	add    esp,0xc
c0015e7f:	89 c3                	mov    ebx,eax
c0015e81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e89:	56                   	push   esi
c0015e8a:	53                   	push   ebx
c0015e8b:	e8 9a 96 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0015e90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e93:	e8 6e 98 ff ff       	call   c000f706 <File::unlink()>
c0015e98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e9b:	89 c6                	mov    esi,eax
c0015e9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ea2:	31 c0                	xor    eax,eax
c0015ea4:	85 f6                	test   esi,esi
c0015ea6:	0f 95 c0             	setne  al
c0015ea9:	31 d2                	xor    edx,edx
c0015eab:	f7 d8                	neg    eax
c0015ead:	83 d2 00             	adc    edx,0x0
c0015eb0:	83 c4 14             	add    esp,0x14
c0015eb3:	f7 da                	neg    edx
c0015eb5:	5b                   	pop    ebx
c0015eb6:	5e                   	pop    esi
c0015eb7:	c3                   	ret    

c0015eb8 <sysCallGetArgv(regs*)>:
c0015eb8:	83 ec 0c             	sub    esp,0xc
c0015ebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ebf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015ec2:	85 c0                	test   eax,eax
c0015ec4:	78 2b                	js     c0015ef1 <sysCallGetArgv(regs*)+0x39>
c0015ec6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ecc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015ecf:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015ed5:	7d 1a                	jge    c0015ef1 <sysCallGetArgv(regs*)+0x39>
c0015ed7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015ede:	85 c0                	test   eax,eax
c0015ee0:	74 17                	je     c0015ef9 <sysCallGetArgv(regs*)+0x41>
c0015ee2:	83 ec 08             	sub    esp,0x8
c0015ee5:	50                   	push   eax
c0015ee6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015ee9:	e8 b9 a7 fe ff       	call   c00006a7 <strcpy>
c0015eee:	83 c4 10             	add    esp,0x10
c0015ef1:	31 c0                	xor    eax,eax
c0015ef3:	31 d2                	xor    edx,edx
c0015ef5:	83 c4 0c             	add    esp,0xc
c0015ef8:	c3                   	ret    
c0015ef9:	b8 01 00 00 00       	mov    eax,0x1
c0015efe:	31 d2                	xor    edx,edx
c0015f00:	83 c4 0c             	add    esp,0xc
c0015f03:	c3                   	ret    

c0015f04 <sysCallTTYName(regs*)>:
c0015f04:	56                   	push   esi
c0015f05:	53                   	push   ebx
c0015f06:	53                   	push   ebx
c0015f07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f0b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015f0e:	85 c0                	test   eax,eax
c0015f10:	74 5f                	je     c0015f71 <sysCallTTYName(regs*)+0x6d>
c0015f12:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015f15:	83 f8 02             	cmp    eax,0x2
c0015f18:	77 3e                	ja     c0015f58 <sysCallTTYName(regs*)+0x54>
c0015f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f22:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015f28:	85 db                	test   ebx,ebx
c0015f2a:	74 45                	je     c0015f71 <sysCallTTYName(regs*)+0x6d>
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f31:	53                   	push   ebx
c0015f32:	ff 10                	call   DWORD PTR [eax]
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	84 c0                	test   al,al
c0015f39:	74 41                	je     c0015f7c <sysCallTTYName(regs*)+0x78>
c0015f3b:	83 ec 08             	sub    esp,0x8
c0015f3e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015f44:	53                   	push   ebx
c0015f45:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015f48:	e8 5a a7 fe ff       	call   c00006a7 <strcpy>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	31 c0                	xor    eax,eax
c0015f52:	59                   	pop    ecx
c0015f53:	31 d2                	xor    edx,edx
c0015f55:	5b                   	pop    ebx
c0015f56:	5e                   	pop    esi
c0015f57:	c3                   	ret    
c0015f58:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f5d:	74 bb                	je     c0015f1a <sysCallTTYName(regs*)+0x16>
c0015f5f:	83 ec 0c             	sub    esp,0xc
c0015f62:	50                   	push   eax
c0015f63:	e8 8f 7c ff ff       	call   c000dbf7 <getFromFileDescriptor(int)>
c0015f68:	83 c4 10             	add    esp,0x10
c0015f6b:	89 c3                	mov    ebx,eax
c0015f6d:	85 db                	test   ebx,ebx
c0015f6f:	75 bb                	jne    c0015f2c <sysCallTTYName(regs*)+0x28>
c0015f71:	59                   	pop    ecx
c0015f72:	b8 01 00 00 00       	mov    eax,0x1
c0015f77:	31 d2                	xor    edx,edx
c0015f79:	5b                   	pop    ebx
c0015f7a:	5e                   	pop    esi
c0015f7b:	c3                   	ret    
c0015f7c:	59                   	pop    ecx
c0015f7d:	b8 02 00 00 00       	mov    eax,0x2
c0015f82:	31 d2                	xor    edx,edx
c0015f84:	5b                   	pop    ebx
c0015f85:	5e                   	pop    esi
c0015f86:	c3                   	ret    

c0015f87 <sysCallGetEnv(regs*)>:
c0015f87:	83 ec 0c             	sub    esp,0xc
c0015f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015f91:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f94:	85 c9                	test   ecx,ecx
c0015f96:	75 0c                	jne    c0015fa4 <sysCallGetEnv(regs*)+0x1d>
c0015f98:	85 d2                	test   edx,edx
c0015f9a:	74 14                	je     c0015fb0 <sysCallGetEnv(regs*)+0x29>
c0015f9c:	31 c0                	xor    eax,eax
c0015f9e:	31 d2                	xor    edx,edx
c0015fa0:	83 c4 0c             	add    esp,0xc
c0015fa3:	c3                   	ret    
c0015fa4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015fa7:	85 d2                	test   edx,edx
c0015fa9:	74 1b                	je     c0015fc6 <sysCallGetEnv(regs*)+0x3f>
c0015fab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015fae:	eb ec                	jmp    c0015f9c <sysCallGetEnv(regs*)+0x15>
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 e4 1a 02 c0       	push   0xc0021ae4
c0015fb8:	e8 68 a6 fe ff       	call   c0000625 <strlen>
c0015fbd:	83 c4 10             	add    esp,0x10
c0015fc0:	31 d2                	xor    edx,edx
c0015fc2:	83 c4 0c             	add    esp,0xc
c0015fc5:	c3                   	ret    
c0015fc6:	83 ec 08             	sub    esp,0x8
c0015fc9:	68 e4 1a 02 c0       	push   0xc0021ae4
c0015fce:	50                   	push   eax
c0015fcf:	e8 d3 a6 fe ff       	call   c00006a7 <strcpy>
c0015fd4:	83 c4 10             	add    esp,0x10
c0015fd7:	eb c3                	jmp    c0015f9c <sysCallGetEnv(regs*)+0x15>

c0015fd9 <sysCallUSleep(regs*)>:
c0015fd9:	83 ec 14             	sub    esp,0x14
c0015fdc:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015fe1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fe5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015fec:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015fef:	01 ca                	add    edx,ecx
c0015ff1:	52                   	push   edx
c0015ff2:	50                   	push   eax
c0015ff3:	e8 a1 22 00 00       	call   c0018299 <nanoSleep(unsigned long long)>
c0015ff8:	31 c0                	xor    eax,eax
c0015ffa:	31 d2                	xor    edx,edx
c0015ffc:	83 c4 1c             	add    esp,0x1c
c0015fff:	c3                   	ret    

c0016000 <sysCallSpawn(regs*)>:
c0016000:	56                   	push   esi
c0016001:	53                   	push   ebx
c0016002:	53                   	push   ebx
c0016003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016007:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001600a:	85 f6                	test   esi,esi
c001600c:	75 08                	jne    c0016016 <sysCallSpawn(regs*)+0x16>
c001600e:	59                   	pop    ecx
c001600f:	31 c0                	xor    eax,eax
c0016011:	31 d2                	xor    edx,edx
c0016013:	5b                   	pop    ebx
c0016014:	5e                   	pop    esi
c0016015:	c3                   	ret    
c0016016:	83 ec 0c             	sub    esp,0xc
c0016019:	68 b9 1b 02 c0       	push   0xc0021bb9
c001601e:	e8 d8 8f ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0016023:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c001602a:	e8 dd 8e ff ff       	call   c000ef0c <operator new(unsigned long)>
c001602f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016032:	89 c6                	mov    esi,eax
c0016034:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016039:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001603c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001603f:	56                   	push   esi
c0016040:	e8 43 18 00 00       	call   c0017888 <Process::Process(char const*, Process*, char**)>
c0016045:	83 c4 20             	add    esp,0x20
c0016048:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001604f:	75 bd                	jne    c001600e <sysCallSpawn(regs*)+0xe>
c0016051:	83 ec 0c             	sub    esp,0xc
c0016054:	68 c4 1b 02 c0       	push   0xc0021bc4
c0016059:	e8 9d 8f ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001605e:	89 34 24             	mov    DWORD PTR [esp],esi
c0016061:	e8 88 1d 00 00       	call   c0017dee <Process::createUserThread()>
c0016066:	8b 06                	mov    eax,DWORD PTR [esi]
c0016068:	83 c4 10             	add    esp,0x10
c001606b:	99                   	cdq    
c001606c:	59                   	pop    ecx
c001606d:	5b                   	pop    ebx
c001606e:	5e                   	pop    esi
c001606f:	c3                   	ret    

c0016070 <sysAppSettings(regs*)>:
c0016070:	53                   	push   ebx
c0016071:	83 ec 08             	sub    esp,0x8
c0016074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016078:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001607b:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016081:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016086:	66 3d c0 09          	cmp    ax,0x9c0
c001608a:	75 2f                	jne    c00160bb <sysAppSettings(regs*)+0x4b>
c001608c:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016092:	83 e0 1f             	and    eax,0x1f
c0016095:	3c 01                	cmp    al,0x1
c0016097:	74 2e                	je     c00160c7 <sysAppSettings(regs*)+0x57>
c0016099:	3c 07                	cmp    al,0x7
c001609b:	0f 84 bd 00 00 00    	je     c001615e <sysAppSettings(regs*)+0xee>
c00160a1:	84 c0                	test   al,al
c00160a3:	0f 84 dc 00 00 00    	je     c0016185 <sysAppSettings(regs*)+0x115>
c00160a9:	3c 08                	cmp    al,0x8
c00160ab:	74 6d                	je     c001611a <sysAppSettings(regs*)+0xaa>
c00160ad:	0f b6 c0             	movzx  eax,al
c00160b0:	83 c4 08             	add    esp,0x8
c00160b3:	05 e8 03 00 00       	add    eax,0x3e8
c00160b8:	5b                   	pop    ebx
c00160b9:	99                   	cdq    
c00160ba:	c3                   	ret    
c00160bb:	b8 01 00 00 00       	mov    eax,0x1
c00160c0:	31 d2                	xor    edx,edx
c00160c2:	83 c4 08             	add    esp,0x8
c00160c5:	5b                   	pop    ebx
c00160c6:	c3                   	ret    
c00160c7:	51                   	push   ecx
c00160c8:	68 00 01 00 00       	push   0x100
c00160cd:	6a 00                	push   0x0
c00160cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160d7:	83 c0 0c             	add    eax,0xc
c00160da:	50                   	push   eax
c00160db:	e8 28 a5 fe ff       	call   c0000608 <memset>
c00160e0:	83 c4 0c             	add    esp,0xc
c00160e3:	68 ff 00 00 00       	push   0xff
c00160e8:	53                   	push   ebx
c00160e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160f1:	83 c0 0c             	add    eax,0xc
c00160f4:	50                   	push   eax
c00160f5:	e8 d8 a4 fe ff       	call   c00005d2 <memcpy>
c00160fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ff:	5b                   	pop    ebx
c0016100:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016103:	5a                   	pop    edx
c0016104:	8d 50 0c             	lea    edx,[eax+0xc]
c0016107:	52                   	push   edx
c0016108:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001610e:	e8 2d 6c ff ff       	call   c000cd40 <VgaText::setTitle(char*)>
c0016113:	83 c4 10             	add    esp,0x10
c0016116:	31 c0                	xor    eax,eax
c0016118:	eb a6                	jmp    c00160c0 <sysAppSettings(regs*)+0x50>
c001611a:	83 ec 08             	sub    esp,0x8
c001611d:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016123:	83 e0 0f             	and    eax,0xf
c0016126:	50                   	push   eax
c0016127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001612c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001612f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016135:	e8 f6 6b ff ff       	call   c000cd30 <VgaText::setTitleColour(VgaColour)>
c001613a:	58                   	pop    eax
c001613b:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016141:	5a                   	pop    edx
c0016142:	c1 e8 04             	shr    eax,0x4
c0016145:	83 e0 0f             	and    eax,0xf
c0016148:	50                   	push   eax
c0016149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001614e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016151:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016157:	e8 c4 6b ff ff       	call   c000cd20 <VgaText::setTitleTextColour(VgaColour)>
c001615c:	eb b5                	jmp    c0016113 <sysAppSettings(regs*)+0xa3>
c001615e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016163:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016166:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001616c:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016172:	c0 e8 06             	shr    al,0x6
c0016175:	83 e0 01             	and    eax,0x1
c0016178:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001617e:	31 c0                	xor    eax,eax
c0016180:	e9 3b ff ff ff       	jmp    c00160c0 <sysAppSettings(regs*)+0x50>
c0016185:	b8 02 00 00 00       	mov    eax,0x2
c001618a:	e9 31 ff ff ff       	jmp    c00160c0 <sysAppSettings(regs*)+0x50>

c001618f <sysSetFatAttrib(regs*)>:
c001618f:	57                   	push   edi
c0016190:	56                   	push   esi
c0016191:	53                   	push   ebx
c0016192:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016196:	83 ec 0c             	sub    esp,0xc
c0016199:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001619c:	68 14 01 00 00       	push   0x114
c00161a1:	e8 66 8d ff ff       	call   c000ef0c <operator new(unsigned long)>
c00161a6:	83 c4 0c             	add    esp,0xc
c00161a9:	89 c3                	mov    ebx,eax
c00161ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161b3:	57                   	push   edi
c00161b4:	53                   	push   ebx
c00161b5:	e8 70 93 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c00161ba:	83 c4 0c             	add    esp,0xc
c00161bd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161c0:	0f b6 d4             	movzx  edx,ah
c00161c3:	0f b6 c0             	movzx  eax,al
c00161c6:	52                   	push   edx
c00161c7:	50                   	push   eax
c00161c8:	53                   	push   ebx
c00161c9:	e8 d2 95 ff ff       	call   c000f7a0 <File::chfatattr(unsigned char, unsigned char)>
c00161ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161d1:	89 c6                	mov    esi,eax
c00161d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	31 c0                	xor    eax,eax
c00161dd:	5b                   	pop    ebx
c00161de:	85 f6                	test   esi,esi
c00161e0:	5e                   	pop    esi
c00161e1:	0f 95 c0             	setne  al
c00161e4:	5f                   	pop    edi
c00161e5:	31 d2                	xor    edx,edx
c00161e7:	f7 d8                	neg    eax
c00161e9:	83 d2 00             	adc    edx,0x0
c00161ec:	f7 da                	neg    edx
c00161ee:	c3                   	ret    

c00161ef <sysPanic(regs*)>:
c00161ef:	83 ec 18             	sub    esp,0x18
c00161f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00161f9:	e8 92 ea ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c00161fe:	c7 04 24 d1 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bd1
c0016205:	e8 86 ea ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001620a:	b8 01 00 00 00       	mov    eax,0x1
c001620f:	31 d2                	xor    edx,edx
c0016211:	83 c4 1c             	add    esp,0x1c
c0016214:	c3                   	ret    

c0016215 <sysPipe(regs*)>:
c0016215:	57                   	push   edi
c0016216:	56                   	push   esi
c0016217:	53                   	push   ebx
c0016218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016222:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016225:	6a 20                	push   0x20
c0016227:	e8 e0 8c ff ff       	call   c000ef0c <operator new(unsigned long)>
c001622c:	89 c3                	mov    ebx,eax
c001622e:	58                   	pop    eax
c001622f:	5a                   	pop    edx
c0016230:	68 00 50 00 00       	push   0x5000
c0016235:	53                   	push   ebx
c0016236:	e8 43 64 ff ff       	call   c000c67e <Pipe::Pipe(int)>
c001623b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001623e:	e8 ff 76 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0016243:	89 07                	mov    DWORD PTR [edi],eax
c0016245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016248:	e8 f5 76 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	89 06                	mov    DWORD PTR [esi],eax
c0016252:	31 d2                	xor    edx,edx
c0016254:	5b                   	pop    ebx
c0016255:	31 c0                	xor    eax,eax
c0016257:	5e                   	pop    esi
c0016258:	5f                   	pop    edi
c0016259:	c3                   	ret    

c001625a <sysGetUnixTime(regs*)>:
c001625a:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001625f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016265:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016269:	e9 84 9c ff ff       	jmp    c000fef2 <Clock::timeInSecondsLocal()>

c001626e <string_ends_with(char const*, char const*)>:
c001626e:	57                   	push   edi
c001626f:	56                   	push   esi
c0016270:	53                   	push   ebx
c0016271:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016275:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016279:	83 ec 0c             	sub    esp,0xc
c001627c:	53                   	push   ebx
c001627d:	e8 a3 a3 fe ff       	call   c0000625 <strlen>
c0016282:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016285:	89 c6                	mov    esi,eax
c0016287:	e8 99 a3 fe ff       	call   c0000625 <strlen>
c001628c:	83 c4 10             	add    esp,0x10
c001628f:	39 c6                	cmp    esi,eax
c0016291:	7d 06                	jge    c0016299 <string_ends_with(char const*, char const*)+0x2b>
c0016293:	5b                   	pop    ebx
c0016294:	31 c0                	xor    eax,eax
c0016296:	5e                   	pop    esi
c0016297:	5f                   	pop    edi
c0016298:	c3                   	ret    
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	29 c6                	sub    esi,eax
c001629e:	57                   	push   edi
c001629f:	01 f3                	add    ebx,esi
c00162a1:	53                   	push   ebx
c00162a2:	e8 51 a4 fe ff       	call   c00006f8 <strcmp>
c00162a7:	83 c4 10             	add    esp,0x10
c00162aa:	85 c0                	test   eax,eax
c00162ac:	5b                   	pop    ebx
c00162ad:	0f 94 c0             	sete   al
c00162b0:	5e                   	pop    esi
c00162b1:	0f b6 c0             	movzx  eax,al
c00162b4:	5f                   	pop    edi
c00162b5:	c3                   	ret    

c00162b6 <sysCallOpen(regs*)>:
c00162b6:	56                   	push   esi
c00162b7:	53                   	push   ebx
c00162b8:	81 ec 04 01 00 00    	sub    esp,0x104
c00162be:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162c8:	85 d2                	test   edx,edx
c00162ca:	0f 84 c1 00 00 00    	je     c0016391 <sysCallOpen(regs*)+0xdb>
c00162d0:	50                   	push   eax
c00162d1:	68 e0 1b 02 c0       	push   0xc0021be0
c00162d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162d9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00162dd:	56                   	push   esi
c00162de:	e8 9d 90 ff ff       	call   c000f380 <standardiseFiles(char*, char const*, char const*)>
c00162e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00162e6:	e8 3a a3 fe ff       	call   c0000625 <strlen>
c00162eb:	83 c4 10             	add    esp,0x10
c00162ee:	48                   	dec    eax
c00162ef:	74 1d                	je     c001630e <sysCallOpen(regs*)+0x58>
c00162f1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00162f4:	eb 0f                	jmp    c0016305 <sysCallOpen(regs*)+0x4f>
c00162f6:	80 fa 3a             	cmp    dl,0x3a
c00162f9:	74 0f                	je     c001630a <sysCallOpen(regs*)+0x54>
c00162fb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00162ff:	48                   	dec    eax
c0016300:	74 0c                	je     c001630e <sysCallOpen(regs*)+0x58>
c0016302:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016305:	80 fa 2e             	cmp    dl,0x2e
c0016308:	75 ec                	jne    c00162f6 <sysCallOpen(regs*)+0x40>
c001630a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001630e:	83 ec 08             	sub    esp,0x8
c0016311:	68 e4 1b 02 c0       	push   0xc0021be4
c0016316:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016319:	e8 50 ff ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	85 c0                	test   eax,eax
c0016323:	75 2e                	jne    c0016353 <sysCallOpen(regs*)+0x9d>
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	68 05 1c 02 c0       	push   0xc0021c05
c001632d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016330:	e8 39 ff ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	85 c0                	test   eax,eax
c001633a:	75 17                	jne    c0016353 <sysCallOpen(regs*)+0x9d>
c001633c:	83 ec 08             	sub    esp,0x8
c001633f:	68 e5 1b 02 c0       	push   0xc0021be5
c0016344:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016347:	e8 ac a3 fe ff       	call   c00006f8 <strcmp>
c001634c:	83 c4 10             	add    esp,0x10
c001634f:	85 c0                	test   eax,eax
c0016351:	75 51                	jne    c00163a4 <sysCallOpen(regs*)+0xee>
c0016353:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016356:	83 ec 08             	sub    esp,0x8
c0016359:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001635f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016366:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016369:	ff 30                	push   DWORD PTR [eax]
c001636b:	68 e9 1b 02 c0       	push   0xc0021be9
c0016370:	e8 86 8c ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0016375:	c7 04 24 f8 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bf8
c001637c:	e8 7a 8c ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	81 c4 04 01 00 00    	add    esp,0x104
c001638a:	31 c0                	xor    eax,eax
c001638c:	31 d2                	xor    edx,edx
c001638e:	5b                   	pop    ebx
c001638f:	5e                   	pop    esi
c0016390:	c3                   	ret    
c0016391:	81 c4 04 01 00 00    	add    esp,0x104
c0016397:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001639c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163a1:	5b                   	pop    ebx
c00163a2:	5e                   	pop    esi
c00163a3:	c3                   	ret    
c00163a4:	83 ec 08             	sub    esp,0x8
c00163a7:	68 e4 1b 02 c0       	push   0xc0021be4
c00163ac:	56                   	push   esi
c00163ad:	e8 bc fe ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	85 c0                	test   eax,eax
c00163b7:	75 9a                	jne    c0016353 <sysCallOpen(regs*)+0x9d>
c00163b9:	83 ec 08             	sub    esp,0x8
c00163bc:	68 0a 1c 02 c0       	push   0xc0021c0a
c00163c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163c4:	e8 a5 fe ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	85 c0                	test   eax,eax
c00163ce:	0f 85 d1 00 00 00    	jne    c00164a5 <sysCallOpen(regs*)+0x1ef>
c00163d4:	83 ec 08             	sub    esp,0x8
c00163d7:	68 0f 1c 02 c0       	push   0xc0021c0f
c00163dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163df:	e8 8a fe ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c00163e4:	83 c4 10             	add    esp,0x10
c00163e7:	85 c0                	test   eax,eax
c00163e9:	0f 85 b6 00 00 00    	jne    c00164a5 <sysCallOpen(regs*)+0x1ef>
c00163ef:	83 ec 08             	sub    esp,0x8
c00163f2:	68 0b 1c 02 c0       	push   0xc0021c0b
c00163f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163fa:	e8 f9 a2 fe ff       	call   c00006f8 <strcmp>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	85 c0                	test   eax,eax
c0016404:	0f 84 9b 00 00 00    	je     c00164a5 <sysCallOpen(regs*)+0x1ef>
c001640a:	83 ec 08             	sub    esp,0x8
c001640d:	68 0a 1c 02 c0       	push   0xc0021c0a
c0016412:	56                   	push   esi
c0016413:	e8 56 fe ff ff       	call   c001626e <string_ends_with(char const*, char const*)>
c0016418:	83 c4 10             	add    esp,0x10
c001641b:	85 c0                	test   eax,eax
c001641d:	0f 85 82 00 00 00    	jne    c00164a5 <sysCallOpen(regs*)+0x1ef>
c0016423:	83 ec 0c             	sub    esp,0xc
c0016426:	68 14 01 00 00       	push   0x114
c001642b:	e8 dc 8a ff ff       	call   c000ef0c <operator new(unsigned long)>
c0016430:	83 c4 0c             	add    esp,0xc
c0016433:	89 c6                	mov    esi,eax
c0016435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001643a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001643d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016440:	56                   	push   esi
c0016441:	e8 e4 90 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0016446:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	0f b6 c2             	movzx  eax,dl
c001644f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016452:	89 d0                	mov    eax,edx
c0016454:	83 e0 01             	and    eax,0x1
c0016457:	f6 c2 02             	test   dl,0x2
c001645a:	74 03                	je     c001645f <sysCallOpen(regs*)+0x1a9>
c001645c:	83 c8 02             	or     eax,0x2
c001645f:	f6 c2 04             	test   dl,0x4
c0016462:	74 03                	je     c0016467 <sysCallOpen(regs*)+0x1b1>
c0016464:	83 c8 04             	or     eax,0x4
c0016467:	f6 c2 08             	test   dl,0x8
c001646a:	74 03                	je     c001646f <sysCallOpen(regs*)+0x1b9>
c001646c:	83 c8 0a             	or     eax,0xa
c001646f:	83 e2 10             	and    edx,0x10
c0016472:	74 03                	je     c0016477 <sysCallOpen(regs*)+0x1c1>
c0016474:	83 c8 12             	or     eax,0x12
c0016477:	83 ec 08             	sub    esp,0x8
c001647a:	50                   	push   eax
c001647b:	56                   	push   esi
c001647c:	e8 0d 91 ff ff       	call   c000f58e <File::open(FileOpenMode)>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	85 c0                	test   eax,eax
c0016486:	0f 85 05 ff ff ff    	jne    c0016391 <sysCallOpen(regs*)+0xdb>
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	56                   	push   esi
c0016490:	e8 ad 74 ff ff       	call   c000d942 <UnixFile::getFileDescriptor()>
c0016495:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016498:	89 02                	mov    DWORD PTR [edx],eax
c001649a:	c1 f8 1f             	sar    eax,0x1f
c001649d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164a0:	e9 dc fe ff ff       	jmp    c0016381 <sysCallOpen(regs*)+0xcb>
c00164a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00164a8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00164ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00164b5:	e9 ca fe ff ff       	jmp    c0016384 <sysCallOpen(regs*)+0xce>

c00164ba <setupSystemCalls()>:
c00164ba:	c7 05 e0 41 02 c0 ac 56 01 c0 	mov    DWORD PTR ds:0xc00241e0,0xc00156ac
c00164c4:	c7 05 e4 41 02 c0 bf 54 01 c0 	mov    DWORD PTR ds:0xc00241e4,0xc00154bf
c00164ce:	c7 05 e8 41 02 c0 d4 55 01 c0 	mov    DWORD PTR ds:0xc00241e8,0xc00155d4
c00164d8:	c7 05 ec 41 02 c0 29 56 01 c0 	mov    DWORD PTR ds:0xc00241ec,0xc0015629
c00164e2:	c7 05 f0 41 02 c0 6c 55 01 c0 	mov    DWORD PTR ds:0xc00241f0,0xc001556c
c00164ec:	c7 05 f4 41 02 c0 c6 56 01 c0 	mov    DWORD PTR ds:0xc00241f4,0xc00156c6
c00164f6:	c7 05 f8 41 02 c0 55 58 01 c0 	mov    DWORD PTR ds:0xc00241f8,0xc0015855
c0016500:	c7 05 fc 41 02 c0 74 58 01 c0 	mov    DWORD PTR ds:0xc00241fc,0xc0015874
c001650a:	c7 05 04 42 02 c0 d5 5b 01 c0 	mov    DWORD PTR ds:0xc0024204,0xc0015bd5
c0016514:	c7 05 00 42 02 c0 b6 62 01 c0 	mov    DWORD PTR ds:0xc0024200,0xc00162b6
c001651e:	c7 05 08 42 02 c0 5d 5c 01 c0 	mov    DWORD PTR ds:0xc0024208,0xc0015c5d
c0016528:	c7 05 0c 42 02 c0 d3 58 01 c0 	mov    DWORD PTR ds:0xc002420c,0xc00158d3
c0016532:	c7 05 10 42 02 c0 d2 56 01 c0 	mov    DWORD PTR ds:0xc0024210,0xc00156d2
c001653c:	c7 05 14 42 02 c0 d7 56 01 c0 	mov    DWORD PTR ds:0xc0024214,0xc00156d7
c0016546:	c7 05 18 42 02 c0 ca 5c 01 c0 	mov    DWORD PTR ds:0xc0024218,0xc0015cca
c0016550:	c7 05 1c 42 02 c0 23 5d 01 c0 	mov    DWORD PTR ds:0xc002421c,0xc0015d23
c001655a:	c7 05 20 42 02 c0 bb 59 01 c0 	mov    DWORD PTR ds:0xc0024220,0xc00159bb
c0016564:	c7 05 24 42 02 c0 24 5a 01 c0 	mov    DWORD PTR ds:0xc0024224,0xc0015a24
c001656e:	c7 05 28 42 02 c0 52 5b 01 c0 	mov    DWORD PTR ds:0xc0024228,0xc0015b52
c0016578:	c7 05 2c 42 02 c0 dc 56 01 c0 	mov    DWORD PTR ds:0xc002422c,0xc00156dc
c0016582:	c7 05 30 42 02 c0 89 5d 01 c0 	mov    DWORD PTR ds:0xc0024230,0xc0015d89
c001658c:	c7 05 34 42 02 c0 a3 5d 01 c0 	mov    DWORD PTR ds:0xc0024234,0xc0015da3
c0016596:	c7 05 38 42 02 c0 bf 5d 01 c0 	mov    DWORD PTR ds:0xc0024238,0xc0015dbf
c00165a0:	c7 05 3c 42 02 c0 14 5e 01 c0 	mov    DWORD PTR ds:0xc002423c,0xc0015e14
c00165aa:	c7 05 40 42 02 c0 66 5e 01 c0 	mov    DWORD PTR ds:0xc0024240,0xc0015e66
c00165b4:	c7 05 44 42 02 c0 e6 56 01 c0 	mov    DWORD PTR ds:0xc0024244,0xc00156e6
c00165be:	c7 05 48 42 02 c0 b8 5e 01 c0 	mov    DWORD PTR ds:0xc0024248,0xc0015eb8
c00165c8:	c7 05 4c 42 02 c0 90 58 01 c0 	mov    DWORD PTR ds:0xc002424c,0xc0015890
c00165d2:	c7 05 50 42 02 c0 04 5f 01 c0 	mov    DWORD PTR ds:0xc0024250,0xc0015f04
c00165dc:	c7 05 54 42 02 c0 61 59 01 c0 	mov    DWORD PTR ds:0xc0024254,0xc0015961
c00165e6:	c7 05 58 42 02 c0 d9 5f 01 c0 	mov    DWORD PTR ds:0xc0024258,0xc0015fd9
c00165f0:	c7 05 5c 42 02 c0 a1 5a 01 c0 	mov    DWORD PTR ds:0xc002425c,0xc0015aa1
c00165fa:	c7 05 60 42 02 c0 00 60 01 c0 	mov    DWORD PTR ds:0xc0024260,0xc0016000
c0016604:	c7 05 64 42 02 c0 87 5f 01 c0 	mov    DWORD PTR ds:0xc0024264,0xc0015f87
c001660e:	c7 05 68 42 02 c0 70 60 01 c0 	mov    DWORD PTR ds:0xc0024268,0xc0016070
c0016618:	c7 05 6c 42 02 c0 f6 56 01 c0 	mov    DWORD PTR ds:0xc002426c,0xc00156f6
c0016622:	c7 05 70 42 02 c0 60 57 01 c0 	mov    DWORD PTR ds:0xc0024270,0xc0015760
c001662c:	c7 05 74 42 02 c0 a6 57 01 c0 	mov    DWORD PTR ds:0xc0024274,0xc00157a6
c0016636:	c7 05 78 42 02 c0 8f 61 01 c0 	mov    DWORD PTR ds:0xc0024278,0xc001618f
c0016640:	c7 05 7c 42 02 c0 ef 61 01 c0 	mov    DWORD PTR ds:0xc002427c,0xc00161ef
c001664a:	c7 05 80 42 02 c0 f7 57 01 c0 	mov    DWORD PTR ds:0xc0024280,0xc00157f7
c0016654:	c7 05 84 42 02 c0 15 62 01 c0 	mov    DWORD PTR ds:0xc0024284,0xc0016215
c001665e:	c7 05 88 42 02 c0 5a 62 01 c0 	mov    DWORD PTR ds:0xc0024288,0xc001625a
c0016668:	c7 05 8c 42 02 c0 d7 54 01 c0 	mov    DWORD PTR ds:0xc002428c,0xc00154d7
c0016672:	c3                   	ret    

c0016673 <systemCall(regs*, void*)>:
c0016673:	53                   	push   ebx
c0016674:	83 ec 08             	sub    esp,0x8
c0016677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001667b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001667e:	83 f8 7f             	cmp    eax,0x7f
c0016681:	77 29                	ja     c00166ac <systemCall(regs*, void*)+0x39>
c0016683:	83 3c 85 e0 41 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdbe20],0x0
c001668b:	74 1f                	je     c00166ac <systemCall(regs*, void*)+0x39>
c001668d:	51                   	push   ecx
c001668e:	51                   	push   ecx
c001668f:	50                   	push   eax
c0016690:	68 14 1c 02 c0       	push   0xc0021c14
c0016695:	e8 61 89 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001669a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001669d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166a0:	ff 14 85 e0 41 02 c0 	call   DWORD PTR [eax*4-0x3ffdbe20]
c00166a7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166aa:	eb 0d                	jmp    c00166b9 <systemCall(regs*, void*)+0x46>
c00166ac:	52                   	push   edx
c00166ad:	52                   	push   edx
c00166ae:	50                   	push   eax
c00166af:	68 22 1c 02 c0       	push   0xc0021c22
c00166b4:	e8 42 89 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00166b9:	83 c4 10             	add    esp,0x10
c00166bc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00166c1:	31 d2                	xor    edx,edx
c00166c3:	83 c4 08             	add    esp,0x8
c00166c6:	5b                   	pop    ebx
c00166c7:	c3                   	ret    

c00166c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00166c8:	55                   	push   ebp
c00166c9:	89 e5                	mov    ebp,esp
c00166cb:	57                   	push   edi
c00166cc:	56                   	push   esi
c00166cd:	53                   	push   ebx
c00166ce:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166d4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00166d7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00166da:	85 c0                	test   eax,eax
c00166dc:	0f 95 c1             	setne  cl
c00166df:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00166e3:	0f 94 c2             	sete   dl
c00166e6:	84 d1                	test   cl,dl
c00166e8:	74 26                	je     c0016710 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166ea:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00166f1:	74 1d                	je     c0016710 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166f3:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00166f6:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c00166fc:	89 d6                	mov    esi,edx
c00166fe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016704:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001670a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001670d:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	05 ff 0f 00 00       	add    eax,0xfff
c0016718:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001671b:	6a 01                	push   0x1
c001671d:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016723:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016729:	e8 4d 76 ff ff       	call   c000dd7b <Virt::allocateKernelVirtualPages(int)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	89 c6                	mov    esi,eax
c0016733:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016739:	0f 86 21 01 00 00    	jbe    c0016860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001673f:	c1 eb 0c             	shr    ebx,0xc
c0016742:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001674c:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016752:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016755:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016758:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001675e:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016761:	29 d8                	sub    eax,ebx
c0016763:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016769:	0f 83 f4 00 00 00    	jae    c0016863 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001676f:	83 ec 0c             	sub    esp,0xc
c0016772:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016778:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001677b:	3d 00 10 00 00       	cmp    eax,0x1000
c0016780:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016782:	52                   	push   edx
c0016783:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016789:	52                   	push   edx
c001678a:	76 05                	jbe    c0016791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001678c:	b8 00 10 00 00       	mov    eax,0x1000
c0016791:	31 d2                	xor    edx,edx
c0016793:	52                   	push   edx
c0016794:	50                   	push   eax
c0016795:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016798:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001679b:	83 c4 20             	add    esp,0x20
c001679e:	85 c0                	test   eax,eax
c00167a0:	74 1f                	je     c00167c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00167a2:	51                   	push   ecx
c00167a3:	51                   	push   ecx
c00167a4:	50                   	push   eax
c00167a5:	68 36 1c 02 c0       	push   0xc0021c36
c00167aa:	e8 4c 88 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00167af:	89 34 24             	mov    DWORD PTR [esp],esi
c00167b2:	e8 fa 78 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	31 c0                	xor    eax,eax
c00167bc:	e9 7c 01 00 00       	jmp    c001693d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00167c1:	e8 1a 14 00 00       	call   c0017be0 <lockScheduler()>
c00167c6:	e8 fd 59 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c00167cb:	6a 07                	push   0x7
c00167cd:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00167d3:	56                   	push   esi
c00167d4:	50                   	push   eax
c00167d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167db:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167de:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167e4:	e8 c9 7b ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167e9:	83 c4 0c             	add    esp,0xc
c00167ec:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167f2:	6a 00                	push   0x0
c00167f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167fa:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167fd:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016803:	e8 08 7a ff ff       	call   c000e210 <VAS::mapOtherVASIn(bool, VAS*)>
c0016808:	58                   	pop    eax
c0016809:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001680f:	5a                   	pop    edx
c0016810:	68 07 04 00 00       	push   0x407
c0016815:	53                   	push   ebx
c0016816:	81 c3 00 10 00 00    	add    ebx,0x1000
c001681c:	50                   	push   eax
c001681d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016823:	6a 00                	push   0x0
c0016825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001682d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016833:	e8 7a 82 ff ff       	call   c000eab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016838:	83 c4 1c             	add    esp,0x1c
c001683b:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016841:	68 00 10 00 00       	push   0x1000
c0016846:	50                   	push   eax
c0016847:	56                   	push   esi
c0016848:	e8 85 9d fe ff       	call   c00005d2 <memcpy>
c001684d:	e8 90 13 00 00       	call   c0017be2 <unlockScheduler()>
c0016852:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016858:	83 c4 10             	add    esp,0x10
c001685b:	e9 f5 fe ff ff       	jmp    c0016755 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0016860:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016863:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001686d:	0f 86 bc 00 00 00    	jbe    c001692f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0016873:	e8 68 13 00 00       	call   c0017be0 <lockScheduler()>
c0016878:	51                   	push   ecx
c0016879:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001687f:	6a 00                	push   0x0
c0016881:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016886:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016889:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001688f:	e8 7c 79 ff ff       	call   c000e210 <VAS::mapOtherVASIn(bool, VAS*)>
c0016894:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	c1 e8 0c             	shr    eax,0xc
c00168a0:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00168aa:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00168b0:	e8 13 59 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c00168b5:	6a 07                	push   0x7
c00168b7:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00168bd:	56                   	push   esi
c00168be:	50                   	push   eax
c00168bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168c5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00168c8:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00168ce:	e8 df 7a ff ff       	call   c000e3b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00168d3:	58                   	pop    eax
c00168d4:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00168da:	5a                   	pop    edx
c00168db:	68 07 04 00 00       	push   0x407
c00168e0:	53                   	push   ebx
c00168e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00168e7:	50                   	push   eax
c00168e8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00168ee:	6a 00                	push   0x0
c00168f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168f8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168fe:	e8 af 81 ff ff       	call   c000eab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016903:	83 c4 1c             	add    esp,0x1c
c0016906:	68 00 10 00 00       	push   0x1000
c001690b:	6a 00                	push   0x0
c001690d:	56                   	push   esi
c001690e:	e8 f5 9c fe ff       	call   c0000608 <memset>
c0016913:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016922:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016928:	77 86                	ja     c00168b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001692a:	e8 b3 12 00 00       	call   c0017be2 <unlockScheduler()>
c001692f:	83 ec 0c             	sub    esp,0xc
c0016932:	56                   	push   esi
c0016933:	e8 79 77 ff ff       	call   c000e0b1 <Virt::freeKernelVirtualPages(unsigned long)>
c0016938:	83 c4 10             	add    esp,0x10
c001693b:	b0 01                	mov    al,0x1
c001693d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016940:	5b                   	pop    ebx
c0016941:	5e                   	pop    esi
c0016942:	5f                   	pop    edi
c0016943:	5d                   	pop    ebp
c0016944:	c3                   	ret    

c0016945 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016945:	55                   	push   ebp
c0016946:	57                   	push   edi
c0016947:	56                   	push   esi
c0016948:	53                   	push   ebx
c0016949:	83 ec 48             	sub    esp,0x48
c001694c:	68 14 01 00 00       	push   0x114
c0016951:	e8 b6 85 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0016956:	83 c4 0c             	add    esp,0xc
c0016959:	89 c6                	mov    esi,eax
c001695b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001695f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016963:	50                   	push   eax
c0016964:	e8 c1 8b ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0016969:	58                   	pop    eax
c001696a:	5a                   	pop    edx
c001696b:	6a 01                	push   0x1
c001696d:	56                   	push   esi
c001696e:	e8 1b 8c ff ff       	call   c000f58e <File::open(FileOpenMode)>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	85 c0                	test   eax,eax
c0016978:	0f 85 47 01 00 00    	jne    c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001697e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016986:	83 ec 0c             	sub    esp,0xc
c0016989:	6a 34                	push   0x34
c001698b:	e8 8e 52 ff ff       	call   c000bc1e <malloc>
c0016990:	89 c3                	mov    ebx,eax
c0016992:	58                   	pop    eax
c0016993:	8b 06                	mov    eax,DWORD PTR [esi]
c0016995:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016999:	57                   	push   edi
c001699a:	53                   	push   ebx
c001699b:	6a 00                	push   0x0
c001699d:	6a 34                	push   0x34
c001699f:	56                   	push   esi
c00169a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169a3:	83 c4 20             	add    esp,0x20
c00169a6:	85 c0                	test   eax,eax
c00169a8:	0f 85 17 01 00 00    	jne    c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169ae:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00169b4:	0f 85 0b 01 00 00    	jne    c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169bd:	85 c0                	test   eax,eax
c00169bf:	0f 84 00 01 00 00    	je     c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169c5:	31 d2                	xor    edx,edx
c00169c7:	55                   	push   ebp
c00169c8:	52                   	push   edx
c00169c9:	50                   	push   eax
c00169ca:	56                   	push   esi
c00169cb:	e8 7c 8c ff ff       	call   c000f64c <File::seek(unsigned long long)>
c00169d0:	83 c4 10             	add    esp,0x10
c00169d3:	85 c0                	test   eax,eax
c00169d5:	0f 85 ea 00 00 00    	jne    c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169e1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00169e9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00169ed:	0f af c2             	imul   eax,edx
c00169f0:	50                   	push   eax
c00169f1:	e8 28 52 ff ff       	call   c000bc1e <malloc>
c00169f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a03:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a07:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a0b:	0f af c2             	imul   eax,edx
c0016a0e:	99                   	cdq    
c0016a0f:	52                   	push   edx
c0016a10:	50                   	push   eax
c0016a11:	56                   	push   esi
c0016a12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a15:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016a18:	83 c4 20             	add    esp,0x20
c0016a1b:	85 c0                	test   eax,eax
c0016a1d:	0f 84 a2 00 00 00    	je     c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a23:	31 d2                	xor    edx,edx
c0016a25:	51                   	push   ecx
c0016a26:	52                   	push   edx
c0016a27:	50                   	push   eax
c0016a28:	56                   	push   esi
c0016a29:	e8 1e 8c ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	85 c0                	test   eax,eax
c0016a33:	0f 85 8c 00 00 00    	jne    c0016ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a39:	83 ec 0c             	sub    esp,0xc
c0016a3c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a40:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a44:	31 ed                	xor    ebp,ebp
c0016a46:	0f af c2             	imul   eax,edx
c0016a49:	50                   	push   eax
c0016a4a:	e8 cf 51 ff ff       	call   c000bc1e <malloc>
c0016a4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a5c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a60:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a64:	0f af c2             	imul   eax,edx
c0016a67:	99                   	cdq    
c0016a68:	52                   	push   edx
c0016a69:	50                   	push   eax
c0016a6a:	56                   	push   esi
c0016a6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a6e:	83 c4 20             	add    esp,0x20
c0016a71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a79:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016a7d:	0f 86 80 00 00 00    	jbe    c0016b03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016a83:	0f b7 fd             	movzx  edi,bp
c0016a86:	c1 e7 05             	shl    edi,0x5
c0016a89:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016a8d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016a90:	75 6b                	jne    c0016afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a92:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016a95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a99:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016a9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016aa0:	52                   	push   edx
c0016aa1:	31 d2                	xor    edx,edx
c0016aa3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016aa6:	52                   	push   edx
c0016aa7:	50                   	push   eax
c0016aa8:	56                   	push   esi
c0016aa9:	e8 9e 8b ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	85 c0                	test   eax,eax
c0016ab3:	74 17                	je     c0016acc <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016ab5:	83 ec 0c             	sub    esp,0xc
c0016ab8:	68 61 1c 02 c0       	push   0xc0021c61
c0016abd:	e8 39 85 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	31 c0                	xor    eax,eax
c0016ac7:	e9 87 00 00 00       	jmp    c0016b53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016ad2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016ad5:	50                   	push   eax
c0016ad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ade:	56                   	push   esi
c0016adf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016ae3:	e8 e0 fb ff ff       	call   c00166c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016aec:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016af0:	83 c4 20             	add    esp,0x20
c0016af3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016af7:	73 04                	jae    c0016afd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016afd:	45                   	inc    ebp
c0016afe:	e9 76 ff ff ff       	jmp    c0016a79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016b03:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016b07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b0f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016b15:	83 ec 0c             	sub    esp,0xc
c0016b18:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016b1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b23:	05 00 10 00 00       	add    eax,0x1000
c0016b28:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b2f:	e8 fa 50 ff ff       	call   c000bc2e <free>
c0016b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b37:	e8 f2 50 ff ff       	call   c000bc2e <free>
c0016b3c:	58                   	pop    eax
c0016b3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b41:	e8 e8 50 ff ff       	call   c000bc2e <free>
c0016b46:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b49:	e8 9e 8a ff ff       	call   c000f5ec <File::close()>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	b0 01                	mov    al,0x1
c0016b53:	83 c4 3c             	add    esp,0x3c
c0016b56:	5b                   	pop    ebx
c0016b57:	5e                   	pop    esi
c0016b58:	5f                   	pop    edi
c0016b59:	5d                   	pop    ebp
c0016b5a:	c3                   	ret    

c0016b5b <Thr::runtimeReferenceHelper()>:
c0016b5b:	83 ec 18             	sub    esp,0x18
c0016b5e:	68 69 1c 02 c0       	push   0xc0021c69
c0016b63:	e8 93 84 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0016b68:	fa                   	cli    
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	eb fe                	jmp    c0016b6c <Thr::runtimeReferenceHelper()+0x11>

c0016b6e <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b6e:	57                   	push   edi
c0016b6f:	56                   	push   esi
c0016b70:	53                   	push   ebx
c0016b71:	31 db                	xor    ebx,ebx
c0016b73:	39 1d 80 4b 02 c0    	cmp    DWORD PTR ds:0xc0024b80,ebx
c0016b79:	7e 3c                	jle    c0016bb7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016b7b:	8b 34 9d 00 4b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb500]
c0016b82:	31 ff                	xor    edi,edi
c0016b84:	39 3c 9d 00 4a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb600],edi
c0016b8b:	7e 27                	jle    c0016bb4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016b8d:	50                   	push   eax
c0016b8e:	50                   	push   eax
c0016b8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b93:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b95:	03 04 9d 80 4a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb580]
c0016b9c:	50                   	push   eax
c0016b9d:	e8 56 9b fe ff       	call   c00006f8 <strcmp>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	85 c0                	test   eax,eax
c0016ba7:	75 05                	jne    c0016bae <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016ba9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016bac:	eb 0b                	jmp    c0016bb9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016bae:	83 c6 10             	add    esi,0x10
c0016bb1:	47                   	inc    edi
c0016bb2:	eb d0                	jmp    c0016b84 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016bb4:	43                   	inc    ebx
c0016bb5:	eb bc                	jmp    c0016b73 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016bb7:	31 c0                	xor    eax,eax
c0016bb9:	5b                   	pop    ebx
c0016bba:	5e                   	pop    esi
c0016bbb:	5f                   	pop    edi
c0016bbc:	c3                   	ret    

c0016bbd <Thr::loadKernelSymbolTable(char const*)>:
c0016bbd:	55                   	push   ebp
c0016bbe:	57                   	push   edi
c0016bbf:	56                   	push   esi
c0016bc0:	53                   	push   ebx
c0016bc1:	83 ec 68             	sub    esp,0x68
c0016bc4:	8b 35 d4 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024bd4
c0016bca:	68 14 01 00 00       	push   0x114
c0016bcf:	e8 38 83 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0016bd4:	83 c4 0c             	add    esp,0xc
c0016bd7:	89 c3                	mov    ebx,eax
c0016bd9:	56                   	push   esi
c0016bda:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016bde:	50                   	push   eax
c0016bdf:	e8 46 89 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0016be4:	5e                   	pop    esi
c0016be5:	5f                   	pop    edi
c0016be6:	6a 01                	push   0x1
c0016be8:	53                   	push   ebx
c0016be9:	e8 a0 89 ff ff       	call   c000f58e <File::open(FileOpenMode)>
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	31 d2                	xor    edx,edx
c0016bf3:	85 c0                	test   eax,eax
c0016bf5:	0f 85 79 02 00 00    	jne    c0016e74 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016bfb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016c03:	83 ec 0c             	sub    esp,0xc
c0016c06:	6a 34                	push   0x34
c0016c08:	e8 11 50 ff ff       	call   c000bc1e <malloc>
c0016c0d:	59                   	pop    ecx
c0016c0e:	89 c7                	mov    edi,eax
c0016c10:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016c14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c16:	56                   	push   esi
c0016c17:	57                   	push   edi
c0016c18:	6a 00                	push   0x0
c0016c1a:	6a 34                	push   0x34
c0016c1c:	53                   	push   ebx
c0016c1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c20:	83 c4 20             	add    esp,0x20
c0016c23:	85 c0                	test   eax,eax
c0016c25:	74 17                	je     c0016c3e <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016c27:	83 ec 0c             	sub    esp,0xc
c0016c2a:	68 8b 1c 02 c0       	push   0xc0021c8b
c0016c2f:	e8 5c e0 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	31 d2                	xor    edx,edx
c0016c39:	e9 36 02 00 00       	jmp    c0016e74 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c3e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c44:	75 e1                	jne    c0016c27 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c46:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c49:	85 c0                	test   eax,eax
c0016c4b:	74 da                	je     c0016c27 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c4d:	52                   	push   edx
c0016c4e:	31 d2                	xor    edx,edx
c0016c50:	52                   	push   edx
c0016c51:	50                   	push   eax
c0016c52:	53                   	push   ebx
c0016c53:	e8 f4 89 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	85 c0                	test   eax,eax
c0016c5d:	75 c8                	jne    c0016c27 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c5f:	83 ec 0c             	sub    esp,0xc
c0016c62:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c66:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c6a:	31 ed                	xor    ebp,ebp
c0016c6c:	0f af c2             	imul   eax,edx
c0016c6f:	50                   	push   eax
c0016c70:	e8 a9 4f ff ff       	call   c000bc1e <malloc>
c0016c75:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c7c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c82:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c8a:	0f af c2             	imul   eax,edx
c0016c8d:	99                   	cdq    
c0016c8e:	52                   	push   edx
c0016c8f:	50                   	push   eax
c0016c90:	53                   	push   ebx
c0016c91:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c94:	83 c4 20             	add    esp,0x20
c0016c97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016c9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ca7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016caf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016cb7:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016cbb:	0f 86 aa 00 00 00    	jbe    c0016d6b <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016cc1:	0f b7 f5             	movzx  esi,bp
c0016cc4:	6b f6 28             	imul   esi,esi,0x28
c0016cc7:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016ccb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cd2:	50                   	push   eax
c0016cd3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016cd7:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016cdb:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cdd:	6b c0 28             	imul   eax,eax,0x28
c0016ce0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016ce4:	89 d0                	mov    eax,edx
c0016ce6:	31 d2                	xor    edx,edx
c0016ce8:	52                   	push   edx
c0016ce9:	50                   	push   eax
c0016cea:	53                   	push   ebx
c0016ceb:	e8 5c 89 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016cf0:	83 c4 0c             	add    esp,0xc
c0016cf3:	6a 20                	push   0x20
c0016cf5:	6a 00                	push   0x0
c0016cf7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016cfb:	52                   	push   edx
c0016cfc:	e8 07 99 fe ff       	call   c0000608 <memset>
c0016d01:	58                   	pop    eax
c0016d02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d04:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016d08:	51                   	push   ecx
c0016d09:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016d0d:	52                   	push   edx
c0016d0e:	6a 00                	push   0x0
c0016d10:	6a 1f                	push   0x1f
c0016d12:	53                   	push   ebx
c0016d13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d16:	83 c4 18             	add    esp,0x18
c0016d19:	68 a2 1c 02 c0       	push   0xc0021ca2
c0016d1e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d22:	52                   	push   edx
c0016d23:	e8 d0 99 fe ff       	call   c00006f8 <strcmp>
c0016d28:	83 c4 10             	add    esp,0x10
c0016d2b:	85 c0                	test   eax,eax
c0016d2d:	75 0f                	jne    c0016d3e <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016d2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d3e:	50                   	push   eax
c0016d3f:	50                   	push   eax
c0016d40:	68 aa 1c 02 c0       	push   0xc0021caa
c0016d45:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d49:	50                   	push   eax
c0016d4a:	e8 a9 99 fe ff       	call   c00006f8 <strcmp>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	85 c0                	test   eax,eax
c0016d54:	75 0f                	jne    c0016d65 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016d56:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d65:	45                   	inc    ebp
c0016d66:	e9 4c ff ff ff       	jmp    c0016cb7 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016d6b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d70:	75 10                	jne    c0016d82 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016d72:	83 ec 0c             	sub    esp,0xc
c0016d75:	68 b2 1c 02 c0       	push   0xc0021cb2
c0016d7a:	e8 11 df ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016d87:	75 10                	jne    c0016d99 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016d89:	83 ec 0c             	sub    esp,0xc
c0016d8c:	68 b2 1c 02 c0       	push   0xc0021cb2
c0016d91:	e8 fa de ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	31 d2                	xor    edx,edx
c0016d9b:	50                   	push   eax
c0016d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da0:	52                   	push   edx
c0016da1:	50                   	push   eax
c0016da2:	53                   	push   ebx
c0016da3:	e8 a4 88 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016da8:	5a                   	pop    edx
c0016da9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dad:	e8 6c 4e ff ff       	call   c000bc1e <malloc>
c0016db2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016dba:	89 c1                	mov    ecx,eax
c0016dbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016dc4:	5e                   	pop    esi
c0016dc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dc7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016dcb:	55                   	push   ebp
c0016dcc:	51                   	push   ecx
c0016dcd:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016dd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dd9:	53                   	push   ebx
c0016dda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ddd:	83 c4 14             	add    esp,0x14
c0016de0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016de4:	e8 35 4e ff ff       	call   c000bc1e <malloc>
c0016de9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016dec:	89 c6                	mov    esi,eax
c0016dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016df0:	56                   	push   esi
c0016df1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016df5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016df9:	53                   	push   ebx
c0016dfa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e01:	8b 15 80 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b80
c0016e07:	83 c4 1c             	add    esp,0x1c
c0016e0a:	c1 e8 04             	shr    eax,0x4
c0016e0d:	89 04 95 00 4a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb600],eax
c0016e14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e18:	31 d2                	xor    edx,edx
c0016e1a:	52                   	push   edx
c0016e1b:	50                   	push   eax
c0016e1c:	53                   	push   ebx
c0016e1d:	e8 2a 88 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016e22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e25:	31 d2                	xor    edx,edx
c0016e27:	56                   	push   esi
c0016e28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e2c:	52                   	push   edx
c0016e2d:	50                   	push   eax
c0016e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e30:	53                   	push   ebx
c0016e31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e34:	83 c4 14             	add    esp,0x14
c0016e37:	53                   	push   ebx
c0016e38:	e8 af 87 ff ff       	call   c000f5ec <File::close()>
c0016e3d:	5d                   	pop    ebp
c0016e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e42:	e8 e7 4d ff ff       	call   c000bc2e <free>
c0016e47:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e4a:	e8 df 4d ff ff       	call   c000bc2e <free>
c0016e4f:	a1 80 4b 02 c0       	mov    eax,ds:0xc0024b80
c0016e54:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016e58:	8d 50 01             	lea    edx,[eax+0x1]
c0016e5b:	89 0c 85 00 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb500],ecx
c0016e62:	89 15 80 4b 02 c0    	mov    DWORD PTR ds:0xc0024b80,edx
c0016e68:	89 34 85 80 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb580],esi
c0016e6f:	83 c4 10             	add    esp,0x10
c0016e72:	b2 01                	mov    dl,0x1
c0016e74:	83 c4 5c             	add    esp,0x5c
c0016e77:	88 d0                	mov    al,dl
c0016e79:	5b                   	pop    ebx
c0016e7a:	5e                   	pop    esi
c0016e7b:	5f                   	pop    edi
c0016e7c:	5d                   	pop    ebp
c0016e7d:	c3                   	ret    

c0016e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016e7e:	55                   	push   ebp
c0016e7f:	57                   	push   edi
c0016e80:	56                   	push   esi
c0016e81:	53                   	push   ebx
c0016e82:	81 ec 68 03 00 00    	sub    esp,0x368
c0016e88:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016e8f:	8b 1d d4 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024bd4
c0016e95:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016e99:	68 14 01 00 00       	push   0x114
c0016e9e:	e8 69 80 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0016ea3:	83 c4 0c             	add    esp,0xc
c0016ea6:	89 c5                	mov    ebp,eax
c0016ea8:	53                   	push   ebx
c0016ea9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016eb0:	50                   	push   eax
c0016eb1:	e8 74 86 ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0016eb6:	58                   	pop    eax
c0016eb7:	5a                   	pop    edx
c0016eb8:	6a 01                	push   0x1
c0016eba:	55                   	push   ebp
c0016ebb:	e8 ce 86 ff ff       	call   c000f58e <File::open(FileOpenMode)>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	0f 85 f2 06 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ecb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016ed3:	83 ec 0c             	sub    esp,0xc
c0016ed6:	6a 34                	push   0x34
c0016ed8:	e8 41 4d ff ff       	call   c000bc1e <malloc>
c0016edd:	89 c7                	mov    edi,eax
c0016edf:	58                   	pop    eax
c0016ee0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ee3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016ee7:	53                   	push   ebx
c0016ee8:	57                   	push   edi
c0016ee9:	6a 00                	push   0x0
c0016eeb:	6a 34                	push   0x34
c0016eed:	55                   	push   ebp
c0016eee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ef1:	83 c4 20             	add    esp,0x20
c0016ef4:	85 c0                	test   eax,eax
c0016ef6:	0f 85 c1 06 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016efc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016f02:	0f 85 b5 06 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f08:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016f0b:	85 c0                	test   eax,eax
c0016f0d:	0f 84 aa 06 00 00    	je     c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f13:	31 d2                	xor    edx,edx
c0016f15:	56                   	push   esi
c0016f16:	52                   	push   edx
c0016f17:	50                   	push   eax
c0016f18:	55                   	push   ebp
c0016f19:	e8 2e 87 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	85 c0                	test   eax,eax
c0016f23:	0f 85 94 06 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f29:	83 ec 0c             	sub    esp,0xc
c0016f2c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016f2f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016f37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f3b:	0f af c2             	imul   eax,edx
c0016f3e:	50                   	push   eax
c0016f3f:	e8 da 4c ff ff       	call   c000bc1e <malloc>
c0016f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f4b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f52:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f5a:	0f af c2             	imul   eax,edx
c0016f5d:	99                   	cdq    
c0016f5e:	52                   	push   edx
c0016f5f:	50                   	push   eax
c0016f60:	55                   	push   ebp
c0016f61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f64:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f67:	83 c4 20             	add    esp,0x20
c0016f6a:	85 c0                	test   eax,eax
c0016f6c:	0f 84 4b 06 00 00    	je     c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f72:	31 d2                	xor    edx,edx
c0016f74:	51                   	push   ecx
c0016f75:	52                   	push   edx
c0016f76:	50                   	push   eax
c0016f77:	55                   	push   ebp
c0016f78:	e8 cf 86 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016f7d:	83 c4 10             	add    esp,0x10
c0016f80:	85 c0                	test   eax,eax
c0016f82:	0f 85 35 06 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f8f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f93:	31 f6                	xor    esi,esi
c0016f95:	0f af c2             	imul   eax,edx
c0016f98:	50                   	push   eax
c0016f99:	e8 80 4c ff ff       	call   c000bc1e <malloc>
c0016f9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fa1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016fa5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fb0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fb4:	0f af c2             	imul   eax,edx
c0016fb7:	99                   	cdq    
c0016fb8:	52                   	push   edx
c0016fb9:	50                   	push   eax
c0016fba:	55                   	push   ebp
c0016fbb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fbe:	83 c4 20             	add    esp,0x20
c0016fc1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016fc5:	0f 86 8a 00 00 00    	jbe    c0017055 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016fcb:	0f b7 de             	movzx  ebx,si
c0016fce:	c1 e3 05             	shl    ebx,0x5
c0016fd1:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016fd5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016fd8:	75 75                	jne    c001704f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fe1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fe8:	52                   	push   edx
c0016fe9:	31 d2                	xor    edx,edx
c0016feb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016fee:	52                   	push   edx
c0016fef:	50                   	push   eax
c0016ff0:	55                   	push   ebp
c0016ff1:	e8 56 86 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0016ff6:	83 c4 10             	add    esp,0x10
c0016ff9:	85 c0                	test   eax,eax
c0016ffb:	0f 85 bc 05 00 00    	jne    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0017001:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017008:	31 d2                	xor    edx,edx
c001700a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001700e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017011:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017015:	83 ec 0c             	sub    esp,0xc
c0017018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001701c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017023:	50                   	push   eax
c0017024:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017028:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001702c:	52                   	push   edx
c001702d:	50                   	push   eax
c001702e:	55                   	push   ebp
c001702f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017032:	83 c4 1c             	add    esp,0x1c
c0017035:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017038:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001703b:	50                   	push   eax
c001703c:	6a 00                	push   0x0
c001703e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017042:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0017046:	50                   	push   eax
c0017047:	e8 bc 95 fe ff       	call   c0000608 <memset>
c001704c:	83 c4 10             	add    esp,0x10
c001704f:	46                   	inc    esi
c0017050:	e9 6c ff ff ff       	jmp    c0016fc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017055:	31 db                	xor    ebx,ebx
c0017057:	50                   	push   eax
c0017058:	68 00 01 00 00       	push   0x100
c001705d:	6a 00                	push   0x0
c001705f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017063:	50                   	push   eax
c0017064:	e8 9f 95 fe ff       	call   c0000608 <memset>
c0017069:	83 c4 0c             	add    esp,0xc
c001706c:	68 00 01 00 00       	push   0x100
c0017071:	6a 00                	push   0x0
c0017073:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001707a:	50                   	push   eax
c001707b:	e8 88 95 fe ff       	call   c0000608 <memset>
c0017080:	83 c4 10             	add    esp,0x10
c0017083:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001708b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017093:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001709b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00170ab:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00170af:	0f 86 30 01 00 00    	jbe    c00171e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00170b5:	0f b7 f3             	movzx  esi,bx
c00170b8:	6b f6 28             	imul   esi,esi,0x28
c00170bb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00170bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170c6:	50                   	push   eax
c00170c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170cb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00170cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00170d1:	6b d2 28             	imul   edx,edx,0x28
c00170d4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170d8:	31 d2                	xor    edx,edx
c00170da:	52                   	push   edx
c00170db:	50                   	push   eax
c00170dc:	55                   	push   ebp
c00170dd:	e8 6a 85 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c00170e2:	83 c4 0c             	add    esp,0xc
c00170e5:	6a 20                	push   0x20
c00170e7:	6a 00                	push   0x0
c00170e9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00170f0:	51                   	push   ecx
c00170f1:	e8 12 95 fe ff       	call   c0000608 <memset>
c00170f6:	58                   	pop    eax
c00170f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00170fe:	52                   	push   edx
c00170ff:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017106:	51                   	push   ecx
c0017107:	6a 00                	push   0x0
c0017109:	6a 1f                	push   0x1f
c001710b:	55                   	push   ebp
c001710c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001710f:	83 c4 1c             	add    esp,0x1c
c0017112:	6a 09                	push   0x9
c0017114:	68 cc 1c 02 c0       	push   0xc0021ccc
c0017119:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017120:	51                   	push   ecx
c0017121:	e8 49 94 fe ff       	call   c000056f <memcmp>
c0017126:	83 c4 10             	add    esp,0x10
c0017129:	85 c0                	test   eax,eax
c001712b:	75 21                	jne    c001714e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001712d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017135:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017139:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001713d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017140:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017147:	89 c8                	mov    eax,ecx
c0017149:	40                   	inc    eax
c001714a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001714e:	50                   	push   eax
c001714f:	6a 09                	push   0x9
c0017151:	68 d6 1c 02 c0       	push   0xc0021cd6
c0017156:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001715d:	50                   	push   eax
c001715e:	e8 0c 94 fe ff       	call   c000056f <memcmp>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	85 c0                	test   eax,eax
c0017168:	75 21                	jne    c001718b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001716a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001716e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017176:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001717a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001717d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017184:	89 c8                	mov    eax,ecx
c0017186:	40                   	inc    eax
c0017187:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001718b:	50                   	push   eax
c001718c:	50                   	push   eax
c001718d:	68 a2 1c 02 c0       	push   0xc0021ca2
c0017192:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017199:	50                   	push   eax
c001719a:	e8 59 95 fe ff       	call   c00006f8 <strcmp>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	85 c0                	test   eax,eax
c00171a4:	75 0f                	jne    c00171b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00171a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171b5:	50                   	push   eax
c00171b6:	50                   	push   eax
c00171b7:	68 aa 1c 02 c0       	push   0xc0021caa
c00171bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171c3:	50                   	push   eax
c00171c4:	e8 2f 95 fe ff       	call   c00006f8 <strcmp>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	85 c0                	test   eax,eax
c00171ce:	75 0f                	jne    c00171df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00171d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171df:	43                   	inc    ebx
c00171e0:	e9 c6 fe ff ff       	jmp    c00170ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00171e5:	31 d2                	xor    edx,edx
c00171e7:	50                   	push   eax
c00171e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171ec:	52                   	push   edx
c00171ed:	50                   	push   eax
c00171ee:	55                   	push   ebp
c00171ef:	e8 58 84 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c00171f4:	5a                   	pop    edx
c00171f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171f9:	e8 20 4a ff ff       	call   c000bc1e <malloc>
c00171fe:	31 d2                	xor    edx,edx
c0017200:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017204:	59                   	pop    ecx
c0017205:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017208:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001720c:	53                   	push   ebx
c001720d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017211:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017215:	52                   	push   edx
c0017216:	50                   	push   eax
c0017217:	55                   	push   ebp
c0017218:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001721b:	83 c4 14             	add    esp,0x14
c001721e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017222:	e8 f7 49 ff ff       	call   c000bc1e <malloc>
c0017227:	31 d2                	xor    edx,edx
c0017229:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001722d:	83 c4 0c             	add    esp,0xc
c0017230:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017234:	52                   	push   edx
c0017235:	50                   	push   eax
c0017236:	55                   	push   ebp
c0017237:	e8 10 84 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c001723c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001723f:	31 d2                	xor    edx,edx
c0017241:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017245:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017248:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001724c:	52                   	push   edx
c001724d:	50                   	push   eax
c001724e:	55                   	push   ebp
c001724f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017252:	83 c4 20             	add    esp,0x20
c0017255:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001725d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017261:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017265:	0f 84 56 03 00 00    	je     c00175c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001726b:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017272:	31 d2                	xor    edx,edx
c0017274:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017278:	c1 e8 03             	shr    eax,0x3
c001727b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001727f:	50                   	push   eax
c0017280:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017284:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017288:	52                   	push   edx
c0017289:	50                   	push   eax
c001728a:	55                   	push   ebp
c001728b:	e8 bc 83 ff ff       	call   c000f64c <File::seek(unsigned long long)>
c0017290:	58                   	pop    eax
c0017291:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017295:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001729c:	e8 7d 49 ff ff       	call   c000bc1e <malloc>
c00172a1:	31 d2                	xor    edx,edx
c00172a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172aa:	58                   	pop    eax
c00172ab:	8d 44 24 58          	lea    eax,[esp+0x58]
c00172af:	50                   	push   eax
c00172b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00172b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172b8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00172bf:	52                   	push   edx
c00172c0:	50                   	push   eax
c00172c1:	55                   	push   ebp
c00172c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172c5:	83 c4 20             	add    esp,0x20
c00172c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172d0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00172d4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00172d8:	0f 8d c7 02 00 00    	jge    c00175a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c00172de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172e6:	31 db                	xor    ebx,ebx
c00172e8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00172eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172f3:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00172f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172fb:	c1 e8 08             	shr    eax,0x8
c00172fe:	89 c6                	mov    esi,eax
c0017300:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017304:	c1 e6 04             	shl    esi,0x4
c0017307:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001730b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001730e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017312:	85 c0                	test   eax,eax
c0017314:	0f 85 17 01 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001731a:	83 ec 0c             	sub    esp,0xc
c001731d:	b3 01                	mov    bl,0x1
c001731f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017323:	03 06                	add    eax,DWORD PTR [esi]
c0017325:	50                   	push   eax
c0017326:	e8 43 f8 ff ff       	call   c0016b6e <Thr::getAddressOfKernelSymbol(char const*)>
c001732b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001732f:	83 c4 10             	add    esp,0x10
c0017332:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017337:	0f 85 f4 00 00 00    	jne    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001733d:	50                   	push   eax
c001733e:	50                   	push   eax
c001733f:	68 e0 1c 02 c0       	push   0xc0021ce0
c0017344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017348:	03 06                	add    eax,DWORD PTR [esi]
c001734a:	50                   	push   eax
c001734b:	e8 a8 93 fe ff       	call   c00006f8 <strcmp>
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	85 c0                	test   eax,eax
c0017355:	75 0a                	jne    c0017361 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0017357:	b8 8c e7 01 c0       	mov    eax,0xc001e78c
c001735c:	e9 ca 00 00 00       	jmp    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017361:	50                   	push   eax
c0017362:	50                   	push   eax
c0017363:	68 ea 1c 02 c0       	push   0xc0021cea
c0017368:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001736c:	03 06                	add    eax,DWORD PTR [esi]
c001736e:	50                   	push   eax
c001736f:	e8 84 93 fe ff       	call   c00006f8 <strcmp>
c0017374:	83 c4 10             	add    esp,0x10
c0017377:	85 c0                	test   eax,eax
c0017379:	75 0a                	jne    c0017385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001737b:	b8 c0 e4 01 c0       	mov    eax,0xc001e4c0
c0017380:	e9 a6 00 00 00       	jmp    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017385:	53                   	push   ebx
c0017386:	53                   	push   ebx
c0017387:	68 f3 1c 02 c0       	push   0xc0021cf3
c001738c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017390:	03 06                	add    eax,DWORD PTR [esi]
c0017392:	50                   	push   eax
c0017393:	e8 60 93 fe ff       	call   c00006f8 <strcmp>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	85 c0                	test   eax,eax
c001739d:	75 0a                	jne    c00173a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001739f:	b8 8c e8 01 c0       	mov    eax,0xc001e88c
c00173a4:	e9 82 00 00 00       	jmp    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00173a9:	51                   	push   ecx
c00173aa:	51                   	push   ecx
c00173ab:	68 fd 1c 02 c0       	push   0xc0021cfd
c00173b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b4:	03 06                	add    eax,DWORD PTR [esi]
c00173b6:	50                   	push   eax
c00173b7:	e8 3c 93 fe ff       	call   c00006f8 <strcmp>
c00173bc:	83 c4 10             	add    esp,0x10
c00173bf:	85 c0                	test   eax,eax
c00173c1:	74 63                	je     c0017426 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c00173c3:	50                   	push   eax
c00173c4:	50                   	push   eax
c00173c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173c9:	03 06                	add    eax,DWORD PTR [esi]
c00173cb:	50                   	push   eax
c00173cc:	68 06 1d 02 c0       	push   0xc0021d06
c00173d1:	e8 25 7c ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00173d6:	58                   	pop    eax
c00173d7:	5a                   	pop    edx
c00173d8:	68 20 1d 02 c0       	push   0xc0021d20
c00173dd:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00173e4:	53                   	push   ebx
c00173e5:	e8 bd 92 fe ff       	call   c00006a7 <strcpy>
c00173ea:	59                   	pop    ecx
c00173eb:	58                   	pop    eax
c00173ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173f0:	03 06                	add    eax,DWORD PTR [esi]
c00173f2:	50                   	push   eax
c00173f3:	53                   	push   ebx
c00173f4:	e8 65 93 fe ff       	call   c000075e <strcat>
c00173f9:	58                   	pop    eax
c00173fa:	5a                   	pop    edx
c00173fb:	68 b6 1d 02 c0       	push   0xc0021db6
c0017400:	53                   	push   ebx
c0017401:	e8 58 93 fe ff       	call   c000075e <strcat>
c0017406:	83 c4 10             	add    esp,0x10
c0017409:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001740e:	0f 84 4b 01 00 00    	je     c001755f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017414:	83 ec 0c             	sub    esp,0xc
c0017417:	53                   	push   ebx
c0017418:	e8 73 d8 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017424:	eb 0b                	jmp    c0017431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017426:	b8 0c e6 01 c0       	mov    eax,0xc001e60c
c001742b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001742f:	b3 01                	mov    bl,0x1
c0017431:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017436:	0f 85 80 00 00 00    	jne    c00174bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001743c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017443:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017447:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001744b:	01 ce                	add    esi,ecx
c001744d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017455:	8b 06                	mov    eax,DWORD PTR [esi]
c0017457:	0f 94 c2             	sete   dl
c001745a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017462:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017467:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001746b:	84 db                	test   bl,bl
c001746d:	74 31                	je     c00174a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001746f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017473:	01 c3                	add    ebx,eax
c0017475:	84 d2                	test   dl,dl
c0017477:	75 0a                	jne    c0017483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c0017479:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001747d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017481:	76 32                	jbe    c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017483:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017488:	0f 84 d1 00 00 00    	je     c001755f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001748e:	83 ec 0c             	sub    esp,0xc
c0017491:	68 37 1d 02 c0       	push   0xc0021d37
c0017496:	e8 f5 d7 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	eb 15                	jmp    c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174a0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00174a3:	84 d2                	test   dl,dl
c00174a5:	75 0e                	jne    c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174ab:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174af:	77 04                	ja     c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174b5:	89 1e                	mov    DWORD PTR [esi],ebx
c00174b7:	e9 e0 00 00 00       	jmp    c001759c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174bc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00174c1:	75 6e                	jne    c0017531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c00174c3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00174ca:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00174ce:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00174d2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00174da:	74 17                	je     c00174f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174dc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00174e4:	74 0d                	je     c00174f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174e6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174ea:	83 e8 04             	sub    eax,0x4
c00174ed:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174f1:	76 17                	jbe    c001750a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c00174f3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174f8:	74 65                	je     c001755f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	68 53 1d 02 c0       	push   0xc0021d53
c0017502:	e8 89 d7 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0017507:	83 c4 10             	add    esp,0x10
c001750a:	8b 16                	mov    edx,DWORD PTR [esi]
c001750c:	84 db                	test   bl,bl
c001750e:	74 13                	je     c0017523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0017510:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017514:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001751b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001751f:	01 d0                	add    eax,edx
c0017521:	eb 06                	jmp    c0017529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017523:	89 d0                	mov    eax,edx
c0017525:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017529:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001752d:	89 06                	mov    DWORD PTR [esi],eax
c001752f:	eb 6b                	jmp    c001759c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017531:	50                   	push   eax
c0017532:	50                   	push   eax
c0017533:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017538:	50                   	push   eax
c0017539:	68 6f 1d 02 c0       	push   0xc0021d6f
c001753e:	e8 b8 7a ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001754b:	74 12                	je     c001755f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001754d:	83 ec 0c             	sub    esp,0xc
c0017550:	68 7a 1d 02 c0       	push   0xc0021d7a
c0017555:	e8 36 d7 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	eb 3d                	jmp    c001759c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001755f:	83 ec 0c             	sub    esp,0xc
c0017562:	55                   	push   ebp
c0017563:	e8 84 80 ff ff       	call   c000f5ec <File::close()>
c0017568:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001756b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001756e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017571:	59                   	pop    ecx
c0017572:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017576:	e8 b3 46 ff ff       	call   c000bc2e <free>
c001757b:	5b                   	pop    ebx
c001757c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017580:	e8 a9 46 ff ff       	call   c000bc2e <free>
c0017585:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017588:	e8 a1 46 ff ff       	call   c000bc2e <free>
c001758d:	5e                   	pop    esi
c001758e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017592:	e8 97 46 ff ff       	call   c000bc2e <free>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	eb 21                	jmp    c00175bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001759c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00175a0:	e9 2b fd ff ff       	jmp    c00172d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00175a5:	83 ec 0c             	sub    esp,0xc
c00175a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175ac:	e8 7d 46 ff ff       	call   c000bc2e <free>
c00175b1:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	e9 a0 fc ff ff       	jmp    c001725d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00175bd:	31 c0                	xor    eax,eax
c00175bf:	eb 33                	jmp    c00175f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c00175c1:	83 ec 0c             	sub    esp,0xc
c00175c4:	55                   	push   ebp
c00175c5:	e8 22 80 ff ff       	call   c000f5ec <File::close()>
c00175ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175d3:	58                   	pop    eax
c00175d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175d8:	e8 51 46 ff ff       	call   c000bc2e <free>
c00175dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175e0:	e8 49 46 ff ff       	call   c000bc2e <free>
c00175e5:	5a                   	pop    edx
c00175e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175ea:	e8 3f 46 ff ff       	call   c000bc2e <free>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	b0 01                	mov    al,0x1
c00175f4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00175fa:	5b                   	pop    ebx
c00175fb:	5e                   	pop    esi
c00175fc:	5f                   	pop    edi
c00175fd:	5d                   	pop    ebp
c00175fe:	c3                   	ret    

c00175ff <Thr::getDriverBaseFromAddress(unsigned long)>:
c00175ff:	56                   	push   esi
c0017600:	31 d2                	xor    edx,edx
c0017602:	53                   	push   ebx
c0017603:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0017609:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001760d:	39 d3                	cmp    ebx,edx
c001760f:	7e 1b                	jle    c001762c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017611:	8b 04 95 00 46 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdba00]
c0017618:	39 c8                	cmp    eax,ecx
c001761a:	77 0d                	ja     c0017629 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001761c:	8b 34 95 00 44 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbc00]
c0017623:	01 c6                	add    esi,eax
c0017625:	39 ce                	cmp    esi,ecx
c0017627:	77 05                	ja     c001762e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017629:	42                   	inc    edx
c001762a:	eb e1                	jmp    c001760d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001762c:	31 c0                	xor    eax,eax
c001762e:	5b                   	pop    ebx
c001762f:	5e                   	pop    esi
c0017630:	c3                   	ret    

c0017631 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017631:	53                   	push   ebx
c0017632:	31 c0                	xor    eax,eax
c0017634:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017638:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c001763e:	39 c3                	cmp    ebx,eax
c0017640:	7e 22                	jle    c0017664 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017642:	8b 14 85 00 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdba00]
c0017649:	39 ca                	cmp    edx,ecx
c001764b:	77 14                	ja     c0017661 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001764d:	03 14 85 00 44 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbc00]
c0017654:	39 ca                	cmp    edx,ecx
c0017656:	76 09                	jbe    c0017661 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017658:	8b 04 85 00 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb800]
c001765f:	eb 05                	jmp    c0017666 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017661:	40                   	inc    eax
c0017662:	eb da                	jmp    c001763e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017664:	31 c0                	xor    eax,eax
c0017666:	5b                   	pop    ebx
c0017667:	c3                   	ret    

c0017668 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017668:	53                   	push   ebx
c0017669:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001766d:	53                   	push   ebx
c001766e:	e8 8c ff ff ff       	call   c00175ff <Thr::getDriverBaseFromAddress(unsigned long)>
c0017673:	5a                   	pop    edx
c0017674:	31 d2                	xor    edx,edx
c0017676:	85 c0                	test   eax,eax
c0017678:	74 04                	je     c001767e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001767a:	89 da                	mov    edx,ebx
c001767c:	29 c2                	sub    edx,eax
c001767e:	89 d0                	mov    eax,edx
c0017680:	5b                   	pop    ebx
c0017681:	c3                   	ret    

c0017682 <Thr::loadDLL(char const*, bool)>:
c0017682:	55                   	push   ebp
c0017683:	57                   	push   edi
c0017684:	56                   	push   esi
c0017685:	53                   	push   ebx
c0017686:	81 ec 24 01 00 00    	sub    esp,0x124
c001768c:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0017693:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001769a:	56                   	push   esi
c001769b:	68 92 1d 02 c0       	push   0xc0021d92
c00176a0:	e8 56 79 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00176a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00176ac:	e8 5b 78 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00176b1:	83 c4 0c             	add    esp,0xc
c00176b4:	89 c3                	mov    ebx,eax
c00176b6:	ff 35 d4 4b 02 c0    	push   DWORD PTR ds:0xc0024bd4
c00176bc:	56                   	push   esi
c00176bd:	50                   	push   eax
c00176be:	e8 67 7e ff ff       	call   c000f52a <File::File(char const*, Process*)>
c00176c3:	83 c4 0c             	add    esp,0xc
c00176c6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00176ca:	50                   	push   eax
c00176cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00176cf:	50                   	push   eax
c00176d0:	53                   	push   ebx
c00176d1:	e8 64 81 ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c00176d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00176e6:	75 0a                	jne    c00176f2 <Thr::loadDLL(char const*, bool)+0x70>
c00176e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ec:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00176f0:	75 3e                	jne    c0017730 <Thr::loadDLL(char const*, bool)+0xae>
c00176f2:	89 f8                	mov    eax,edi
c00176f4:	31 db                	xor    ebx,ebx
c00176f6:	84 c0                	test   al,al
c00176f8:	0f 84 ca 00 00 00    	je     c00177c8 <Thr::loadDLL(char const*, bool)+0x146>
c00176fe:	50                   	push   eax
c00176ff:	50                   	push   eax
c0017700:	68 a3 1d 02 c0       	push   0xc0021da3
c0017705:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017709:	53                   	push   ebx
c001770a:	e8 98 8f fe ff       	call   c00006a7 <strcpy>
c001770f:	58                   	pop    eax
c0017710:	5a                   	pop    edx
c0017711:	56                   	push   esi
c0017712:	53                   	push   ebx
c0017713:	e8 46 90 fe ff       	call   c000075e <strcat>
c0017718:	59                   	pop    ecx
c0017719:	5d                   	pop    ebp
c001771a:	68 b6 1d 02 c0       	push   0xc0021db6
c001771f:	53                   	push   ebx
c0017720:	e8 39 90 fe ff       	call   c000075e <strcat>
c0017725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017728:	e8 63 d5 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017737:	e8 e2 44 ff ff       	call   c000bc1e <malloc>
c001773c:	89 34 24             	mov    DWORD PTR [esp],esi
c001773f:	89 c3                	mov    ebx,eax
c0017741:	e8 df 8e fe ff       	call   c0000625 <strlen>
c0017746:	8b 2d e0 43 02 c0    	mov    ebp,DWORD PTR ds:0xc00243e0
c001774c:	40                   	inc    eax
c001774d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017750:	e8 c9 44 ff ff       	call   c000bc1e <malloc>
c0017755:	89 04 ad 00 48 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb800],eax
c001775c:	58                   	pop    eax
c001775d:	a1 e0 43 02 c0       	mov    eax,ds:0xc00243e0
c0017762:	5a                   	pop    edx
c0017763:	56                   	push   esi
c0017764:	ff 34 85 00 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb800]
c001776b:	e8 37 8f fe ff       	call   c00006a7 <strcpy>
c0017770:	a1 e0 43 02 c0       	mov    eax,ds:0xc00243e0
c0017775:	8d 50 01             	lea    edx,[eax+0x1]
c0017778:	89 1c 85 00 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba00],ebx
c001777f:	89 15 e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edx
c0017785:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017789:	59                   	pop    ecx
c001778a:	89 14 85 00 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc00],edx
c0017791:	5d                   	pop    ebp
c0017792:	53                   	push   ebx
c0017793:	68 b8 1d 02 c0       	push   0xc0021db8
c0017798:	e8 5e 78 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001779d:	83 c4 0c             	add    esp,0xc
c00177a0:	6a 01                	push   0x1
c00177a2:	53                   	push   ebx
c00177a3:	56                   	push   esi
c00177a4:	e8 d5 f6 ff ff       	call   c0016e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00177a9:	83 c4 10             	add    esp,0x10
c00177ac:	84 c0                	test   al,al
c00177ae:	75 18                	jne    c00177c8 <Thr::loadDLL(char const*, bool)+0x146>
c00177b0:	31 db                	xor    ebx,ebx
c00177b2:	89 f8                	mov    eax,edi
c00177b4:	84 c0                	test   al,al
c00177b6:	74 10                	je     c00177c8 <Thr::loadDLL(char const*, bool)+0x146>
c00177b8:	83 ec 0c             	sub    esp,0xc
c00177bb:	68 d7 1d 02 c0       	push   0xc0021dd7
c00177c0:	e8 cb d4 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177ce:	89 d8                	mov    eax,ebx
c00177d0:	5b                   	pop    ebx
c00177d1:	5e                   	pop    esi
c00177d2:	5f                   	pop    edi
c00177d3:	5d                   	pop    ebp
c00177d4:	c3                   	ret    

c00177d5 <Thr::executeDLL(unsigned long, void*)>:
c00177d5:	56                   	push   esi
c00177d6:	53                   	push   ebx
c00177d7:	51                   	push   ecx
c00177d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177e0:	85 db                	test   ebx,ebx
c00177e2:	75 10                	jne    c00177f4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177e4:	83 ec 0c             	sub    esp,0xc
c00177e7:	68 f6 1d 02 c0       	push   0xc0021df6
c00177ec:	e8 9f d4 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00177f8:	89 d8                	mov    eax,ebx
c00177fa:	5a                   	pop    edx
c00177fb:	5b                   	pop    ebx
c00177fc:	5e                   	pop    esi
c00177fd:	ff e0                	jmp    eax
c00177ff:	90                   	nop

c0017800 <changeTSS>:
c0017800:	83 ec 0c             	sub    esp,0xc
c0017803:	e8 82 c7 ff ff       	call   c0013f8a <thisCPU()>
c0017808:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001780e:	83 ec 08             	sub    esp,0x8
c0017811:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017814:	05 7c 11 00 00       	add    eax,0x117c
c0017819:	c1 e1 15             	shl    ecx,0x15
c001781c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017821:	29 ca                	sub    edx,ecx
c0017823:	52                   	push   edx
c0017824:	50                   	push   eax
c0017825:	e8 30 5e ff ff       	call   c000d65a <TSS::setESP(unsigned long)>
c001782a:	83 c4 1c             	add    esp,0x1c
c001782d:	c3                   	ret    

c001782e <Process::addArgs(char**)>:
c001782e:	57                   	push   edi
c001782f:	56                   	push   esi
c0017830:	53                   	push   ebx
c0017831:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017835:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017839:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017843:	85 ff                	test   edi,edi
c0017845:	74 3d                	je     c0017884 <Process::addArgs(char**)+0x56>
c0017847:	8b 07                	mov    eax,DWORD PTR [edi]
c0017849:	85 c0                	test   eax,eax
c001784b:	74 37                	je     c0017884 <Process::addArgs(char**)+0x56>
c001784d:	31 db                	xor    ebx,ebx
c001784f:	83 ec 0c             	sub    esp,0xc
c0017852:	50                   	push   eax
c0017853:	e8 cd 8d fe ff       	call   c0000625 <strlen>
c0017858:	40                   	inc    eax
c0017859:	89 04 24             	mov    DWORD PTR [esp],eax
c001785c:	e8 bd 43 ff ff       	call   c000bc1e <malloc>
c0017861:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017868:	5a                   	pop    edx
c0017869:	59                   	pop    ecx
c001786a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001786d:	43                   	inc    ebx
c001786e:	50                   	push   eax
c001786f:	e8 33 8e fe ff       	call   c00006a7 <strcpy>
c0017874:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017880:	85 c0                	test   eax,eax
c0017882:	75 cb                	jne    c001784f <Process::addArgs(char**)+0x21>
c0017884:	5b                   	pop    ebx
c0017885:	5e                   	pop    esi
c0017886:	5f                   	pop    edi
c0017887:	c3                   	ret    

c0017888 <Process::Process(char const*, Process*, char**)>:
c0017888:	56                   	push   esi
c0017889:	53                   	push   ebx
c001788a:	83 ec 14             	sub    esp,0x14
c001788d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017891:	05 0c 02 00 00       	add    eax,0x20c
c0017896:	bb 07 00 00 00       	mov    ebx,0x7
c001789b:	89 c6                	mov    esi,eax
c001789d:	85 db                	test   ebx,ebx
c001789f:	78 12                	js     c00178b3 <Process::Process(char const*, Process*, char**)+0x2b>
c00178a1:	83 ec 0c             	sub    esp,0xc
c00178a4:	56                   	push   esi
c00178a5:	e8 30 78 00 00       	call   c001f0da <ThreadControlBlock::ThreadControlBlock()>
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	83 c6 63             	add    esi,0x63
c00178b0:	4b                   	dec    ebx
c00178b1:	eb ea                	jmp    c001789d <Process::Process(char const*, Process*, char**)+0x15>
c00178b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00178be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00178cb:	a1 a4 31 02 c0       	mov    eax,ds:0xc00231a4
c00178d0:	8d 50 01             	lea    edx,[eax+0x1]
c00178d3:	89 15 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,edx
c00178d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178dd:	89 02                	mov    DWORD PTR [edx],eax
c00178df:	83 ec 0c             	sub    esp,0xc
c00178e2:	6a 10                	push   0x10
c00178e4:	e8 23 76 ff ff       	call   c000ef0c <operator new(unsigned long)>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	89 c3                	mov    ebx,eax
c00178ee:	83 ec 08             	sub    esp,0x8
c00178f1:	6a 00                	push   0x0
c00178f3:	53                   	push   ebx
c00178f4:	e8 a7 72 ff ff       	call   c000eba0 <VAS::VAS(bool)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017900:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001791c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017926:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001792c:	85 c0                	test   eax,eax
c001792e:	74 42                	je     c0017972 <Process::Process(char const*, Process*, char**)+0xea>
c0017930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017934:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001793a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017944:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001794a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017954:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001795a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795e:	05 0c 01 00 00       	add    eax,0x10c
c0017963:	83 ec 08             	sub    esp,0x8
c0017966:	52                   	push   edx
c0017967:	50                   	push   eax
c0017968:	e8 3a 8d fe ff       	call   c00006a7 <strcpy>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	eb 5c                	jmp    c00179ce <Process::Process(char const*, Process*, char**)+0x146>
c0017972:	83 ec 0c             	sub    esp,0xc
c0017975:	68 60 12 00 00       	push   0x1260
c001797a:	e8 8d 75 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	89 c3                	mov    ebx,eax
c0017984:	83 ec 08             	sub    esp,0x8
c0017987:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001798b:	53                   	push   ebx
c001798c:	e8 c7 59 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017998:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001799e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	50                   	push   eax
c00179ac:	e8 a8 4d ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b8:	05 0c 01 00 00       	add    eax,0x10c
c00179bd:	83 ec 08             	sub    esp,0x8
c00179c0:	68 20 1e 02 c0       	push   0xc0021e20
c00179c5:	50                   	push   eax
c00179c6:	e8 dc 8c fe ff       	call   c00006a7 <strcpy>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d2:	83 c0 0c             	add    eax,0xc
c00179d5:	83 ec 08             	sub    esp,0x8
c00179d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179dc:	50                   	push   eax
c00179dd:	e8 c5 8c fe ff       	call   c00006a7 <strcpy>
c00179e2:	83 c4 10             	add    esp,0x10
c00179e5:	83 ec 08             	sub    esp,0x8
c00179e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00179ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179f0:	e8 39 fe ff ff       	call   c001782e <Process::addArgs(char**)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	83 ec 08             	sub    esp,0x8
c00179fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a03:	e8 3d ef ff ff       	call   c0016945 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a13:	83 f0 01             	xor    eax,0x1
c0017a16:	88 c2                	mov    dl,al
c0017a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017a22:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a27:	83 ec 08             	sub    esp,0x8
c0017a2a:	50                   	push   eax
c0017a2b:	68 1c 1f 02 c0       	push   0xc0021f1c
c0017a30:	e8 c6 75 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0017a35:	83 c4 10             	add    esp,0x10
c0017a38:	90                   	nop
c0017a39:	83 c4 14             	add    esp,0x14
c0017a3c:	5b                   	pop    ebx
c0017a3d:	5e                   	pop    esi
c0017a3e:	c3                   	ret    
c0017a3f:	90                   	nop

c0017a40 <Process::Process(bool, char const*, Process*, char**)>:
c0017a40:	56                   	push   esi
c0017a41:	53                   	push   ebx
c0017a42:	83 ec 14             	sub    esp,0x14
c0017a45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a49:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	05 0c 02 00 00       	add    eax,0x20c
c0017a56:	bb 07 00 00 00       	mov    ebx,0x7
c0017a5b:	89 c6                	mov    esi,eax
c0017a5d:	85 db                	test   ebx,ebx
c0017a5f:	78 12                	js     c0017a73 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017a61:	83 ec 0c             	sub    esp,0xc
c0017a64:	56                   	push   esi
c0017a65:	e8 70 76 00 00       	call   c001f0da <ThreadControlBlock::ThreadControlBlock()>
c0017a6a:	83 c4 10             	add    esp,0x10
c0017a6d:	83 c6 63             	add    esi,0x63
c0017a70:	4b                   	dec    ebx
c0017a71:	eb ea                	jmp    c0017a5d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a77:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a82:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017a8b:	a1 a4 31 02 c0       	mov    eax,ds:0xc00231a4
c0017a90:	8d 50 01             	lea    edx,[eax+0x1]
c0017a93:	89 15 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,edx
c0017a99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a9d:	89 02                	mov    DWORD PTR [edx],eax
c0017a9f:	83 ec 0c             	sub    esp,0xc
c0017aa2:	6a 10                	push   0x10
c0017aa4:	e8 63 74 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	89 c3                	mov    ebx,eax
c0017aae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ab3:	83 ec 08             	sub    esp,0x8
c0017ab6:	50                   	push   eax
c0017ab7:	53                   	push   ebx
c0017ab8:	e8 e3 70 ff ff       	call   c000eba0 <VAS::VAS(bool)>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac4:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ace:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ae0:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aea:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017af0:	85 c0                	test   eax,eax
c0017af2:	74 42                	je     c0017b36 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017afe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b08:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b12:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b18:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b22:	05 0c 01 00 00       	add    eax,0x10c
c0017b27:	83 ec 08             	sub    esp,0x8
c0017b2a:	52                   	push   edx
c0017b2b:	50                   	push   eax
c0017b2c:	e8 76 8b fe ff       	call   c00006a7 <strcpy>
c0017b31:	83 c4 10             	add    esp,0x10
c0017b34:	eb 5c                	jmp    c0017b92 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017b36:	83 ec 0c             	sub    esp,0xc
c0017b39:	68 60 12 00 00       	push   0x1260
c0017b3e:	e8 c9 73 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	89 c3                	mov    ebx,eax
c0017b48:	83 ec 08             	sub    esp,0x8
c0017b4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b4f:	53                   	push   ebx
c0017b50:	e8 03 58 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b66:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b6c:	83 ec 0c             	sub    esp,0xc
c0017b6f:	50                   	push   eax
c0017b70:	e8 e4 4b ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b7c:	05 0c 01 00 00       	add    eax,0x10c
c0017b81:	83 ec 08             	sub    esp,0x8
c0017b84:	68 20 1e 02 c0       	push   0xc0021e20
c0017b89:	50                   	push   eax
c0017b8a:	e8 18 8b fe ff       	call   c00006a7 <strcpy>
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b96:	83 c0 0c             	add    eax,0xc
c0017b99:	83 ec 08             	sub    esp,0x8
c0017b9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ba0:	50                   	push   eax
c0017ba1:	e8 01 8b fe ff       	call   c00006a7 <strcpy>
c0017ba6:	83 c4 10             	add    esp,0x10
c0017ba9:	83 ec 08             	sub    esp,0x8
c0017bac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017bb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bb4:	e8 75 fc ff ff       	call   c001782e <Process::addArgs(char**)>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	90                   	nop
c0017bbd:	83 c4 14             	add    esp,0x14
c0017bc0:	5b                   	pop    ebx
c0017bc1:	5e                   	pop    esi
c0017bc2:	c3                   	ret    

c0017bc3 <disableIRQs()>:
c0017bc3:	fa                   	cli    
c0017bc4:	ff 05 ac 4b 02 c0    	inc    DWORD PTR ds:0xc0024bac
c0017bca:	c3                   	ret    

c0017bcb <getIRQNestingLevel()>:
c0017bcb:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c0017bd0:	c3                   	ret    

c0017bd1 <enableIRQs()>:
c0017bd1:	a1 ac 4b 02 c0       	mov    eax,ds:0xc0024bac
c0017bd6:	48                   	dec    eax
c0017bd7:	a3 ac 4b 02 c0       	mov    ds:0xc0024bac,eax
c0017bdc:	75 01                	jne    c0017bdf <enableIRQs()+0xe>
c0017bde:	fb                   	sti    
c0017bdf:	c3                   	ret    

c0017be0 <lockScheduler()>:
c0017be0:	eb e1                	jmp    c0017bc3 <disableIRQs()>

c0017be2 <unlockScheduler()>:
c0017be2:	eb ed                	jmp    c0017bd1 <enableIRQs()>

c0017be4 <userModeEntryPoint(void*)>:
c0017be4:	83 ec 0c             	sub    esp,0xc
c0017be7:	e8 f6 ff ff ff       	call   c0017be2 <unlockScheduler()>
c0017bec:	fb                   	sti    
c0017bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bf5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017bfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bff:	83 c4 0c             	add    esp,0xc
c0017c02:	e9 df 85 fe ff       	jmp    c00001e6 <goToUsermode>

c0017c07 <lockStuff()>:
c0017c07:	e8 b7 ff ff ff       	call   c0017bc3 <disableIRQs()>
c0017c0c:	ff 05 a8 4b 02 c0    	inc    DWORD PTR ds:0xc0024ba8
c0017c12:	c3                   	ret    

c0017c13 <taskStartupFunction>:
c0017c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c18:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017c1b:	c3                   	ret    

c0017c1c <updateTimeUsed()>:
c0017c1c:	57                   	push   edi
c0017c1d:	56                   	push   esi
c0017c1e:	53                   	push   ebx
c0017c1f:	e8 66 c3 ff ff       	call   c0013f8a <thisCPU()>
c0017c24:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017c2b:	74 49                	je     c0017c76 <updateTimeUsed()+0x5a>
c0017c2d:	0f 31                	rdtsc  
c0017c2f:	89 c1                	mov    ecx,eax
c0017c31:	a3 e8 4b 02 c0       	mov    ds:0xc0024be8,eax
c0017c36:	2b 0d d8 4b 02 c0    	sub    ecx,DWORD PTR ds:0xc0024bd8
c0017c3c:	89 d3                	mov    ebx,edx
c0017c3e:	89 0d e0 4b 02 c0    	mov    DWORD PTR ds:0xc0024be0,ecx
c0017c44:	1b 1d dc 4b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024bdc
c0017c4a:	a3 d8 4b 02 c0       	mov    ds:0xc0024bd8,eax
c0017c4f:	89 1d e4 4b 02 c0    	mov    DWORD PTR ds:0xc0024be4,ebx
c0017c55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c5a:	89 15 ec 4b 02 c0    	mov    DWORD PTR ds:0xc0024bec,edx
c0017c60:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017c63:	89 15 dc 4b 02 c0    	mov    DWORD PTR ds:0xc0024bdc,edx
c0017c69:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017c6c:	01 f1                	add    ecx,esi
c0017c6e:	11 fb                	adc    ebx,edi
c0017c70:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017c73:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017c76:	5b                   	pop    ebx
c0017c77:	5e                   	pop    esi
c0017c78:	5f                   	pop    edi
c0017c79:	c3                   	ret    

c0017c7a <switchToThread(ThreadControlBlock*)>:
c0017c7a:	53                   	push   ebx
c0017c7b:	83 ec 08             	sub    esp,0x8
c0017c7e:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c0017c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c87:	85 c0                	test   eax,eax
c0017c89:	75 30                	jne    c0017cbb <switchToThread(ThreadControlBlock*)+0x41>
c0017c8b:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017c8e:	3c ff                	cmp    al,0xff
c0017c90:	74 25                	je     c0017cb7 <switchToThread(ThreadControlBlock*)+0x3d>
c0017c92:	0f b6 d0             	movzx  edx,al
c0017c95:	b8 84 03 00 00       	mov    eax,0x384
c0017c9a:	29 d0                	sub    eax,edx
c0017c9c:	c1 e0 10             	shl    eax,0x10
c0017c9f:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017ca2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017ca5:	e8 72 ff ff ff       	call   c0017c1c <updateTimeUsed()>
c0017caa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017cae:	83 c4 08             	add    esp,0x8
c0017cb1:	5b                   	pop    ebx
c0017cb2:	e9 68 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017cb7:	31 c0                	xor    eax,eax
c0017cb9:	eb e7                	jmp    c0017ca2 <switchToThread(ThreadControlBlock*)+0x28>
c0017cbb:	c7 05 a4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024ba4,0x1
c0017cc5:	83 c4 08             	add    esp,0x8
c0017cc8:	5b                   	pop    ebx
c0017cc9:	c3                   	ret    

c0017cca <Semaphore::Semaphore(int)>:
c0017cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cd2:	89 10                	mov    DWORD PTR [eax],edx
c0017cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cf5:	90                   	nop
c0017cf6:	c3                   	ret    
c0017cf7:	90                   	nop

c0017cf8 <Mutex::Mutex()>:
c0017cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfc:	6a 01                	push   0x1
c0017cfe:	50                   	push   eax
c0017cff:	e8 c6 ff ff ff       	call   c0017cca <Semaphore::Semaphore(int)>
c0017d04:	83 c4 08             	add    esp,0x8
c0017d07:	90                   	nop
c0017d08:	c3                   	ret    
c0017d09:	90                   	nop

c0017d0a <Process::createThread(void (*)(void*), void*, int)>:
c0017d0a:	55                   	push   ebp
c0017d0b:	31 c9                	xor    ecx,ecx
c0017d0d:	57                   	push   edi
c0017d0e:	56                   	push   esi
c0017d0f:	53                   	push   ebx
c0017d10:	83 ec 1c             	sub    esp,0x1c
c0017d13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017d17:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017d1e:	89 f2                	mov    edx,esi
c0017d20:	0f b7 c2             	movzx  eax,dx
c0017d23:	83 e2 01             	and    edx,0x1
c0017d26:	74 14                	je     c0017d3c <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017d28:	d1 f8                	sar    eax,1
c0017d2a:	41                   	inc    ecx
c0017d2b:	89 c2                	mov    edx,eax
c0017d2d:	83 f9 10             	cmp    ecx,0x10
c0017d30:	75 ee                	jne    c0017d20 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017d32:	83 c4 1c             	add    esp,0x1c
c0017d35:	31 c0                	xor    eax,eax
c0017d37:	5b                   	pop    ebx
c0017d38:	5e                   	pop    esi
c0017d39:	5f                   	pop    edi
c0017d3a:	5d                   	pop    ebp
c0017d3b:	c3                   	ret    
c0017d3c:	83 ec 08             	sub    esp,0x8
c0017d3f:	b8 01 00 00 00       	mov    eax,0x1
c0017d44:	d3 e0                	shl    eax,cl
c0017d46:	09 c6                	or     esi,eax
c0017d48:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d4e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d55:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017d58:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d5b:	01 ce                	add    esi,ecx
c0017d5d:	89 f0                	mov    eax,esi
c0017d5f:	c1 e0 05             	shl    eax,0x5
c0017d62:	01 c6                	add    esi,eax
c0017d64:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017d67:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d6d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d77:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017d7d:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017d83:	89 ca                	mov    edx,ecx
c0017d85:	f7 da                	neg    edx
c0017d87:	c1 e2 15             	shl    edx,0x15
c0017d8a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d90:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d96:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d9a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017da4:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017daa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017dae:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017db4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017dbe:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dc8:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017dcf:	50                   	push   eax
c0017dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dd4:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017dd9:	e8 54 71 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de5:	83 c4 1c             	add    esp,0x1c
c0017de8:	5b                   	pop    ebx
c0017de9:	5e                   	pop    esi
c0017dea:	5f                   	pop    edi
c0017deb:	5d                   	pop    ebp
c0017dec:	c3                   	ret    
c0017ded:	90                   	nop

c0017dee <Process::createUserThread()>:
c0017dee:	83 ec 0c             	sub    esp,0xc
c0017df1:	68 80 00 00 00       	push   0x80
c0017df6:	6a 00                	push   0x0
c0017df8:	68 e4 7b 01 c0       	push   0xc0017be4
c0017dfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e01:	e8 04 ff ff ff       	call   c0017d0a <Process::createThread(void (*)(void*), void*, int)>
c0017e06:	83 c4 1c             	add    esp,0x1c
c0017e09:	c3                   	ret    

c0017e0a <setupMultitasking(void (*)())>:
c0017e0a:	56                   	push   esi
c0017e0b:	53                   	push   ebx
c0017e0c:	53                   	push   ebx
c0017e0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e11:	eb 10                	jmp    c0017e23 <setupMultitasking(void (*)())+0x19>
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017e1b:	e8 64 70 00 00       	call   c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017e2b:	e8 38 70 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	84 c0                	test   al,al
c0017e35:	74 dc                	je     c0017e13 <setupMultitasking(void (*)())+0x9>
c0017e37:	83 ec 0c             	sub    esp,0xc
c0017e3a:	68 3b 07 00 00       	push   0x73b
c0017e3f:	e8 c8 70 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0017e44:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e4b:	89 c3                	mov    ebx,eax
c0017e4d:	6a 00                	push   0x0
c0017e4f:	68 24 1e 02 c0       	push   0xc0021e24
c0017e54:	6a 01                	push   0x1
c0017e56:	50                   	push   eax
c0017e57:	e8 e4 fb ff ff       	call   c0017a40 <Process::Process(bool, char const*, Process*, char**)>
c0017e5c:	83 c4 18             	add    esp,0x18
c0017e5f:	89 1d d4 4b 02 c0    	mov    DWORD PTR ds:0xc0024bd4,ebx
c0017e65:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e6b:	68 44 1f 02 c0       	push   0xc0021f44
c0017e70:	e8 86 71 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0017e75:	58                   	pop    eax
c0017e76:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e7c:	e8 4c 50 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0017e81:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017e89:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e92:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017e9c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ea2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017ea8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017eb2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017ebc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017ec6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ecc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017ed2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017edc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ee2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017eec:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ef2:	5a                   	pop    edx
c0017ef3:	59                   	pop    ecx
c0017ef4:	68 20 1e 02 c0       	push   0xc0021e20
c0017ef9:	50                   	push   eax
c0017efa:	e8 a8 87 fe ff       	call   c00006a7 <strcpy>
c0017eff:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f0a:	83 c4 14             	add    esp,0x14
c0017f0d:	5b                   	pop    ebx
c0017f0e:	5e                   	pop    esi
c0017f0f:	e9 fd 82 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017f14 <schedule()>:
c0017f14:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c0017f19:	85 c0                	test   eax,eax
c0017f1b:	74 0b                	je     c0017f28 <schedule()+0x14>
c0017f1d:	c7 05 a4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024ba4,0x1
c0017f27:	c3                   	ret    
c0017f28:	53                   	push   ebx
c0017f29:	83 ec 14             	sub    esp,0x14
c0017f2c:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017f31:	e8 32 6f 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	84 c0                	test   al,al
c0017f3b:	75 38                	jne    c0017f75 <schedule()+0x61>
c0017f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f45:	4a                   	dec    edx
c0017f46:	74 32                	je     c0017f7a <schedule()+0x66>
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017f50:	e8 0b 6f 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f55:	c7 04 24 c8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bc8
c0017f5c:	89 c3                	mov    ebx,eax
c0017f5e:	e8 21 6f 00 00       	call   c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f63:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f6d:	e8 08 fd ff ff       	call   c0017c7a <switchToThread(ThreadControlBlock*)>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	83 c4 08             	add    esp,0x8
c0017f78:	5b                   	pop    ebx
c0017f79:	c3                   	ret    
c0017f7a:	83 ec 08             	sub    esp,0x8
c0017f7d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f84:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f8a:	68 c8 4b 02 c0       	push   0xc0024bc8
c0017f8f:	e8 9e 6f 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	eb af                	jmp    c0017f48 <schedule()+0x34>

c0017f99 <unlockStuff()>:
c0017f99:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c0017f9e:	48                   	dec    eax
c0017f9f:	a3 a8 4b 02 c0       	mov    ds:0xc0024ba8,eax
c0017fa4:	75 09                	jne    c0017faf <unlockStuff()+0x16>
c0017fa6:	a1 a4 4b 02 c0       	mov    eax,ds:0xc0024ba4
c0017fab:	85 c0                	test   eax,eax
c0017fad:	75 05                	jne    c0017fb4 <unlockStuff()+0x1b>
c0017faf:	e9 1d fc ff ff       	jmp    c0017bd1 <enableIRQs()>
c0017fb4:	83 ec 0c             	sub    esp,0xc
c0017fb7:	c7 05 a4 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ba4,0x0
c0017fc1:	e8 4e ff ff ff       	call   c0017f14 <schedule()>
c0017fc6:	83 c4 0c             	add    esp,0xc
c0017fc9:	e9 03 fc ff ff       	jmp    c0017bd1 <enableIRQs()>

c0017fce <forkProcess(regs*)>:
c0017fce:	56                   	push   esi
c0017fcf:	53                   	push   ebx
c0017fd0:	50                   	push   eax
c0017fd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fd9:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017fe1:	0f 85 3e 01 00 00    	jne    c0018125 <forkProcess(regs*)+0x157>
c0017fe7:	e8 1b fc ff ff       	call   c0017c07 <lockStuff()>
c0017fec:	83 ec 0c             	sub    esp,0xc
c0017fef:	68 3b 07 00 00       	push   0x73b
c0017ff4:	e8 13 6f ff ff       	call   c000ef0c <operator new(unsigned long)>
c0017ff9:	89 c3                	mov    ebx,eax
c0017ffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018000:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018003:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001800a:	50                   	push   eax
c001800b:	83 c0 0c             	add    eax,0xc
c001800e:	50                   	push   eax
c001800f:	6a 00                	push   0x0
c0018011:	53                   	push   ebx
c0018012:	e8 29 fa ff ff       	call   c0017a40 <Process::Process(bool, char const*, Process*, char**)>
c0018017:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c001801d:	83 c4 20             	add    esp,0x20
c0018020:	85 f6                	test   esi,esi
c0018022:	74 16                	je     c001803a <forkProcess(regs*)+0x6c>
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	56                   	push   esi
c0018028:	e8 19 62 ff ff       	call   c000e246 <VAS::~VAS()>
c001802d:	59                   	pop    ecx
c001802e:	58                   	pop    eax
c001802f:	6a 10                	push   0x10
c0018031:	56                   	push   esi
c0018032:	e8 e4 6e ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0018037:	83 c4 10             	add    esp,0x10
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0018046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001804b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001804e:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018054:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c001805a:	6a 10                	push   0x10
c001805c:	e8 ab 6e ff ff       	call   c000ef0c <operator new(unsigned long)>
c0018061:	59                   	pop    ecx
c0018062:	89 c6                	mov    esi,eax
c0018064:	58                   	pop    eax
c0018065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001806d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0018073:	56                   	push   esi
c0018074:	e8 ef 66 ff ff       	call   c000e768 <VAS::VAS(VAS*)>
c0018079:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c001807f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018082:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018084:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001808a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001808f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018092:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0018098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00180a0:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00180a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ab:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c00180ae:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00180b8:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c00180be:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00180c4:	81 c3 0c 02 00 00    	add    ebx,0x20c
c00180ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180cf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00180d2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00180d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00180dc:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c00180e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00180ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00180f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00180f9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00180fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018101:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0018104:	58                   	pop    eax
c0018105:	5a                   	pop    edx
c0018106:	53                   	push   ebx
c0018107:	68 c8 4b 02 c0       	push   0xc0024bc8
c001810c:	e8 21 6e 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018111:	e8 83 fe ff ff       	call   c0017f99 <unlockStuff()>
c0018116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018121:	5a                   	pop    edx
c0018122:	5b                   	pop    ebx
c0018123:	5e                   	pop    esi
c0018124:	c3                   	ret    
c0018125:	83 ec 0c             	sub    esp,0xc
c0018128:	68 78 1f 02 c0       	push   0xc0021f78
c001812d:	e8 c9 6e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001813a:	eb e5                	jmp    c0018121 <forkProcess(regs*)+0x153>

c001813c <Semaphore::tryAcquire()>:
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018143:	e8 bf fa ff ff       	call   c0017c07 <lockStuff()>
c0018148:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001814b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001814d:	7c 0b                	jl     c001815a <Semaphore::tryAcquire()+0x1e>
c001814f:	e8 45 fe ff ff       	call   c0017f99 <unlockStuff()>
c0018154:	31 c0                	xor    eax,eax
c0018156:	83 c4 0c             	add    esp,0xc
c0018159:	c3                   	ret    
c001815a:	42                   	inc    edx
c001815b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001815e:	e8 36 fe ff ff       	call   c0017f99 <unlockStuff()>
c0018163:	b0 01                	mov    al,0x1
c0018165:	83 c4 0c             	add    esp,0xc
c0018168:	c3                   	ret    
c0018169:	90                   	nop

c001816a <Semaphore::assertLocked(char const*)>:
c001816a:	83 ec 0c             	sub    esp,0xc
c001816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018171:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018175:	e8 8d fa ff ff       	call   c0017c07 <lockStuff()>
c001817a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001817c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001817f:	7c 08                	jl     c0018189 <Semaphore::assertLocked(char const*)+0x1f>
c0018181:	83 c4 0c             	add    esp,0xc
c0018184:	e9 10 fe ff ff       	jmp    c0017f99 <unlockStuff()>
c0018189:	83 ec 0c             	sub    esp,0xc
c001818c:	52                   	push   edx
c001818d:	e8 fe ca ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0018192:	83 c4 10             	add    esp,0x10
c0018195:	83 c4 0c             	add    esp,0xc
c0018198:	e9 fc fd ff ff       	jmp    c0017f99 <unlockStuff()>

c001819d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001819d:	83 ec 0c             	sub    esp,0xc
c00181a0:	e8 26 fa ff ff       	call   c0017bcb <getIRQNestingLevel()>
c00181a5:	83 ec 08             	sub    esp,0x8
c00181a8:	50                   	push   eax
c00181a9:	68 a4 1f 02 c0       	push   0xc0021fa4
c00181ae:	e8 48 6e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00181b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181bf:	e8 50 fd ff ff       	call   c0017f14 <schedule()>
c00181c4:	e8 19 fa ff ff       	call   c0017be2 <unlockScheduler()>
c00181c9:	e8 fd f9 ff ff       	call   c0017bcb <getIRQNestingLevel()>
c00181ce:	5a                   	pop    edx
c00181cf:	59                   	pop    ecx
c00181d0:	50                   	push   eax
c00181d1:	68 d8 1f 02 c0       	push   0xc0021fd8
c00181d6:	e8 20 6e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00181db:	83 c4 1c             	add    esp,0x1c
c00181de:	c3                   	ret    

c00181df <blockTask(TaskState)>:
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181e6:	e8 f5 f9 ff ff       	call   c0017be0 <lockScheduler()>
c00181eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181f3:	e8 1c fd ff ff       	call   c0017f14 <schedule()>
c00181f8:	83 c4 0c             	add    esp,0xc
c00181fb:	e9 e2 f9 ff ff       	jmp    c0017be2 <unlockScheduler()>

c0018200 <waitTask(int, int*, int)>:
c0018200:	83 ec 18             	sub    esp,0x18
c0018203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018208:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001820c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001820f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018218:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001821b:	6a 07                	push   0x7
c001821d:	e8 bd ff ff ff       	call   c00181df <blockTask(TaskState)>
c0018222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001822d:	85 d2                	test   edx,edx
c001822f:	74 0a                	je     c001823b <waitTask(int, int*, int)+0x3b>
c0018231:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018234:	89 02                	mov    DWORD PTR [edx],eax
c0018236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001823b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001823e:	83 c4 0c             	add    esp,0xc
c0018241:	c3                   	ret    

c0018242 <nanoSleepUntil(unsigned long long)>:
c0018242:	83 ec 0c             	sub    esp,0xc
c0018245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018249:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001824d:	3b 05 f0 3d 02 c0    	cmp    eax,DWORD PTR ds:0xc0023df0
c0018253:	89 d1                	mov    ecx,edx
c0018255:	1b 0d f4 3d 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023df4
c001825b:	73 04                	jae    c0018261 <nanoSleepUntil(unsigned long long)+0x1f>
c001825d:	83 c4 0c             	add    esp,0xc
c0018260:	c3                   	ret    
c0018261:	e8 a1 f9 ff ff       	call   c0017c07 <lockStuff()>
c0018266:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001826c:	83 ec 08             	sub    esp,0x8
c001826f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018272:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018275:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001827b:	68 bc 4b 02 c0       	push   0xc0024bbc
c0018280:	e8 ad 6c 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018285:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001828c:	e8 4e ff ff ff       	call   c00181df <blockTask(TaskState)>
c0018291:	83 c4 1c             	add    esp,0x1c
c0018294:	e9 00 fd ff ff       	jmp    c0017f99 <unlockStuff()>

c0018299 <nanoSleep(unsigned long long)>:
c0018299:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001829e:	8b 15 f4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023df4
c00182a4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00182a8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00182ac:	eb 94                	jmp    c0018242 <nanoSleepUntil(unsigned long long)>

c00182ae <sleep(unsigned long long)>:
c00182ae:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c00182b6:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c00182bb:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00182bf:	01 ca                	add    edx,ecx
c00182c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182c5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00182c9:	eb ce                	jmp    c0018299 <nanoSleep(unsigned long long)>
c00182cb:	90                   	nop

c00182cc <Semaphore::acquire()>:
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d3:	e8 2f f9 ff ff       	call   c0017c07 <lockStuff()>
c00182d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00182db:	3b 10                	cmp    edx,DWORD PTR [eax]
c00182dd:	7d 0c                	jge    c00182eb <Semaphore::acquire()+0x1f>
c00182df:	42                   	inc    edx
c00182e0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00182e3:	83 c4 0c             	add    esp,0xc
c00182e6:	e9 ae fc ff ff       	jmp    c0017f99 <unlockStuff()>
c00182eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182f1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c00182f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182fb:	85 d2                	test   edx,edx
c00182fd:	74 2a                	je     c0018329 <Semaphore::acquire()+0x5d>
c00182ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018302:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018308:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001830b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018311:	83 ec 0c             	sub    esp,0xc
c0018314:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018317:	6a 05                	push   0x5
c0018319:	e8 c1 fe ff ff       	call   c00181df <blockTask(TaskState)>
c001831e:	83 c4 10             	add    esp,0x10
c0018321:	83 c4 0c             	add    esp,0xc
c0018324:	e9 70 fc ff ff       	jmp    c0017f99 <unlockStuff()>
c0018329:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001832f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018332:	eb d7                	jmp    c001830b <Semaphore::acquire()+0x3f>

c0018334 <execveProcess(char const*, char* const*, char* const*)>:
c0018334:	56                   	push   esi
c0018335:	53                   	push   ebx
c0018336:	50                   	push   eax
c0018337:	e8 cb f8 ff ff       	call   c0017c07 <lockStuff()>
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018344:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018347:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001834d:	68 3b 07 00 00       	push   0x73b
c0018352:	e8 b5 6b ff ff       	call   c000ef0c <operator new(unsigned long)>
c0018357:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001835b:	89 c3                	mov    ebx,eax
c001835d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018362:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018365:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c001836b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001836f:	53                   	push   ebx
c0018370:	e8 13 f5 ff ff       	call   c0017888 <Process::Process(char const*, Process*, char**)>
c0018375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001837a:	83 c4 20             	add    esp,0x20
c001837d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018380:	85 f6                	test   esi,esi
c0018382:	8b 00                	mov    eax,DWORD PTR [eax]
c0018384:	89 03                	mov    DWORD PTR [ebx],eax
c0018386:	74 06                	je     c001838e <execveProcess(char const*, char* const*, char* const*)+0x5a>
c0018388:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c001838e:	83 ec 0c             	sub    esp,0xc
c0018391:	53                   	push   ebx
c0018392:	e8 57 fa ff ff       	call   c0017dee <Process::createUserThread()>
c0018397:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001839e:	e8 3c fe ff ff       	call   c00181df <blockTask(TaskState)>
c00183a3:	e8 f1 fb ff ff       	call   c0017f99 <unlockStuff()>
c00183a8:	e8 33 f8 ff ff       	call   c0017be0 <lockScheduler()>
c00183ad:	e8 62 fb ff ff       	call   c0017f14 <schedule()>
c00183b2:	e8 2b f8 ff ff       	call   c0017be2 <unlockScheduler()>
c00183b7:	83 c4 14             	add    esp,0x14
c00183ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00183bf:	5b                   	pop    ebx
c00183c0:	5e                   	pop    esi
c00183c1:	c3                   	ret    

c00183c2 <taskReturned>:
c00183c2:	83 ec 18             	sub    esp,0x18
c00183c5:	68 0c 20 02 c0       	push   0xc002200c
c00183ca:	e8 c1 c8 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	83 ec 0c             	sub    esp,0xc
c00183d5:	6a 02                	push   0x2
c00183d7:	e8 03 fe ff ff       	call   c00181df <blockTask(TaskState)>
c00183dc:	e8 ff f7 ff ff       	call   c0017be0 <lockScheduler()>
c00183e1:	e8 2e fb ff ff       	call   c0017f14 <schedule()>
c00183e6:	e8 f7 f7 ff ff       	call   c0017be2 <unlockScheduler()>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	eb e2                	jmp    c00183d2 <taskReturned+0x10>

c00183f0 <unblockTask(ThreadControlBlock*)>:
c00183f0:	53                   	push   ebx
c00183f1:	83 ec 08             	sub    esp,0x8
c00183f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183f8:	e8 e3 f7 ff ff       	call   c0017be0 <lockScheduler()>
c00183fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018400:	85 c0                	test   eax,eax
c0018402:	74 5c                	je     c0018460 <unblockTask(ThreadControlBlock*)+0x70>
c0018404:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018407:	48                   	dec    eax
c0018408:	74 31                	je     c001843b <unblockTask(ThreadControlBlock*)+0x4b>
c001840a:	83 ec 0c             	sub    esp,0xc
c001840d:	68 c8 4b 02 c0       	push   0xc0024bc8
c0018412:	e8 49 6a 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	85 c0                	test   eax,eax
c001841c:	75 17                	jne    c0018435 <unblockTask(ThreadControlBlock*)+0x45>
c001841e:	eb 65                	jmp    c0018485 <unblockTask(ThreadControlBlock*)+0x95>
c0018420:	83 ec 08             	sub    esp,0x8
c0018423:	50                   	push   eax
c0018424:	68 c8 4b 02 c0       	push   0xc0024bc8
c0018429:	e8 42 6d 00 00       	call   c001f170 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	85 c0                	test   eax,eax
c0018433:	74 50                	je     c0018485 <unblockTask(ThreadControlBlock*)+0x95>
c0018435:	39 c3                	cmp    ebx,eax
c0018437:	75 e7                	jne    c0018420 <unblockTask(ThreadControlBlock*)+0x30>
c0018439:	eb 1c                	jmp    c0018457 <unblockTask(ThreadControlBlock*)+0x67>
c001843b:	83 ec 0c             	sub    esp,0xc
c001843e:	68 fc 20 02 c0       	push   0xc00220fc
c0018443:	e8 b3 6b ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018448:	c7 04 24 88 20 02 c0 	mov    DWORD PTR [esp],0xc0022088
c001844f:	e8 a7 6b ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	83 c4 08             	add    esp,0x8
c001845a:	5b                   	pop    ebx
c001845b:	e9 82 f7 ff ff       	jmp    c0017be2 <unlockScheduler()>
c0018460:	83 ec 0c             	sub    esp,0xc
c0018463:	68 40 20 02 c0       	push   0xc0022040
c0018468:	e8 8e 6b ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001846d:	c7 04 24 88 20 02 c0 	mov    DWORD PTR [esp],0xc0022088
c0018474:	e8 82 6b ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018479:	83 c4 10             	add    esp,0x10
c001847c:	83 c4 08             	add    esp,0x8
c001847f:	5b                   	pop    ebx
c0018480:	e9 5d f7 ff ff       	jmp    c0017be2 <unlockScheduler()>
c0018485:	83 ec 08             	sub    esp,0x8
c0018488:	53                   	push   ebx
c0018489:	68 c8 4b 02 c0       	push   0xc0024bc8
c001848e:	e8 9f 6a 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	83 c4 08             	add    esp,0x8
c0018499:	5b                   	pop    ebx
c001849a:	e9 43 f7 ff ff       	jmp    c0017be2 <unlockScheduler()>

c001849f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001849f:	55                   	push   ebp
c00184a0:	57                   	push   edi
c00184a1:	56                   	push   esi
c00184a2:	53                   	push   ebx
c00184a3:	83 ec 1c             	sub    esp,0x1c
c00184a6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184aa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184ad:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c00184b3:	85 c9                	test   ecx,ecx
c00184b5:	7e 20                	jle    c00184d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c00184b7:	31 f6                	xor    esi,esi
c00184b9:	83 ec 0c             	sub    esp,0xc
c00184bc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c00184c3:	46                   	inc    esi
c00184c4:	e8 65 37 ff ff       	call   c000bc2e <free>
c00184c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184d5:	7f e2                	jg     c00184b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00184d7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00184e1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184e6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00184e9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00184ec:	d3 c0                	rol    eax,cl
c00184ee:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00184f5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00184f8:	89 f7                	mov    edi,esi
c00184fa:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018502:	0f 85 4f 01 00 00    	jne    c0018657 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018508:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001850e:	85 c0                	test   eax,eax
c0018510:	0f 84 aa 00 00 00    	je     c00185c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018516:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018519:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001851d:	31 c9                	xor    ecx,ecx
c001851f:	eb 10                	jmp    c0018531 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018521:	41                   	inc    ecx
c0018522:	83 f9 10             	cmp    ecx,0x10
c0018525:	0f 84 95 00 00 00    	je     c00185c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001852b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018531:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018538:	d3 fa                	sar    edx,cl
c001853a:	83 e2 01             	and    edx,0x1
c001853d:	74 e2                	je     c0018521 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001853f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018542:	01 ca                	add    edx,ecx
c0018544:	89 d5                	mov    ebp,edx
c0018546:	c1 e5 05             	shl    ebp,0x5
c0018549:	01 ea                	add    edx,ebp
c001854b:	01 d0                	add    eax,edx
c001854d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018553:	83 fd 07             	cmp    ebp,0x7
c0018556:	75 c9                	jne    c0018521 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018558:	05 40 02 00 00       	add    eax,0x240
c001855d:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018560:	83 fd ff             	cmp    ebp,0xffffffff
c0018563:	0f 8c 08 01 00 00    	jl     c0018671 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018569:	0f 84 b9 01 00 00    	je     c0018728 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001856f:	85 ed                	test   ebp,ebp
c0018571:	0f 84 a0 01 00 00    	je     c0018717 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018577:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018579:	75 a6                	jne    c0018521 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001857b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018581:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018585:	01 d0                	add    eax,edx
c0018587:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001858b:	83 ec 0c             	sub    esp,0xc
c001858e:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018594:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018597:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001859d:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185a4:	50                   	push   eax
c00185a5:	e8 46 fe ff ff       	call   c00183f0 <unblockTask(ThreadControlBlock*)>
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185b4:	89 f7                	mov    edi,esi
c00185b6:	41                   	inc    ecx
c00185b7:	83 f9 10             	cmp    ecx,0x10
c00185ba:	0f 85 6b ff ff ff    	jne    c001852b <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00185c0:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00185c6:	85 c0                	test   eax,eax
c00185c8:	74 5d                	je     c0018627 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185ca:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00185d0:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185d6:	74 4f                	je     c0018627 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	68 c8 4b 02 c0       	push   0xc0024bc8
c00185e0:	e8 7b 68 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185e5:	c7 04 24 c8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bc8
c00185ec:	89 c7                	mov    edi,eax
c00185ee:	e8 75 68 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	84 c0                	test   al,al
c00185f8:	0f 84 e4 00 00 00    	je     c00186e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c00185fe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018601:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018607:	85 d2                	test   edx,edx
c0018609:	74 0f                	je     c001861a <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001860b:	83 ec 0c             	sub    esp,0xc
c001860e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018610:	52                   	push   edx
c0018611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018614:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018617:	83 c4 10             	add    esp,0x10
c001861a:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018624:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018627:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001862d:	85 db                	test   ebx,ebx
c001862f:	74 16                	je     c0018647 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018631:	83 ec 0c             	sub    esp,0xc
c0018634:	53                   	push   ebx
c0018635:	e8 0c 5c ff ff       	call   c000e246 <VAS::~VAS()>
c001863a:	58                   	pop    eax
c001863b:	5a                   	pop    edx
c001863c:	6a 10                	push   0x10
c001863e:	53                   	push   ebx
c001863f:	e8 d7 68 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0018644:	83 c4 10             	add    esp,0x10
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	68 2b 1e 02 c0       	push   0xc0021e2b
c001864f:	e8 a7 69 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	68 3b 07 00 00       	push   0x73b
c001865f:	68 39 1e 02 c0       	push   0xc0021e39
c0018664:	e8 92 69 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018669:	83 c4 2c             	add    esp,0x2c
c001866c:	5b                   	pop    ebx
c001866d:	5e                   	pop    esi
c001866e:	5f                   	pop    edi
c001866f:	5d                   	pop    ebp
c0018670:	c3                   	ret    
c0018671:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	68 40 21 02 c0       	push   0xc0022140
c001867d:	e8 0e c6 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0018682:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	89 f7                	mov    edi,esi
c001868a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001868e:	e9 8e fe ff ff       	jmp    c0018521 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018693:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018699:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001869f:	75 1c                	jne    c00186bd <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186a1:	83 ec 0c             	sub    esp,0xc
c00186a4:	68 a8 21 02 c0       	push   0xc00221a8
c00186a9:	e8 4d 69 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00186ae:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186b5:	e8 25 fb ff ff       	call   c00181df <blockTask(TaskState)>
c00186ba:	83 c4 10             	add    esp,0x10
c00186bd:	83 ec 08             	sub    esp,0x8
c00186c0:	56                   	push   esi
c00186c1:	68 c8 4b 02 c0       	push   0xc0024bc8
c00186c6:	e8 67 68 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186cb:	c7 04 24 c8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bc8
c00186d2:	e8 89 67 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	39 f8                	cmp    eax,edi
c00186dc:	0f 84 1c ff ff ff    	je     c00185fe <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00186e2:	83 ec 0c             	sub    esp,0xc
c00186e5:	68 c8 4b 02 c0       	push   0xc0024bc8
c00186ea:	e8 71 67 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186ef:	c7 04 24 c8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bc8
c00186f6:	89 c6                	mov    esi,eax
c00186f8:	e8 87 67 00 00       	call   c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186fd:	83 c4 10             	add    esp,0x10
c0018700:	39 f3                	cmp    ebx,esi
c0018702:	74 b9                	je     c00186bd <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018704:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018707:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001870a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018710:	75 ab                	jne    c00186bd <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018712:	e9 7c ff ff ff       	jmp    c0018693 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018717:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001871b:	83 ec 0c             	sub    esp,0xc
c001871e:	68 74 21 02 c0       	push   0xc0022174
c0018723:	e9 55 ff ff ff       	jmp    c001867d <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0018728:	8b 36                	mov    esi,DWORD PTR [esi]
c001872a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001872e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018731:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018734:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001873a:	01 d7                	add    edi,edx
c001873c:	89 f8                	mov    eax,edi
c001873e:	e9 44 fe ff ff       	jmp    c0018587 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018743 <cleanerTaskFunction(void*)>:
c0018743:	53                   	push   ebx
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	e8 96 f4 ff ff       	call   c0017be2 <unlockScheduler()>
c001874c:	e8 8f f4 ff ff       	call   c0017be0 <lockScheduler()>
c0018751:	80 3d 8c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b8c,0x0
c0018758:	0f 85 8e 00 00 00    	jne    c00187ec <cleanerTaskFunction(void*)+0xa9>
c001875e:	83 ec 0c             	sub    esp,0xc
c0018761:	6a 02                	push   0x2
c0018763:	e8 35 fa ff ff       	call   c001819d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	c6 05 8c 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024b8c,0x0
c0018772:	e8 90 f4 ff ff       	call   c0017c07 <lockStuff()>
c0018777:	e8 64 f4 ff ff       	call   c0017be0 <lockScheduler()>
c001877c:	83 ec 0c             	sub    esp,0xc
c001877f:	68 b0 4b 02 c0       	push   0xc0024bb0
c0018784:	e8 df 66 00 00       	call   c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018789:	83 c4 10             	add    esp,0x10
c001878c:	84 c0                	test   al,al
c001878e:	75 40                	jne    c00187d0 <cleanerTaskFunction(void*)+0x8d>
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	68 b0 4b 02 c0       	push   0xc0024bb0
c0018798:	e8 c3 66 00 00       	call   c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001879d:	c7 04 24 b0 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bb0
c00187a4:	89 c3                	mov    ebx,eax
c00187a6:	e8 d9 66 00 00       	call   c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187ab:	c7 04 24 4f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4f
c00187b2:	e8 44 68 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00187b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ba:	e8 e0 fc ff ff       	call   c001849f <cleanupTerminatedTask(ThreadControlBlock*)>
c00187bf:	c7 04 24 68 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e68
c00187c6:	e8 30 68 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	eb ac                	jmp    c001877c <cleanerTaskFunction(void*)+0x39>
c00187d0:	e8 0d f4 ff ff       	call   c0017be2 <unlockScheduler()>
c00187d5:	e8 bf f7 ff ff       	call   c0017f99 <unlockStuff()>
c00187da:	e8 01 f4 ff ff       	call   c0017be0 <lockScheduler()>
c00187df:	80 3d 8c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b8c,0x0
c00187e6:	0f 84 72 ff ff ff    	je     c001875e <cleanerTaskFunction(void*)+0x1b>
c00187ec:	e8 f1 f3 ff ff       	call   c0017be2 <unlockScheduler()>
c00187f1:	e9 75 ff ff ff       	jmp    c001876b <cleanerTaskFunction(void*)+0x28>

c00187f6 <terminateTask(int)>:
c00187f6:	83 ec 14             	sub    esp,0x14
c00187f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018801:	83 c0 0c             	add    eax,0xc
c0018804:	50                   	push   eax
c0018805:	68 d0 21 02 c0       	push   0xc00221d0
c001880a:	e8 ec 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001880f:	e8 f3 f3 ff ff       	call   c0017c07 <lockStuff()>
c0018814:	e8 c7 f3 ff ff       	call   c0017be0 <lockScheduler()>
c0018819:	c7 04 24 7b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e7b
c0018820:	e8 d6 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018825:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001882e:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018836:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018839:	5a                   	pop    edx
c001883a:	59                   	pop    ecx
c001883b:	50                   	push   eax
c001883c:	68 b0 4b 02 c0       	push   0xc0024bb0
c0018841:	e8 ec 66 00 00       	call   c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001884b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018852:	c7 04 24 95 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e95
c0018859:	e8 9d 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001885e:	83 c4 10             	add    esp,0x10
c0018861:	a1 88 4b 02 c0       	mov    eax,ds:0xc0024b88
c0018866:	85 c0                	test   eax,eax
c0018868:	74 5a                	je     c00188c4 <terminateTask(int)+0xce>
c001886a:	83 ec 0c             	sub    esp,0xc
c001886d:	68 af 1e 02 c0       	push   0xc0021eaf
c0018872:	e8 84 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018877:	58                   	pop    eax
c0018878:	c6 05 8c 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b8c,0x1
c001887f:	ff 35 88 4b 02 c0    	push   DWORD PTR ds:0xc0024b88
c0018885:	e8 66 fb ff ff       	call   c00183f0 <unblockTask(ThreadControlBlock*)>
c001888a:	c7 04 24 c9 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ec9
c0018891:	e8 65 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0018896:	83 c4 10             	add    esp,0x10
c0018899:	e8 44 f3 ff ff       	call   c0017be2 <unlockScheduler()>
c001889e:	e8 f6 f6 ff ff       	call   c0017f99 <unlockStuff()>
c00188a3:	83 ec 0c             	sub    esp,0xc
c00188a6:	68 01 1f 02 c0       	push   0xc0021f01
c00188ab:	e8 4b 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00188b0:	83 c4 10             	add    esp,0x10
c00188b3:	e8 28 f3 ff ff       	call   c0017be0 <lockScheduler()>
c00188b8:	e8 57 f6 ff ff       	call   c0017f14 <schedule()>
c00188bd:	e8 20 f3 ff ff       	call   c0017be2 <unlockScheduler()>
c00188c2:	eb ef                	jmp    c00188b3 <terminateTask(int)+0xbd>
c00188c4:	83 ec 0c             	sub    esp,0xc
c00188c7:	68 e3 1e 02 c0       	push   0xc0021ee3
c00188cc:	e8 2a 67 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c00188d1:	83 c4 10             	add    esp,0x10
c00188d4:	eb c3                	jmp    c0018899 <terminateTask(int)+0xa3>

c00188d6 <Thr::terminateFromIRQ(int)>:
c00188d6:	83 ec 18             	sub    esp,0x18
c00188d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188dd:	e8 14 ff ff ff       	call   c00187f6 <terminateTask(int)>

c00188e2 <Semaphore::release()>:
c00188e2:	83 ec 0c             	sub    esp,0xc
c00188e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e9:	e8 19 f3 ff ff       	call   c0017c07 <lockStuff()>
c00188ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00188f1:	85 d2                	test   edx,edx
c00188f3:	74 1a                	je     c001890f <Semaphore::release()+0x2d>
c00188f5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00188fe:	52                   	push   edx
c00188ff:	e8 ec fa ff ff       	call   c00183f0 <unblockTask(ThreadControlBlock*)>
c0018904:	83 c4 10             	add    esp,0x10
c0018907:	83 c4 0c             	add    esp,0xc
c001890a:	e9 8a f6 ff ff       	jmp    c0017f99 <unlockStuff()>
c001890f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0018912:	83 c4 0c             	add    esp,0xc
c0018915:	e9 7f f6 ff ff       	jmp    c0017f99 <unlockStuff()>

c001891a <__static_initialization_and_destruction_0(int, int)>:
c001891a:	83 ec 0c             	sub    esp,0xc
c001891d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018922:	0f 85 88 00 00 00    	jne    c00189b0 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018928:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018930:	75 7e                	jne    c00189b0 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018932:	83 ec 0c             	sub    esp,0xc
c0018935:	68 c8 4b 02 c0       	push   0xc0024bc8
c001893a:	e8 d9 67 00 00       	call   c001f118 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001893f:	83 c4 10             	add    esp,0x10
c0018942:	83 ec 04             	sub    esp,0x4
c0018945:	68 b4 2b 02 c0       	push   0xc0022bb4
c001894a:	68 c8 4b 02 c0       	push   0xc0024bc8
c001894f:	68 d8 f0 01 c0       	push   0xc001f0d8
c0018954:	e8 3e 65 ff ff       	call   c000ee97 <__cxa_atexit>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	83 ec 0c             	sub    esp,0xc
c001895f:	68 bc 4b 02 c0       	push   0xc0024bbc
c0018964:	e8 af 67 00 00       	call   c001f118 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	83 ec 04             	sub    esp,0x4
c001896f:	68 b4 2b 02 c0       	push   0xc0022bb4
c0018974:	68 bc 4b 02 c0       	push   0xc0024bbc
c0018979:	68 d8 f0 01 c0       	push   0xc001f0d8
c001897e:	e8 14 65 ff ff       	call   c000ee97 <__cxa_atexit>
c0018983:	83 c4 10             	add    esp,0x10
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	68 b0 4b 02 c0       	push   0xc0024bb0
c001898e:	e8 85 67 00 00       	call   c001f118 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	83 ec 04             	sub    esp,0x4
c0018999:	68 b4 2b 02 c0       	push   0xc0022bb4
c001899e:	68 b0 4b 02 c0       	push   0xc0024bb0
c00189a3:	68 d8 f0 01 c0       	push   0xc001f0d8
c00189a8:	e8 ea 64 ff ff       	call   c000ee97 <__cxa_atexit>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	90                   	nop
c00189b1:	83 c4 0c             	add    esp,0xc
c00189b4:	c3                   	ret    

c00189b5 <_GLOBAL__sub_I_kernelProcess>:
c00189b5:	83 ec 0c             	sub    esp,0xc
c00189b8:	83 ec 08             	sub    esp,0x8
c00189bb:	68 ff ff 00 00       	push   0xffff
c00189c0:	6a 01                	push   0x1
c00189c2:	e8 53 ff ff ff       	call   c001891a <__static_initialization_and_destruction_0(int, int)>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	83 c4 0c             	add    esp,0xc
c00189cd:	c3                   	ret    

c00189ce <Vm::vm8086EntryPoint(void*)>:
c00189ce:	83 ec 0c             	sub    esp,0xc
c00189d1:	e8 0c f2 ff ff       	call   c0017be2 <unlockScheduler()>
c00189d6:	fb                   	sti    
c00189d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189dc:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00189e0:	52                   	push   edx
c00189e1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00189e5:	52                   	push   edx
c00189e6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00189ea:	52                   	push   edx
c00189eb:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00189ef:	50                   	push   eax
c00189f0:	e8 c0 77 fe ff       	call   c00001b5 <goToVM86>
c00189f5:	83 c4 1c             	add    esp,0x1c
c00189f8:	c3                   	ret    

c00189f9 <Vm::inbv(unsigned short)>:
c00189f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189fd:	ec                   	in     al,dx
c00189fe:	c3                   	ret    

c00189ff <Vm::outbv(unsigned short, unsigned char)>:
c00189ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a07:	ee                   	out    dx,al
c0018a08:	c3                   	ret    

c0018a09 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a09:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a0e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a13:	c1 e0 04             	shl    eax,0x4
c0018a16:	01 d0                	add    eax,edx
c0018a18:	c3                   	ret    

c0018a19 <Vm::getSegment(unsigned int)>:
c0018a19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a1d:	c1 e8 10             	shr    eax,0x10
c0018a20:	c3                   	ret    

c0018a21 <Vm::getOffset(unsigned int)>:
c0018a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a25:	c3                   	ret    

c0018a26 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018a26:	55                   	push   ebp
c0018a27:	57                   	push   edi
c0018a28:	56                   	push   esi
c0018a29:	53                   	push   ebx
c0018a2a:	83 ec 2c             	sub    esp,0x2c
c0018a2d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018a31:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018a35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a39:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018a3d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a41:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018a45:	e8 96 f1 ff ff       	call   c0017be0 <lockScheduler()>
c0018a4a:	68 80 00 00 00       	push   0x80
c0018a4f:	6a 00                	push   0x0
c0018a51:	68 ce 89 01 c0       	push   0xc00189ce
c0018a56:	55                   	push   ebp
c0018a57:	e8 ae f2 ff ff       	call   c0017d0a <Process::createThread(void (*)(void*), void*, int)>
c0018a5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a60:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018a64:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018a68:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018a6c:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018a70:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018a74:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a7b:	e8 8c 64 ff ff       	call   c000ef0c <operator new(unsigned long)>
c0018a80:	83 c4 0c             	add    esp,0xc
c0018a83:	89 c3                	mov    ebx,eax
c0018a85:	55                   	push   ebp
c0018a86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a8a:	50                   	push   eax
c0018a8b:	e8 9a 6a ff ff       	call   c000f52a <File::File(char const*, Process*)>
c0018a90:	83 c4 0c             	add    esp,0xc
c0018a93:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018a97:	50                   	push   eax
c0018a98:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018a9c:	50                   	push   eax
c0018a9d:	53                   	push   ebx
c0018a9e:	e8 97 6d ff ff       	call   c000f83a <File::stat(unsigned long long*, bool*)>
c0018aa3:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018aa7:	83 c4 10             	add    esp,0x10
c0018aaa:	84 d2                	test   dl,dl
c0018aac:	74 1c                	je     c0018aca <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018aae:	83 ec 0c             	sub    esp,0xc
c0018ab1:	68 ef 21 02 c0       	push   0xc00221ef
c0018ab6:	e8 d5 c1 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0018abb:	e8 22 f1 ff ff       	call   c0017be2 <unlockScheduler()>
c0018ac0:	83 c4 10             	add    esp,0x10
c0018ac3:	31 d2                	xor    edx,edx
c0018ac5:	e9 81 00 00 00       	jmp    c0018b4b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018aca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018ace:	51                   	push   ecx
c0018acf:	51                   	push   ecx
c0018ad0:	6a 01                	push   0x1
c0018ad2:	53                   	push   ebx
c0018ad3:	e8 b6 6a ff ff       	call   c000f58e <File::open(FileOpenMode)>
c0018ad8:	83 c4 10             	add    esp,0x10
c0018adb:	85 c0                	test   eax,eax
c0018add:	74 1b                	je     c0018afa <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018adf:	83 ec 0c             	sub    esp,0xc
c0018ae2:	68 08 22 02 c0       	push   0xc0022208
c0018ae7:	e8 a4 c1 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c0018aec:	e8 f1 f0 ff ff       	call   c0017be2 <unlockScheduler()>
c0018af1:	83 c4 10             	add    esp,0x10
c0018af4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018af8:	eb 51                	jmp    c0018b4b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018afa:	83 ec 0c             	sub    esp,0xc
c0018afd:	0f b7 ff             	movzx  edi,di
c0018b00:	6a 07                	push   0x7
c0018b02:	0f b7 f6             	movzx  esi,si
c0018b05:	68 00 01 00 00       	push   0x100
c0018b0a:	6a 00                	push   0x0
c0018b0c:	6a 00                	push   0x0
c0018b0e:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018b14:	e8 85 5b ff ff       	call   c000e69e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b19:	83 c4 18             	add    esp,0x18
c0018b1c:	57                   	push   edi
c0018b1d:	56                   	push   esi
c0018b1e:	e8 e6 fe ff ff       	call   c0018a09 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b23:	5a                   	pop    edx
c0018b24:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b26:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018b2a:	51                   	push   ecx
c0018b2b:	50                   	push   eax
c0018b2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b34:	53                   	push   ebx
c0018b35:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b38:	83 c4 14             	add    esp,0x14
c0018b3b:	53                   	push   ebx
c0018b3c:	e8 ab 6a ff ff       	call   c000f5ec <File::close()>
c0018b41:	e8 9c f0 ff ff       	call   c0017be2 <unlockScheduler()>
c0018b46:	83 c4 10             	add    esp,0x10
c0018b49:	b2 01                	mov    dl,0x1
c0018b4b:	83 c4 2c             	add    esp,0x2c
c0018b4e:	88 d0                	mov    al,dl
c0018b50:	5b                   	pop    ebx
c0018b51:	5e                   	pop    esi
c0018b52:	5f                   	pop    edi
c0018b53:	5d                   	pop    ebp
c0018b54:	c3                   	ret    

c0018b55 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b55:	57                   	push   edi
c0018b56:	56                   	push   esi
c0018b57:	53                   	push   ebx
c0018b58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b64:	83 e8 06             	sub    eax,0x6
c0018b67:	0f b7 c0             	movzx  eax,ax
c0018b6a:	50                   	push   eax
c0018b6b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018b70:	50                   	push   eax
c0018b71:	e8 93 fe ff ff       	call   c0018a09 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b76:	5a                   	pop    edx
c0018b77:	5e                   	pop    esi
c0018b78:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018b7b:	8d 56 fa             	lea    edx,[esi-0x6]
c0018b7e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018b84:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018b87:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018b8a:	83 c2 02             	add    edx,0x2
c0018b8d:	66 89 10             	mov    WORD PTR [eax],dx
c0018b90:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018b93:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018b97:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018b9a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018b9e:	89 d6                	mov    esi,edx
c0018ba0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018ba6:	66 81 e6 ff fd       	and    si,0xfdff
c0018bab:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018baf:	74 07                	je     c0018bb8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018bb1:	89 d6                	mov    esi,edx
c0018bb3:	66 81 ce 00 02       	or     si,0x200
c0018bb8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bc1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018bc5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018bcd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018bd0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018bd8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018bdb:	5b                   	pop    ebx
c0018bdc:	5e                   	pop    esi
c0018bdd:	5f                   	pop    edi
c0018bde:	c3                   	ret    

c0018bdf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018bdf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018be4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018be9:	c1 e0 04             	shl    eax,0x4
c0018bec:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018bef:	c3                   	ret    

c0018bf0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018bf0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bf5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bfa:	c1 e0 04             	shl    eax,0x4
c0018bfd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018c01:	c3                   	ret    

c0018c02 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018c02:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c07:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c0c:	c1 e0 04             	shl    eax,0x4
c0018c0f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018c12:	c3                   	ret    

c0018c13 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018c13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c18:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c1d:	c1 e0 04             	shl    eax,0x4
c0018c20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c24:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018c27:	c3                   	ret    

c0018c28 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018c28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c32:	c1 e0 04             	shl    eax,0x4
c0018c35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c39:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018c3d:	c3                   	ret    

c0018c3e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018c3e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c48:	c1 e0 04             	shl    eax,0x4
c0018c4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c4f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c52:	c3                   	ret    

c0018c53 <Vm::faultHandler(regs*)>:
c0018c53:	55                   	push   ebp
c0018c54:	57                   	push   edi
c0018c55:	56                   	push   esi
c0018c56:	53                   	push   ebx
c0018c57:	83 ec 1c             	sub    esp,0x1c
c0018c5a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c5e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c61:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c65:	0f b7 f0             	movzx  esi,ax
c0018c68:	52                   	push   edx
c0018c69:	0f b7 c0             	movzx  eax,ax
c0018c6c:	50                   	push   eax
c0018c6d:	e8 97 fd ff ff       	call   c0018a09 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c72:	5a                   	pop    edx
c0018c73:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018c76:	59                   	pop    ecx
c0018c77:	89 c7                	mov    edi,eax
c0018c79:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c89:	0f b7 c5             	movzx  eax,bp
c0018c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c90:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018c94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018c98:	e8 6c fd ff ff       	call   c0018a09 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c9d:	5a                   	pop    edx
c0018c9e:	59                   	pop    ecx
c0018c9f:	b1 06                	mov    cl,0x6
c0018ca1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018ca6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018cab:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018cae:	80 fa 9d             	cmp    dl,0x9d
c0018cb1:	0f 84 1d 02 00 00    	je     c0018ed4 <Vm::faultHandler(regs*)+0x281>
c0018cb7:	0f 87 8e 00 00 00    	ja     c0018d4b <Vm::faultHandler(regs*)+0xf8>
c0018cbd:	80 fa 66             	cmp    dl,0x66
c0018cc0:	0f 84 89 01 00 00    	je     c0018e4f <Vm::faultHandler(regs*)+0x1fc>
c0018cc6:	77 44                	ja     c0018d0c <Vm::faultHandler(regs*)+0xb9>
c0018cc8:	80 fa 36             	cmp    dl,0x36
c0018ccb:	0f 84 74 01 00 00    	je     c0018e45 <Vm::faultHandler(regs*)+0x1f2>
c0018cd1:	77 1a                	ja     c0018ced <Vm::faultHandler(regs*)+0x9a>
c0018cd3:	80 fa 26             	cmp    dl,0x26
c0018cd6:	0f 84 4b 01 00 00    	je     c0018e27 <Vm::faultHandler(regs*)+0x1d4>
c0018cdc:	80 fa 2e             	cmp    dl,0x2e
c0018cdf:	0f 85 4a 05 00 00    	jne    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018ce5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ce8:	31 c9                	xor    ecx,ecx
c0018cea:	47                   	inc    edi
c0018ceb:	eb be                	jmp    c0018cab <Vm::faultHandler(regs*)+0x58>
c0018ced:	80 fa 64             	cmp    dl,0x64
c0018cf0:	0f 84 3b 01 00 00    	je     c0018e31 <Vm::faultHandler(regs*)+0x1de>
c0018cf6:	0f 87 3f 01 00 00    	ja     c0018e3b <Vm::faultHandler(regs*)+0x1e8>
c0018cfc:	80 fa 3e             	cmp    dl,0x3e
c0018cff:	0f 85 2a 05 00 00    	jne    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018d05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d08:	b1 01                	mov    cl,0x1
c0018d0a:	eb de                	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018d0c:	80 fa 6d             	cmp    dl,0x6d
c0018d0f:	0f 84 bf 02 00 00    	je     c0018fd4 <Vm::faultHandler(regs*)+0x381>
c0018d15:	77 17                	ja     c0018d2e <Vm::faultHandler(regs*)+0xdb>
c0018d17:	80 fa 67             	cmp    dl,0x67
c0018d1a:	0f 84 3c 01 00 00    	je     c0018e5c <Vm::faultHandler(regs*)+0x209>
c0018d20:	80 fa 6c             	cmp    dl,0x6c
c0018d23:	0f 84 5d 02 00 00    	je     c0018f86 <Vm::faultHandler(regs*)+0x333>
c0018d29:	e9 01 05 00 00       	jmp    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018d2e:	80 fa 6f             	cmp    dl,0x6f
c0018d31:	0f 84 8b 03 00 00    	je     c00190c2 <Vm::faultHandler(regs*)+0x46f>
c0018d37:	0f 82 0f 03 00 00    	jb     c001904c <Vm::faultHandler(regs*)+0x3f9>
c0018d3d:	80 fa 9c             	cmp    dl,0x9c
c0018d40:	0f 84 23 01 00 00    	je     c0018e69 <Vm::faultHandler(regs*)+0x216>
c0018d46:	e9 e4 04 00 00       	jmp    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018d4b:	80 fa ec             	cmp    dl,0xec
c0018d4e:	0f 84 7f 04 00 00    	je     c00191d3 <Vm::faultHandler(regs*)+0x580>
c0018d54:	77 7b                	ja     c0018dd1 <Vm::faultHandler(regs*)+0x17e>
c0018d56:	80 fa e4             	cmp    dl,0xe4
c0018d59:	0f 84 fe 03 00 00    	je     c001915d <Vm::faultHandler(regs*)+0x50a>
c0018d5f:	77 53                	ja     c0018db4 <Vm::faultHandler(regs*)+0x161>
c0018d61:	80 fa cd             	cmp    dl,0xcd
c0018d64:	0f 84 cd 01 00 00    	je     c0018f37 <Vm::faultHandler(regs*)+0x2e4>
c0018d6a:	80 fa cf             	cmp    dl,0xcf
c0018d6d:	0f 85 bc 04 00 00    	jne    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018d73:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d76:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018d79:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018d7d:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018d80:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018d84:	81 ca 00 02 02 00    	or     edx,0x20200
c0018d8a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018d8d:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018d91:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d97:	66 c1 e8 09          	shr    ax,0x9
c0018d9b:	83 e0 01             	and    eax,0x1
c0018d9e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018da1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018da4:	83 c0 06             	add    eax,0x6
c0018da7:	25 ff ff 00 00       	and    eax,0xffff
c0018dac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018daf:	e9 77 04 00 00       	jmp    c001922b <Vm::faultHandler(regs*)+0x5d8>
c0018db4:	80 fa e6             	cmp    dl,0xe6
c0018db7:	0f 84 ea 03 00 00    	je     c00191a7 <Vm::faultHandler(regs*)+0x554>
c0018dbd:	0f 82 b6 03 00 00    	jb     c0019179 <Vm::faultHandler(regs*)+0x526>
c0018dc3:	80 fa e7             	cmp    dl,0xe7
c0018dc6:	0f 84 f2 03 00 00    	je     c00191be <Vm::faultHandler(regs*)+0x56b>
c0018dcc:	e9 5e 04 00 00       	jmp    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018dd1:	80 fa ef             	cmp    dl,0xef
c0018dd4:	0f 84 3c 04 00 00    	je     c0019216 <Vm::faultHandler(regs*)+0x5c3>
c0018dda:	77 28                	ja     c0018e04 <Vm::faultHandler(regs*)+0x1b1>
c0018ddc:	80 fa ed             	cmp    dl,0xed
c0018ddf:	0f 84 0a 04 00 00    	je     c00191ef <Vm::faultHandler(regs*)+0x59c>
c0018de5:	80 fa ee             	cmp    dl,0xee
c0018de8:	0f 85 41 04 00 00    	jne    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018dee:	50                   	push   eax
c0018def:	50                   	push   eax
c0018df0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018df4:	50                   	push   eax
c0018df5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018df9:	50                   	push   eax
c0018dfa:	e8 00 fc ff ff       	call   c00189ff <Vm::outbv(unsigned short, unsigned char)>
c0018dff:	e9 0a 04 00 00       	jmp    c001920e <Vm::faultHandler(regs*)+0x5bb>
c0018e04:	80 fa fa             	cmp    dl,0xfa
c0018e07:	0f 84 5d 01 00 00    	je     c0018f6a <Vm::faultHandler(regs*)+0x317>
c0018e0d:	80 fa fb             	cmp    dl,0xfb
c0018e10:	0f 84 62 01 00 00    	je     c0018f78 <Vm::faultHandler(regs*)+0x325>
c0018e16:	80 fa f3             	cmp    dl,0xf3
c0018e19:	0f 85 10 04 00 00    	jne    c001922f <Vm::faultHandler(regs*)+0x5dc>
c0018e1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e22:	e9 c3 fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e27:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e2a:	b1 02                	mov    cl,0x2
c0018e2c:	e9 b9 fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e34:	b1 03                	mov    cl,0x3
c0018e36:	e9 af fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e3e:	b1 04                	mov    cl,0x4
c0018e40:	e9 a5 fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e48:	b1 05                	mov    cl,0x5
c0018e4a:	e9 9b fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e52:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e57:	e9 8e fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e5f:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018e64:	e9 81 fe ff ff       	jmp    c0018cea <Vm::faultHandler(regs*)+0x97>
c0018e69:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018e6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e70:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e75:	74 30                	je     c0018ea7 <Vm::faultHandler(regs*)+0x254>
c0018e77:	83 e9 04             	sub    ecx,0x4
c0018e7a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018e80:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e86:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e89:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e8c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e92:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e96:	0f 84 8c 03 00 00    	je     c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018e9c:	80 ce 02             	or     dh,0x2
c0018e9f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ea2:	e9 81 03 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018ea7:	83 e9 02             	sub    ecx,0x2
c0018eaa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018eb0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018eb3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018eb7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ebd:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018ec1:	74 05                	je     c0018ec8 <Vm::faultHandler(regs*)+0x275>
c0018ec3:	80 ce 02             	or     dh,0x2
c0018ec6:	eb 03                	jmp    c0018ecb <Vm::faultHandler(regs*)+0x278>
c0018ec8:	80 e6 fd             	and    dh,0xfd
c0018ecb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ecf:	e9 54 03 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018ed4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ed9:	74 2a                	je     c0018f05 <Vm::faultHandler(regs*)+0x2b2>
c0018edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0018edd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018ee3:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ee9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0018eee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018ef4:	c1 e8 09             	shr    eax,0x9
c0018ef7:	83 e0 01             	and    eax,0x1
c0018efa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018efd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f00:	83 c0 04             	add    eax,0x4
c0018f03:	eb 25                	jmp    c0018f2a <Vm::faultHandler(regs*)+0x2d7>
c0018f05:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f08:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f0e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018f14:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f1a:	66 c1 e8 09          	shr    ax,0x9
c0018f1e:	83 e0 01             	and    eax,0x1
c0018f21:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018f24:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f27:	83 c0 02             	add    eax,0x2
c0018f2a:	25 ff ff 00 00       	and    eax,0xffff
c0018f2f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f32:	e9 f1 02 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018f37:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018f3b:	3c ff                	cmp    al,0xff
c0018f3d:	75 10                	jne    c0018f4f <Vm::faultHandler(regs*)+0x2fc>
c0018f3f:	83 ec 0c             	sub    esp,0xc
c0018f42:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f45:	e8 8c f9 ff ff       	call   c00188d6 <Thr::terminateFromIRQ(int)>
c0018f4a:	e9 c2 02 00 00       	jmp    c0019211 <Vm::faultHandler(regs*)+0x5be>
c0018f4f:	83 ec 0c             	sub    esp,0xc
c0018f52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f5a:	57                   	push   edi
c0018f5b:	50                   	push   eax
c0018f5c:	53                   	push   ebx
c0018f5d:	e8 f3 fb ff ff       	call   c0018b55 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018f62:	83 c4 20             	add    esp,0x20
c0018f65:	e9 c1 02 00 00       	jmp    c001922b <Vm::faultHandler(regs*)+0x5d8>
c0018f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f6f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f73:	e9 b0 02 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018f78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f7d:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018f81:	e9 a2 02 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0018f86:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f8b:	74 0d                	je     c0018f9a <Vm::faultHandler(regs*)+0x347>
c0018f8d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018f94:	0f 87 e9 02 00 00    	ja     c0019283 <Vm::faultHandler(regs*)+0x630>
c0018f9a:	83 ec 0c             	sub    esp,0xc
c0018f9d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018fa0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fa4:	50                   	push   eax
c0018fa5:	e8 4f fa ff ff       	call   c00189f9 <Vm::inbv(unsigned short)>
c0018faa:	83 c4 0c             	add    esp,0xc
c0018fad:	0f b6 c0             	movzx  eax,al
c0018fb0:	0f b7 c9             	movzx  ecx,cx
c0018fb3:	50                   	push   eax
c0018fb4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018fb8:	50                   	push   eax
c0018fb9:	51                   	push   ecx
c0018fba:	e8 54 fc ff ff       	call   c0018c13 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018fc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018fc9:	74 03                	je     c0018fce <Vm::faultHandler(regs*)+0x37b>
c0018fcb:	48                   	dec    eax
c0018fcc:	eb 01                	jmp    c0018fcf <Vm::faultHandler(regs*)+0x37c>
c0018fce:	40                   	inc    eax
c0018fcf:	0f b7 c0             	movzx  eax,ax
c0018fd2:	eb 70                	jmp    c0019044 <Vm::faultHandler(regs*)+0x3f1>
c0018fd4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018fd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018fda:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018fdf:	74 0c                	je     c0018fed <Vm::faultHandler(regs*)+0x39a>
c0018fe1:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018fe7:	0f 87 96 02 00 00    	ja     c0019283 <Vm::faultHandler(regs*)+0x630>
c0018fed:	0f b7 c9             	movzx  ecx,cx
c0018ff0:	0f b7 f6             	movzx  esi,si
c0018ff3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018ff6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ffb:	74 20                	je     c001901d <Vm::faultHandler(regs*)+0x3ca>
c0018ffd:	ed                   	in     eax,dx
c0018ffe:	55                   	push   ebp
c0018fff:	50                   	push   eax
c0019000:	51                   	push   ecx
c0019001:	56                   	push   esi
c0019002:	e8 37 fc ff ff       	call   c0018c3e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001900d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019011:	74 05                	je     c0019018 <Vm::faultHandler(regs*)+0x3c5>
c0019013:	83 e8 04             	sub    eax,0x4
c0019016:	eb 27                	jmp    c001903f <Vm::faultHandler(regs*)+0x3ec>
c0019018:	83 c0 04             	add    eax,0x4
c001901b:	eb 22                	jmp    c001903f <Vm::faultHandler(regs*)+0x3ec>
c001901d:	66 ed                	in     ax,dx
c001901f:	0f b7 c0             	movzx  eax,ax
c0019022:	57                   	push   edi
c0019023:	50                   	push   eax
c0019024:	51                   	push   ecx
c0019025:	56                   	push   esi
c0019026:	e8 fd fb ff ff       	call   c0018c28 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019031:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019035:	74 05                	je     c001903c <Vm::faultHandler(regs*)+0x3e9>
c0019037:	83 e8 02             	sub    eax,0x2
c001903a:	eb 03                	jmp    c001903f <Vm::faultHandler(regs*)+0x3ec>
c001903c:	83 c0 02             	add    eax,0x2
c001903f:	25 ff ff 00 00       	and    eax,0xffff
c0019044:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019047:	e9 dc 01 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c001904c:	49                   	dec    ecx
c001904d:	80 f9 05             	cmp    cl,0x5
c0019050:	77 24                	ja     c0019076 <Vm::faultHandler(regs*)+0x423>
c0019052:	0f b6 c9             	movzx  ecx,cl
c0019055:	ff 24 8d 50 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdddb0]
c001905c:	0f b7 f5             	movzx  esi,bp
c001905f:	eb 15                	jmp    c0019076 <Vm::faultHandler(regs*)+0x423>
c0019061:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019065:	eb 0f                	jmp    c0019076 <Vm::faultHandler(regs*)+0x423>
c0019067:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001906b:	eb 09                	jmp    c0019076 <Vm::faultHandler(regs*)+0x423>
c001906d:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019071:	eb 03                	jmp    c0019076 <Vm::faultHandler(regs*)+0x423>
c0019073:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019076:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019079:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001907e:	74 0b                	je     c001908b <Vm::faultHandler(regs*)+0x438>
c0019080:	3d ff ff 00 00       	cmp    eax,0xffff
c0019085:	0f 87 f8 01 00 00    	ja     c0019283 <Vm::faultHandler(regs*)+0x630>
c001908b:	0f b7 c0             	movzx  eax,ax
c001908e:	52                   	push   edx
c001908f:	52                   	push   edx
c0019090:	50                   	push   eax
c0019091:	56                   	push   esi
c0019092:	e8 48 fb ff ff       	call   c0018bdf <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019097:	59                   	pop    ecx
c0019098:	0f b6 c0             	movzx  eax,al
c001909b:	5e                   	pop    esi
c001909c:	50                   	push   eax
c001909d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00190a1:	50                   	push   eax
c00190a2:	e8 58 f9 ff ff       	call   c00189ff <Vm::outbv(unsigned short, unsigned char)>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00190ad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00190b1:	74 03                	je     c00190b6 <Vm::faultHandler(regs*)+0x463>
c00190b3:	48                   	dec    eax
c00190b4:	eb 01                	jmp    c00190b7 <Vm::faultHandler(regs*)+0x464>
c00190b6:	40                   	inc    eax
c00190b7:	0f b7 c0             	movzx  eax,ax
c00190ba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00190bd:	e9 66 01 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c00190c2:	49                   	dec    ecx
c00190c3:	80 f9 05             	cmp    cl,0x5
c00190c6:	77 1f                	ja     c00190e7 <Vm::faultHandler(regs*)+0x494>
c00190c8:	0f b6 c9             	movzx  ecx,cl
c00190cb:	ff 24 8d 68 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddd98]
c00190d2:	89 ee                	mov    esi,ebp
c00190d4:	eb 11                	jmp    c00190e7 <Vm::faultHandler(regs*)+0x494>
c00190d6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00190d9:	eb 0c                	jmp    c00190e7 <Vm::faultHandler(regs*)+0x494>
c00190db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00190de:	eb 07                	jmp    c00190e7 <Vm::faultHandler(regs*)+0x494>
c00190e0:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00190e3:	eb 02                	jmp    c00190e7 <Vm::faultHandler(regs*)+0x494>
c00190e5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00190e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00190ea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00190ef:	74 0c                	je     c00190fd <Vm::faultHandler(regs*)+0x4aa>
c00190f1:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c00190f7:	0f 87 86 01 00 00    	ja     c0019283 <Vm::faultHandler(regs*)+0x630>
c00190fd:	0f b7 d6             	movzx  edx,si
c0019100:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019103:	0f b7 c1             	movzx  eax,cx
c0019106:	81 e7 00 04 00 00    	and    edi,0x400
c001910c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001910f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019114:	74 1d                	je     c0019133 <Vm::faultHandler(regs*)+0x4e0>
c0019116:	55                   	push   ebp
c0019117:	55                   	push   ebp
c0019118:	50                   	push   eax
c0019119:	52                   	push   edx
c001911a:	e8 e3 fa ff ff       	call   c0018c02 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001911f:	83 c4 10             	add    esp,0x10
c0019122:	89 f2                	mov    edx,esi
c0019124:	ef                   	out    dx,eax
c0019125:	85 ff                	test   edi,edi
c0019127:	74 05                	je     c001912e <Vm::faultHandler(regs*)+0x4db>
c0019129:	83 e9 04             	sub    ecx,0x4
c001912c:	eb 21                	jmp    c001914f <Vm::faultHandler(regs*)+0x4fc>
c001912e:	83 c1 04             	add    ecx,0x4
c0019131:	eb 1c                	jmp    c001914f <Vm::faultHandler(regs*)+0x4fc>
c0019133:	55                   	push   ebp
c0019134:	55                   	push   ebp
c0019135:	50                   	push   eax
c0019136:	52                   	push   edx
c0019137:	e8 b4 fa ff ff       	call   c0018bf0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	89 f2                	mov    edx,esi
c0019141:	66 ef                	out    dx,ax
c0019143:	85 ff                	test   edi,edi
c0019145:	74 05                	je     c001914c <Vm::faultHandler(regs*)+0x4f9>
c0019147:	83 e9 02             	sub    ecx,0x2
c001914a:	eb 03                	jmp    c001914f <Vm::faultHandler(regs*)+0x4fc>
c001914c:	83 c1 02             	add    ecx,0x2
c001914f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019155:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019158:	e9 cb 00 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c001915d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001916b:	50                   	push   eax
c001916c:	e8 88 f8 ff ff       	call   c00189f9 <Vm::inbv(unsigned short)>
c0019171:	0f b6 c0             	movzx  eax,al
c0019174:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019177:	eb 3f                	jmp    c00191b8 <Vm::faultHandler(regs*)+0x565>
c0019179:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001917e:	74 07                	je     c0019187 <Vm::faultHandler(regs*)+0x534>
c0019180:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019184:	ed                   	in     eax,dx
c0019185:	eb 14                	jmp    c001919b <Vm::faultHandler(regs*)+0x548>
c0019187:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001918a:	66 31 c9             	xor    cx,cx
c001918d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019190:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019194:	66 ed                	in     ax,dx
c0019196:	0f b7 c0             	movzx  eax,ax
c0019199:	09 c8                	or     eax,ecx
c001919b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001919e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191a2:	e9 84 00 00 00       	jmp    c001922b <Vm::faultHandler(regs*)+0x5d8>
c00191a7:	52                   	push   edx
c00191a8:	52                   	push   edx
c00191a9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00191ad:	50                   	push   eax
c00191ae:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00191b2:	50                   	push   eax
c00191b3:	e8 47 f8 ff ff       	call   c00189ff <Vm::outbv(unsigned short, unsigned char)>
c00191b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191bc:	eb 53                	jmp    c0019211 <Vm::faultHandler(regs*)+0x5be>
c00191be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00191c1:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191ca:	74 03                	je     c00191cf <Vm::faultHandler(regs*)+0x57c>
c00191cc:	ef                   	out    dx,eax
c00191cd:	eb cf                	jmp    c001919e <Vm::faultHandler(regs*)+0x54b>
c00191cf:	66 ef                	out    dx,ax
c00191d1:	eb cb                	jmp    c001919e <Vm::faultHandler(regs*)+0x54b>
c00191d3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00191da:	83 ec 0c             	sub    esp,0xc
c00191dd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191e1:	50                   	push   eax
c00191e2:	e8 12 f8 ff ff       	call   c00189f9 <Vm::inbv(unsigned short)>
c00191e7:	0f b6 c0             	movzx  eax,al
c00191ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00191ed:	eb 1f                	jmp    c001920e <Vm::faultHandler(regs*)+0x5bb>
c00191ef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191f7:	74 03                	je     c00191fc <Vm::faultHandler(regs*)+0x5a9>
c00191f9:	ed                   	in     eax,dx
c00191fa:	eb 0d                	jmp    c0019209 <Vm::faultHandler(regs*)+0x5b6>
c00191fc:	66 ed                	in     ax,dx
c00191fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019201:	0f b7 c0             	movzx  eax,ax
c0019204:	66 31 d2             	xor    dx,dx
c0019207:	09 d0                	or     eax,edx
c0019209:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001920c:	eb 1a                	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c001920e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	eb 15                	jmp    c001922b <Vm::faultHandler(regs*)+0x5d8>
c0019216:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019219:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001921c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019221:	74 03                	je     c0019226 <Vm::faultHandler(regs*)+0x5d3>
c0019223:	ef                   	out    dx,eax
c0019224:	eb 02                	jmp    c0019228 <Vm::faultHandler(regs*)+0x5d5>
c0019226:	66 ef                	out    dx,ax
c0019228:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001922b:	b0 01                	mov    al,0x1
c001922d:	eb 56                	jmp    c0019285 <Vm::faultHandler(regs*)+0x632>
c001922f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019233:	50                   	push   eax
c0019234:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019238:	50                   	push   eax
c0019239:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001923d:	50                   	push   eax
c001923e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019242:	50                   	push   eax
c0019243:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019247:	50                   	push   eax
c0019248:	52                   	push   edx
c0019249:	52                   	push   edx
c001924a:	68 21 22 02 c0       	push   0xc0022221
c001924f:	e8 a7 5d ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0019254:	83 c4 20             	add    esp,0x20
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	6a 60                	push   0x60
c001925c:	e8 98 f7 ff ff       	call   c00189f9 <Vm::inbv(unsigned short)>
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	3c 1c                	cmp    al,0x1c
c0019266:	74 04                	je     c001926c <Vm::faultHandler(regs*)+0x619>
c0019268:	3c 5a                	cmp    al,0x5a
c001926a:	75 eb                	jne    c0019257 <Vm::faultHandler(regs*)+0x604>
c001926c:	3c 5a                	cmp    al,0x5a
c001926e:	74 04                	je     c0019274 <Vm::faultHandler(regs*)+0x621>
c0019270:	3c 1c                	cmp    al,0x1c
c0019272:	75 0f                	jne    c0019283 <Vm::faultHandler(regs*)+0x630>
c0019274:	83 ec 0c             	sub    esp,0xc
c0019277:	6a 60                	push   0x60
c0019279:	e8 7b f7 ff ff       	call   c00189f9 <Vm::inbv(unsigned short)>
c001927e:	83 c4 10             	add    esp,0x10
c0019281:	eb e9                	jmp    c001926c <Vm::faultHandler(regs*)+0x619>
c0019283:	31 c0                	xor    eax,eax
c0019285:	83 c4 1c             	add    esp,0x1c
c0019288:	5b                   	pop    ebx
c0019289:	5e                   	pop    esi
c001928a:	5f                   	pop    edi
c001928b:	5d                   	pop    ebp
c001928c:	c3                   	ret    
c001928d:	90                   	nop

c001928e <FAT::getName()>:
c001928e:	b8 80 22 02 c0       	mov    eax,0xc0022280
c0019293:	c3                   	ret    

c0019294 <FAT::tell(void*, unsigned long long*)>:
c0019294:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019299:	75 06                	jne    c00192a1 <FAT::tell(void*, unsigned long long*)+0xd>
c001929b:	b8 04 00 00 00       	mov    eax,0x4
c00192a0:	c3                   	ret    
c00192a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192a6:	75 06                	jne    c00192ae <FAT::tell(void*, unsigned long long*)+0x1a>
c00192a8:	b8 04 00 00 00       	mov    eax,0x4
c00192ad:	c3                   	ret    
c00192ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192b2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00192b5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192bc:	89 01                	mov    DWORD PTR [ecx],eax
c00192be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192c1:	b8 00 00 00 00       	mov    eax,0x0
c00192c6:	c3                   	ret    
c00192c7:	90                   	nop

c00192c8 <FAT::stat(void*, unsigned long long*)>:
c00192c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192cd:	75 06                	jne    c00192d5 <FAT::stat(void*, unsigned long long*)+0xd>
c00192cf:	b8 04 00 00 00       	mov    eax,0x4
c00192d4:	c3                   	ret    
c00192d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192da:	75 06                	jne    c00192e2 <FAT::stat(void*, unsigned long long*)+0x1a>
c00192dc:	b8 04 00 00 00       	mov    eax,0x4
c00192e1:	c3                   	ret    
c00192e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00192e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192f0:	89 01                	mov    DWORD PTR [ecx],eax
c00192f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192f5:	b8 00 00 00 00       	mov    eax,0x0
c00192fa:	c3                   	ret    
c00192fb:	90                   	nop

c00192fc <FAT::~FAT()>:
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	ba 04 23 02 c0       	mov    edx,0xc0022304
c0019304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019308:	89 10                	mov    DWORD PTR [eax],edx
c001930a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001930e:	83 ec 0c             	sub    esp,0xc
c0019311:	50                   	push   eax
c0019312:	e8 0d 60 ff ff       	call   c000f324 <Filesystem::~Filesystem()>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	90                   	nop
c001931b:	83 c4 0c             	add    esp,0xc
c001931e:	c3                   	ret    
c001931f:	90                   	nop

c0019320 <FAT::~FAT()>:
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932a:	e8 cd ff ff ff       	call   c00192fc <FAT::~FAT()>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	83 ec 08             	sub    esp,0x8
c0019335:	6a 08                	push   0x8
c0019337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001933b:	e8 db 5b ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	83 c4 0c             	add    esp,0xc
c0019346:	c3                   	ret    
c0019347:	90                   	nop

c0019348 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019348:	83 ec 1c             	sub    esp,0x1c
c001934b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019352:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001935b:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c0019362:	83 f8 ff             	cmp    eax,0xffffffff
c0019365:	75 34                	jne    c001939b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019367:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001936b:	88 c2                	mov    dl,al
c001936d:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0019372:	01 d0                	add    eax,edx
c0019374:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019378:	8b 15 00 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c00
c001937e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019382:	89 14 85 20 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3e0],edx
c0019389:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001938e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019392:	89 14 85 a0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb360],edx
c0019399:	eb 17                	jmp    c00193b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001939b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001939f:	88 c2                	mov    dl,al
c00193a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193a5:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c00193ac:	01 d0                	add    eax,edx
c00193ae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00193b2:	83 ec 04             	sub    esp,0x4
c00193b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193bd:	8d 44 24 15          	lea    eax,[esp+0x15]
c00193c1:	50                   	push   eax
c00193c2:	e8 9e d6 fe ff       	call   c0006a65 <f_getlabel>
c00193c7:	83 c4 10             	add    esp,0x10
c00193ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00193d3:	75 07                	jne    c00193dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00193d5:	b8 00 00 00 00       	mov    eax,0x0
c00193da:	eb 05                	jmp    c00193e1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00193dc:	b8 01 00 00 00       	mov    eax,0x1
c00193e1:	83 c4 1c             	add    esp,0x1c
c00193e4:	c3                   	ret    
c00193e5:	90                   	nop

c00193e6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00193e6:	57                   	push   edi
c00193e7:	83 ec 58             	sub    esp,0x58
c00193ea:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00193f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00193fb:	b8 00 00 00 00       	mov    eax,0x0
c0019400:	fc                   	cld    
c0019401:	89 d7                	mov    edi,edx
c0019403:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019405:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019409:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c0019410:	83 f8 ff             	cmp    eax,0xffffffff
c0019413:	75 34                	jne    c0019449 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019415:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019419:	88 c2                	mov    dl,al
c001941b:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0019420:	01 d0                	add    eax,edx
c0019422:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019426:	8b 15 00 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c00
c001942c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019430:	89 14 85 20 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3e0],edx
c0019437:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001943c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019440:	89 14 85 a0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb360],edx
c0019447:	eb 17                	jmp    c0019460 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019449:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001944d:	88 c2                	mov    dl,al
c001944f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019453:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c001945a:	01 d0                	add    eax,edx
c001945c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019460:	83 ec 08             	sub    esp,0x8
c0019463:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019467:	8d 44 24 18          	lea    eax,[esp+0x18]
c001946b:	50                   	push   eax
c001946c:	e8 ed 72 fe ff       	call   c000075e <strcat>
c0019471:	83 c4 10             	add    esp,0x10
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	8d 44 24 18          	lea    eax,[esp+0x18]
c001947b:	50                   	push   eax
c001947c:	e8 d2 d7 fe ff       	call   c0006c53 <f_setlabel>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019488:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001948d:	75 07                	jne    c0019496 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001948f:	b8 00 00 00 00       	mov    eax,0x0
c0019494:	eb 05                	jmp    c001949b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019496:	b8 01 00 00 00       	mov    eax,0x1
c001949b:	83 c4 58             	add    esp,0x58
c001949e:	5f                   	pop    edi
c001949f:	c3                   	ret    

c00194a0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00194a0:	83 ec 2c             	sub    esp,0x2c
c00194a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00194ab:	83 ec 08             	sub    esp,0x8
c00194ae:	68 a4 22 02 c0       	push   0xc00222a4
c00194b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194b7:	e8 3c 72 fe ff       	call   c00006f8 <strcmp>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	85 c0                	test   eax,eax
c00194c1:	0f 94 c0             	sete   al
c00194c4:	84 c0                	test   al,al
c00194c6:	74 0d                	je     c00194d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00194c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194d0:	e9 a6 00 00 00       	jmp    c001957b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194d5:	83 ec 08             	sub    esp,0x8
c00194d8:	68 96 22 02 c0       	push   0xc0022296
c00194dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194e1:	e8 12 72 fe ff       	call   c00006f8 <strcmp>
c00194e6:	83 c4 10             	add    esp,0x10
c00194e9:	85 c0                	test   eax,eax
c00194eb:	0f 94 c0             	sete   al
c00194ee:	84 c0                	test   al,al
c00194f0:	74 0a                	je     c00194fc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00194f2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194fa:	eb 7f                	jmp    c001957b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194fc:	83 ec 08             	sub    esp,0x8
c00194ff:	68 9c 22 02 c0       	push   0xc002229c
c0019504:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019508:	e8 eb 71 fe ff       	call   c00006f8 <strcmp>
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	85 c0                	test   eax,eax
c0019512:	0f 94 c0             	sete   al
c0019515:	84 c0                	test   al,al
c0019517:	74 0a                	je     c0019523 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019519:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019521:	eb 58                	jmp    c001957b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019523:	83 ec 08             	sub    esp,0x8
c0019526:	68 ec f7 01 c0       	push   0xc001f7ec
c001952b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001952f:	e8 c4 71 fe ff       	call   c00006f8 <strcmp>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	85 c0                	test   eax,eax
c0019539:	0f 94 c0             	sete   al
c001953c:	84 c0                	test   al,al
c001953e:	74 0a                	je     c001954a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019540:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019548:	eb 31                	jmp    c001957b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001954a:	83 ec 08             	sub    esp,0x8
c001954d:	68 a2 22 02 c0       	push   0xc00222a2
c0019552:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019556:	e8 9d 71 fe ff       	call   c00006f8 <strcmp>
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	85 c0                	test   eax,eax
c0019560:	0f 94 c0             	sete   al
c0019563:	84 c0                	test   al,al
c0019565:	74 0a                	je     c0019571 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019567:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001956f:	eb 0a                	jmp    c001957b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019571:	b8 08 00 00 00       	mov    eax,0x8
c0019576:	e9 04 01 00 00       	jmp    c001967f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001957b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019582:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001958b:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c0019592:	83 f8 ff             	cmp    eax,0xffffffff
c0019595:	75 34                	jne    c00195cb <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019597:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001959b:	88 c2                	mov    dl,al
c001959d:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c00195a2:	01 d0                	add    eax,edx
c00195a4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195a8:	8b 15 00 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c00
c00195ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195b2:	89 14 85 20 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3e0],edx
c00195b9:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c00195be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00195c2:	89 14 85 a0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb360],edx
c00195c9:	eb 17                	jmp    c00195e2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00195cb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195cf:	88 c2                	mov    dl,al
c00195d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d5:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c00195dc:	01 d0                	add    eax,edx
c00195de:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195e6:	88 04 24             	mov    BYTE PTR [esp],al
c00195e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00195ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00195f9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00195fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	68 00 20 00 00       	push   0x2000
c001960e:	e8 0b 26 ff ff       	call   c000bc1e <malloc>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001961a:	68 00 20 00 00       	push   0x2000
c001961f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019623:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019627:	50                   	push   eax
c0019628:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001962c:	50                   	push   eax
c001962d:	e8 6c da fe ff       	call   c000709e <f_mkfs>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019639:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001963e:	75 07                	jne    c0019647 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019640:	b8 00 00 00 00       	mov    eax,0x0
c0019645:	eb 38                	jmp    c001967f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019647:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001964c:	75 17                	jne    c0019665 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001964e:	83 ec 0c             	sub    esp,0xc
c0019651:	68 d4 22 02 c0       	push   0xc00222d4
c0019656:	e8 a0 59 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	b8 09 00 00 00       	mov    eax,0x9
c0019663:	eb 1a                	jmp    c001967f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019669:	83 ec 08             	sub    esp,0x8
c001966c:	50                   	push   eax
c001966d:	68 a8 22 02 c0       	push   0xc00222a8
c0019672:	e8 84 59 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	b8 01 00 00 00       	mov    eax,0x1
c001967f:	83 c4 2c             	add    esp,0x2c
c0019682:	c3                   	ret    
c0019683:	90                   	nop

c0019684 <FAT::tryMount(LogicalDisk*, int)>:
c0019684:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001968a:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001968f:	83 f8 14             	cmp    eax,0x14
c0019692:	75 17                	jne    c00196ab <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019694:	83 ec 0c             	sub    esp,0xc
c0019697:	68 ba 22 02 c0       	push   0xc00222ba
c001969c:	e8 ef b5 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c00196a1:	83 c4 10             	add    esp,0x10
c00196a4:	b0 00                	mov    al,0x0
c00196a6:	e9 d7 01 00 00       	jmp    c0019882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196ab:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00196b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196be:	3d 00 02 00 00       	cmp    eax,0x200
c00196c3:	74 07                	je     c00196cc <FAT::tryMount(LogicalDisk*, int)+0x48>
c00196c5:	b0 00                	mov    al,0x0
c00196c7:	e9 b6 01 00 00       	jmp    c0019882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196cc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00196d4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196db:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c00196e2:	83 f8 ff             	cmp    eax,0xffffffff
c00196e5:	74 07                	je     c00196ee <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00196e7:	b0 01                	mov    al,0x1
c00196e9:	e9 94 01 00 00       	jmp    c0019882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196ee:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00196f8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019700:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019707:	88 c2                	mov    dl,al
c0019709:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001970e:	01 d0                	add    eax,edx
c0019710:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019717:	8b 15 00 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c00
c001971d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019724:	89 14 85 20 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3e0],edx
c001972b:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0019730:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019737:	89 14 85 a0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb360],edx
c001973e:	83 ec 0c             	sub    esp,0xc
c0019741:	68 54 02 00 00       	push   0x254
c0019746:	e8 d3 24 ff ff       	call   c000bc1e <malloc>
c001974b:	83 c4 10             	add    esp,0x10
c001974e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019755:	83 ec 04             	sub    esp,0x4
c0019758:	6a 00                	push   0x0
c001975a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019761:	50                   	push   eax
c0019762:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019769:	e8 ee b4 fe ff       	call   c0004c5c <f_mount>
c001976e:	83 c4 10             	add    esp,0x10
c0019771:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019778:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019780:	74 19                	je     c001979b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019782:	83 ec 0c             	sub    esp,0xc
c0019785:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001978c:	e8 ad 24 ff ff       	call   c000bc3e <rfree>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	b0 00                	mov    al,0x0
c0019796:	e9 e7 00 00 00       	jmp    c0019882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001979b:	83 ec 04             	sub    esp,0x4
c001979e:	68 00 01 00 00       	push   0x100
c00197a3:	6a 00                	push   0x0
c00197a5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197ac:	50                   	push   eax
c00197ad:	e8 56 6e fe ff       	call   c0000608 <memset>
c00197b2:	83 c4 10             	add    esp,0x10
c00197b5:	83 ec 08             	sub    esp,0x8
c00197b8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00197bf:	50                   	push   eax
c00197c0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197c7:	50                   	push   eax
c00197c8:	e8 91 6f fe ff       	call   c000075e <strcat>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	83 ec 08             	sub    esp,0x8
c00197d3:	68 c8 22 02 c0       	push   0xc00222c8
c00197d8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197df:	50                   	push   eax
c00197e0:	e8 79 6f fe ff       	call   c000075e <strcat>
c00197e5:	83 c4 10             	add    esp,0x10
c00197e8:	83 ec 04             	sub    esp,0x4
c00197eb:	6a 01                	push   0x1
c00197ed:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00197f4:	50                   	push   eax
c00197f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00197f9:	50                   	push   eax
c00197fa:	e8 bf b4 fe ff       	call   c0004cbe <f_open>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019809:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019810:	85 c0                	test   eax,eax
c0019812:	74 0a                	je     c001981e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019814:	78 2d                	js     c0019843 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019816:	83 e8 04             	sub    eax,0x4
c0019819:	83 f8 01             	cmp    eax,0x1
c001981c:	77 25                	ja     c0019843 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001981e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019826:	83 ec 0c             	sub    esp,0xc
c0019829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001982d:	50                   	push   eax
c001982e:	e8 dd bf fe ff       	call   c0005810 <f_close>
c0019833:	83 c4 10             	add    esp,0x10
c0019836:	90                   	nop
c0019837:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001983f:	74 3a                	je     c001987b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019841:	eb 2d                	jmp    c0019870 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019843:	83 ec 0c             	sub    esp,0xc
c0019846:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001984d:	e8 ec 23 ff ff       	call   c000bc3e <rfree>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	83 ec 04             	sub    esp,0x4
c0019858:	6a 00                	push   0x0
c001985a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019861:	50                   	push   eax
c0019862:	6a 00                	push   0x0
c0019864:	e8 f3 b3 fe ff       	call   c0004c5c <f_mount>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	b0 00                	mov    al,0x0
c001986e:	eb 12                	jmp    c0019882 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019870:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c0019875:	40                   	inc    eax
c0019876:	a3 00 4c 02 c0       	mov    ds:0xc0024c00,eax
c001987b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019882:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019888:	c3                   	ret    
c0019889:	90                   	nop

c001988a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001988a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019890:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019898:	74 0a                	je     c00198a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001989a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00198a2:	75 0a                	jne    c00198ae <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00198a4:	b8 04 00 00 00       	mov    eax,0x4
c00198a9:	e9 db 00 00 00       	jmp    c0019989 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00198ae:	83 ec 08             	sub    esp,0x8
c00198b1:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00198b8:	50                   	push   eax
c00198b9:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00198c0:	e8 55 c5 fe ff       	call   c0005e1a <f_readdir>
c00198c5:	83 c4 10             	add    esp,0x10
c00198c8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00198cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198d5:	83 ec 0c             	sub    esp,0xc
c00198d8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00198df:	83 c0 1a             	add    eax,0x1a
c00198e2:	50                   	push   eax
c00198e3:	e8 3d 6d fe ff       	call   c0000625 <strlen>
c00198e8:	83 c4 10             	add    esp,0x10
c00198eb:	ba 00 00 00 00       	mov    edx,0x0
c00198f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00198f8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00198ff:	0f b6 c0             	movzx  eax,al
c0019902:	83 e0 10             	and    eax,0x10
c0019905:	74 07                	je     c001990e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019907:	b8 02 00 00 00       	mov    eax,0x2
c001990c:	eb 05                	jmp    c0019913 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001990e:	b8 01 00 00 00       	mov    eax,0x1
c0019913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019917:	83 ec 08             	sub    esp,0x8
c001991a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019921:	83 c0 1a             	add    eax,0x1a
c0019924:	50                   	push   eax
c0019925:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019929:	83 c0 10             	add    eax,0x10
c001992c:	50                   	push   eax
c001992d:	e8 75 6d fe ff       	call   c00006a7 <strcpy>
c0019932:	83 c4 10             	add    esp,0x10
c0019935:	83 ec 04             	sub    esp,0x4
c0019938:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001993f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019943:	50                   	push   eax
c0019944:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001994b:	e8 82 6c fe ff       	call   c00005d2 <memcpy>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001995a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019960:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019967:	84 c0                	test   al,al
c0019969:	75 07                	jne    c0019972 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001996b:	b8 07 00 00 00       	mov    eax,0x7
c0019970:	eb 17                	jmp    c0019989 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019972:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019979:	85 c0                	test   eax,eax
c001997b:	75 07                	jne    c0019984 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001997d:	b8 00 00 00 00       	mov    eax,0x0
c0019982:	eb 05                	jmp    c0019989 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019984:	b8 01 00 00 00       	mov    eax,0x1
c0019989:	81 c4 3c 02 00 00    	add    esp,0x23c
c001998f:	c3                   	ret    

c0019990 <FAT::read(void*, unsigned long, void*, int*)>:
c0019990:	83 ec 1c             	sub    esp,0x1c
c0019993:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019998:	74 07                	je     c00199a1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001999a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001999f:	75 07                	jne    c00199a8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00199a1:	b8 04 00 00 00       	mov    eax,0x4
c00199a6:	eb 3d                	jmp    c00199e5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199ac:	50                   	push   eax
c00199ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199b9:	e8 3c b7 fe ff       	call   c00050fa <f_read>
c00199be:	83 c4 10             	add    esp,0x10
c00199c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c9:	89 c2                	mov    edx,eax
c00199cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199cf:	89 10                	mov    DWORD PTR [eax],edx
c00199d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199d5:	85 c0                	test   eax,eax
c00199d7:	75 07                	jne    c00199e0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00199d9:	b8 00 00 00 00       	mov    eax,0x0
c00199de:	eb 05                	jmp    c00199e5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199e0:	b8 01 00 00 00       	mov    eax,0x1
c00199e5:	83 c4 1c             	add    esp,0x1c
c00199e8:	c3                   	ret    
c00199e9:	90                   	nop

c00199ea <FAT::write(void*, unsigned long, void*, int*)>:
c00199ea:	83 ec 1c             	sub    esp,0x1c
c00199ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199f2:	74 07                	je     c00199fb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00199f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199f9:	75 07                	jne    c0019a02 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00199fb:	b8 04 00 00 00       	mov    eax,0x4
c0019a00:	eb 3d                	jmp    c0019a3f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a06:	50                   	push   eax
c0019a07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a13:	e8 62 b9 fe ff       	call   c000537a <f_write>
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a23:	89 c2                	mov    edx,eax
c0019a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a29:	89 10                	mov    DWORD PTR [eax],edx
c0019a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a2f:	85 c0                	test   eax,eax
c0019a31:	75 07                	jne    c0019a3a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019a33:	b8 00 00 00 00       	mov    eax,0x0
c0019a38:	eb 05                	jmp    c0019a3f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a3a:	b8 01 00 00 00       	mov    eax,0x1
c0019a3f:	83 c4 1c             	add    esp,0x1c
c0019a42:	c3                   	ret    
c0019a43:	90                   	nop

c0019a44 <FAT::close(void*)>:
c0019a44:	83 ec 1c             	sub    esp,0x1c
c0019a47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a4c:	75 07                	jne    c0019a55 <FAT::close(void*)+0x11>
c0019a4e:	b8 04 00 00 00       	mov    eax,0x4
c0019a53:	eb 36                	jmp    c0019a8b <FAT::close(void*)+0x47>
c0019a55:	83 ec 0c             	sub    esp,0xc
c0019a58:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a5c:	e8 af bd fe ff       	call   c0005810 <f_close>
c0019a61:	83 c4 10             	add    esp,0x10
c0019a64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a68:	83 ec 0c             	sub    esp,0xc
c0019a6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a6f:	e8 ba 21 ff ff       	call   c000bc2e <free>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a7b:	85 c0                	test   eax,eax
c0019a7d:	75 07                	jne    c0019a86 <FAT::close(void*)+0x42>
c0019a7f:	b8 00 00 00 00       	mov    eax,0x0
c0019a84:	eb 05                	jmp    c0019a8b <FAT::close(void*)+0x47>
c0019a86:	b8 01 00 00 00       	mov    eax,0x1
c0019a8b:	83 c4 1c             	add    esp,0x1c
c0019a8e:	c3                   	ret    
c0019a8f:	90                   	nop

c0019a90 <FAT::closeDir(void*)>:
c0019a90:	83 ec 1c             	sub    esp,0x1c
c0019a93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a98:	75 07                	jne    c0019aa1 <FAT::closeDir(void*)+0x11>
c0019a9a:	b8 04 00 00 00       	mov    eax,0x4
c0019a9f:	eb 36                	jmp    c0019ad7 <FAT::closeDir(void*)+0x47>
c0019aa1:	83 ec 0c             	sub    esp,0xc
c0019aa4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019aa8:	e8 4b c3 fe ff       	call   c0005df8 <f_closedir>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ab4:	83 ec 0c             	sub    esp,0xc
c0019ab7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019abb:	e8 6e 21 ff ff       	call   c000bc2e <free>
c0019ac0:	83 c4 10             	add    esp,0x10
c0019ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ac7:	85 c0                	test   eax,eax
c0019ac9:	75 07                	jne    c0019ad2 <FAT::closeDir(void*)+0x42>
c0019acb:	b8 00 00 00 00       	mov    eax,0x0
c0019ad0:	eb 05                	jmp    c0019ad7 <FAT::closeDir(void*)+0x47>
c0019ad2:	b8 01 00 00 00       	mov    eax,0x1
c0019ad7:	83 c4 1c             	add    esp,0x1c
c0019ada:	c3                   	ret    
c0019adb:	90                   	nop

c0019adc <FAT::seek(void*, unsigned long long)>:
c0019adc:	83 ec 2c             	sub    esp,0x2c
c0019adf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ae7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019aeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019af4:	75 07                	jne    c0019afd <FAT::seek(void*, unsigned long long)+0x21>
c0019af6:	b8 04 00 00 00       	mov    eax,0x4
c0019afb:	eb 2f                	jmp    c0019b2c <FAT::seek(void*, unsigned long long)+0x50>
c0019afd:	83 ec 04             	sub    esp,0x4
c0019b00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b0c:	e8 2e bd fe ff       	call   c000583f <f_lseek>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b1c:	85 c0                	test   eax,eax
c0019b1e:	75 07                	jne    c0019b27 <FAT::seek(void*, unsigned long long)+0x4b>
c0019b20:	b8 00 00 00 00       	mov    eax,0x0
c0019b25:	eb 05                	jmp    c0019b2c <FAT::seek(void*, unsigned long long)+0x50>
c0019b27:	b8 01 00 00 00       	mov    eax,0x1
c0019b2c:	83 c4 2c             	add    esp,0x2c
c0019b2f:	c3                   	ret    

c0019b30 <fatWrapperReadDisk>:
c0019b30:	83 ec 1c             	sub    esp,0x1c
c0019b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b4f:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c0019b56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b5a:	83 ec 0c             	sub    esp,0xc
c0019b5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b61:	52                   	push   edx
c0019b62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b6a:	50                   	push   eax
c0019b6b:	e8 0e 84 ff ff       	call   c0011f7e <LogicalDisk::read(unsigned long long, int, void*)>
c0019b70:	83 c4 20             	add    esp,0x20
c0019b73:	83 c4 1c             	add    esp,0x1c
c0019b76:	c3                   	ret    

c0019b77 <fatWrapperWriteDisk>:
c0019b77:	83 ec 1c             	sub    esp,0x1c
c0019b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b86:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b91:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b96:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c0019b9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ba1:	83 ec 0c             	sub    esp,0xc
c0019ba4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ba8:	52                   	push   edx
c0019ba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bb1:	50                   	push   eax
c0019bb2:	e8 33 84 ff ff       	call   c0011fea <LogicalDisk::write(unsigned long long, int, void*)>
c0019bb7:	83 c4 20             	add    esp,0x20
c0019bba:	83 c4 1c             	add    esp,0x1c
c0019bbd:	c3                   	ret    

c0019bbe <fatWrapperIoctl>:
c0019bbe:	53                   	push   ebx
c0019bbf:	83 ec 28             	sub    esp,0x28
c0019bc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019bca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bd2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019bd7:	75 31                	jne    c0019c0a <fatWrapperIoctl+0x4c>
c0019bd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019be1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019be6:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c0019bed:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bf3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bfd:	66 89 02             	mov    WORD PTR [edx],ax
c0019c00:	b8 00 00 00 00       	mov    eax,0x0
c0019c05:	e9 b2 00 00 00       	jmp    c0019cbc <fatWrapperIoctl+0xfe>
c0019c0a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019c0f:	75 6a                	jne    c0019c7b <fatWrapperIoctl+0xbd>
c0019c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c1e:	8b 04 85 80 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc280]
c0019c25:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c2b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c31:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c37:	89 c8                	mov    eax,ecx
c0019c39:	89 da                	mov    edx,ebx
c0019c3b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c3f:	c1 e0 0a             	shl    eax,0xa
c0019c42:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c47:	8b 0c 8d 80 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc280]
c0019c4e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c54:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c5a:	89 cb                	mov    ebx,ecx
c0019c5c:	c1 fb 1f             	sar    ebx,0x1f
c0019c5f:	53                   	push   ebx
c0019c60:	51                   	push   ecx
c0019c61:	52                   	push   edx
c0019c62:	50                   	push   eax
c0019c63:	e8 24 4b 00 00       	call   c001e78c <__udivdi3>
c0019c68:	83 c4 10             	add    esp,0x10
c0019c6b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c6f:	89 01                	mov    DWORD PTR [ecx],eax
c0019c71:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c74:	b8 00 00 00 00       	mov    eax,0x0
c0019c79:	eb 41                	jmp    c0019cbc <fatWrapperIoctl+0xfe>
c0019c7b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019c80:	75 07                	jne    c0019c89 <fatWrapperIoctl+0xcb>
c0019c82:	b8 00 00 00 00       	mov    eax,0x0
c0019c87:	eb 33                	jmp    c0019cbc <fatWrapperIoctl+0xfe>
c0019c89:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019c8e:	75 19                	jne    c0019ca9 <fatWrapperIoctl+0xeb>
c0019c90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c9c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019ca2:	b8 00 00 00 00       	mov    eax,0x0
c0019ca7:	eb 13                	jmp    c0019cbc <fatWrapperIoctl+0xfe>
c0019ca9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019cae:	75 07                	jne    c0019cb7 <fatWrapperIoctl+0xf9>
c0019cb0:	b8 00 00 00 00       	mov    eax,0x0
c0019cb5:	eb 05                	jmp    c0019cbc <fatWrapperIoctl+0xfe>
c0019cb7:	b8 04 00 00 00       	mov    eax,0x4
c0019cbc:	83 c4 28             	add    esp,0x28
c0019cbf:	5b                   	pop    ebx
c0019cc0:	c3                   	ret    
c0019cc1:	90                   	nop

c0019cc2 <FAT::FAT()>:
c0019cc2:	83 ec 1c             	sub    esp,0x1c
c0019cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cc9:	83 ec 0c             	sub    esp,0xc
c0019ccc:	50                   	push   eax
c0019ccd:	e8 2e 56 ff ff       	call   c000f300 <Filesystem::Filesystem()>
c0019cd2:	83 c4 10             	add    esp,0x10
c0019cd5:	ba 04 23 02 c0       	mov    edx,0xc0022304
c0019cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cde:	89 10                	mov    DWORD PTR [eax],edx
c0019ce0:	c7 05 00 4c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024c00,0x0
c0019cea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cf2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cf7:	7f 15                	jg     c0019d0e <FAT::FAT()+0x4c>
c0019cf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cfd:	c7 04 85 20 4c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb3e0],0xffffffff
c0019d08:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d0c:	eb e4                	jmp    c0019cf2 <FAT::FAT()+0x30>
c0019d0e:	90                   	nop
c0019d0f:	83 c4 1c             	add    esp,0x1c
c0019d12:	c3                   	ret    
c0019d13:	90                   	nop

c0019d14 <FAT::fixFilepath(char*)>:
c0019d14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d18:	8a 00                	mov    al,BYTE PTR [eax]
c0019d1a:	3c 40                	cmp    al,0x40
c0019d1c:	7e 2c                	jle    c0019d4a <FAT::fixFilepath(char*)+0x36>
c0019d1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d22:	8a 00                	mov    al,BYTE PTR [eax]
c0019d24:	83 e8 41             	sub    eax,0x41
c0019d27:	88 c2                	mov    dl,al
c0019d29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d2d:	88 10                	mov    BYTE PTR [eax],dl
c0019d2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d33:	8a 00                	mov    al,BYTE PTR [eax]
c0019d35:	0f be c0             	movsx  eax,al
c0019d38:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c0019d3f:	83 c0 30             	add    eax,0x30
c0019d42:	88 c2                	mov    dl,al
c0019d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d48:	88 10                	mov    BYTE PTR [eax],dl
c0019d4a:	90                   	nop
c0019d4b:	c3                   	ret    

c0019d4c <FAT::open(char const*, void**, FileOpenMode)>:
c0019d4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d5a:	74 0a                	je     c0019d66 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019d5c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d64:	75 0a                	jne    c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019d66:	b8 04 00 00 00       	mov    eax,0x4
c0019d6b:	e9 fd 00 00 00       	jmp    c0019e6d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d7e:	50                   	push   eax
c0019d7f:	e8 23 69 fe ff       	call   c00006a7 <strcpy>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	83 ec 08             	sub    esp,0x8
c0019d8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d8e:	50                   	push   eax
c0019d8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d96:	e8 79 ff ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019da6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dad:	83 e0 01             	and    eax,0x1
c0019db0:	74 08                	je     c0019dba <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019db2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019dba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc1:	83 e0 04             	and    eax,0x4
c0019dc4:	74 10                	je     c0019dd6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019dc6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019dce:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019dd6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ddd:	83 e0 02             	and    eax,0x2
c0019de0:	74 08                	je     c0019dea <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019de2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019dea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019df1:	83 e0 08             	and    eax,0x8
c0019df4:	74 08                	je     c0019dfe <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019df6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019dfe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e05:	83 e0 10             	and    eax,0x10
c0019e08:	74 08                	je     c0019e12 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019e0a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019e12:	83 ec 0c             	sub    esp,0xc
c0019e15:	68 50 02 00 00       	push   0x250
c0019e1a:	e8 ff 1d ff ff       	call   c000bc1e <malloc>
c0019e1f:	83 c4 10             	add    esp,0x10
c0019e22:	89 c2                	mov    edx,eax
c0019e24:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e2b:	89 10                	mov    DWORD PTR [eax],edx
c0019e2d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e3e:	83 ec 04             	sub    esp,0x4
c0019e41:	52                   	push   edx
c0019e42:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e46:	52                   	push   edx
c0019e47:	50                   	push   eax
c0019e48:	e8 71 ae fe ff       	call   c0004cbe <f_open>
c0019e4d:	83 c4 10             	add    esp,0x10
c0019e50:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e57:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e5f:	74 07                	je     c0019e68 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019e61:	b8 01 00 00 00       	mov    eax,0x1
c0019e66:	eb 05                	jmp    c0019e6d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019e68:	b8 00 00 00 00       	mov    eax,0x0
c0019e6d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e73:	c3                   	ret    

c0019e74 <FAT::openDir(char const*, void**)>:
c0019e74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e82:	74 0a                	je     c0019e8e <FAT::openDir(char const*, void**)+0x1a>
c0019e84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e8c:	75 07                	jne    c0019e95 <FAT::openDir(char const*, void**)+0x21>
c0019e8e:	b8 04 00 00 00       	mov    eax,0x4
c0019e93:	eb 7d                	jmp    c0019f12 <FAT::openDir(char const*, void**)+0x9e>
c0019e95:	83 ec 08             	sub    esp,0x8
c0019e98:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ea3:	50                   	push   eax
c0019ea4:	e8 fe 67 fe ff       	call   c00006a7 <strcpy>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eb3:	50                   	push   eax
c0019eb4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ebb:	e8 54 fe ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	83 ec 0c             	sub    esp,0xc
c0019ec6:	6a 4c                	push   0x4c
c0019ec8:	e8 51 1d ff ff       	call   c000bc1e <malloc>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	89 c2                	mov    edx,eax
c0019ed2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ed9:	89 10                	mov    DWORD PTR [eax],edx
c0019edb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ee4:	83 ec 08             	sub    esp,0x8
c0019ee7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019eeb:	52                   	push   edx
c0019eec:	50                   	push   eax
c0019eed:	e8 04 be fe ff       	call   c0005cf6 <f_opendir>
c0019ef2:	83 c4 10             	add    esp,0x10
c0019ef5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019efc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f04:	74 07                	je     c0019f0d <FAT::openDir(char const*, void**)+0x99>
c0019f06:	b8 01 00 00 00       	mov    eax,0x1
c0019f0b:	eb 05                	jmp    c0019f12 <FAT::openDir(char const*, void**)+0x9e>
c0019f0d:	b8 00 00 00 00       	mov    eax,0x0
c0019f12:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f18:	c3                   	ret    
c0019f19:	90                   	nop

c0019f1a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f1a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f20:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f28:	75 0a                	jne    c0019f34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019f2a:	b8 04 00 00 00       	mov    eax,0x4
c0019f2f:	e9 c9 00 00 00       	jmp    c0019ffd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f3c:	75 0a                	jne    c0019f48 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019f3e:	b8 04 00 00 00       	mov    eax,0x4
c0019f43:	e9 b5 00 00 00       	jmp    c0019ffd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f50:	75 0a                	jne    c0019f5c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019f52:	b8 04 00 00 00       	mov    eax,0x4
c0019f57:	e9 a1 00 00 00       	jmp    c0019ffd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f6d:	50                   	push   eax
c0019f6e:	e8 34 67 fe ff       	call   c00006a7 <strcpy>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	83 ec 08             	sub    esp,0x8
c0019f79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f80:	50                   	push   eax
c0019f81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f88:	e8 87 fd ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019f8d:	83 c4 10             	add    esp,0x10
c0019f90:	83 ec 08             	sub    esp,0x8
c0019f93:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f97:	50                   	push   eax
c0019f98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f9f:	50                   	push   eax
c0019fa0:	e8 10 bf fe ff       	call   c0005eb5 <f_stat>
c0019fa5:	83 c4 10             	add    esp,0x10
c0019fa8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019faf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fb6:	85 c0                	test   eax,eax
c0019fb8:	74 07                	je     c0019fc1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019fba:	83 f8 04             	cmp    eax,0x4
c0019fbd:	74 32                	je     c0019ff1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019fbf:	eb 37                	jmp    c0019ff8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019fc1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fc5:	0f b6 c0             	movzx  eax,al
c0019fc8:	83 e0 10             	and    eax,0x10
c0019fcb:	0f 95 c2             	setne  dl
c0019fce:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fd5:	88 10                	mov    BYTE PTR [eax],dl
c0019fd7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019fde:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fe5:	89 01                	mov    DWORD PTR [ecx],eax
c0019fe7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fea:	b8 00 00 00 00       	mov    eax,0x0
c0019fef:	eb 0c                	jmp    c0019ffd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ff1:	b8 02 00 00 00       	mov    eax,0x2
c0019ff6:	eb 05                	jmp    c0019ffd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ff8:	b8 01 00 00 00       	mov    eax,0x1
c0019ffd:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a003:	c3                   	ret    

c001a004 <FAT::unlink(char const*)>:
c001a004:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a00a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a012:	75 07                	jne    c001a01b <FAT::unlink(char const*)+0x17>
c001a014:	b8 04 00 00 00       	mov    eax,0x4
c001a019:	eb 5c                	jmp    c001a077 <FAT::unlink(char const*)+0x73>
c001a01b:	83 ec 08             	sub    esp,0x8
c001a01e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a025:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a029:	50                   	push   eax
c001a02a:	e8 78 66 fe ff       	call   c00006a7 <strcpy>
c001a02f:	83 c4 10             	add    esp,0x10
c001a032:	83 ec 08             	sub    esp,0x8
c001a035:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a039:	50                   	push   eax
c001a03a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a041:	e8 ce fc ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	83 ec 0c             	sub    esp,0xc
c001a04c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a050:	50                   	push   eax
c001a051:	e8 b1 c1 fe ff       	call   c0006207 <f_unlink>
c001a056:	83 c4 10             	add    esp,0x10
c001a059:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a060:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a067:	85 c0                	test   eax,eax
c001a069:	75 07                	jne    c001a072 <FAT::unlink(char const*)+0x6e>
c001a06b:	b8 00 00 00 00       	mov    eax,0x0
c001a070:	eb 05                	jmp    c001a077 <FAT::unlink(char const*)+0x73>
c001a072:	b8 01 00 00 00       	mov    eax,0x1
c001a077:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a07d:	c3                   	ret    

c001a07e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a07e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a084:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a08b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a092:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a096:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a09a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0a2:	75 0a                	jne    c001a0ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a0a4:	b8 04 00 00 00       	mov    eax,0x4
c001a0a9:	e9 1c 01 00 00       	jmp    c001a1ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a0ae:	83 ec 08             	sub    esp,0x8
c001a0b1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0b8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0bc:	50                   	push   eax
c001a0bd:	e8 e5 65 fe ff       	call   c00006a7 <strcpy>
c001a0c2:	83 c4 10             	add    esp,0x10
c001a0c5:	83 ec 08             	sub    esp,0x8
c001a0c8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0cc:	50                   	push   eax
c001a0cd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0d4:	e8 3b fc ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0e4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0f1:	83 e0 01             	and    eax,0x1
c001a0f4:	74 08                	je     c001a0fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a0f6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a0fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a103:	83 e0 02             	and    eax,0x2
c001a106:	74 08                	je     c001a110 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a108:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a110:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a115:	83 e0 04             	and    eax,0x4
c001a118:	74 08                	je     c001a122 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a11a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a122:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a127:	83 e0 08             	and    eax,0x8
c001a12a:	74 08                	je     c001a134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a12c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a134:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a139:	83 e0 01             	and    eax,0x1
c001a13c:	74 08                	je     c001a146 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a13e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a146:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a14b:	83 e0 02             	and    eax,0x2
c001a14e:	74 08                	je     c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a150:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a158:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a15d:	83 e0 04             	and    eax,0x4
c001a160:	74 08                	je     c001a16a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a162:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a16a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a16f:	83 e0 08             	and    eax,0x8
c001a172:	74 08                	je     c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a174:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a17c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a183:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a18a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a192:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a19a:	83 ec 04             	sub    esp,0x4
c001a19d:	52                   	push   edx
c001a19e:	50                   	push   eax
c001a19f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1a3:	50                   	push   eax
c001a1a4:	e8 00 c7 fe ff       	call   c00068a9 <f_chmod>
c001a1a9:	83 c4 10             	add    esp,0x10
c001a1ac:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1b3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1ba:	85 c0                	test   eax,eax
c001a1bc:	75 07                	jne    c001a1c5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a1be:	b8 00 00 00 00       	mov    eax,0x0
c001a1c3:	eb 05                	jmp    c001a1ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a1c5:	b8 01 00 00 00       	mov    eax,0x1
c001a1ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1d0:	c3                   	ret    
c001a1d1:	90                   	nop

c001a1d2 <FAT::rename(char const*, char const*)>:
c001a1d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1d8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1e0:	74 0a                	je     c001a1ec <FAT::rename(char const*, char const*)+0x1a>
c001a1e2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1ea:	75 0a                	jne    c001a1f6 <FAT::rename(char const*, char const*)+0x24>
c001a1ec:	b8 04 00 00 00       	mov    eax,0x4
c001a1f1:	e9 98 00 00 00       	jmp    c001a28e <FAT::rename(char const*, char const*)+0xbc>
c001a1f6:	83 ec 08             	sub    esp,0x8
c001a1f9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a200:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a207:	50                   	push   eax
c001a208:	e8 9a 64 fe ff       	call   c00006a7 <strcpy>
c001a20d:	83 c4 10             	add    esp,0x10
c001a210:	83 ec 08             	sub    esp,0x8
c001a213:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a21a:	50                   	push   eax
c001a21b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a222:	e8 ed fa ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	83 ec 08             	sub    esp,0x8
c001a22d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a234:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a238:	50                   	push   eax
c001a239:	e8 69 64 fe ff       	call   c00006a7 <strcpy>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	83 ec 08             	sub    esp,0x8
c001a244:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a248:	50                   	push   eax
c001a249:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a250:	e8 bf fa ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a255:	83 c4 10             	add    esp,0x10
c001a258:	83 ec 08             	sub    esp,0x8
c001a25b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a25f:	50                   	push   eax
c001a260:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a267:	50                   	push   eax
c001a268:	e8 49 c3 fe ff       	call   c00065b6 <f_rename>
c001a26d:	83 c4 10             	add    esp,0x10
c001a270:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a277:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a27e:	85 c0                	test   eax,eax
c001a280:	75 07                	jne    c001a289 <FAT::rename(char const*, char const*)+0xb7>
c001a282:	b8 00 00 00 00       	mov    eax,0x0
c001a287:	eb 05                	jmp    c001a28e <FAT::rename(char const*, char const*)+0xbc>
c001a289:	b8 01 00 00 00       	mov    eax,0x1
c001a28e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a294:	c3                   	ret    
c001a295:	90                   	nop

c001a296 <FAT::mkdir(char const*)>:
c001a296:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a29c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2a4:	75 07                	jne    c001a2ad <FAT::mkdir(char const*)+0x17>
c001a2a6:	b8 04 00 00 00       	mov    eax,0x4
c001a2ab:	eb 5c                	jmp    c001a309 <FAT::mkdir(char const*)+0x73>
c001a2ad:	83 ec 08             	sub    esp,0x8
c001a2b0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2bb:	50                   	push   eax
c001a2bc:	e8 e6 63 fe ff       	call   c00006a7 <strcpy>
c001a2c1:	83 c4 10             	add    esp,0x10
c001a2c4:	83 ec 08             	sub    esp,0x8
c001a2c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2cb:	50                   	push   eax
c001a2cc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2d3:	e8 3c fa ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	83 ec 0c             	sub    esp,0xc
c001a2de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2e2:	50                   	push   eax
c001a2e3:	e8 a2 c0 fe ff       	call   c000638a <f_mkdir>
c001a2e8:	83 c4 10             	add    esp,0x10
c001a2eb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2f2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2f9:	85 c0                	test   eax,eax
c001a2fb:	75 07                	jne    c001a304 <FAT::mkdir(char const*)+0x6e>
c001a2fd:	b8 00 00 00 00       	mov    eax,0x0
c001a302:	eb 05                	jmp    c001a309 <FAT::mkdir(char const*)+0x73>
c001a304:	b8 01 00 00 00       	mov    eax,0x1
c001a309:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a30f:	c3                   	ret    

c001a310 <FAT::exists(char const*)>:
c001a310:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a316:	83 ec 08             	sub    esp,0x8
c001a319:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a324:	50                   	push   eax
c001a325:	e8 7d 63 fe ff       	call   c00006a7 <strcpy>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	83 ec 08             	sub    esp,0x8
c001a330:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a334:	50                   	push   eax
c001a335:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a33c:	e8 d3 f9 ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	83 ec 08             	sub    esp,0x8
c001a347:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a34e:	50                   	push   eax
c001a34f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a353:	50                   	push   eax
c001a354:	e8 5c bb fe ff       	call   c0005eb5 <f_stat>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a363:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a36a:	85 c0                	test   eax,eax
c001a36c:	75 04                	jne    c001a372 <FAT::exists(char const*)+0x62>
c001a36e:	b0 01                	mov    al,0x1
c001a370:	eb 02                	jmp    c001a374 <FAT::exists(char const*)+0x64>
c001a372:	b0 00                	mov    al,0x0
c001a374:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a37a:	c3                   	ret    
c001a37b:	90                   	nop

c001a37c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a37c:	b8 08 00 00 00       	mov    eax,0x8
c001a381:	c3                   	ret    

c001a382 <ISO9660::seek(void*, unsigned long long)>:
c001a382:	53                   	push   ebx
c001a383:	b8 04 00 00 00       	mov    eax,0x4
c001a388:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a38c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a390:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a394:	85 d2                	test   edx,edx
c001a396:	74 17                	je     c001a3af <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a398:	89 c8                	mov    eax,ecx
c001a39a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a39d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a3a0:	b8 01 00 00 00       	mov    eax,0x1
c001a3a5:	73 08                	jae    c001a3af <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a3a7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a3aa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a3ad:	31 c0                	xor    eax,eax
c001a3af:	5b                   	pop    ebx
c001a3b0:	c3                   	ret    
c001a3b1:	90                   	nop

c001a3b2 <ISO9660::tell(void*, unsigned long long*)>:
c001a3b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3ba:	85 d2                	test   edx,edx
c001a3bc:	74 12                	je     c001a3d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3be:	85 c0                	test   eax,eax
c001a3c0:	74 0e                	je     c001a3d0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3c2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a3c5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a3c8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3cb:	89 10                	mov    DWORD PTR [eax],edx
c001a3cd:	31 c0                	xor    eax,eax
c001a3cf:	c3                   	ret    
c001a3d0:	b8 04 00 00 00       	mov    eax,0x4
c001a3d5:	c3                   	ret    

c001a3d6 <ISO9660::getName()>:
c001a3d6:	b8 60 23 02 c0       	mov    eax,0xc0022360
c001a3db:	c3                   	ret    

c001a3dc <ISO9660::stat(void*, unsigned long long*)>:
c001a3dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3e4:	85 d2                	test   edx,edx
c001a3e6:	74 12                	je     c001a3fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3e8:	85 c0                	test   eax,eax
c001a3ea:	74 0e                	je     c001a3fa <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3ec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a3ef:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a3f2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3f5:	89 10                	mov    DWORD PTR [eax],edx
c001a3f7:	31 c0                	xor    eax,eax
c001a3f9:	c3                   	ret    
c001a3fa:	b8 04 00 00 00       	mov    eax,0x4
c001a3ff:	c3                   	ret    

c001a400 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a400:	b8 01 00 00 00       	mov    eax,0x1
c001a405:	c3                   	ret    

c001a406 <ISO9660::unlink(char const*)>:
c001a406:	b8 01 00 00 00       	mov    eax,0x1
c001a40b:	c3                   	ret    

c001a40c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a40c:	b8 01 00 00 00       	mov    eax,0x1
c001a411:	c3                   	ret    

c001a412 <ISO9660::rename(char const*, char const*)>:
c001a412:	b8 01 00 00 00       	mov    eax,0x1
c001a417:	c3                   	ret    

c001a418 <ISO9660::mkdir(char const*)>:
c001a418:	b8 01 00 00 00       	mov    eax,0x1
c001a41d:	c3                   	ret    

c001a41e <ISO9660::close(void*)>:
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	b8 04 00 00 00       	mov    eax,0x4
c001a426:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a42a:	85 d2                	test   edx,edx
c001a42c:	74 0e                	je     c001a43c <ISO9660::close(void*)+0x1e>
c001a42e:	83 ec 0c             	sub    esp,0xc
c001a431:	52                   	push   edx
c001a432:	e8 f7 17 ff ff       	call   c000bc2e <free>
c001a437:	83 c4 10             	add    esp,0x10
c001a43a:	31 c0                	xor    eax,eax
c001a43c:	83 c4 0c             	add    esp,0xc
c001a43f:	c3                   	ret    

c001a440 <ISO9660::closeDir(void*)>:
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	b8 04 00 00 00       	mov    eax,0x4
c001a448:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a44c:	85 d2                	test   edx,edx
c001a44e:	74 0e                	je     c001a45e <ISO9660::closeDir(void*)+0x1e>
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	52                   	push   edx
c001a454:	e8 d5 17 ff ff       	call   c000bc2e <free>
c001a459:	83 c4 10             	add    esp,0x10
c001a45c:	31 c0                	xor    eax,eax
c001a45e:	83 c4 0c             	add    esp,0xc
c001a461:	c3                   	ret    

c001a462 <ISO9660::~ISO9660()>:
c001a462:	83 ec 0c             	sub    esp,0xc
c001a465:	ba b4 23 02 c0       	mov    edx,0xc00223b4
c001a46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46e:	89 10                	mov    DWORD PTR [eax],edx
c001a470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	50                   	push   eax
c001a478:	e8 a7 4e ff ff       	call   c000f324 <Filesystem::~Filesystem()>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	90                   	nop
c001a481:	83 c4 0c             	add    esp,0xc
c001a484:	c3                   	ret    
c001a485:	90                   	nop

c001a486 <ISO9660::~ISO9660()>:
c001a486:	83 ec 0c             	sub    esp,0xc
c001a489:	83 ec 0c             	sub    esp,0xc
c001a48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a490:	e8 cd ff ff ff       	call   c001a462 <ISO9660::~ISO9660()>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	83 ec 08             	sub    esp,0x8
c001a49b:	6a 08                	push   0x8
c001a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4a1:	e8 75 4a ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	83 c4 0c             	add    esp,0xc
c001a4ac:	c3                   	ret    

c001a4ad <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a4ad:	55                   	push   ebp
c001a4ae:	31 c9                	xor    ecx,ecx
c001a4b0:	57                   	push   edi
c001a4b1:	56                   	push   esi
c001a4b2:	53                   	push   ebx
c001a4b3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a4b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4bb:	89 eb                	mov    ebx,ebp
c001a4bd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a4c1:	39 ce                	cmp    esi,ecx
c001a4c3:	7e 17                	jle    c001a4dc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a4c5:	31 d2                	xor    edx,edx
c001a4c7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a4cb:	7d 13                	jge    c001a4e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a4cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4d1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a4d4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a4d7:	75 0d                	jne    c001a4e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a4d9:	42                   	inc    edx
c001a4da:	eb eb                	jmp    c001a4c7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a4dc:	31 c0                	xor    eax,eax
c001a4de:	eb 0a                	jmp    c001a4ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4e0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a4e4:	eb 04                	jmp    c001a4ea <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4e6:	41                   	inc    ecx
c001a4e7:	43                   	inc    ebx
c001a4e8:	eb d7                	jmp    c001a4c1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a4ea:	5b                   	pop    ebx
c001a4eb:	5e                   	pop    esi
c001a4ec:	5f                   	pop    edi
c001a4ed:	5d                   	pop    ebp
c001a4ee:	c3                   	ret    

c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4ef:	56                   	push   esi
c001a4f0:	53                   	push   ebx
c001a4f1:	52                   	push   edx
c001a4f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a4fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4fe:	39 0d 00 4d 02 c0    	cmp    DWORD PTR ds:0xc0024d00,ecx
c001a504:	75 08                	jne    c001a50e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a506:	38 05 a8 31 02 c0    	cmp    BYTE PTR ds:0xc00231a8,al
c001a50c:	74 2b                	je     c001a539 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a50e:	83 ec 0c             	sub    esp,0xc
c001a511:	a2 a8 31 02 c0       	mov    ds:0xc00231a8,al
c001a516:	68 20 4d 02 c0       	push   0xc0024d20
c001a51b:	0f be c0             	movsx  eax,al
c001a51e:	6a 01                	push   0x1
c001a520:	89 0d 00 4d 02 c0    	mov    DWORD PTR ds:0xc0024d00,ecx
c001a526:	31 db                	xor    ebx,ebx
c001a528:	53                   	push   ebx
c001a529:	51                   	push   ecx
c001a52a:	ff 34 85 7c 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc384]
c001a531:	e8 48 7a ff ff       	call   c0011f7e <LogicalDisk::read(unsigned long long, int, void*)>
c001a536:	83 c4 20             	add    esp,0x20
c001a539:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a541:	c7 44 24 14 20 4d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024d20
c001a549:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a54d:	58                   	pop    eax
c001a54e:	5b                   	pop    ebx
c001a54f:	5e                   	pop    esi
c001a550:	e9 7d 60 fe ff       	jmp    c00005d2 <memcpy>
c001a555:	90                   	nop

c001a556 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a556:	81 ec 10 08 00 00    	sub    esp,0x810
c001a55c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a563:	83 c0 41             	add    eax,0x41
c001a566:	0f be c0             	movsx  eax,al
c001a569:	50                   	push   eax
c001a56a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a56e:	50                   	push   eax
c001a56f:	6a 10                	push   0x10
c001a571:	e8 79 ff ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a576:	83 c4 10             	add    esp,0x10
c001a579:	31 c0                	xor    eax,eax
c001a57b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a580:	75 1d                	jne    c001a59f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a582:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a587:	75 16                	jne    c001a59f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a589:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a58e:	75 0f                	jne    c001a59f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a590:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a595:	75 08                	jne    c001a59f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a597:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a59c:	0f 94 c0             	sete   al
c001a59f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a5a5:	c3                   	ret    

c001a5a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5a6:	55                   	push   ebp
c001a5a7:	57                   	push   edi
c001a5a8:	56                   	push   esi
c001a5a9:	53                   	push   ebx
c001a5aa:	81 ec 34 08 00 00    	sub    esp,0x834
c001a5b0:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a5b7:	55                   	push   ebp
c001a5b8:	68 7b 23 02 c0       	push   0xc002237b
c001a5bd:	e8 39 4a ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a5cd:	0f 84 06 02 00 00    	je     c001a7d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5d3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a5db:	0f 84 f8 01 00 00    	je     c001a7d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5e1:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a5e8:	b8 01 00 00 00       	mov    eax,0x1
c001a5ed:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a5f1:	0f 85 e7 01 00 00    	jne    c001a7de <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a5f7:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a5fa:	31 d2                	xor    edx,edx
c001a5fc:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a5ff:	89 e9                	mov    ecx,ebp
c001a601:	89 d3                	mov    ebx,edx
c001a603:	01 f1                	add    ecx,esi
c001a605:	11 fb                	adc    ebx,edi
c001a607:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a60b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a60f:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a616:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a619:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a61c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a620:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a624:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a628:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a62c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a630:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a634:	72 19                	jb     c001a64f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a636:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a642:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a645:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a649:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a64d:	eb 13                	jmp    c001a662 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a64f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a653:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a657:	29 f0                	sub    eax,esi
c001a659:	19 fa                	sbb    edx,edi
c001a65b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a65e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a662:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a669:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a66c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a66e:	53                   	push   ebx
c001a66f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a673:	c1 e0 0b             	shl    eax,0xb
c001a676:	01 c6                	add    esi,eax
c001a678:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a67f:	11 d7                	adc    edi,edx
c001a681:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a685:	89 fa                	mov    edx,edi
c001a687:	50                   	push   eax
c001a688:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a68c:	50                   	push   eax
c001a68d:	89 f0                	mov    eax,esi
c001a68f:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a693:	50                   	push   eax
c001a694:	e8 56 fe ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a699:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a6a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6a4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a6a7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a6ab:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a6b1:	83 c4 10             	add    esp,0x10
c001a6b4:	b8 00 08 00 00       	mov    eax,0x800
c001a6b9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a6bd:	29 d0                	sub    eax,edx
c001a6bf:	39 c1                	cmp    ecx,eax
c001a6c1:	83 db 00             	sbb    ebx,0x0
c001a6c4:	7d 19                	jge    c001a6df <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a6c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a6cb:	75 16                	jne    c001a6e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a6cd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6da:	e9 f6 00 00 00       	jmp    c001a7d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a6df:	89 c5                	mov    ebp,eax
c001a6e1:	eb 03                	jmp    c001a6e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a6e3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a6e6:	51                   	push   ecx
c001a6e7:	55                   	push   ebp
c001a6e8:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a6ec:	50                   	push   eax
c001a6ed:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a6f4:	e8 d9 5e fe ff       	call   c00005d2 <memcpy>
c001a6f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a701:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a708:	01 e8                	add    eax,ebp
c001a70a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a70e:	89 e8                	mov    eax,ebp
c001a710:	99                   	cdq    
c001a711:	01 ee                	add    esi,ebp
c001a713:	11 d7                	adc    edi,edx
c001a715:	29 e9                	sub    ecx,ebp
c001a717:	19 d3                	sbb    ebx,edx
c001a719:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a71d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a721:	83 c4 10             	add    esp,0x10
c001a724:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a729:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a72c:	b8 00 00 00 00       	mov    eax,0x0
c001a731:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a735:	7d 3f                	jge    c001a776 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a737:	52                   	push   edx
c001a738:	89 fa                	mov    edx,edi
c001a73a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a741:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a745:	50                   	push   eax
c001a746:	89 f0                	mov    eax,esi
c001a748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a74c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a750:	50                   	push   eax
c001a751:	e8 99 fd ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a756:	81 c6 00 08 00 00    	add    esi,0x800
c001a75c:	83 d7 00             	adc    edi,0x0
c001a75f:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a767:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a76f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a774:	eb ab                	jmp    c001a721 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77a:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a77d:	74 34                	je     c001a7b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a77f:	89 fa                	mov    edx,edi
c001a781:	50                   	push   eax
c001a782:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a789:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a78d:	50                   	push   eax
c001a78e:	89 f0                	mov    eax,esi
c001a790:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a794:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a798:	55                   	push   ebp
c001a799:	50                   	push   eax
c001a79a:	e8 50 fd ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a79f:	83 c4 0c             	add    esp,0xc
c001a7a2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a7a6:	55                   	push   ebp
c001a7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ab:	e8 22 5e fe ff       	call   c00005d2 <memcpy>
c001a7b0:	83 c4 10             	add    esp,0x10
c001a7b3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a7ba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a7be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7c2:	89 38                	mov    DWORD PTR [eax],edi
c001a7c4:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a7cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7cf:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a7d2:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a7d5:	31 c0                	xor    eax,eax
c001a7d7:	eb 05                	jmp    c001a7de <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a7d9:	b8 04 00 00 00       	mov    eax,0x4
c001a7de:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a7e4:	5b                   	pop    ebx
c001a7e5:	5e                   	pop    esi
c001a7e6:	5f                   	pop    edi
c001a7e7:	5d                   	pop    ebp
c001a7e8:	c3                   	ret    
c001a7e9:	90                   	nop

c001a7ea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a7ea:	55                   	push   ebp
c001a7eb:	57                   	push   edi
c001a7ec:	56                   	push   esi
c001a7ed:	53                   	push   ebx
c001a7ee:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a7f4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a7fb:	85 f6                	test   esi,esi
c001a7fd:	0f 84 64 02 00 00    	je     c001aa67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a803:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a80b:	0f 84 56 02 00 00    	je     c001aa67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a811:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a814:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a817:	75 0a                	jne    c001a823 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a819:	b8 07 00 00 00       	mov    eax,0x7
c001a81e:	e9 49 02 00 00       	jmp    c001aa6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a823:	50                   	push   eax
c001a824:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a828:	50                   	push   eax
c001a829:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a830:	53                   	push   ebx
c001a831:	8b 06                	mov    eax,DWORD PTR [esi]
c001a833:	c1 e0 0b             	shl    eax,0xb
c001a836:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a839:	c1 e8 0b             	shr    eax,0xb
c001a83c:	50                   	push   eax
c001a83d:	e8 ad fc ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a842:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a845:	83 c4 10             	add    esp,0x10
c001a848:	89 c1                	mov    ecx,eax
c001a84a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a84d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a853:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a856:	84 db                	test   bl,bl
c001a858:	0f 85 90 00 00 00    	jne    c001a8ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a85e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a864:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a86a:	29 c7                	sub    edi,eax
c001a86c:	89 fb                	mov    ebx,edi
c001a86e:	c1 fb 1f             	sar    ebx,0x1f
c001a871:	01 f8                	add    eax,edi
c001a873:	11 da                	adc    edx,ebx
c001a875:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a879:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a880:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a883:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a886:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a889:	89 04 24             	mov    DWORD PTR [esp],eax
c001a88c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a890:	89 d8                	mov    eax,ebx
c001a892:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a895:	ba 00 00 00 00       	mov    edx,0x0
c001a89a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a89e:	b8 00 00 00 00       	mov    eax,0x0
c001a8a3:	73 0b                	jae    c001a8b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a8a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a8a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8ac:	29 f8                	sub    eax,edi
c001a8ae:	19 da                	sbb    edx,ebx
c001a8b0:	89 d3                	mov    ebx,edx
c001a8b2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a8b5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a8b8:	09 c3                	or     ebx,eax
c001a8ba:	0f 84 59 ff ff ff    	je     c001a819 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a8c0:	55                   	push   ebp
c001a8c1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a8c5:	50                   	push   eax
c001a8c6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a8cd:	53                   	push   ebx
c001a8ce:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8d0:	c1 e0 0b             	shl    eax,0xb
c001a8d3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a8d7:	c1 e8 0b             	shr    eax,0xb
c001a8da:	50                   	push   eax
c001a8db:	e8 0f fc ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	25 ff 07 00 00       	and    eax,0x7ff
c001a8eb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a8ee:	57                   	push   edi
c001a8ef:	6a 28                	push   0x28
c001a8f1:	6a 00                	push   0x0
c001a8f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8f7:	50                   	push   eax
c001a8f8:	e8 0b 5d fe ff       	call   c0000608 <memset>
c001a8fd:	31 d2                	xor    edx,edx
c001a8ff:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a902:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a908:	89 f8                	mov    eax,edi
c001a90a:	83 c0 21             	add    eax,0x21
c001a90d:	83 d2 00             	adc    edx,0x0
c001a910:	89 c7                	mov    edi,eax
c001a912:	89 d5                	mov    ebp,edx
c001a914:	83 c4 10             	add    esp,0x10
c001a917:	31 c9                	xor    ecx,ecx
c001a919:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a920:	83 f9 28             	cmp    ecx,0x28
c001a923:	88 04 24             	mov    BYTE PTR [esp],al
c001a926:	0f 94 c2             	sete   dl
c001a929:	88 d0                	mov    al,dl
c001a92b:	ba ff 07 00 00       	mov    edx,0x7ff
c001a930:	39 fa                	cmp    edx,edi
c001a932:	ba 00 00 00 00       	mov    edx,0x0
c001a937:	19 ea                	sbb    edx,ebp
c001a939:	0f 92 c2             	setb   dl
c001a93c:	09 c2                	or     edx,eax
c001a93e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a942:	0f 94 c0             	sete   al
c001a945:	08 d0                	or     al,dl
c001a947:	75 16                	jne    c001a95f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a949:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a94d:	74 10                	je     c001a95f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a94f:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a952:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a956:	41                   	inc    ecx
c001a957:	83 c7 01             	add    edi,0x1
c001a95a:	83 d5 00             	adc    ebp,0x0
c001a95d:	eb ba                	jmp    c001a919 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a95f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a966:	83 ec 0c             	sub    esp,0xc
c001a969:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a96d:	57                   	push   edi
c001a96e:	e8 b2 5c fe ff       	call   c0000625 <strlen>
c001a973:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a97b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a97f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a986:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a989:	5a                   	pop    edx
c001a98a:	25 ff 07 00 00       	and    eax,0x7ff
c001a98f:	01 c8                	add    eax,ecx
c001a991:	59                   	pop    ecx
c001a992:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a998:	83 e0 02             	and    eax,0x2
c001a99b:	3c 01                	cmp    al,0x1
c001a99d:	19 c0                	sbb    eax,eax
c001a99f:	83 c0 02             	add    eax,0x2
c001a9a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9a6:	57                   	push   edi
c001a9a7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a9ab:	50                   	push   eax
c001a9ac:	e8 f6 5c fe ff       	call   c00006a7 <strcpy>
c001a9b1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	84 c0                	test   al,al
c001a9ba:	75 21                	jne    c001a9dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a9bc:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a9c4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9cc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9d4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a9db:	eb 28                	jmp    c001aa05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9dd:	fe c8                	dec    al
c001a9df:	75 24                	jne    c001aa05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9e1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a9e9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9f1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9f9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001aa00:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001aa05:	0f b6 fb             	movzx  edi,bl
c001aa08:	31 db                	xor    ebx,ebx
c001aa0a:	50                   	push   eax
c001aa0b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001aa12:	8d 44 24 48          	lea    eax,[esp+0x48]
c001aa16:	50                   	push   eax
c001aa17:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001aa1e:	e8 af 5b fe ff       	call   c00005d2 <memcpy>
c001aa23:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001aa2a:	89 f9                	mov    ecx,edi
c001aa2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001aa32:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001aa35:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001aa38:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001aa3b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001aa3e:	83 c4 10             	add    esp,0x10
c001aa41:	39 c7                	cmp    edi,eax
c001aa43:	89 df                	mov    edi,ebx
c001aa45:	19 d7                	sbb    edi,edx
c001aa47:	72 10                	jb     c001aa59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001aa49:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001aa50:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001aa57:	eb 0a                	jmp    c001aa63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001aa59:	29 c8                	sub    eax,ecx
c001aa5b:	19 da                	sbb    edx,ebx
c001aa5d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001aa60:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001aa63:	31 c0                	xor    eax,eax
c001aa65:	eb 05                	jmp    c001aa6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001aa67:	b8 04 00 00 00       	mov    eax,0x4
c001aa6c:	81 c4 5c 09 00 00    	add    esp,0x95c
c001aa72:	5b                   	pop    ebx
c001aa73:	5e                   	pop    esi
c001aa74:	5f                   	pop    edi
c001aa75:	5d                   	pop    ebp
c001aa76:	c3                   	ret    

c001aa77 <readRoot(unsigned int*, unsigned int*, char)>:
c001aa77:	81 ec 40 08 00 00    	sub    esp,0x840
c001aa7d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001aa85:	50                   	push   eax
c001aa86:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aa8a:	50                   	push   eax
c001aa8b:	6a 10                	push   0x10
c001aa8d:	e8 5d fa ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa92:	83 c4 0c             	add    esp,0xc
c001aa95:	6a 22                	push   0x22
c001aa97:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aa9e:	50                   	push   eax
c001aa9f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aaa3:	50                   	push   eax
c001aaa4:	e8 29 5b fe ff       	call   c00005d2 <memcpy>
c001aaa9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aab0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aab4:	89 10                	mov    DWORD PTR [eax],edx
c001aab6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aabd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aac1:	89 10                	mov    DWORD PTR [eax],edx
c001aac3:	b0 01                	mov    al,0x1
c001aac5:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aacb:	c3                   	ret    

c001aacc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aacc:	55                   	push   ebp
c001aacd:	57                   	push   edi
c001aace:	56                   	push   esi
c001aacf:	53                   	push   ebx
c001aad0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aad6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aadd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001aae4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aae8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001aaec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001aaf0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aaf4:	75 03                	jne    c001aaf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aaf6:	83 c3 02             	add    ebx,0x2
c001aaf9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001aafc:	75 03                	jne    c001ab01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001aafe:	43                   	inc    ebx
c001aaff:	eb f8                	jmp    c001aaf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ab01:	51                   	push   ecx
c001ab02:	68 00 01 00 00       	push   0x100
c001ab07:	6a 00                	push   0x0
c001ab09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab0d:	50                   	push   eax
c001ab0e:	e8 f5 5a fe ff       	call   c0000608 <memset>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	31 d2                	xor    edx,edx
c001ab18:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ab1b:	84 c0                	test   al,al
c001ab1d:	74 21                	je     c001ab40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ab1f:	3c 2f                	cmp    al,0x2f
c001ab21:	75 0b                	jne    c001ab2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ab23:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ab27:	bd 01 00 00 00       	mov    ebp,0x1
c001ab2c:	eb 14                	jmp    c001ab42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ab2e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ab31:	80 f9 19             	cmp    cl,0x19
c001ab34:	77 03                	ja     c001ab39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ab36:	83 e8 20             	sub    eax,0x20
c001ab39:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ab3d:	42                   	inc    edx
c001ab3e:	eb d8                	jmp    c001ab18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ab40:	31 ed                	xor    ebp,ebp
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ab4c:	e8 cd 10 ff ff       	call   c000bc1e <malloc>
c001ab51:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab58:	89 c6                	mov    esi,eax
c001ab5a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001ab60:	c1 ef 0b             	shr    edi,0xb
c001ab63:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ab6a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ab76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab7a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001ab81:	74 28                	je     c001abab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001ab83:	52                   	push   edx
c001ab84:	57                   	push   edi
c001ab85:	50                   	push   eax
c001ab86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab8a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab91:	e8 59 f9 ff ff       	call   c001a4ef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab9a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001aba1:	05 00 08 00 00       	add    eax,0x800
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	eb cb                	jmp    c001ab76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001abab:	83 ec 0c             	sub    esp,0xc
c001abae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abb2:	57                   	push   edi
c001abb3:	e8 6d 5a fe ff       	call   c0000625 <strlen>
c001abb8:	50                   	push   eax
c001abb9:	57                   	push   edi
c001abba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001abc1:	56                   	push   esi
c001abc2:	e8 e6 f8 ff ff       	call   c001a4ad <__memmem(unsigned char*, int, unsigned char*, int)>
c001abc7:	83 c4 20             	add    esp,0x20
c001abca:	85 c0                	test   eax,eax
c001abcc:	75 13                	jne    c001abe1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001abce:	83 ec 0c             	sub    esp,0xc
c001abd1:	56                   	push   esi
c001abd2:	e8 57 10 ff ff       	call   c000bc2e <free>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	31 c0                	xor    eax,eax
c001abdc:	e9 b3 00 00 00       	jmp    c001ac94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001abe1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001abe5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001abe9:	c1 e7 08             	shl    edi,0x8
c001abec:	c1 e2 10             	shl    edx,0x10
c001abef:	09 d7                	or     edi,edx
c001abf1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001abf5:	09 d7                	or     edi,edx
c001abf7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001abfb:	c1 e2 18             	shl    edx,0x18
c001abfe:	09 d7                	or     edi,edx
c001ac00:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ac04:	89 d1                	mov    ecx,edx
c001ac06:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ac0a:	c1 e1 08             	shl    ecx,0x8
c001ac0d:	c1 e2 10             	shl    edx,0x10
c001ac10:	09 ca                	or     edx,ecx
c001ac12:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ac16:	09 ca                	or     edx,ecx
c001ac18:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ac1c:	c1 e1 18             	shl    ecx,0x18
c001ac1f:	09 ca                	or     edx,ecx
c001ac21:	89 e9                	mov    ecx,ebp
c001ac23:	84 c9                	test   cl,cl
c001ac25:	74 3c                	je     c001ac63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001ac27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ac2b:	83 ec 0c             	sub    esp,0xc
c001ac2e:	56                   	push   esi
c001ac2f:	e8 fa 0f ff ff       	call   c000bc2e <free>
c001ac34:	83 c4 0c             	add    esp,0xc
c001ac37:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac3e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac43:	50                   	push   eax
c001ac44:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac4b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac56:	52                   	push   edx
c001ac57:	57                   	push   edi
c001ac58:	53                   	push   ebx
c001ac59:	e8 6e fe ff ff       	call   c001aacc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac5e:	83 c4 20             	add    esp,0x20
c001ac61:	eb 31                	jmp    c001ac94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac63:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ac66:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ac6d:	d0 e8                	shr    al,1
c001ac6f:	89 3b                	mov    DWORD PTR [ebx],edi
c001ac71:	83 e0 01             	and    eax,0x1
c001ac74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac7b:	83 ec 0c             	sub    esp,0xc
c001ac7e:	89 13                	mov    DWORD PTR [ebx],edx
c001ac80:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ac87:	89 03                	mov    DWORD PTR [ebx],eax
c001ac89:	56                   	push   esi
c001ac8a:	e8 9f 0f ff ff       	call   c000bc2e <free>
c001ac8f:	83 c4 10             	add    esp,0x10
c001ac92:	b0 01                	mov    al,0x1
c001ac94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac9a:	5b                   	pop    ebx
c001ac9b:	5e                   	pop    esi
c001ac9c:	5f                   	pop    edi
c001ac9d:	5d                   	pop    ebp
c001ac9e:	c3                   	ret    

c001ac9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ac9f:	55                   	push   ebp
c001aca0:	57                   	push   edi
c001aca1:	56                   	push   esi
c001aca2:	53                   	push   ebx
c001aca3:	83 ec 20             	sub    esp,0x20
c001aca6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acaa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001acae:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001acb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001acc2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001acc7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001accd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001acd3:	57                   	push   edi
c001acd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acd8:	50                   	push   eax
c001acd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acdd:	50                   	push   eax
c001acde:	e8 94 fd ff ff       	call   c001aa77 <readRoot(unsigned int*, unsigned int*, char)>
c001ace3:	5a                   	pop    edx
c001ace4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ace8:	e8 38 59 fe ff       	call   c0000625 <strlen>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	83 f8 03             	cmp    eax,0x3
c001acf3:	77 17                	ja     c001ad0c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001acf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acf9:	89 03                	mov    DWORD PTR [ebx],eax
c001acfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acff:	89 06                	mov    DWORD PTR [esi],eax
c001ad01:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ad08:	b0 01                	mov    al,0x1
c001ad0a:	eb 19                	jmp    c001ad25 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ad0c:	50                   	push   eax
c001ad0d:	55                   	push   ebp
c001ad0e:	57                   	push   edi
c001ad0f:	56                   	push   esi
c001ad10:	53                   	push   ebx
c001ad11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad1d:	e8 aa fd ff ff       	call   c001aacc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ad22:	83 c4 20             	add    esp,0x20
c001ad25:	83 c4 1c             	add    esp,0x1c
c001ad28:	5b                   	pop    ebx
c001ad29:	5e                   	pop    esi
c001ad2a:	5f                   	pop    edi
c001ad2b:	5d                   	pop    ebp
c001ad2c:	c3                   	ret    
c001ad2d:	90                   	nop

c001ad2e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ad2e:	57                   	push   edi
c001ad2f:	56                   	push   esi
c001ad30:	53                   	push   ebx
c001ad31:	83 ec 10             	sub    esp,0x10
c001ad34:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ad38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad3c:	85 ff                	test   edi,edi
c001ad3e:	74 7b                	je     c001adbb <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad40:	85 f6                	test   esi,esi
c001ad42:	74 77                	je     c001adbb <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad44:	83 ec 0c             	sub    esp,0xc
c001ad47:	6a 1c                	push   0x1c
c001ad49:	e8 d0 0e ff ff       	call   c000bc1e <malloc>
c001ad4e:	89 07                	mov    DWORD PTR [edi],eax
c001ad50:	89 c3                	mov    ebx,eax
c001ad52:	58                   	pop    eax
c001ad53:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad57:	50                   	push   eax
c001ad58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ad5b:	50                   	push   eax
c001ad5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad60:	50                   	push   eax
c001ad61:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad65:	50                   	push   eax
c001ad66:	56                   	push   esi
c001ad67:	e8 33 ff ff ff       	call   c001ac9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad6c:	83 c4 20             	add    esp,0x20
c001ad6f:	84 c0                	test   al,al
c001ad71:	74 07                	je     c001ad7a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ad73:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad78:	74 0b                	je     c001ad85 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad7a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ad7e:	b8 01 00 00 00       	mov    eax,0x1
c001ad83:	eb 3b                	jmp    c001adc0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad89:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ad8d:	89 03                	mov    DWORD PTR [ebx],eax
c001ad8f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ad96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ada1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ada8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001adab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001adb2:	8a 06                	mov    al,BYTE PTR [esi]
c001adb4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001adb7:	31 c0                	xor    eax,eax
c001adb9:	eb 05                	jmp    c001adc0 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001adbb:	b8 04 00 00 00       	mov    eax,0x4
c001adc0:	83 c4 10             	add    esp,0x10
c001adc3:	5b                   	pop    ebx
c001adc4:	5e                   	pop    esi
c001adc5:	5f                   	pop    edi
c001adc6:	c3                   	ret    
c001adc7:	90                   	nop

c001adc8 <ISO9660::exists(char const*)>:
c001adc8:	83 ec 28             	sub    esp,0x28
c001adcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adcf:	8d 54 24 18          	lea    edx,[esp+0x18]
c001add3:	52                   	push   edx
c001add4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001add7:	52                   	push   edx
c001add8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001addc:	52                   	push   edx
c001addd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ade1:	52                   	push   edx
c001ade2:	50                   	push   eax
c001ade3:	e8 b7 fe ff ff       	call   c001ac9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ade8:	83 c4 3c             	add    esp,0x3c
c001adeb:	c3                   	ret    

c001adec <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001adec:	56                   	push   esi
c001aded:	53                   	push   ebx
c001adee:	83 ec 14             	sub    esp,0x14
c001adf1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001adf5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001adf9:	85 db                	test   ebx,ebx
c001adfb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001adff:	0f 94 c2             	sete   dl
c001ae02:	85 f6                	test   esi,esi
c001ae04:	0f 94 c0             	sete   al
c001ae07:	08 c2                	or     dl,al
c001ae09:	75 68                	jne    c001ae73 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae0b:	85 c9                	test   ecx,ecx
c001ae0d:	74 64                	je     c001ae73 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae19:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae1f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae26:	50                   	push   eax
c001ae27:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ae2a:	50                   	push   eax
c001ae2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae2f:	50                   	push   eax
c001ae30:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae34:	50                   	push   eax
c001ae35:	51                   	push   ecx
c001ae36:	e8 64 fe ff ff       	call   c001ac9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae3b:	83 c4 20             	add    esp,0x20
c001ae3e:	ba 01 00 00 00       	mov    edx,0x1
c001ae43:	84 c0                	test   al,al
c001ae45:	74 31                	je     c001ae78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae52:	89 03                	mov    DWORD PTR [ebx],eax
c001ae54:	ba 00 00 00 00       	mov    edx,0x0
c001ae59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae5d:	85 c0                	test   eax,eax
c001ae5f:	0f 95 06             	setne  BYTE PTR [esi]
c001ae62:	74 14                	je     c001ae78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae64:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae6a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae71:	eb 05                	jmp    c001ae78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae73:	ba 04 00 00 00       	mov    edx,0x4
c001ae78:	83 c4 14             	add    esp,0x14
c001ae7b:	89 d0                	mov    eax,edx
c001ae7d:	5b                   	pop    ebx
c001ae7e:	5e                   	pop    esi
c001ae7f:	c3                   	ret    

c001ae80 <ISO9660::openDir(char const*, void**)>:
c001ae80:	57                   	push   edi
c001ae81:	56                   	push   esi
c001ae82:	53                   	push   ebx
c001ae83:	83 ec 10             	sub    esp,0x10
c001ae86:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ae8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae8e:	85 ff                	test   edi,edi
c001ae90:	0f 84 95 00 00 00    	je     c001af2b <ISO9660::openDir(char const*, void**)+0xab>
c001ae96:	85 f6                	test   esi,esi
c001ae98:	0f 84 8d 00 00 00    	je     c001af2b <ISO9660::openDir(char const*, void**)+0xab>
c001ae9e:	83 ec 0c             	sub    esp,0xc
c001aea1:	6a 1c                	push   0x1c
c001aea3:	e8 76 0d ff ff       	call   c000bc1e <malloc>
c001aea8:	89 07                	mov    DWORD PTR [edi],eax
c001aeaa:	89 c3                	mov    ebx,eax
c001aeac:	59                   	pop    ecx
c001aead:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeb1:	50                   	push   eax
c001aeb2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aeb5:	50                   	push   eax
c001aeb6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aeba:	50                   	push   eax
c001aebb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aebf:	50                   	push   eax
c001aec0:	56                   	push   esi
c001aec1:	e8 d9 fd ff ff       	call   c001ac9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aec6:	83 c4 20             	add    esp,0x20
c001aec9:	84 c0                	test   al,al
c001aecb:	74 07                	je     c001aed4 <ISO9660::openDir(char const*, void**)+0x54>
c001aecd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aed2:	75 21                	jne    c001aef5 <ISO9660::openDir(char const*, void**)+0x75>
c001aed4:	0f b6 c0             	movzx  eax,al
c001aed7:	52                   	push   edx
c001aed8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aedc:	50                   	push   eax
c001aedd:	68 8e 23 02 c0       	push   0xc002238e
c001aee2:	e8 14 41 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001aee7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	b8 01 00 00 00       	mov    eax,0x1
c001aef3:	eb 3b                	jmp    c001af30 <ISO9660::openDir(char const*, void**)+0xb0>
c001aef5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001aefd:	89 03                	mov    DWORD PTR [ebx],eax
c001aeff:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001af06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af0a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001af11:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001af1b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001af22:	8a 06                	mov    al,BYTE PTR [esi]
c001af24:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001af27:	31 c0                	xor    eax,eax
c001af29:	eb 05                	jmp    c001af30 <ISO9660::openDir(char const*, void**)+0xb0>
c001af2b:	b8 04 00 00 00       	mov    eax,0x4
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	5b                   	pop    ebx
c001af34:	5e                   	pop    esi
c001af35:	5f                   	pop    edi
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <ISO9660::ISO9660()>:
c001af38:	83 ec 0c             	sub    esp,0xc
c001af3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3f:	83 ec 0c             	sub    esp,0xc
c001af42:	50                   	push   eax
c001af43:	e8 b8 43 ff ff       	call   c000f300 <Filesystem::Filesystem()>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	ba b4 23 02 c0       	mov    edx,0xc00223b4
c001af50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af54:	89 10                	mov    DWORD PTR [eax],edx
c001af56:	90                   	nop
c001af57:	83 c4 0c             	add    esp,0xc
c001af5a:	c3                   	ret    
c001af5b:	90                   	nop

c001af5c <SoundChannel::~SoundChannel()>:
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af66:	83 ec 0c             	sub    esp,0xc
c001af69:	50                   	push   eax
c001af6a:	e8 bf 0c ff ff       	call   c000bc2e <free>
c001af6f:	83 c4 10             	add    esp,0x10
c001af72:	90                   	nop
c001af73:	83 c4 0c             	add    esp,0xc
c001af76:	c3                   	ret    
c001af77:	90                   	nop

c001af78 <SoundChannel::setSpeed(float)>:
c001af78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af7c:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001af80:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001af83:	c3                   	ret    

c001af84 <SoundChannel::getSpeed()>:
c001af84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af88:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001af8b:	c3                   	ret    

c001af8c <SoundChannel::setVolume(int)>:
c001af8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af90:	83 f8 64             	cmp    eax,0x64
c001af93:	7e 05                	jle    c001af9a <SoundChannel::setVolume(int)+0xe>
c001af95:	b8 64 00 00 00       	mov    eax,0x64
c001af9a:	85 c0                	test   eax,eax
c001af9c:	79 02                	jns    c001afa0 <SoundChannel::setVolume(int)+0x14>
c001af9e:	31 c0                	xor    eax,eax
c001afa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001afa4:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001afa7:	c3                   	ret    

c001afa8 <SoundChannel::getVolume()>:
c001afa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afac:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001afaf:	c3                   	ret    

c001afb0 <SoundChannel::pause()>:
c001afb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afb4:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001afb8:	c3                   	ret    
c001afb9:	90                   	nop

c001afba <SoundChannel::SoundChannel(int, int, int, int)>:
c001afba:	83 ec 1c             	sub    esp,0x1c
c001afbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001afc1:	e8 ea ff ff ff       	call   c001afb0 <SoundChannel::pause()>
c001afc6:	83 c4 04             	add    esp,0x4
c001afc9:	6a 50                	push   0x50
c001afcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afcf:	e8 b8 ff ff ff       	call   c001af8c <SoundChannel::setVolume(int)>
c001afd4:	83 c4 08             	add    esp,0x8
c001afd7:	d9 e8                	fld1   
c001afd9:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001afdd:	d9 1c 24             	fstp   DWORD PTR [esp]
c001afe0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afe4:	e8 8f ff ff ff       	call   c001af78 <SoundChannel::setSpeed(float)>
c001afe9:	83 c4 08             	add    esp,0x8
c001afec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aff4:	89 10                	mov    DWORD PTR [eax],edx
c001aff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001affa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001affe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b005:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b009:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b00c:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b011:	75 23                	jne    c001b036 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001b013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b017:	8b 10                	mov    edx,DWORD PTR [eax]
c001b019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b020:	0f af c2             	imul   eax,edx
c001b023:	85 c0                	test   eax,eax
c001b025:	79 03                	jns    c001b02a <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001b027:	83 c0 03             	add    eax,0x3
c001b02a:	c1 f8 02             	sar    eax,0x2
c001b02d:	05 a0 0f 00 00       	add    eax,0xfa0
c001b032:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b03a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b03e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b045:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b050:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b05e:	c1 e0 02             	shl    eax,0x2
c001b061:	83 ec 0c             	sub    esp,0xc
c001b064:	50                   	push   eax
c001b065:	e8 b4 0b ff ff       	call   c000bc1e <malloc>
c001b06a:	83 c4 10             	add    esp,0x10
c001b06d:	89 c2                	mov    edx,eax
c001b06f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b073:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b076:	83 ec 04             	sub    esp,0x4
c001b079:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b07d:	50                   	push   eax
c001b07e:	6a 01                	push   0x1
c001b080:	6a 04                	push   0x4
c001b082:	e8 c4 d7 fe ff       	call   c000884b <src_new>
c001b087:	83 c4 10             	add    esp,0x10
c001b08a:	89 c2                	mov    edx,eax
c001b08c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b090:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b097:	85 c0                	test   eax,eax
c001b099:	74 10                	je     c001b0ab <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b09b:	83 ec 0c             	sub    esp,0xc
c001b09e:	68 10 24 02 c0       	push   0xc0022410
c001b0a3:	e8 e8 9b ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001b0a8:	83 c4 10             	add    esp,0x10
c001b0ab:	90                   	nop
c001b0ac:	83 c4 1c             	add    esp,0x1c
c001b0af:	c3                   	ret    

c001b0b0 <SoundChannel::play()>:
c001b0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0b4:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b0b8:	c3                   	ret    
c001b0b9:	90                   	nop

c001b0ba <SoundChannel::paused()>:
c001b0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0be:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b0c1:	c3                   	ret    

c001b0c2 <SoundChannel::getSampleRate()>:
c001b0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0c8:	c3                   	ret    
c001b0c9:	90                   	nop

c001b0ca <SoundChannel::getBits()>:
c001b0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b0d1:	c3                   	ret    

c001b0d2 <SoundChannel::getBufferUsed()>:
c001b0d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0d6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b0d9:	c3                   	ret    

c001b0da <SoundChannel::getBufferSize()>:
c001b0da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0de:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0e1:	c3                   	ret    

c001b0e2 <SoundChannel::unbuffer(float*, int, int)>:
c001b0e2:	53                   	push   ebx
c001b0e3:	83 ec 40             	sub    esp,0x40
c001b0e6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b0ea:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b0f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0f5:	db 03                	fild   DWORD PTR [ebx]
c001b0f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0fb:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b0ff:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b102:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b105:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b109:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b10d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b111:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b115:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b119:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b11d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b121:	50                   	push   eax
c001b122:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b125:	e8 db d3 fe ff       	call   c0008505 <src_process>
c001b12a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b12e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b131:	83 c4 0c             	add    esp,0xc
c001b134:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b137:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b13a:	29 d0                	sub    eax,edx
c001b13c:	c1 e0 02             	shl    eax,0x2
c001b13f:	50                   	push   eax
c001b140:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b143:	50                   	push   eax
c001b144:	51                   	push   ecx
c001b145:	e8 50 54 fe ff       	call   c000059a <memmove>
c001b14a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b14e:	83 c4 48             	add    esp,0x48
c001b151:	5b                   	pop    ebx
c001b152:	c3                   	ret    
c001b153:	90                   	nop

c001b154 <SoundChannel::buffer8(unsigned char*, int)>:
c001b154:	53                   	push   ebx
c001b155:	31 c0                	xor    eax,eax
c001b157:	83 ec 08             	sub    esp,0x8
c001b15a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b15e:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b161:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b164:	74 35                	je     c001b19b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b166:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b16a:	7d 2f                	jge    c001b19b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b16c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b170:	d9 05 2c 24 02 c0    	fld    DWORD PTR ds:0xc002242c
c001b176:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b17a:	40                   	inc    eax
c001b17b:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b180:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b183:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b187:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b18a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b18d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b190:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b193:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b196:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b199:	eb c9                	jmp    c001b164 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b19b:	83 c4 08             	add    esp,0x8
c001b19e:	5b                   	pop    ebx
c001b19f:	c3                   	ret    

c001b1a0 <SoundDevice::SoundDevice(char const*)>:
c001b1a0:	83 ec 1c             	sub    esp,0x1c
c001b1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1a7:	83 ec 08             	sub    esp,0x8
c001b1aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ae:	50                   	push   eax
c001b1af:	e8 42 54 ff ff       	call   c00105f6 <Device::Device(char const*)>
c001b1b4:	83 c4 10             	add    esp,0x10
c001b1b7:	ba 38 24 02 c0       	mov    edx,0xc0022438
c001b1bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1c0:	89 10                	mov    DWORD PTR [eax],edx
c001b1c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1c6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b1d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1d4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b1de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1e6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b1eb:	7f 19                	jg     c001b206 <SoundDevice::SoundDevice(char const*)+0x66>
c001b1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1f5:	83 c2 54             	add    edx,0x54
c001b1f8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b200:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b204:	eb e0                	jmp    c001b1e6 <SoundDevice::SoundDevice(char const*)+0x46>
c001b206:	90                   	nop
c001b207:	83 c4 1c             	add    esp,0x1c
c001b20a:	c3                   	ret    
c001b20b:	90                   	nop

c001b20c <SoundDevice::~SoundDevice()>:
c001b20c:	53                   	push   ebx
c001b20d:	83 ec 18             	sub    esp,0x18
c001b210:	ba 38 24 02 c0       	mov    edx,0xc0022438
c001b215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b219:	89 10                	mov    DWORD PTR [eax],edx
c001b21b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b223:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b228:	7f 46                	jg     c001b270 <SoundDevice::~SoundDevice()+0x64>
c001b22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b22e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b232:	83 c2 54             	add    edx,0x54
c001b235:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b239:	85 c0                	test   eax,eax
c001b23b:	74 2d                	je     c001b26a <SoundDevice::~SoundDevice()+0x5e>
c001b23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b245:	83 c2 54             	add    edx,0x54
c001b248:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b24c:	85 db                	test   ebx,ebx
c001b24e:	74 1a                	je     c001b26a <SoundDevice::~SoundDevice()+0x5e>
c001b250:	83 ec 0c             	sub    esp,0xc
c001b253:	53                   	push   ebx
c001b254:	e8 03 fd ff ff       	call   c001af5c <SoundChannel::~SoundChannel()>
c001b259:	83 c4 10             	add    esp,0x10
c001b25c:	83 ec 08             	sub    esp,0x8
c001b25f:	6a 2c                	push   0x2c
c001b261:	53                   	push   ebx
c001b262:	e8 b4 3c ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b26e:	eb b3                	jmp    c001b223 <SoundDevice::~SoundDevice()+0x17>
c001b270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	50                   	push   eax
c001b278:	e8 2b 50 ff ff       	call   c00102a8 <Device::~Device()>
c001b27d:	83 c4 10             	add    esp,0x10
c001b280:	90                   	nop
c001b281:	83 c4 18             	add    esp,0x18
c001b284:	5b                   	pop    ebx
c001b285:	c3                   	ret    

c001b286 <SoundDevice::~SoundDevice()>:
c001b286:	83 ec 0c             	sub    esp,0xc
c001b289:	83 ec 0c             	sub    esp,0xc
c001b28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b290:	e8 77 ff ff ff       	call   c001b20c <SoundDevice::~SoundDevice()>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	83 ec 08             	sub    esp,0x8
c001b29b:	68 e4 01 00 00       	push   0x1e4
c001b2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a4:	e8 72 3c ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	83 c4 0c             	add    esp,0xc
c001b2af:	c3                   	ret    

c001b2b0 <SoundDevice::getFreeChannelNum()>:
c001b2b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2b4:	31 c0                	xor    eax,eax
c001b2b6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b2be:	74 09                	je     c001b2c9 <SoundDevice::getFreeChannelNum()+0x19>
c001b2c0:	40                   	inc    eax
c001b2c1:	83 f8 20             	cmp    eax,0x20
c001b2c4:	75 f0                	jne    c001b2b6 <SoundDevice::getFreeChannelNum()+0x6>
c001b2c6:	83 c8 ff             	or     eax,0xffffffff
c001b2c9:	c3                   	ret    

c001b2ca <SoundDevice::addChannel(SoundChannel*)>:
c001b2ca:	56                   	push   esi
c001b2cb:	53                   	push   ebx
c001b2cc:	51                   	push   ecx
c001b2cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2d5:	53                   	push   ebx
c001b2d6:	e8 d5 ff ff ff       	call   c001b2b0 <SoundDevice::getFreeChannelNum()>
c001b2db:	5a                   	pop    edx
c001b2dc:	83 f8 ff             	cmp    eax,0xffffffff
c001b2df:	74 51                	je     c001b332 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2e1:	85 f6                	test   esi,esi
c001b2e3:	74 4d                	je     c001b332 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2e5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b2ec:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b2f3:	75 30                	jne    c001b325 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b2f5:	83 ec 0c             	sub    esp,0xc
c001b2f8:	56                   	push   esi
c001b2f9:	e8 c4 fd ff ff       	call   c001b0c2 <SoundChannel::getSampleRate()>
c001b2fe:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b304:	89 34 24             	mov    DWORD PTR [esp],esi
c001b307:	e8 be fd ff ff       	call   c001b0ca <SoundChannel::getBits()>
c001b30c:	83 c4 0c             	add    esp,0xc
c001b30f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b315:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b317:	50                   	push   eax
c001b318:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b31e:	53                   	push   ebx
c001b31f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b32b:	b8 01 00 00 00       	mov    eax,0x1
c001b330:	eb 03                	jmp    c001b335 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b332:	83 c8 ff             	or     eax,0xffffffff
c001b335:	5a                   	pop    edx
c001b336:	5b                   	pop    ebx
c001b337:	5e                   	pop    esi
c001b338:	c3                   	ret    
c001b339:	90                   	nop

c001b33a <SoundDevice::removeChannel(int)>:
c001b33a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b342:	83 fa 1f             	cmp    edx,0x1f
c001b345:	77 23                	ja     c001b36a <SoundDevice::removeChannel(int)+0x30>
c001b347:	8d 14 90             	lea    edx,[eax+edx*4]
c001b34a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b351:	74 17                	je     c001b36a <SoundDevice::removeChannel(int)+0x30>
c001b353:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b35d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b363:	75 05                	jne    c001b36a <SoundDevice::removeChannel(int)+0x30>
c001b365:	8b 00                	mov    eax,DWORD PTR [eax]
c001b367:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b36a:	c3                   	ret    
c001b36b:	90                   	nop

c001b36c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b36c:	56                   	push   esi
c001b36d:	53                   	push   ebx
c001b36e:	31 db                	xor    ebx,ebx
c001b370:	83 ec 14             	sub    esp,0x14
c001b373:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b377:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b37b:	7d 55                	jge    c001b3d2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b37d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b381:	d9 e8                	fld1   
c001b383:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b386:	d8 0d 68 24 02 c0    	fmul   DWORD PTR ds:0xc0022468
c001b38c:	d8 0d 6c 24 02 c0    	fmul   DWORD PTR ds:0xc002246c
c001b392:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b396:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b39a:	d8 15 70 24 02 c0    	fcom   DWORD PTR ds:0xc0022470
c001b3a0:	df e0                	fnstsw ax
c001b3a2:	9e                   	sahf   
c001b3a3:	72 08                	jb     c001b3ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b3a5:	dd d8                	fstp   st(0)
c001b3a7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b3ab:	eb 22                	jmp    c001b3cf <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3ad:	d9 ee                	fldz   
c001b3af:	d8 d9                	fcomp  st(1)
c001b3b1:	df e0                	fnstsw ax
c001b3b3:	9e                   	sahf   
c001b3b4:	72 08                	jb     c001b3be <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b3b6:	dd d8                	fstp   st(0)
c001b3b8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b3bc:	eb 11                	jmp    c001b3cf <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3be:	83 ec 10             	sub    esp,0x10
c001b3c1:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b3c4:	e8 13 36 00 00       	call   c001e9dc <lrintf>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b3cf:	43                   	inc    ebx
c001b3d0:	eb a5                	jmp    c001b377 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b3d2:	83 c4 14             	add    esp,0x14
c001b3d5:	5b                   	pop    ebx
c001b3d6:	5e                   	pop    esi
c001b3d7:	c3                   	ret    

c001b3d8 <SoundDevice::getAudio(int, float*, float*)>:
c001b3d8:	55                   	push   ebp
c001b3d9:	57                   	push   edi
c001b3da:	56                   	push   esi
c001b3db:	53                   	push   ebx
c001b3dc:	31 db                	xor    ebx,ebx
c001b3de:	83 ec 20             	sub    esp,0x20
c001b3e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b3e9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b3ed:	c1 e0 02             	shl    eax,0x2
c001b3f0:	50                   	push   eax
c001b3f1:	6a 00                	push   0x0
c001b3f3:	55                   	push   ebp
c001b3f4:	e8 0f 52 fe ff       	call   c0000608 <memset>
c001b3f9:	83 c4 10             	add    esp,0x10
c001b3fc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b400:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b407:	85 c0                	test   eax,eax
c001b409:	0f 84 94 00 00 00    	je     c001b4a3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b40f:	83 ec 0c             	sub    esp,0xc
c001b412:	50                   	push   eax
c001b413:	e8 a2 fc ff ff       	call   c001b0ba <SoundChannel::paused()>
c001b418:	83 c4 10             	add    esp,0x10
c001b41b:	84 c0                	test   al,al
c001b41d:	0f 85 80 00 00 00    	jne    c001b4a3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b42d:	e8 76 fb ff ff       	call   c001afa8 <SoundChannel::getVolume()>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	85 c0                	test   eax,eax
c001b437:	74 6a                	je     c001b4a3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b439:	83 ec 0c             	sub    esp,0xc
c001b43c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b443:	e8 60 fb ff ff       	call   c001afa8 <SoundChannel::getVolume()>
c001b448:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b44c:	d9 05 74 24 02 c0    	fld    DWORD PTR ds:0xc0022474
c001b452:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b456:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b45a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b45e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b464:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b468:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b46f:	e8 6e fc ff ff       	call   c001b0e2 <SoundChannel::unbuffer(float*, int, int)>
c001b474:	83 c4 20             	add    esp,0x20
c001b477:	31 d2                	xor    edx,edx
c001b479:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b47d:	39 c2                	cmp    edx,eax
c001b47f:	7d 1a                	jge    c001b49b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b481:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b485:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b488:	d8 c9                	fmul   st,st(1)
c001b48a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b490:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b494:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b498:	42                   	inc    edx
c001b499:	eb e2                	jmp    c001b47d <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b49b:	dd d8                	fstp   st(0)
c001b49d:	39 c7                	cmp    edi,eax
c001b49f:	7e 02                	jle    c001b4a3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b4a1:	89 c7                	mov    edi,eax
c001b4a3:	43                   	inc    ebx
c001b4a4:	83 fb 20             	cmp    ebx,0x20
c001b4a7:	0f 85 53 ff ff ff    	jne    c001b400 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b4ad:	83 c4 1c             	add    esp,0x1c
c001b4b0:	89 f8                	mov    eax,edi
c001b4b2:	5b                   	pop    ebx
c001b4b3:	5e                   	pop    esi
c001b4b4:	5f                   	pop    edi
c001b4b5:	5d                   	pop    ebp
c001b4b6:	c3                   	ret    
c001b4b7:	90                   	nop

c001b4b8 <PCI::open(int, int, void*)>:
c001b4b8:	83 ec 18             	sub    esp,0x18
c001b4bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4c1:	50                   	push   eax
c001b4c2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b4c5:	31 c0                	xor    eax,eax
c001b4c7:	83 c4 1c             	add    esp,0x1c
c001b4ca:	c3                   	ret    
c001b4cb:	90                   	nop

c001b4cc <PCI::close(int, int, void*)>:
c001b4cc:	31 c0                	xor    eax,eax
c001b4ce:	c3                   	ret    
c001b4cf:	90                   	nop

c001b4d0 <PCI::PCI()>:
c001b4d0:	83 ec 0c             	sub    esp,0xc
c001b4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d7:	83 ec 08             	sub    esp,0x8
c001b4da:	68 78 24 02 c0       	push   0xc0022478
c001b4df:	50                   	push   eax
c001b4e0:	e8 9d 47 ff ff       	call   c000fc82 <Bus::Bus(char const*)>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	ba 24 25 02 c0       	mov    edx,0xc0022524
c001b4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f1:	89 10                	mov    DWORD PTR [eax],edx
c001b4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4fd:	0f b6 d0             	movzx  edx,al
c001b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b504:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b515:	0f b6 d0             	movzx  edx,al
c001b518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b525:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b52b:	8d 50 01             	lea    edx,[eax+0x1]
c001b52e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b532:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b538:	0f b6 d0             	movzx  edx,al
c001b53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b543:	83 c9 c0             	or     ecx,0xffffffc0
c001b546:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b54a:	90                   	nop
c001b54b:	83 c4 0c             	add    esp,0xc
c001b54e:	c3                   	ret    
c001b54f:	90                   	nop

c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b550:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b554:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b559:	89 ca                	mov    edx,ecx
c001b55b:	c1 e0 10             	shl    eax,0x10
c001b55e:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b564:	09 d0                	or     eax,edx
c001b566:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b56b:	c1 e2 08             	shl    edx,0x8
c001b56e:	09 d0                	or     eax,edx
c001b570:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b575:	c1 e2 0b             	shl    edx,0xb
c001b578:	09 d0                	or     eax,edx
c001b57a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b57f:	0d 00 00 00 80       	or     eax,0x80000000
c001b584:	ef                   	out    dx,eax
c001b585:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b58a:	ed                   	in     eax,dx
c001b58b:	83 e1 02             	and    ecx,0x2
c001b58e:	0f b6 c9             	movzx  ecx,cl
c001b591:	c1 e1 03             	shl    ecx,0x3
c001b594:	d3 e8                	shr    eax,cl
c001b596:	c3                   	ret    
c001b597:	90                   	nop

c001b598 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b598:	6a 00                	push   0x0
c001b59a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b59f:	50                   	push   eax
c001b5a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5a5:	50                   	push   eax
c001b5a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5ab:	50                   	push   eax
c001b5ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5b0:	e8 9b ff ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b5:	83 c4 14             	add    esp,0x14
c001b5b8:	c3                   	ret    
c001b5b9:	90                   	nop

c001b5ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b5ba:	6a 0e                	push   0xe
c001b5bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c1:	50                   	push   eax
c001b5c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c7:	50                   	push   eax
c001b5c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5cd:	50                   	push   eax
c001b5ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5d2:	e8 79 ff ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d7:	83 c4 14             	add    esp,0x14
c001b5da:	0f b6 c0             	movzx  eax,al
c001b5dd:	c3                   	ret    

c001b5de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b5de:	55                   	push   ebp
c001b5df:	57                   	push   edi
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5e7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b5ec:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b5f1:	6a 0a                	push   0xa
c001b5f3:	56                   	push   esi
c001b5f4:	55                   	push   ebp
c001b5f5:	57                   	push   edi
c001b5f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b5fa:	e8 51 ff ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ff:	6a 0a                	push   0xa
c001b601:	89 c3                	mov    ebx,eax
c001b603:	56                   	push   esi
c001b604:	0f b6 db             	movzx  ebx,bl
c001b607:	55                   	push   ebp
c001b608:	57                   	push   edi
c001b609:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b60d:	e8 3e ff ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b612:	83 c4 28             	add    esp,0x28
c001b615:	25 00 ff 00 00       	and    eax,0xff00
c001b61a:	09 d8                	or     eax,ebx
c001b61c:	5b                   	pop    ebx
c001b61d:	5e                   	pop    esi
c001b61e:	5f                   	pop    edi
c001b61f:	5d                   	pop    ebp
c001b620:	c3                   	ret    
c001b621:	90                   	nop

c001b622 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b622:	6a 08                	push   0x8
c001b624:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b629:	50                   	push   eax
c001b62a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b62f:	50                   	push   eax
c001b630:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b635:	50                   	push   eax
c001b636:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b63a:	e8 11 ff ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b63f:	83 c4 14             	add    esp,0x14
c001b642:	0f b6 c4             	movzx  eax,ah
c001b645:	c3                   	ret    

c001b646 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b646:	6a 08                	push   0x8
c001b648:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b64d:	50                   	push   eax
c001b64e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b653:	50                   	push   eax
c001b654:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b659:	50                   	push   eax
c001b65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b65e:	e8 ed fe ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b663:	83 c4 14             	add    esp,0x14
c001b666:	c3                   	ret    
c001b667:	90                   	nop

c001b668 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b668:	6a 3c                	push   0x3c
c001b66a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b66f:	50                   	push   eax
c001b670:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b675:	50                   	push   eax
c001b676:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b67b:	50                   	push   eax
c001b67c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b680:	e8 cb fe ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b685:	83 c4 14             	add    esp,0x14
c001b688:	c3                   	ret    
c001b689:	90                   	nop

c001b68a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b68a:	6a 18                	push   0x18
c001b68c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b691:	50                   	push   eax
c001b692:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b697:	50                   	push   eax
c001b698:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b69d:	50                   	push   eax
c001b69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b6a2:	e8 a9 fe ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6a7:	83 c4 14             	add    esp,0x14
c001b6aa:	0f b6 c4             	movzx  eax,ah
c001b6ad:	c3                   	ret    

c001b6ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b6ae:	55                   	push   ebp
c001b6af:	57                   	push   edi
c001b6b0:	56                   	push   esi
c001b6b1:	53                   	push   ebx
c001b6b2:	50                   	push   eax
c001b6b3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b6b7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b6bc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6c1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b6c6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b6cd:	8d 43 12             	lea    eax,[ebx+0x12]
c001b6d0:	83 c3 10             	add    ebx,0x10
c001b6d3:	0f b6 c0             	movzx  eax,al
c001b6d6:	0f b6 db             	movzx  ebx,bl
c001b6d9:	50                   	push   eax
c001b6da:	51                   	push   ecx
c001b6db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b6df:	57                   	push   edi
c001b6e0:	55                   	push   ebp
c001b6e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6e5:	e8 66 fe ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6ea:	53                   	push   ebx
c001b6eb:	89 c6                	mov    esi,eax
c001b6ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b6f1:	c1 e6 10             	shl    esi,0x10
c001b6f4:	51                   	push   ecx
c001b6f5:	57                   	push   edi
c001b6f6:	55                   	push   ebp
c001b6f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b6fb:	e8 50 fe ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b700:	83 c4 2c             	add    esp,0x2c
c001b703:	0f b7 c0             	movzx  eax,ax
c001b706:	5b                   	pop    ebx
c001b707:	09 f0                	or     eax,esi
c001b709:	5e                   	pop    esi
c001b70a:	5f                   	pop    edi
c001b70b:	5d                   	pop    ebp
c001b70c:	c3                   	ret    
c001b70d:	90                   	nop

c001b70e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b70e:	53                   	push   ebx
c001b70f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b714:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b719:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b71d:	c1 e1 10             	shl    ecx,0x10
c001b720:	25 fc 00 00 00       	and    eax,0xfc
c001b725:	09 c1                	or     ecx,eax
c001b727:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b72c:	c1 e0 08             	shl    eax,0x8
c001b72f:	09 c1                	or     ecx,eax
c001b731:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b736:	c1 e0 0b             	shl    eax,0xb
c001b739:	09 c1                	or     ecx,eax
c001b73b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b741:	89 c8                	mov    eax,ecx
c001b743:	ef                   	out    dx,eax
c001b744:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b749:	ed                   	in     eax,dx
c001b74a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b74f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b754:	74 0a                	je     c001b760 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b756:	0f b7 d8             	movzx  ebx,ax
c001b759:	89 d0                	mov    eax,edx
c001b75b:	c1 e0 10             	shl    eax,0x10
c001b75e:	eb 05                	jmp    c001b765 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b760:	66 31 c0             	xor    ax,ax
c001b763:	89 d3                	mov    ebx,edx
c001b765:	09 c3                	or     ebx,eax
c001b767:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b76c:	89 c8                	mov    eax,ecx
c001b76e:	ef                   	out    dx,eax
c001b76f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b774:	89 d8                	mov    eax,ebx
c001b776:	ef                   	out    dx,eax
c001b777:	5b                   	pop    ebx
c001b778:	c3                   	ret    
c001b779:	90                   	nop

c001b77a <PCI::checkBus(unsigned char)>:
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	31 db                	xor    ebx,ebx
c001b77e:	51                   	push   ecx
c001b77f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b784:	52                   	push   edx
c001b785:	53                   	push   ebx
c001b786:	43                   	inc    ebx
c001b787:	56                   	push   esi
c001b788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b78c:	e8 4d 03 00 00       	call   c001bade <PCI::checkDevice(unsigned char, unsigned char)>
c001b791:	83 c4 10             	add    esp,0x10
c001b794:	83 fb 20             	cmp    ebx,0x20
c001b797:	75 eb                	jne    c001b784 <PCI::checkBus(unsigned char)+0xa>
c001b799:	58                   	pop    eax
c001b79a:	5b                   	pop    ebx
c001b79b:	5e                   	pop    esi
c001b79c:	c3                   	ret    
c001b79d:	90                   	nop

c001b79e <PCI::foundDevice(PCIDeviceInfo)>:
c001b79e:	55                   	push   ebp
c001b79f:	57                   	push   edi
c001b7a0:	56                   	push   esi
c001b7a1:	53                   	push   ebx
c001b7a2:	83 ec 1c             	sub    esp,0x1c
c001b7a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7a9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b7af:	0f 84 51 01 00 00    	je     c001b906 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b7b5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b7b9:	66 81 f9 06 04       	cmp    cx,0x406
c001b7be:	75 2c                	jne    c001b7ec <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b7c0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b7c5:	50                   	push   eax
c001b7c6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b7cb:	50                   	push   eax
c001b7cc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b7d1:	50                   	push   eax
c001b7d2:	56                   	push   esi
c001b7d3:	e8 b2 fe ff ff       	call   c001b68a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b7d8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7dc:	0f b6 c0             	movzx  eax,al
c001b7df:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b7e3:	83 c4 2c             	add    esp,0x2c
c001b7e6:	5b                   	pop    ebx
c001b7e7:	5e                   	pop    esi
c001b7e8:	5f                   	pop    edi
c001b7e9:	5d                   	pop    ebp
c001b7ea:	eb 8e                	jmp    c001b77a <PCI::checkBus(unsigned char)>
c001b7ec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b7f0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b7fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b7fe:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b802:	88 d3                	mov    bl,dl
c001b804:	85 c0                	test   eax,eax
c001b806:	74 33                	je     c001b83b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b808:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b80b:	85 d2                	test   edx,edx
c001b80d:	74 28                	je     c001b837 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b80f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b815:	31 ef                	xor    edi,ebp
c001b817:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b81d:	75 18                	jne    c001b837 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b81f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b823:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b829:	75 0c                	jne    c001b837 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b82b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b831:	0f 84 cf 00 00 00    	je     c001b906 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b837:	8b 00                	mov    eax,DWORD PTR [eax]
c001b839:	eb c9                	jmp    c001b804 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b83b:	66 81 f9 01 06       	cmp    cx,0x601
c001b840:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b844:	75 18                	jne    c001b85e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	68 58 01 00 00       	push   0x158
c001b84e:	e8 b9 36 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001b853:	59                   	pop    ecx
c001b854:	89 c5                	mov    ebp,eax
c001b856:	5f                   	pop    edi
c001b857:	68 80 24 02 c0       	push   0xc0022480
c001b85c:	eb 7d                	jmp    c001b8db <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b85e:	66 81 f9 01 01       	cmp    cx,0x101
c001b863:	75 60                	jne    c001b8c5 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b865:	83 ec 0c             	sub    esp,0xc
c001b868:	68 70 02 00 00       	push   0x270
c001b86d:	e8 9a 36 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001b872:	89 04 24             	mov    DWORD PTR [esp],eax
c001b875:	89 c5                	mov    ebp,eax
c001b877:	e8 26 03 00 00       	call   c001bba2 <IDE::IDE()>
c001b87c:	58                   	pop    eax
c001b87d:	5a                   	pop    edx
c001b87e:	55                   	push   ebp
c001b87f:	56                   	push   esi
c001b880:	e8 81 4b ff ff       	call   c0010406 <Device::addChild(Device*)>
c001b885:	83 ec 1c             	sub    esp,0x1c
c001b888:	b9 09 00 00 00       	mov    ecx,0x9
c001b88d:	fc                   	cld    
c001b88e:	89 e7                	mov    edi,esp
c001b890:	89 de                	mov    esi,ebx
c001b892:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b894:	55                   	push   ebp
c001b895:	e8 46 4a ff ff       	call   c00102e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b89a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b89d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b8a1:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b8a9:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b8b1:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b8b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8bc:	83 c4 4c             	add    esp,0x4c
c001b8bf:	5b                   	pop    ebx
c001b8c0:	5e                   	pop    esi
c001b8c1:	5f                   	pop    edi
c001b8c2:	5d                   	pop    ebp
c001b8c3:	ff e0                	jmp    eax
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	68 58 01 00 00       	push   0x158
c001b8cd:	e8 3a 36 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001b8d2:	59                   	pop    ecx
c001b8d3:	89 c5                	mov    ebp,eax
c001b8d5:	5f                   	pop    edi
c001b8d6:	68 9f 24 02 c0       	push   0xc002249f
c001b8db:	55                   	push   ebp
c001b8dc:	e8 11 4e ff ff       	call   c00106f2 <DriverlessDevice::DriverlessDevice(char const*)>
c001b8e1:	58                   	pop    eax
c001b8e2:	5a                   	pop    edx
c001b8e3:	55                   	push   ebp
c001b8e4:	56                   	push   esi
c001b8e5:	e8 1c 4b ff ff       	call   c0010406 <Device::addChild(Device*)>
c001b8ea:	b9 09 00 00 00       	mov    ecx,0x9
c001b8ef:	fc                   	cld    
c001b8f0:	89 df                	mov    edi,ebx
c001b8f2:	89 de                	mov    esi,ebx
c001b8f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8f6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b8fa:	83 c4 2c             	add    esp,0x2c
c001b8fd:	5b                   	pop    ebx
c001b8fe:	5e                   	pop    esi
c001b8ff:	5f                   	pop    edi
c001b900:	5d                   	pop    ebp
c001b901:	e9 da 49 ff ff       	jmp    c00102e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001b906:	83 c4 1c             	add    esp,0x1c
c001b909:	5b                   	pop    ebx
c001b90a:	5e                   	pop    esi
c001b90b:	5f                   	pop    edi
c001b90c:	5d                   	pop    ebp
c001b90d:	c3                   	ret    

c001b90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b90e:	55                   	push   ebp
c001b90f:	57                   	push   edi
c001b910:	56                   	push   esi
c001b911:	53                   	push   ebx
c001b912:	83 ec 5c             	sub    esp,0x5c
c001b915:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b919:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b91d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b921:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b926:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b92a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b92e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b933:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b937:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b93c:	6a 0c                	push   0xc
c001b93e:	55                   	push   ebp
c001b93f:	53                   	push   ebx
c001b940:	57                   	push   edi
c001b941:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b948:	e8 03 fc ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b94d:	83 c4 0c             	add    esp,0xc
c001b950:	6a 00                	push   0x0
c001b952:	68 b9 24 02 c0       	push   0xc00224b9
c001b957:	e8 9f 36 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001b95c:	55                   	push   ebp
c001b95d:	53                   	push   ebx
c001b95e:	57                   	push   edi
c001b95f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b966:	e8 73 fc ff ff       	call   c001b5de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b96b:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b970:	83 c4 20             	add    esp,0x20
c001b973:	55                   	push   ebp
c001b974:	53                   	push   ebx
c001b975:	57                   	push   edi
c001b976:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b97a:	e8 e9 fc ff ff       	call   c001b668 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b97f:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b986:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b98a:	55                   	push   ebp
c001b98b:	53                   	push   ebx
c001b98c:	57                   	push   edi
c001b98d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b994:	e8 b7 fb ff ff       	call   c001b550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b999:	0f b6 c4             	movzx  eax,ah
c001b99c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b9a0:	83 c4 18             	add    esp,0x18
c001b9a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b9a7:	68 cd 24 02 c0       	push   0xc00224cd
c001b9ac:	e8 4a 36 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001b9b1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b9b5:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b9b9:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001b9be:	83 c4 10             	add    esp,0x10
c001b9c1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b9c7:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b9ce:	74 6c                	je     c001ba3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9d0:	31 f6                	xor    esi,esi
c001b9d2:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c001b9d8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b9de:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b9e4:	7e 56                	jle    c001ba3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9e6:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b9e9:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b9f0:	39 cb                	cmp    ebx,ecx
c001b9f2:	75 45                	jne    c001ba39 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b9f4:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b9fb:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b9ff:	75 38                	jne    c001ba39 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001ba01:	83 ec 0c             	sub    esp,0xc
c001ba04:	68 dc 24 02 c0       	push   0xc00224dc
c001ba09:	e8 ed 35 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001ba0e:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c001ba14:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001ba1a:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001ba22:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001ba26:	52                   	push   edx
c001ba27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba2b:	53                   	push   ebx
c001ba2c:	68 01 25 02 c0       	push   0xc0022501
c001ba31:	e8 c5 35 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001ba36:	83 c4 20             	add    esp,0x20
c001ba39:	46                   	inc    esi
c001ba3a:	eb 96                	jmp    c001b9d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001ba3c:	31 d2                	xor    edx,edx
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	55                   	push   ebp
c001ba42:	53                   	push   ebx
c001ba43:	57                   	push   edi
c001ba44:	52                   	push   edx
c001ba45:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba49:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba50:	e8 59 fc ff ff       	call   c001b6ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba55:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001ba59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba5d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ba61:	42                   	inc    edx
c001ba62:	83 c4 20             	add    esp,0x20
c001ba65:	83 fa 06             	cmp    edx,0x6
c001ba68:	75 d4                	jne    c001ba3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001ba6a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba6e:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001ba72:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ba76:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001ba7a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ba7e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ba82:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ba87:	86 e0                	xchg   al,ah
c001ba89:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001ba8e:	55                   	push   ebp
c001ba8f:	53                   	push   ebx
c001ba90:	57                   	push   edi
c001ba91:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001ba95:	e8 88 fb ff ff       	call   c001b622 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ba9a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba9e:	55                   	push   ebp
c001ba9f:	53                   	push   ebx
c001baa0:	57                   	push   edi
c001baa1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001baa8:	e8 eb fa ff ff       	call   c001b598 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001bab5:	b9 09 00 00 00       	mov    ecx,0x9
c001baba:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001babe:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001bac2:	fc                   	cld    
c001bac3:	89 e7                	mov    edi,esp
c001bac5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bac7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001bace:	e8 cb fc ff ff       	call   c001b79e <PCI::foundDevice(PCIDeviceInfo)>
c001bad3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bad9:	5b                   	pop    ebx
c001bada:	5e                   	pop    esi
c001badb:	5f                   	pop    edi
c001badc:	5d                   	pop    ebp
c001badd:	c3                   	ret    

c001bade <PCI::checkDevice(unsigned char, unsigned char)>:
c001bade:	55                   	push   ebp
c001badf:	57                   	push   edi
c001bae0:	56                   	push   esi
c001bae1:	53                   	push   ebx
c001bae2:	83 ec 0c             	sub    esp,0xc
c001bae5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bae9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001baee:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001baf3:	6a 00                	push   0x0
c001baf5:	56                   	push   esi
c001baf6:	57                   	push   edi
c001baf7:	55                   	push   ebp
c001baf8:	e8 9b fa ff ff       	call   c001b598 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bafd:	6a 00                	push   0x0
c001baff:	56                   	push   esi
c001bb00:	57                   	push   edi
c001bb01:	55                   	push   ebp
c001bb02:	e8 07 fe ff ff       	call   c001b90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb07:	83 c4 20             	add    esp,0x20
c001bb0a:	6a 00                	push   0x0
c001bb0c:	56                   	push   esi
c001bb0d:	57                   	push   edi
c001bb0e:	55                   	push   ebp
c001bb0f:	e8 a6 fa ff ff       	call   c001b5ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb14:	83 c4 10             	add    esp,0x10
c001bb17:	84 c0                	test   al,al
c001bb19:	79 27                	jns    c001bb42 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bb1b:	bb 01 00 00 00       	mov    ebx,0x1
c001bb20:	53                   	push   ebx
c001bb21:	56                   	push   esi
c001bb22:	57                   	push   edi
c001bb23:	55                   	push   ebp
c001bb24:	e8 6f fa ff ff       	call   c001b598 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb29:	83 c4 10             	add    esp,0x10
c001bb2c:	66 40                	inc    ax
c001bb2e:	74 0c                	je     c001bb3c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001bb30:	53                   	push   ebx
c001bb31:	56                   	push   esi
c001bb32:	57                   	push   edi
c001bb33:	55                   	push   ebp
c001bb34:	e8 d5 fd ff ff       	call   c001b90e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	43                   	inc    ebx
c001bb3d:	83 fb 08             	cmp    ebx,0x8
c001bb40:	75 de                	jne    c001bb20 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bb42:	83 c4 0c             	add    esp,0xc
c001bb45:	5b                   	pop    ebx
c001bb46:	5e                   	pop    esi
c001bb47:	5f                   	pop    edi
c001bb48:	5d                   	pop    ebp
c001bb49:	c3                   	ret    

c001bb4a <PCI::detect()>:
c001bb4a:	56                   	push   esi
c001bb4b:	53                   	push   ebx
c001bb4c:	53                   	push   ebx
c001bb4d:	31 db                	xor    ebx,ebx
c001bb4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb53:	6a 00                	push   0x0
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 00                	push   0x0
c001bb59:	56                   	push   esi
c001bb5a:	e8 5b fa ff ff       	call   c001b5ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb5f:	83 c4 10             	add    esp,0x10
c001bb62:	a8 80                	test   al,0x80
c001bb64:	75 21                	jne    c001bb87 <PCI::detect()+0x3d>
c001bb66:	51                   	push   ecx
c001bb67:	51                   	push   ecx
c001bb68:	6a 00                	push   0x0
c001bb6a:	56                   	push   esi
c001bb6b:	e8 0a fc ff ff       	call   c001b77a <PCI::checkBus(unsigned char)>
c001bb70:	83 c4 10             	add    esp,0x10
c001bb73:	eb 24                	jmp    c001bb99 <PCI::detect()+0x4f>
c001bb75:	52                   	push   edx
c001bb76:	52                   	push   edx
c001bb77:	53                   	push   ebx
c001bb78:	43                   	inc    ebx
c001bb79:	56                   	push   esi
c001bb7a:	e8 fb fb ff ff       	call   c001b77a <PCI::checkBus(unsigned char)>
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	83 fb 08             	cmp    ebx,0x8
c001bb85:	74 12                	je     c001bb99 <PCI::detect()+0x4f>
c001bb87:	53                   	push   ebx
c001bb88:	6a 00                	push   0x0
c001bb8a:	6a 00                	push   0x0
c001bb8c:	56                   	push   esi
c001bb8d:	e8 06 fa ff ff       	call   c001b598 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb92:	83 c4 10             	add    esp,0x10
c001bb95:	66 40                	inc    ax
c001bb97:	74 dc                	je     c001bb75 <PCI::detect()+0x2b>
c001bb99:	58                   	pop    eax
c001bb9a:	5b                   	pop    ebx
c001bb9b:	5e                   	pop    esi
c001bb9c:	c3                   	ret    
c001bb9d:	90                   	nop

c001bb9e <IDE::close(int, int, void*)>:
c001bb9e:	83 c8 ff             	or     eax,0xffffffff
c001bba1:	c3                   	ret    

c001bba2 <IDE::IDE()>:
c001bba2:	83 ec 0c             	sub    esp,0xc
c001bba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba9:	83 ec 08             	sub    esp,0x8
c001bbac:	68 48 25 02 c0       	push   0xc0022548
c001bbb1:	50                   	push   eax
c001bbb2:	e8 d1 4b ff ff       	call   c0010788 <HardDiskController::HardDiskController(char const*)>
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	ba 88 27 02 c0       	mov    edx,0xc0022788
c001bbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc3:	89 10                	mov    DWORD PTR [eax],edx
c001bbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bbd0:	90                   	nop
c001bbd1:	83 c4 0c             	add    esp,0xc
c001bbd4:	c3                   	ret    
c001bbd5:	90                   	nop

c001bbd6 <IDE::prepareInterrupt(unsigned char)>:
c001bbd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbdb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bbdf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bbe7:	c3                   	ret    

c001bbe8 <selectDrive(unsigned char, unsigned char)>:
c001bbe8:	c3                   	ret    
c001bbe9:	90                   	nop

c001bbea <IDE::getBase(unsigned char)>:
c001bbea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bbef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbf3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bbfb:	c3                   	ret    

c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bbfc:	55                   	push   ebp
c001bbfd:	57                   	push   edi
c001bbfe:	56                   	push   esi
c001bbff:	53                   	push   ebx
c001bc00:	83 ec 1c             	sub    esp,0x1c
c001bc03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc0b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bc0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bc16:	80 f9 03             	cmp    cl,0x3
c001bc19:	77 51                	ja     c001bc6c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bc1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc1f:	0f b6 f2             	movzx  esi,dl
c001bc22:	0f b6 db             	movzx  ebx,bl
c001bc25:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc28:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bc2c:	83 ca 80             	or     edx,0xffffff80
c001bc2f:	0f b6 d2             	movzx  edx,dl
c001bc32:	52                   	push   edx
c001bc33:	6a 0c                	push   0xc
c001bc35:	56                   	push   esi
c001bc36:	57                   	push   edi
c001bc37:	e8 c0 ff ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc3c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bc41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc45:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bc49:	ee                   	out    dx,al
c001bc4a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc4f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc53:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc57:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc5b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc63:	83 c4 2c             	add    esp,0x2c
c001bc66:	5b                   	pop    ebx
c001bc67:	5e                   	pop    esi
c001bc68:	5f                   	pop    edi
c001bc69:	5d                   	pop    ebp
c001bc6a:	eb 90                	jmp    c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc6c:	80 fb 07             	cmp    bl,0x7
c001bc6f:	77 12                	ja     c001bc83 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc71:	0f b6 d2             	movzx  edx,dl
c001bc74:	0f b6 db             	movzx  ebx,bl
c001bc77:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc7f:	89 da                	mov    edx,ebx
c001bc81:	eb 2f                	jmp    c001bcb2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc83:	80 fb 0d             	cmp    bl,0xd
c001bc86:	77 13                	ja     c001bc9b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc88:	0f b6 d2             	movzx  edx,dl
c001bc8b:	0f b6 db             	movzx  ebx,bl
c001bc8e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc95:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc99:	eb 17                	jmp    c001bcb2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc9b:	80 fb 15             	cmp    bl,0x15
c001bc9e:	77 13                	ja     c001bcb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bca0:	0f b6 d2             	movzx  edx,dl
c001bca3:	0f b6 db             	movzx  ebx,bl
c001bca6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bcae:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bcb2:	ee                   	out    dx,al
c001bcb3:	83 c4 1c             	add    esp,0x1c
c001bcb6:	5b                   	pop    ebx
c001bcb7:	5e                   	pop    esi
c001bcb8:	5f                   	pop    edi
c001bcb9:	5d                   	pop    ebp
c001bcba:	c3                   	ret    
c001bcbb:	90                   	nop

c001bcbc <IDE::read(unsigned char, unsigned char)>:
c001bcbc:	55                   	push   ebp
c001bcbd:	57                   	push   edi
c001bcbe:	56                   	push   esi
c001bcbf:	53                   	push   ebx
c001bcc0:	83 ec 1c             	sub    esp,0x1c
c001bcc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bcc7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bccb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bcce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bcd2:	3c 03                	cmp    al,0x3
c001bcd4:	77 43                	ja     c001bd19 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bcd6:	0f b6 f2             	movzx  esi,dl
c001bcd9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bcdc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bce0:	83 c8 80             	or     eax,0xffffff80
c001bce3:	0f b6 c0             	movzx  eax,al
c001bce6:	50                   	push   eax
c001bce7:	6a 0c                	push   0xc
c001bce9:	56                   	push   esi
c001bcea:	57                   	push   edi
c001bceb:	e8 0c ff ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcf0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bcf5:	0f b6 c3             	movzx  eax,bl
c001bcf8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bcfc:	ec                   	in     al,dx
c001bcfd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bd01:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd06:	52                   	push   edx
c001bd07:	6a 0c                	push   0xc
c001bd09:	56                   	push   esi
c001bd0a:	57                   	push   edi
c001bd0b:	e8 ec fe ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd10:	83 c4 20             	add    esp,0x20
c001bd13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd17:	eb 49                	jmp    c001bd62 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd19:	80 fb 07             	cmp    bl,0x7
c001bd1c:	77 12                	ja     c001bd30 <IDE::read(unsigned char, unsigned char)+0x74>
c001bd1e:	0f b6 d2             	movzx  edx,dl
c001bd21:	0f b6 c3             	movzx  eax,bl
c001bd24:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bd2c:	89 c2                	mov    edx,eax
c001bd2e:	eb 31                	jmp    c001bd61 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd30:	80 fb 0d             	cmp    bl,0xd
c001bd33:	77 13                	ja     c001bd48 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bd35:	0f b6 d2             	movzx  edx,dl
c001bd38:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bd3f:	0f b6 d3             	movzx  edx,bl
c001bd42:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bd46:	eb 19                	jmp    c001bd61 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	80 fb 15             	cmp    bl,0x15
c001bd4d:	77 13                	ja     c001bd62 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd4f:	0f b6 d2             	movzx  edx,dl
c001bd52:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd5a:	0f b6 d3             	movzx  edx,bl
c001bd5d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd61:	ec                   	in     al,dx
c001bd62:	83 c4 1c             	add    esp,0x1c
c001bd65:	5b                   	pop    ebx
c001bd66:	5e                   	pop    esi
c001bd67:	5f                   	pop    edi
c001bd68:	5d                   	pop    ebp
c001bd69:	c3                   	ret    

c001bd6a <IDE::waitInterrupt(unsigned char)>:
c001bd6a:	55                   	push   ebp
c001bd6b:	57                   	push   edi
c001bd6c:	56                   	push   esi
c001bd6d:	53                   	push   ebx
c001bd6e:	31 db                	xor    ebx,ebx
c001bd70:	83 ec 0c             	sub    esp,0xc
c001bd73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd77:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd7c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd84:	89 e8                	mov    eax,ebp
c001bd86:	84 c0                	test   al,al
c001bd88:	75 34                	jne    c001bdbe <IDE::waitInterrupt(unsigned char)+0x54>
c001bd8a:	52                   	push   edx
c001bd8b:	6a 0c                	push   0xc
c001bd8d:	56                   	push   esi
c001bd8e:	57                   	push   edi
c001bd8f:	e8 28 ff ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001bd94:	83 c4 10             	add    esp,0x10
c001bd97:	a8 01                	test   al,0x1
c001bd99:	75 2b                	jne    c001bdc6 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd9b:	f6 c3 04             	test   bl,0x4
c001bd9e:	75 16                	jne    c001bdb6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bda0:	83 fb 32             	cmp    ebx,0x32
c001bda3:	7e 11                	jle    c001bdb6 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bda5:	50                   	push   eax
c001bda6:	50                   	push   eax
c001bda7:	6a 00                	push   0x0
c001bda9:	68 80 96 98 00       	push   0x989680
c001bdae:	e8 e6 c4 ff ff       	call   c0018299 <nanoSleep(unsigned long long)>
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	83 fb 3c             	cmp    ebx,0x3c
c001bdb9:	74 0b                	je     c001bdc6 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bdbb:	43                   	inc    ebx
c001bdbc:	eb be                	jmp    c001bd7c <IDE::waitInterrupt(unsigned char)+0x12>
c001bdbe:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bdc6:	83 c4 0c             	add    esp,0xc
c001bdc9:	89 e8                	mov    eax,ebp
c001bdcb:	5b                   	pop    ebx
c001bdcc:	5e                   	pop    esi
c001bdcd:	5f                   	pop    edi
c001bdce:	5d                   	pop    ebp
c001bdcf:	c3                   	ret    

c001bdd0 <ideChannel0IRQHandler(regs*, void*)>:
c001bdd0:	83 ec 10             	sub    esp,0x10
c001bdd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdd7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bdde:	6a 07                	push   0x7
c001bde0:	6a 00                	push   0x0
c001bde2:	50                   	push   eax
c001bde3:	e8 d4 fe ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001bde8:	83 c4 1c             	add    esp,0x1c
c001bdeb:	c3                   	ret    

c001bdec <ideChannel1IRQHandler(regs*, void*)>:
c001bdec:	83 ec 10             	sub    esp,0x10
c001bdef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdf3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bdfa:	6a 07                	push   0x7
c001bdfc:	6a 01                	push   0x1
c001bdfe:	50                   	push   eax
c001bdff:	e8 b8 fe ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001be04:	83 c4 1c             	add    esp,0x1c
c001be07:	c3                   	ret    

c001be08 <IDE::enableIRQs(unsigned char, bool)>:
c001be08:	57                   	push   edi
c001be09:	56                   	push   esi
c001be0a:	be 04 00 00 00       	mov    esi,0x4
c001be0f:	53                   	push   ebx
c001be10:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001be15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be19:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001be1e:	0f 94 c0             	sete   al
c001be21:	d1 e0                	shl    eax,1
c001be23:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001be2a:	0f b6 c0             	movzx  eax,al
c001be2d:	50                   	push   eax
c001be2e:	6a 0c                	push   0xc
c001be30:	57                   	push   edi
c001be31:	53                   	push   ebx
c001be32:	e8 c5 fd ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	50                   	push   eax
c001be3b:	6a 0c                	push   0xc
c001be3d:	57                   	push   edi
c001be3e:	53                   	push   ebx
c001be3f:	e8 78 fe ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	4e                   	dec    esi
c001be48:	75 f0                	jne    c001be3a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be4a:	5b                   	pop    ebx
c001be4b:	5e                   	pop    esi
c001be4c:	5f                   	pop    edi
c001be4d:	c3                   	ret    

c001be4e <IDE::open(int, int, void*)>:
c001be4e:	55                   	push   ebp
c001be4f:	57                   	push   edi
c001be50:	56                   	push   esi
c001be51:	53                   	push   ebx
c001be52:	83 ec 1c             	sub    esp,0x1c
c001be55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be59:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be62:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be6b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be72:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be79:	0f 85 b0 02 00 00    	jne    c001c12f <IDE::open(int, int, void*)+0x2e1>
c001be7f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be85:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be89:	83 e0 7f             	and    eax,0x7f
c001be8c:	3c 05                	cmp    al,0x5
c001be8e:	74 04                	je     c001be94 <IDE::open(int, int, void*)+0x46>
c001be90:	3c 0f                	cmp    al,0xf
c001be92:	75 32                	jne    c001bec6 <IDE::open(int, int, void*)+0x78>
c001be94:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be9a:	83 e0 fc             	and    eax,0xfffffffc
c001be9d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bea4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001beaa:	83 e0 fc             	and    eax,0xfffffffc
c001bead:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001beb4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001beba:	83 e0 fc             	and    eax,0xfffffffc
c001bebd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bec4:	eb 14                	jmp    c001beda <IDE::open(int, int, void*)+0x8c>
c001bec6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bed0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001beda:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bee1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bee8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beec:	89 c6                	mov    esi,eax
c001beee:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bef3:	c1 e6 10             	shl    esi,0x10
c001bef6:	89 e8                	mov    eax,ebp
c001bef8:	89 fa                	mov    edx,edi
c001befa:	c1 e0 0b             	shl    eax,0xb
c001befd:	09 f0                	or     eax,esi
c001beff:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bf06:	c1 e6 08             	shl    esi,0x8
c001bf09:	09 c6                	or     esi,eax
c001bf0b:	89 f0                	mov    eax,esi
c001bf0d:	0d 08 00 00 80       	or     eax,0x80000008
c001bf12:	ef                   	out    dx,eax
c001bf13:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bf18:	89 ca                	mov    edx,ecx
c001bf1a:	ed                   	in     eax,dx
c001bf1b:	c1 e8 10             	shr    eax,0x10
c001bf1e:	3d ff ff 00 00       	cmp    eax,0xffff
c001bf23:	0f 84 f5 00 00 00    	je     c001c01e <IDE::open(int, int, void*)+0x1d0>
c001bf29:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bf2f:	89 fa                	mov    edx,edi
c001bf31:	89 f0                	mov    eax,esi
c001bf33:	ef                   	out    dx,eax
c001bf34:	b0 fe                	mov    al,0xfe
c001bf36:	89 ca                	mov    edx,ecx
c001bf38:	ee                   	out    dx,al
c001bf39:	89 f0                	mov    eax,esi
c001bf3b:	89 fa                	mov    edx,edi
c001bf3d:	ef                   	out    dx,eax
c001bf3e:	89 ca                	mov    edx,ecx
c001bf40:	ed                   	in     eax,dx
c001bf41:	3c fe                	cmp    al,0xfe
c001bf43:	0f 85 a9 00 00 00    	jne    c001bff2 <IDE::open(int, int, void*)+0x1a4>
c001bf49:	8b 15 88 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023788
c001bf4f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf56:	74 33                	je     c001bf8b <IDE::open(int, int, void*)+0x13d>
c001bf58:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf5e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf62:	40                   	inc    eax
c001bf63:	83 ec 0c             	sub    esp,0xc
c001bf66:	0f b6 c0             	movzx  eax,al
c001bf69:	50                   	push   eax
c001bf6a:	55                   	push   ebp
c001bf6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf6f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf75:	51                   	push   ecx
c001bf76:	e8 d5 75 ff ff       	call   c0013550 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf7b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf80:	83 c4 1c             	add    esp,0x1c
c001bf83:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf89:	eb 0a                	jmp    c001bf95 <IDE::open(int, int, void*)+0x147>
c001bf8b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf95:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf9c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bfa3:	c1 e1 10             	shl    ecx,0x10
c001bfa6:	c1 e0 08             	shl    eax,0x8
c001bfa9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bfae:	09 c1                	or     ecx,eax
c001bfb0:	89 fa                	mov    edx,edi
c001bfb2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bfb9:	c1 e0 0b             	shl    eax,0xb
c001bfbc:	09 c1                	or     ecx,eax
c001bfbe:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bfc4:	89 c8                	mov    eax,ecx
c001bfc6:	ef                   	out    dx,eax
c001bfc7:	be fc 0c 00 00       	mov    esi,0xcfc
c001bfcc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bfd2:	89 f2                	mov    edx,esi
c001bfd4:	ee                   	out    dx,al
c001bfd5:	89 c8                	mov    eax,ecx
c001bfd7:	89 fa                	mov    edx,edi
c001bfd9:	ef                   	out    dx,eax
c001bfda:	89 f2                	mov    edx,esi
c001bfdc:	ed                   	in     eax,dx
c001bfdd:	0f b6 c0             	movzx  eax,al
c001bfe0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bfe6:	74 46                	je     c001c02e <IDE::open(int, int, void*)+0x1e0>
c001bfe8:	83 ec 0c             	sub    esp,0xc
c001bfeb:	68 60 25 02 c0       	push   0xc0022560
c001bff0:	eb 34                	jmp    c001c026 <IDE::open(int, int, void*)+0x1d8>
c001bff2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bffb:	75 17                	jne    c001c014 <IDE::open(int, int, void*)+0x1c6>
c001bffd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c002:	74 07                	je     c001c00b <IDE::open(int, int, void*)+0x1bd>
c001c004:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c009:	75 09                	jne    c001c014 <IDE::open(int, int, void*)+0x1c6>
c001c00b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c012:	eb 1a                	jmp    c001c02e <IDE::open(int, int, void*)+0x1e0>
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	68 68 25 02 c0       	push   0xc0022568
c001c01c:	eb 08                	jmp    c001c026 <IDE::open(int, int, void*)+0x1d8>
c001c01e:	83 ec 0c             	sub    esp,0xc
c001c021:	68 99 25 02 c0       	push   0xc0022599
c001c026:	e8 65 8c ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c035:	79 1a                	jns    c001c051 <IDE::open(int, int, void*)+0x203>
c001c037:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c03d:	83 e0 fc             	and    eax,0xfffffffc
c001c040:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c047:	83 c0 08             	add    eax,0x8
c001c04a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c051:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c057:	89 c2                	mov    edx,eax
c001c059:	83 e2 0f             	and    edx,0xf
c001c05c:	66 83 fa 08          	cmp    dx,0x8
c001c060:	75 0a                	jne    c001c06c <IDE::open(int, int, void*)+0x21e>
c001c062:	83 e8 02             	sub    eax,0x2
c001c065:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c06c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c072:	89 c2                	mov    edx,eax
c001c074:	83 e2 0f             	and    edx,0xf
c001c077:	66 83 fa 08          	cmp    dx,0x8
c001c07b:	75 0a                	jne    c001c087 <IDE::open(int, int, void*)+0x239>
c001c07d:	83 e8 02             	sub    eax,0x2
c001c080:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c087:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c08e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c095:	89 d0                	mov    eax,edx
c001c097:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c09a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c09e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c0a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c0a5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0aa:	0f b6 c9             	movzx  ecx,cl
c001c0ad:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c0b4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0b7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0bb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c0bf:	8d 50 02             	lea    edx,[eax+0x2]
c001c0c2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0c7:	0f b6 d2             	movzx  edx,dl
c001c0ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c0d0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0d3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0d7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c0db:	8d 48 03             	lea    ecx,[eax+0x3]
c001c0de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0e3:	0f b6 c9             	movzx  ecx,cl
c001c0e6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c0ec:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0ef:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0f3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c0f7:	8d 50 04             	lea    edx,[eax+0x4]
c001c0fa:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c100:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c105:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c10c:	66 85 f6             	test   si,si
c001c10f:	74 3e                	je     c001c14f <IDE::open(int, int, void*)+0x301>
c001c111:	0f b6 d2             	movzx  edx,dl
c001c114:	83 c0 05             	add    eax,0x5
c001c117:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c11a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c11e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c122:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c128:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c12d:	eb 20                	jmp    c001c14f <IDE::open(int, int, void*)+0x301>
c001c12f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c139:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c143:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c14a:	e9 02 ff ff ff       	jmp    c001c051 <IDE::open(int, int, void*)+0x203>
c001c14f:	52                   	push   edx
c001c150:	52                   	push   edx
c001c151:	6a 00                	push   0x0
c001c153:	53                   	push   ebx
c001c154:	e8 7d fa ff ff       	call   c001bbd6 <IDE::prepareInterrupt(unsigned char)>
c001c159:	59                   	pop    ecx
c001c15a:	5e                   	pop    esi
c001c15b:	6a 01                	push   0x1
c001c15d:	53                   	push   ebx
c001c15e:	e8 73 fa ff ff       	call   c001bbd6 <IDE::prepareInterrupt(unsigned char)>
c001c163:	83 c4 0c             	add    esp,0xc
c001c166:	6a 00                	push   0x0
c001c168:	6a 00                	push   0x0
c001c16a:	53                   	push   ebx
c001c16b:	e8 98 fc ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001c170:	83 c4 0c             	add    esp,0xc
c001c173:	6a 00                	push   0x0
c001c175:	6a 01                	push   0x1
c001c177:	53                   	push   ebx
c001c178:	e8 8b fc ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c187:	74 40                	je     c001c1c9 <IDE::open(int, int, void*)+0x37b>
c001c189:	83 ec 0c             	sub    esp,0xc
c001c18c:	68 c3 25 02 c0       	push   0xc00225c3
c001c191:	e8 65 2e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c199:	6a 01                	push   0x1
c001c19b:	68 d0 bd 01 c0       	push   0xc001bdd0
c001c1a0:	6a 0e                	push   0xe
c001c1a2:	53                   	push   ebx
c001c1a3:	e8 b2 41 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1a8:	83 c4 14             	add    esp,0x14
c001c1ab:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1b1:	53                   	push   ebx
c001c1b2:	6a 01                	push   0x1
c001c1b4:	68 ec bd 01 c0       	push   0xc001bdec
c001c1b9:	6a 0f                	push   0xf
c001c1bb:	53                   	push   ebx
c001c1bc:	e8 99 41 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1c1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c1c7:	eb 4a                	jmp    c001c213 <IDE::open(int, int, void*)+0x3c5>
c001c1c9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c1d3:	50                   	push   eax
c001c1d4:	6a 0f                	push   0xf
c001c1d6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1dc:	68 df 25 02 c0       	push   0xc00225df
c001c1e1:	e8 15 2e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c1e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1e9:	6a 00                	push   0x0
c001c1eb:	68 d0 bd 01 c0       	push   0xc001bdd0
c001c1f0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1f6:	53                   	push   ebx
c001c1f7:	e8 5e 41 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1fc:	83 c4 14             	add    esp,0x14
c001c1ff:	53                   	push   ebx
c001c200:	6a 00                	push   0x0
c001c202:	68 ec bd 01 c0       	push   0xc001bdec
c001c207:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c20d:	53                   	push   ebx
c001c20e:	e8 47 41 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c213:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c215:	83 c4 20             	add    esp,0x20
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	53                   	push   ebx
c001c21c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c21f:	83 c4 0c             	add    esp,0xc
c001c222:	6a 07                	push   0x7
c001c224:	6a 00                	push   0x0
c001c226:	53                   	push   ebx
c001c227:	e8 90 fa ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c22c:	83 c4 0c             	add    esp,0xc
c001c22f:	6a 07                	push   0x7
c001c231:	6a 01                	push   0x1
c001c233:	53                   	push   ebx
c001c234:	e8 83 fa ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	6a 01                	push   0x1
c001c23e:	6a 00                	push   0x0
c001c240:	53                   	push   ebx
c001c241:	e8 c2 fb ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001c246:	83 c4 0c             	add    esp,0xc
c001c249:	6a 01                	push   0x1
c001c24b:	6a 01                	push   0x1
c001c24d:	53                   	push   ebx
c001c24e:	e8 b5 fb ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001c253:	83 c4 2c             	add    esp,0x2c
c001c256:	31 c0                	xor    eax,eax
c001c258:	5b                   	pop    ebx
c001c259:	5e                   	pop    esi
c001c25a:	5f                   	pop    edi
c001c25b:	5d                   	pop    ebp
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c25e:	55                   	push   ebp
c001c25f:	57                   	push   edi
c001c260:	56                   	push   esi
c001c261:	53                   	push   ebx
c001c262:	83 ec 1c             	sub    esp,0x1c
c001c265:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c269:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c26d:	8d 50 f8             	lea    edx,[eax-0x8]
c001c270:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c274:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c278:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c27c:	80 fa 03             	cmp    dl,0x3
c001c27f:	77 5d                	ja     c001c2de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c285:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c289:	0f b6 db             	movzx  ebx,bl
c001c28c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c28f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c293:	83 ca 80             	or     edx,0xffffff80
c001c296:	0f b6 d2             	movzx  edx,dl
c001c299:	52                   	push   edx
c001c29a:	6a 0c                	push   0xc
c001c29c:	53                   	push   ebx
c001c29d:	56                   	push   esi
c001c29e:	e8 59 f9 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c2a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c2b0:	0f b6 c0             	movzx  eax,al
c001c2b3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c2b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2b9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c2be:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c2c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c2c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c2ca:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c2d2:	83 c4 2c             	add    esp,0x2c
c001c2d5:	5b                   	pop    ebx
c001c2d6:	5e                   	pop    esi
c001c2d7:	5f                   	pop    edi
c001c2d8:	5d                   	pop    ebp
c001c2d9:	e9 1e f9 ff ff       	jmp    c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2de:	3c 07                	cmp    al,0x7
c001c2e0:	77 10                	ja     c001c2f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c2e2:	0f b6 db             	movzx  ebx,bl
c001c2e5:	0f b6 d0             	movzx  edx,al
c001c2e8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c2f0:	eb 2d                	jmp    c001c31f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2f2:	3c 0d                	cmp    al,0xd
c001c2f4:	77 13                	ja     c001c309 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c2f6:	0f b6 db             	movzx  ebx,bl
c001c2f9:	0f b6 c0             	movzx  eax,al
c001c2fc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c303:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c307:	eb 16                	jmp    c001c31f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c309:	3c 15                	cmp    al,0x15
c001c30b:	77 14                	ja     c001c321 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c30d:	0f b6 db             	movzx  ebx,bl
c001c310:	0f b6 c0             	movzx  eax,al
c001c313:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c31b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c31f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c321:	83 c4 1c             	add    esp,0x1c
c001c324:	5b                   	pop    ebx
c001c325:	5e                   	pop    esi
c001c326:	5f                   	pop    edi
c001c327:	5d                   	pop    ebp
c001c328:	c3                   	ret    
c001c329:	90                   	nop

c001c32a <IDE::detect()>:
c001c32a:	55                   	push   ebp
c001c32b:	57                   	push   edi
c001c32c:	56                   	push   esi
c001c32d:	53                   	push   ebx
c001c32e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c334:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c33b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c342:	0f 85 be 02 00 00    	jne    c001c606 <IDE::detect()+0x2dc>
c001c348:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c34f:	31 f6                	xor    esi,esi
c001c351:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c359:	31 ed                	xor    ebp,ebp
c001c35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c35f:	c1 e0 06             	shl    eax,0x6
c001c362:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c36a:	89 e8                	mov    eax,ebp
c001c36c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c370:	c1 e0 04             	shl    eax,0x4
c001c373:	83 c8 a0             	or     eax,0xffffffa0
c001c376:	0f b6 c0             	movzx  eax,al
c001c379:	50                   	push   eax
c001c37a:	6a 06                	push   0x6
c001c37c:	56                   	push   esi
c001c37d:	53                   	push   ebx
c001c37e:	e8 79 f8 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c383:	83 c4 0c             	add    esp,0xc
c001c386:	6a 0c                	push   0xc
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	e8 2d f9 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c38f:	83 c4 0c             	add    esp,0xc
c001c392:	6a 0c                	push   0xc
c001c394:	56                   	push   esi
c001c395:	53                   	push   ebx
c001c396:	e8 21 f9 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c39b:	83 c4 0c             	add    esp,0xc
c001c39e:	6a 0c                	push   0xc
c001c3a0:	56                   	push   esi
c001c3a1:	53                   	push   ebx
c001c3a2:	e8 15 f9 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	6a 0c                	push   0xc
c001c3ac:	56                   	push   esi
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 09 f9 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3b3:	68 ec 00 00 00       	push   0xec
c001c3b8:	6a 07                	push   0x7
c001c3ba:	56                   	push   esi
c001c3bb:	53                   	push   ebx
c001c3bc:	e8 3b f8 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3c1:	83 c4 1c             	add    esp,0x1c
c001c3c4:	6a 0c                	push   0xc
c001c3c6:	56                   	push   esi
c001c3c7:	53                   	push   ebx
c001c3c8:	e8 ef f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3cd:	83 c4 0c             	add    esp,0xc
c001c3d0:	6a 0c                	push   0xc
c001c3d2:	56                   	push   esi
c001c3d3:	53                   	push   ebx
c001c3d4:	e8 e3 f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3d9:	83 c4 0c             	add    esp,0xc
c001c3dc:	6a 0c                	push   0xc
c001c3de:	56                   	push   esi
c001c3df:	53                   	push   ebx
c001c3e0:	e8 d7 f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3e5:	83 c4 0c             	add    esp,0xc
c001c3e8:	6a 0c                	push   0xc
c001c3ea:	56                   	push   esi
c001c3eb:	53                   	push   ebx
c001c3ec:	e8 cb f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3f1:	83 c4 0c             	add    esp,0xc
c001c3f4:	6a 0c                	push   0xc
c001c3f6:	56                   	push   esi
c001c3f7:	53                   	push   ebx
c001c3f8:	e8 bf f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	84 c0                	test   al,al
c001c402:	0f 84 8b 01 00 00    	je     c001c593 <IDE::detect()+0x269>
c001c408:	31 ff                	xor    edi,edi
c001c40a:	50                   	push   eax
c001c40b:	6a 0c                	push   0xc
c001c40d:	56                   	push   esi
c001c40e:	53                   	push   ebx
c001c40f:	e8 a8 f8 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c414:	83 c4 10             	add    esp,0x10
c001c417:	a8 01                	test   al,0x1
c001c419:	0f 85 8e 01 00 00    	jne    c001c5ad <IDE::detect()+0x283>
c001c41f:	84 c0                	test   al,al
c001c421:	78 04                	js     c001c427 <IDE::detect()+0xfd>
c001c423:	a8 08                	test   al,0x8
c001c425:	75 27                	jne    c001c44e <IDE::detect()+0x124>
c001c427:	47                   	inc    edi
c001c428:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c42e:	7e da                	jle    c001c40a <IDE::detect()+0xe0>
c001c430:	50                   	push   eax
c001c431:	50                   	push   eax
c001c432:	6a 00                	push   0x0
c001c434:	68 40 4b 4c 00       	push   0x4c4b40
c001c439:	e8 5b be ff ff       	call   c0018299 <nanoSleep(unsigned long long)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c447:	75 c1                	jne    c001c40a <IDE::detect()+0xe0>
c001c449:	e9 5f 01 00 00       	jmp    c001c5ad <IDE::detect()+0x283>
c001c44e:	31 c9                	xor    ecx,ecx
c001c450:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c454:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	68 80 00 00 00       	push   0x80
c001c460:	57                   	push   edi
c001c461:	6a 00                	push   0x0
c001c463:	56                   	push   esi
c001c464:	53                   	push   ebx
c001c465:	e8 f4 fd ff ff       	call   c001c25e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c46a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c46f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c473:	89 d1                	mov    ecx,edx
c001c475:	c1 e0 06             	shl    eax,0x6
c001c478:	01 d8                	add    eax,ebx
c001c47a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c481:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c488:	89 f2                	mov    edx,esi
c001c48a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c490:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c494:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c49a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c49e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c4a5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c4ad:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c4b4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c4bc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c4c2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c4c9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c4cf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4d3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4d7:	83 c4 20             	add    esp,0x20
c001c4da:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c4dd:	83 c0 02             	add    eax,0x2
c001c4e0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c4e6:	83 c7 02             	add    edi,0x2
c001c4e9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c4ec:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c4f2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c4f6:	75 e2                	jne    c001c4da <IDE::detect()+0x1b0>
c001c4f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fc:	c1 e0 06             	shl    eax,0x6
c001c4ff:	01 d8                	add    eax,ebx
c001c501:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c507:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c50e:	66 c1 ea 09          	shr    dx,0x9
c001c512:	83 e2 01             	and    edx,0x1
c001c515:	84 c9                	test   cl,cl
c001c517:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c51d:	75 2f                	jne    c001c54e <IDE::detect()+0x224>
c001c51f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c525:	85 c0                	test   eax,eax
c001c527:	74 66                	je     c001c58f <IDE::detect()+0x265>
c001c529:	50                   	push   eax
c001c52a:	55                   	push   ebp
c001c52b:	56                   	push   esi
c001c52c:	68 fb 25 02 c0       	push   0xc00225fb
c001c531:	e8 c5 2a ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c536:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c53d:	e8 ca 29 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001c542:	89 c7                	mov    edi,eax
c001c544:	89 04 24             	mov    DWORD PTR [esp],eax
c001c547:	e8 e8 02 00 00       	call   c001c834 <ATA::ATA()>
c001c54c:	eb 28                	jmp    c001c576 <IDE::detect()+0x24c>
c001c54e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c554:	55                   	push   ebp
c001c555:	56                   	push   esi
c001c556:	68 2a 26 02 c0       	push   0xc002262a
c001c55b:	e8 9b 2a ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c560:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c567:	e8 a0 29 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001c56c:	89 c7                	mov    edi,eax
c001c56e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c571:	e8 ee 08 00 00       	call   c001ce64 <ATAPI::ATAPI()>
c001c576:	5a                   	pop    edx
c001c577:	59                   	pop    ecx
c001c578:	57                   	push   edi
c001c579:	53                   	push   ebx
c001c57a:	e8 87 3e ff ff       	call   c0010406 <Device::addChild(Device*)>
c001c57f:	8b 07                	mov    eax,DWORD PTR [edi]
c001c581:	53                   	push   ebx
c001c582:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c586:	6a 00                	push   0x0
c001c588:	57                   	push   edi
c001c589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c58c:	83 c4 20             	add    esp,0x20
c001c58f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c593:	4d                   	dec    ebp
c001c594:	74 0a                	je     c001c5a0 <IDE::detect()+0x276>
c001c596:	bd 01 00 00 00       	mov    ebp,0x1
c001c59b:	e9 bb fd ff ff       	jmp    c001c35b <IDE::detect()+0x31>
c001c5a0:	4e                   	dec    esi
c001c5a1:	74 63                	je     c001c606 <IDE::detect()+0x2dc>
c001c5a3:	be 01 00 00 00       	mov    esi,0x1
c001c5a8:	e9 ac fd ff ff       	jmp    c001c359 <IDE::detect()+0x2f>
c001c5ad:	50                   	push   eax
c001c5ae:	6a 04                	push   0x4
c001c5b0:	56                   	push   esi
c001c5b1:	53                   	push   ebx
c001c5b2:	e8 05 f7 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c5b7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c5bb:	83 c4 0c             	add    esp,0xc
c001c5be:	6a 05                	push   0x5
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	e8 f5 f6 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c5ce:	80 fa 14             	cmp    dl,0x14
c001c5d1:	75 04                	jne    c001c5d7 <IDE::detect()+0x2ad>
c001c5d3:	3c eb                	cmp    al,0xeb
c001c5d5:	eb 07                	jmp    c001c5de <IDE::detect()+0x2b4>
c001c5d7:	3c 96                	cmp    al,0x96
c001c5d9:	75 b8                	jne    c001c593 <IDE::detect()+0x269>
c001c5db:	80 fa 69             	cmp    dl,0x69
c001c5de:	75 b3                	jne    c001c593 <IDE::detect()+0x269>
c001c5e0:	68 a1 00 00 00       	push   0xa1
c001c5e5:	6a 07                	push   0x7
c001c5e7:	56                   	push   esi
c001c5e8:	53                   	push   ebx
c001c5e9:	e8 0e f6 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ee:	5f                   	pop    edi
c001c5ef:	58                   	pop    eax
c001c5f0:	6a 00                	push   0x0
c001c5f2:	68 40 42 0f 00       	push   0xf4240
c001c5f7:	e8 9d bc ff ff       	call   c0018299 <nanoSleep(unsigned long long)>
c001c5fc:	83 c4 10             	add    esp,0x10
c001c5ff:	b1 01                	mov    cl,0x1
c001c601:	e9 4a fe ff ff       	jmp    c001c450 <IDE::detect()+0x126>
c001c606:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c60c:	5b                   	pop    ebx
c001c60d:	5e                   	pop    esi
c001c60e:	5f                   	pop    edi
c001c60f:	5d                   	pop    ebp
c001c610:	c3                   	ret    
c001c611:	90                   	nop

c001c612 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c612:	55                   	push   ebp
c001c613:	57                   	push   edi
c001c614:	56                   	push   esi
c001c615:	53                   	push   ebx
c001c616:	83 ec 1c             	sub    esp,0x1c
c001c619:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c61d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c621:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c625:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c629:	88 c3                	mov    bl,al
c001c62b:	84 c0                	test   al,al
c001c62d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c631:	0f 84 67 01 00 00    	je     c001c79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	68 5b 26 02 c0       	push   0xc002265b
c001c63f:	e8 b7 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c644:	83 c4 10             	add    esp,0x10
c001c647:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c64b:	3c 01                	cmp    al,0x1
c001c64d:	75 17                	jne    c001c666 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c64f:	83 ec 0c             	sub    esp,0xc
c001c652:	b3 13                	mov    bl,0x13
c001c654:	68 67 26 02 c0       	push   0xc0022667
c001c659:	e8 9d 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	e9 25 01 00 00       	jmp    c001c78b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c666:	3c 02                	cmp    al,0x2
c001c668:	0f 85 ef 00 00 00    	jne    c001c75d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c66e:	d1 e6                	shl    esi,1
c001c670:	09 ee                	or     esi,ebp
c001c672:	52                   	push   edx
c001c673:	89 f0                	mov    eax,esi
c001c675:	6a 01                	push   0x1
c001c677:	0f b6 f0             	movzx  esi,al
c001c67a:	c1 e6 06             	shl    esi,0x6
c001c67d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c685:	50                   	push   eax
c001c686:	57                   	push   edi
c001c687:	e8 30 f6 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c68c:	83 c4 10             	add    esp,0x10
c001c68f:	89 c6                	mov    esi,eax
c001c691:	a8 01                	test   al,0x1
c001c693:	74 12                	je     c001c6a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c695:	83 ec 0c             	sub    esp,0xc
c001c698:	b3 07                	mov    bl,0x7
c001c69a:	68 7c 26 02 c0       	push   0xc002267c
c001c69f:	e8 57 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c6a4:	83 c4 10             	add    esp,0x10
c001c6a7:	f7 c6 02 00 00 00    	test   esi,0x2
c001c6ad:	74 12                	je     c001c6c1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c6af:	83 ec 0c             	sub    esp,0xc
c001c6b2:	b3 03                	mov    bl,0x3
c001c6b4:	68 9a 26 02 c0       	push   0xc002269a
c001c6b9:	e8 3d 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	f7 c6 04 00 00 00    	test   esi,0x4
c001c6c7:	74 12                	je     c001c6db <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	b3 14                	mov    bl,0x14
c001c6ce:	68 ba 26 02 c0       	push   0xc00226ba
c001c6d3:	e8 23 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c6d8:	83 c4 10             	add    esp,0x10
c001c6db:	f7 c6 08 00 00 00    	test   esi,0x8
c001c6e1:	74 12                	je     c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	b3 03                	mov    bl,0x3
c001c6e8:	68 9a 26 02 c0       	push   0xc002269a
c001c6ed:	e8 09 29 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c6f2:	83 c4 10             	add    esp,0x10
c001c6f5:	f7 c6 10 00 00 00    	test   esi,0x10
c001c6fb:	74 12                	je     c001c70f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c6fd:	83 ec 0c             	sub    esp,0xc
c001c700:	b3 15                	mov    bl,0x15
c001c702:	68 d2 26 02 c0       	push   0xc00226d2
c001c707:	e8 ef 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c70c:	83 c4 10             	add    esp,0x10
c001c70f:	f7 c6 20 00 00 00    	test   esi,0x20
c001c715:	74 12                	je     c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	b3 03                	mov    bl,0x3
c001c71c:	68 9a 26 02 c0       	push   0xc002269a
c001c721:	e8 d5 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	f7 c6 40 00 00 00    	test   esi,0x40
c001c72f:	74 12                	je     c001c743 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c731:	83 ec 0c             	sub    esp,0xc
c001c734:	b3 16                	mov    bl,0x16
c001c736:	68 ec 26 02 c0       	push   0xc00226ec
c001c73b:	e8 bb 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c740:	83 c4 10             	add    esp,0x10
c001c743:	89 f0                	mov    eax,esi
c001c745:	84 c0                	test   al,al
c001c747:	79 42                	jns    c001c78b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c749:	83 ec 0c             	sub    esp,0xc
c001c74c:	b3 0d                	mov    bl,0xd
c001c74e:	68 0d 27 02 c0       	push   0xc002270d
c001c753:	e8 a3 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	eb 2e                	jmp    c001c78b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c75d:	3c 03                	cmp    al,0x3
c001c75f:	75 14                	jne    c001c775 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c761:	83 ec 0c             	sub    esp,0xc
c001c764:	b3 17                	mov    bl,0x17
c001c766:	68 21 27 02 c0       	push   0xc0022721
c001c76b:	e8 8b 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c770:	83 c4 10             	add    esp,0x10
c001c773:	eb 16                	jmp    c001c78b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c775:	3c 04                	cmp    al,0x4
c001c777:	75 12                	jne    c001c78b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c779:	83 ec 0c             	sub    esp,0xc
c001c77c:	b3 08                	mov    bl,0x8
c001c77e:	68 37 27 02 c0       	push   0xc0022737
c001c783:	e8 73 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	50                   	push   eax
c001c78c:	50                   	push   eax
c001c78d:	0f b6 c3             	movzx  eax,bl
c001c790:	50                   	push   eax
c001c791:	68 4f 27 02 c0       	push   0xc002274f
c001c796:	e8 60 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c79b:	83 c4 10             	add    esp,0x10
c001c79e:	83 c4 1c             	add    esp,0x1c
c001c7a1:	88 d8                	mov    al,bl
c001c7a3:	5b                   	pop    ebx
c001c7a4:	5e                   	pop    esi
c001c7a5:	5f                   	pop    edi
c001c7a6:	5d                   	pop    ebp
c001c7a7:	c3                   	ret    

c001c7a8 <IDE::polling(unsigned char, unsigned int)>:
c001c7a8:	57                   	push   edi
c001c7a9:	56                   	push   esi
c001c7aa:	53                   	push   ebx
c001c7ab:	bb 04 00 00 00       	mov    ebx,0x4
c001c7b0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7b4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7b9:	52                   	push   edx
c001c7ba:	6a 0c                	push   0xc
c001c7bc:	56                   	push   esi
c001c7bd:	57                   	push   edi
c001c7be:	e8 f9 f4 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	4b                   	dec    ebx
c001c7c7:	75 f0                	jne    c001c7b9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c7c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7ce:	50                   	push   eax
c001c7cf:	6a 0c                	push   0xc
c001c7d1:	56                   	push   esi
c001c7d2:	57                   	push   edi
c001c7d3:	e8 e4 f4 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	a8 01                	test   al,0x1
c001c7dd:	74 12                	je     c001c7f1 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	68 69 27 02 c0       	push   0xc0022769
c001c7e7:	e8 0f 28 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	eb 17                	jmp    c001c808 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7f1:	a8 20                	test   al,0x20
c001c7f3:	75 0f                	jne    c001c804 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c7f5:	4b                   	dec    ebx
c001c7f6:	74 10                	je     c001c808 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7f8:	84 c0                	test   al,al
c001c7fa:	78 d2                	js     c001c7ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7fc:	a8 08                	test   al,0x8
c001c7fe:	74 ce                	je     c001c7ce <IDE::polling(unsigned char, unsigned int)+0x26>
c001c800:	31 c0                	xor    eax,eax
c001c802:	eb 06                	jmp    c001c80a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c804:	b0 01                	mov    al,0x1
c001c806:	eb 02                	jmp    c001c80a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c808:	b0 02                	mov    al,0x2
c001c80a:	5b                   	pop    ebx
c001c80b:	5e                   	pop    esi
c001c80c:	5f                   	pop    edi
c001c80d:	c3                   	ret    

c001c80e <ATA::close(int, int, void*)>:
c001c80e:	83 ec 0c             	sub    esp,0xc
c001c811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c815:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c81b:	85 c0                	test   eax,eax
c001c81d:	74 0c                	je     c001c82b <ATA::close(int, int, void*)+0x1d>
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	8b 10                	mov    edx,DWORD PTR [eax]
c001c824:	50                   	push   eax
c001c825:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	31 c0                	xor    eax,eax
c001c82d:	83 c4 0c             	add    esp,0xc
c001c830:	c3                   	ret    
c001c831:	90                   	nop

c001c832 <ATA::powerSaving(PowerSavingLevel)>:
c001c832:	c3                   	ret    
c001c833:	90                   	nop

c001c834 <ATA::ATA()>:
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83b:	83 ec 04             	sub    esp,0x4
c001c83e:	68 00 02 00 00       	push   0x200
c001c843:	68 ac 27 02 c0       	push   0xc00227ac
c001c848:	50                   	push   eax
c001c849:	e8 be 3f ff ff       	call   c001080c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	ba d8 27 02 c0       	mov    edx,0xc00227d8
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	89 10                	mov    DWORD PTR [eax],edx
c001c85c:	90                   	nop
c001c85d:	83 c4 0c             	add    esp,0xc
c001c860:	c3                   	ret    
c001c861:	90                   	nop

c001c862 <ATA::flush(bool)>:
c001c862:	53                   	push   ebx
c001c863:	83 ec 08             	sub    esp,0x8
c001c866:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c86b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c86f:	19 c0                	sbb    eax,eax
c001c871:	83 e0 fd             	and    eax,0xfffffffd
c001c874:	05 ea 00 00 00       	add    eax,0xea
c001c879:	50                   	push   eax
c001c87a:	6a 07                	push   0x7
c001c87c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c883:	50                   	push   eax
c001c884:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c88a:	e8 6d f3 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c88f:	83 c4 0c             	add    esp,0xc
c001c892:	6a 00                	push   0x0
c001c894:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c89b:	50                   	push   eax
c001c89c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a2:	e8 01 ff ff ff       	call   c001c7a8 <IDE::polling(unsigned char, unsigned int)>
c001c8a7:	83 c4 18             	add    esp,0x18
c001c8aa:	5b                   	pop    ebx
c001c8ab:	c3                   	ret    

c001c8ac <ATA::readyForCommand()>:
c001c8ac:	56                   	push   esi
c001c8ad:	53                   	push   ebx
c001c8ae:	31 db                	xor    ebx,ebx
c001c8b0:	50                   	push   eax
c001c8b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8b5:	50                   	push   eax
c001c8b6:	6a 0c                	push   0xc
c001c8b8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8bf:	50                   	push   eax
c001c8c0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8c6:	e8 f1 f3 ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	a8 88                	test   al,0x88
c001c8d0:	74 23                	je     c001c8f5 <ATA::readyForCommand()+0x49>
c001c8d2:	43                   	inc    ebx
c001c8d3:	83 fb 63             	cmp    ebx,0x63
c001c8d6:	7e dd                	jle    c001c8b5 <ATA::readyForCommand()+0x9>
c001c8d8:	51                   	push   ecx
c001c8d9:	51                   	push   ecx
c001c8da:	6a 00                	push   0x0
c001c8dc:	68 40 42 0f 00       	push   0xf4240
c001c8e1:	e8 b3 b9 ff ff       	call   c0018299 <nanoSleep(unsigned long long)>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8ef:	75 c4                	jne    c001c8b5 <ATA::readyForCommand()+0x9>
c001c8f1:	31 c0                	xor    eax,eax
c001c8f3:	eb 02                	jmp    c001c8f7 <ATA::readyForCommand()+0x4b>
c001c8f5:	b0 01                	mov    al,0x1
c001c8f7:	5a                   	pop    edx
c001c8f8:	5b                   	pop    ebx
c001c8f9:	5e                   	pop    esi
c001c8fa:	c3                   	ret    
c001c8fb:	90                   	nop

c001c8fc <ATA::access(unsigned long long, int, void*, bool)>:
c001c8fc:	55                   	push   ebp
c001c8fd:	57                   	push   edi
c001c8fe:	56                   	push   esi
c001c8ff:	53                   	push   ebx
c001c900:	83 ec 2c             	sub    esp,0x2c
c001c903:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c907:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c90b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c90f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c913:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c917:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c91b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c91f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c925:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c929:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c92f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c933:	c1 e0 06             	shl    eax,0x6
c001c936:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c93e:	74 5d                	je     c001c99d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c940:	89 fa                	mov    edx,edi
c001c942:	89 f0                	mov    eax,esi
c001c944:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c948:	c1 ea 1c             	shr    edx,0x1c
c001c94b:	89 d1                	mov    ecx,edx
c001c94d:	09 c1                	or     ecx,eax
c001c94f:	74 25                	je     c001c976 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c951:	31 ed                	xor    ebp,ebp
c001c953:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c95a:	89 fa                	mov    edx,edi
c001c95c:	89 f0                	mov    eax,esi
c001c95e:	0f ad d0             	shrd   eax,edx,cl
c001c961:	d3 ea                	shr    edx,cl
c001c963:	f6 c1 20             	test   cl,0x20
c001c966:	74 02                	je     c001c96a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c968:	89 d0                	mov    eax,edx
c001c96a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c96e:	45                   	inc    ebp
c001c96f:	83 fd 06             	cmp    ebp,0x6
c001c972:	75 df                	jne    c001c953 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c974:	eb 76                	jmp    c001c9ec <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c976:	89 f0                	mov    eax,esi
c001c978:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c97d:	89 fa                	mov    edx,edi
c001c97f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c986:	0f ac d0 10          	shrd   eax,edx,0x10
c001c98a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c98f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c993:	c1 ee 18             	shr    esi,0x18
c001c996:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c99b:	eb 56                	jmp    c001c9f3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c99d:	6a 00                	push   0x0
c001c99f:	6a 3f                	push   0x3f
c001c9a1:	57                   	push   edi
c001c9a2:	56                   	push   esi
c001c9a3:	e8 e4 1e 00 00       	call   c001e88c <__umoddi3>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	40                   	inc    eax
c001c9ac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c9b0:	6a 00                	push   0x0
c001c9b2:	68 f0 03 00 00       	push   0x3f0
c001c9b7:	57                   	push   edi
c001c9b8:	56                   	push   esi
c001c9b9:	e8 ce 1d 00 00       	call   c001e78c <__udivdi3>
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c9c6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9d2:	6a 00                	push   0x0
c001c9d4:	6a 3f                	push   0x3f
c001c9d6:	57                   	push   edi
c001c9d7:	56                   	push   esi
c001c9d8:	e8 af 1d 00 00       	call   c001e78c <__udivdi3>
c001c9dd:	83 c4 10             	add    esp,0x10
c001c9e0:	89 c6                	mov    esi,eax
c001c9e2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c9e7:	83 e6 0f             	and    esi,0xf
c001c9ea:	eb 07                	jmp    c001c9f3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9ec:	31 f6                	xor    esi,esi
c001c9ee:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c9f3:	bf 01 00 00 00       	mov    edi,0x1
c001c9f8:	50                   	push   eax
c001c9f9:	6a 00                	push   0x0
c001c9fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca02:	50                   	push   eax
c001ca03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca07:	e8 fc f3 ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001ca0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca0f:	e8 98 fe ff ff       	call   c001c8ac <ATA::readyForCommand()>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	84 c0                	test   al,al
c001ca19:	0f 84 50 02 00 00    	je     c001cc6f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001ca1f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca25:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca2b:	c1 e0 04             	shl    eax,0x4
c001ca2e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca35:	09 c6                	or     esi,eax
c001ca37:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ca3c:	75 05                	jne    c001ca43 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca3e:	83 ce a0             	or     esi,0xffffffa0
c001ca41:	eb 03                	jmp    c001ca46 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca43:	83 ce e0             	or     esi,0xffffffe0
c001ca46:	89 f0                	mov    eax,esi
c001ca48:	0f b6 f0             	movzx  esi,al
c001ca4b:	56                   	push   esi
c001ca4c:	6a 06                	push   0x6
c001ca4e:	51                   	push   ecx
c001ca4f:	52                   	push   edx
c001ca50:	e8 a7 f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	6a 00                	push   0x0
c001ca5a:	6a 01                	push   0x1
c001ca5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca63:	50                   	push   eax
c001ca64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6a:	e8 8d f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca77:	75 6e                	jne    c001cae7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca79:	6a 00                	push   0x0
c001ca7b:	6a 08                	push   0x8
c001ca7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca84:	50                   	push   eax
c001ca85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca8b:	e8 6c f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca90:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca95:	50                   	push   eax
c001ca96:	6a 09                	push   0x9
c001ca98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9f:	50                   	push   eax
c001caa0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa6:	e8 51 f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caab:	83 c4 20             	add    esp,0x20
c001caae:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cab3:	50                   	push   eax
c001cab4:	6a 0a                	push   0xa
c001cab6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cabd:	50                   	push   eax
c001cabe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cac4:	e8 33 f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cace:	50                   	push   eax
c001cacf:	6a 0b                	push   0xb
c001cad1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad8:	50                   	push   eax
c001cad9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cadf:	e8 18 f1 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cae4:	83 c4 20             	add    esp,0x20
c001cae7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001caec:	50                   	push   eax
c001caed:	6a 02                	push   0x2
c001caef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caf6:	50                   	push   eax
c001caf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cafd:	e8 fa f0 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb02:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb07:	50                   	push   eax
c001cb08:	6a 03                	push   0x3
c001cb0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb11:	50                   	push   eax
c001cb12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb18:	e8 df f0 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1d:	83 c4 20             	add    esp,0x20
c001cb20:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb25:	50                   	push   eax
c001cb26:	6a 04                	push   0x4
c001cb28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb2f:	50                   	push   eax
c001cb30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb36:	e8 c1 f0 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb40:	50                   	push   eax
c001cb41:	6a 05                	push   0x5
c001cb43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb4a:	50                   	push   eax
c001cb4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb51:	e8 a6 f0 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb56:	83 c4 20             	add    esp,0x20
c001cb59:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb5e:	0f 94 c0             	sete   al
c001cb61:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb66:	74 09                	je     c001cb71 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb68:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb6f:	eb 07                	jmp    c001cb78 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb71:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb78:	0f b6 c0             	movzx  eax,al
c001cb7b:	50                   	push   eax
c001cb7c:	6a 07                	push   0x7
c001cb7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb85:	50                   	push   eax
c001cb86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb8c:	e8 6b f0 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb91:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb95:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb99:	83 c4 10             	add    esp,0x10
c001cb9c:	85 f6                	test   esi,esi
c001cb9e:	0f 84 ac 00 00 00    	je     c001cc50 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cba4:	50                   	push   eax
c001cba5:	6a 01                	push   0x1
c001cba7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbae:	50                   	push   eax
c001cbaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbb5:	e8 ee fb ff ff       	call   c001c7a8 <IDE::polling(unsigned char, unsigned int)>
c001cbba:	83 c4 10             	add    esp,0x10
c001cbbd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbc3:	84 c0                	test   al,al
c001cbc5:	74 20                	je     c001cbe7 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cbc7:	0f b6 f8             	movzx  edi,al
c001cbca:	0f b6 d2             	movzx  edx,dl
c001cbcd:	57                   	push   edi
c001cbce:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cbd5:	50                   	push   eax
c001cbd6:	52                   	push   edx
c001cbd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbdd:	e8 30 fa ff ff       	call   c001c612 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cbe2:	e9 85 00 00 00       	jmp    c001cc6c <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cbe7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cbec:	74 41                	je     c001cc2f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cbee:	31 c9                	xor    ecx,ecx
c001cbf0:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cbf4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cbf8:	50                   	push   eax
c001cbf9:	50                   	push   eax
c001cbfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc01:	50                   	push   eax
c001cc02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc08:	e8 dd ef ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001cc0d:	89 c2                	mov    edx,eax
c001cc0f:	89 e8                	mov    eax,ebp
c001cc11:	66 ef                	out    dx,ax
c001cc13:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	41                   	inc    ecx
c001cc1b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cc21:	75 cd                	jne    c001cbf0 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cc23:	4e                   	dec    esi
c001cc24:	81 c7 00 02 00 00    	add    edi,0x200
c001cc2a:	e9 6d ff ff ff       	jmp    c001cb9c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cc2f:	0f b6 d2             	movzx  edx,dl
c001cc32:	51                   	push   ecx
c001cc33:	51                   	push   ecx
c001cc34:	52                   	push   edx
c001cc35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc3b:	e8 aa ef ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001cc40:	b9 00 01 00 00       	mov    ecx,0x100
c001cc45:	89 c2                	mov    edx,eax
c001cc47:	fc                   	cld    
c001cc48:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc4b:	83 c4 10             	add    esp,0x10
c001cc4e:	eb d3                	jmp    c001cc23 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc50:	31 ff                	xor    edi,edi
c001cc52:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc57:	74 16                	je     c001cc6f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc59:	50                   	push   eax
c001cc5a:	50                   	push   eax
c001cc5b:	31 c0                	xor    eax,eax
c001cc5d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc62:	0f 94 c0             	sete   al
c001cc65:	50                   	push   eax
c001cc66:	53                   	push   ebx
c001cc67:	e8 f6 fb ff ff       	call   c001c862 <ATA::flush(bool)>
c001cc6c:	83 c4 10             	add    esp,0x10
c001cc6f:	83 c4 2c             	add    esp,0x2c
c001cc72:	89 f8                	mov    eax,edi
c001cc74:	5b                   	pop    ebx
c001cc75:	5e                   	pop    esi
c001cc76:	5f                   	pop    edi
c001cc77:	5d                   	pop    ebp
c001cc78:	c3                   	ret    
c001cc79:	90                   	nop

c001cc7a <ATA::read(unsigned long long, int, void*)>:
c001cc7a:	57                   	push   edi
c001cc7b:	b8 04 00 00 00       	mov    eax,0x4
c001cc80:	56                   	push   esi
c001cc81:	53                   	push   ebx
c001cc82:	83 ec 10             	sub    esp,0x10
c001cc85:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc89:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc8d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc90:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc98:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc9e:	77 3b                	ja     c001ccdb <ATA::read(unsigned long long, int, void*)+0x61>
c001cca0:	b8 06 00 00 00       	mov    eax,0x6
c001cca5:	85 d2                	test   edx,edx
c001cca7:	74 32                	je     c001ccdb <ATA::read(unsigned long long, int, void*)+0x61>
c001cca9:	50                   	push   eax
c001ccaa:	50                   	push   eax
c001ccab:	6a 00                	push   0x0
c001ccad:	52                   	push   edx
c001ccae:	53                   	push   ebx
c001ccaf:	57                   	push   edi
c001ccb0:	56                   	push   esi
c001ccb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccb5:	e8 42 fc ff ff       	call   c001c8fc <ATA::access(unsigned long long, int, void*, bool)>
c001ccba:	83 c4 20             	add    esp,0x20
c001ccbd:	85 c0                	test   eax,eax
c001ccbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccc3:	75 11                	jne    c001ccd6 <ATA::read(unsigned long long, int, void*)+0x5c>
c001ccc5:	01 1d 24 55 02 c0    	add    DWORD PTR ds:0xc0025524,ebx
c001cccb:	e8 a4 fe fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001ccd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccd4:	eb 05                	jmp    c001ccdb <ATA::read(unsigned long long, int, void*)+0x61>
c001ccd6:	b8 01 00 00 00       	mov    eax,0x1
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	5b                   	pop    ebx
c001ccdf:	5e                   	pop    esi
c001cce0:	5f                   	pop    edi
c001cce1:	c3                   	ret    

c001cce2 <ATA::write(unsigned long long, int, void*)>:
c001cce2:	57                   	push   edi
c001cce3:	b8 04 00 00 00       	mov    eax,0x4
c001cce8:	56                   	push   esi
c001cce9:	53                   	push   ebx
c001ccea:	83 ec 10             	sub    esp,0x10
c001cced:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccf1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccf5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001ccf8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd00:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cd06:	77 3b                	ja     c001cd43 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd08:	b8 06 00 00 00       	mov    eax,0x6
c001cd0d:	85 d2                	test   edx,edx
c001cd0f:	74 32                	je     c001cd43 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd11:	50                   	push   eax
c001cd12:	50                   	push   eax
c001cd13:	6a 01                	push   0x1
c001cd15:	52                   	push   edx
c001cd16:	53                   	push   ebx
c001cd17:	57                   	push   edi
c001cd18:	56                   	push   esi
c001cd19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd1d:	e8 da fb ff ff       	call   c001c8fc <ATA::access(unsigned long long, int, void*, bool)>
c001cd22:	83 c4 20             	add    esp,0x20
c001cd25:	85 c0                	test   eax,eax
c001cd27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd2b:	75 11                	jne    c001cd3e <ATA::write(unsigned long long, int, void*)+0x5c>
c001cd2d:	01 1d 20 55 02 c0    	add    DWORD PTR ds:0xc0025520,ebx
c001cd33:	e8 3c fe fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cd38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd3c:	eb 05                	jmp    c001cd43 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd3e:	b8 01 00 00 00       	mov    eax,0x1
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	5b                   	pop    ebx
c001cd47:	5e                   	pop    esi
c001cd48:	5f                   	pop    edi
c001cd49:	c3                   	ret    

c001cd4a <ATA::detectCHS()>:
c001cd4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd4e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd54:	c1 e0 06             	shl    eax,0x6
c001cd57:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd5d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd67:	c7 44 24 04 bb 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc00227bb
c001cd6f:	e9 1c 7f ff ff       	jmp    c0014c90 <Krnl::panic(char const*)>

c001cd74 <ATA::open(int, int, void*)>:
c001cd74:	53                   	push   ebx
c001cd75:	83 ec 08             	sub    esp,0x8
c001cd78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd84:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd8a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd90:	c1 e0 06             	shl    eax,0x6
c001cd93:	01 d0                	add    eax,edx
c001cd95:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd9c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cda2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cda9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdb3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cdb9:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cdc0:	75 0c                	jne    c001cdce <ATA::open(int, int, void*)+0x5a>
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	53                   	push   ebx
c001cdc6:	e8 7f ff ff ff       	call   c001cd4a <ATA::detectCHS()>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdd4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdda:	c1 e0 06             	shl    eax,0x6
c001cddd:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cde4:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cdee:	d1 e8                	shr    eax,1
c001cdf0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cdf6:	6a 04                	push   0x4
c001cdf8:	6a 0c                	push   0xc
c001cdfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce01:	50                   	push   eax
c001ce02:	52                   	push   edx
c001ce03:	e8 f4 ed ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce08:	90                   	nop
c001ce09:	90                   	nop
c001ce0a:	6a 00                	push   0x0
c001ce0c:	6a 0c                	push   0xc
c001ce0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce15:	50                   	push   eax
c001ce16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce1c:	e8 db ed ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce21:	83 c4 14             	add    esp,0x14
c001ce24:	53                   	push   ebx
c001ce25:	e8 4a 3a ff ff       	call   c0010874 <PhysicalDisk::startCache()>
c001ce2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce2d:	e8 50 53 ff ff       	call   c0012182 <createPartitionsForDisk(PhysicalDisk*)>
c001ce32:	31 c0                	xor    eax,eax
c001ce34:	83 c4 18             	add    esp,0x18
c001ce37:	5b                   	pop    ebx
c001ce38:	c3                   	ret    
c001ce39:	90                   	nop

c001ce3a <ATAPI::write(unsigned long long, int, void*)>:
c001ce3a:	b8 03 00 00 00       	mov    eax,0x3
c001ce3f:	c3                   	ret    

c001ce40 <ATAPI::close(int, int, void*)>:
c001ce40:	83 ec 0c             	sub    esp,0xc
c001ce43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce4d:	85 c0                	test   eax,eax
c001ce4f:	74 0c                	je     c001ce5d <ATAPI::close(int, int, void*)+0x1d>
c001ce51:	83 ec 0c             	sub    esp,0xc
c001ce54:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce56:	50                   	push   eax
c001ce57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce5a:	83 c4 10             	add    esp,0x10
c001ce5d:	31 c0                	xor    eax,eax
c001ce5f:	83 c4 0c             	add    esp,0xc
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <ATAPI::ATAPI()>:
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6b:	83 ec 04             	sub    esp,0x4
c001ce6e:	68 00 08 00 00       	push   0x800
c001ce73:	68 04 28 02 c0       	push   0xc0022804
c001ce78:	50                   	push   eax
c001ce79:	e8 8e 39 ff ff       	call   c001080c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	ba 44 28 02 c0       	mov    edx,0xc0022844
c001ce86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8a:	89 10                	mov    DWORD PTR [eax],edx
c001ce8c:	90                   	nop
c001ce8d:	83 c4 0c             	add    esp,0xc
c001ce90:	c3                   	ret    
c001ce91:	90                   	nop

c001ce92 <ATAPI::readyForCommand()>:
c001ce92:	56                   	push   esi
c001ce93:	53                   	push   ebx
c001ce94:	31 db                	xor    ebx,ebx
c001ce96:	50                   	push   eax
c001ce97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce9b:	50                   	push   eax
c001ce9c:	6a 0c                	push   0xc
c001ce9e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cea5:	50                   	push   eax
c001cea6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ceac:	e8 0b ee ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	a8 88                	test   al,0x88
c001ceb6:	74 23                	je     c001cedb <ATAPI::readyForCommand()+0x49>
c001ceb8:	43                   	inc    ebx
c001ceb9:	83 fb 63             	cmp    ebx,0x63
c001cebc:	7e dd                	jle    c001ce9b <ATAPI::readyForCommand()+0x9>
c001cebe:	51                   	push   ecx
c001cebf:	51                   	push   ecx
c001cec0:	6a 00                	push   0x0
c001cec2:	68 40 42 0f 00       	push   0xf4240
c001cec7:	e8 cd b3 ff ff       	call   c0018299 <nanoSleep(unsigned long long)>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ced5:	75 c4                	jne    c001ce9b <ATAPI::readyForCommand()+0x9>
c001ced7:	31 c0                	xor    eax,eax
c001ced9:	eb 02                	jmp    c001cedd <ATAPI::readyForCommand()+0x4b>
c001cedb:	b0 01                	mov    al,0x1
c001cedd:	5a                   	pop    edx
c001cede:	5b                   	pop    ebx
c001cedf:	5e                   	pop    esi
c001cee0:	c3                   	ret    
c001cee1:	90                   	nop

c001cee2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cee2:	55                   	push   ebp
c001cee3:	57                   	push   edi
c001cee4:	56                   	push   esi
c001cee5:	53                   	push   ebx
c001cee6:	83 ec 20             	sub    esp,0x20
c001cee9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ceed:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cef1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cef5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cef9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cefd:	6a 01                	push   0x1
c001ceff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf06:	50                   	push   eax
c001cf07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf0d:	e8 f6 ee ff ff       	call   c001be08 <IDE::enableIRQs(unsigned char, bool)>
c001cf12:	5e                   	pop    esi
c001cf13:	58                   	pop    eax
c001cf14:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf1b:	50                   	push   eax
c001cf1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf22:	e8 af ec ff ff       	call   c001bbd6 <IDE::prepareInterrupt(unsigned char)>
c001cf27:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf2a:	e8 63 ff ff ff       	call   c001ce92 <ATAPI::readyForCommand()>
c001cf2f:	83 c4 10             	add    esp,0x10
c001cf32:	84 c0                	test   al,al
c001cf34:	75 0a                	jne    c001cf40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cf36:	bb 01 00 00 00       	mov    ebx,0x1
c001cf3b:	e9 57 02 00 00       	jmp    c001d197 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf40:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cf46:	c1 e0 04             	shl    eax,0x4
c001cf49:	0f b6 c0             	movzx  eax,al
c001cf4c:	50                   	push   eax
c001cf4d:	6a 06                	push   0x6
c001cf4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf56:	50                   	push   eax
c001cf57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf5d:	e8 9a ec ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf62:	6a 00                	push   0x0
c001cf64:	6a 01                	push   0x1
c001cf66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf6d:	50                   	push   eax
c001cf6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf74:	e8 83 ec ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf79:	83 c4 20             	add    esp,0x20
c001cf7c:	0f b6 c3             	movzx  eax,bl
c001cf7f:	0f b6 df             	movzx  ebx,bh
c001cf82:	50                   	push   eax
c001cf83:	6a 04                	push   0x4
c001cf85:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf8c:	50                   	push   eax
c001cf8d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf93:	e8 64 ec ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf98:	53                   	push   ebx
c001cf99:	6a 05                	push   0x5
c001cf9b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfa2:	50                   	push   eax
c001cfa3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfa9:	e8 4e ec ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfae:	83 c4 20             	add    esp,0x20
c001cfb1:	68 a0 00 00 00       	push   0xa0
c001cfb6:	6a 07                	push   0x7
c001cfb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfbf:	50                   	push   eax
c001cfc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfc6:	e8 31 ec ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfcb:	83 c4 0c             	add    esp,0xc
c001cfce:	6a 01                	push   0x1
c001cfd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfd7:	50                   	push   eax
c001cfd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfde:	e8 c5 f7 ff ff       	call   c001c7a8 <IDE::polling(unsigned char, unsigned int)>
c001cfe3:	83 c4 10             	add    esp,0x10
c001cfe6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cfec:	84 c0                	test   al,al
c001cfee:	74 23                	je     c001d013 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cff0:	0f b6 d8             	movzx  ebx,al
c001cff3:	0f b6 d2             	movzx  edx,dl
c001cff6:	53                   	push   ebx
c001cff7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cffe:	50                   	push   eax
c001cfff:	52                   	push   edx
c001d000:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d006:	e8 07 f6 ff ff       	call   c001c612 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	e9 84 01 00 00       	jmp    c001d197 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d013:	0f b6 d2             	movzx  edx,dl
c001d016:	53                   	push   ebx
c001d017:	53                   	push   ebx
c001d018:	52                   	push   edx
c001d019:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d01f:	e8 c6 eb ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001d024:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d028:	b9 06 00 00 00       	mov    ecx,0x6
c001d02d:	89 c2                	mov    edx,eax
c001d02f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d032:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d036:	83 c4 10             	add    esp,0x10
c001d039:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d03f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d046:	85 db                	test   ebx,ebx
c001d048:	0f 84 ec 00 00 00    	je     c001d13a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d04e:	51                   	push   ecx
c001d04f:	51                   	push   ecx
c001d050:	52                   	push   edx
c001d051:	50                   	push   eax
c001d052:	e8 13 ed ff ff       	call   c001bd6a <IDE::waitInterrupt(unsigned char)>
c001d057:	83 c4 10             	add    esp,0x10
c001d05a:	84 c0                	test   al,al
c001d05c:	0f 84 d4 fe ff ff    	je     c001cf36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d062:	56                   	push   esi
c001d063:	56                   	push   esi
c001d064:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d06b:	50                   	push   eax
c001d06c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d072:	e8 5f eb ff ff       	call   c001bbd6 <IDE::prepareInterrupt(unsigned char)>
c001d077:	83 c4 0c             	add    esp,0xc
c001d07a:	6a 04                	push   0x4
c001d07c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d083:	50                   	push   eax
c001d084:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d08a:	e8 2d ec ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001d08f:	83 c4 0c             	add    esp,0xc
c001d092:	89 c6                	mov    esi,eax
c001d094:	6a 05                	push   0x5
c001d096:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d09d:	50                   	push   eax
c001d09e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a4:	e8 13 ec ff ff       	call   c001bcbc <IDE::read(unsigned char, unsigned char)>
c001d0a9:	89 f1                	mov    ecx,esi
c001d0ab:	0f b6 c0             	movzx  eax,al
c001d0ae:	0f b6 f1             	movzx  esi,cl
c001d0b1:	c1 e0 08             	shl    eax,0x8
c001d0b4:	09 c6                	or     esi,eax
c001d0b6:	d1 fe                	sar    esi,1
c001d0b8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d0c4:	74 41                	je     c001d107 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d0c6:	31 c9                	xor    ecx,ecx
c001d0c8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0ce:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0d5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d0d9:	75 0a                	jne    c001d0e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d0db:	01 c9                	add    ecx,ecx
c001d0dd:	01 cd                	add    ebp,ecx
c001d0df:	4b                   	dec    ebx
c001d0e0:	e9 54 ff ff ff       	jmp    c001d039 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d0e5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d0ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0ee:	51                   	push   ecx
c001d0ef:	51                   	push   ecx
c001d0f0:	52                   	push   edx
c001d0f1:	50                   	push   eax
c001d0f2:	e8 f3 ea ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001d0f7:	89 c2                	mov    edx,eax
c001d0f9:	89 f0                	mov    eax,esi
c001d0fb:	66 ef                	out    dx,ax
c001d0fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	41                   	inc    ecx
c001d105:	eb c1                	jmp    c001d0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d107:	31 f6                	xor    esi,esi
c001d109:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d10f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d116:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d11a:	75 06                	jne    c001d122 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d11c:	01 f6                	add    esi,esi
c001d11e:	01 f5                	add    ebp,esi
c001d120:	eb bd                	jmp    c001d0df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d122:	51                   	push   ecx
c001d123:	51                   	push   ecx
c001d124:	52                   	push   edx
c001d125:	50                   	push   eax
c001d126:	e8 bf ea ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001d12b:	89 c2                	mov    edx,eax
c001d12d:	66 ed                	in     ax,dx
c001d12f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	46                   	inc    esi
c001d138:	eb cf                	jmp    c001d109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d13a:	51                   	push   ecx
c001d13b:	51                   	push   ecx
c001d13c:	52                   	push   edx
c001d13d:	50                   	push   eax
c001d13e:	e8 27 ec ff ff       	call   c001bd6a <IDE::waitInterrupt(unsigned char)>
c001d143:	83 c4 10             	add    esp,0x10
c001d146:	84 c0                	test   al,al
c001d148:	0f 84 e8 fd ff ff    	je     c001cf36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d14e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d153:	52                   	push   edx
c001d154:	52                   	push   edx
c001d155:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d15c:	50                   	push   eax
c001d15d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d163:	e8 6e ea ff ff       	call   c001bbd6 <IDE::prepareInterrupt(unsigned char)>
c001d168:	83 c4 10             	add    esp,0x10
c001d16b:	50                   	push   eax
c001d16c:	50                   	push   eax
c001d16d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d174:	50                   	push   eax
c001d175:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17b:	e8 6a ea ff ff       	call   c001bbea <IDE::getBase(unsigned char)>
c001d180:	8d 50 07             	lea    edx,[eax+0x7]
c001d183:	ec                   	in     al,dx
c001d184:	83 c4 10             	add    esp,0x10
c001d187:	a8 88                	test   al,0x88
c001d189:	74 0a                	je     c001d195 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d18b:	4b                   	dec    ebx
c001d18c:	75 dd                	jne    c001d16b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d18e:	bb 02 00 00 00       	mov    ebx,0x2
c001d193:	eb 02                	jmp    c001d197 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d195:	31 db                	xor    ebx,ebx
c001d197:	83 c4 1c             	add    esp,0x1c
c001d19a:	89 d8                	mov    eax,ebx
c001d19c:	5b                   	pop    ebx
c001d19d:	5e                   	pop    esi
c001d19e:	5f                   	pop    edi
c001d19f:	5d                   	pop    ebp
c001d1a0:	c3                   	ret    
c001d1a1:	90                   	nop

c001d1a2 <ATAPI::diskRemoved()>:
c001d1a2:	83 ec 18             	sub    esp,0x18
c001d1a5:	68 0f 28 02 c0       	push   0xc002280f
c001d1aa:	e8 4c 1e ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001d1af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1b3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d1ba:	83 c4 1c             	add    esp,0x1c
c001d1bd:	c3                   	ret    

c001d1be <ATAPI::eject()>:
c001d1be:	57                   	push   edi
c001d1bf:	b9 03 00 00 00       	mov    ecx,0x3
c001d1c4:	53                   	push   ebx
c001d1c5:	83 ec 14             	sub    esp,0x14
c001d1c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d1d0:	fc                   	cld    
c001d1d1:	31 c0                	xor    eax,eax
c001d1d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1d5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d1da:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d1df:	50                   	push   eax
c001d1e0:	50                   	push   eax
c001d1e1:	6a 00                	push   0x0
c001d1e3:	6a 00                	push   0x0
c001d1e5:	6a 00                	push   0x0
c001d1e7:	6a 02                	push   0x2
c001d1e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1ed:	50                   	push   eax
c001d1ee:	53                   	push   ebx
c001d1ef:	e8 ee fc ff ff       	call   c001cee2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1f4:	83 c4 14             	add    esp,0x14
c001d1f7:	53                   	push   ebx
c001d1f8:	e8 a5 ff ff ff       	call   c001d1a2 <ATAPI::diskRemoved()>
c001d1fd:	83 c4 24             	add    esp,0x24
c001d200:	5b                   	pop    ebx
c001d201:	5f                   	pop    edi
c001d202:	c3                   	ret    
c001d203:	90                   	nop

c001d204 <ATAPI::diskInserted()>:
c001d204:	53                   	push   ebx
c001d205:	83 ec 14             	sub    esp,0x14
c001d208:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d20c:	68 25 28 02 c0       	push   0xc0022825
c001d211:	e8 e5 1d ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001d216:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d21d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d220:	e8 4f 36 ff ff       	call   c0010874 <PhysicalDisk::startCache()>
c001d225:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d229:	83 c4 18             	add    esp,0x18
c001d22c:	5b                   	pop    ebx
c001d22d:	e9 50 4f ff ff       	jmp    c0012182 <createPartitionsForDisk(PhysicalDisk*)>

c001d232 <ATAPI::detectMedia()>:
c001d232:	56                   	push   esi
c001d233:	53                   	push   ebx
c001d234:	83 ec 28             	sub    esp,0x28
c001d237:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d23b:	6a 0c                	push   0xc
c001d23d:	6a 00                	push   0x0
c001d23f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d243:	56                   	push   esi
c001d244:	e8 bf 33 fe ff       	call   c0000608 <memset>
c001d249:	58                   	pop    eax
c001d24a:	5a                   	pop    edx
c001d24b:	6a 00                	push   0x0
c001d24d:	6a 00                	push   0x0
c001d24f:	6a 00                	push   0x0
c001d251:	6a 00                	push   0x0
c001d253:	56                   	push   esi
c001d254:	53                   	push   ebx
c001d255:	e8 88 fc ff ff       	call   c001cee2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d25a:	83 c4 1c             	add    esp,0x1c
c001d25d:	6a 0c                	push   0xc
c001d25f:	6a 00                	push   0x0
c001d261:	56                   	push   esi
c001d262:	e8 a1 33 fe ff       	call   c0000608 <memset>
c001d267:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d26c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d271:	59                   	pop    ecx
c001d272:	58                   	pop    eax
c001d273:	6a 01                	push   0x1
c001d275:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d279:	50                   	push   eax
c001d27a:	6a 00                	push   0x0
c001d27c:	6a 12                	push   0x12
c001d27e:	56                   	push   esi
c001d27f:	53                   	push   ebx
c001d280:	e8 5d fc ff ff       	call   c001cee2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d285:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d289:	83 c4 20             	add    esp,0x20
c001d28c:	83 e0 7f             	and    eax,0x7f
c001d28f:	3c 70                	cmp    al,0x70
c001d291:	74 15                	je     c001d2a8 <ATAPI::detectMedia()+0x76>
c001d293:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d29a:	75 0c                	jne    c001d2a8 <ATAPI::detectMedia()+0x76>
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	53                   	push   ebx
c001d2a0:	e8 5f ff ff ff       	call   c001d204 <ATAPI::diskInserted()>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d2ac:	83 e0 0f             	and    eax,0xf
c001d2af:	3c 02                	cmp    al,0x2
c001d2b1:	75 1b                	jne    c001d2ce <ATAPI::detectMedia()+0x9c>
c001d2b3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d2b8:	75 2d                	jne    c001d2e7 <ATAPI::detectMedia()+0xb5>
c001d2ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2c1:	74 24                	je     c001d2e7 <ATAPI::detectMedia()+0xb5>
c001d2c3:	83 ec 0c             	sub    esp,0xc
c001d2c6:	53                   	push   ebx
c001d2c7:	e8 d6 fe ff ff       	call   c001d1a2 <ATAPI::diskRemoved()>
c001d2cc:	eb 16                	jmp    c001d2e4 <ATAPI::detectMedia()+0xb2>
c001d2ce:	84 c0                	test   al,al
c001d2d0:	75 15                	jne    c001d2e7 <ATAPI::detectMedia()+0xb5>
c001d2d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2d9:	75 0c                	jne    c001d2e7 <ATAPI::detectMedia()+0xb5>
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	53                   	push   ebx
c001d2df:	e8 20 ff ff ff       	call   c001d204 <ATAPI::diskInserted()>
c001d2e4:	83 c4 10             	add    esp,0x10
c001d2e7:	83 c4 24             	add    esp,0x24
c001d2ea:	5b                   	pop    ebx
c001d2eb:	5e                   	pop    esi
c001d2ec:	c3                   	ret    
c001d2ed:	90                   	nop

c001d2ee <ATAPI::open(int, int, void*)>:
c001d2ee:	53                   	push   ebx
c001d2ef:	83 ec 08             	sub    esp,0x8
c001d2f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2fe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d304:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d30a:	c1 e0 06             	shl    eax,0x6
c001d30d:	01 d0                	add    eax,edx
c001d30f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d316:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d31c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d323:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d32d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d333:	6a 04                	push   0x4
c001d335:	6a 0c                	push   0xc
c001d337:	51                   	push   ecx
c001d338:	52                   	push   edx
c001d339:	e8 be e8 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d33e:	90                   	nop
c001d33f:	90                   	nop
c001d340:	6a 00                	push   0x0
c001d342:	6a 0c                	push   0xc
c001d344:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d34b:	50                   	push   eax
c001d34c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d352:	e8 a5 e8 ff ff       	call   c001bbfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d357:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d35e:	83 c4 14             	add    esp,0x14
c001d361:	53                   	push   ebx
c001d362:	e8 cb fe ff ff       	call   c001d232 <ATAPI::detectMedia()>
c001d367:	31 c0                	xor    eax,eax
c001d369:	83 c4 18             	add    esp,0x18
c001d36c:	5b                   	pop    ebx
c001d36d:	c3                   	ret    

c001d36e <ATAPI::read(unsigned long long, int, void*)>:
c001d36e:	55                   	push   ebp
c001d36f:	57                   	push   edi
c001d370:	56                   	push   esi
c001d371:	53                   	push   ebx
c001d372:	83 ec 1c             	sub    esp,0x1c
c001d375:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d379:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d37d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d381:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d388:	74 41                	je     c001d3cb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d38a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d38e:	b9 03 00 00 00       	mov    ecx,0x3
c001d393:	fc                   	cld    
c001d394:	31 c0                	xor    eax,eax
c001d396:	86 fb                	xchg   bl,bh
c001d398:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d39a:	c1 c3 10             	rol    ebx,0x10
c001d39d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d3a2:	89 e8                	mov    eax,ebp
c001d3a4:	86 fb                	xchg   bl,bh
c001d3a6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d3aa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d3ae:	50                   	push   eax
c001d3af:	50                   	push   eax
c001d3b0:	55                   	push   ebp
c001d3b1:	c1 e5 0b             	shl    ebp,0xb
c001d3b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3b8:	6a 00                	push   0x0
c001d3ba:	55                   	push   ebp
c001d3bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3bf:	50                   	push   eax
c001d3c0:	56                   	push   esi
c001d3c1:	e8 1c fb ff ff       	call   c001cee2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3c6:	83 c4 20             	add    esp,0x20
c001d3c9:	eb 1a                	jmp    c001d3e5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d3cb:	83 ec 0c             	sub    esp,0xc
c001d3ce:	56                   	push   esi
c001d3cf:	e8 5e fe ff ff       	call   c001d232 <ATAPI::detectMedia()>
c001d3d4:	83 c4 10             	add    esp,0x10
c001d3d7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d3de:	75 aa                	jne    c001d38a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d3e0:	b8 02 00 00 00       	mov    eax,0x2
c001d3e5:	83 c4 1c             	add    esp,0x1c
c001d3e8:	5b                   	pop    ebx
c001d3e9:	5e                   	pop    esi
c001d3ea:	5f                   	pop    edi
c001d3eb:	5d                   	pop    ebp
c001d3ec:	c3                   	ret    
c001d3ed:	90                   	nop

c001d3ee <AVX::open(int, int, void*)>:
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	e8 12 10 00 00       	call   c001e408 <avxInit>
c001d3f6:	b8 00 00 00 00       	mov    eax,0x0
c001d3fb:	83 c4 0c             	add    esp,0xc
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <AVX::close(int, int, void*)>:
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	e8 01 10 00 00       	call   c001e409 <avxClose>
c001d408:	b8 00 00 00 00       	mov    eax,0x0
c001d40d:	83 c4 0c             	add    esp,0xc
c001d410:	c3                   	ret    
c001d411:	90                   	nop

c001d412 <AVX::available()>:
c001d412:	83 ec 0c             	sub    esp,0xc
c001d415:	e8 e6 0f 00 00       	call   c001e400 <avxDetect>
c001d41a:	85 c0                	test   eax,eax
c001d41c:	0f 95 c0             	setne  al
c001d41f:	83 c4 0c             	add    esp,0xc
c001d422:	c3                   	ret    
c001d423:	90                   	nop

c001d424 <AVX::save(void*)>:
c001d424:	83 ec 0c             	sub    esp,0xc
c001d427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d42b:	83 ec 0c             	sub    esp,0xc
c001d42e:	50                   	push   eax
c001d42f:	e8 d2 0f 00 00       	call   c001e406 <avxSave>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	90                   	nop
c001d438:	83 c4 0c             	add    esp,0xc
c001d43b:	c3                   	ret    

c001d43c <AVX::load(void*)>:
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d443:	83 ec 0c             	sub    esp,0xc
c001d446:	50                   	push   eax
c001d447:	e8 bb 0f 00 00       	call   c001e407 <avxLoad>
c001d44c:	83 c4 10             	add    esp,0x10
c001d44f:	90                   	nop
c001d450:	83 c4 0c             	add    esp,0xc
c001d453:	c3                   	ret    

c001d454 <AVX::AVX()>:
c001d454:	83 ec 0c             	sub    esp,0xc
c001d457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d45b:	83 ec 08             	sub    esp,0x8
c001d45e:	68 70 28 02 c0       	push   0xc0022870
c001d463:	50                   	push   eax
c001d464:	e8 81 34 ff ff       	call   c00108ea <FPU::FPU(char const*)>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	ba 80 28 02 c0       	mov    edx,0xc0022880
c001d471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d475:	89 10                	mov    DWORD PTR [eax],edx
c001d477:	90                   	nop
c001d478:	83 c4 0c             	add    esp,0xc
c001d47b:	c3                   	ret    

c001d47c <MMX::available()>:
c001d47c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001d481:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d487:	83 e0 20             	and    eax,0x20
c001d48a:	84 c0                	test   al,al
c001d48c:	0f 95 c0             	setne  al
c001d48f:	c3                   	ret    

c001d490 <MMX::open(int, int, void*)>:
c001d490:	83 ec 0c             	sub    esp,0xc
c001d493:	e8 e4 0f 00 00       	call   c001e47c <x87Init>
c001d498:	b8 00 00 00 00       	mov    eax,0x0
c001d49d:	83 c4 0c             	add    esp,0xc
c001d4a0:	c3                   	ret    
c001d4a1:	90                   	nop

c001d4a2 <MMX::close(int, int, void*)>:
c001d4a2:	83 ec 0c             	sub    esp,0xc
c001d4a5:	e8 ec 0f 00 00       	call   c001e496 <x87Close>
c001d4aa:	b8 00 00 00 00       	mov    eax,0x0
c001d4af:	83 c4 0c             	add    esp,0xc
c001d4b2:	c3                   	ret    
c001d4b3:	90                   	nop

c001d4b4 <MMX::save(void*)>:
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	50                   	push   eax
c001d4bf:	e8 ad 0f 00 00       	call   c001e471 <x87Save>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	90                   	nop
c001d4c8:	83 c4 0c             	add    esp,0xc
c001d4cb:	c3                   	ret    

c001d4cc <MMX::load(void*)>:
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	50                   	push   eax
c001d4d7:	e8 9b 0f 00 00       	call   c001e477 <x87Load>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	90                   	nop
c001d4e0:	83 c4 0c             	add    esp,0xc
c001d4e3:	c3                   	ret    

c001d4e4 <MMX::MMX()>:
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4eb:	83 ec 08             	sub    esp,0x8
c001d4ee:	68 b0 28 02 c0       	push   0xc00228b0
c001d4f3:	50                   	push   eax
c001d4f4:	e8 f1 33 ff ff       	call   c00108ea <FPU::FPU(char const*)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	ba c0 28 02 c0       	mov    edx,0xc00228c0
c001d501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d505:	89 10                	mov    DWORD PTR [eax],edx
c001d507:	90                   	nop
c001d508:	83 c4 0c             	add    esp,0xc
c001d50b:	c3                   	ret    

c001d50c <SSE::open(int, int, void*)>:
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	e8 23 0f 00 00       	call   c001e437 <sseInit>
c001d514:	b8 00 00 00 00       	mov    eax,0x0
c001d519:	83 c4 0c             	add    esp,0xc
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <SSE::close(int, int, void*)>:
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	e8 21 0f 00 00       	call   c001e447 <sseClose>
c001d526:	b8 00 00 00 00       	mov    eax,0x0
c001d52b:	83 c4 0c             	add    esp,0xc
c001d52e:	c3                   	ret    
c001d52f:	90                   	nop

c001d530 <SSE::available()>:
c001d530:	83 ec 1c             	sub    esp,0x1c
c001d533:	e8 d8 0e 00 00       	call   c001e410 <sseDetect>
c001d538:	85 c0                	test   eax,eax
c001d53a:	0f 95 c0             	setne  al
c001d53d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d541:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d545:	83 c4 1c             	add    esp,0x1c
c001d548:	c3                   	ret    
c001d549:	90                   	nop

c001d54a <SSE::save(void*)>:
c001d54a:	83 ec 0c             	sub    esp,0xc
c001d54d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	50                   	push   eax
c001d555:	e8 d1 0e 00 00       	call   c001e42b <sseSave>
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	90                   	nop
c001d55e:	83 c4 0c             	add    esp,0xc
c001d561:	c3                   	ret    

c001d562 <SSE::load(void*)>:
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	50                   	push   eax
c001d56d:	e8 bf 0e 00 00       	call   c001e431 <sseLoad>
c001d572:	83 c4 10             	add    esp,0x10
c001d575:	90                   	nop
c001d576:	83 c4 0c             	add    esp,0xc
c001d579:	c3                   	ret    

c001d57a <SSE::SSE()>:
c001d57a:	83 ec 0c             	sub    esp,0xc
c001d57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d581:	83 ec 08             	sub    esp,0x8
c001d584:	68 f0 28 02 c0       	push   0xc00228f0
c001d589:	50                   	push   eax
c001d58a:	e8 5b 33 ff ff       	call   c00108ea <FPU::FPU(char const*)>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	ba 00 29 02 c0       	mov    edx,0xc0022900
c001d597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59b:	89 10                	mov    DWORD PTR [eax],edx
c001d59d:	90                   	nop
c001d59e:	83 c4 0c             	add    esp,0xc
c001d5a1:	c3                   	ret    

c001d5a2 <x87::open(int, int, void*)>:
c001d5a2:	83 ec 0c             	sub    esp,0xc
c001d5a5:	e8 d2 0e 00 00       	call   c001e47c <x87Init>
c001d5aa:	b8 00 00 00 00       	mov    eax,0x0
c001d5af:	83 c4 0c             	add    esp,0xc
c001d5b2:	c3                   	ret    
c001d5b3:	90                   	nop

c001d5b4 <x87::close(int, int, void*)>:
c001d5b4:	83 ec 0c             	sub    esp,0xc
c001d5b7:	e8 da 0e 00 00       	call   c001e496 <x87Close>
c001d5bc:	b8 00 00 00 00       	mov    eax,0x0
c001d5c1:	83 c4 0c             	add    esp,0xc
c001d5c4:	c3                   	ret    
c001d5c5:	90                   	nop

c001d5c6 <x87::available()>:
c001d5c6:	83 ec 0c             	sub    esp,0xc
c001d5c9:	e8 88 0e 00 00       	call   c001e456 <x87Detect>
c001d5ce:	85 c0                	test   eax,eax
c001d5d0:	0f 95 c0             	setne  al
c001d5d3:	83 c4 0c             	add    esp,0xc
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <x87::save(void*)>:
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5df:	83 ec 0c             	sub    esp,0xc
c001d5e2:	50                   	push   eax
c001d5e3:	e8 89 0e 00 00       	call   c001e471 <x87Save>
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	90                   	nop
c001d5ec:	83 c4 0c             	add    esp,0xc
c001d5ef:	c3                   	ret    

c001d5f0 <x87::load(void*)>:
c001d5f0:	83 ec 0c             	sub    esp,0xc
c001d5f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5f7:	83 ec 0c             	sub    esp,0xc
c001d5fa:	50                   	push   eax
c001d5fb:	e8 77 0e 00 00       	call   c001e477 <x87Load>
c001d600:	83 c4 10             	add    esp,0x10
c001d603:	90                   	nop
c001d604:	83 c4 0c             	add    esp,0xc
c001d607:	c3                   	ret    

c001d608 <x87::x87()>:
c001d608:	83 ec 0c             	sub    esp,0xc
c001d60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60f:	83 ec 08             	sub    esp,0x8
c001d612:	68 30 29 02 c0       	push   0xc0022930
c001d617:	50                   	push   eax
c001d618:	e8 cd 32 ff ff       	call   c00108ea <FPU::FPU(char const*)>
c001d61d:	83 c4 10             	add    esp,0x10
c001d620:	ba 40 29 02 c0       	mov    edx,0xc0022940
c001d625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d629:	89 10                	mov    DWORD PTR [eax],edx
c001d62b:	90                   	nop
c001d62c:	83 c4 0c             	add    esp,0xc
c001d62f:	c3                   	ret    

c001d630 <APIC::disable()>:
c001d630:	90                   	nop
c001d631:	c3                   	ret    

c001d632 <APIC::close(int, int, void*)>:
c001d632:	55                   	push   ebp
c001d633:	89 e5                	mov    ebp,esp
c001d635:	83 ec 08             	sub    esp,0x8
c001d638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d63b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d63d:	83 c0 3c             	add    eax,0x3c
c001d640:	8b 00                	mov    eax,DWORD PTR [eax]
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d648:	ff d0                	call   eax
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	b8 00 00 00 00       	mov    eax,0x0
c001d652:	c9                   	leave  
c001d653:	c3                   	ret    

c001d654 <IOAPIC::close(int, int, void*)>:
c001d654:	b8 00 00 00 00       	mov    eax,0x0
c001d659:	c3                   	ret    

c001d65a <APIC::io_wait()>:
c001d65a:	eb 00                	jmp    c001d65c <APIC::io_wait()+0x2>
c001d65c:	eb 00                	jmp    c001d65e <APIC::io_wait()+0x4>
c001d65e:	90                   	nop
c001d65f:	c3                   	ret    

c001d660 <APIC::getBase()>:
c001d660:	55                   	push   ebp
c001d661:	89 e5                	mov    ebp,esp
c001d663:	83 ec 18             	sub    esp,0x18
c001d666:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001d66b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d671:	83 e0 08             	and    eax,0x8
c001d674:	84 c0                	test   al,al
c001d676:	75 07                	jne    c001d67f <APIC::getBase()+0x1f>
c001d678:	b8 00 00 00 00       	mov    eax,0x0
c001d67d:	eb 21                	jmp    c001d6a0 <APIC::getBase()+0x40>
c001d67f:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001d684:	83 ec 08             	sub    esp,0x8
c001d687:	6a 1b                	push   0x1b
c001d689:	50                   	push   eax
c001d68a:	e8 37 db fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d68f:	83 c4 10             	add    esp,0x10
c001d692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d695:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d698:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d69b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d6a0:	c9                   	leave  
c001d6a1:	c3                   	ret    

c001d6a2 <APIC::eoi(unsigned char)>:
c001d6a2:	55                   	push   ebp
c001d6a3:	89 e5                	mov    ebp,esp
c001d6a5:	83 ec 28             	sub    esp,0x28
c001d6a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d6ae:	83 ec 0c             	sub    esp,0xc
c001d6b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6b4:	e8 a7 ff ff ff       	call   c001d660 <APIC::getBase()>
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	05 b0 00 00 00       	add    eax,0xb0
c001d6c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d6c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d6c7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d6cd:	90                   	nop
c001d6ce:	c9                   	leave  
c001d6cf:	c3                   	ret    

c001d6d0 <APIC::open(int, int, void*)>:
c001d6d0:	55                   	push   ebp
c001d6d1:	89 e5                	mov    ebp,esp
c001d6d3:	57                   	push   edi
c001d6d4:	56                   	push   esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 1c             	sub    esp,0x1c
c001d6d9:	83 ec 0c             	sub    esp,0xc
c001d6dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6df:	e8 7c ff ff ff       	call   c001d660 <APIC::getBase()>
c001d6e4:	83 c4 10             	add    esp,0x10
c001d6e7:	05 f0 00 00 00       	add    eax,0xf0
c001d6ec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6ef:	83 ec 0c             	sub    esp,0xc
c001d6f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6f5:	e8 66 ff ff ff       	call   c001d660 <APIC::getBase()>
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	89 c2                	mov    edx,eax
c001d6ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d702:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d708:	0f b6 f8             	movzx  edi,al
c001d70b:	89 d0                	mov    eax,edx
c001d70d:	ba 00 00 00 00       	mov    edx,0x0
c001d712:	89 c1                	mov    ecx,eax
c001d714:	80 e5 ff             	and    ch,0xff
c001d717:	89 cb                	mov    ebx,ecx
c001d719:	0f b6 f2             	movzx  esi,dl
c001d71c:	89 d8                	mov    eax,ebx
c001d71e:	89 f2                	mov    edx,esi
c001d720:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d723:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d726:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d72a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d72e:	83 e0 00             	and    eax,0x0
c001d731:	09 d0                	or     eax,edx
c001d733:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d73a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d740:	8d 50 01             	lea    edx,[eax+0x1]
c001d743:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d746:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d74c:	0f b6 d0             	movzx  edx,al
c001d74f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d752:	83 c2 08             	add    edx,0x8
c001d755:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d759:	0f b6 c9             	movzx  ecx,cl
c001d75c:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d762:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d766:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d769:	8b 00                	mov    eax,DWORD PTR [eax]
c001d76b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d76e:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d775:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d778:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d77b:	89 10                	mov    DWORD PTR [eax],edx
c001d77d:	b8 00 00 00 00       	mov    eax,0x0
c001d782:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d785:	5b                   	pop    ebx
c001d786:	5e                   	pop    esi
c001d787:	5f                   	pop    edi
c001d788:	5d                   	pop    ebp
c001d789:	c3                   	ret    

c001d78a <IOAPIC::IOAPIC()>:
c001d78a:	83 ec 0c             	sub    esp,0xc
c001d78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d791:	83 ec 08             	sub    esp,0x8
c001d794:	68 70 29 02 c0       	push   0xc0022970
c001d799:	50                   	push   eax
c001d79a:	e8 57 2e ff ff       	call   c00105f6 <Device::Device(char const*)>
c001d79f:	83 c4 10             	add    esp,0x10
c001d7a2:	ba 98 2a 02 c0       	mov    edx,0xc0022a98
c001d7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ab:	89 10                	mov    DWORD PTR [eax],edx
c001d7ad:	90                   	nop
c001d7ae:	83 c4 0c             	add    esp,0xc
c001d7b1:	c3                   	ret    

c001d7b2 <APIC::APIC()>:
c001d7b2:	53                   	push   ebx
c001d7b3:	83 ec 18             	sub    esp,0x18
c001d7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7ba:	83 ec 08             	sub    esp,0x8
c001d7bd:	68 78 29 02 c0       	push   0xc0022978
c001d7c2:	50                   	push   eax
c001d7c3:	e8 70 35 ff ff       	call   c0010d38 <InterruptController::InterruptController(char const*)>
c001d7c8:	83 c4 10             	add    esp,0x10
c001d7cb:	ba 50 2a 02 c0       	mov    edx,0xc0022a50
c001d7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d4:	89 10                	mov    DWORD PTR [eax],edx
c001d7d6:	a0 80 55 02 c0       	mov    al,ds:0xc0025580
c001d7db:	83 f0 01             	xor    eax,0x1
c001d7de:	84 c0                	test   al,al
c001d7e0:	0f 84 96 00 00 00    	je     c001d87c <APIC::APIC()+0xca>
c001d7e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d7eb:	a0 30 40 02 c0       	mov    al,ds:0xc0024030
c001d7f0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d7f4:	73 7f                	jae    c001d875 <APIC::APIC()+0xc3>
c001d7f6:	83 ec 0c             	sub    esp,0xc
c001d7f9:	68 68 01 00 00       	push   0x168
c001d7fe:	e8 09 17 ff ff       	call   c000ef0c <operator new(unsigned long)>
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	89 c3                	mov    ebx,eax
c001d808:	83 ec 0c             	sub    esp,0xc
c001d80b:	53                   	push   ebx
c001d80c:	e8 79 ff ff ff       	call   c001d78a <IOAPIC::IOAPIC()>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d818:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d81d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d821:	89 14 85 60 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaaa0],edx
c001d828:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c001d82d:	40                   	inc    eax
c001d82e:	a3 40 55 02 c0       	mov    ds:0xc0025540,eax
c001d833:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001d838:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d83e:	83 ec 08             	sub    esp,0x8
c001d841:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d845:	50                   	push   eax
c001d846:	e8 bb 2b ff ff       	call   c0010406 <Device::addChild(Device*)>
c001d84b:	83 c4 10             	add    esp,0x10
c001d84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d852:	8b 00                	mov    eax,DWORD PTR [eax]
c001d854:	83 c0 08             	add    eax,0x8
c001d857:	8b 00                	mov    eax,DWORD PTR [eax]
c001d859:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d85e:	6a 00                	push   0x0
c001d860:	6a 00                	push   0x0
c001d862:	52                   	push   edx
c001d863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d867:	ff d0                	call   eax
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d870:	e9 76 ff ff ff       	jmp    c001d7eb <APIC::APIC()+0x39>
c001d875:	c6 05 80 55 02 c0 01 	mov    BYTE PTR ds:0xc0025580,0x1
c001d87c:	90                   	nop
c001d87d:	83 c4 18             	add    esp,0x18
c001d880:	5b                   	pop    ebx
c001d881:	c3                   	ret    

c001d882 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d882:	55                   	push   ebp
c001d883:	89 e5                	mov    ebp,esp
c001d885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d88e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d891:	72 1d                	jb     c001d8b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d896:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d89c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d89f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d8a5:	01 d0                	add    eax,edx
c001d8a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d8aa:	73 04                	jae    c001d8b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d8ac:	b0 01                	mov    al,0x1
c001d8ae:	eb 02                	jmp    c001d8b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d8b0:	b0 00                	mov    al,0x0
c001d8b2:	5d                   	pop    ebp
c001d8b3:	c3                   	ret    

c001d8b4 <IOAPIC::read(int)>:
c001d8b4:	55                   	push   ebp
c001d8b5:	89 e5                	mov    ebp,esp
c001d8b7:	83 ec 10             	sub    esp,0x10
c001d8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8c9:	0f b6 d0             	movzx  edx,al
c001d8cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8cf:	89 10                	mov    DWORD PTR [eax],edx
c001d8d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8d4:	83 c0 10             	add    eax,0x10
c001d8d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8d9:	c9                   	leave  
c001d8da:	c3                   	ret    
c001d8db:	90                   	nop

c001d8dc <IOAPIC::open(int, int, void*)>:
c001d8dc:	55                   	push   ebp
c001d8dd:	89 e5                	mov    ebp,esp
c001d8df:	57                   	push   edi
c001d8e0:	56                   	push   esi
c001d8e1:	53                   	push   ebx
c001d8e2:	83 ec 0c             	sub    esp,0xc
c001d8e5:	83 ec 0c             	sub    esp,0xc
c001d8e8:	68 a3 29 02 c0       	push   0xc00229a3
c001d8ed:	e8 09 17 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d8fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d904:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d90a:	8b 14 85 60 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfa0]
c001d911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d914:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d91a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d923:	8b 14 85 e0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf20]
c001d92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d92d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d936:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d93f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d945:	0f b6 f8             	movzx  edi,al
c001d948:	89 d0                	mov    eax,edx
c001d94a:	ba 00 00 00 00       	mov    edx,0x0
c001d94f:	89 c1                	mov    ecx,eax
c001d951:	80 e5 ff             	and    ch,0xff
c001d954:	89 cb                	mov    ebx,ecx
c001d956:	0f b6 f2             	movzx  esi,dl
c001d959:	89 d8                	mov    eax,ebx
c001d95b:	89 f2                	mov    edx,esi
c001d95d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d960:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d963:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d967:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d96b:	83 e0 00             	and    eax,0x0
c001d96e:	09 d0                	or     eax,edx
c001d970:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d977:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d97d:	8d 50 01             	lea    edx,[eax+0x1]
c001d980:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d983:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d989:	0f b6 d0             	movzx  edx,al
c001d98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d98f:	83 c2 08             	add    edx,0x8
c001d992:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d996:	0f b6 c9             	movzx  ecx,cl
c001d999:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d99f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d9a3:	83 ec 08             	sub    esp,0x8
c001d9a6:	6a 01                	push   0x1
c001d9a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ab:	e8 04 ff ff ff       	call   c001d8b4 <IOAPIC::read(int)>
c001d9b0:	83 c4 10             	add    esp,0x10
c001d9b3:	c1 f8 10             	sar    eax,0x10
c001d9b6:	0f b6 c0             	movzx  eax,al
c001d9b9:	8d 50 01             	lea    edx,[eax+0x1]
c001d9bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d9c5:	b8 00 00 00 00       	mov    eax,0x0
c001d9ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d9cd:	5b                   	pop    ebx
c001d9ce:	5e                   	pop    esi
c001d9cf:	5f                   	pop    edi
c001d9d0:	5d                   	pop    ebp
c001d9d1:	c3                   	ret    

c001d9d2 <IOAPIC::write(int, int)>:
c001d9d2:	55                   	push   ebp
c001d9d3:	89 e5                	mov    ebp,esp
c001d9d5:	83 ec 10             	sub    esp,0x10
c001d9d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9e7:	0f b6 d0             	movzx  edx,al
c001d9ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9ed:	89 10                	mov    DWORD PTR [eax],edx
c001d9ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9f2:	8d 50 10             	lea    edx,[eax+0x10]
c001d9f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9f8:	89 02                	mov    DWORD PTR [edx],eax
c001d9fa:	90                   	nop
c001d9fb:	c9                   	leave  
c001d9fc:	c3                   	ret    
c001d9fd:	90                   	nop

c001d9fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d9fe:	55                   	push   ebp
c001d9ff:	89 e5                	mov    ebp,esp
c001da01:	83 ec 20             	sub    esp,0x20
c001da04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da07:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001da0a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001da0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001da10:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001da13:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da16:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001da19:	88 d0                	mov    al,dl
c001da1b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001da1e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da22:	83 c0 08             	add    eax,0x8
c001da25:	01 c0                	add    eax,eax
c001da27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da2a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da2e:	83 c0 08             	add    eax,0x8
c001da31:	01 c0                	add    eax,eax
c001da33:	40                   	inc    eax
c001da34:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001da37:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da3a:	50                   	push   eax
c001da3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da3e:	e8 71 fe ff ff       	call   c001d8b4 <IOAPIC::read(int)>
c001da43:	83 c4 08             	add    esp,0x8
c001da46:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da49:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da50:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da53:	c1 e0 18             	shl    eax,0x18
c001da56:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da59:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da5c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da5f:	52                   	push   edx
c001da60:	50                   	push   eax
c001da61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da64:	e8 69 ff ff ff       	call   c001d9d2 <IOAPIC::write(int, int)>
c001da69:	83 c4 0c             	add    esp,0xc
c001da6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da6f:	50                   	push   eax
c001da70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da73:	e8 3c fe ff ff       	call   c001d8b4 <IOAPIC::read(int)>
c001da78:	83 c4 08             	add    esp,0x8
c001da7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da7e:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da85:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da8c:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da93:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da9a:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da9e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001daa1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001daa4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001daa7:	52                   	push   edx
c001daa8:	50                   	push   eax
c001daa9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daac:	e8 21 ff ff ff       	call   c001d9d2 <IOAPIC::write(int, int)>
c001dab1:	83 c4 0c             	add    esp,0xc
c001dab4:	90                   	nop
c001dab5:	c9                   	leave  
c001dab6:	c3                   	ret    
c001dab7:	90                   	nop

c001dab8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001dab8:	55                   	push   ebp
c001dab9:	89 e5                	mov    ebp,esp
c001dabb:	56                   	push   esi
c001dabc:	53                   	push   ebx
c001dabd:	83 ec 20             	sub    esp,0x20
c001dac0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dac3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dac6:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001daca:	74 28                	je     c001daf4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001dacc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001dad0:	7f 12                	jg     c001dae4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001dad2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dad5:	05 e0 2e 02 c0       	add    eax,0xc0022ee0
c001dada:	8a 00                	mov    al,BYTE PTR [eax]
c001dadc:	0f b6 c0             	movzx  eax,al
c001dadf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001dae2:	eb 10                	jmp    c001daf4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001dae4:	83 ec 0c             	sub    esp,0xc
c001dae7:	68 b4 29 02 c0       	push   0xc00229b4
c001daec:	e8 9f 71 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001daf1:	83 c4 10             	add    esp,0x10
c001daf4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001daf8:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c001dafd:	83 ec 08             	sub    esp,0x8
c001db00:	50                   	push   eax
c001db01:	68 ec 29 02 c0       	push   0xc00229ec
c001db06:	e8 f0 14 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001db15:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c001db1a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001db1d:	7d 58                	jge    c001db77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db22:	8b 04 85 60 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaaa0]
c001db29:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db2c:	83 ec 08             	sub    esp,0x8
c001db2f:	52                   	push   edx
c001db30:	50                   	push   eax
c001db31:	e8 4c fd ff ff       	call   c001d882 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001db36:	83 c4 10             	add    esp,0x10
c001db39:	84 c0                	test   al,al
c001db3b:	74 35                	je     c001db72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001db3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db40:	8b 1c 85 60 55 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdaaa0]
c001db47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db4a:	83 c0 20             	add    eax,0x20
c001db4d:	0f b6 f0             	movzx  esi,al
c001db50:	e8 32 64 ff ff       	call   c0013f87 <getCPUNumber()>
c001db55:	99                   	cdq    
c001db56:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db59:	0f b6 c9             	movzx  ecx,cl
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	56                   	push   esi
c001db60:	52                   	push   edx
c001db61:	50                   	push   eax
c001db62:	51                   	push   ecx
c001db63:	53                   	push   ebx
c001db64:	e8 95 fe ff ff       	call   c001d9fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db69:	83 c4 20             	add    esp,0x20
c001db6c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db70:	eb 05                	jmp    c001db77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db72:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db75:	eb 9e                	jmp    c001db15 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db77:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db7a:	83 f0 01             	xor    eax,0x1
c001db7d:	84 c0                	test   al,al
c001db7f:	74 10                	je     c001db91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db81:	83 ec 0c             	sub    esp,0xc
c001db84:	68 03 2a 02 c0       	push   0xc0022a03
c001db89:	e8 02 71 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db95:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db9c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001dba0:	7f 65                	jg     c001dc07 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001dba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dba5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dba8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbaf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbb2:	01 ca                	add    edx,ecx
c001dbb4:	83 c2 54             	add    edx,0x54
c001dbb7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001dbbb:	85 c0                	test   eax,eax
c001dbbd:	75 43                	jne    c001dc02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001dbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbc2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbcc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbcf:	01 ca                	add    edx,ecx
c001dbd1:	8d 4a 54             	lea    ecx,[edx+0x54]
c001dbd4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001dbd7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbde:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbe1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbe8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbeb:	01 ca                	add    edx,ecx
c001dbed:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dbf3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dbf6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbfd:	83 e8 20             	sub    eax,0x20
c001dc00:	eb 1a                	jmp    c001dc1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dc02:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dc05:	eb 95                	jmp    c001db9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dc07:	83 ec 0c             	sub    esp,0xc
c001dc0a:	68 10 2a 02 c0       	push   0xc0022a10
c001dc0f:	e8 7c 70 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001dc14:	83 c4 10             	add    esp,0x10
c001dc17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dc1c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dc1f:	5b                   	pop    ebx
c001dc20:	5e                   	pop    esi
c001dc21:	5d                   	pop    ebp
c001dc22:	c3                   	ret    
c001dc23:	90                   	nop

c001dc24 <PIC::disable()>:
c001dc24:	55                   	push   ebp
c001dc25:	89 e5                	mov    ebp,esp
c001dc27:	83 ec 10             	sub    esp,0x10
c001dc2a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dc30:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dc34:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc37:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dc3b:	ee                   	out    dx,al
c001dc3c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dc42:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dc46:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc49:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc4d:	ee                   	out    dx,al
c001dc4e:	90                   	nop
c001dc4f:	c9                   	leave  
c001dc50:	c3                   	ret    
c001dc51:	90                   	nop

c001dc52 <PIC::close(int, int, void*)>:
c001dc52:	55                   	push   ebp
c001dc53:	89 e5                	mov    ebp,esp
c001dc55:	83 ec 08             	sub    esp,0x8
c001dc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc5d:	83 c0 3c             	add    eax,0x3c
c001dc60:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc62:	83 ec 0c             	sub    esp,0xc
c001dc65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc68:	ff d0                	call   eax
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	b8 00 00 00 00       	mov    eax,0x0
c001dc72:	c9                   	leave  
c001dc73:	c3                   	ret    

c001dc74 <PIC::PIC()>:
c001dc74:	83 ec 0c             	sub    esp,0xc
c001dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7b:	83 ec 08             	sub    esp,0x8
c001dc7e:	68 bc 2a 02 c0       	push   0xc0022abc
c001dc83:	50                   	push   eax
c001dc84:	e8 af 30 ff ff       	call   c0010d38 <InterruptController::InterruptController(char const*)>
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	ba e8 2a 02 c0       	mov    edx,0xc0022ae8
c001dc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc95:	89 10                	mov    DWORD PTR [eax],edx
c001dc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dca1:	0f b6 d0             	movzx  edx,al
c001dca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dcaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcb9:	0f b6 d0             	movzx  edx,al
c001dcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dccf:	8d 50 01             	lea    edx,[eax+0x1]
c001dcd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcd6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcdc:	0f b6 d0             	movzx  edx,al
c001dcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dce7:	83 e1 3f             	and    ecx,0x3f
c001dcea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcf8:	0f b6 d0             	movzx  edx,al
c001dcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcff:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd10:	0f b6 d0             	movzx  edx,al
c001dd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd26:	8d 50 01             	lea    edx,[eax+0x1]
c001dd29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd33:	0f b6 d0             	movzx  edx,al
c001dd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd3e:	83 e1 3f             	and    ecx,0x3f
c001dd41:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd45:	90                   	nop
c001dd46:	83 c4 0c             	add    esp,0xc
c001dd49:	c3                   	ret    

c001dd4a <PIC::ioWait()>:
c001dd4a:	eb 00                	jmp    c001dd4c <PIC::ioWait()+0x2>
c001dd4c:	eb 00                	jmp    c001dd4e <PIC::ioWait()+0x4>
c001dd4e:	90                   	nop
c001dd4f:	c3                   	ret    

c001dd50 <PIC::getIRQReg(int)>:
c001dd50:	55                   	push   ebp
c001dd51:	89 e5                	mov    ebp,esp
c001dd53:	83 ec 10             	sub    esp,0x10
c001dd56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd59:	0f b6 c0             	movzx  eax,al
c001dd5c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd62:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd65:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd68:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd6c:	ee                   	out    dx,al
c001dd6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd70:	0f b6 c0             	movzx  eax,al
c001dd73:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd79:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd7c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd7f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd83:	ee                   	out    dx,al
c001dd84:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd8a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd8e:	89 c2                	mov    edx,eax
c001dd90:	ec                   	in     al,dx
c001dd91:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd94:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd97:	0f b6 c0             	movzx  eax,al
c001dd9a:	c1 e0 08             	shl    eax,0x8
c001dd9d:	89 c1                	mov    ecx,eax
c001dd9f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dda5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dda9:	89 c2                	mov    edx,eax
c001ddab:	ec                   	in     al,dx
c001ddac:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001ddaf:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001ddb2:	0f b6 c0             	movzx  eax,al
c001ddb5:	09 c8                	or     eax,ecx
c001ddb7:	c9                   	leave  
c001ddb8:	c3                   	ret    
c001ddb9:	90                   	nop

c001ddba <PIC::eoi(unsigned char)>:
c001ddba:	55                   	push   ebp
c001ddbb:	89 e5                	mov    ebp,esp
c001ddbd:	83 ec 14             	sub    esp,0x14
c001ddc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ddc3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001ddc6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddca:	75 1e                	jne    c001ddea <PIC::eoi(unsigned char)+0x30>
c001ddcc:	6a 0b                	push   0xb
c001ddce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddd1:	e8 7a ff ff ff       	call   c001dd50 <PIC::getIRQReg(int)>
c001ddd6:	83 c4 08             	add    esp,0x8
c001ddd9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dddd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dde1:	25 80 00 00 00       	and    eax,0x80
c001dde6:	85 c0                	test   eax,eax
c001dde8:	74 5f                	je     c001de49 <PIC::eoi(unsigned char)+0x8f>
c001ddea:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ddee:	75 2d                	jne    c001de1d <PIC::eoi(unsigned char)+0x63>
c001ddf0:	6a 0b                	push   0xb
c001ddf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddf5:	e8 56 ff ff ff       	call   c001dd50 <PIC::getIRQReg(int)>
c001ddfa:	83 c4 08             	add    esp,0x8
c001ddfd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001de01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de04:	66 85 c0             	test   ax,ax
c001de07:	78 14                	js     c001de1d <PIC::eoi(unsigned char)+0x63>
c001de09:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001de0f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001de13:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001de16:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001de1a:	ee                   	out    dx,al
c001de1b:	eb 2d                	jmp    c001de4a <PIC::eoi(unsigned char)+0x90>
c001de1d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001de21:	76 12                	jbe    c001de35 <PIC::eoi(unsigned char)+0x7b>
c001de23:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001de29:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001de2d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de30:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de34:	ee                   	out    dx,al
c001de35:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001de3b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001de3f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de42:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de46:	ee                   	out    dx,al
c001de47:	eb 01                	jmp    c001de4a <PIC::eoi(unsigned char)+0x90>
c001de49:	90                   	nop
c001de4a:	c9                   	leave  
c001de4b:	c3                   	ret    

c001de4c <PIC::remap()>:
c001de4c:	55                   	push   ebp
c001de4d:	89 e5                	mov    ebp,esp
c001de4f:	83 ec 48             	sub    esp,0x48
c001de52:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de59:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de60:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de66:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de69:	89 c2                	mov    edx,eax
c001de6b:	ec                   	in     al,dx
c001de6c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de6f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de72:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de75:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de7b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de7e:	89 c2                	mov    edx,eax
c001de80:	ec                   	in     al,dx
c001de81:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de84:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de87:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de8a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de90:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de94:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de97:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de9a:	ee                   	out    dx,al
c001de9b:	83 ec 0c             	sub    esp,0xc
c001de9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dea1:	e8 a4 fe ff ff       	call   c001dd4a <PIC::ioWait()>
c001dea6:	83 c4 10             	add    esp,0x10
c001dea9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001deaf:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001deb3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001deb6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001deb9:	ee                   	out    dx,al
c001deba:	83 ec 0c             	sub    esp,0xc
c001debd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dec0:	e8 85 fe ff ff       	call   c001dd4a <PIC::ioWait()>
c001dec5:	83 c4 10             	add    esp,0x10
c001dec8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001decb:	0f b6 c0             	movzx  eax,al
c001dece:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ded4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ded7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001deda:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001dedd:	ee                   	out    dx,al
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee4:	e8 61 fe ff ff       	call   c001dd4a <PIC::ioWait()>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001deef:	0f b6 c0             	movzx  eax,al
c001def2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001def8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001defb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001defe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001df01:	ee                   	out    dx,al
c001df02:	83 ec 0c             	sub    esp,0xc
c001df05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df08:	e8 3d fe ff ff       	call   c001dd4a <PIC::ioWait()>
c001df0d:	83 c4 10             	add    esp,0x10
c001df10:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001df16:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001df1a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001df1d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001df20:	ee                   	out    dx,al
c001df21:	83 ec 0c             	sub    esp,0xc
c001df24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df27:	e8 1e fe ff ff       	call   c001dd4a <PIC::ioWait()>
c001df2c:	83 c4 10             	add    esp,0x10
c001df2f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001df35:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001df39:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001df3c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001df3f:	ee                   	out    dx,al
c001df40:	83 ec 0c             	sub    esp,0xc
c001df43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df46:	e8 ff fd ff ff       	call   c001dd4a <PIC::ioWait()>
c001df4b:	83 c4 10             	add    esp,0x10
c001df4e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df54:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df58:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df5e:	ee                   	out    dx,al
c001df5f:	83 ec 0c             	sub    esp,0xc
c001df62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df65:	e8 e0 fd ff ff       	call   c001dd4a <PIC::ioWait()>
c001df6a:	83 c4 10             	add    esp,0x10
c001df6d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df73:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df77:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df7a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df7d:	ee                   	out    dx,al
c001df7e:	83 ec 0c             	sub    esp,0xc
c001df81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df84:	e8 c1 fd ff ff       	call   c001dd4a <PIC::ioWait()>
c001df89:	83 c4 10             	add    esp,0x10
c001df8c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df90:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df96:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df99:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df9c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df9f:	ee                   	out    dx,al
c001dfa0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dfa4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dfaa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dfad:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dfb0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dfb3:	ee                   	out    dx,al
c001dfb4:	90                   	nop
c001dfb5:	c9                   	leave  
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop

c001dfb8 <PIC::open(int, int, void*)>:
c001dfb8:	55                   	push   ebp
c001dfb9:	89 e5                	mov    ebp,esp
c001dfbb:	83 ec 18             	sub    esp,0x18
c001dfbe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dfc4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dfc8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dfcb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dfcf:	ee                   	out    dx,al
c001dfd0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dfd6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dfda:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dfdd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dfe1:	ee                   	out    dx,al
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfe8:	e8 5f fe ff ff       	call   c001de4c <PIC::remap()>
c001dfed:	83 c4 10             	add    esp,0x10
c001dff0:	b8 00 00 00 00       	mov    eax,0x0
c001dff5:	c9                   	leave  
c001dff6:	c3                   	ret    
c001dff7:	90                   	nop

c001dff8 <APICTimer::close(int, int, void*)>:
c001dff8:	b8 00 00 00 00       	mov    eax,0x0
c001dffd:	c3                   	ret    

c001dffe <apicTimerHandler(regs*, void*)>:
c001dffe:	83 ec 0c             	sub    esp,0xc
c001e001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e005:	8b 00                	mov    eax,DWORD PTR [eax]
c001e007:	99                   	cdq    
c001e008:	52                   	push   edx
c001e009:	50                   	push   eax
c001e00a:	6a 00                	push   0x0
c001e00c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e011:	e8 76 07 00 00       	call   c001e78c <__udivdi3>
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	83 ec 08             	sub    esp,0x8
c001e01c:	52                   	push   edx
c001e01d:	50                   	push   eax
c001e01e:	e8 80 44 ff ff       	call   c00124a3 <timerHandler(unsigned long long)>
c001e023:	83 c4 10             	add    esp,0x10
c001e026:	90                   	nop
c001e027:	83 c4 0c             	add    esp,0xc
c001e02a:	c3                   	ret    
c001e02b:	90                   	nop

c001e02c <APICTimer::write(int)>:
c001e02c:	53                   	push   ebx
c001e02d:	83 ec 28             	sub    esp,0x28
c001e030:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e034:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e038:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e03e:	e8 47 5f ff ff       	call   c0013f8a <thisCPU()>
c001e043:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e049:	83 ec 0c             	sub    esp,0xc
c001e04c:	50                   	push   eax
c001e04d:	e8 0e f6 ff ff       	call   c001d660 <APIC::getBase()>
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e059:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001e05e:	8b 15 f4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023df4
c001e064:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e068:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e06c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e070:	05 e0 03 00 00       	add    eax,0x3e0
c001e075:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e07b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e07f:	05 80 03 00 00       	add    eax,0x380
c001e084:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e08a:	fb                   	sti    
c001e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e093:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e098:	83 d2 00             	adc    edx,0x0
c001e09b:	89 c1                	mov    ecx,eax
c001e09d:	89 d3                	mov    ebx,edx
c001e09f:	a1 f0 3d 02 c0       	mov    eax,ds:0xc0023df0
c001e0a4:	8b 15 f4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023df4
c001e0aa:	39 c8                	cmp    eax,ecx
c001e0ac:	89 d0                	mov    eax,edx
c001e0ae:	19 d8                	sbb    eax,ebx
c001e0b0:	73 02                	jae    c001e0b4 <APICTimer::write(int)+0x88>
c001e0b2:	eb d7                	jmp    c001e08b <APICTimer::write(int)+0x5f>
c001e0b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0b8:	05 20 03 00 00       	add    eax,0x320
c001e0bd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e0c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0c7:	05 90 03 00 00       	add    eax,0x390
c001e0cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ce:	f7 d0                	not    eax
c001e0d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0d4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0dc:	ba 00 00 00 00       	mov    edx,0x0
c001e0e1:	f7 f3                	div    ebx
c001e0e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0f1:	0d 00 00 02 00       	or     eax,0x20000
c001e0f6:	89 c2                	mov    edx,eax
c001e0f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0fc:	05 20 03 00 00       	add    eax,0x320
c001e101:	89 10                	mov    DWORD PTR [eax],edx
c001e103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e107:	05 e0 03 00 00       	add    eax,0x3e0
c001e10c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e116:	05 80 03 00 00       	add    eax,0x380
c001e11b:	89 c2                	mov    edx,eax
c001e11d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e121:	89 02                	mov    DWORD PTR [edx],eax
c001e123:	90                   	nop
c001e124:	83 c4 28             	add    esp,0x28
c001e127:	5b                   	pop    ebx
c001e128:	c3                   	ret    
c001e129:	90                   	nop

c001e12a <APICTimer::open(int, int, void*)>:
c001e12a:	57                   	push   edi
c001e12b:	56                   	push   esi
c001e12c:	53                   	push   ebx
c001e12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e131:	8b 00                	mov    eax,DWORD PTR [eax]
c001e133:	83 c0 24             	add    eax,0x24
c001e136:	8b 00                	mov    eax,DWORD PTR [eax]
c001e138:	83 ec 08             	sub    esp,0x8
c001e13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e143:	ff d0                	call   eax
c001e145:	83 c4 10             	add    esp,0x10
c001e148:	e8 3d 5e ff ff       	call   c0013f8a <thisCPU()>
c001e14d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e153:	83 ec 0c             	sub    esp,0xc
c001e156:	50                   	push   eax
c001e157:	e8 04 f5 ff ff       	call   c001d660 <APIC::getBase()>
c001e15c:	83 c4 10             	add    esp,0x10
c001e15f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e169:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e16f:	0f b6 f8             	movzx  edi,al
c001e172:	89 d0                	mov    eax,edx
c001e174:	ba 00 00 00 00       	mov    edx,0x0
c001e179:	89 c1                	mov    ecx,eax
c001e17b:	80 e5 ff             	and    ch,0xff
c001e17e:	89 cb                	mov    ebx,ecx
c001e180:	0f b6 f2             	movzx  esi,dl
c001e183:	89 d8                	mov    eax,ebx
c001e185:	89 f2                	mov    edx,esi
c001e187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e18b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e18e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e192:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e196:	83 e0 00             	and    eax,0x0
c001e199:	09 d0                	or     eax,edx
c001e19b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e1a9:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1b0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e1b6:	0f b6 d0             	movzx  edx,al
c001e1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bd:	83 c2 08             	add    edx,0x8
c001e1c0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e1c4:	0f b6 c9             	movzx  ecx,cl
c001e1c7:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1cd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1d9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1e7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1f1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1f7:	83 ec 0c             	sub    esp,0xc
c001e1fa:	51                   	push   ecx
c001e1fb:	6a 01                	push   0x1
c001e1fd:	68 fe df 01 c0       	push   0xc001dffe
c001e202:	52                   	push   edx
c001e203:	50                   	push   eax
c001e204:	e8 51 21 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e209:	83 c4 20             	add    esp,0x20
c001e20c:	89 c2                	mov    edx,eax
c001e20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e212:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e218:	b8 00 00 00 00       	mov    eax,0x0
c001e21d:	5b                   	pop    ebx
c001e21e:	5e                   	pop    esi
c001e21f:	5f                   	pop    edi
c001e220:	c3                   	ret    
c001e221:	90                   	nop

c001e222 <APICTimer::APICTimer()>:
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e229:	83 ec 08             	sub    esp,0x8
c001e22c:	68 28 2b 02 c0       	push   0xc0022b28
c001e231:	50                   	push   eax
c001e232:	e8 dd 41 ff ff       	call   c0012414 <Timer::Timer(char const*)>
c001e237:	83 c4 10             	add    esp,0x10
c001e23a:	ba 3c 2b 02 c0       	mov    edx,0xc0022b3c
c001e23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e243:	89 10                	mov    DWORD PTR [eax],edx
c001e245:	90                   	nop
c001e246:	83 c4 0c             	add    esp,0xc
c001e249:	c3                   	ret    

c001e24a <PIT::write(int)>:
c001e24a:	83 ec 10             	sub    esp,0x10
c001e24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e251:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e255:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e25b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e25f:	a3 84 55 02 c0       	mov    ds:0xc0025584,eax
c001e264:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e269:	99                   	cdq    
c001e26a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e26e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e272:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e279:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e27e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e282:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e287:	ee                   	out    dx,al
c001e288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e28c:	0f b6 c0             	movzx  eax,al
c001e28f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e296:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e29a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e29e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e2a3:	ee                   	out    dx,al
c001e2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2a8:	c1 f8 08             	sar    eax,0x8
c001e2ab:	0f b6 c0             	movzx  eax,al
c001e2ae:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e2b5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2b9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2bd:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e2c2:	ee                   	out    dx,al
c001e2c3:	90                   	nop
c001e2c4:	83 c4 10             	add    esp,0x10
c001e2c7:	c3                   	ret    

c001e2c8 <pitHandler(regs*, void*)>:
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	a1 84 55 02 c0       	mov    eax,ds:0xc0025584
c001e2d0:	99                   	cdq    
c001e2d1:	52                   	push   edx
c001e2d2:	50                   	push   eax
c001e2d3:	6a 00                	push   0x0
c001e2d5:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e2da:	e8 ad 04 00 00       	call   c001e78c <__udivdi3>
c001e2df:	83 c4 10             	add    esp,0x10
c001e2e2:	83 ec 08             	sub    esp,0x8
c001e2e5:	52                   	push   edx
c001e2e6:	50                   	push   eax
c001e2e7:	e8 b7 41 ff ff       	call   c00124a3 <timerHandler(unsigned long long)>
c001e2ec:	83 c4 10             	add    esp,0x10
c001e2ef:	90                   	nop
c001e2f0:	83 c4 0c             	add    esp,0xc
c001e2f3:	c3                   	ret    

c001e2f4 <PIT::open(int, int, void*)>:
c001e2f4:	83 ec 0c             	sub    esp,0xc
c001e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2fd:	83 c0 24             	add    eax,0x24
c001e300:	8b 00                	mov    eax,DWORD PTR [eax]
c001e302:	83 ec 08             	sub    esp,0x8
c001e305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e30d:	ff d0                	call   eax
c001e30f:	83 c4 10             	add    esp,0x10
c001e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	6a 00                	push   0x0
c001e31b:	6a 01                	push   0x1
c001e31d:	68 c8 e2 01 c0       	push   0xc001e2c8
c001e322:	6a 00                	push   0x0
c001e324:	50                   	push   eax
c001e325:	e8 30 20 ff ff       	call   c001035a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e32a:	83 c4 20             	add    esp,0x20
c001e32d:	89 c2                	mov    edx,eax
c001e32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e333:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e339:	b8 00 00 00 00       	mov    eax,0x0
c001e33e:	83 c4 0c             	add    esp,0xc
c001e341:	c3                   	ret    

c001e342 <PIT::close(int, int, void*)>:
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e349:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e357:	6a 01                	push   0x1
c001e359:	68 c8 e2 01 c0       	push   0xc001e2c8
c001e35e:	6a 00                	push   0x0
c001e360:	50                   	push   eax
c001e361:	e8 52 20 ff ff       	call   c00103b8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e366:	83 c4 10             	add    esp,0x10
c001e369:	b8 00 00 00 00       	mov    eax,0x0
c001e36e:	83 c4 0c             	add    esp,0xc
c001e371:	c3                   	ret    

c001e372 <PIT::PIT()>:
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e379:	83 ec 08             	sub    esp,0x8
c001e37c:	68 64 2b 02 c0       	push   0xc0022b64
c001e381:	50                   	push   eax
c001e382:	e8 8d 40 ff ff       	call   c0012414 <Timer::Timer(char const*)>
c001e387:	83 c4 10             	add    esp,0x10
c001e38a:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c001e38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e393:	89 10                	mov    DWORD PTR [eax],edx
c001e395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e399:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e39f:	0f b6 d0             	movzx  edx,al
c001e3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3b7:	0f b6 d0             	movzx  edx,al
c001e3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3be:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3cd:	8d 50 01             	lea    edx,[eax+0x1]
c001e3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3d4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e3da:	0f b6 d0             	movzx  edx,al
c001e3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e3e5:	83 e1 3f             	and    ecx,0x3f
c001e3e8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e3ec:	90                   	nop
c001e3ed:	83 c4 0c             	add    esp,0xc
c001e3f0:	c3                   	ret    
c001e3f1:	66 90                	xchg   ax,ax
c001e3f3:	66 90                	xchg   ax,ax
c001e3f5:	66 90                	xchg   ax,ax
c001e3f7:	66 90                	xchg   ax,ax
c001e3f9:	66 90                	xchg   ax,ax
c001e3fb:	66 90                	xchg   ax,ax
c001e3fd:	66 90                	xchg   ax,ax
c001e3ff:	90                   	nop

c001e400 <avxDetect>:
c001e400:	b8 00 00 00 00       	mov    eax,0x0
c001e405:	c3                   	ret    

c001e406 <avxSave>:
c001e406:	c3                   	ret    

c001e407 <avxLoad>:
c001e407:	c3                   	ret    

c001e408 <avxInit>:
c001e408:	c3                   	ret    

c001e409 <avxClose>:
c001e409:	c3                   	ret    
c001e40a:	66 90                	xchg   ax,ax
c001e40c:	66 90                	xchg   ax,ax
c001e40e:	66 90                	xchg   ax,ax

c001e410 <sseDetect>:
c001e410:	b8 01 00 00 00       	mov    eax,0x1
c001e415:	0f a2                	cpuid  
c001e417:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e41d:	74 06                	je     c001e425 <sseDetect.noSSE>
c001e41f:	b8 01 00 00 00       	mov    eax,0x1
c001e424:	c3                   	ret    

c001e425 <sseDetect.noSSE>:
c001e425:	b8 00 00 00 00       	mov    eax,0x0
c001e42a:	c3                   	ret    

c001e42b <sseSave>:
c001e42b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e430:	c3                   	ret    

c001e431 <sseLoad>:
c001e431:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e436:	c3                   	ret    

c001e437 <sseInit>:
c001e437:	e8 40 00 00 00       	call   c001e47c <x87Init>
c001e43c:	0f 20 e0             	mov    eax,cr4
c001e43f:	66 0d 00 06          	or     ax,0x600
c001e443:	0f 22 e0             	mov    cr4,eax
c001e446:	c3                   	ret    

c001e447 <sseClose>:
c001e447:	c3                   	ret    
c001e448:	66 90                	xchg   ax,ax
c001e44a:	66 90                	xchg   ax,ax
c001e44c:	66 90                	xchg   ax,ax
c001e44e:	66 90                	xchg   ax,ax

c001e450 <value_37F>:
c001e450:	7f 03                	jg     c001e455 <value_37A+0x1>

c001e452 <value_37E>:
c001e452:	7e 03                	jle    c001e457 <x87Detect+0x1>

c001e454 <value_37A>:
c001e454:	7a 03                	jp     c001e459 <x87Detect+0x3>

c001e456 <x87Detect>:
c001e456:	b8 01 00 00 00       	mov    eax,0x1
c001e45b:	0f a2                	cpuid  
c001e45d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e463:	74 06                	je     c001e46b <x87Detect.nox87>
c001e465:	b8 01 00 00 00       	mov    eax,0x1
c001e46a:	c3                   	ret    

c001e46b <x87Detect.nox87>:
c001e46b:	b8 00 00 00 00       	mov    eax,0x0
c001e470:	c3                   	ret    

c001e471 <x87Save>:
c001e471:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e476:	c3                   	ret    

c001e477 <x87Load>:
c001e477:	dd 64 24 08          	frstor [esp+0x8]
c001e47b:	c3                   	ret    

c001e47c <x87Init>:
c001e47c:	9b db e3             	finit  
c001e47f:	0f 20 c0             	mov    eax,cr0
c001e482:	66 25 fb ff          	and    ax,0xfffb
c001e486:	66 0d 22 00          	or     ax,0x22
c001e48a:	0f 22 c0             	mov    cr0,eax
c001e48d:	0f 06                	clts   
c001e48f:	d9 2d 54 e4 01 c0    	fldcw  WORD PTR ds:0xc001e454
c001e495:	c3                   	ret    

c001e496 <x87Close>:
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <__do_global_ctors_aux>:
c001e498:	a1 78 f5 01 c0       	mov    eax,ds:0xc001f578
c001e49d:	83 f8 ff             	cmp    eax,0xffffffff
c001e4a0:	74 1a                	je     c001e4bc <__do_global_ctors_aux+0x24>
c001e4a2:	55                   	push   ebp
c001e4a3:	89 e5                	mov    ebp,esp
c001e4a5:	53                   	push   ebx
c001e4a6:	52                   	push   edx
c001e4a7:	bb 78 f5 01 c0       	mov    ebx,0xc001f578
c001e4ac:	ff d0                	call   eax
c001e4ae:	83 eb 04             	sub    ebx,0x4
c001e4b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e4b3:	83 f8 ff             	cmp    eax,0xffffffff
c001e4b6:	75 f4                	jne    c001e4ac <__do_global_ctors_aux+0x14>
c001e4b8:	58                   	pop    eax
c001e4b9:	5b                   	pop    ebx
c001e4ba:	5d                   	pop    ebp
c001e4bb:	c3                   	ret    
c001e4bc:	c3                   	ret    
c001e4bd:	66 90                	xchg   ax,ax
c001e4bf:	90                   	nop

c001e4c0 <__divdi3>:
c001e4c0:	55                   	push   ebp
c001e4c1:	57                   	push   edi
c001e4c2:	56                   	push   esi
c001e4c3:	53                   	push   ebx
c001e4c4:	83 ec 1c             	sub    esp,0x1c
c001e4c7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e4cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e4de:	85 db                	test   ebx,ebx
c001e4e0:	0f 88 8e 00 00 00    	js     c001e574 <__divdi3+0xb4>
c001e4e6:	89 dd                	mov    ebp,ebx
c001e4e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e4f0:	89 d3                	mov    ebx,edx
c001e4f2:	85 d2                	test   edx,edx
c001e4f4:	79 0d                	jns    c001e503 <__divdi3+0x43>
c001e4f6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e4fa:	f7 d8                	neg    eax
c001e4fc:	83 d2 00             	adc    edx,0x0
c001e4ff:	f7 da                	neg    edx
c001e501:	89 d3                	mov    ebx,edx
c001e503:	89 c7                	mov    edi,eax
c001e505:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e508:	85 db                	test   ebx,ebx
c001e50a:	75 48                	jne    c001e554 <__divdi3+0x94>
c001e50c:	39 ef                	cmp    edi,ebp
c001e50e:	76 24                	jbe    c001e534 <__divdi3+0x74>
c001e510:	89 ea                	mov    edx,ebp
c001e512:	f7 f7                	div    edi
c001e514:	89 c1                	mov    ecx,eax
c001e516:	31 f6                	xor    esi,esi
c001e518:	89 c8                	mov    eax,ecx
c001e51a:	89 f2                	mov    edx,esi
c001e51c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e520:	85 c9                	test   ecx,ecx
c001e522:	74 07                	je     c001e52b <__divdi3+0x6b>
c001e524:	f7 d8                	neg    eax
c001e526:	83 d2 00             	adc    edx,0x0
c001e529:	f7 da                	neg    edx
c001e52b:	83 c4 1c             	add    esp,0x1c
c001e52e:	5b                   	pop    ebx
c001e52f:	5e                   	pop    esi
c001e530:	5f                   	pop    edi
c001e531:	5d                   	pop    ebp
c001e532:	c3                   	ret    
c001e533:	90                   	nop
c001e534:	85 ff                	test   edi,edi
c001e536:	75 0b                	jne    c001e543 <__divdi3+0x83>
c001e538:	b8 01 00 00 00       	mov    eax,0x1
c001e53d:	31 d2                	xor    edx,edx
c001e53f:	f7 f3                	div    ebx
c001e541:	89 c7                	mov    edi,eax
c001e543:	31 d2                	xor    edx,edx
c001e545:	89 e8                	mov    eax,ebp
c001e547:	f7 f7                	div    edi
c001e549:	89 c6                	mov    esi,eax
c001e54b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e54e:	f7 f7                	div    edi
c001e550:	89 c1                	mov    ecx,eax
c001e552:	eb c4                	jmp    c001e518 <__divdi3+0x58>
c001e554:	39 eb                	cmp    ebx,ebp
c001e556:	77 3c                	ja     c001e594 <__divdi3+0xd4>
c001e558:	0f bd f3             	bsr    esi,ebx
c001e55b:	83 f6 1f             	xor    esi,0x1f
c001e55e:	75 40                	jne    c001e5a0 <__divdi3+0xe0>
c001e560:	39 eb                	cmp    ebx,ebp
c001e562:	72 09                	jb     c001e56d <__divdi3+0xad>
c001e564:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e567:	0f 87 97 00 00 00    	ja     c001e604 <__divdi3+0x144>
c001e56d:	b9 01 00 00 00       	mov    ecx,0x1
c001e572:	eb a4                	jmp    c001e518 <__divdi3+0x58>
c001e574:	f7 d9                	neg    ecx
c001e576:	83 d3 00             	adc    ebx,0x0
c001e579:	f7 db                	neg    ebx
c001e57b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e57e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e582:	89 dd                	mov    ebp,ebx
c001e584:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e58c:	e9 5f ff ff ff       	jmp    c001e4f0 <__divdi3+0x30>
c001e591:	8d 76 00             	lea    esi,[esi+0x0]
c001e594:	31 f6                	xor    esi,esi
c001e596:	31 c9                	xor    ecx,ecx
c001e598:	e9 7b ff ff ff       	jmp    c001e518 <__divdi3+0x58>
c001e59d:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a0:	b8 20 00 00 00       	mov    eax,0x20
c001e5a5:	29 f0                	sub    eax,esi
c001e5a7:	89 f1                	mov    ecx,esi
c001e5a9:	d3 e3                	shl    ebx,cl
c001e5ab:	89 fa                	mov    edx,edi
c001e5ad:	88 c1                	mov    cl,al
c001e5af:	d3 ea                	shr    edx,cl
c001e5b1:	09 da                	or     edx,ebx
c001e5b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5b7:	89 f1                	mov    ecx,esi
c001e5b9:	d3 e7                	shl    edi,cl
c001e5bb:	89 eb                	mov    ebx,ebp
c001e5bd:	88 c1                	mov    cl,al
c001e5bf:	d3 eb                	shr    ebx,cl
c001e5c1:	89 f1                	mov    ecx,esi
c001e5c3:	d3 e5                	shl    ebp,cl
c001e5c5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e5c8:	88 c1                	mov    cl,al
c001e5ca:	d3 ea                	shr    edx,cl
c001e5cc:	09 d5                	or     ebp,edx
c001e5ce:	89 e8                	mov    eax,ebp
c001e5d0:	89 da                	mov    edx,ebx
c001e5d2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e5d6:	89 d3                	mov    ebx,edx
c001e5d8:	89 c5                	mov    ebp,eax
c001e5da:	f7 e7                	mul    edi
c001e5dc:	39 d3                	cmp    ebx,edx
c001e5de:	72 18                	jb     c001e5f8 <__divdi3+0x138>
c001e5e0:	74 0a                	je     c001e5ec <__divdi3+0x12c>
c001e5e2:	89 e9                	mov    ecx,ebp
c001e5e4:	31 f6                	xor    esi,esi
c001e5e6:	e9 2d ff ff ff       	jmp    c001e518 <__divdi3+0x58>
c001e5eb:	90                   	nop
c001e5ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e5ef:	89 f1                	mov    ecx,esi
c001e5f1:	d3 e7                	shl    edi,cl
c001e5f3:	39 c7                	cmp    edi,eax
c001e5f5:	73 eb                	jae    c001e5e2 <__divdi3+0x122>
c001e5f7:	90                   	nop
c001e5f8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e5fb:	31 f6                	xor    esi,esi
c001e5fd:	e9 16 ff ff ff       	jmp    c001e518 <__divdi3+0x58>
c001e602:	66 90                	xchg   ax,ax
c001e604:	31 c9                	xor    ecx,ecx
c001e606:	e9 0d ff ff ff       	jmp    c001e518 <__divdi3+0x58>
c001e60b:	90                   	nop

c001e60c <__moddi3>:
c001e60c:	55                   	push   ebp
c001e60d:	57                   	push   edi
c001e60e:	56                   	push   esi
c001e60f:	53                   	push   ebx
c001e610:	83 ec 2c             	sub    esp,0x2c
c001e613:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e617:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e61b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e61f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e623:	85 db                	test   ebx,ebx
c001e625:	0f 88 85 00 00 00    	js     c001e6b0 <__moddi3+0xa4>
c001e62b:	89 de                	mov    esi,ebx
c001e62d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e635:	89 d7                	mov    edi,edx
c001e637:	85 d2                	test   edx,edx
c001e639:	79 09                	jns    c001e644 <__moddi3+0x38>
c001e63b:	f7 d8                	neg    eax
c001e63d:	83 d2 00             	adc    edx,0x0
c001e640:	f7 da                	neg    edx
c001e642:	89 d7                	mov    edi,edx
c001e644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e648:	89 cd                	mov    ebp,ecx
c001e64a:	85 ff                	test   edi,edi
c001e64c:	75 52                	jne    c001e6a0 <__moddi3+0x94>
c001e64e:	89 c3                	mov    ebx,eax
c001e650:	39 f0                	cmp    eax,esi
c001e652:	76 24                	jbe    c001e678 <__moddi3+0x6c>
c001e654:	89 c8                	mov    eax,ecx
c001e656:	89 f2                	mov    edx,esi
c001e658:	f7 f3                	div    ebx
c001e65a:	89 d6                	mov    esi,edx
c001e65c:	89 f0                	mov    eax,esi
c001e65e:	31 d2                	xor    edx,edx
c001e660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e664:	85 c9                	test   ecx,ecx
c001e666:	74 07                	je     c001e66f <__moddi3+0x63>
c001e668:	f7 d8                	neg    eax
c001e66a:	83 d2 00             	adc    edx,0x0
c001e66d:	f7 da                	neg    edx
c001e66f:	83 c4 2c             	add    esp,0x2c
c001e672:	5b                   	pop    ebx
c001e673:	5e                   	pop    esi
c001e674:	5f                   	pop    edi
c001e675:	5d                   	pop    ebp
c001e676:	c3                   	ret    
c001e677:	90                   	nop
c001e678:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e67c:	85 db                	test   ebx,ebx
c001e67e:	75 0d                	jne    c001e68d <__moddi3+0x81>
c001e680:	b8 01 00 00 00       	mov    eax,0x1
c001e685:	31 d2                	xor    edx,edx
c001e687:	f7 f7                	div    edi
c001e689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e68d:	89 f0                	mov    eax,esi
c001e68f:	31 d2                	xor    edx,edx
c001e691:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e695:	f7 f7                	div    edi
c001e697:	89 e8                	mov    eax,ebp
c001e699:	f7 f7                	div    edi
c001e69b:	89 d6                	mov    esi,edx
c001e69d:	eb bd                	jmp    c001e65c <__moddi3+0x50>
c001e69f:	90                   	nop
c001e6a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6a4:	39 f7                	cmp    edi,esi
c001e6a6:	76 20                	jbe    c001e6c8 <__moddi3+0xbc>
c001e6a8:	89 c8                	mov    eax,ecx
c001e6aa:	89 f2                	mov    edx,esi
c001e6ac:	eb b2                	jmp    c001e660 <__moddi3+0x54>
c001e6ae:	66 90                	xchg   ax,ax
c001e6b0:	f7 d9                	neg    ecx
c001e6b2:	83 d3 00             	adc    ebx,0x0
c001e6b5:	f7 db                	neg    ebx
c001e6b7:	89 de                	mov    esi,ebx
c001e6b9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e6c1:	e9 6f ff ff ff       	jmp    c001e635 <__moddi3+0x29>
c001e6c6:	66 90                	xchg   ax,ax
c001e6c8:	0f bd c7             	bsr    eax,edi
c001e6cb:	83 f0 1f             	xor    eax,0x1f
c001e6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e6d2:	75 24                	jne    c001e6f8 <__moddi3+0xec>
c001e6d4:	39 f7                	cmp    edi,esi
c001e6d6:	72 06                	jb     c001e6de <__moddi3+0xd2>
c001e6d8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e6dc:	77 0c                	ja     c001e6ea <__moddi3+0xde>
c001e6de:	89 e9                	mov    ecx,ebp
c001e6e0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e6e4:	19 fe                	sbb    esi,edi
c001e6e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6ee:	89 f2                	mov    edx,esi
c001e6f0:	e9 6b ff ff ff       	jmp    c001e660 <__moddi3+0x54>
c001e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6f8:	b8 20 00 00 00       	mov    eax,0x20
c001e6fd:	89 c2                	mov    edx,eax
c001e6ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e703:	29 da                	sub    edx,ebx
c001e705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e709:	88 d9                	mov    cl,bl
c001e70b:	d3 e7                	shl    edi,cl
c001e70d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e711:	88 d1                	mov    cl,dl
c001e713:	d3 e8                	shr    eax,cl
c001e715:	09 c7                	or     edi,eax
c001e717:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e71b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e71f:	89 d8                	mov    eax,ebx
c001e721:	88 d9                	mov    cl,bl
c001e723:	d3 e7                	shl    edi,cl
c001e725:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e729:	89 f3                	mov    ebx,esi
c001e72b:	88 d1                	mov    cl,dl
c001e72d:	d3 eb                	shr    ebx,cl
c001e72f:	89 c7                	mov    edi,eax
c001e731:	88 c1                	mov    cl,al
c001e733:	d3 e6                	shl    esi,cl
c001e735:	89 e8                	mov    eax,ebp
c001e737:	88 d1                	mov    cl,dl
c001e739:	d3 e8                	shr    eax,cl
c001e73b:	09 f0                	or     eax,esi
c001e73d:	89 f9                	mov    ecx,edi
c001e73f:	d3 e5                	shl    ebp,cl
c001e741:	89 da                	mov    edx,ebx
c001e743:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e747:	89 d3                	mov    ebx,edx
c001e749:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e74d:	89 c6                	mov    esi,eax
c001e74f:	89 d1                	mov    ecx,edx
c001e751:	39 d3                	cmp    ebx,edx
c001e753:	72 27                	jb     c001e77c <__moddi3+0x170>
c001e755:	74 21                	je     c001e778 <__moddi3+0x16c>
c001e757:	29 f5                	sub    ebp,esi
c001e759:	19 cb                	sbb    ebx,ecx
c001e75b:	89 de                	mov    esi,ebx
c001e75d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e761:	d3 e6                	shl    esi,cl
c001e763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e767:	89 f9                	mov    ecx,edi
c001e769:	d3 ed                	shr    ebp,cl
c001e76b:	09 ee                	or     esi,ebp
c001e76d:	89 f0                	mov    eax,esi
c001e76f:	d3 eb                	shr    ebx,cl
c001e771:	89 da                	mov    edx,ebx
c001e773:	e9 e8 fe ff ff       	jmp    c001e660 <__moddi3+0x54>
c001e778:	39 c5                	cmp    ebp,eax
c001e77a:	73 db                	jae    c001e757 <__moddi3+0x14b>
c001e77c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e780:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e784:	89 d1                	mov    ecx,edx
c001e786:	89 c6                	mov    esi,eax
c001e788:	eb cd                	jmp    c001e757 <__moddi3+0x14b>
c001e78a:	66 90                	xchg   ax,ax

c001e78c <__udivdi3>:
c001e78c:	55                   	push   ebp
c001e78d:	57                   	push   edi
c001e78e:	56                   	push   esi
c001e78f:	53                   	push   ebx
c001e790:	83 ec 1c             	sub    esp,0x1c
c001e793:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e797:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e79b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e79f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e7a3:	85 d2                	test   edx,edx
c001e7a5:	75 41                	jne    c001e7e8 <__udivdi3+0x5c>
c001e7a7:	39 f7                	cmp    edi,esi
c001e7a9:	76 15                	jbe    c001e7c0 <__udivdi3+0x34>
c001e7ab:	89 e8                	mov    eax,ebp
c001e7ad:	89 f2                	mov    edx,esi
c001e7af:	f7 f7                	div    edi
c001e7b1:	31 db                	xor    ebx,ebx
c001e7b3:	89 da                	mov    edx,ebx
c001e7b5:	83 c4 1c             	add    esp,0x1c
c001e7b8:	5b                   	pop    ebx
c001e7b9:	5e                   	pop    esi
c001e7ba:	5f                   	pop    edi
c001e7bb:	5d                   	pop    ebp
c001e7bc:	c3                   	ret    
c001e7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7c0:	89 f9                	mov    ecx,edi
c001e7c2:	85 ff                	test   edi,edi
c001e7c4:	75 0b                	jne    c001e7d1 <__udivdi3+0x45>
c001e7c6:	b8 01 00 00 00       	mov    eax,0x1
c001e7cb:	31 d2                	xor    edx,edx
c001e7cd:	f7 f7                	div    edi
c001e7cf:	89 c1                	mov    ecx,eax
c001e7d1:	31 d2                	xor    edx,edx
c001e7d3:	89 f0                	mov    eax,esi
c001e7d5:	f7 f1                	div    ecx
c001e7d7:	89 c3                	mov    ebx,eax
c001e7d9:	89 e8                	mov    eax,ebp
c001e7db:	f7 f1                	div    ecx
c001e7dd:	89 da                	mov    edx,ebx
c001e7df:	83 c4 1c             	add    esp,0x1c
c001e7e2:	5b                   	pop    ebx
c001e7e3:	5e                   	pop    esi
c001e7e4:	5f                   	pop    edi
c001e7e5:	5d                   	pop    ebp
c001e7e6:	c3                   	ret    
c001e7e7:	90                   	nop
c001e7e8:	39 f2                	cmp    edx,esi
c001e7ea:	77 1c                	ja     c001e808 <__udivdi3+0x7c>
c001e7ec:	0f bd da             	bsr    ebx,edx
c001e7ef:	83 f3 1f             	xor    ebx,0x1f
c001e7f2:	75 24                	jne    c001e818 <__udivdi3+0x8c>
c001e7f4:	39 f2                	cmp    edx,esi
c001e7f6:	72 08                	jb     c001e800 <__udivdi3+0x74>
c001e7f8:	39 ef                	cmp    edi,ebp
c001e7fa:	0f 87 84 00 00 00    	ja     c001e884 <__udivdi3+0xf8>
c001e800:	b8 01 00 00 00       	mov    eax,0x1
c001e805:	eb ac                	jmp    c001e7b3 <__udivdi3+0x27>
c001e807:	90                   	nop
c001e808:	31 db                	xor    ebx,ebx
c001e80a:	31 c0                	xor    eax,eax
c001e80c:	89 da                	mov    edx,ebx
c001e80e:	83 c4 1c             	add    esp,0x1c
c001e811:	5b                   	pop    ebx
c001e812:	5e                   	pop    esi
c001e813:	5f                   	pop    edi
c001e814:	5d                   	pop    ebp
c001e815:	c3                   	ret    
c001e816:	66 90                	xchg   ax,ax
c001e818:	b8 20 00 00 00       	mov    eax,0x20
c001e81d:	29 d8                	sub    eax,ebx
c001e81f:	88 d9                	mov    cl,bl
c001e821:	d3 e2                	shl    edx,cl
c001e823:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e827:	89 fa                	mov    edx,edi
c001e829:	88 c1                	mov    cl,al
c001e82b:	d3 ea                	shr    edx,cl
c001e82d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e831:	09 d1                	or     ecx,edx
c001e833:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e837:	88 d9                	mov    cl,bl
c001e839:	d3 e7                	shl    edi,cl
c001e83b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e83f:	89 f7                	mov    edi,esi
c001e841:	88 c1                	mov    cl,al
c001e843:	d3 ef                	shr    edi,cl
c001e845:	88 d9                	mov    cl,bl
c001e847:	d3 e6                	shl    esi,cl
c001e849:	89 ea                	mov    edx,ebp
c001e84b:	88 c1                	mov    cl,al
c001e84d:	d3 ea                	shr    edx,cl
c001e84f:	09 d6                	or     esi,edx
c001e851:	89 f0                	mov    eax,esi
c001e853:	89 fa                	mov    edx,edi
c001e855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e859:	89 d7                	mov    edi,edx
c001e85b:	89 c6                	mov    esi,eax
c001e85d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e861:	39 d7                	cmp    edi,edx
c001e863:	72 13                	jb     c001e878 <__udivdi3+0xec>
c001e865:	74 09                	je     c001e870 <__udivdi3+0xe4>
c001e867:	89 f0                	mov    eax,esi
c001e869:	31 db                	xor    ebx,ebx
c001e86b:	e9 43 ff ff ff       	jmp    c001e7b3 <__udivdi3+0x27>
c001e870:	88 d9                	mov    cl,bl
c001e872:	d3 e5                	shl    ebp,cl
c001e874:	39 c5                	cmp    ebp,eax
c001e876:	73 ef                	jae    c001e867 <__udivdi3+0xdb>
c001e878:	8d 46 ff             	lea    eax,[esi-0x1]
c001e87b:	31 db                	xor    ebx,ebx
c001e87d:	e9 31 ff ff ff       	jmp    c001e7b3 <__udivdi3+0x27>
c001e882:	66 90                	xchg   ax,ax
c001e884:	31 c0                	xor    eax,eax
c001e886:	e9 28 ff ff ff       	jmp    c001e7b3 <__udivdi3+0x27>
c001e88b:	90                   	nop

c001e88c <__umoddi3>:
c001e88c:	55                   	push   ebp
c001e88d:	57                   	push   edi
c001e88e:	56                   	push   esi
c001e88f:	53                   	push   ebx
c001e890:	83 ec 1c             	sub    esp,0x1c
c001e893:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e897:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e89b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e89f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e8a3:	89 da                	mov    edx,ebx
c001e8a5:	85 c0                	test   eax,eax
c001e8a7:	75 37                	jne    c001e8e0 <__umoddi3+0x54>
c001e8a9:	39 df                	cmp    edi,ebx
c001e8ab:	76 13                	jbe    c001e8c0 <__umoddi3+0x34>
c001e8ad:	89 f0                	mov    eax,esi
c001e8af:	f7 f7                	div    edi
c001e8b1:	89 d0                	mov    eax,edx
c001e8b3:	31 d2                	xor    edx,edx
c001e8b5:	83 c4 1c             	add    esp,0x1c
c001e8b8:	5b                   	pop    ebx
c001e8b9:	5e                   	pop    esi
c001e8ba:	5f                   	pop    edi
c001e8bb:	5d                   	pop    ebp
c001e8bc:	c3                   	ret    
c001e8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e8c0:	89 fd                	mov    ebp,edi
c001e8c2:	85 ff                	test   edi,edi
c001e8c4:	75 0b                	jne    c001e8d1 <__umoddi3+0x45>
c001e8c6:	b8 01 00 00 00       	mov    eax,0x1
c001e8cb:	31 d2                	xor    edx,edx
c001e8cd:	f7 f7                	div    edi
c001e8cf:	89 c5                	mov    ebp,eax
c001e8d1:	89 d8                	mov    eax,ebx
c001e8d3:	31 d2                	xor    edx,edx
c001e8d5:	f7 f5                	div    ebp
c001e8d7:	89 f0                	mov    eax,esi
c001e8d9:	f7 f5                	div    ebp
c001e8db:	89 d0                	mov    eax,edx
c001e8dd:	eb d4                	jmp    c001e8b3 <__umoddi3+0x27>
c001e8df:	90                   	nop
c001e8e0:	89 f1                	mov    ecx,esi
c001e8e2:	39 d8                	cmp    eax,ebx
c001e8e4:	76 0a                	jbe    c001e8f0 <__umoddi3+0x64>
c001e8e6:	89 f0                	mov    eax,esi
c001e8e8:	83 c4 1c             	add    esp,0x1c
c001e8eb:	5b                   	pop    ebx
c001e8ec:	5e                   	pop    esi
c001e8ed:	5f                   	pop    edi
c001e8ee:	5d                   	pop    ebp
c001e8ef:	c3                   	ret    
c001e8f0:	0f bd e8             	bsr    ebp,eax
c001e8f3:	83 f5 1f             	xor    ebp,0x1f
c001e8f6:	75 1c                	jne    c001e914 <__umoddi3+0x88>
c001e8f8:	39 d8                	cmp    eax,ebx
c001e8fa:	72 04                	jb     c001e900 <__umoddi3+0x74>
c001e8fc:	39 f7                	cmp    edi,esi
c001e8fe:	77 08                	ja     c001e908 <__umoddi3+0x7c>
c001e900:	89 da                	mov    edx,ebx
c001e902:	29 fe                	sub    esi,edi
c001e904:	19 c2                	sbb    edx,eax
c001e906:	89 f1                	mov    ecx,esi
c001e908:	89 c8                	mov    eax,ecx
c001e90a:	83 c4 1c             	add    esp,0x1c
c001e90d:	5b                   	pop    ebx
c001e90e:	5e                   	pop    esi
c001e90f:	5f                   	pop    edi
c001e910:	5d                   	pop    ebp
c001e911:	c3                   	ret    
c001e912:	66 90                	xchg   ax,ax
c001e914:	ba 20 00 00 00       	mov    edx,0x20
c001e919:	29 ea                	sub    edx,ebp
c001e91b:	89 e9                	mov    ecx,ebp
c001e91d:	d3 e0                	shl    eax,cl
c001e91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e923:	89 f8                	mov    eax,edi
c001e925:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e929:	88 d1                	mov    cl,dl
c001e92b:	d3 e8                	shr    eax,cl
c001e92d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e931:	09 c1                	or     ecx,eax
c001e933:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e937:	89 e9                	mov    ecx,ebp
c001e939:	d3 e7                	shl    edi,cl
c001e93b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e93f:	89 d8                	mov    eax,ebx
c001e941:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e945:	88 d1                	mov    cl,dl
c001e947:	d3 e8                	shr    eax,cl
c001e949:	89 c7                	mov    edi,eax
c001e94b:	89 e9                	mov    ecx,ebp
c001e94d:	d3 e3                	shl    ebx,cl
c001e94f:	89 f0                	mov    eax,esi
c001e951:	88 d1                	mov    cl,dl
c001e953:	d3 e8                	shr    eax,cl
c001e955:	09 d8                	or     eax,ebx
c001e957:	89 e9                	mov    ecx,ebp
c001e959:	d3 e6                	shl    esi,cl
c001e95b:	89 f3                	mov    ebx,esi
c001e95d:	89 fa                	mov    edx,edi
c001e95f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e963:	89 d1                	mov    ecx,edx
c001e965:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e969:	89 c6                	mov    esi,eax
c001e96b:	89 d7                	mov    edi,edx
c001e96d:	39 d1                	cmp    ecx,edx
c001e96f:	72 27                	jb     c001e998 <__umoddi3+0x10c>
c001e971:	74 21                	je     c001e994 <__umoddi3+0x108>
c001e973:	89 ca                	mov    edx,ecx
c001e975:	29 f3                	sub    ebx,esi
c001e977:	19 fa                	sbb    edx,edi
c001e979:	89 d0                	mov    eax,edx
c001e97b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e97f:	d3 e0                	shl    eax,cl
c001e981:	89 e9                	mov    ecx,ebp
c001e983:	d3 eb                	shr    ebx,cl
c001e985:	09 d8                	or     eax,ebx
c001e987:	d3 ea                	shr    edx,cl
c001e989:	83 c4 1c             	add    esp,0x1c
c001e98c:	5b                   	pop    ebx
c001e98d:	5e                   	pop    esi
c001e98e:	5f                   	pop    edi
c001e98f:	5d                   	pop    ebp
c001e990:	c3                   	ret    
c001e991:	8d 76 00             	lea    esi,[esi+0x0]
c001e994:	39 c3                	cmp    ebx,eax
c001e996:	73 db                	jae    c001e973 <__umoddi3+0xe7>
c001e998:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e99c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e9a0:	89 d7                	mov    edi,edx
c001e9a2:	89 c6                	mov    esi,eax
c001e9a4:	eb cd                	jmp    c001e973 <__umoddi3+0xe7>
c001e9a6:	66 90                	xchg   ax,ax
c001e9a8:	66 90                	xchg   ax,ax
c001e9aa:	66 90                	xchg   ax,ax
c001e9ac:	66 90                	xchg   ax,ax
c001e9ae:	66 90                	xchg   ax,ax

c001e9b0 <fabs>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e9c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9c7:	dd 04 24             	fld    QWORD PTR [esp]
c001e9ca:	83 c4 0c             	add    esp,0xc
c001e9cd:	c3                   	ret    
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <lrint>:
c001e9d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e9d4:	83 ec 04             	sub    esp,0x4
c001e9d7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9da:	58                   	pop    eax
c001e9db:	c3                   	ret    

c001e9dc <lrintf>:
c001e9dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e9e0:	83 ec 04             	sub    esp,0x4
c001e9e3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9e6:	58                   	pop    eax
c001e9e7:	c3                   	ret    

Disassembly of section .init:

c001e9e8 <_init>:
c001e9e8:	55                   	push   ebp
c001e9e9:	89 e5                	mov    ebp,esp
c001e9eb:	e8 28 17 fe ff       	call   c0000118 <frame_dummy>
c001e9f0:	e8 a3 fa ff ff       	call   c001e498 <__do_global_ctors_aux>
c001e9f5:	5d                   	pop    ebp
c001e9f6:	c3                   	ret    

Disassembly of section .fini:

c001e9f7 <_fini>:
c001e9f7:	55                   	push   ebp
c001e9f8:	89 e5                	mov    ebp,esp
c001e9fa:	e8 a9 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e9ff:	5d                   	pop    ebp
c001ea00:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ea02 <Computer::~Computer()>:
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	ba d8 03 02 c0       	mov    edx,0xc00203d8
c001ea0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0e:	89 10                	mov    DWORD PTR [eax],edx
c001ea10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	50                   	push   eax
c001ea18:	e8 8b 18 ff ff       	call   c00102a8 <Device::~Device()>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	90                   	nop
c001ea21:	83 c4 0c             	add    esp,0xc
c001ea24:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ea26 <Computer::~Computer()>:
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	83 ec 0c             	sub    esp,0xc
c001ea2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea30:	e8 cd ff ff ff       	call   c001ea02 <Computer::~Computer()>
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	83 ec 08             	sub    esp,0x8
c001ea3b:	68 ec 01 00 00       	push   0x1ec
c001ea40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea44:	e8 d2 04 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	83 c4 0c             	add    esp,0xc
c001ea4f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea50 <idleCommon()>:
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	e8 88 91 ff ff       	call   c0017be0 <lockScheduler()>
c001ea58:	e8 b7 94 ff ff       	call   c0017f14 <schedule()>
c001ea5d:	83 c4 0c             	add    esp,0xc
c001ea60:	e9 7d 91 ff ff       	jmp    c0017be2 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea65 <CPU::readCR3()>:
c001ea65:	83 ec 10             	sub    esp,0x10
c001ea68:	0f 20 d8             	mov    eax,cr3
c001ea6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea73:	83 c4 10             	add    esp,0x10
c001ea76:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea77 <CPU::writeCR3(unsigned long)>:
c001ea77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea7b:	0f 22 d8             	mov    cr3,eax
c001ea7e:	90                   	nop
c001ea7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ea80 <LinkedList<UnixFile>::~LinkedList()>:
c001ea80:	90                   	nop
c001ea81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ea82 <LinkedList<UnixFile>::LinkedList()>:
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eac5:	83 ec 0c             	sub    esp,0xc
c001eac8:	68 71 06 02 c0       	push   0xc0020671
c001eacd:	e8 29 05 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001ead2:	83 c4 10             	add    esp,0x10
c001ead5:	90                   	nop
c001ead6:	83 c4 0c             	add    esp,0xc
c001ead9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001eada <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001eada:	83 ec 0c             	sub    esp,0xc
c001eadd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eae2:	75 10                	jne    c001eaf4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	68 8c 06 02 c0       	push   0xc002068c
c001eaec:	e8 9f 61 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eafa:	85 c0                	test   eax,eax
c001eafc:	74 34                	je     c001eb32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb05:	85 c0                	test   eax,eax
c001eb07:	74 29                	je     c001eb32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb29:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb30:	eb 65                	jmp    c001eb97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb36:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb38:	85 c0                	test   eax,eax
c001eb3a:	75 4b                	jne    c001eb87 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb43:	85 c0                	test   eax,eax
c001eb45:	75 40                	jne    c001eb87 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb4f:	89 10                	mov    DWORD PTR [eax],edx
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb71:	85 c0                	test   eax,eax
c001eb73:	74 22                	je     c001eb97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb75:	83 ec 0c             	sub    esp,0xc
c001eb78:	68 ae 06 02 c0       	push   0xc00206ae
c001eb7d:	e8 0e 61 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001eb82:	83 c4 10             	add    esp,0x10
c001eb85:	eb 10                	jmp    c001eb97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb87:	83 ec 0c             	sub    esp,0xc
c001eb8a:	68 b8 06 02 c0       	push   0xc00206b8
c001eb8f:	e8 fc 60 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb9e:	8d 50 01             	lea    edx,[eax+0x1]
c001eba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eba8:	90                   	nop
c001eba9:	83 c4 0c             	add    esp,0xc
c001ebac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ebae <LinkedList<UnixFile>::getFirstElement()>:
c001ebae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ebb6 <LinkedList<UnixFile>::removeFirst()>:
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebbf:	85 c0                	test   eax,eax
c001ebc1:	75 12                	jne    c001ebd5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ebc3:	83 ec 0c             	sub    esp,0xc
c001ebc6:	68 c4 06 02 c0       	push   0xc00206c4
c001ebcb:	e8 c0 60 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ebd0:	83 c4 10             	add    esp,0x10
c001ebd3:	eb 7e                	jmp    c001ec53 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebdf:	85 c0                	test   eax,eax
c001ebe1:	74 10                	je     c001ebf3 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ebe3:	83 ec 0c             	sub    esp,0xc
c001ebe6:	68 0f 07 02 c0       	push   0xc002070f
c001ebeb:	e8 a0 60 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ebf0:	83 c4 10             	add    esp,0x10
c001ebf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebfc:	85 c0                	test   eax,eax
c001ebfe:	75 33                	jne    c001ec33 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ec00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec1c:	83 f8 01             	cmp    eax,0x1
c001ec1f:	74 21                	je     c001ec42 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec21:	83 ec 0c             	sub    esp,0xc
c001ec24:	68 e8 06 02 c0       	push   0xc00206e8
c001ec29:	e8 62 60 ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	eb 0f                	jmp    c001ec42 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec39:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ec3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec40:	89 10                	mov    DWORD PTR [eax],edx
c001ec42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec49:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec53:	83 c4 0c             	add    esp,0xc
c001ec56:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ec58 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ec58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec5f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ec60 <DriverlessDevice::~DriverlessDevice()>:
c001ec60:	ba 24 0e 02 c0       	mov    edx,0xc0020e24
c001ec65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec69:	89 10                	mov    DWORD PTR [eax],edx
c001ec6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec6f:	50                   	push   eax
c001ec70:	e8 33 16 ff ff       	call   c00102a8 <Device::~Device()>
c001ec75:	83 c4 04             	add    esp,0x4
c001ec78:	90                   	nop
c001ec79:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ec7a <DriverlessDevice::~DriverlessDevice()>:
c001ec7a:	83 ec 0c             	sub    esp,0xc
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec84:	e8 d7 ff ff ff       	call   c001ec60 <DriverlessDevice::~DriverlessDevice()>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	83 ec 08             	sub    esp,0x8
c001ec8f:	68 58 01 00 00       	push   0x158
c001ec94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec98:	e8 7e 02 ff ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	83 c4 0c             	add    esp,0xc
c001eca3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eca4 <LinkedList<Device>::addElement(Device*)>:
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecac:	75 10                	jne    c001ecbe <LinkedList<Device>::addElement(Device*)+0x1a>
c001ecae:	83 ec 0c             	sub    esp,0xc
c001ecb1:	68 8c 06 02 c0       	push   0xc002068c
c001ecb6:	e8 d5 5f ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ecbb:	83 c4 10             	add    esp,0x10
c001ecbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc4:	85 c0                	test   eax,eax
c001ecc6:	74 3a                	je     c001ed02 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eccf:	85 c0                	test   eax,eax
c001ecd1:	74 2f                	je     c001ed02 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ecd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecde:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ece4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecf6:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed00:	eb 68                	jmp    c001ed6a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed06:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed08:	85 c0                	test   eax,eax
c001ed0a:	75 4e                	jne    c001ed5a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed13:	85 c0                	test   eax,eax
c001ed15:	75 43                	jne    c001ed5a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed1f:	89 10                	mov    DWORD PTR [eax],edx
c001ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed33:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed44:	85 c0                	test   eax,eax
c001ed46:	74 22                	je     c001ed6a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	68 ae 06 02 c0       	push   0xc00206ae
c001ed50:	e8 3b 5f ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	eb 10                	jmp    c001ed6a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed5a:	83 ec 0c             	sub    esp,0xc
c001ed5d:	68 b8 06 02 c0       	push   0xc00206b8
c001ed62:	e8 29 5f ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ed67:	83 c4 10             	add    esp,0x10
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed71:	8d 50 01             	lea    edx,[eax+0x1]
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed7b:	90                   	nop
c001ed7c:	83 c4 0c             	add    esp,0xc
c001ed7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ed80 <LinkedList<Device>::LinkedList()>:
c001ed80:	83 ec 0c             	sub    esp,0xc
c001ed83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edc3:	83 ec 0c             	sub    esp,0xc
c001edc6:	68 71 06 02 c0       	push   0xc0020671
c001edcb:	e8 2b 02 ff ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001edd0:	83 c4 10             	add    esp,0x10
c001edd3:	90                   	nop
c001edd4:	83 c4 0c             	add    esp,0xc
c001edd7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001edd8 <CPU::readCR0()>:
c001edd8:	83 ec 10             	sub    esp,0x10
c001eddb:	0f 20 c0             	mov    eax,cr0
c001edde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ede2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ede6:	83 c4 10             	add    esp,0x10
c001ede9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001edea <CPU::writeCR0(unsigned long)>:
c001edea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edee:	0f 22 c0             	mov    cr0,eax
c001edf1:	90                   	nop
c001edf2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001edf3 <CPU::readDR0()>:
c001edf3:	83 ec 10             	sub    esp,0x10
c001edf6:	0f 21 c0             	mov    eax,db0
c001edf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee01:	83 c4 10             	add    esp,0x10
c001ee04:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ee05 <CPU::readDR1()>:
c001ee05:	83 ec 10             	sub    esp,0x10
c001ee08:	0f 21 c8             	mov    eax,db1
c001ee0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ee17 <CPU::readDR2()>:
c001ee17:	83 ec 10             	sub    esp,0x10
c001ee1a:	0f 21 d0             	mov    eax,db2
c001ee1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee25:	83 c4 10             	add    esp,0x10
c001ee28:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ee29 <CPU::readDR3()>:
c001ee29:	83 ec 10             	sub    esp,0x10
c001ee2c:	0f 21 d8             	mov    eax,db3
c001ee2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ee3b <CPU::readDR6()>:
c001ee3b:	83 ec 10             	sub    esp,0x10
c001ee3e:	0f 21 f0             	mov    eax,db6
c001ee41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee49:	83 c4 10             	add    esp,0x10
c001ee4c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ee4d <CPU::readDR7()>:
c001ee4d:	83 ec 10             	sub    esp,0x10
c001ee50:	0f 21 f8             	mov    eax,db7
c001ee53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ee60 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ee68 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ee68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee6e:	85 c0                	test   eax,eax
c001ee70:	75 0e                	jne    c001ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee79:	85 c0                	test   eax,eax
c001ee7b:	75 03                	jne    c001ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee7d:	b0 01                	mov    al,0x1
c001ee7f:	c3                   	ret    
c001ee80:	b0 00                	mov    al,0x0
c001ee82:	90                   	nop
c001ee83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ee84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ee84:	83 ec 0c             	sub    esp,0xc
c001ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee8d:	85 c0                	test   eax,eax
c001ee8f:	75 15                	jne    c001eea6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	68 c4 06 02 c0       	push   0xc00206c4
c001ee99:	e8 f2 5d ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ee9e:	83 c4 10             	add    esp,0x10
c001eea1:	e9 88 00 00 00       	jmp    c001ef2e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eead:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eeb0:	85 c0                	test   eax,eax
c001eeb2:	0f 95 c0             	setne  al
c001eeb5:	84 c0                	test   al,al
c001eeb7:	74 10                	je     c001eec9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	68 0f 07 02 c0       	push   0xc002070f
c001eec1:	e8 ca 5d ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001eec6:	83 c4 10             	add    esp,0x10
c001eec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eecf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eed2:	85 c0                	test   eax,eax
c001eed4:	0f 94 c0             	sete   al
c001eed7:	84 c0                	test   al,al
c001eed9:	74 33                	je     c001ef0e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eef7:	83 f8 01             	cmp    eax,0x1
c001eefa:	74 21                	je     c001ef1d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	68 e8 06 02 c0       	push   0xc00206e8
c001ef04:	e8 87 5d ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	eb 0f                	jmp    c001ef1d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef12:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef14:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	89 10                	mov    DWORD PTR [eax],edx
c001ef1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef24:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef2e:	83 c4 0c             	add    esp,0xc
c001ef31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ef32 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef3a:	75 10                	jne    c001ef4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	68 8c 06 02 c0       	push   0xc002068c
c001ef44:	e8 47 5d ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef52:	85 c0                	test   eax,eax
c001ef54:	74 34                	je     c001ef8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef5d:	85 c0                	test   eax,eax
c001ef5f:	74 29                	je     c001ef8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ef6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef88:	eb 65                	jmp    c001efef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef90:	85 c0                	test   eax,eax
c001ef92:	75 4b                	jne    c001efdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef9b:	85 c0                	test   eax,eax
c001ef9d:	75 40                	jne    c001efdf <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efa7:	89 10                	mov    DWORD PTR [eax],edx
c001efa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efbb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001efc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efc9:	85 c0                	test   eax,eax
c001efcb:	74 22                	je     c001efef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efcd:	83 ec 0c             	sub    esp,0xc
c001efd0:	68 ae 06 02 c0       	push   0xc00206ae
c001efd5:	e8 b6 5c ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001efda:	83 c4 10             	add    esp,0x10
c001efdd:	eb 10                	jmp    c001efef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efdf:	83 ec 0c             	sub    esp,0xc
c001efe2:	68 b8 06 02 c0       	push   0xc00206b8
c001efe7:	e8 a4 5c ff ff       	call   c0014c90 <Krnl::panic(char const*)>
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eff6:	8d 50 01             	lea    edx,[eax+0x1]
c001eff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f000:	90                   	nop
c001f001:	83 c4 0c             	add    esp,0xc
c001f004:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f006 <ACPI::~ACPI()>:
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	ba b0 15 02 c0       	mov    edx,0xc00215b0
c001f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f012:	89 10                	mov    DWORD PTR [eax],edx
c001f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	50                   	push   eax
c001f01c:	e8 87 12 ff ff       	call   c00102a8 <Device::~Device()>
c001f021:	83 c4 10             	add    esp,0x10
c001f024:	90                   	nop
c001f025:	83 c4 0c             	add    esp,0xc
c001f028:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f02a <ACPI::~ACPI()>:
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	83 ec 0c             	sub    esp,0xc
c001f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f034:	e8 cd ff ff ff       	call   c001f006 <ACPI::~ACPI()>
c001f039:	83 c4 10             	add    esp,0x10
c001f03c:	83 ec 08             	sub    esp,0x8
c001f03f:	68 68 22 00 00       	push   0x2268
c001f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f048:	e8 ce fe fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 c4 0c             	add    esp,0xc
c001f053:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f054 <CPU::~CPU()>:
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	ba 00 18 02 c0       	mov    edx,0xc0021800
c001f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f060:	89 10                	mov    DWORD PTR [eax],edx
c001f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	50                   	push   eax
c001f06a:	e8 39 12 ff ff       	call   c00102a8 <Device::~Device()>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	90                   	nop
c001f073:	83 c4 0c             	add    esp,0xc
c001f076:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f078 <CPU::~CPU()>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	83 ec 0c             	sub    esp,0xc
c001f07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f082:	e8 cd ff ff ff       	call   c001f054 <CPU::~CPU()>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	83 ec 08             	sub    esp,0x8
c001f08d:	68 98 11 00 00       	push   0x1198
c001f092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f096:	e8 80 fe fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	83 c4 0c             	add    esp,0xc
c001f0a1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f0a2 <CPU::readCR4()>:
c001f0a2:	83 ec 10             	sub    esp,0x10
c001f0a5:	0f 20 e0             	mov    eax,cr4
c001f0a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0b0:	83 c4 10             	add    esp,0x10
c001f0b3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0b4 <CPU::writeDR7(unsigned long)>:
c001f0b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b8:	0f 23 f8             	mov    db7,eax
c001f0bb:	90                   	nop
c001f0bc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0bd <CPU::writeCR4(unsigned long)>:
c001f0bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c1:	0f 22 e0             	mov    cr4,eax
c001f0c4:	90                   	nop
c001f0c5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f0c6 <CPU::readCR2()>:
c001f0c6:	83 ec 10             	sub    esp,0x10
c001f0c9:	0f 20 d0             	mov    eax,cr2
c001f0cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0d4:	83 c4 10             	add    esp,0x10
c001f0d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f0d8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f0d8:	90                   	nop
c001f0d9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f0da <ThreadControlBlock::ThreadControlBlock()>:
c001f0da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f4:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ff:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f10a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f112:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f116:	90                   	nop
c001f117:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f118 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f129:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f134:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f149:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f15b:	83 ec 0c             	sub    esp,0xc
c001f15e:	68 71 06 02 c0       	push   0xc0020671
c001f163:	e8 93 fe fe ff       	call   c000effb <Dbg::kprintf(char const*, ...)>
c001f168:	83 c4 10             	add    esp,0x10
c001f16b:	90                   	nop
c001f16c:	83 c4 0c             	add    esp,0xc
c001f16f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f170 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f174:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f177:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f178 <PCI::~PCI()>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	ba 24 25 02 c0       	mov    edx,0xc0022524
c001f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f184:	89 10                	mov    DWORD PTR [eax],edx
c001f186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	50                   	push   eax
c001f18e:	e8 25 0b ff ff       	call   c000fcb8 <Bus::~Bus()>
c001f193:	83 c4 10             	add    esp,0x10
c001f196:	90                   	nop
c001f197:	83 c4 0c             	add    esp,0xc
c001f19a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f19c <PCI::~PCI()>:
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a6:	e8 cd ff ff ff       	call   c001f178 <PCI::~PCI()>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	83 ec 08             	sub    esp,0x8
c001f1b1:	68 58 01 00 00       	push   0x158
c001f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ba:	e8 5c fd fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	83 c4 0c             	add    esp,0xc
c001f1c5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f1c6 <IDE::~IDE()>:
c001f1c6:	83 ec 0c             	sub    esp,0xc
c001f1c9:	ba 88 27 02 c0       	mov    edx,0xc0022788
c001f1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d2:	89 10                	mov    DWORD PTR [eax],edx
c001f1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d8:	83 ec 0c             	sub    esp,0xc
c001f1db:	50                   	push   eax
c001f1dc:	e8 dd 15 ff ff       	call   c00107be <HardDiskController::~HardDiskController()>
c001f1e1:	83 c4 10             	add    esp,0x10
c001f1e4:	90                   	nop
c001f1e5:	83 c4 0c             	add    esp,0xc
c001f1e8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1ea <IDE::~IDE()>:
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	83 ec 0c             	sub    esp,0xc
c001f1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f4:	e8 cd ff ff ff       	call   c001f1c6 <IDE::~IDE()>
c001f1f9:	83 c4 10             	add    esp,0x10
c001f1fc:	83 ec 08             	sub    esp,0x8
c001f1ff:	68 70 02 00 00       	push   0x270
c001f204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f208:	e8 0e fd fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f20d:	83 c4 10             	add    esp,0x10
c001f210:	83 c4 0c             	add    esp,0xc
c001f213:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f214 <ATA::~ATA()>:
c001f214:	83 ec 0c             	sub    esp,0xc
c001f217:	ba d8 27 02 c0       	mov    edx,0xc00227d8
c001f21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f220:	89 10                	mov    DWORD PTR [eax],edx
c001f222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f226:	83 ec 0c             	sub    esp,0xc
c001f229:	50                   	push   eax
c001f22a:	e8 6d 16 ff ff       	call   c001089c <PhysicalDisk::~PhysicalDisk()>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	90                   	nop
c001f233:	83 c4 0c             	add    esp,0xc
c001f236:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f238 <ATA::~ATA()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	83 ec 0c             	sub    esp,0xc
c001f23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f242:	e8 cd ff ff ff       	call   c001f214 <ATA::~ATA()>
c001f247:	83 c4 10             	add    esp,0x10
c001f24a:	83 ec 08             	sub    esp,0x8
c001f24d:	68 7c 01 00 00       	push   0x17c
c001f252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f256:	e8 c0 fc fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f25b:	83 c4 10             	add    esp,0x10
c001f25e:	83 c4 0c             	add    esp,0xc
c001f261:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f262 <ATAPI::~ATAPI()>:
c001f262:	83 ec 0c             	sub    esp,0xc
c001f265:	ba 44 28 02 c0       	mov    edx,0xc0022844
c001f26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26e:	89 10                	mov    DWORD PTR [eax],edx
c001f270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f274:	83 ec 0c             	sub    esp,0xc
c001f277:	50                   	push   eax
c001f278:	e8 1f 16 ff ff       	call   c001089c <PhysicalDisk::~PhysicalDisk()>
c001f27d:	83 c4 10             	add    esp,0x10
c001f280:	90                   	nop
c001f281:	83 c4 0c             	add    esp,0xc
c001f284:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f286 <ATAPI::~ATAPI()>:
c001f286:	83 ec 0c             	sub    esp,0xc
c001f289:	83 ec 0c             	sub    esp,0xc
c001f28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f290:	e8 cd ff ff ff       	call   c001f262 <ATAPI::~ATAPI()>
c001f295:	83 c4 10             	add    esp,0x10
c001f298:	83 ec 08             	sub    esp,0x8
c001f29b:	68 80 01 00 00       	push   0x180
c001f2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a4:	e8 72 fc fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	83 c4 0c             	add    esp,0xc
c001f2af:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f2b0 <AVX::~AVX()>:
c001f2b0:	83 ec 0c             	sub    esp,0xc
c001f2b3:	ba 80 28 02 c0       	mov    edx,0xc0022880
c001f2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2bc:	89 10                	mov    DWORD PTR [eax],edx
c001f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c2:	83 ec 0c             	sub    esp,0xc
c001f2c5:	50                   	push   eax
c001f2c6:	e8 55 16 ff ff       	call   c0010920 <FPU::~FPU()>
c001f2cb:	83 c4 10             	add    esp,0x10
c001f2ce:	90                   	nop
c001f2cf:	83 c4 0c             	add    esp,0xc
c001f2d2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2d4 <AVX::~AVX()>:
c001f2d4:	83 ec 0c             	sub    esp,0xc
c001f2d7:	83 ec 0c             	sub    esp,0xc
c001f2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2de:	e8 cd ff ff ff       	call   c001f2b0 <AVX::~AVX()>
c001f2e3:	83 c4 10             	add    esp,0x10
c001f2e6:	83 ec 08             	sub    esp,0x8
c001f2e9:	68 58 01 00 00       	push   0x158
c001f2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f2:	e8 24 fc fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f2f7:	83 c4 10             	add    esp,0x10
c001f2fa:	83 c4 0c             	add    esp,0xc
c001f2fd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f2fe <MMX::~MMX()>:
c001f2fe:	83 ec 0c             	sub    esp,0xc
c001f301:	ba c0 28 02 c0       	mov    edx,0xc00228c0
c001f306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30a:	89 10                	mov    DWORD PTR [eax],edx
c001f30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f310:	83 ec 0c             	sub    esp,0xc
c001f313:	50                   	push   eax
c001f314:	e8 07 16 ff ff       	call   c0010920 <FPU::~FPU()>
c001f319:	83 c4 10             	add    esp,0x10
c001f31c:	90                   	nop
c001f31d:	83 c4 0c             	add    esp,0xc
c001f320:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f322 <MMX::~MMX()>:
c001f322:	83 ec 0c             	sub    esp,0xc
c001f325:	83 ec 0c             	sub    esp,0xc
c001f328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f32c:	e8 cd ff ff ff       	call   c001f2fe <MMX::~MMX()>
c001f331:	83 c4 10             	add    esp,0x10
c001f334:	83 ec 08             	sub    esp,0x8
c001f337:	68 58 01 00 00       	push   0x158
c001f33c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f340:	e8 d6 fb fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f345:	83 c4 10             	add    esp,0x10
c001f348:	83 c4 0c             	add    esp,0xc
c001f34b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f34c <SSE::~SSE()>:
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	ba 00 29 02 c0       	mov    edx,0xc0022900
c001f354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f358:	89 10                	mov    DWORD PTR [eax],edx
c001f35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35e:	83 ec 0c             	sub    esp,0xc
c001f361:	50                   	push   eax
c001f362:	e8 b9 15 ff ff       	call   c0010920 <FPU::~FPU()>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	90                   	nop
c001f36b:	83 c4 0c             	add    esp,0xc
c001f36e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f370 <SSE::~SSE()>:
c001f370:	83 ec 0c             	sub    esp,0xc
c001f373:	83 ec 0c             	sub    esp,0xc
c001f376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f37a:	e8 cd ff ff ff       	call   c001f34c <SSE::~SSE()>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	83 ec 08             	sub    esp,0x8
c001f385:	68 58 01 00 00       	push   0x158
c001f38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38e:	e8 88 fb fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	83 c4 0c             	add    esp,0xc
c001f399:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f39a <x87::~x87()>:
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	ba 40 29 02 c0       	mov    edx,0xc0022940
c001f3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a6:	89 10                	mov    DWORD PTR [eax],edx
c001f3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ac:	83 ec 0c             	sub    esp,0xc
c001f3af:	50                   	push   eax
c001f3b0:	e8 6b 15 ff ff       	call   c0010920 <FPU::~FPU()>
c001f3b5:	83 c4 10             	add    esp,0x10
c001f3b8:	90                   	nop
c001f3b9:	83 c4 0c             	add    esp,0xc
c001f3bc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f3be <x87::~x87()>:
c001f3be:	83 ec 0c             	sub    esp,0xc
c001f3c1:	83 ec 0c             	sub    esp,0xc
c001f3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3c8:	e8 cd ff ff ff       	call   c001f39a <x87::~x87()>
c001f3cd:	83 c4 10             	add    esp,0x10
c001f3d0:	83 ec 08             	sub    esp,0x8
c001f3d3:	68 58 01 00 00       	push   0x158
c001f3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3dc:	e8 3a fb fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f3e1:	83 c4 10             	add    esp,0x10
c001f3e4:	83 c4 0c             	add    esp,0xc
c001f3e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3e8 <IOAPIC::~IOAPIC()>:
c001f3e8:	83 ec 0c             	sub    esp,0xc
c001f3eb:	ba 98 2a 02 c0       	mov    edx,0xc0022a98
c001f3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f4:	89 10                	mov    DWORD PTR [eax],edx
c001f3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fa:	83 ec 0c             	sub    esp,0xc
c001f3fd:	50                   	push   eax
c001f3fe:	e8 a5 0e ff ff       	call   c00102a8 <Device::~Device()>
c001f403:	83 c4 10             	add    esp,0x10
c001f406:	90                   	nop
c001f407:	83 c4 0c             	add    esp,0xc
c001f40a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f40c <IOAPIC::~IOAPIC()>:
c001f40c:	83 ec 0c             	sub    esp,0xc
c001f40f:	83 ec 0c             	sub    esp,0xc
c001f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f416:	e8 cd ff ff ff       	call   c001f3e8 <IOAPIC::~IOAPIC()>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	83 ec 08             	sub    esp,0x8
c001f421:	68 68 01 00 00       	push   0x168
c001f426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f42a:	e8 ec fa fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	83 c4 0c             	add    esp,0xc
c001f435:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f436 <APIC::~APIC()>:
c001f436:	83 ec 0c             	sub    esp,0xc
c001f439:	ba 50 2a 02 c0       	mov    edx,0xc0022a50
c001f43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f442:	89 10                	mov    DWORD PTR [eax],edx
c001f444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f448:	83 ec 0c             	sub    esp,0xc
c001f44b:	50                   	push   eax
c001f44c:	e8 8d 19 ff ff       	call   c0010dde <InterruptController::~InterruptController()>
c001f451:	83 c4 10             	add    esp,0x10
c001f454:	90                   	nop
c001f455:	83 c4 0c             	add    esp,0xc
c001f458:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f45a <APIC::~APIC()>:
c001f45a:	83 ec 0c             	sub    esp,0xc
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f464:	e8 cd ff ff ff       	call   c001f436 <APIC::~APIC()>
c001f469:	83 c4 10             	add    esp,0x10
c001f46c:	83 ec 08             	sub    esp,0x8
c001f46f:	68 58 21 00 00       	push   0x2158
c001f474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f478:	e8 9e fa fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f47d:	83 c4 10             	add    esp,0x10
c001f480:	83 c4 0c             	add    esp,0xc
c001f483:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f484 <PIC::~PIC()>:
c001f484:	83 ec 0c             	sub    esp,0xc
c001f487:	ba e8 2a 02 c0       	mov    edx,0xc0022ae8
c001f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f490:	89 10                	mov    DWORD PTR [eax],edx
c001f492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f496:	83 ec 0c             	sub    esp,0xc
c001f499:	50                   	push   eax
c001f49a:	e8 3f 19 ff ff       	call   c0010dde <InterruptController::~InterruptController()>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	90                   	nop
c001f4a3:	83 c4 0c             	add    esp,0xc
c001f4a6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f4a8 <PIC::~PIC()>:
c001f4a8:	83 ec 0c             	sub    esp,0xc
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4b2:	e8 cd ff ff ff       	call   c001f484 <PIC::~PIC()>
c001f4b7:	83 c4 10             	add    esp,0x10
c001f4ba:	83 ec 08             	sub    esp,0x8
c001f4bd:	68 58 21 00 00       	push   0x2158
c001f4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c6:	e8 50 fa fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f4cb:	83 c4 10             	add    esp,0x10
c001f4ce:	83 c4 0c             	add    esp,0xc
c001f4d1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4d2 <APICTimer::~APICTimer()>:
c001f4d2:	83 ec 0c             	sub    esp,0xc
c001f4d5:	ba 3c 2b 02 c0       	mov    edx,0xc0022b3c
c001f4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4de:	89 10                	mov    DWORD PTR [eax],edx
c001f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	50                   	push   eax
c001f4e8:	e8 5d 2f ff ff       	call   c001244a <Timer::~Timer()>
c001f4ed:	83 c4 10             	add    esp,0x10
c001f4f0:	90                   	nop
c001f4f1:	83 c4 0c             	add    esp,0xc
c001f4f4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4f6 <APICTimer::~APICTimer()>:
c001f4f6:	83 ec 0c             	sub    esp,0xc
c001f4f9:	83 ec 0c             	sub    esp,0xc
c001f4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f500:	e8 cd ff ff ff       	call   c001f4d2 <APICTimer::~APICTimer()>
c001f505:	83 c4 10             	add    esp,0x10
c001f508:	83 ec 08             	sub    esp,0x8
c001f50b:	68 60 01 00 00       	push   0x160
c001f510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f514:	e8 02 fa fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	83 c4 0c             	add    esp,0xc
c001f51f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f520 <PIT::~PIT()>:
c001f520:	83 ec 0c             	sub    esp,0xc
c001f523:	ba 8c 2b 02 c0       	mov    edx,0xc0022b8c
c001f528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52c:	89 10                	mov    DWORD PTR [eax],edx
c001f52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f532:	83 ec 0c             	sub    esp,0xc
c001f535:	50                   	push   eax
c001f536:	e8 0f 2f ff ff       	call   c001244a <Timer::~Timer()>
c001f53b:	83 c4 10             	add    esp,0x10
c001f53e:	90                   	nop
c001f53f:	83 c4 0c             	add    esp,0xc
c001f542:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f544 <PIT::~PIT()>:
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	83 ec 0c             	sub    esp,0xc
c001f54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f54e:	e8 cd ff ff ff       	call   c001f520 <PIT::~PIT()>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	83 ec 08             	sub    esp,0x8
c001f559:	68 5c 01 00 00       	push   0x15c
c001f55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f562:	e8 b4 f9 fe ff       	call   c000ef1b <operator delete(void*, unsigned long)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	83 c4 0c             	add    esp,0xc
c001f56d:	c3                   	ret    
